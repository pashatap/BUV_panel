
BUV_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccbc  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056e8  0800ce70  0800ce70  0001ce70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012558  08012558  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08012558  08012558  00022558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012560  08012560  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012560  08012560  00022560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012564  08012564  00022564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08012568  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          00000b1c  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ba8  20000ba8  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b99b  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ab4  00000000  00000000  0004ba57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  0004f510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  00050bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003e8b  00000000  00000000  00052110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d489  00000000  00000000  00055f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e142a  00000000  00000000  00073424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015484e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006520  00000000  00000000  001548a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ce54 	.word	0x0800ce54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	0800ce54 	.word	0x0800ce54

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_uldivmod>:
 8000b18:	b953      	cbnz	r3, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1a:	b94a      	cbnz	r2, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bf08      	it	eq
 8000b20:	2800      	cmpeq	r0, #0
 8000b22:	bf1c      	itt	ne
 8000b24:	f04f 31ff 	movne.w	r1, #4294967295
 8000b28:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2c:	f000 b974 	b.w	8000e18 <__aeabi_idiv0>
 8000b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b38:	f000 f806 	bl	8000b48 <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <__udivmoddi4>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	9d08      	ldr	r5, [sp, #32]
 8000b4e:	4604      	mov	r4, r0
 8000b50:	468e      	mov	lr, r1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d14d      	bne.n	8000bf2 <__udivmoddi4+0xaa>
 8000b56:	428a      	cmp	r2, r1
 8000b58:	4694      	mov	ip, r2
 8000b5a:	d969      	bls.n	8000c30 <__udivmoddi4+0xe8>
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	b152      	cbz	r2, 8000b78 <__udivmoddi4+0x30>
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	f1c2 0120 	rsb	r1, r2, #32
 8000b6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b72:	ea41 0e03 	orr.w	lr, r1, r3
 8000b76:	4094      	lsls	r4, r2
 8000b78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b7c:	0c21      	lsrs	r1, r4, #16
 8000b7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b82:	fa1f f78c 	uxth.w	r7, ip
 8000b86:	fb08 e316 	mls	r3, r8, r6, lr
 8000b8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b8e:	fb06 f107 	mul.w	r1, r6, r7
 8000b92:	4299      	cmp	r1, r3
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x64>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9e:	f080 811f 	bcs.w	8000de0 <__udivmoddi4+0x298>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 811c 	bls.w	8000de0 <__udivmoddi4+0x298>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	4463      	add	r3, ip
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 f707 	mul.w	r7, r0, r7
 8000bc0:	42a7      	cmp	r7, r4
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x92>
 8000bc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bcc:	f080 810a 	bcs.w	8000de4 <__udivmoddi4+0x29c>
 8000bd0:	42a7      	cmp	r7, r4
 8000bd2:	f240 8107 	bls.w	8000de4 <__udivmoddi4+0x29c>
 8000bd6:	4464      	add	r4, ip
 8000bd8:	3802      	subs	r0, #2
 8000bda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bde:	1be4      	subs	r4, r4, r7
 8000be0:	2600      	movs	r6, #0
 8000be2:	b11d      	cbz	r5, 8000bec <__udivmoddi4+0xa4>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0xc2>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80ef 	beq.w	8000dda <__udivmoddi4+0x292>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x160>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0xd4>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80f9 	bhi.w	8000e0e <__udivmoddi4+0x2c6>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	469e      	mov	lr, r3
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e0      	beq.n	8000bec <__udivmoddi4+0xa4>
 8000c2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c2e:	e7dd      	b.n	8000bec <__udivmoddi4+0xa4>
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xec>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f282 	clz	r2, r2
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	f040 8092 	bne.w	8000d62 <__udivmoddi4+0x21a>
 8000c3e:	eba1 010c 	sub.w	r1, r1, ip
 8000c42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c46:	fa1f fe8c 	uxth.w	lr, ip
 8000c4a:	2601      	movs	r6, #1
 8000c4c:	0c20      	lsrs	r0, r4, #16
 8000c4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c52:	fb07 1113 	mls	r1, r7, r3, r1
 8000c56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c5a:	fb0e f003 	mul.w	r0, lr, r3
 8000c5e:	4288      	cmp	r0, r1
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x12c>
 8000c62:	eb1c 0101 	adds.w	r1, ip, r1
 8000c66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x12a>
 8000c6c:	4288      	cmp	r0, r1
 8000c6e:	f200 80cb 	bhi.w	8000e08 <__udivmoddi4+0x2c0>
 8000c72:	4643      	mov	r3, r8
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c84:	fb0e fe00 	mul.w	lr, lr, r0
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x156>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c94:	d202      	bcs.n	8000c9c <__udivmoddi4+0x154>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	f200 80bb 	bhi.w	8000e12 <__udivmoddi4+0x2ca>
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ca6:	e79c      	b.n	8000be2 <__udivmoddi4+0x9a>
 8000ca8:	f1c6 0720 	rsb	r7, r6, #32
 8000cac:	40b3      	lsls	r3, r6
 8000cae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	431c      	orrs	r4, r3
 8000cc0:	40f9      	lsrs	r1, r7
 8000cc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000cca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cce:	0c20      	lsrs	r0, r4, #16
 8000cd0:	fa1f fe8c 	uxth.w	lr, ip
 8000cd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000cd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cdc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce6:	d90b      	bls.n	8000d00 <__udivmoddi4+0x1b8>
 8000ce8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cf0:	f080 8088 	bcs.w	8000e04 <__udivmoddi4+0x2bc>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f240 8085 	bls.w	8000e04 <__udivmoddi4+0x2bc>
 8000cfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	1a09      	subs	r1, r1, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d08:	fb09 1110 	mls	r1, r9, r0, r1
 8000d0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d14:	458e      	cmp	lr, r1
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x1e2>
 8000d18:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d20:	d26c      	bcs.n	8000dfc <__udivmoddi4+0x2b4>
 8000d22:	458e      	cmp	lr, r1
 8000d24:	d96a      	bls.n	8000dfc <__udivmoddi4+0x2b4>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4461      	add	r1, ip
 8000d2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d32:	eba1 010e 	sub.w	r1, r1, lr
 8000d36:	42a1      	cmp	r1, r4
 8000d38:	46c8      	mov	r8, r9
 8000d3a:	46a6      	mov	lr, r4
 8000d3c:	d356      	bcc.n	8000dec <__udivmoddi4+0x2a4>
 8000d3e:	d053      	beq.n	8000de8 <__udivmoddi4+0x2a0>
 8000d40:	b15d      	cbz	r5, 8000d5a <__udivmoddi4+0x212>
 8000d42:	ebb3 0208 	subs.w	r2, r3, r8
 8000d46:	eb61 010e 	sbc.w	r1, r1, lr
 8000d4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d52:	40f1      	lsrs	r1, r6
 8000d54:	431f      	orrs	r7, r3
 8000d56:	e9c5 7100 	strd	r7, r1, [r5]
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	f1c2 0320 	rsb	r3, r2, #32
 8000d66:	40d8      	lsrs	r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000d70:	4091      	lsls	r1, r2
 8000d72:	4301      	orrs	r1, r0
 8000d74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d78:	fa1f fe8c 	uxth.w	lr, ip
 8000d7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d80:	fb07 3610 	mls	r6, r7, r0, r3
 8000d84:	0c0b      	lsrs	r3, r1, #16
 8000d86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d8e:	429e      	cmp	r6, r3
 8000d90:	fa04 f402 	lsl.w	r4, r4, r2
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x260>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9e:	d22f      	bcs.n	8000e00 <__udivmoddi4+0x2b8>
 8000da0:	429e      	cmp	r6, r3
 8000da2:	d92d      	bls.n	8000e00 <__udivmoddi4+0x2b8>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1b9b      	subs	r3, r3, r6
 8000daa:	b289      	uxth	r1, r1
 8000dac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000db0:	fb07 3316 	mls	r3, r7, r6, r3
 8000db4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x28a>
 8000dc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dc8:	d216      	bcs.n	8000df8 <__udivmoddi4+0x2b0>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d914      	bls.n	8000df8 <__udivmoddi4+0x2b0>
 8000dce:	3e02      	subs	r6, #2
 8000dd0:	4461      	add	r1, ip
 8000dd2:	1ac9      	subs	r1, r1, r3
 8000dd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dd8:	e738      	b.n	8000c4c <__udivmoddi4+0x104>
 8000dda:	462e      	mov	r6, r5
 8000ddc:	4628      	mov	r0, r5
 8000dde:	e705      	b.n	8000bec <__udivmoddi4+0xa4>
 8000de0:	4606      	mov	r6, r0
 8000de2:	e6e3      	b.n	8000bac <__udivmoddi4+0x64>
 8000de4:	4618      	mov	r0, r3
 8000de6:	e6f8      	b.n	8000bda <__udivmoddi4+0x92>
 8000de8:	454b      	cmp	r3, r9
 8000dea:	d2a9      	bcs.n	8000d40 <__udivmoddi4+0x1f8>
 8000dec:	ebb9 0802 	subs.w	r8, r9, r2
 8000df0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df4:	3801      	subs	r0, #1
 8000df6:	e7a3      	b.n	8000d40 <__udivmoddi4+0x1f8>
 8000df8:	4646      	mov	r6, r8
 8000dfa:	e7ea      	b.n	8000dd2 <__udivmoddi4+0x28a>
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	e794      	b.n	8000d2a <__udivmoddi4+0x1e2>
 8000e00:	4640      	mov	r0, r8
 8000e02:	e7d1      	b.n	8000da8 <__udivmoddi4+0x260>
 8000e04:	46d0      	mov	r8, sl
 8000e06:	e77b      	b.n	8000d00 <__udivmoddi4+0x1b8>
 8000e08:	3b02      	subs	r3, #2
 8000e0a:	4461      	add	r1, ip
 8000e0c:	e732      	b.n	8000c74 <__udivmoddi4+0x12c>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e709      	b.n	8000c26 <__udivmoddi4+0xde>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	e742      	b.n	8000c9e <__udivmoddi4+0x156>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <CRC_16_Modbus>:

// Поддерживаются функции 0x03, 0x04, 0x06, 0x10, 0x17


CRC_16_Modbus(uint8_t Buffer[], uint8_t Len, uint32_t pointer_out) //Рассчёт CRC
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	460b      	mov	r3, r1
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	72fb      	strb	r3, [r7, #11]
	uint8_t OutTable[3];

	uint16_t  i;
	uint8_t  j;
	uint16_t TempByte, CurrentCRC = 0xFFFF;
 8000e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2e:	833b      	strh	r3, [r7, #24]

	uint8_t HiByte;
	uint8_t LoByte;
	//make byte 16 bit format

	for ( i = 0; i < Len; i++ )
 8000e30:	2300      	movs	r3, #0
 8000e32:	83fb      	strh	r3, [r7, #30]
 8000e34:	e02c      	b.n	8000e90 <CRC_16_Modbus+0x74>
	{
	  TempByte = Buffer[i];
 8000e36:	8bfb      	ldrh	r3, [r7, #30]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	837b      	strh	r3, [r7, #26]

	  for ( j = 0; j < 8; j++ )
 8000e40:	2300      	movs	r3, #0
 8000e42:	777b      	strb	r3, [r7, #29]
 8000e44:	e01e      	b.n	8000e84 <CRC_16_Modbus+0x68>
	  {
		  if ( (CurrentCRC & 0x0001) == (TempByte & 0x0001) )
 8000e46:	8b3a      	ldrh	r2, [r7, #24]
 8000e48:	8b7b      	ldrh	r3, [r7, #26]
 8000e4a:	4053      	eors	r3, r2
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d106      	bne.n	8000e64 <CRC_16_Modbus+0x48>
		  {
			  //right shift crc
			  CurrentCRC >>= 1;
 8000e56:	8b3b      	ldrh	r3, [r7, #24]
 8000e58:	085b      	lsrs	r3, r3, #1
 8000e5a:	833b      	strh	r3, [r7, #24]
			  //right shift data
			  TempByte >>= 1;
 8000e5c:	8b7b      	ldrh	r3, [r7, #26]
 8000e5e:	085b      	lsrs	r3, r3, #1
 8000e60:	837b      	strh	r3, [r7, #26]
 8000e62:	e00c      	b.n	8000e7e <CRC_16_Modbus+0x62>
		  }
		  else
		  {
			  CurrentCRC >>= 1;
 8000e64:	8b3b      	ldrh	r3, [r7, #24]
 8000e66:	085b      	lsrs	r3, r3, #1
 8000e68:	833b      	strh	r3, [r7, #24]
			  TempByte >>= 1;
 8000e6a:	8b7b      	ldrh	r3, [r7, #26]
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	837b      	strh	r3, [r7, #26]
			  CurrentCRC = CurrentCRC ^ 0xA001; /* 1000 0100 0000 1000 = x^16 + x^12 + x^5 + 1 */
 8000e70:	8b3b      	ldrh	r3, [r7, #24]
 8000e72:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000e76:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	833b      	strh	r3, [r7, #24]
	  for ( j = 0; j < 8; j++ )
 8000e7e:	7f7b      	ldrb	r3, [r7, #29]
 8000e80:	3301      	adds	r3, #1
 8000e82:	777b      	strb	r3, [r7, #29]
 8000e84:	7f7b      	ldrb	r3, [r7, #29]
 8000e86:	2b07      	cmp	r3, #7
 8000e88:	d9dd      	bls.n	8000e46 <CRC_16_Modbus+0x2a>
	for ( i = 0; i < Len; i++ )
 8000e8a:	8bfb      	ldrh	r3, [r7, #30]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	83fb      	strh	r3, [r7, #30]
 8000e90:	7afb      	ldrb	r3, [r7, #11]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	8bfa      	ldrh	r2, [r7, #30]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3cd      	bcc.n	8000e36 <CRC_16_Modbus+0x1a>
		  }
	  }
	}

	HiByte = 0x00FF & CurrentCRC;
 8000e9a:	8b3b      	ldrh	r3, [r7, #24]
 8000e9c:	75fb      	strb	r3, [r7, #23]
	CurrentCRC = 0xFF00 & CurrentCRC;
 8000e9e:	8b3b      	ldrh	r3, [r7, #24]
 8000ea0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ea4:	833b      	strh	r3, [r7, #24]
	CurrentCRC = CurrentCRC >> 8;
 8000ea6:	8b3b      	ldrh	r3, [r7, #24]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	833b      	strh	r3, [r7, #24]
	LoByte = 0x00FF & CurrentCRC;
 8000eac:	8b3b      	ldrh	r3, [r7, #24]
 8000eae:	75bb      	strb	r3, [r7, #22]

	OutTable[0] = HiByte;
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	743b      	strb	r3, [r7, #16]
	OutTable[1] = LoByte;
 8000eb4:	7dbb      	ldrb	r3, [r7, #22]
 8000eb6:	747b      	strb	r3, [r7, #17]
	OutTable[2] = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	74bb      	strb	r3, [r7, #18]


	if( (Buffer[Len] == HiByte) & (Buffer[Len+1] == LoByte) )
 8000ebc:	7afb      	ldrb	r3, [r7, #11]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	7dfa      	ldrb	r2, [r7, #23]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	bf0c      	ite	eq
 8000eca:	2301      	moveq	r3, #1
 8000ecc:	2300      	movne	r3, #0
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	7afb      	ldrb	r3, [r7, #11]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	440b      	add	r3, r1
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	7db9      	ldrb	r1, [r7, #22]
 8000edc:	4299      	cmp	r1, r3
 8000ede:	bf0c      	ite	eq
 8000ee0:	2301      	moveq	r3, #1
 8000ee2:	2300      	movne	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <CRC_16_Modbus+0xd6>
	{
		OutTable[2] = 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	74bb      	strb	r3, [r7, #18]
	}

	memcpy(pointer_out, &OutTable, 3);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	8819      	ldrh	r1, [r3, #0]
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	8011      	strh	r1, [r2, #0]
 8000f00:	7093      	strb	r3, [r2, #2]
}
 8000f02:	bf00      	nop
 8000f04:	4618      	mov	r0, r3
 8000f06:	3724      	adds	r7, #36	; 0x24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <Slave_PORT_Processor>:

void Slave_PORT_Processor(uint32_t pointer_DB)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	60fb      	str	r3, [r7, #12]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60bb      	str	r3, [r7, #8]

	if(USART_port->a.SR & 0x80) // если прерывание по передаче
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d038      	beq.n	8000fa0 <Slave_PORT_Processor+0x90>
	{
		if(Slave_DB->a.TX_count)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	895b      	ldrh	r3, [r3, #10]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d034      	beq.n	8000fa0 <Slave_PORT_Processor+0x90>
		{
			GPIOF->BSRR = GPIO_PIN_8;		//Tx On
 8000f36:	4b32      	ldr	r3, [pc, #200]	; (8001000 <Slave_PORT_Processor+0xf0>)
 8000f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3c:	619a      	str	r2, [r3, #24]

			Slave_DB->a.Roll++;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	899b      	ldrh	r3, [r3, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	819a      	strh	r2, [r3, #12]
			if(Slave_DB->a.Roll > Slave_DB->a.Roll_max)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	899a      	ldrh	r2, [r3, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	89db      	ldrh	r3, [r3, #14]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d924      	bls.n	8000fa0 <Slave_PORT_Processor+0x90>
			{

				Slave_DB->a.Roll= 0;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	819a      	strh	r2, [r3, #12]

				if(Slave_DB->a.TX_count < Slave_DB->a.TX_incr)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	895a      	ldrh	r2, [r3, #10]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	891b      	ldrh	r3, [r3, #8]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d20b      	bcs.n	8000f80 <Slave_PORT_Processor+0x70>
				{
					Slave_DB->a.TX_count = 0;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	815a      	strh	r2, [r3, #10]
					USART_port->a.CR1 = 0x202c;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	f242 022c 	movw	r2, #8236	; 0x202c
 8000f74:	60da      	str	r2, [r3, #12]
					GPIOF->BSRR = GPIO_PIN_8 << 16;	//Tx Off
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <Slave_PORT_Processor+0xf0>)
 8000f78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f7c:	619a      	str	r2, [r3, #24]
 8000f7e:	e00f      	b.n	8000fa0 <Slave_PORT_Processor+0x90>
				}
				else
				{
					USART_port->a.DR = Slave_DB->a.TX_buff[Slave_DB->a.TX_incr];
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	891b      	ldrh	r3, [r3, #8]
 8000f84:	461a      	mov	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4413      	add	r3, r2
 8000f8a:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	605a      	str	r2, [r3, #4]
					Slave_DB->a.TX_incr++;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	891b      	ldrh	r3, [r3, #8]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	811a      	strh	r2, [r3, #8]
			}

		}
	}

	if(!Slave_DB->a.TX_count)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	895b      	ldrh	r3, [r3, #10]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d125      	bne.n	8000ff4 <Slave_PORT_Processor+0xe4>
	{
		if( (USART_port->a.SR & 0x20) ) // если прерывание по приёму
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d019      	beq.n	8000fe8 <Slave_PORT_Processor+0xd8>
		{

			if(Slave_DB->a.schet > 3){Slave_DB->a.RX_buff_pointer = 0;}
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8a1b      	ldrh	r3, [r3, #16]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d902      	bls.n	8000fc2 <Slave_PORT_Processor+0xb2>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	715a      	strb	r2, [r3, #5]
			Slave_DB->a.RX_buff[Slave_DB->a.RX_buff_pointer] = 0x000000FF & (USART_port->a.DR);
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	795b      	ldrb	r3, [r3, #5]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	440b      	add	r3, r1
 8000fd2:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			Slave_DB->a.RX_buff_pointer++;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	795b      	ldrb	r3, [r3, #5]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	715a      	strb	r2, [r3, #5]
			Slave_DB->a.schet=0;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	821a      	strh	r2, [r3, #16]
		}

		USART_port->a.CR1 |= 0x20;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f043 0220 	orr.w	r2, r3, #32
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
	}

}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40021400 	.word	0x40021400

08001004 <Slave_Processor>:

void Slave_Processor(uint32_t pointer_DB)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b08d      	sub	sp, #52	; 0x34
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	613b      	str	r3, [r7, #16]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]

	if( Slave_DB->a.RX_buff[0] == Slave_DB->a.MB_Addr )
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8465 	bne.w	80018f0 <Slave_Processor+0x8ec>
	{
		if( Slave_DB->a.RX_buff_pointer == 8 )
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	795b      	ldrb	r3, [r3, #5]
 800102a:	2b08      	cmp	r3, #8
 800102c:	f040 81f1 	bne.w	8001412 <Slave_Processor+0x40e>
		{

				if ((Slave_DB->a.RX_buff[1] == 3) | (Slave_DB->a.RX_buff[1] == 4) | (Slave_DB->a.RX_buff[1] == 6))
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001036:	2b03      	cmp	r3, #3
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2da      	uxtb	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf0c      	ite	eq
 800104a:	2301      	moveq	r3, #1
 800104c:	2300      	movne	r3, #0
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800105c:	2b06      	cmp	r3, #6
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 81be 	beq.w	80013ea <Slave_Processor+0x3e6>
					{
						Slave_DB->a.CRC_Calc_out_table[2] = 0;
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
						if(Slave_DB->a.RX_buff[1] <= 6) {CRC_16_Modbus(Slave_DB->a.RX_buff, 6, &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800107c:	2b06      	cmp	r3, #6
 800107e:	d809      	bhi.n	8001094 <Slave_Processor+0x90>
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 800108c:	461a      	mov	r2, r3
 800108e:	2106      	movs	r1, #6
 8001090:	f7ff fec4 	bl	8000e1c <CRC_16_Modbus>

						if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 81a5 	beq.w	80013ea <Slave_Processor+0x3e6>
						{

							if(Slave_DB->a.RX_buff[1] == 6) // обработка функции 0x06
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d174      	bne.n	8001194 <Slave_Processor+0x190>
							{

								Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b29a      	uxth	r2, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.RX_buff[4];
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	f893 2511 	ldrb.w	r2, [r3, #1297]	; 0x511
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80010ec:	b211      	sxth	r1, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	3308      	adds	r3, #8
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	460a      	mov	r2, r1
 80010f8:	805a      	strh	r2, [r3, #2]
								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.Registers[Slave_DB->a.StartAddr] << 8;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	3308      	adds	r3, #8
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800110c:	021a      	lsls	r2, r3, #8
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001114:	b211      	sxth	r1, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	3308      	adds	r3, #8
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	460a      	mov	r2, r1
 8001120:	805a      	strh	r2, [r3, #2]
								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.Registers[Slave_DB->a.StartAddr] | Slave_DB->a.RX_buff[5];
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	3308      	adds	r3, #8
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 800113a:	b21b      	sxth	r3, r3
 800113c:	6939      	ldr	r1, [r7, #16]
 800113e:	f8b1 1610 	ldrh.w	r1, [r1, #1552]	; 0x610
 8001142:	4608      	mov	r0, r1
 8001144:	4313      	orrs	r3, r2
 8001146:	b219      	sxth	r1, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	f100 0308 	add.w	r3, r0, #8
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	460a      	mov	r2, r1
 8001154:	805a      	strh	r2, [r3, #2]

								for(int i=0;i<8;i++)
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800115a:	e00f      	b.n	800117c <Slave_Processor+0x178>
								{
									Slave_DB->a.TX_buff[i] = Slave_DB->a.RX_buff[i];
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	4413      	add	r3, r2
 8001162:	f203 530d 	addw	r3, r3, #1293	; 0x50d
 8001166:	7819      	ldrb	r1, [r3, #0]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116c:	4413      	add	r3, r2
 800116e:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001172:	460a      	mov	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]
								for(int i=0;i<8;i++)
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	3301      	adds	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117e:	2b07      	cmp	r3, #7
 8001180:	ddec      	ble.n	800115c <Slave_Processor+0x158>
								}

								Slave_DB->a.TX_count = 8;
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	2208      	movs	r2, #8
 8001186:	815a      	strh	r2, [r3, #10]
								Slave_DB->a.TX_incr = 0;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	2200      	movs	r2, #0
 800118c:	811a      	strh	r2, [r3, #8]
								Slave_DB->a.RX_buff_pointer = 0;
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	2200      	movs	r2, #0
 8001192:	715a      	strb	r2, [r3, #5]

							}

							if((Slave_DB->a.RX_buff[1] == 3) | (Slave_DB->a.RX_buff[1] == 4)) // обработка функции 0x03 и 0x04
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800119a:	2b03      	cmp	r3, #3
 800119c:	bf0c      	ite	eq
 800119e:	2301      	moveq	r3, #1
 80011a0:	2300      	movne	r3, #0
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8116 	beq.w	80013ea <Slave_Processor+0x3e6>
							{

								Slave_DB->a.TX_buff[0] = Slave_DB->a.RX_buff[0];
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
								Slave_DB->a.TX_buff[1] = Slave_DB->a.RX_buff[1];
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	f893 250e 	ldrb.w	r2, [r3, #1294]	; 0x50e
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f

								Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 80011dc:	b29a      	uxth	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8001200:	b29b      	uxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b29a      	uxth	r2, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

								Slave_DB->a.Quanity = Slave_DB->a.RX_buff[4];
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8001212:	b29a      	uxth	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
								Slave_DB->a.Quanity = Slave_DB->a.Quanity << 8;
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b29a      	uxth	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
								Slave_DB->a.Quanity = Slave_DB->a.Quanity | Slave_DB->a.RX_buff[5];
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	f8b3 2612 	ldrh.w	r2, [r3, #1554]	; 0x612
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8001236:	b29b      	uxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b29a      	uxth	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612

								Slave_DB->a.TX_buff[2] = Slave_DB->a.Quanity * 2;
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001248:	b2db      	uxtb	r3, r3
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

								if(Slave_DB->a.RX_buff[1] == 4)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800125a:	2b04      	cmp	r3, #4
 800125c:	d14a      	bne.n	80012f4 <Slave_Processor+0x2f0>
								{
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
 8001262:	e03f      	b.n	80012e4 <Slave_Processor+0x2e0>
									{
										Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Input_Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800126a:	4619      	mov	r1, r3
 800126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126e:	0fda      	lsrs	r2, r3, #31
 8001270:	4413      	add	r3, r2
 8001272:	105b      	asrs	r3, r3, #1
 8001274:	18ca      	adds	r2, r1, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f502 7284 	add.w	r2, r2, #264	; 0x108
 800127c:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	3304      	adds	r3, #4
 8001284:	b2d1      	uxtb	r1, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4413      	add	r3, r2
 800128a:	460a      	mov	r2, r1
 800128c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
										Slave_DB->a.TempRegister = Slave_DB->a.Input_Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001296:	4619      	mov	r1, r3
 8001298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129a:	0fda      	lsrs	r2, r3, #31
 800129c:	4413      	add	r3, r2
 800129e:	105b      	asrs	r3, r3, #1
 80012a0:	18ca      	adds	r2, r1, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80012a8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80012ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 80012be:	121b      	asrs	r3, r3, #8
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 80012ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d0:	3303      	adds	r3, #3
 80012d2:	b2d1      	uxtb	r1, r2
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4413      	add	r3, r2
 80012d8:	460a      	mov	r2, r1
 80012da:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80012de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e0:	3302      	adds	r3, #2
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80012ea:	461a      	mov	r2, r3
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	4293      	cmp	r3, r2
 80012f0:	dbb8      	blt.n	8001264 <Slave_Processor+0x260>
 80012f2:	e04b      	b.n	800138c <Slave_Processor+0x388>
									}
								}
								else
								{
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
 80012f8:	e041      	b.n	800137e <Slave_Processor+0x37a>
									{
										Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001300:	4619      	mov	r1, r3
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	0fda      	lsrs	r2, r3, #31
 8001306:	4413      	add	r3, r2
 8001308:	105b      	asrs	r3, r3, #1
 800130a:	440b      	add	r3, r1
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	3308      	adds	r3, #8
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	3304      	adds	r3, #4
 800131c:	b2d1      	uxtb	r1, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4413      	add	r3, r2
 8001322:	460a      	mov	r2, r1
 8001324:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
										Slave_DB->a.TempRegister = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800132e:	4619      	mov	r1, r3
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	0fda      	lsrs	r2, r3, #31
 8001334:	4413      	add	r3, r2
 8001336:	105b      	asrs	r3, r3, #1
 8001338:	440b      	add	r3, r1
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	3308      	adds	r3, #8
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800134a:	b21a      	sxth	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 8001358:	121b      	asrs	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	3303      	adds	r3, #3
 800136c:	b2d1      	uxtb	r1, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4413      	add	r3, r2
 8001372:	460a      	mov	r2, r1
 8001374:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	3302      	adds	r3, #2
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001384:	461a      	mov	r2, r3
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	4293      	cmp	r3, r2
 800138a:	dbb6      	blt.n	80012fa <Slave_Processor+0x2f6>
									}
								}

								uint8_t LenMess;
								LenMess = Slave_DB->a.TX_buff[2] + 5;
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001392:	3305      	adds	r3, #5
 8001394:	72fb      	strb	r3, [r7, #11]
								CRC_16_Modbus(Slave_DB->a.TX_buff, (LenMess - 2), &Slave_DB->a.CRC_Calc_out_table);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	3b02      	subs	r3, #2
 80013a0:	b2d9      	uxtb	r1, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80013a8:	461a      	mov	r2, r3
 80013aa:	f7ff fd37 	bl	8000e1c <CRC_16_Modbus>
								Slave_DB->a.TX_buff[LenMess - 1] = Slave_DB->a.CRC_Calc_out_table[1];
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	f892 160d 	ldrb.w	r1, [r2, #1549]	; 0x60d
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4413      	add	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
								Slave_DB->a.TX_buff[LenMess - 2] = Slave_DB->a.CRC_Calc_out_table[0];
 80013c2:	7afb      	ldrb	r3, [r7, #11]
 80013c4:	3b02      	subs	r3, #2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	f892 160c 	ldrb.w	r1, [r2, #1548]	; 0x60c
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4413      	add	r3, r2
 80013d0:	460a      	mov	r2, r1
 80013d2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

								Slave_DB->a.TX_count = LenMess;
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	b29a      	uxth	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	815a      	strh	r2, [r3, #10]
								Slave_DB->a.TX_incr = 0;
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	2200      	movs	r2, #0
 80013e2:	811a      	strh	r2, [r3, #8]
								Slave_DB->a.RX_buff_pointer = 0;
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2200      	movs	r2, #0
 80013e8:	715a      	strb	r2, [r3, #5]
							}

						}
					}

				if( Slave_DB->a.RX_buff[1] == 16 ) // зондирование для функции 0x10
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 80013f0:	2b10      	cmp	r3, #16
 80013f2:	d10e      	bne.n	8001412 <Slave_Processor+0x40e>
				{
					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[6];
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.LenLongMessage = Slave_DB->a.Quanity + 9;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001408:	b2db      	uxtb	r3, r3
 800140a:	3309      	adds	r3, #9
 800140c:	b2da      	uxtb	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	719a      	strb	r2, [r3, #6]
				}
		}

		if( Slave_DB->a.RX_buff_pointer == 11 )
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	795b      	ldrb	r3, [r3, #5]
 8001416:	2b0b      	cmp	r3, #11
 8001418:	d113      	bne.n	8001442 <Slave_Processor+0x43e>
		{
			if( Slave_DB->a.RX_buff[1] == 23 ) // зондирование для функции 0x17
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001420:	2b17      	cmp	r3, #23
 8001422:	d10e      	bne.n	8001442 <Slave_Processor+0x43e>
				{
					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[10];
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800142a:	b29a      	uxth	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.LenLongMessage = Slave_DB->a.Quanity + 13;
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001438:	b2db      	uxtb	r3, r3
 800143a:	330d      	adds	r3, #13
 800143c:	b2da      	uxtb	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	719a      	strb	r2, [r3, #6]
				}
		}


		if( Slave_DB->a.RX_buff[1] == 16 ) // обработка функции 0x10
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001448:	2b10      	cmp	r3, #16
 800144a:	f040 80dd 	bne.w	8001608 <Slave_Processor+0x604>
		{
			if( (Slave_DB->a.RX_buff_pointer == Slave_DB->a.LenLongMessage) )
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	795a      	ldrb	r2, [r3, #5]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	799b      	ldrb	r3, [r3, #6]
 8001456:	429a      	cmp	r2, r3
 8001458:	f040 80d6 	bne.w	8001608 <Slave_Processor+0x604>
			{
				Slave_DB->a.CRC_Calc_out_table[2] = 0;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
				if(Slave_DB->a.RX_buff[1] == 16) {CRC_16_Modbus(Slave_DB->a.RX_buff, (Slave_DB->a.LenLongMessage-2), &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800146a:	2b10      	cmp	r3, #16
 800146c:	d10c      	bne.n	8001488 <Slave_Processor+0x484>
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	799b      	ldrb	r3, [r3, #6]
 8001478:	3b02      	subs	r3, #2
 800147a:	b2d9      	uxtb	r1, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8001482:	461a      	mov	r2, r3
 8001484:	f7ff fcca 	bl	8000e1c <CRC_16_Modbus>

				if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80ba 	beq.w	8001608 <Slave_Processor+0x604>
				{

					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 800149a:	b29a      	uxth	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.RX_buff[6];i=i+2)
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
 80014ce:	e05f      	b.n	8001590 <Slave_Processor+0x58c>
					{
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.RX_buff[i+7];
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	3307      	adds	r3, #7
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4413      	add	r3, r2
 80014d8:	f893 150d 	ldrb.w	r1, [r3, #1293]	; 0x50d
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80014e2:	4618      	mov	r0, r3
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	0fda      	lsrs	r2, r3, #31
 80014e8:	4413      	add	r3, r2
 80014ea:	105b      	asrs	r3, r3, #1
 80014ec:	4403      	add	r3, r0
 80014ee:	b209      	sxth	r1, r1
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	3308      	adds	r3, #8
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	460a      	mov	r2, r1
 80014fa:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] << 8;
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001502:	4619      	mov	r1, r3
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	0fda      	lsrs	r2, r3, #31
 8001508:	4413      	add	r3, r2
 800150a:	105b      	asrs	r3, r3, #1
 800150c:	440b      	add	r3, r1
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	3308      	adds	r3, #8
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800151a:	0219      	lsls	r1, r3, #8
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001522:	4618      	mov	r0, r3
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	0fda      	lsrs	r2, r3, #31
 8001528:	4413      	add	r3, r2
 800152a:	105b      	asrs	r3, r3, #1
 800152c:	4403      	add	r3, r0
 800152e:	b209      	sxth	r1, r1
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	3308      	adds	r3, #8
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	460a      	mov	r2, r1
 800153a:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] | Slave_DB->a.RX_buff[i+8];
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001542:	4619      	mov	r1, r3
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	0fda      	lsrs	r2, r3, #31
 8001548:	4413      	add	r3, r2
 800154a:	105b      	asrs	r3, r3, #1
 800154c:	440b      	add	r3, r1
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	3308      	adds	r3, #8
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	3308      	adds	r3, #8
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4413      	add	r3, r2
 8001562:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 8001566:	b21a      	sxth	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800156e:	461c      	mov	r4, r3
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	0fd8      	lsrs	r0, r3, #31
 8001574:	4403      	add	r3, r0
 8001576:	105b      	asrs	r3, r3, #1
 8001578:	4423      	add	r3, r4
 800157a:	430a      	orrs	r2, r1
 800157c:	b211      	sxth	r1, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	3308      	adds	r3, #8
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	460a      	mov	r2, r1
 8001588:	805a      	strh	r2, [r3, #2]
					for(int i=0;i<Slave_DB->a.RX_buff[6];i=i+2)
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	3302      	adds	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8001596:	461a      	mov	r2, r3
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	4293      	cmp	r3, r2
 800159c:	db98      	blt.n	80014d0 <Slave_Processor+0x4cc>
					}

					for(int i=0;i<6;i++)
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e00f      	b.n	80015c4 <Slave_Processor+0x5c0>
					{Slave_DB->a.TX_buff[i] = Slave_DB->a.RX_buff[i];}
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	4413      	add	r3, r2
 80015aa:	f203 530d 	addw	r3, r3, #1293	; 0x50d
 80015ae:	7819      	ldrb	r1, [r3, #0]
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 80015ba:	460a      	mov	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<6;i++)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	ddec      	ble.n	80015a4 <Slave_Processor+0x5a0>

					CRC_16_Modbus(Slave_DB->a.TX_buff, 6, &Slave_DB->a.CRC_Calc_out_table);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80015d6:	461a      	mov	r2, r3
 80015d8:	2106      	movs	r1, #6
 80015da:	f7ff fc1f 	bl	8000e1c <CRC_16_Modbus>
					Slave_DB->a.TX_buff[6] = Slave_DB->a.CRC_Calc_out_table[0];
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f893 260c 	ldrb.w	r2, [r3, #1548]	; 0x60c
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
					Slave_DB->a.TX_buff[7] = Slave_DB->a.CRC_Calc_out_table[1];
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f893 260d 	ldrb.w	r2, [r3, #1549]	; 0x60d
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

					Slave_DB->a.TX_count = 8;
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	2208      	movs	r2, #8
 80015fa:	815a      	strh	r2, [r3, #10]
					Slave_DB->a.TX_incr = 0;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2200      	movs	r2, #0
 8001600:	811a      	strh	r2, [r3, #8]
					Slave_DB->a.RX_buff_pointer = 0;
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2200      	movs	r2, #0
 8001606:	715a      	strb	r2, [r3, #5]
				}
			}
		}

		if( Slave_DB->a.RX_buff[1] == 23 ) // обработка функции 0x17
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800160e:	2b17      	cmp	r3, #23
 8001610:	f040 816e 	bne.w	80018f0 <Slave_Processor+0x8ec>
		{
			if( (Slave_DB->a.RX_buff_pointer == Slave_DB->a.LenLongMessage) )
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	795a      	ldrb	r2, [r3, #5]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	799b      	ldrb	r3, [r3, #6]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 8167 	bne.w	80018f0 <Slave_Processor+0x8ec>
			{
				Slave_DB->a.CRC_Calc_out_table[2] = 0;
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
				if(Slave_DB->a.RX_buff[1] == 23) {CRC_16_Modbus(Slave_DB->a.RX_buff, (Slave_DB->a.LenLongMessage-2), &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001630:	2b17      	cmp	r3, #23
 8001632:	d10c      	bne.n	800164e <Slave_Processor+0x64a>
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	799b      	ldrb	r3, [r3, #6]
 800163e:	3b02      	subs	r3, #2
 8001640:	b2d9      	uxtb	r1, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8001648:	461a      	mov	r2, r3
 800164a:	f7ff fbe7 	bl	8000e1c <CRC_16_Modbus>

				if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 814b 	beq.w	80018f0 <Slave_Processor+0x8ec>
				{
					// Приём регистров
					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[6];
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8001660:	b29a      	uxth	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b29a      	uxth	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[7];
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f893 3514 	ldrb.w	r3, [r3, #1300]	; 0x514
 8001684:	b29b      	uxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b29a      	uxth	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.RX_buff[10];i=i+2)
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	e05f      	b.n	8001756 <Slave_Processor+0x752>
					{
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.RX_buff[i+11];
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	330b      	adds	r3, #11
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4413      	add	r3, r2
 800169e:	f893 150d 	ldrb.w	r1, [r3, #1293]	; 0x50d
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80016a8:	4618      	mov	r0, r3
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	0fda      	lsrs	r2, r3, #31
 80016ae:	4413      	add	r3, r2
 80016b0:	105b      	asrs	r3, r3, #1
 80016b2:	4403      	add	r3, r0
 80016b4:	b209      	sxth	r1, r1
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	3308      	adds	r3, #8
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	460a      	mov	r2, r1
 80016c0:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] << 8;
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80016c8:	4619      	mov	r1, r3
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	0fda      	lsrs	r2, r3, #31
 80016ce:	4413      	add	r3, r2
 80016d0:	105b      	asrs	r3, r3, #1
 80016d2:	440b      	add	r3, r1
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	3308      	adds	r3, #8
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016e0:	0219      	lsls	r1, r3, #8
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80016e8:	4618      	mov	r0, r3
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	0fda      	lsrs	r2, r3, #31
 80016ee:	4413      	add	r3, r2
 80016f0:	105b      	asrs	r3, r3, #1
 80016f2:	4403      	add	r3, r0
 80016f4:	b209      	sxth	r1, r1
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	3308      	adds	r3, #8
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	460a      	mov	r2, r1
 8001700:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] | Slave_DB->a.RX_buff[i+12];
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001708:	4619      	mov	r1, r3
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	0fda      	lsrs	r2, r3, #31
 800170e:	4413      	add	r3, r2
 8001710:	105b      	asrs	r3, r3, #1
 8001712:	440b      	add	r3, r1
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	3308      	adds	r3, #8
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	330c      	adds	r3, #12
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4413      	add	r3, r2
 8001728:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 800172c:	b21a      	sxth	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001734:	461c      	mov	r4, r3
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	0fd8      	lsrs	r0, r3, #31
 800173a:	4403      	add	r3, r0
 800173c:	105b      	asrs	r3, r3, #1
 800173e:	4423      	add	r3, r4
 8001740:	430a      	orrs	r2, r1
 8001742:	b211      	sxth	r1, r2
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	3308      	adds	r3, #8
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	460a      	mov	r2, r1
 800174e:	805a      	strh	r2, [r3, #2]
					for(int i=0;i<Slave_DB->a.RX_buff[10];i=i+2)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	3302      	adds	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800175c:	461a      	mov	r2, r3
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4293      	cmp	r3, r2
 8001762:	db98      	blt.n	8001696 <Slave_Processor+0x692>
					}

					// Формирование ответа
					Slave_DB->a.TX_buff[0] = Slave_DB->a.RX_buff[0];
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					Slave_DB->a.TX_buff[1] = Slave_DB->a.RX_buff[1];
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f893 250e 	ldrb.w	r2, [r3, #1294]	; 0x50e
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f

					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[4];
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8001782:	b29a      	uxth	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.Quanity = Slave_DB->a.Quanity << 8;
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b29a      	uxth	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.Quanity = Slave_DB->a.Quanity | Slave_DB->a.RX_buff[5];
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f8b3 2612 	ldrh.w	r2, [r3, #1554]	; 0x612
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612

					Slave_DB->a.TX_buff[2] = Slave_DB->a.Quanity * 2;
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b29a      	uxth	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e041      	b.n	8001884 <Slave_Processor+0x880>
					{
						Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001806:	4619      	mov	r1, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	0fda      	lsrs	r2, r3, #31
 800180c:	4413      	add	r3, r2
 800180e:	105b      	asrs	r3, r3, #1
 8001810:	440b      	add	r3, r1
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	3308      	adds	r3, #8
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3304      	adds	r3, #4
 8001822:	b2d1      	uxtb	r1, r2
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4413      	add	r3, r2
 8001828:	460a      	mov	r2, r1
 800182a:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
						Slave_DB->a.TempRegister = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001834:	4619      	mov	r1, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	0fda      	lsrs	r2, r3, #31
 800183a:	4413      	add	r3, r2
 800183c:	105b      	asrs	r3, r3, #1
 800183e:	440b      	add	r3, r1
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	3308      	adds	r3, #8
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800184c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001850:	b21a      	sxth	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
						Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 800185e:	121b      	asrs	r3, r3, #8
 8001860:	b21a      	sxth	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
						Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3303      	adds	r3, #3
 8001872:	b2d1      	uxtb	r1, r2
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4413      	add	r3, r2
 8001878:	460a      	mov	r2, r1
 800187a:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3302      	adds	r3, #2
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800188a:	461a      	mov	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4293      	cmp	r3, r2
 8001890:	dbb6      	blt.n	8001800 <Slave_Processor+0x7fc>
					}

					uint8_t LenMess;
					LenMess = Slave_DB->a.TX_buff[2] + 5;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001898:	3305      	adds	r3, #5
 800189a:	72bb      	strb	r3, [r7, #10]
					CRC_16_Modbus(Slave_DB->a.TX_buff, (LenMess - 2), &Slave_DB->a.CRC_Calc_out_table);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 80018a2:	7abb      	ldrb	r3, [r7, #10]
 80018a4:	3b02      	subs	r3, #2
 80018a6:	b2d9      	uxtb	r1, r3
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80018ae:	461a      	mov	r2, r3
 80018b0:	f7ff fab4 	bl	8000e1c <CRC_16_Modbus>
					Slave_DB->a.TX_buff[LenMess - 1] = Slave_DB->a.CRC_Calc_out_table[1];
 80018b4:	7abb      	ldrb	r3, [r7, #10]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	f892 160d 	ldrb.w	r1, [r2, #1549]	; 0x60d
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4413      	add	r3, r2
 80018c2:	460a      	mov	r2, r1
 80018c4:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					Slave_DB->a.TX_buff[LenMess - 2] = Slave_DB->a.CRC_Calc_out_table[0];
 80018c8:	7abb      	ldrb	r3, [r7, #10]
 80018ca:	3b02      	subs	r3, #2
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	f892 160c 	ldrb.w	r1, [r2, #1548]	; 0x60c
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4413      	add	r3, r2
 80018d6:	460a      	mov	r2, r1
 80018d8:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

					Slave_DB->a.TX_count = LenMess;
 80018dc:	7abb      	ldrb	r3, [r7, #10]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	815a      	strh	r2, [r3, #10]
					Slave_DB->a.TX_incr = 0;
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2200      	movs	r2, #0
 80018e8:	811a      	strh	r2, [r3, #8]
					Slave_DB->a.RX_buff_pointer = 0;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2200      	movs	r2, #0
 80018ee:	715a      	strb	r2, [r3, #5]
				}
			}
		}
	}
}
 80018f0:	bf00      	nop
 80018f2:	3734      	adds	r7, #52	; 0x34
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}

080018f8 <Slave_Clock_1ms>:
		}
	}
}

void Slave_Clock_1ms(uint32_t pointer_DB)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	60fb      	str	r3, [r7, #12]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60bb      	str	r3, [r7, #8]

	Slave_DB->a.schet++;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8a1b      	ldrh	r3, [r3, #16]
 800190e:	3301      	adds	r3, #1
 8001910:	b29a      	uxth	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	821a      	strh	r2, [r3, #16]
	if(Slave_DB->a.schet>=100){Slave_DB->a.schet=100;}
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8a1b      	ldrh	r3, [r3, #16]
 800191a:	2b63      	cmp	r3, #99	; 0x63
 800191c:	d902      	bls.n	8001924 <Slave_Clock_1ms+0x2c>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2264      	movs	r2, #100	; 0x64
 8001922:	821a      	strh	r2, [r3, #16]
	if(Slave_DB->a.TX_count){USART_port->a.CR1 |= 0x80;}
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	895b      	ldrh	r3, [r3, #10]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <Slave_Clock_1ms+0x40>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60da      	str	r2, [r3, #12]

}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <Screens_init>:
int32_t motoclock;



void Screens_init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af04      	add	r7, sp, #16

	for(int i = 0; i < 20;i++)
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e008      	b.n	8001962 <Screens_init+0x1e>
	{
		FonColor[i] = BackgroundColor;
 8001950:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <Screens_init+0x128>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4946      	ldr	r1, [pc, #280]	; (8001a70 <Screens_init+0x12c>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 20;i++)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b13      	cmp	r3, #19
 8001966:	ddf3      	ble.n	8001950 <Screens_init+0xc>
	}


	// Экран 0 (черный экран)
	HAL_LTDC_SetAddress(&hltdc, Page[0], 0);
 8001968:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <Screens_init+0x130>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	4841      	ldr	r0, [pc, #260]	; (8001a78 <Screens_init+0x134>)
 8001972:	f007 f8f3 	bl	8008b5c <HAL_LTDC_SetAddress>
	Zaliv(0x000000, Page[0], 800, 480);
 8001976:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <Screens_init+0x130>)
 8001978:	6819      	ldr	r1, [r3, #0]
 800197a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800197e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001982:	2000      	movs	r0, #0
 8001984:	f006 f810 	bl	80079a8 <Zaliv>

	// Экран_1
	Zaliv(BackgroundColor, Page[1], 800, 480);
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <Screens_init+0x128>)
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <Screens_init+0x130>)
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001994:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001998:	f006 f806 	bl	80079a8 <Zaliv>
	Draw_Rectangle(0x000000,   0, 220, 800,   3, Page[1], 800, 480); // первая горизонталь
 800199c:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <Screens_init+0x130>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019a4:	9203      	str	r2, [sp, #12]
 80019a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019aa:	9202      	str	r2, [sp, #8]
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	2303      	movs	r3, #3
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80019b6:	22dc      	movs	r2, #220	; 0xdc
 80019b8:	2100      	movs	r1, #0
 80019ba:	2000      	movs	r0, #0
 80019bc:	f006 f820 	bl	8007a00 <Draw_Rectangle>

	for(int i = 0; i < 3; i++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	e13c      	b.n	8001c40 <Screens_init+0x2fc>
	{

		uint16_t shift_X = i * 260 + 7;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	0192      	lsls	r2, r2, #6
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	3307      	adds	r3, #7
 80019d6:	80fb      	strh	r3, [r7, #6]

		if(i < 2)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	dc13      	bgt.n	8001a06 <Screens_init+0xc2>
		{
			Draw_Rectangle(0x000000, 260 + shift_X,   0,   3, 220, Page[1], 800, 480);
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80019e4:	b299      	uxth	r1, r3
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <Screens_init+0x130>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019ee:	9203      	str	r2, [sp, #12]
 80019f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019f4:	9202      	str	r2, [sp, #8]
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	23dc      	movs	r3, #220	; 0xdc
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2303      	movs	r3, #3
 80019fe:	2200      	movs	r2, #0
 8001a00:	2000      	movs	r0, #0
 8001a02:	f005 fffd 	bl	8007a00 <Draw_Rectangle>
		}

		switch(i)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d03d      	beq.n	8001a88 <Screens_init+0x144>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	dc4d      	bgt.n	8001aae <Screens_init+0x16a>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <Screens_init+0xdc>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d013      	beq.n	8001a46 <Screens_init+0x102>
 8001a1e:	e046      	b.n	8001aae <Screens_init+0x16a>
		{
			case 0:
				Short_Left_Colored_RU_DrawString_32("1",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	3346      	adds	r3, #70	; 0x46
 8001a24:	b298      	uxth	r0, r3
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <Screens_init+0x128>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <Screens_init+0x138>)
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	4911      	ldr	r1, [pc, #68]	; (8001a74 <Screens_init+0x130>)
 8001a30:	6849      	ldr	r1, [r1, #4]
 8001a32:	9102      	str	r1, [sp, #8]
 8001a34:	9201      	str	r2, [sp, #4]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2317      	movs	r3, #23
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4810      	ldr	r0, [pc, #64]	; (8001a80 <Screens_init+0x13c>)
 8001a40:	f004 fe64 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			break;
 8001a44:	e033      	b.n	8001aae <Screens_init+0x16a>

			case 1:
				Short_Left_Colored_RU_DrawString_32("2",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	3346      	adds	r3, #70	; 0x46
 8001a4a:	b298      	uxth	r0, r3
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <Screens_init+0x128>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <Screens_init+0x138>)
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	4907      	ldr	r1, [pc, #28]	; (8001a74 <Screens_init+0x130>)
 8001a56:	6849      	ldr	r1, [r1, #4]
 8001a58:	9102      	str	r1, [sp, #8]
 8001a5a:	9201      	str	r2, [sp, #4]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2317      	movs	r3, #23
 8001a60:	4602      	mov	r2, r0
 8001a62:	2101      	movs	r1, #1
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <Screens_init+0x140>)
 8001a66:	f004 fe51 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			break;
 8001a6a:	e020      	b.n	8001aae <Screens_init+0x16a>
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	200000a8 	.word	0x200000a8
 8001a74:	20000984 	.word	0x20000984
 8001a78:	20000148 	.word	0x20000148
 8001a7c:	200009f8 	.word	0x200009f8
 8001a80:	0800ce70 	.word	0x0800ce70
 8001a84:	0800ce74 	.word	0x0800ce74

			case 2:
				Short_Left_Colored_RU_DrawString_32("3",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	3346      	adds	r3, #70	; 0x46
 8001a8c:	b298      	uxth	r0, r3
 8001a8e:	4b9c      	ldr	r3, [pc, #624]	; (8001d00 <Screens_init+0x3bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a9c      	ldr	r2, [pc, #624]	; (8001d04 <Screens_init+0x3c0>)
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	499c      	ldr	r1, [pc, #624]	; (8001d08 <Screens_init+0x3c4>)
 8001a98:	6849      	ldr	r1, [r1, #4]
 8001a9a:	9102      	str	r1, [sp, #8]
 8001a9c:	9201      	str	r2, [sp, #4]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2317      	movs	r3, #23
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4899      	ldr	r0, [pc, #612]	; (8001d0c <Screens_init+0x3c8>)
 8001aa8:	f004 fe30 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			break;
 8001aac:	bf00      	nop
		}

		Short_Left_Colored_RU_DrawString_32("АНН",  			  3,   5 + shift_X,  20, BackgroundColor, BasicSymbolColor, Page[1]);
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	3305      	adds	r3, #5
 8001ab2:	b298      	uxth	r0, r3
 8001ab4:	4b92      	ldr	r3, [pc, #584]	; (8001d00 <Screens_init+0x3bc>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a92      	ldr	r2, [pc, #584]	; (8001d04 <Screens_init+0x3c0>)
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	4992      	ldr	r1, [pc, #584]	; (8001d08 <Screens_init+0x3c4>)
 8001abe:	6849      	ldr	r1, [r1, #4]
 8001ac0:	9102      	str	r1, [sp, #8]
 8001ac2:	9201      	str	r2, [sp, #4]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2314      	movs	r3, #20
 8001ac8:	4602      	mov	r2, r0
 8001aca:	2103      	movs	r1, #3
 8001acc:	4890      	ldr	r0, [pc, #576]	; (8001d10 <Screens_init+0x3cc>)
 8001ace:	f004 fe1d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Д.напор", 	 	  	  7,   5 + shift_X,  50, BackgroundColor, BasicSymbolColor, Page[1]);
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	3305      	adds	r3, #5
 8001ad6:	b298      	uxth	r0, r3
 8001ad8:	4b89      	ldr	r3, [pc, #548]	; (8001d00 <Screens_init+0x3bc>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a89      	ldr	r2, [pc, #548]	; (8001d04 <Screens_init+0x3c0>)
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	4989      	ldr	r1, [pc, #548]	; (8001d08 <Screens_init+0x3c4>)
 8001ae2:	6849      	ldr	r1, [r1, #4]
 8001ae4:	9102      	str	r1, [sp, #8]
 8001ae6:	9201      	str	r2, [sp, #4]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2332      	movs	r3, #50	; 0x32
 8001aec:	4602      	mov	r2, r0
 8001aee:	2107      	movs	r1, #7
 8001af0:	4888      	ldr	r0, [pc, #544]	; (8001d14 <Screens_init+0x3d0>)
 8001af2:	f004 fe0b 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		  3, 200 + shift_X,  50, BackgroundColor, BasicSymbolColor, Page[1]);
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	33c8      	adds	r3, #200	; 0xc8
 8001afa:	b298      	uxth	r0, r3
 8001afc:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <Screens_init+0x3bc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a80      	ldr	r2, [pc, #512]	; (8001d04 <Screens_init+0x3c0>)
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	4980      	ldr	r1, [pc, #512]	; (8001d08 <Screens_init+0x3c4>)
 8001b06:	6849      	ldr	r1, [r1, #4]
 8001b08:	9102      	str	r1, [sp, #8]
 8001b0a:	9201      	str	r2, [sp, #4]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2332      	movs	r3, #50	; 0x32
 8001b10:	4602      	mov	r2, r0
 8001b12:	2103      	movs	r1, #3
 8001b14:	4880      	ldr	r0, [pc, #512]	; (8001d18 <Screens_init+0x3d4>)
 8001b16:	f004 fdf9 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Д.масла", 	 		  7,   5 + shift_X,  80, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	3305      	adds	r3, #5
 8001b1e:	b298      	uxth	r0, r3
 8001b20:	4b77      	ldr	r3, [pc, #476]	; (8001d00 <Screens_init+0x3bc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a77      	ldr	r2, [pc, #476]	; (8001d04 <Screens_init+0x3c0>)
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	4977      	ldr	r1, [pc, #476]	; (8001d08 <Screens_init+0x3c4>)
 8001b2a:	6849      	ldr	r1, [r1, #4]
 8001b2c:	9102      	str	r1, [sp, #8]
 8001b2e:	9201      	str	r2, [sp, #4]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2350      	movs	r3, #80	; 0x50
 8001b34:	4602      	mov	r2, r0
 8001b36:	2107      	movs	r1, #7
 8001b38:	4878      	ldr	r0, [pc, #480]	; (8001d1c <Screens_init+0x3d8>)
 8001b3a:	f004 fde7 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		  3, 200 + shift_X,  80, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	33c8      	adds	r3, #200	; 0xc8
 8001b42:	b298      	uxth	r0, r3
 8001b44:	4b6e      	ldr	r3, [pc, #440]	; (8001d00 <Screens_init+0x3bc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <Screens_init+0x3c0>)
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	496e      	ldr	r1, [pc, #440]	; (8001d08 <Screens_init+0x3c4>)
 8001b4e:	6849      	ldr	r1, [r1, #4]
 8001b50:	9102      	str	r1, [sp, #8]
 8001b52:	9201      	str	r2, [sp, #4]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2350      	movs	r3, #80	; 0x50
 8001b58:	4602      	mov	r2, r0
 8001b5a:	2103      	movs	r1, #3
 8001b5c:	486e      	ldr	r0, [pc, #440]	; (8001d18 <Screens_init+0x3d4>)
 8001b5e:	f004 fdd5 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Т.масла", 	 	  	  7,   5 + shift_X, 110, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	3305      	adds	r3, #5
 8001b66:	b298      	uxth	r0, r3
 8001b68:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <Screens_init+0x3bc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a65      	ldr	r2, [pc, #404]	; (8001d04 <Screens_init+0x3c0>)
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	4965      	ldr	r1, [pc, #404]	; (8001d08 <Screens_init+0x3c4>)
 8001b72:	6849      	ldr	r1, [r1, #4]
 8001b74:	9102      	str	r1, [sp, #8]
 8001b76:	9201      	str	r2, [sp, #4]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	236e      	movs	r3, #110	; 0x6e
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	2107      	movs	r1, #7
 8001b80:	4867      	ldr	r0, [pc, #412]	; (8001d20 <Screens_init+0x3dc>)
 8001b82:	f004 fdc3 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("*С", 	 	  		  2, 200 + shift_X, 110, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	33c8      	adds	r3, #200	; 0xc8
 8001b8a:	b298      	uxth	r0, r3
 8001b8c:	4b5c      	ldr	r3, [pc, #368]	; (8001d00 <Screens_init+0x3bc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5c      	ldr	r2, [pc, #368]	; (8001d04 <Screens_init+0x3c0>)
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	495c      	ldr	r1, [pc, #368]	; (8001d08 <Screens_init+0x3c4>)
 8001b96:	6849      	ldr	r1, [r1, #4]
 8001b98:	9102      	str	r1, [sp, #8]
 8001b9a:	9201      	str	r2, [sp, #4]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	236e      	movs	r3, #110	; 0x6e
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	485f      	ldr	r0, [pc, #380]	; (8001d24 <Screens_init+0x3e0>)
 8001ba6:	f004 fdb1 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МотЧасы", 	 	  	  7,   5 + shift_X, 200, BackgroundColor, BasicSymbolColor, Page[1]);
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	3305      	adds	r3, #5
 8001bae:	b298      	uxth	r0, r3
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <Screens_init+0x3bc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a53      	ldr	r2, [pc, #332]	; (8001d04 <Screens_init+0x3c0>)
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	4953      	ldr	r1, [pc, #332]	; (8001d08 <Screens_init+0x3c4>)
 8001bba:	6849      	ldr	r1, [r1, #4]
 8001bbc:	9102      	str	r1, [sp, #8]
 8001bbe:	9201      	str	r2, [sp, #4]
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	23c8      	movs	r3, #200	; 0xc8
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	2107      	movs	r1, #7
 8001bc8:	4857      	ldr	r0, [pc, #348]	; (8001d28 <Screens_init+0x3e4>)
 8001bca:	f004 fd9f 	bl	800670c <Short_Left_Colored_RU_DrawString_32>

		Short_Left_Colored_RU_DrawString_32("   Вкл   ", 		  9,  95 + shift_X,  20,      GreenColor, BasicSymbolColor, Page[1]);
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	335f      	adds	r3, #95	; 0x5f
 8001bd2:	b298      	uxth	r0, r3
 8001bd4:	4b55      	ldr	r3, [pc, #340]	; (8001d2c <Screens_init+0x3e8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a4a      	ldr	r2, [pc, #296]	; (8001d04 <Screens_init+0x3c0>)
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	494a      	ldr	r1, [pc, #296]	; (8001d08 <Screens_init+0x3c4>)
 8001bde:	6849      	ldr	r1, [r1, #4]
 8001be0:	9102      	str	r1, [sp, #8]
 8001be2:	9201      	str	r2, [sp, #4]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2314      	movs	r3, #20
 8001be8:	4602      	mov	r2, r0
 8001bea:	2109      	movs	r1, #9
 8001bec:	4850      	ldr	r0, [pc, #320]	; (8001d30 <Screens_init+0x3ec>)
 8001bee:	f004 fd8d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("  РАЗГРУЗКА   ", 	 14,   5 + shift_X, 140, 		RedColor, BasicSymbolColor, Page[1]);
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	3305      	adds	r3, #5
 8001bf6:	b298      	uxth	r0, r3
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	; (8001d34 <Screens_init+0x3f0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a41      	ldr	r2, [pc, #260]	; (8001d04 <Screens_init+0x3c0>)
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	4941      	ldr	r1, [pc, #260]	; (8001d08 <Screens_init+0x3c4>)
 8001c02:	6849      	ldr	r1, [r1, #4]
 8001c04:	9102      	str	r1, [sp, #8]
 8001c06:	9201      	str	r2, [sp, #4]
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	238c      	movs	r3, #140	; 0x8c
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	210e      	movs	r1, #14
 8001c10:	4849      	ldr	r0, [pc, #292]	; (8001d38 <Screens_init+0x3f4>)
 8001c12:	f004 fd7b 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("тепл. защита  ", 	 14,   5 + shift_X, 170, 		RedColor, BasicSymbolColor, Page[1]);
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	3305      	adds	r3, #5
 8001c1a:	b298      	uxth	r0, r3
 8001c1c:	4b45      	ldr	r3, [pc, #276]	; (8001d34 <Screens_init+0x3f0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a38      	ldr	r2, [pc, #224]	; (8001d04 <Screens_init+0x3c0>)
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	4938      	ldr	r1, [pc, #224]	; (8001d08 <Screens_init+0x3c4>)
 8001c26:	6849      	ldr	r1, [r1, #4]
 8001c28:	9102      	str	r1, [sp, #8]
 8001c2a:	9201      	str	r2, [sp, #4]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	23aa      	movs	r3, #170	; 0xaa
 8001c30:	4602      	mov	r2, r0
 8001c32:	210e      	movs	r1, #14
 8001c34:	4841      	ldr	r0, [pc, #260]	; (8001d3c <Screens_init+0x3f8>)
 8001c36:	f004 fd69 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	for(int i = 0; i < 3; i++)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	f77f aebf 	ble.w	80019c6 <Screens_init+0x82>
		Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 200 + shift_X, 205, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
		*/

	}

	Draw_Rectangle(0x000000, 665, 220, 3, 360, Page[1], 800, 480);
 8001c48:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <Screens_init+0x3c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c50:	9203      	str	r2, [sp, #12]
 8001c52:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001c56:	9202      	str	r2, [sp, #8]
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2303      	movs	r3, #3
 8001c62:	22dc      	movs	r2, #220	; 0xdc
 8001c64:	f240 2199 	movw	r1, #665	; 0x299
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f005 fec9 	bl	8007a00 <Draw_Rectangle>
	Short_Left_Colored_RU_DrawString_32("УСТАВКА", 	 	  	 			 7, 670, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <Screens_init+0x3bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <Screens_init+0x3c0>)
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4924      	ldr	r1, [pc, #144]	; (8001d08 <Screens_init+0x3c4>)
 8001c78:	6849      	ldr	r1, [r1, #4]
 8001c7a:	9102      	str	r1, [sp, #8]
 8001c7c:	9201      	str	r2, [sp, #4]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	23f0      	movs	r3, #240	; 0xf0
 8001c82:	f240 229e 	movw	r2, #670	; 0x29e
 8001c86:	2107      	movs	r1, #7
 8001c88:	482d      	ldr	r0, [pc, #180]	; (8001d40 <Screens_init+0x3fc>)
 8001c8a:	f004 fd3f 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  	     			 3, 740, 267, BackgroundColor, BasicSymbolColor, Page[1]);
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <Screens_init+0x3bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <Screens_init+0x3c0>)
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	491c      	ldr	r1, [pc, #112]	; (8001d08 <Screens_init+0x3c4>)
 8001c98:	6849      	ldr	r1, [r1, #4]
 8001c9a:	9102      	str	r1, [sp, #8]
 8001c9c:	9201      	str	r2, [sp, #4]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f240 130b 	movw	r3, #267	; 0x10b
 8001ca4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001ca8:	2103      	movs	r1, #3
 8001caa:	481b      	ldr	r0, [pc, #108]	; (8001d18 <Screens_init+0x3d4>)
 8001cac:	f004 fd2e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Ур.Бак ", 	 	  	 			 7, 670, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <Screens_init+0x3bc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <Screens_init+0x3c0>)
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	4913      	ldr	r1, [pc, #76]	; (8001d08 <Screens_init+0x3c4>)
 8001cba:	6849      	ldr	r1, [r1, #4]
 8001cbc:	9102      	str	r1, [sp, #8]
 8001cbe:	9201      	str	r2, [sp, #4]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001cc6:	f240 229e 	movw	r2, #670	; 0x29e
 8001cca:	2107      	movs	r1, #7
 8001ccc:	481d      	ldr	r0, [pc, #116]	; (8001d44 <Screens_init+0x400>)
 8001cce:	f004 fd1d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("мм", 	 	  	     			 2, 740, 327, BackgroundColor, BasicSymbolColor, Page[1]);
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <Screens_init+0x3bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <Screens_init+0x3c0>)
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	490b      	ldr	r1, [pc, #44]	; (8001d08 <Screens_init+0x3c4>)
 8001cdc:	6849      	ldr	r1, [r1, #4]
 8001cde:	9102      	str	r1, [sp, #8]
 8001ce0:	9201      	str	r2, [sp, #4]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	f240 1347 	movw	r3, #327	; 0x147
 8001ce8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001cec:	2102      	movs	r1, #2
 8001cee:	4816      	ldr	r0, [pc, #88]	; (8001d48 <Screens_init+0x404>)
 8001cf0:	f004 fd0c 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Тем.Бак", 	 	  	 			 7, 670, 360, BackgroundColor, BasicSymbolColor, Page[1]);
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <Screens_init+0x3bc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a02      	ldr	r2, [pc, #8]	; (8001d04 <Screens_init+0x3c0>)
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	e026      	b.n	8001d4c <Screens_init+0x408>
 8001cfe:	bf00      	nop
 8001d00:	20000008 	.word	0x20000008
 8001d04:	200009f8 	.word	0x200009f8
 8001d08:	20000984 	.word	0x20000984
 8001d0c:	0800ce78 	.word	0x0800ce78
 8001d10:	0800ce7c 	.word	0x0800ce7c
 8001d14:	0800ce84 	.word	0x0800ce84
 8001d18:	0800ce94 	.word	0x0800ce94
 8001d1c:	0800ce9c 	.word	0x0800ce9c
 8001d20:	0800ceac 	.word	0x0800ceac
 8001d24:	0800cebc 	.word	0x0800cebc
 8001d28:	0800cec0 	.word	0x0800cec0
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	0800ced0 	.word	0x0800ced0
 8001d34:	20000000 	.word	0x20000000
 8001d38:	0800cee0 	.word	0x0800cee0
 8001d3c:	0800cef8 	.word	0x0800cef8
 8001d40:	0800cf14 	.word	0x0800cf14
 8001d44:	0800cf24 	.word	0x0800cf24
 8001d48:	0800cf34 	.word	0x0800cf34
 8001d4c:	499e      	ldr	r1, [pc, #632]	; (8001fc8 <Screens_init+0x684>)
 8001d4e:	6849      	ldr	r1, [r1, #4]
 8001d50:	9102      	str	r1, [sp, #8]
 8001d52:	9201      	str	r2, [sp, #4]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001d5a:	f240 229e 	movw	r2, #670	; 0x29e
 8001d5e:	2107      	movs	r1, #7
 8001d60:	489a      	ldr	r0, [pc, #616]	; (8001fcc <Screens_init+0x688>)
 8001d62:	f004 fcd3 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("*С", 	 	  	     			 2, 740, 387, BackgroundColor, BasicSymbolColor, Page[1]);
 8001d66:	4b9a      	ldr	r3, [pc, #616]	; (8001fd0 <Screens_init+0x68c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a9a      	ldr	r2, [pc, #616]	; (8001fd4 <Screens_init+0x690>)
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	4996      	ldr	r1, [pc, #600]	; (8001fc8 <Screens_init+0x684>)
 8001d70:	6849      	ldr	r1, [r1, #4]
 8001d72:	9102      	str	r1, [sp, #8]
 8001d74:	9201      	str	r2, [sp, #4]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	f240 1383 	movw	r3, #387	; 0x183
 8001d7c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001d80:	2102      	movs	r1, #2
 8001d82:	4895      	ldr	r0, [pc, #596]	; (8001fd8 <Screens_init+0x694>)
 8001d84:	f004 fcc2 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("УЗЕЛ ФИЛЬТРОВ", 	 			13,  13, 240,       GrayColor, BasicSymbolColor, Page[1]);
 8001d88:	4b94      	ldr	r3, [pc, #592]	; (8001fdc <Screens_init+0x698>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a91      	ldr	r2, [pc, #580]	; (8001fd4 <Screens_init+0x690>)
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	498d      	ldr	r1, [pc, #564]	; (8001fc8 <Screens_init+0x684>)
 8001d92:	6849      	ldr	r1, [r1, #4]
 8001d94:	9102      	str	r1, [sp, #8]
 8001d96:	9201      	str	r2, [sp, #4]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	23f0      	movs	r3, #240	; 0xf0
 8001d9c:	220d      	movs	r2, #13
 8001d9e:	210d      	movs	r1, #13
 8001da0:	488f      	ldr	r0, [pc, #572]	; (8001fe0 <Screens_init+0x69c>)
 8001da2:	f004 fcb3 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.в магистр:",		 			12, 300, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001da6:	4b8a      	ldr	r3, [pc, #552]	; (8001fd0 <Screens_init+0x68c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a8a      	ldr	r2, [pc, #552]	; (8001fd4 <Screens_init+0x690>)
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	4986      	ldr	r1, [pc, #536]	; (8001fc8 <Screens_init+0x684>)
 8001db0:	6849      	ldr	r1, [r1, #4]
 8001db2:	9102      	str	r1, [sp, #8]
 8001db4:	9201      	str	r2, [sp, #4]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	23f0      	movs	r3, #240	; 0xf0
 8001dba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dbe:	210c      	movs	r1, #12
 8001dc0:	4888      	ldr	r0, [pc, #544]	; (8001fe4 <Screens_init+0x6a0>)
 8001dc2:	f004 fca3 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 3, 580, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001dc6:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <Screens_init+0x68c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a82      	ldr	r2, [pc, #520]	; (8001fd4 <Screens_init+0x690>)
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	497e      	ldr	r1, [pc, #504]	; (8001fc8 <Screens_init+0x684>)
 8001dd0:	6849      	ldr	r1, [r1, #4]
 8001dd2:	9102      	str	r1, [sp, #8]
 8001dd4:	9201      	str	r2, [sp, #4]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	23f0      	movs	r3, #240	; 0xf0
 8001dda:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001dde:	2103      	movs	r1, #3
 8001de0:	4881      	ldr	r0, [pc, #516]	; (8001fe8 <Screens_init+0x6a4>)
 8001de2:	f004 fc93 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.перед сл. напорн фильтром:", 28,  13, 270, BackgroundColor, BasicSymbolColor, Page[1]);
 8001de6:	4b7a      	ldr	r3, [pc, #488]	; (8001fd0 <Screens_init+0x68c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a7a      	ldr	r2, [pc, #488]	; (8001fd4 <Screens_init+0x690>)
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	4976      	ldr	r1, [pc, #472]	; (8001fc8 <Screens_init+0x684>)
 8001df0:	6849      	ldr	r1, [r1, #4]
 8001df2:	9102      	str	r1, [sp, #8]
 8001df4:	9201      	str	r2, [sp, #4]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001dfc:	220d      	movs	r2, #13
 8001dfe:	211c      	movs	r1, #28
 8001e00:	487a      	ldr	r0, [pc, #488]	; (8001fec <Screens_init+0x6a8>)
 8001e02:	f004 fc83 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 3, 580, 270, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <Screens_init+0x68c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a72      	ldr	r2, [pc, #456]	; (8001fd4 <Screens_init+0x690>)
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	496e      	ldr	r1, [pc, #440]	; (8001fc8 <Screens_init+0x684>)
 8001e10:	6849      	ldr	r1, [r1, #4]
 8001e12:	9102      	str	r1, [sp, #8]
 8001e14:	9201      	str	r2, [sp, #4]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001e1c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001e20:	2103      	movs	r1, #3
 8001e22:	4871      	ldr	r0, [pc, #452]	; (8001fe8 <Screens_init+0x6a4>)
 8001e24:	f004 fc72 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.перед сл.ф.:",			 	14,  13, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e28:	4b69      	ldr	r3, [pc, #420]	; (8001fd0 <Screens_init+0x68c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a69      	ldr	r2, [pc, #420]	; (8001fd4 <Screens_init+0x690>)
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	4965      	ldr	r1, [pc, #404]	; (8001fc8 <Screens_init+0x684>)
 8001e32:	6849      	ldr	r1, [r1, #4]
 8001e34:	9102      	str	r1, [sp, #8]
 8001e36:	9201      	str	r2, [sp, #4]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e3e:	220d      	movs	r2, #13
 8001e40:	210e      	movs	r1, #14
 8001e42:	486b      	ldr	r0, [pc, #428]	; (8001ff0 <Screens_init+0x6ac>)
 8001e44:	f004 fc62 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 							 3, 360, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e48:	4b61      	ldr	r3, [pc, #388]	; (8001fd0 <Screens_init+0x68c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a61      	ldr	r2, [pc, #388]	; (8001fd4 <Screens_init+0x690>)
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	495d      	ldr	r1, [pc, #372]	; (8001fc8 <Screens_init+0x684>)
 8001e52:	6849      	ldr	r1, [r1, #4]
 8001e54:	9102      	str	r1, [sp, #8]
 8001e56:	9201      	str	r2, [sp, #4]
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001e62:	2103      	movs	r1, #3
 8001e64:	4860      	ldr	r0, [pc, #384]	; (8001fe8 <Screens_init+0x6a4>)
 8001e66:	f004 fc51 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("за", 							 2, 450, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e6a:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <Screens_init+0x68c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a59      	ldr	r2, [pc, #356]	; (8001fd4 <Screens_init+0x690>)
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	4955      	ldr	r1, [pc, #340]	; (8001fc8 <Screens_init+0x684>)
 8001e74:	6849      	ldr	r1, [r1, #4]
 8001e76:	9102      	str	r1, [sp, #8]
 8001e78:	9201      	str	r2, [sp, #4]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e80:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001e84:	2102      	movs	r1, #2
 8001e86:	485b      	ldr	r0, [pc, #364]	; (8001ff4 <Screens_init+0x6b0>)
 8001e88:	f004 fc40 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 							 3, 580, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <Screens_init+0x68c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a50      	ldr	r2, [pc, #320]	; (8001fd4 <Screens_init+0x690>)
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	494c      	ldr	r1, [pc, #304]	; (8001fc8 <Screens_init+0x684>)
 8001e96:	6849      	ldr	r1, [r1, #4]
 8001e98:	9102      	str	r1, [sp, #8]
 8001e9a:	9201      	str	r2, [sp, #4]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001ea2:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001ea6:	2103      	movs	r1, #3
 8001ea8:	484f      	ldr	r0, [pc, #316]	; (8001fe8 <Screens_init+0x6a4>)
 8001eaa:	f004 fc2f 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Расход. сл.ф.:", 				14,  13, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 8001eae:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <Screens_init+0x68c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <Screens_init+0x690>)
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	4944      	ldr	r1, [pc, #272]	; (8001fc8 <Screens_init+0x684>)
 8001eb8:	6849      	ldr	r1, [r1, #4]
 8001eba:	9102      	str	r1, [sp, #8]
 8001ebc:	9201      	str	r2, [sp, #4]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001ec4:	220d      	movs	r2, #13
 8001ec6:	210e      	movs	r1, #14
 8001ec8:	484b      	ldr	r0, [pc, #300]	; (8001ff8 <Screens_init+0x6b4>)
 8001eca:	f004 fc1f 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 3, 360, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 8001ece:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <Screens_init+0x68c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a40      	ldr	r2, [pc, #256]	; (8001fd4 <Screens_init+0x690>)
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	493c      	ldr	r1, [pc, #240]	; (8001fc8 <Screens_init+0x684>)
 8001ed8:	6849      	ldr	r1, [r1, #4]
 8001eda:	9102      	str	r1, [sp, #8]
 8001edc:	9201      	str	r2, [sp, #4]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001ee4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001ee8:	2103      	movs	r1, #3
 8001eea:	4844      	ldr	r0, [pc, #272]	; (8001ffc <Screens_init+0x6b8>)
 8001eec:	f004 fc0e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("эмул", 					 	 4, 420, 330,       GrayColor, BasicSymbolColor, Page[1]);
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <Screens_init+0x698>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a37      	ldr	r2, [pc, #220]	; (8001fd4 <Screens_init+0x690>)
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	4933      	ldr	r1, [pc, #204]	; (8001fc8 <Screens_init+0x684>)
 8001efa:	6849      	ldr	r1, [r1, #4]
 8001efc:	9102      	str	r1, [sp, #8]
 8001efe:	9201      	str	r2, [sp, #4]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001f06:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001f0a:	2104      	movs	r1, #4
 8001f0c:	483c      	ldr	r0, [pc, #240]	; (8002000 <Screens_init+0x6bc>)
 8001f0e:	f004 fbfd 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 3, 580, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <Screens_init+0x68c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <Screens_init+0x690>)
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	492b      	ldr	r1, [pc, #172]	; (8001fc8 <Screens_init+0x684>)
 8001f1c:	6849      	ldr	r1, [r1, #4]
 8001f1e:	9102      	str	r1, [sp, #8]
 8001f20:	9201      	str	r2, [sp, #4]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001f28:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001f2c:	2103      	movs	r1, #3
 8001f2e:	4833      	ldr	r0, [pc, #204]	; (8001ffc <Screens_init+0x6b8>)
 8001f30:	f004 fbec 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Прокач  объем:", 				14,  13, 360, BackgroundColor, BasicSymbolColor, Page[1]);
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <Screens_init+0x68c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <Screens_init+0x690>)
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	4922      	ldr	r1, [pc, #136]	; (8001fc8 <Screens_init+0x684>)
 8001f3e:	6849      	ldr	r1, [r1, #4]
 8001f40:	9102      	str	r1, [sp, #8]
 8001f42:	9201      	str	r2, [sp, #4]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001f4a:	220d      	movs	r2, #13
 8001f4c:	210e      	movs	r1, #14
 8001f4e:	482d      	ldr	r0, [pc, #180]	; (8002004 <Screens_init+0x6c0>)
 8001f50:	f004 fbdc 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("(м3)", 					 	 4, 420, 360,       GrayColor, BasicSymbolColor, Page[1]);
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <Screens_init+0x698>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <Screens_init+0x690>)
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	491a      	ldr	r1, [pc, #104]	; (8001fc8 <Screens_init+0x684>)
 8001f5e:	6849      	ldr	r1, [r1, #4]
 8001f60:	9102      	str	r1, [sp, #8]
 8001f62:	9201      	str	r2, [sp, #4]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001f6a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001f6e:	2104      	movs	r1, #4
 8001f70:	4825      	ldr	r0, [pc, #148]	; (8002008 <Screens_init+0x6c4>)
 8001f72:	f004 fbcb 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("кл.промыв.1", 	 11,   				 90, 400, 		 RedColor, BasicSymbolColor, Page[1]);
	Short_Left_Colored_RU_DrawString_32("кл.промыв.2", 	 11,   				340, 400, 		 RedColor, BasicSymbolColor, Page[1]);
	*/

	// Экран_2 (устройство эмульсии)
	Zaliv(BackgroundColor, Page[2], 800, 480);
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <Screens_init+0x68c>)
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <Screens_init+0x684>)
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001f82:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f86:	f005 fd0f 	bl	80079a8 <Zaliv>
	Short_Left_Colored_RU_DrawString_32("Устройство приготовления эмульсии", 	33,  10,  30,       GrayColor, BasicSymbolColor, Page[2]);
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <Screens_init+0x698>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <Screens_init+0x690>)
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	490d      	ldr	r1, [pc, #52]	; (8001fc8 <Screens_init+0x684>)
 8001f94:	6889      	ldr	r1, [r1, #8]
 8001f96:	9102      	str	r1, [sp, #8]
 8001f98:	9201      	str	r2, [sp, #4]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	231e      	movs	r3, #30
 8001f9e:	220a      	movs	r2, #10
 8001fa0:	2121      	movs	r1, #33	; 0x21
 8001fa2:	481a      	ldr	r0, [pc, #104]	; (800200c <Screens_init+0x6c8>)
 8001fa4:	f004 fbb2 	bl	800670c <Short_Left_Colored_RU_DrawString_32>

	Short_Left_Colored_RU_DrawString_32("Расход концентрата:", 	 				19,  10, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <Screens_init+0x68c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <Screens_init+0x690>)
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	4905      	ldr	r1, [pc, #20]	; (8001fc8 <Screens_init+0x684>)
 8001fb2:	6889      	ldr	r1, [r1, #8]
 8001fb4:	9102      	str	r1, [sp, #8]
 8001fb6:	9201      	str	r2, [sp, #4]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	23b4      	movs	r3, #180	; 0xb4
 8001fbc:	220a      	movs	r2, #10
 8001fbe:	2113      	movs	r1, #19
 8001fc0:	4813      	ldr	r0, [pc, #76]	; (8002010 <Screens_init+0x6cc>)
 8001fc2:	f004 fba3 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8001fc6:	e025      	b.n	8002014 <Screens_init+0x6d0>
 8001fc8:	20000984 	.word	0x20000984
 8001fcc:	0800cf3c 	.word	0x0800cf3c
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	200009f8 	.word	0x200009f8
 8001fd8:	0800cebc 	.word	0x0800cebc
 8001fdc:	2000000c 	.word	0x2000000c
 8001fe0:	0800cf4c 	.word	0x0800cf4c
 8001fe4:	0800cf68 	.word	0x0800cf68
 8001fe8:	0800ce94 	.word	0x0800ce94
 8001fec:	0800cf80 	.word	0x0800cf80
 8001ff0:	0800cfb4 	.word	0x0800cfb4
 8001ff4:	0800cfcc 	.word	0x0800cfcc
 8001ff8:	0800cfd4 	.word	0x0800cfd4
 8001ffc:	0800cfec 	.word	0x0800cfec
 8002000:	0800cff4 	.word	0x0800cff4
 8002004:	0800d000 	.word	0x0800d000
 8002008:	0800d01c 	.word	0x0800d01c
 800200c:	0800d024 	.word	0x0800d024
 8002010:	0800d068 	.word	0x0800d068
	Short_Left_Colored_RU_DrawString_32("Рефрактометр поточный", 	 			21,  10, 210, BackgroundColor, BasicSymbolColor, Page[2]);
 8002014:	4ba0      	ldr	r3, [pc, #640]	; (8002298 <Screens_init+0x954>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4aa0      	ldr	r2, [pc, #640]	; (800229c <Screens_init+0x958>)
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	49a0      	ldr	r1, [pc, #640]	; (80022a0 <Screens_init+0x95c>)
 800201e:	6889      	ldr	r1, [r1, #8]
 8002020:	9102      	str	r1, [sp, #8]
 8002022:	9201      	str	r2, [sp, #4]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	23d2      	movs	r3, #210	; 0xd2
 8002028:	220a      	movs	r2, #10
 800202a:	2115      	movs	r1, #21
 800202c:	489d      	ldr	r0, [pc, #628]	; (80022a4 <Screens_init+0x960>)
 800202e:	f004 fb6d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Датчик проводимости", 	 				19,  10, 240, BackgroundColor, BasicSymbolColor, Page[2]);
 8002032:	4b99      	ldr	r3, [pc, #612]	; (8002298 <Screens_init+0x954>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a99      	ldr	r2, [pc, #612]	; (800229c <Screens_init+0x958>)
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	4999      	ldr	r1, [pc, #612]	; (80022a0 <Screens_init+0x95c>)
 800203c:	6889      	ldr	r1, [r1, #8]
 800203e:	9102      	str	r1, [sp, #8]
 8002040:	9201      	str	r2, [sp, #4]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	23f0      	movs	r3, #240	; 0xf0
 8002046:	220a      	movs	r2, #10
 8002048:	2113      	movs	r1, #19
 800204a:	4897      	ldr	r0, [pc, #604]	; (80022a8 <Screens_init+0x964>)
 800204c:	f004 fb5e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Датчик рН          ", 	 				19,  10, 270, BackgroundColor, BasicSymbolColor, Page[2]);
 8002050:	4b91      	ldr	r3, [pc, #580]	; (8002298 <Screens_init+0x954>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a91      	ldr	r2, [pc, #580]	; (800229c <Screens_init+0x958>)
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4991      	ldr	r1, [pc, #580]	; (80022a0 <Screens_init+0x95c>)
 800205a:	6889      	ldr	r1, [r1, #8]
 800205c:	9102      	str	r1, [sp, #8]
 800205e:	9201      	str	r2, [sp, #4]
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002066:	220a      	movs	r2, #10
 8002068:	2113      	movs	r1, #19
 800206a:	4890      	ldr	r0, [pc, #576]	; (80022ac <Screens_init+0x968>)
 800206c:	f004 fb4e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Давление перед фильтрами воды", 		29,  10, 300, BackgroundColor, BasicSymbolColor, Page[2]);
 8002070:	4b89      	ldr	r3, [pc, #548]	; (8002298 <Screens_init+0x954>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a89      	ldr	r2, [pc, #548]	; (800229c <Screens_init+0x958>)
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	4989      	ldr	r1, [pc, #548]	; (80022a0 <Screens_init+0x95c>)
 800207a:	6889      	ldr	r1, [r1, #8]
 800207c:	9102      	str	r1, [sp, #8]
 800207e:	9201      	str	r2, [sp, #4]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002086:	220a      	movs	r2, #10
 8002088:	211d      	movs	r1, #29
 800208a:	4889      	ldr	r0, [pc, #548]	; (80022b0 <Screens_init+0x96c>)
 800208c:	f004 fb3e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Давление после фильтров  воды", 		29,  10, 330, BackgroundColor, BasicSymbolColor, Page[2]);
 8002090:	4b81      	ldr	r3, [pc, #516]	; (8002298 <Screens_init+0x954>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a81      	ldr	r2, [pc, #516]	; (800229c <Screens_init+0x958>)
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4981      	ldr	r1, [pc, #516]	; (80022a0 <Screens_init+0x95c>)
 800209a:	6889      	ldr	r1, [r1, #8]
 800209c:	9102      	str	r1, [sp, #8]
 800209e:	9201      	str	r2, [sp, #4]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80020a6:	220a      	movs	r2, #10
 80020a8:	211d      	movs	r1, #29
 80020aa:	4882      	ldr	r0, [pc, #520]	; (80022b4 <Screens_init+0x970>)
 80020ac:	f004 fb2e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Расходомер воды", 						15,  10, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 80020b0:	4b79      	ldr	r3, [pc, #484]	; (8002298 <Screens_init+0x954>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a79      	ldr	r2, [pc, #484]	; (800229c <Screens_init+0x958>)
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4979      	ldr	r1, [pc, #484]	; (80022a0 <Screens_init+0x95c>)
 80020ba:	6889      	ldr	r1, [r1, #8]
 80020bc:	9102      	str	r1, [sp, #8]
 80020be:	9201      	str	r2, [sp, #4]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80020c6:	220a      	movs	r2, #10
 80020c8:	210f      	movs	r1, #15
 80020ca:	487b      	ldr	r0, [pc, #492]	; (80022b8 <Screens_init+0x974>)
 80020cc:	f004 fb1e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 		 3, 520, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 80020d0:	4b71      	ldr	r3, [pc, #452]	; (8002298 <Screens_init+0x954>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a71      	ldr	r2, [pc, #452]	; (800229c <Screens_init+0x958>)
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	4971      	ldr	r1, [pc, #452]	; (80022a0 <Screens_init+0x95c>)
 80020da:	6889      	ldr	r1, [r1, #8]
 80020dc:	9102      	str	r1, [sp, #8]
 80020de:	9201      	str	r2, [sp, #4]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	23b4      	movs	r3, #180	; 0xb4
 80020e4:	f44f 7202 	mov.w	r2, #520	; 0x208
 80020e8:	2103      	movs	r1, #3
 80020ea:	4874      	ldr	r0, [pc, #464]	; (80022bc <Screens_init+0x978>)
 80020ec:	f004 fb0e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("м3", 						 	 		 2, 720, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 80020f0:	4b69      	ldr	r3, [pc, #420]	; (8002298 <Screens_init+0x954>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a69      	ldr	r2, [pc, #420]	; (800229c <Screens_init+0x958>)
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4969      	ldr	r1, [pc, #420]	; (80022a0 <Screens_init+0x95c>)
 80020fa:	6889      	ldr	r1, [r1, #8]
 80020fc:	9102      	str	r1, [sp, #8]
 80020fe:	9201      	str	r2, [sp, #4]
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	23b4      	movs	r3, #180	; 0xb4
 8002104:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002108:	2102      	movs	r1, #2
 800210a:	486d      	ldr	r0, [pc, #436]	; (80022c0 <Screens_init+0x97c>)
 800210c:	f004 fafe 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 		 3, 520, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 8002110:	4b61      	ldr	r3, [pc, #388]	; (8002298 <Screens_init+0x954>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a61      	ldr	r2, [pc, #388]	; (800229c <Screens_init+0x958>)
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4961      	ldr	r1, [pc, #388]	; (80022a0 <Screens_init+0x95c>)
 800211a:	6889      	ldr	r1, [r1, #8]
 800211c:	9102      	str	r1, [sp, #8]
 800211e:	9201      	str	r2, [sp, #4]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002126:	f44f 7202 	mov.w	r2, #520	; 0x208
 800212a:	2103      	movs	r1, #3
 800212c:	4863      	ldr	r0, [pc, #396]	; (80022bc <Screens_init+0x978>)
 800212e:	f004 faed 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("м3", 						 	 		 2, 720, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 8002132:	4b59      	ldr	r3, [pc, #356]	; (8002298 <Screens_init+0x954>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a59      	ldr	r2, [pc, #356]	; (800229c <Screens_init+0x958>)
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	4959      	ldr	r1, [pc, #356]	; (80022a0 <Screens_init+0x95c>)
 800213c:	6889      	ldr	r1, [r1, #8]
 800213e:	9102      	str	r1, [sp, #8]
 8002140:	9201      	str	r2, [sp, #4]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002148:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800214c:	2102      	movs	r1, #2
 800214e:	485c      	ldr	r0, [pc, #368]	; (80022c0 <Screens_init+0x97c>)
 8002150:	f004 fadc 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 		 3, 720, 300, BackgroundColor, BasicSymbolColor, Page[2]);
 8002154:	4b50      	ldr	r3, [pc, #320]	; (8002298 <Screens_init+0x954>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a50      	ldr	r2, [pc, #320]	; (800229c <Screens_init+0x958>)
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	4950      	ldr	r1, [pc, #320]	; (80022a0 <Screens_init+0x95c>)
 800215e:	6889      	ldr	r1, [r1, #8]
 8002160:	9102      	str	r1, [sp, #8]
 8002162:	9201      	str	r2, [sp, #4]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800216a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800216e:	2103      	movs	r1, #3
 8002170:	4854      	ldr	r0, [pc, #336]	; (80022c4 <Screens_init+0x980>)
 8002172:	f004 facb 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 		 3, 720, 330, BackgroundColor, BasicSymbolColor, Page[2]);
 8002176:	4b48      	ldr	r3, [pc, #288]	; (8002298 <Screens_init+0x954>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a48      	ldr	r2, [pc, #288]	; (800229c <Screens_init+0x958>)
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	4948      	ldr	r1, [pc, #288]	; (80022a0 <Screens_init+0x95c>)
 8002180:	6889      	ldr	r1, [r1, #8]
 8002182:	9102      	str	r1, [sp, #8]
 8002184:	9201      	str	r2, [sp, #4]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800218c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002190:	2103      	movs	r1, #3
 8002192:	484c      	ldr	r0, [pc, #304]	; (80022c4 <Screens_init+0x980>)
 8002194:	f004 faba 	bl	800670c <Short_Left_Colored_RU_DrawString_32>

	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560,  90, BackgroundColor, BasicSymbolColor, Page[2]);
 8002198:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <Screens_init+0x954>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a3f      	ldr	r2, [pc, #252]	; (800229c <Screens_init+0x958>)
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	493f      	ldr	r1, [pc, #252]	; (80022a0 <Screens_init+0x95c>)
 80021a2:	6889      	ldr	r1, [r1, #8]
 80021a4:	9102      	str	r1, [sp, #8]
 80021a6:	9201      	str	r2, [sp, #4]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	235a      	movs	r3, #90	; 0x5a
 80021ac:	f44f 720c 	mov.w	r2, #560	; 0x230
 80021b0:	2106      	movs	r1, #6
 80021b2:	4845      	ldr	r0, [pc, #276]	; (80022c8 <Screens_init+0x984>)
 80021b4:	f004 faaa 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560, 120, BackgroundColor, BasicSymbolColor, Page[2]);
 80021b8:	4b37      	ldr	r3, [pc, #220]	; (8002298 <Screens_init+0x954>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a37      	ldr	r2, [pc, #220]	; (800229c <Screens_init+0x958>)
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	4937      	ldr	r1, [pc, #220]	; (80022a0 <Screens_init+0x95c>)
 80021c2:	6889      	ldr	r1, [r1, #8]
 80021c4:	9102      	str	r1, [sp, #8]
 80021c6:	9201      	str	r2, [sp, #4]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2378      	movs	r3, #120	; 0x78
 80021cc:	f44f 720c 	mov.w	r2, #560	; 0x230
 80021d0:	2106      	movs	r1, #6
 80021d2:	483d      	ldr	r0, [pc, #244]	; (80022c8 <Screens_init+0x984>)
 80021d4:	f004 fa9a 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560, 150, BackgroundColor, BasicSymbolColor, Page[2]);
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <Screens_init+0x954>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a2f      	ldr	r2, [pc, #188]	; (800229c <Screens_init+0x958>)
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	492f      	ldr	r1, [pc, #188]	; (80022a0 <Screens_init+0x95c>)
 80021e2:	6889      	ldr	r1, [r1, #8]
 80021e4:	9102      	str	r1, [sp, #8]
 80021e6:	9201      	str	r2, [sp, #4]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2396      	movs	r3, #150	; 0x96
 80021ec:	f44f 720c 	mov.w	r2, #560	; 0x230
 80021f0:	2106      	movs	r1, #6
 80021f2:	4835      	ldr	r0, [pc, #212]	; (80022c8 <Screens_init+0x984>)
 80021f4:	f004 fa8a 	bl	800670c <Short_Left_Colored_RU_DrawString_32>

	// Экран 3
	Zaliv(BackgroundColor, Page[3], 800, 480);
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <Screens_init+0x954>)
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <Screens_init+0x95c>)
 80021fe:	68d9      	ldr	r1, [r3, #12]
 8002200:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002204:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002208:	f005 fbce 	bl	80079a8 <Zaliv>
	Short_Centred_RU_DrawString_32("ОКНО ДАННЫЕ", 11, 400, 15, BackgroundColor, BasicSymbolColor, Page[3]);
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <Screens_init+0x954>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a22      	ldr	r2, [pc, #136]	; (800229c <Screens_init+0x958>)
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4922      	ldr	r1, [pc, #136]	; (80022a0 <Screens_init+0x95c>)
 8002216:	68c9      	ldr	r1, [r1, #12]
 8002218:	9102      	str	r1, [sp, #8]
 800221a:	9201      	str	r2, [sp, #4]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	230f      	movs	r3, #15
 8002220:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002224:	210b      	movs	r1, #11
 8002226:	4829      	ldr	r0, [pc, #164]	; (80022cc <Screens_init+0x988>)
 8002228:	f004 fb8e 	bl	8006948 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,     0, 30, 800,   3, Page[3], 800, 480);
 800222c:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <Screens_init+0x95c>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002234:	9203      	str	r2, [sp, #12]
 8002236:	f44f 7248 	mov.w	r2, #800	; 0x320
 800223a:	9202      	str	r2, [sp, #8]
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	2303      	movs	r3, #3
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002246:	221e      	movs	r2, #30
 8002248:	2100      	movs	r1, #0
 800224a:	2000      	movs	r0, #0
 800224c:	f005 fbd8 	bl	8007a00 <Draw_Rectangle>
	Draw_Rectangle(0x000000,   500, 70,   3, 410, Page[3], 800, 480);
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <Screens_init+0x95c>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002258:	9203      	str	r2, [sp, #12]
 800225a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800225e:	9202      	str	r2, [sp, #8]
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2303      	movs	r3, #3
 800226a:	2246      	movs	r2, #70	; 0x46
 800226c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002270:	2000      	movs	r0, #0
 8002272:	f005 fbc5 	bl	8007a00 <Draw_Rectangle>


	// Экран 4
	Zaliv(BackgroundColor, Page[4], 800, 480);
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <Screens_init+0x954>)
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <Screens_init+0x95c>)
 800227c:	6919      	ldr	r1, [r3, #16]
 800227e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002282:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002286:	f005 fb8f 	bl	80079a8 <Zaliv>
	Short_Centred_RU_DrawString_32("ОКНО РУЧНОГО УПРАВЛЕНИЯ", 23, 400, 15, BackgroundColor, BasicSymbolColor, Page[4]);
 800228a:	4b03      	ldr	r3, [pc, #12]	; (8002298 <Screens_init+0x954>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a03      	ldr	r2, [pc, #12]	; (800229c <Screens_init+0x958>)
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	4903      	ldr	r1, [pc, #12]	; (80022a0 <Screens_init+0x95c>)
 8002294:	6909      	ldr	r1, [r1, #16]
 8002296:	e01b      	b.n	80022d0 <Screens_init+0x98c>
 8002298:	20000008 	.word	0x20000008
 800229c:	200009f8 	.word	0x200009f8
 80022a0:	20000984 	.word	0x20000984
 80022a4:	0800d090 	.word	0x0800d090
 80022a8:	0800d0bc 	.word	0x0800d0bc
 80022ac:	0800d0e4 	.word	0x0800d0e4
 80022b0:	0800d100 	.word	0x0800d100
 80022b4:	0800d138 	.word	0x0800d138
 80022b8:	0800d170 	.word	0x0800d170
 80022bc:	0800cfec 	.word	0x0800cfec
 80022c0:	0800d190 	.word	0x0800d190
 80022c4:	0800ce94 	.word	0x0800ce94
 80022c8:	0800d194 	.word	0x0800d194
 80022cc:	0800d1a0 	.word	0x0800d1a0
 80022d0:	9102      	str	r1, [sp, #8]
 80022d2:	9201      	str	r2, [sp, #4]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	230f      	movs	r3, #15
 80022d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80022dc:	2117      	movs	r1, #23
 80022de:	486d      	ldr	r0, [pc, #436]	; (8002494 <Screens_init+0xb50>)
 80022e0:	f004 fb32 	bl	8006948 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[4], 800, 480);
 80022e4:	4b6c      	ldr	r3, [pc, #432]	; (8002498 <Screens_init+0xb54>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80022ec:	9203      	str	r2, [sp, #12]
 80022ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 80022f2:	9202      	str	r2, [sp, #8]
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	2303      	movs	r3, #3
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80022fe:	221e      	movs	r2, #30
 8002300:	2100      	movs	r1, #0
 8002302:	2000      	movs	r0, #0
 8002304:	f005 fb7c 	bl	8007a00 <Draw_Rectangle>

	// Экран_5 (пароль)
	Zaliv(BackgroundColor, Page[5], 800, 480);
 8002308:	4b64      	ldr	r3, [pc, #400]	; (800249c <Screens_init+0xb58>)
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	4b62      	ldr	r3, [pc, #392]	; (8002498 <Screens_init+0xb54>)
 800230e:	6959      	ldr	r1, [r3, #20]
 8002310:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002314:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002318:	f005 fb46 	bl	80079a8 <Zaliv>
	if(Control_DB.RazrPointer > 4){Control_DB.RazrPointer = 4;}
 800231c:	4b60      	ldr	r3, [pc, #384]	; (80024a0 <Screens_init+0xb5c>)
 800231e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002322:	2b04      	cmp	r3, #4
 8002324:	dd02      	ble.n	800232c <Screens_init+0x9e8>
 8002326:	4b5e      	ldr	r3, [pc, #376]	; (80024a0 <Screens_init+0xb5c>)
 8002328:	2204      	movs	r2, #4
 800232a:	805a      	strh	r2, [r3, #2]


	// Экран 6
	Zaliv(BackgroundColor, Page[6], 800, 480);
 800232c:	4b5b      	ldr	r3, [pc, #364]	; (800249c <Screens_init+0xb58>)
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	4b59      	ldr	r3, [pc, #356]	; (8002498 <Screens_init+0xb54>)
 8002332:	6999      	ldr	r1, [r3, #24]
 8002334:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002338:	f44f 7248 	mov.w	r2, #800	; 0x320
 800233c:	f005 fb34 	bl	80079a8 <Zaliv>
	Short_Centred_RU_DrawString_32("Настройки станции насосной", 26, 400, 15, BackgroundColor, BasicSymbolColor, Page[6]);
 8002340:	4b56      	ldr	r3, [pc, #344]	; (800249c <Screens_init+0xb58>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a57      	ldr	r2, [pc, #348]	; (80024a4 <Screens_init+0xb60>)
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	4953      	ldr	r1, [pc, #332]	; (8002498 <Screens_init+0xb54>)
 800234a:	6989      	ldr	r1, [r1, #24]
 800234c:	9102      	str	r1, [sp, #8]
 800234e:	9201      	str	r2, [sp, #4]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	230f      	movs	r3, #15
 8002354:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002358:	211a      	movs	r1, #26
 800235a:	4853      	ldr	r0, [pc, #332]	; (80024a8 <Screens_init+0xb64>)
 800235c:	f004 faf4 	bl	8006948 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[6], 800, 480);
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <Screens_init+0xb54>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002368:	9203      	str	r2, [sp, #12]
 800236a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800236e:	9202      	str	r2, [sp, #8]
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	2303      	movs	r3, #3
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	f44f 7348 	mov.w	r3, #800	; 0x320
 800237a:	221e      	movs	r2, #30
 800237c:	2100      	movs	r1, #0
 800237e:	2000      	movs	r0, #0
 8002380:	f005 fb3e 	bl	8007a00 <Draw_Rectangle>


	// Экран 7
	Zaliv(BackgroundColor, Page[7], 800, 480);
 8002384:	4b45      	ldr	r3, [pc, #276]	; (800249c <Screens_init+0xb58>)
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	4b43      	ldr	r3, [pc, #268]	; (8002498 <Screens_init+0xb54>)
 800238a:	69d9      	ldr	r1, [r3, #28]
 800238c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002390:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002394:	f005 fb08 	bl	80079a8 <Zaliv>
	Short_Centred_RU_DrawString_32("Заводские параметры", 19, 400, 15, BackgroundColor, BasicSymbolColor, Page[7]);
 8002398:	4b40      	ldr	r3, [pc, #256]	; (800249c <Screens_init+0xb58>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a41      	ldr	r2, [pc, #260]	; (80024a4 <Screens_init+0xb60>)
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	493d      	ldr	r1, [pc, #244]	; (8002498 <Screens_init+0xb54>)
 80023a2:	69c9      	ldr	r1, [r1, #28]
 80023a4:	9102      	str	r1, [sp, #8]
 80023a6:	9201      	str	r2, [sp, #4]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	230f      	movs	r3, #15
 80023ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80023b0:	2113      	movs	r1, #19
 80023b2:	483e      	ldr	r0, [pc, #248]	; (80024ac <Screens_init+0xb68>)
 80023b4:	f004 fac8 	bl	8006948 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[7], 800, 480);
 80023b8:	4b37      	ldr	r3, [pc, #220]	; (8002498 <Screens_init+0xb54>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023c0:	9203      	str	r2, [sp, #12]
 80023c2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023c6:	9202      	str	r2, [sp, #8]
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	2303      	movs	r3, #3
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	f44f 7348 	mov.w	r3, #800	; 0x320
 80023d2:	221e      	movs	r2, #30
 80023d4:	2100      	movs	r1, #0
 80023d6:	2000      	movs	r0, #0
 80023d8:	f005 fb12 	bl	8007a00 <Draw_Rectangle>




	// Экран 20 (Авария)
	Zaliv(RedColor, Page[20], 800, 480);
 80023dc:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <Screens_init+0xb6c>)
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <Screens_init+0xb54>)
 80023e2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80023e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023ec:	f005 fadc 	bl	80079a8 <Zaliv>
	Short_Centred_RU_DrawString_32("Активные аварийные сообщения", 28, 400, 15, RedColor, BasicSymbolColor, Page[20]);
 80023f0:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <Screens_init+0xb6c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <Screens_init+0xb60>)
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	4927      	ldr	r1, [pc, #156]	; (8002498 <Screens_init+0xb54>)
 80023fa:	6d09      	ldr	r1, [r1, #80]	; 0x50
 80023fc:	9102      	str	r1, [sp, #8]
 80023fe:	9201      	str	r2, [sp, #4]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	230f      	movs	r3, #15
 8002404:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002408:	211c      	movs	r1, #28
 800240a:	482a      	ldr	r0, [pc, #168]	; (80024b4 <Screens_init+0xb70>)
 800240c:	f004 fa9c 	bl	8006948 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[20], 800, 480);
 8002410:	4b21      	ldr	r3, [pc, #132]	; (8002498 <Screens_init+0xb54>)
 8002412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002414:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002418:	9203      	str	r2, [sp, #12]
 800241a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800241e:	9202      	str	r2, [sp, #8]
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	2303      	movs	r3, #3
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	f44f 7348 	mov.w	r3, #800	; 0x320
 800242a:	221e      	movs	r2, #30
 800242c:	2100      	movs	r1, #0
 800242e:	2000      	movs	r0, #0
 8002430:	f005 fae6 	bl	8007a00 <Draw_Rectangle>


	// Экран_21 (сетевуха)
	Zaliv(BackgroundColor, Page[21], 800, 480);
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <Screens_init+0xb58>)
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <Screens_init+0xb54>)
 800243a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800243c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002440:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002444:	f005 fab0 	bl	80079a8 <Zaliv>
	Short_Centred_RU_DrawString_32("настройки пульта", 16, 400, 15, BackgroundColor, BasicSymbolColor, Page[21]);
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <Screens_init+0xb58>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <Screens_init+0xb60>)
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4911      	ldr	r1, [pc, #68]	; (8002498 <Screens_init+0xb54>)
 8002452:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002454:	9102      	str	r1, [sp, #8]
 8002456:	9201      	str	r2, [sp, #4]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	230f      	movs	r3, #15
 800245c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002460:	2110      	movs	r1, #16
 8002462:	4815      	ldr	r0, [pc, #84]	; (80024b8 <Screens_init+0xb74>)
 8002464:	f004 fa70 	bl	8006948 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[21], 800, 480);
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <Screens_init+0xb54>)
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002470:	9203      	str	r2, [sp, #12]
 8002472:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002476:	9202      	str	r2, [sp, #8]
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	2303      	movs	r3, #3
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002482:	221e      	movs	r2, #30
 8002484:	2100      	movs	r1, #0
 8002486:	2000      	movs	r0, #0
 8002488:	f005 faba 	bl	8007a00 <Draw_Rectangle>


}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	0800d1b8 	.word	0x0800d1b8
 8002498:	20000984 	.word	0x20000984
 800249c:	20000008 	.word	0x20000008
 80024a0:	20000b18 	.word	0x20000b18
 80024a4:	200009f8 	.word	0x200009f8
 80024a8:	0800d1e8 	.word	0x0800d1e8
 80024ac:	0800d21c 	.word	0x0800d21c
 80024b0:	20000000 	.word	0x20000000
 80024b4:	0800d244 	.word	0x0800d244
 80024b8:	0800d27c 	.word	0x0800d27c

080024bc <Set_Screen>:




void Set_Screen(uint8_t screen)
{
 80024bc:	b5b0      	push	{r4, r5, r7, lr}
 80024be:	b092      	sub	sp, #72	; 0x48
 80024c0:	af0c      	add	r7, sp, #48	; 0x30
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < 20;i++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e016      	b.n	80024fa <Set_Screen+0x3e>
	{
		if(i == Control_DB.MenuPointer) {FonColor[i] = SelectionColor;}
 80024cc:	4b9d      	ldr	r3, [pc, #628]	; (8002744 <Set_Screen+0x288>)
 80024ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d2:	461a      	mov	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d106      	bne.n	80024e8 <Set_Screen+0x2c>
 80024da:	4b9b      	ldr	r3, [pc, #620]	; (8002748 <Set_Screen+0x28c>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	499b      	ldr	r1, [pc, #620]	; (800274c <Set_Screen+0x290>)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80024e6:	e005      	b.n	80024f4 <Set_Screen+0x38>
		else {FonColor[i] = BackgroundColor;}
 80024e8:	4b99      	ldr	r3, [pc, #612]	; (8002750 <Set_Screen+0x294>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4997      	ldr	r1, [pc, #604]	; (800274c <Set_Screen+0x290>)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 20;i++)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3301      	adds	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b13      	cmp	r3, #19
 80024fe:	dde5      	ble.n	80024cc <Set_Screen+0x10>
	}

	switch(screen)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	3b01      	subs	r3, #1
 8002504:	2b14      	cmp	r3, #20
 8002506:	f202 8096 	bhi.w	8004636 <Set_Screen+0x217a>
 800250a:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <Set_Screen+0x54>)
 800250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002510:	08002565 	.word	0x08002565
 8002514:	08002b65 	.word	0x08002b65
 8002518:	080030f1 	.word	0x080030f1
 800251c:	080039f5 	.word	0x080039f5
 8002520:	08003ba1 	.word	0x08003ba1
 8002524:	08003c71 	.word	0x08003c71
 8002528:	0800407d 	.word	0x0800407d
 800252c:	08004637 	.word	0x08004637
 8002530:	08004637 	.word	0x08004637
 8002534:	08004637 	.word	0x08004637
 8002538:	08004637 	.word	0x08004637
 800253c:	08004637 	.word	0x08004637
 8002540:	08004637 	.word	0x08004637
 8002544:	08004637 	.word	0x08004637
 8002548:	08004637 	.word	0x08004637
 800254c:	08004637 	.word	0x08004637
 8002550:	08004637 	.word	0x08004637
 8002554:	08004637 	.word	0x08004637
 8002558:	08004637 	.word	0x08004637
 800255c:	08004637 	.word	0x08004637
 8002560:	08004379 	.word	0x08004379

		case 1:



			for(int i = 0; i < 3; i++)
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e17f      	b.n	800286a <Set_Screen+0x3ae>
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d04a      	beq.n	8002606 <Set_Screen+0x14a>
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b02      	cmp	r3, #2
 8002574:	dc6a      	bgt.n	800264c <Set_Screen+0x190>
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <Set_Screen+0xc8>
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d020      	beq.n	80025c4 <Set_Screen+0x108>
 8002582:	e063      	b.n	800264c <Set_Screen+0x190>
			{
				switch(i)
				{
					case 0:
						engine_state = BUV_RT_VALS.ANN_1.Pump.State;
 8002584:	4b73      	ldr	r3, [pc, #460]	; (8002754 <Set_Screen+0x298>)
 8002586:	7a1a      	ldrb	r2, [r3, #8]
 8002588:	4b73      	ldr	r3, [pc, #460]	; (8002758 <Set_Screen+0x29c>)
 800258a:	701a      	strb	r2, [r3, #0]
						unload		 = BUV_RT_VALS.ANN_1.Unload;
 800258c:	4b71      	ldr	r3, [pc, #452]	; (8002754 <Set_Screen+0x298>)
 800258e:	7d9a      	ldrb	r2, [r3, #22]
 8002590:	4b72      	ldr	r3, [pc, #456]	; (800275c <Set_Screen+0x2a0>)
 8002592:	701a      	strb	r2, [r3, #0]
						bimetal      = BUV_RT_VALS.ANN_1.Pump.Bimetal;
 8002594:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <Set_Screen+0x298>)
 8002596:	7a5a      	ldrb	r2, [r3, #9]
 8002598:	4b71      	ldr	r3, [pc, #452]	; (8002760 <Set_Screen+0x2a4>)
 800259a:	701a      	strb	r2, [r3, #0]
						Press_napor  = BUV_RT_VALS.ANN_1.Out_Pressure;
 800259c:	4b6d      	ldr	r3, [pc, #436]	; (8002754 <Set_Screen+0x298>)
 800259e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80025a2:	4b70      	ldr	r3, [pc, #448]	; (8002764 <Set_Screen+0x2a8>)
 80025a4:	801a      	strh	r2, [r3, #0]
						Press_maslo  = BUV_RT_VALS.ANN_1.Oil_Pressure;
 80025a6:	4b6b      	ldr	r3, [pc, #428]	; (8002754 <Set_Screen+0x298>)
 80025a8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80025ac:	4b6e      	ldr	r3, [pc, #440]	; (8002768 <Set_Screen+0x2ac>)
 80025ae:	801a      	strh	r2, [r3, #0]
						Temp_maslo   = BUV_RT_VALS.ANN_1.Oil_Temperature;
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <Set_Screen+0x298>)
 80025b2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80025b6:	4b6d      	ldr	r3, [pc, #436]	; (800276c <Set_Screen+0x2b0>)
 80025b8:	801a      	strh	r2, [r3, #0]
						motoclock    = BUV_RT_VALS.ANN_1.Pump.MotoClock;
 80025ba:	4b66      	ldr	r3, [pc, #408]	; (8002754 <Set_Screen+0x298>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	4a6c      	ldr	r2, [pc, #432]	; (8002770 <Set_Screen+0x2b4>)
 80025c0:	6013      	str	r3, [r2, #0]
					break;
 80025c2:	e043      	b.n	800264c <Set_Screen+0x190>

					case 1:
						engine_state = BUV_RT_VALS.ANN_2.Pump.State;
 80025c4:	4b63      	ldr	r3, [pc, #396]	; (8002754 <Set_Screen+0x298>)
 80025c6:	7f1a      	ldrb	r2, [r3, #28]
 80025c8:	4b63      	ldr	r3, [pc, #396]	; (8002758 <Set_Screen+0x29c>)
 80025ca:	701a      	strb	r2, [r3, #0]
						unload		 = BUV_RT_VALS.ANN_2.Unload;
 80025cc:	4b61      	ldr	r3, [pc, #388]	; (8002754 <Set_Screen+0x298>)
 80025ce:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80025d2:	4b62      	ldr	r3, [pc, #392]	; (800275c <Set_Screen+0x2a0>)
 80025d4:	701a      	strb	r2, [r3, #0]
						bimetal      = BUV_RT_VALS.ANN_2.Pump.Bimetal;
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <Set_Screen+0x298>)
 80025d8:	7f5a      	ldrb	r2, [r3, #29]
 80025da:	4b61      	ldr	r3, [pc, #388]	; (8002760 <Set_Screen+0x2a4>)
 80025dc:	701a      	strb	r2, [r3, #0]
						Press_napor  = BUV_RT_VALS.ANN_2.Out_Pressure;
 80025de:	4b5d      	ldr	r3, [pc, #372]	; (8002754 <Set_Screen+0x298>)
 80025e0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80025e4:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <Set_Screen+0x2a8>)
 80025e6:	801a      	strh	r2, [r3, #0]
						Press_maslo  = BUV_RT_VALS.ANN_2.Oil_Pressure;
 80025e8:	4b5a      	ldr	r3, [pc, #360]	; (8002754 <Set_Screen+0x298>)
 80025ea:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80025ee:	4b5e      	ldr	r3, [pc, #376]	; (8002768 <Set_Screen+0x2ac>)
 80025f0:	801a      	strh	r2, [r3, #0]
						Temp_maslo   = BUV_RT_VALS.ANN_2.Oil_Temperature;
 80025f2:	4b58      	ldr	r3, [pc, #352]	; (8002754 <Set_Screen+0x298>)
 80025f4:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80025f8:	4b5c      	ldr	r3, [pc, #368]	; (800276c <Set_Screen+0x2b0>)
 80025fa:	801a      	strh	r2, [r3, #0]
						motoclock    = BUV_RT_VALS.ANN_2.Pump.MotoClock;
 80025fc:	4b55      	ldr	r3, [pc, #340]	; (8002754 <Set_Screen+0x298>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a5b      	ldr	r2, [pc, #364]	; (8002770 <Set_Screen+0x2b4>)
 8002602:	6013      	str	r3, [r2, #0]
					break;
 8002604:	e022      	b.n	800264c <Set_Screen+0x190>

					case 2:
						engine_state = BUV_RT_VALS.ANN_3.Pump.State;
 8002606:	4b53      	ldr	r3, [pc, #332]	; (8002754 <Set_Screen+0x298>)
 8002608:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800260c:	4b52      	ldr	r3, [pc, #328]	; (8002758 <Set_Screen+0x29c>)
 800260e:	701a      	strb	r2, [r3, #0]
						unload		 = BUV_RT_VALS.ANN_3.Unload;
 8002610:	4b50      	ldr	r3, [pc, #320]	; (8002754 <Set_Screen+0x298>)
 8002612:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002616:	4b51      	ldr	r3, [pc, #324]	; (800275c <Set_Screen+0x2a0>)
 8002618:	701a      	strb	r2, [r3, #0]
						bimetal      = BUV_RT_VALS.ANN_3.Pump.Bimetal;
 800261a:	4b4e      	ldr	r3, [pc, #312]	; (8002754 <Set_Screen+0x298>)
 800261c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8002620:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <Set_Screen+0x2a4>)
 8002622:	701a      	strb	r2, [r3, #0]
						Press_napor  = BUV_RT_VALS.ANN_3.Out_Pressure;
 8002624:	4b4b      	ldr	r3, [pc, #300]	; (8002754 <Set_Screen+0x298>)
 8002626:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 800262a:	4b4e      	ldr	r3, [pc, #312]	; (8002764 <Set_Screen+0x2a8>)
 800262c:	801a      	strh	r2, [r3, #0]
						Press_maslo  = BUV_RT_VALS.ANN_3.Oil_Pressure;
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <Set_Screen+0x298>)
 8002630:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 8002634:	4b4c      	ldr	r3, [pc, #304]	; (8002768 <Set_Screen+0x2ac>)
 8002636:	801a      	strh	r2, [r3, #0]
						Temp_maslo   = BUV_RT_VALS.ANN_3.Oil_Temperature;
 8002638:	4b46      	ldr	r3, [pc, #280]	; (8002754 <Set_Screen+0x298>)
 800263a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800263e:	4b4b      	ldr	r3, [pc, #300]	; (800276c <Set_Screen+0x2b0>)
 8002640:	801a      	strh	r2, [r3, #0]
						motoclock    = BUV_RT_VALS.ANN_3.Pump.MotoClock;
 8002642:	4b44      	ldr	r3, [pc, #272]	; (8002754 <Set_Screen+0x298>)
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002646:	4a4a      	ldr	r2, [pc, #296]	; (8002770 <Set_Screen+0x2b4>)
 8002648:	6013      	str	r3, [r2, #0]
					break;
 800264a:	bf00      	nop
				}

				uint16_t shift_X = i * 260 + 7;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	0192      	lsls	r2, r2, #6
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	b29b      	uxth	r3, r3
 800265a:	3307      	adds	r3, #7
 800265c:	81fb      	strh	r3, [r7, #14]

				if(engine_state)
 800265e:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <Set_Screen+0x29c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d012      	beq.n	800268c <Set_Screen+0x1d0>
				{
					Short_Left_Colored_RU_DrawString_32("   Вкл   ", 		  9,  95 + shift_X,  20,      GreenColor, BasicSymbolColor, Page[1]);
 8002666:	89fb      	ldrh	r3, [r7, #14]
 8002668:	335f      	adds	r3, #95	; 0x5f
 800266a:	b298      	uxth	r0, r3
 800266c:	4b41      	ldr	r3, [pc, #260]	; (8002774 <Set_Screen+0x2b8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a41      	ldr	r2, [pc, #260]	; (8002778 <Set_Screen+0x2bc>)
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	4941      	ldr	r1, [pc, #260]	; (800277c <Set_Screen+0x2c0>)
 8002676:	6849      	ldr	r1, [r1, #4]
 8002678:	9102      	str	r1, [sp, #8]
 800267a:	9201      	str	r2, [sp, #4]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2314      	movs	r3, #20
 8002680:	4602      	mov	r2, r0
 8002682:	2109      	movs	r1, #9
 8002684:	483e      	ldr	r0, [pc, #248]	; (8002780 <Set_Screen+0x2c4>)
 8002686:	f004 f841 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 800268a:	e011      	b.n	80026b0 <Set_Screen+0x1f4>
				}
				else
				{
					Short_Left_Colored_RU_DrawString_32("   Выкл  ", 		  9,  95 + shift_X,  20,        RedColor, BasicSymbolColor, Page[1]);
 800268c:	89fb      	ldrh	r3, [r7, #14]
 800268e:	335f      	adds	r3, #95	; 0x5f
 8002690:	b298      	uxth	r0, r3
 8002692:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <Set_Screen+0x2c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a38      	ldr	r2, [pc, #224]	; (8002778 <Set_Screen+0x2bc>)
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	4938      	ldr	r1, [pc, #224]	; (800277c <Set_Screen+0x2c0>)
 800269c:	6849      	ldr	r1, [r1, #4]
 800269e:	9102      	str	r1, [sp, #8]
 80026a0:	9201      	str	r2, [sp, #4]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2314      	movs	r3, #20
 80026a6:	4602      	mov	r2, r0
 80026a8:	2109      	movs	r1, #9
 80026aa:	4837      	ldr	r0, [pc, #220]	; (8002788 <Set_Screen+0x2cc>)
 80026ac:	f004 f82e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				}
				Short_Centred_DrawNumber_16(Press_napor, 1, 4, 0, 					 170 + shift_X,  52, 									Page[1]);
 80026b0:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <Set_Screen+0x2a8>)
 80026b2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80026b6:	89fb      	ldrh	r3, [r7, #14]
 80026b8:	33aa      	adds	r3, #170	; 0xaa
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4a2f      	ldr	r2, [pc, #188]	; (800277c <Set_Screen+0x2c0>)
 80026be:	6852      	ldr	r2, [r2, #4]
 80026c0:	9202      	str	r2, [sp, #8]
 80026c2:	2234      	movs	r2, #52	; 0x34
 80026c4:	9201      	str	r2, [sp, #4]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	2300      	movs	r3, #0
 80026ca:	2204      	movs	r2, #4
 80026cc:	2101      	movs	r1, #1
 80026ce:	f005 f83d 	bl	800774c <Short_Centred_DrawNumber_16>
				Short_Centred_DrawNumber_16(Press_maslo, 2, 4, 0, 					 170 + shift_X,  82, 									Page[1]);
 80026d2:	4b25      	ldr	r3, [pc, #148]	; (8002768 <Set_Screen+0x2ac>)
 80026d4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80026d8:	89fb      	ldrh	r3, [r7, #14]
 80026da:	33aa      	adds	r3, #170	; 0xaa
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4a27      	ldr	r2, [pc, #156]	; (800277c <Set_Screen+0x2c0>)
 80026e0:	6852      	ldr	r2, [r2, #4]
 80026e2:	9202      	str	r2, [sp, #8]
 80026e4:	2252      	movs	r2, #82	; 0x52
 80026e6:	9201      	str	r2, [sp, #4]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	2300      	movs	r3, #0
 80026ec:	2204      	movs	r2, #4
 80026ee:	2102      	movs	r1, #2
 80026f0:	f005 f82c 	bl	800774c <Short_Centred_DrawNumber_16>
				Short_Centred_DrawNumber_16(Temp_maslo , 0, 4, 0, 					 170 + shift_X, 112, 									Page[1]);
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <Set_Screen+0x2b0>)
 80026f6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	33aa      	adds	r3, #170	; 0xaa
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4a1e      	ldr	r2, [pc, #120]	; (800277c <Set_Screen+0x2c0>)
 8002702:	6852      	ldr	r2, [r2, #4]
 8002704:	9202      	str	r2, [sp, #8]
 8002706:	2270      	movs	r2, #112	; 0x70
 8002708:	9201      	str	r2, [sp, #4]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2300      	movs	r3, #0
 800270e:	2204      	movs	r2, #4
 8002710:	2100      	movs	r1, #0
 8002712:	f005 f81b 	bl	800774c <Short_Centred_DrawNumber_16>
				if(unload)
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <Set_Screen+0x2a0>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d038      	beq.n	8002790 <Set_Screen+0x2d4>
				{
					Short_Left_Colored_RU_DrawString_32("  РАЗГРУЗКА   ", 	 14,   5 + shift_X, 140, 	  GreenColor, BasicSymbolColor, Page[1]);
 800271e:	89fb      	ldrh	r3, [r7, #14]
 8002720:	3305      	adds	r3, #5
 8002722:	b298      	uxth	r0, r3
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <Set_Screen+0x2b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a13      	ldr	r2, [pc, #76]	; (8002778 <Set_Screen+0x2bc>)
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	4913      	ldr	r1, [pc, #76]	; (800277c <Set_Screen+0x2c0>)
 800272e:	6849      	ldr	r1, [r1, #4]
 8002730:	9102      	str	r1, [sp, #8]
 8002732:	9201      	str	r2, [sp, #4]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	238c      	movs	r3, #140	; 0x8c
 8002738:	4602      	mov	r2, r0
 800273a:	210e      	movs	r1, #14
 800273c:	4813      	ldr	r0, [pc, #76]	; (800278c <Set_Screen+0x2d0>)
 800273e:	f003 ffe5 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002742:	e037      	b.n	80027b4 <Set_Screen+0x2f8>
 8002744:	20000b18 	.word	0x20000b18
 8002748:	20000010 	.word	0x20000010
 800274c:	200000a8 	.word	0x200000a8
 8002750:	20000008 	.word	0x20000008
 8002754:	20000a50 	.word	0x20000a50
 8002758:	200000f8 	.word	0x200000f8
 800275c:	200000f9 	.word	0x200000f9
 8002760:	200000fa 	.word	0x200000fa
 8002764:	200000fc 	.word	0x200000fc
 8002768:	200000fe 	.word	0x200000fe
 800276c:	20000100 	.word	0x20000100
 8002770:	20000104 	.word	0x20000104
 8002774:	20000004 	.word	0x20000004
 8002778:	200009f8 	.word	0x200009f8
 800277c:	20000984 	.word	0x20000984
 8002780:	0800ced0 	.word	0x0800ced0
 8002784:	20000000 	.word	0x20000000
 8002788:	0800d29c 	.word	0x0800d29c
 800278c:	0800cee0 	.word	0x0800cee0
				}
				else
				{
					Short_Left_Colored_RU_DrawString_32("  РАЗГРУЗКА   ", 	 14,   5 + shift_X, 140, 		RedColor, BasicSymbolColor, Page[1]);
 8002790:	89fb      	ldrh	r3, [r7, #14]
 8002792:	3305      	adds	r3, #5
 8002794:	b298      	uxth	r0, r3
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <Set_Screen+0x328>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <Set_Screen+0x32c>)
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	4913      	ldr	r1, [pc, #76]	; (80027ec <Set_Screen+0x330>)
 80027a0:	6849      	ldr	r1, [r1, #4]
 80027a2:	9102      	str	r1, [sp, #8]
 80027a4:	9201      	str	r2, [sp, #4]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	238c      	movs	r3, #140	; 0x8c
 80027aa:	4602      	mov	r2, r0
 80027ac:	210e      	movs	r1, #14
 80027ae:	4810      	ldr	r0, [pc, #64]	; (80027f0 <Set_Screen+0x334>)
 80027b0:	f003 ffac 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				}
				if(bimetal)
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <Set_Screen+0x338>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01f      	beq.n	80027fc <Set_Screen+0x340>
				{
					Short_Left_Colored_RU_DrawString_32(" тепл. защита ", 	 14,   5 + shift_X, 170, 		RedColor, BasicSymbolColor, Page[1]);
 80027bc:	89fb      	ldrh	r3, [r7, #14]
 80027be:	3305      	adds	r3, #5
 80027c0:	b298      	uxth	r0, r3
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <Set_Screen+0x328>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <Set_Screen+0x32c>)
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <Set_Screen+0x330>)
 80027cc:	6849      	ldr	r1, [r1, #4]
 80027ce:	9102      	str	r1, [sp, #8]
 80027d0:	9201      	str	r2, [sp, #4]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	23aa      	movs	r3, #170	; 0xaa
 80027d6:	4602      	mov	r2, r0
 80027d8:	210e      	movs	r1, #14
 80027da:	4807      	ldr	r0, [pc, #28]	; (80027f8 <Set_Screen+0x33c>)
 80027dc:	f003 ff96 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 80027e0:	e01e      	b.n	8002820 <Set_Screen+0x364>
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000
 80027e8:	200009f8 	.word	0x200009f8
 80027ec:	20000984 	.word	0x20000984
 80027f0:	0800cee0 	.word	0x0800cee0
 80027f4:	200000fa 	.word	0x200000fa
 80027f8:	0800d2ac 	.word	0x0800d2ac
				}
				else
				{
					Short_Left_Colored_RU_DrawString_32(" тепл. защита ", 	 14,   5 + shift_X, 170, 	  GreenColor, BasicSymbolColor, Page[1]);
 80027fc:	89fb      	ldrh	r3, [r7, #14]
 80027fe:	3305      	adds	r3, #5
 8002800:	b298      	uxth	r0, r3
 8002802:	4baa      	ldr	r3, [pc, #680]	; (8002aac <Set_Screen+0x5f0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4aaa      	ldr	r2, [pc, #680]	; (8002ab0 <Set_Screen+0x5f4>)
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	49aa      	ldr	r1, [pc, #680]	; (8002ab4 <Set_Screen+0x5f8>)
 800280c:	6849      	ldr	r1, [r1, #4]
 800280e:	9102      	str	r1, [sp, #8]
 8002810:	9201      	str	r2, [sp, #4]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	23aa      	movs	r3, #170	; 0xaa
 8002816:	4602      	mov	r2, r0
 8002818:	210e      	movs	r1, #14
 800281a:	48a7      	ldr	r0, [pc, #668]	; (8002ab8 <Set_Screen+0x5fc>)
 800281c:	f003 ff76 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				}

				Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 200 + shift_X, 205, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002820:	4ba6      	ldr	r3, [pc, #664]	; (8002abc <Set_Screen+0x600>)
 8002822:	681c      	ldr	r4, [r3, #0]
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	33c8      	adds	r3, #200	; 0xc8
 8002828:	4aa2      	ldr	r2, [pc, #648]	; (8002ab4 <Set_Screen+0x5f8>)
 800282a:	6852      	ldr	r2, [r2, #4]
 800282c:	49a4      	ldr	r1, [pc, #656]	; (8002ac0 <Set_Screen+0x604>)
 800282e:	6809      	ldr	r1, [r1, #0]
 8002830:	489f      	ldr	r0, [pc, #636]	; (8002ab0 <Set_Screen+0x5f4>)
 8002832:	6800      	ldr	r0, [r0, #0]
 8002834:	2512      	movs	r5, #18
 8002836:	9509      	str	r5, [sp, #36]	; 0x24
 8002838:	250b      	movs	r5, #11
 800283a:	9508      	str	r5, [sp, #32]
 800283c:	4da1      	ldr	r5, [pc, #644]	; (8002ac4 <Set_Screen+0x608>)
 800283e:	9507      	str	r5, [sp, #28]
 8002840:	9006      	str	r0, [sp, #24]
 8002842:	9105      	str	r1, [sp, #20]
 8002844:	9204      	str	r2, [sp, #16]
 8002846:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800284a:	9203      	str	r2, [sp, #12]
 800284c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002850:	9202      	str	r2, [sp, #8]
 8002852:	22cd      	movs	r2, #205	; 0xcd
 8002854:	9201      	str	r2, [sp, #4]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2300      	movs	r3, #0
 800285a:	220a      	movs	r2, #10
 800285c:	2100      	movs	r1, #0
 800285e:	4620      	mov	r0, r4
 8002860:	f004 fac2 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			for(int i = 0; i < 3; i++)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	3301      	adds	r3, #1
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b02      	cmp	r3, #2
 800286e:	f77f ae7c 	ble.w	800256a <Set_Screen+0xae>
			}

			Centred_DrawNumber_16(BUV_RT_VALS.Ustauka, 			0, 3, 0, 700, 270, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // Уставка
 8002872:	4b95      	ldr	r3, [pc, #596]	; (8002ac8 <Set_Screen+0x60c>)
 8002874:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002878:	4b8e      	ldr	r3, [pc, #568]	; (8002ab4 <Set_Screen+0x5f8>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a90      	ldr	r2, [pc, #576]	; (8002ac0 <Set_Screen+0x604>)
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	498b      	ldr	r1, [pc, #556]	; (8002ab0 <Set_Screen+0x5f4>)
 8002882:	6809      	ldr	r1, [r1, #0]
 8002884:	2419      	movs	r4, #25
 8002886:	9409      	str	r4, [sp, #36]	; 0x24
 8002888:	2410      	movs	r4, #16
 800288a:	9408      	str	r4, [sp, #32]
 800288c:	4c8f      	ldr	r4, [pc, #572]	; (8002acc <Set_Screen+0x610>)
 800288e:	9407      	str	r4, [sp, #28]
 8002890:	9106      	str	r1, [sp, #24]
 8002892:	9205      	str	r2, [sp, #20]
 8002894:	9304      	str	r3, [sp, #16]
 8002896:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800289a:	9303      	str	r3, [sp, #12]
 800289c:	f44f 7348 	mov.w	r3, #800	; 0x320
 80028a0:	9302      	str	r3, [sp, #8]
 80028a2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2300      	movs	r3, #0
 80028b0:	2203      	movs	r2, #3
 80028b2:	2100      	movs	r1, #0
 80028b4:	f004 f874 	bl	80069a0 <Centred_DrawNumber_16>
			Centred_DrawNumber_16(BUV_RT_VALS.TANK_level, 		0, 3, 0, 700, 330, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // уровень бак
 80028b8:	4b83      	ldr	r3, [pc, #524]	; (8002ac8 <Set_Screen+0x60c>)
 80028ba:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80028be:	4b7d      	ldr	r3, [pc, #500]	; (8002ab4 <Set_Screen+0x5f8>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a7f      	ldr	r2, [pc, #508]	; (8002ac0 <Set_Screen+0x604>)
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	497a      	ldr	r1, [pc, #488]	; (8002ab0 <Set_Screen+0x5f4>)
 80028c8:	6809      	ldr	r1, [r1, #0]
 80028ca:	2419      	movs	r4, #25
 80028cc:	9409      	str	r4, [sp, #36]	; 0x24
 80028ce:	2410      	movs	r4, #16
 80028d0:	9408      	str	r4, [sp, #32]
 80028d2:	4c7e      	ldr	r4, [pc, #504]	; (8002acc <Set_Screen+0x610>)
 80028d4:	9407      	str	r4, [sp, #28]
 80028d6:	9106      	str	r1, [sp, #24]
 80028d8:	9205      	str	r2, [sp, #20]
 80028da:	9304      	str	r3, [sp, #16]
 80028dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80028e0:	9303      	str	r3, [sp, #12]
 80028e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80028e6:	9302      	str	r3, [sp, #8]
 80028e8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2300      	movs	r3, #0
 80028f6:	2203      	movs	r2, #3
 80028f8:	2100      	movs	r1, #0
 80028fa:	f004 f851 	bl	80069a0 <Centred_DrawNumber_16>
			Centred_DrawNumber_16(BUV_RT_VALS.TANK_temperature, 0, 3, 0, 700, 390, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // температура бак
 80028fe:	4b72      	ldr	r3, [pc, #456]	; (8002ac8 <Set_Screen+0x60c>)
 8002900:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8002904:	4b6b      	ldr	r3, [pc, #428]	; (8002ab4 <Set_Screen+0x5f8>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a6d      	ldr	r2, [pc, #436]	; (8002ac0 <Set_Screen+0x604>)
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	4968      	ldr	r1, [pc, #416]	; (8002ab0 <Set_Screen+0x5f4>)
 800290e:	6809      	ldr	r1, [r1, #0]
 8002910:	2419      	movs	r4, #25
 8002912:	9409      	str	r4, [sp, #36]	; 0x24
 8002914:	2410      	movs	r4, #16
 8002916:	9408      	str	r4, [sp, #32]
 8002918:	4c6c      	ldr	r4, [pc, #432]	; (8002acc <Set_Screen+0x610>)
 800291a:	9407      	str	r4, [sp, #28]
 800291c:	9106      	str	r1, [sp, #24]
 800291e:	9205      	str	r2, [sp, #20]
 8002920:	9304      	str	r3, [sp, #16]
 8002922:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002926:	9303      	str	r3, [sp, #12]
 8002928:	f44f 7348 	mov.w	r3, #800	; 0x320
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2300      	movs	r3, #0
 800293c:	2203      	movs	r2, #3
 800293e:	2100      	movs	r1, #0
 8002940:	f004 f82e 	bl	80069a0 <Centred_DrawNumber_16>

			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Out_Pressure, 				1, 4, 0, 550, 242, 					 Page[1]); // давл в магистрали
 8002944:	4b60      	ldr	r3, [pc, #384]	; (8002ac8 <Set_Screen+0x60c>)
 8002946:	f9b3 0044 	ldrsh.w	r0, [r3, #68]	; 0x44
 800294a:	4b5a      	ldr	r3, [pc, #360]	; (8002ab4 <Set_Screen+0x5f8>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	23f2      	movs	r3, #242	; 0xf2
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	f240 2326 	movw	r3, #550	; 0x226
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2300      	movs	r3, #0
 800295c:	2204      	movs	r2, #4
 800295e:	2101      	movs	r1, #1
 8002960:	f004 fef4 	bl	800774c <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Pressure_before_press_filter, 1, 4, 0, 550, 272, 					 Page[1]); // перед сливным напорным фильтром
 8002964:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <Set_Screen+0x60c>)
 8002966:	f9b3 0046 	ldrsh.w	r0, [r3, #70]	; 0x46
 800296a:	4b52      	ldr	r3, [pc, #328]	; (8002ab4 <Set_Screen+0x5f8>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	9302      	str	r3, [sp, #8]
 8002970:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	f240 2326 	movw	r3, #550	; 0x226
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	2300      	movs	r3, #0
 800297e:	2204      	movs	r2, #4
 8002980:	2101      	movs	r1, #1
 8002982:	f004 fee3 	bl	800774c <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Pressure_before_filter, 		1, 4, 0, 330, 302, 					 Page[1]); // перед сливным фильтром
 8002986:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <Set_Screen+0x60c>)
 8002988:	f9b3 0048 	ldrsh.w	r0, [r3, #72]	; 0x48
 800298c:	4b49      	ldr	r3, [pc, #292]	; (8002ab4 <Set_Screen+0x5f8>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	9302      	str	r3, [sp, #8]
 8002992:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2300      	movs	r3, #0
 80029a0:	2204      	movs	r2, #4
 80029a2:	2101      	movs	r1, #1
 80029a4:	f004 fed2 	bl	800774c <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Pressure_behind_filter, 		1, 4, 0, 550, 302, 					 Page[1]); // за сливным фильтром
 80029a8:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <Set_Screen+0x60c>)
 80029aa:	f9b3 004a 	ldrsh.w	r0, [r3, #74]	; 0x4a
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <Set_Screen+0x5f8>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	f240 2326 	movw	r3, #550	; 0x226
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2300      	movs	r3, #0
 80029c2:	2204      	movs	r2, #4
 80029c4:	2101      	movs	r1, #1
 80029c6:	f004 fec1 	bl	800774c <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Flow,  1, 6, 0, 310, 334, 					 Page[1]); // расход на сливном фильтре
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <Set_Screen+0x60c>)
 80029cc:	f9b3 004c 	ldrsh.w	r0, [r3, #76]	; 0x4c
 80029d0:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <Set_Screen+0x5f8>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	9302      	str	r3, [sp, #8]
 80029d6:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	f44f 739b 	mov.w	r3, #310	; 0x136
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2300      	movs	r3, #0
 80029e4:	2206      	movs	r2, #6
 80029e6:	2101      	movs	r1, #1
 80029e8:	f004 feb0 	bl	800774c <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Flow, 		1, 6, 0, 530, 334, 					 Page[1]); // расход эмульсии
 80029ec:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <Set_Screen+0x60c>)
 80029ee:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <Set_Screen+0x5f8>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	9302      	str	r3, [sp, #8]
 80029f8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	f240 2312 	movw	r3, #530	; 0x212
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	2300      	movs	r3, #0
 8002a06:	2206      	movs	r2, #6
 8002a08:	2101      	movs	r1, #1
 8002a0a:	f004 fe9f 	bl	800774c <Short_Centred_DrawNumber_16>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Volume, 0, 10, 0, 340, 364, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18); // прокачаный объём на сливном фильтре
 8002a0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ac8 <Set_Screen+0x60c>)
 8002a10:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002a12:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <Set_Screen+0x5f8>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a2a      	ldr	r2, [pc, #168]	; (8002ac0 <Set_Screen+0x604>)
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	4925      	ldr	r1, [pc, #148]	; (8002ab0 <Set_Screen+0x5f4>)
 8002a1c:	6809      	ldr	r1, [r1, #0]
 8002a1e:	2412      	movs	r4, #18
 8002a20:	9409      	str	r4, [sp, #36]	; 0x24
 8002a22:	240b      	movs	r4, #11
 8002a24:	9408      	str	r4, [sp, #32]
 8002a26:	4c27      	ldr	r4, [pc, #156]	; (8002ac4 <Set_Screen+0x608>)
 8002a28:	9407      	str	r4, [sp, #28]
 8002a2a:	9106      	str	r1, [sp, #24]
 8002a2c:	9205      	str	r2, [sp, #20]
 8002a2e:	9304      	str	r3, [sp, #16]
 8002a30:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002a34:	9303      	str	r3, [sp, #12]
 8002a36:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002a3a:	9302      	str	r3, [sp, #8]
 8002a3c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	220a      	movs	r2, #10
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	f004 f9cb 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Volume,     0, 10, 0, 560, 364, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18); // прокачаный объём эмульсии
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <Set_Screen+0x60c>)
 8002a54:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002a56:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <Set_Screen+0x5f8>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <Set_Screen+0x604>)
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	4914      	ldr	r1, [pc, #80]	; (8002ab0 <Set_Screen+0x5f4>)
 8002a60:	6809      	ldr	r1, [r1, #0]
 8002a62:	2412      	movs	r4, #18
 8002a64:	9409      	str	r4, [sp, #36]	; 0x24
 8002a66:	240b      	movs	r4, #11
 8002a68:	9408      	str	r4, [sp, #32]
 8002a6a:	4c16      	ldr	r4, [pc, #88]	; (8002ac4 <Set_Screen+0x608>)
 8002a6c:	9407      	str	r4, [sp, #28]
 8002a6e:	9106      	str	r1, [sp, #24]
 8002a70:	9205      	str	r2, [sp, #20]
 8002a72:	9304      	str	r3, [sp, #16]
 8002a74:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002a78:	9303      	str	r3, [sp, #12]
 8002a7a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002a7e:	9302      	str	r3, [sp, #8]
 8002a80:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	220a      	movs	r2, #10
 8002a90:	2100      	movs	r1, #0
 8002a92:	f004 f9a9 	bl	8006de8 <Centred_DrawNumber_16_32bit>

			if(BUV_RT_VALS.FILT_NODE.Flush_valve_1)
 8002a96:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <Set_Screen+0x60c>)
 8002a98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d024      	beq.n	8002aea <Set_Screen+0x62e>
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.1", 	 11,  90, 400, GreenColor, BasicSymbolColor, Page[1]);
 8002aa0:	4b02      	ldr	r3, [pc, #8]	; (8002aac <Set_Screen+0x5f0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a02      	ldr	r2, [pc, #8]	; (8002ab0 <Set_Screen+0x5f4>)
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	e012      	b.n	8002ad0 <Set_Screen+0x614>
 8002aaa:	bf00      	nop
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	200009f8 	.word	0x200009f8
 8002ab4:	20000984 	.word	0x20000984
 8002ab8:	0800d2ac 	.word	0x0800d2ac
 8002abc:	20000104 	.word	0x20000104
 8002ac0:	20000008 	.word	0x20000008
 8002ac4:	08010518 	.word	0x08010518
 8002ac8:	20000a50 	.word	0x20000a50
 8002acc:	08011274 	.word	0x08011274
 8002ad0:	4998      	ldr	r1, [pc, #608]	; (8002d34 <Set_Screen+0x878>)
 8002ad2:	6849      	ldr	r1, [r1, #4]
 8002ad4:	9102      	str	r1, [sp, #8]
 8002ad6:	9201      	str	r2, [sp, #4]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002ade:	225a      	movs	r2, #90	; 0x5a
 8002ae0:	210b      	movs	r1, #11
 8002ae2:	4895      	ldr	r0, [pc, #596]	; (8002d38 <Set_Screen+0x87c>)
 8002ae4:	f003 fe12 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002ae8:	e00f      	b.n	8002b0a <Set_Screen+0x64e>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.1", 	 11,  90, 400,   RedColor, BasicSymbolColor, Page[1]);
 8002aea:	4b94      	ldr	r3, [pc, #592]	; (8002d3c <Set_Screen+0x880>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a94      	ldr	r2, [pc, #592]	; (8002d40 <Set_Screen+0x884>)
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	4990      	ldr	r1, [pc, #576]	; (8002d34 <Set_Screen+0x878>)
 8002af4:	6849      	ldr	r1, [r1, #4]
 8002af6:	9102      	str	r1, [sp, #8]
 8002af8:	9201      	str	r2, [sp, #4]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002b00:	225a      	movs	r2, #90	; 0x5a
 8002b02:	210b      	movs	r1, #11
 8002b04:	488c      	ldr	r0, [pc, #560]	; (8002d38 <Set_Screen+0x87c>)
 8002b06:	f003 fe01 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.FILT_NODE.Flush_valve_2)
 8002b0a:	4b8e      	ldr	r3, [pc, #568]	; (8002d44 <Set_Screen+0x888>)
 8002b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d011      	beq.n	8002b38 <Set_Screen+0x67c>
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.2", 	 11, 340, 400, GreenColor, BasicSymbolColor, Page[1]);
 8002b14:	4b8c      	ldr	r3, [pc, #560]	; (8002d48 <Set_Screen+0x88c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a89      	ldr	r2, [pc, #548]	; (8002d40 <Set_Screen+0x884>)
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	4985      	ldr	r1, [pc, #532]	; (8002d34 <Set_Screen+0x878>)
 8002b1e:	6849      	ldr	r1, [r1, #4]
 8002b20:	9102      	str	r1, [sp, #8]
 8002b22:	9201      	str	r2, [sp, #4]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002b2a:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8002b2e:	210b      	movs	r1, #11
 8002b30:	4886      	ldr	r0, [pc, #536]	; (8002d4c <Set_Screen+0x890>)
 8002b32:	f003 fdeb 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002b36:	e010      	b.n	8002b5a <Set_Screen+0x69e>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.2", 	 11, 340, 400,   RedColor, BasicSymbolColor, Page[1]);
 8002b38:	4b80      	ldr	r3, [pc, #512]	; (8002d3c <Set_Screen+0x880>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a80      	ldr	r2, [pc, #512]	; (8002d40 <Set_Screen+0x884>)
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	497c      	ldr	r1, [pc, #496]	; (8002d34 <Set_Screen+0x878>)
 8002b42:	6849      	ldr	r1, [r1, #4]
 8002b44:	9102      	str	r1, [sp, #8]
 8002b46:	9201      	str	r2, [sp, #4]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002b4e:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8002b52:	210b      	movs	r1, #11
 8002b54:	487d      	ldr	r0, [pc, #500]	; (8002d4c <Set_Screen+0x890>)
 8002b56:	f003 fdd9 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			Control_DB.RazrPointer 		= 0;
 8002b5a:	4b7d      	ldr	r3, [pc, #500]	; (8002d50 <Set_Screen+0x894>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	805a      	strh	r2, [r3, #2]

		break;
 8002b60:	f001 bd69 	b.w	8004636 <Set_Screen+0x217a>

		case 2:

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.MotoClock,			 0, 10, 0, 730,  94, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002b64:	4b77      	ldr	r3, [pc, #476]	; (8002d44 <Set_Screen+0x888>)
 8002b66:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002b68:	4b72      	ldr	r3, [pc, #456]	; (8002d34 <Set_Screen+0x878>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a79      	ldr	r2, [pc, #484]	; (8002d54 <Set_Screen+0x898>)
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	4973      	ldr	r1, [pc, #460]	; (8002d40 <Set_Screen+0x884>)
 8002b72:	6809      	ldr	r1, [r1, #0]
 8002b74:	2412      	movs	r4, #18
 8002b76:	9409      	str	r4, [sp, #36]	; 0x24
 8002b78:	240b      	movs	r4, #11
 8002b7a:	9408      	str	r4, [sp, #32]
 8002b7c:	4c76      	ldr	r4, [pc, #472]	; (8002d58 <Set_Screen+0x89c>)
 8002b7e:	9407      	str	r4, [sp, #28]
 8002b80:	9106      	str	r1, [sp, #24]
 8002b82:	9205      	str	r2, [sp, #20]
 8002b84:	9304      	str	r3, [sp, #16]
 8002b86:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002b8a:	9303      	str	r3, [sp, #12]
 8002b8c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002b90:	9302      	str	r3, [sp, #8]
 8002b92:	235e      	movs	r3, #94	; 0x5e
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	f240 23da 	movw	r3, #730	; 0x2da
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	220a      	movs	r2, #10
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	f004 f921 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.MotoClock,			 0, 10, 0, 730, 124, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002ba6:	4b67      	ldr	r3, [pc, #412]	; (8002d44 <Set_Screen+0x888>)
 8002ba8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002baa:	4b62      	ldr	r3, [pc, #392]	; (8002d34 <Set_Screen+0x878>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	4a69      	ldr	r2, [pc, #420]	; (8002d54 <Set_Screen+0x898>)
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4963      	ldr	r1, [pc, #396]	; (8002d40 <Set_Screen+0x884>)
 8002bb4:	6809      	ldr	r1, [r1, #0]
 8002bb6:	2412      	movs	r4, #18
 8002bb8:	9409      	str	r4, [sp, #36]	; 0x24
 8002bba:	240b      	movs	r4, #11
 8002bbc:	9408      	str	r4, [sp, #32]
 8002bbe:	4c66      	ldr	r4, [pc, #408]	; (8002d58 <Set_Screen+0x89c>)
 8002bc0:	9407      	str	r4, [sp, #28]
 8002bc2:	9106      	str	r1, [sp, #24]
 8002bc4:	9205      	str	r2, [sp, #20]
 8002bc6:	9304      	str	r3, [sp, #16]
 8002bc8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002bcc:	9303      	str	r3, [sp, #12]
 8002bce:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002bd2:	9302      	str	r3, [sp, #8]
 8002bd4:	237c      	movs	r3, #124	; 0x7c
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	f240 23da 	movw	r3, #730	; 0x2da
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	220a      	movs	r2, #10
 8002be2:	2100      	movs	r1, #0
 8002be4:	f004 f900 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.MotoClock,	 0, 10, 0, 730, 154, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002be8:	4b56      	ldr	r3, [pc, #344]	; (8002d44 <Set_Screen+0x888>)
 8002bea:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002bec:	4b51      	ldr	r3, [pc, #324]	; (8002d34 <Set_Screen+0x878>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <Set_Screen+0x898>)
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	4952      	ldr	r1, [pc, #328]	; (8002d40 <Set_Screen+0x884>)
 8002bf6:	6809      	ldr	r1, [r1, #0]
 8002bf8:	2412      	movs	r4, #18
 8002bfa:	9409      	str	r4, [sp, #36]	; 0x24
 8002bfc:	240b      	movs	r4, #11
 8002bfe:	9408      	str	r4, [sp, #32]
 8002c00:	4c55      	ldr	r4, [pc, #340]	; (8002d58 <Set_Screen+0x89c>)
 8002c02:	9407      	str	r4, [sp, #28]
 8002c04:	9106      	str	r1, [sp, #24]
 8002c06:	9205      	str	r2, [sp, #20]
 8002c08:	9304      	str	r3, [sp, #16]
 8002c0a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c0e:	9303      	str	r3, [sp, #12]
 8002c10:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002c14:	9302      	str	r3, [sp, #8]
 8002c16:	239a      	movs	r3, #154	; 0x9a
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	f240 23da 	movw	r3, #730	; 0x2da
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2300      	movs	r3, #0
 8002c22:	220a      	movs	r2, #10
 8002c24:	2100      	movs	r1, #0
 8002c26:	f004 f8df 	bl	8006de8 <Centred_DrawNumber_16_32bit>

			if(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.State)
 8002c2a:	4b46      	ldr	r3, [pc, #280]	; (8002d44 <Set_Screen+0x888>)
 8002c2c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00f      	beq.n	8002c54 <Set_Screen+0x798>
			{
				Short_Left_Colored_RU_DrawString_32("Насос циркуляционный ", 				21,  10,  90,      GreenColor, BasicSymbolColor, Page[2]);
 8002c34:	4b44      	ldr	r3, [pc, #272]	; (8002d48 <Set_Screen+0x88c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a41      	ldr	r2, [pc, #260]	; (8002d40 <Set_Screen+0x884>)
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	493d      	ldr	r1, [pc, #244]	; (8002d34 <Set_Screen+0x878>)
 8002c3e:	6889      	ldr	r1, [r1, #8]
 8002c40:	9102      	str	r1, [sp, #8]
 8002c42:	9201      	str	r2, [sp, #4]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	235a      	movs	r3, #90	; 0x5a
 8002c48:	220a      	movs	r2, #10
 8002c4a:	2115      	movs	r1, #21
 8002c4c:	4843      	ldr	r0, [pc, #268]	; (8002d5c <Set_Screen+0x8a0>)
 8002c4e:	f003 fd5d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002c52:	e00e      	b.n	8002c72 <Set_Screen+0x7b6>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Насос циркуляционный ", 				21,  10,  90,        RedColor, BasicSymbolColor, Page[2]);
 8002c54:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <Set_Screen+0x880>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a39      	ldr	r2, [pc, #228]	; (8002d40 <Set_Screen+0x884>)
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	4935      	ldr	r1, [pc, #212]	; (8002d34 <Set_Screen+0x878>)
 8002c5e:	6889      	ldr	r1, [r1, #8]
 8002c60:	9102      	str	r1, [sp, #8]
 8002c62:	9201      	str	r2, [sp, #4]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	235a      	movs	r3, #90	; 0x5a
 8002c68:	220a      	movs	r2, #10
 8002c6a:	2115      	movs	r1, #21
 8002c6c:	483b      	ldr	r0, [pc, #236]	; (8002d5c <Set_Screen+0x8a0>)
 8002c6e:	f003 fd4d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.Bimetal)
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <Set_Screen+0x888>)
 8002c74:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <Set_Screen+0x7e2>
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400,  90,      GreenColor, BasicSymbolColor, Page[2]);
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <Set_Screen+0x88c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2f      	ldr	r2, [pc, #188]	; (8002d40 <Set_Screen+0x884>)
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	492b      	ldr	r1, [pc, #172]	; (8002d34 <Set_Screen+0x878>)
 8002c86:	6889      	ldr	r1, [r1, #8]
 8002c88:	9102      	str	r1, [sp, #8]
 8002c8a:	9201      	str	r2, [sp, #4]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	235a      	movs	r3, #90	; 0x5a
 8002c90:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002c94:	2108      	movs	r1, #8
 8002c96:	4832      	ldr	r0, [pc, #200]	; (8002d60 <Set_Screen+0x8a4>)
 8002c98:	f003 fd38 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002c9c:	e00f      	b.n	8002cbe <Set_Screen+0x802>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400,  90,        RedColor, BasicSymbolColor, Page[2]);
 8002c9e:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <Set_Screen+0x880>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a27      	ldr	r2, [pc, #156]	; (8002d40 <Set_Screen+0x884>)
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	4923      	ldr	r1, [pc, #140]	; (8002d34 <Set_Screen+0x878>)
 8002ca8:	6889      	ldr	r1, [r1, #8]
 8002caa:	9102      	str	r1, [sp, #8]
 8002cac:	9201      	str	r2, [sp, #4]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	235a      	movs	r3, #90	; 0x5a
 8002cb2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002cb6:	2108      	movs	r1, #8
 8002cb8:	4829      	ldr	r0, [pc, #164]	; (8002d60 <Set_Screen+0x8a4>)
 8002cba:	f003 fd27 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}


			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.State)
 8002cbe:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <Set_Screen+0x888>)
 8002cc0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00f      	beq.n	8002ce8 <Set_Screen+0x82c>
			{
				Short_Left_Colored_RU_DrawString_32("Насос концентрата    ", 				21,  10, 120,      GreenColor, BasicSymbolColor, Page[2]);
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <Set_Screen+0x88c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <Set_Screen+0x884>)
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	4918      	ldr	r1, [pc, #96]	; (8002d34 <Set_Screen+0x878>)
 8002cd2:	6889      	ldr	r1, [r1, #8]
 8002cd4:	9102      	str	r1, [sp, #8]
 8002cd6:	9201      	str	r2, [sp, #4]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2378      	movs	r3, #120	; 0x78
 8002cdc:	220a      	movs	r2, #10
 8002cde:	2115      	movs	r1, #21
 8002ce0:	4820      	ldr	r0, [pc, #128]	; (8002d64 <Set_Screen+0x8a8>)
 8002ce2:	f003 fd13 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002ce6:	e00e      	b.n	8002d06 <Set_Screen+0x84a>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Насос концентрата    ", 				21,  10, 120,        RedColor, BasicSymbolColor, Page[2]);
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <Set_Screen+0x880>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <Set_Screen+0x884>)
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	4910      	ldr	r1, [pc, #64]	; (8002d34 <Set_Screen+0x878>)
 8002cf2:	6889      	ldr	r1, [r1, #8]
 8002cf4:	9102      	str	r1, [sp, #8]
 8002cf6:	9201      	str	r2, [sp, #4]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	2378      	movs	r3, #120	; 0x78
 8002cfc:	220a      	movs	r2, #10
 8002cfe:	2115      	movs	r1, #21
 8002d00:	4818      	ldr	r0, [pc, #96]	; (8002d64 <Set_Screen+0x8a8>)
 8002d02:	f003 fd03 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.Bimetal)
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <Set_Screen+0x888>)
 8002d08:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d02b      	beq.n	8002d68 <Set_Screen+0x8ac>
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 120,      GreenColor, BasicSymbolColor, Page[2]);
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <Set_Screen+0x88c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <Set_Screen+0x884>)
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	4906      	ldr	r1, [pc, #24]	; (8002d34 <Set_Screen+0x878>)
 8002d1a:	6889      	ldr	r1, [r1, #8]
 8002d1c:	9102      	str	r1, [sp, #8]
 8002d1e:	9201      	str	r2, [sp, #4]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2378      	movs	r3, #120	; 0x78
 8002d24:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d28:	2108      	movs	r1, #8
 8002d2a:	480d      	ldr	r0, [pc, #52]	; (8002d60 <Set_Screen+0x8a4>)
 8002d2c:	f003 fcee 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002d30:	e02a      	b.n	8002d88 <Set_Screen+0x8cc>
 8002d32:	bf00      	nop
 8002d34:	20000984 	.word	0x20000984
 8002d38:	0800d2c8 	.word	0x0800d2c8
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	200009f8 	.word	0x200009f8
 8002d44:	20000a50 	.word	0x20000a50
 8002d48:	20000004 	.word	0x20000004
 8002d4c:	0800d2dc 	.word	0x0800d2dc
 8002d50:	20000b18 	.word	0x20000b18
 8002d54:	20000008 	.word	0x20000008
 8002d58:	08010518 	.word	0x08010518
 8002d5c:	0800d2f0 	.word	0x0800d2f0
 8002d60:	0800d31c 	.word	0x0800d31c
 8002d64:	0800d32c 	.word	0x0800d32c
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 120,        RedColor, BasicSymbolColor, Page[2]);
 8002d68:	4ba2      	ldr	r3, [pc, #648]	; (8002ff4 <Set_Screen+0xb38>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4aa2      	ldr	r2, [pc, #648]	; (8002ff8 <Set_Screen+0xb3c>)
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	49a2      	ldr	r1, [pc, #648]	; (8002ffc <Set_Screen+0xb40>)
 8002d72:	6889      	ldr	r1, [r1, #8]
 8002d74:	9102      	str	r1, [sp, #8]
 8002d76:	9201      	str	r2, [sp, #4]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	2378      	movs	r3, #120	; 0x78
 8002d7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d80:	2108      	movs	r1, #8
 8002d82:	489f      	ldr	r0, [pc, #636]	; (8003000 <Set_Screen+0xb44>)
 8002d84:	f003 fcc2 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.State)
 8002d88:	4b9e      	ldr	r3, [pc, #632]	; (8003004 <Set_Screen+0xb48>)
 8002d8a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00f      	beq.n	8002db2 <Set_Screen+0x8f6>
			{
				Short_Left_Colored_RU_DrawString_32("Насос закач.концентр.", 				21,  10, 150,      GreenColor, BasicSymbolColor, Page[2]);
 8002d92:	4b9d      	ldr	r3, [pc, #628]	; (8003008 <Set_Screen+0xb4c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a98      	ldr	r2, [pc, #608]	; (8002ff8 <Set_Screen+0xb3c>)
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	4998      	ldr	r1, [pc, #608]	; (8002ffc <Set_Screen+0xb40>)
 8002d9c:	6889      	ldr	r1, [r1, #8]
 8002d9e:	9102      	str	r1, [sp, #8]
 8002da0:	9201      	str	r2, [sp, #4]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2396      	movs	r3, #150	; 0x96
 8002da6:	220a      	movs	r2, #10
 8002da8:	2115      	movs	r1, #21
 8002daa:	4898      	ldr	r0, [pc, #608]	; (800300c <Set_Screen+0xb50>)
 8002dac:	f003 fcae 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002db0:	e00e      	b.n	8002dd0 <Set_Screen+0x914>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Насос закач.концентр.", 				21,  10, 150,        RedColor, BasicSymbolColor, Page[2]);
 8002db2:	4b90      	ldr	r3, [pc, #576]	; (8002ff4 <Set_Screen+0xb38>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a90      	ldr	r2, [pc, #576]	; (8002ff8 <Set_Screen+0xb3c>)
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	4990      	ldr	r1, [pc, #576]	; (8002ffc <Set_Screen+0xb40>)
 8002dbc:	6889      	ldr	r1, [r1, #8]
 8002dbe:	9102      	str	r1, [sp, #8]
 8002dc0:	9201      	str	r2, [sp, #4]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2396      	movs	r3, #150	; 0x96
 8002dc6:	220a      	movs	r2, #10
 8002dc8:	2115      	movs	r1, #21
 8002dca:	4890      	ldr	r0, [pc, #576]	; (800300c <Set_Screen+0xb50>)
 8002dcc:	f003 fc9e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.Bimetal)
 8002dd0:	4b8c      	ldr	r3, [pc, #560]	; (8003004 <Set_Screen+0xb48>)
 8002dd2:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <Set_Screen+0x940>
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 150,      GreenColor, BasicSymbolColor, Page[2]);
 8002dda:	4b8b      	ldr	r3, [pc, #556]	; (8003008 <Set_Screen+0xb4c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a86      	ldr	r2, [pc, #536]	; (8002ff8 <Set_Screen+0xb3c>)
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	4986      	ldr	r1, [pc, #536]	; (8002ffc <Set_Screen+0xb40>)
 8002de4:	6889      	ldr	r1, [r1, #8]
 8002de6:	9102      	str	r1, [sp, #8]
 8002de8:	9201      	str	r2, [sp, #4]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2396      	movs	r3, #150	; 0x96
 8002dee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002df2:	2108      	movs	r1, #8
 8002df4:	4882      	ldr	r0, [pc, #520]	; (8003000 <Set_Screen+0xb44>)
 8002df6:	f003 fc89 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002dfa:	e00f      	b.n	8002e1c <Set_Screen+0x960>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 150,        RedColor, BasicSymbolColor, Page[2]);
 8002dfc:	4b7d      	ldr	r3, [pc, #500]	; (8002ff4 <Set_Screen+0xb38>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a7d      	ldr	r2, [pc, #500]	; (8002ff8 <Set_Screen+0xb3c>)
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	497d      	ldr	r1, [pc, #500]	; (8002ffc <Set_Screen+0xb40>)
 8002e06:	6889      	ldr	r1, [r1, #8]
 8002e08:	9102      	str	r1, [sp, #8]
 8002e0a:	9201      	str	r2, [sp, #4]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2396      	movs	r3, #150	; 0x96
 8002e10:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002e14:	2108      	movs	r1, #8
 8002e16:	487a      	ldr	r0, [pc, #488]	; (8003000 <Set_Screen+0xb44>)
 8002e18:	f003 fc78 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Flow,   	 1,  6, 0, 470, 184, Page[2]);
 8002e1c:	4b79      	ldr	r3, [pc, #484]	; (8003004 <Set_Screen+0xb48>)
 8002e1e:	f9b3 0088 	ldrsh.w	r0, [r3, #136]	; 0x88
 8002e22:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <Set_Screen+0xb40>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	9302      	str	r3, [sp, #8]
 8002e28:	23b8      	movs	r3, #184	; 0xb8
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2300      	movs	r3, #0
 8002e34:	2206      	movs	r2, #6
 8002e36:	2101      	movs	r1, #1
 8002e38:	f004 fc88 	bl	800774c <Short_Centred_DrawNumber_16>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Volume, 	 0, 10, 0, 650, 184, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002e3c:	4b71      	ldr	r3, [pc, #452]	; (8003004 <Set_Screen+0xb48>)
 8002e3e:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 8002e42:	4b6e      	ldr	r3, [pc, #440]	; (8002ffc <Set_Screen+0xb40>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4a72      	ldr	r2, [pc, #456]	; (8003010 <Set_Screen+0xb54>)
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	496b      	ldr	r1, [pc, #428]	; (8002ff8 <Set_Screen+0xb3c>)
 8002e4c:	6809      	ldr	r1, [r1, #0]
 8002e4e:	2412      	movs	r4, #18
 8002e50:	9409      	str	r4, [sp, #36]	; 0x24
 8002e52:	240b      	movs	r4, #11
 8002e54:	9408      	str	r4, [sp, #32]
 8002e56:	4c6f      	ldr	r4, [pc, #444]	; (8003014 <Set_Screen+0xb58>)
 8002e58:	9407      	str	r4, [sp, #28]
 8002e5a:	9106      	str	r1, [sp, #24]
 8002e5c:	9205      	str	r2, [sp, #20]
 8002e5e:	9304      	str	r3, [sp, #16]
 8002e60:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002e64:	9303      	str	r3, [sp, #12]
 8002e66:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002e6a:	9302      	str	r3, [sp, #8]
 8002e6c:	23b8      	movs	r3, #184	; 0xb8
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	f240 238a 	movw	r3, #650	; 0x28a
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	2300      	movs	r3, #0
 8002e78:	220a      	movs	r2, #10
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	f003 ffb4 	bl	8006de8 <Centred_DrawNumber_16_32bit>

			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Flow, 		 1, 6, 0,  470, 364, Page[2]);
 8002e80:	4b60      	ldr	r3, [pc, #384]	; (8003004 <Set_Screen+0xb48>)
 8002e82:	f9b3 0080 	ldrsh.w	r0, [r3, #128]	; 0x80
 8002e86:	4b5d      	ldr	r3, [pc, #372]	; (8002ffc <Set_Screen+0xb40>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	9302      	str	r3, [sp, #8]
 8002e8c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2206      	movs	r2, #6
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	f004 fc55 	bl	800774c <Short_Centred_DrawNumber_16>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Volume, 		 0, 10, 0, 650, 364, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002ea2:	4b58      	ldr	r3, [pc, #352]	; (8003004 <Set_Screen+0xb48>)
 8002ea4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8002ea8:	4b54      	ldr	r3, [pc, #336]	; (8002ffc <Set_Screen+0xb40>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a58      	ldr	r2, [pc, #352]	; (8003010 <Set_Screen+0xb54>)
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	4951      	ldr	r1, [pc, #324]	; (8002ff8 <Set_Screen+0xb3c>)
 8002eb2:	6809      	ldr	r1, [r1, #0]
 8002eb4:	2412      	movs	r4, #18
 8002eb6:	9409      	str	r4, [sp, #36]	; 0x24
 8002eb8:	240b      	movs	r4, #11
 8002eba:	9408      	str	r4, [sp, #32]
 8002ebc:	4c55      	ldr	r4, [pc, #340]	; (8003014 <Set_Screen+0xb58>)
 8002ebe:	9407      	str	r4, [sp, #28]
 8002ec0:	9106      	str	r1, [sp, #24]
 8002ec2:	9205      	str	r2, [sp, #20]
 8002ec4:	9304      	str	r3, [sp, #16]
 8002ec6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002eca:	9303      	str	r3, [sp, #12]
 8002ecc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	f240 238a 	movw	r3, #650	; 0x28a
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	220a      	movs	r2, #10
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	f003 ff80 	bl	8006de8 <Centred_DrawNumber_16_32bit>

			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Pressure_before_water_filters, 1, 6, 0,  673, 304, Page[2]);
 8002ee8:	4b46      	ldr	r3, [pc, #280]	; (8003004 <Set_Screen+0xb48>)
 8002eea:	f9b3 0090 	ldrsh.w	r0, [r3, #144]	; 0x90
 8002eee:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <Set_Screen+0xb40>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	f240 23a1 	movw	r3, #673	; 0x2a1
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2300      	movs	r3, #0
 8002f02:	2206      	movs	r2, #6
 8002f04:	2101      	movs	r1, #1
 8002f06:	f004 fc21 	bl	800774c <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Pressure_behind_water_filters, 1, 6, 0,  673, 334, Page[2]);
 8002f0a:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <Set_Screen+0xb48>)
 8002f0c:	f9b3 0092 	ldrsh.w	r0, [r3, #146]	; 0x92
 8002f10:	4b3a      	ldr	r3, [pc, #232]	; (8002ffc <Set_Screen+0xb40>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	9302      	str	r3, [sp, #8]
 8002f16:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	f240 23a1 	movw	r3, #673	; 0x2a1
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2300      	movs	r3, #0
 8002f24:	2206      	movs	r2, #6
 8002f26:	2101      	movs	r1, #1
 8002f28:	f004 fc10 	bl	800774c <Short_Centred_DrawNumber_16>

			if(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_1)
 8002f2c:	4b35      	ldr	r3, [pc, #212]	; (8003004 <Set_Screen+0xb48>)
 8002f2e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d010      	beq.n	8002f58 <Set_Screen+0xa9c>
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.1", 8,  20, 400,      GreenColor, BasicSymbolColor, Page[2]);
 8002f36:	4b34      	ldr	r3, [pc, #208]	; (8003008 <Set_Screen+0xb4c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2f      	ldr	r2, [pc, #188]	; (8002ff8 <Set_Screen+0xb3c>)
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	492f      	ldr	r1, [pc, #188]	; (8002ffc <Set_Screen+0xb40>)
 8002f40:	6889      	ldr	r1, [r1, #8]
 8002f42:	9102      	str	r1, [sp, #8]
 8002f44:	9201      	str	r2, [sp, #4]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f4c:	2214      	movs	r2, #20
 8002f4e:	2108      	movs	r1, #8
 8002f50:	4831      	ldr	r0, [pc, #196]	; (8003018 <Set_Screen+0xb5c>)
 8002f52:	f003 fbdb 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002f56:	e00f      	b.n	8002f78 <Set_Screen+0xabc>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.1", 8,  20, 400,        RedColor, BasicSymbolColor, Page[2]);
 8002f58:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <Set_Screen+0xb38>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <Set_Screen+0xb3c>)
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	4926      	ldr	r1, [pc, #152]	; (8002ffc <Set_Screen+0xb40>)
 8002f62:	6889      	ldr	r1, [r1, #8]
 8002f64:	9102      	str	r1, [sp, #8]
 8002f66:	9201      	str	r2, [sp, #4]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f6e:	2214      	movs	r2, #20
 8002f70:	2108      	movs	r1, #8
 8002f72:	4829      	ldr	r0, [pc, #164]	; (8003018 <Set_Screen+0xb5c>)
 8002f74:	f003 fbca 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}
			if(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_2)
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <Set_Screen+0xb48>)
 8002f7a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <Set_Screen+0xae8>
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.2", 8, 170, 400,      GreenColor, BasicSymbolColor, Page[2]);
 8002f82:	4b21      	ldr	r3, [pc, #132]	; (8003008 <Set_Screen+0xb4c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1c      	ldr	r2, [pc, #112]	; (8002ff8 <Set_Screen+0xb3c>)
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	491c      	ldr	r1, [pc, #112]	; (8002ffc <Set_Screen+0xb40>)
 8002f8c:	6889      	ldr	r1, [r1, #8]
 8002f8e:	9102      	str	r1, [sp, #8]
 8002f90:	9201      	str	r2, [sp, #4]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f98:	22aa      	movs	r2, #170	; 0xaa
 8002f9a:	2108      	movs	r1, #8
 8002f9c:	481f      	ldr	r0, [pc, #124]	; (800301c <Set_Screen+0xb60>)
 8002f9e:	f003 fbb5 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002fa2:	e00f      	b.n	8002fc4 <Set_Screen+0xb08>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.2", 8, 170, 400,        RedColor, BasicSymbolColor, Page[2]);
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <Set_Screen+0xb38>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <Set_Screen+0xb3c>)
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	4913      	ldr	r1, [pc, #76]	; (8002ffc <Set_Screen+0xb40>)
 8002fae:	6889      	ldr	r1, [r1, #8]
 8002fb0:	9102      	str	r1, [sp, #8]
 8002fb2:	9201      	str	r2, [sp, #4]
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002fba:	22aa      	movs	r2, #170	; 0xaa
 8002fbc:	2108      	movs	r1, #8
 8002fbe:	4817      	ldr	r0, [pc, #92]	; (800301c <Set_Screen+0xb60>)
 8002fc0:	f003 fba4 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}
			if(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_3)
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <Set_Screen+0xb48>)
 8002fc6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d02a      	beq.n	8003024 <Set_Screen+0xb68>
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.3", 8, 320, 400,      GreenColor, BasicSymbolColor, Page[2]);
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <Set_Screen+0xb4c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <Set_Screen+0xb3c>)
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	4909      	ldr	r1, [pc, #36]	; (8002ffc <Set_Screen+0xb40>)
 8002fd8:	6889      	ldr	r1, [r1, #8]
 8002fda:	9102      	str	r1, [sp, #8]
 8002fdc:	9201      	str	r2, [sp, #4]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002fe4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fe8:	2108      	movs	r1, #8
 8002fea:	480d      	ldr	r0, [pc, #52]	; (8003020 <Set_Screen+0xb64>)
 8002fec:	f003 fb8e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8002ff0:	e029      	b.n	8003046 <Set_Screen+0xb8a>
 8002ff2:	bf00      	nop
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	200009f8 	.word	0x200009f8
 8002ffc:	20000984 	.word	0x20000984
 8003000:	0800d31c 	.word	0x0800d31c
 8003004:	20000a50 	.word	0x20000a50
 8003008:	20000004 	.word	0x20000004
 800300c:	0800d354 	.word	0x0800d354
 8003010:	20000008 	.word	0x20000008
 8003014:	08010518 	.word	0x08010518
 8003018:	0800d37c 	.word	0x0800d37c
 800301c:	0800d38c 	.word	0x0800d38c
 8003020:	0800d39c 	.word	0x0800d39c
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.3", 8, 320, 400,        RedColor, BasicSymbolColor, Page[2]);
 8003024:	4b3e      	ldr	r3, [pc, #248]	; (8003120 <Set_Screen+0xc64>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a3e      	ldr	r2, [pc, #248]	; (8003124 <Set_Screen+0xc68>)
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	493e      	ldr	r1, [pc, #248]	; (8003128 <Set_Screen+0xc6c>)
 800302e:	6889      	ldr	r1, [r1, #8]
 8003030:	9102      	str	r1, [sp, #8]
 8003032:	9201      	str	r2, [sp, #4]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800303a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800303e:	2108      	movs	r1, #8
 8003040:	483a      	ldr	r0, [pc, #232]	; (800312c <Set_Screen+0xc70>)
 8003042:	f003 fb63 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Water_valve)
 8003046:	4b3a      	ldr	r3, [pc, #232]	; (8003130 <Set_Screen+0xc74>)
 8003048:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d011      	beq.n	8003074 <Set_Screen+0xbb8>
			{
				Short_Left_Colored_RU_DrawString_32("кл.воды ", 8, 470, 400,      GreenColor, BasicSymbolColor, Page[2]);
 8003050:	4b38      	ldr	r3, [pc, #224]	; (8003134 <Set_Screen+0xc78>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a33      	ldr	r2, [pc, #204]	; (8003124 <Set_Screen+0xc68>)
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	4933      	ldr	r1, [pc, #204]	; (8003128 <Set_Screen+0xc6c>)
 800305a:	6889      	ldr	r1, [r1, #8]
 800305c:	9102      	str	r1, [sp, #8]
 800305e:	9201      	str	r2, [sp, #4]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003066:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800306a:	2108      	movs	r1, #8
 800306c:	4832      	ldr	r0, [pc, #200]	; (8003138 <Set_Screen+0xc7c>)
 800306e:	f003 fb4d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8003072:	e010      	b.n	8003096 <Set_Screen+0xbda>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.воды ", 8, 470, 400,        RedColor, BasicSymbolColor, Page[2]);
 8003074:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <Set_Screen+0xc64>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <Set_Screen+0xc68>)
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	492a      	ldr	r1, [pc, #168]	; (8003128 <Set_Screen+0xc6c>)
 800307e:	6889      	ldr	r1, [r1, #8]
 8003080:	9102      	str	r1, [sp, #8]
 8003082:	9201      	str	r2, [sp, #4]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800308a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800308e:	2108      	movs	r1, #8
 8003090:	4829      	ldr	r0, [pc, #164]	; (8003138 <Set_Screen+0xc7c>)
 8003092:	f003 fb3b 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Concentrate_valve)
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <Set_Screen+0xc74>)
 8003098:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800309c:	2b00      	cmp	r3, #0
 800309e:	d011      	beq.n	80030c4 <Set_Screen+0xc08>
			{
				Short_Left_Colored_RU_DrawString_32("кл.конц ", 8, 620, 400,      GreenColor, BasicSymbolColor, Page[2]);
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <Set_Screen+0xc78>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <Set_Screen+0xc68>)
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	491f      	ldr	r1, [pc, #124]	; (8003128 <Set_Screen+0xc6c>)
 80030aa:	6889      	ldr	r1, [r1, #8]
 80030ac:	9102      	str	r1, [sp, #8]
 80030ae:	9201      	str	r2, [sp, #4]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80030b6:	f44f 721b 	mov.w	r2, #620	; 0x26c
 80030ba:	2108      	movs	r1, #8
 80030bc:	481f      	ldr	r0, [pc, #124]	; (800313c <Set_Screen+0xc80>)
 80030be:	f003 fb25 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 80030c2:	e010      	b.n	80030e6 <Set_Screen+0xc2a>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.конц ", 8, 620, 400,        RedColor, BasicSymbolColor, Page[2]);
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <Set_Screen+0xc64>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a16      	ldr	r2, [pc, #88]	; (8003124 <Set_Screen+0xc68>)
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	4916      	ldr	r1, [pc, #88]	; (8003128 <Set_Screen+0xc6c>)
 80030ce:	6889      	ldr	r1, [r1, #8]
 80030d0:	9102      	str	r1, [sp, #8]
 80030d2:	9201      	str	r2, [sp, #4]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80030da:	f44f 721b 	mov.w	r2, #620	; 0x26c
 80030de:	2108      	movs	r1, #8
 80030e0:	4816      	ldr	r0, [pc, #88]	; (800313c <Set_Screen+0xc80>)
 80030e2:	f003 fb13 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			Control_DB.RazrPointer 		= 0;
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <Set_Screen+0xc84>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	805a      	strh	r2, [r3, #2]

		break;
 80030ec:	f001 baa3 	b.w	8004636 <Set_Screen+0x217a>

		case 3: // Окно данные

			if(!PassW_block.DataClearingUnlock)
 80030f0:	4b14      	ldr	r3, [pc, #80]	; (8003144 <Set_Screen+0xc88>)
 80030f2:	7c1b      	ldrb	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d12b      	bne.n	8003150 <Set_Screen+0xc94>
			{
				Control_DB.MenuPointerMAX 	= 0;
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <Set_Screen+0xc84>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	809a      	strh	r2, [r3, #4]
				Short_Left_Colored_RU_DrawString_32("ввод пароля для возм.обнуления:", 	31,	10,  50, FonColor[0], BasicSymbolColor, Page[3]);
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <Set_Screen+0xc8c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <Set_Screen+0xc68>)
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <Set_Screen+0xc6c>)
 8003108:	68c9      	ldr	r1, [r1, #12]
 800310a:	9102      	str	r1, [sp, #8]
 800310c:	9201      	str	r2, [sp, #4]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2332      	movs	r3, #50	; 0x32
 8003112:	220a      	movs	r2, #10
 8003114:	211f      	movs	r1, #31
 8003116:	480d      	ldr	r0, [pc, #52]	; (800314c <Set_Screen+0xc90>)
 8003118:	f003 faf8 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 800311c:	e02a      	b.n	8003174 <Set_Screen+0xcb8>
 800311e:	bf00      	nop
 8003120:	20000000 	.word	0x20000000
 8003124:	200009f8 	.word	0x200009f8
 8003128:	20000984 	.word	0x20000984
 800312c:	0800d39c 	.word	0x0800d39c
 8003130:	20000a50 	.word	0x20000a50
 8003134:	20000004 	.word	0x20000004
 8003138:	0800d3ac 	.word	0x0800d3ac
 800313c:	0800d3bc 	.word	0x0800d3bc
 8003140:	20000b18 	.word	0x20000b18
 8003144:	20000a00 	.word	0x20000a00
 8003148:	200000a8 	.word	0x200000a8
 800314c:	0800d3cc 	.word	0x0800d3cc
			}
			else
			{
				Control_DB.MenuPointerMAX 	= 19;
 8003150:	4b9e      	ldr	r3, [pc, #632]	; (80033cc <Set_Screen+0xf10>)
 8003152:	2213      	movs	r2, #19
 8003154:	809a      	strh	r2, [r3, #4]
				Short_Left_Colored_RU_DrawString_32("пароль подтвержден             ", 	31,	10,  50, FonColor[0], BasicSymbolColor, Page[3]);
 8003156:	4b9e      	ldr	r3, [pc, #632]	; (80033d0 <Set_Screen+0xf14>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a9e      	ldr	r2, [pc, #632]	; (80033d4 <Set_Screen+0xf18>)
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	499e      	ldr	r1, [pc, #632]	; (80033d8 <Set_Screen+0xf1c>)
 8003160:	68c9      	ldr	r1, [r1, #12]
 8003162:	9102      	str	r1, [sp, #8]
 8003164:	9201      	str	r2, [sp, #4]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2332      	movs	r3, #50	; 0x32
 800316a:	220a      	movs	r2, #10
 800316c:	211f      	movs	r1, #31
 800316e:	489b      	ldr	r0, [pc, #620]	; (80033dc <Set_Screen+0xf20>)
 8003170:	f003 facc 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}
			Short_Left_Colored_RU_DrawString_32("МтЧс Агр.насосного 1", 	20,	10,  80, FonColor[1], BasicSymbolColor, Page[3]);
 8003174:	4b96      	ldr	r3, [pc, #600]	; (80033d0 <Set_Screen+0xf14>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4a96      	ldr	r2, [pc, #600]	; (80033d4 <Set_Screen+0xf18>)
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	4996      	ldr	r1, [pc, #600]	; (80033d8 <Set_Screen+0xf1c>)
 800317e:	68c9      	ldr	r1, [r1, #12]
 8003180:	9102      	str	r1, [sp, #8]
 8003182:	9201      	str	r2, [sp, #4]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2350      	movs	r3, #80	; 0x50
 8003188:	220a      	movs	r2, #10
 800318a:	2114      	movs	r1, #20
 800318c:	4894      	ldr	r0, [pc, #592]	; (80033e0 <Set_Screen+0xf24>)
 800318e:	f003 fabd 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс Агр.насосного 2", 	20,	10, 110, FonColor[2], BasicSymbolColor, Page[3]);
 8003192:	4b8f      	ldr	r3, [pc, #572]	; (80033d0 <Set_Screen+0xf14>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	4a8f      	ldr	r2, [pc, #572]	; (80033d4 <Set_Screen+0xf18>)
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	498f      	ldr	r1, [pc, #572]	; (80033d8 <Set_Screen+0xf1c>)
 800319c:	68c9      	ldr	r1, [r1, #12]
 800319e:	9102      	str	r1, [sp, #8]
 80031a0:	9201      	str	r2, [sp, #4]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	236e      	movs	r3, #110	; 0x6e
 80031a6:	220a      	movs	r2, #10
 80031a8:	2114      	movs	r1, #20
 80031aa:	488e      	ldr	r0, [pc, #568]	; (80033e4 <Set_Screen+0xf28>)
 80031ac:	f003 faae 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс Агр.насосного 3", 	20,	10, 140, FonColor[3], BasicSymbolColor, Page[3]);
 80031b0:	4b87      	ldr	r3, [pc, #540]	; (80033d0 <Set_Screen+0xf14>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4a87      	ldr	r2, [pc, #540]	; (80033d4 <Set_Screen+0xf18>)
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	4987      	ldr	r1, [pc, #540]	; (80033d8 <Set_Screen+0xf1c>)
 80031ba:	68c9      	ldr	r1, [r1, #12]
 80031bc:	9102      	str	r1, [sp, #8]
 80031be:	9201      	str	r2, [sp, #4]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	238c      	movs	r3, #140	; 0x8c
 80031c4:	220a      	movs	r2, #10
 80031c6:	2114      	movs	r1, #20
 80031c8:	4887      	ldr	r0, [pc, #540]	; (80033e8 <Set_Screen+0xf2c>)
 80031ca:	f003 fa9f 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс циркуляц насоса", 	20,	10, 170, FonColor[4], BasicSymbolColor, Page[3]);
 80031ce:	4b80      	ldr	r3, [pc, #512]	; (80033d0 <Set_Screen+0xf14>)
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <Set_Screen+0xf18>)
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	4980      	ldr	r1, [pc, #512]	; (80033d8 <Set_Screen+0xf1c>)
 80031d8:	68c9      	ldr	r1, [r1, #12]
 80031da:	9102      	str	r1, [sp, #8]
 80031dc:	9201      	str	r2, [sp, #4]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	23aa      	movs	r3, #170	; 0xaa
 80031e2:	220a      	movs	r2, #10
 80031e4:	2114      	movs	r1, #20
 80031e6:	4881      	ldr	r0, [pc, #516]	; (80033ec <Set_Screen+0xf30>)
 80031e8:	f003 fa90 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс насоса концентр", 	20,	10, 200, FonColor[5], BasicSymbolColor, Page[3]);
 80031ec:	4b78      	ldr	r3, [pc, #480]	; (80033d0 <Set_Screen+0xf14>)
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	4a78      	ldr	r2, [pc, #480]	; (80033d4 <Set_Screen+0xf18>)
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	4978      	ldr	r1, [pc, #480]	; (80033d8 <Set_Screen+0xf1c>)
 80031f6:	68c9      	ldr	r1, [r1, #12]
 80031f8:	9102      	str	r1, [sp, #8]
 80031fa:	9201      	str	r2, [sp, #4]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	23c8      	movs	r3, #200	; 0xc8
 8003200:	220a      	movs	r2, #10
 8003202:	2114      	movs	r1, #20
 8003204:	487a      	ldr	r0, [pc, #488]	; (80033f0 <Set_Screen+0xf34>)
 8003206:	f003 fa81 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс нас.закач.конц ", 	20,	10, 230, FonColor[6], BasicSymbolColor, Page[3]);
 800320a:	4b71      	ldr	r3, [pc, #452]	; (80033d0 <Set_Screen+0xf14>)
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	4a71      	ldr	r2, [pc, #452]	; (80033d4 <Set_Screen+0xf18>)
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	4971      	ldr	r1, [pc, #452]	; (80033d8 <Set_Screen+0xf1c>)
 8003214:	68c9      	ldr	r1, [r1, #12]
 8003216:	9102      	str	r1, [sp, #8]
 8003218:	9201      	str	r2, [sp, #4]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	23e6      	movs	r3, #230	; 0xe6
 800321e:	220a      	movs	r2, #10
 8003220:	2114      	movs	r1, #20
 8003222:	4874      	ldr	r0, [pc, #464]	; (80033f4 <Set_Screen+0xf38>)
 8003224:	f003 fa72 	bl	800670c <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit_controled(&PassW_block.PassWord, 0,  4, Control_DB.RazrPointer, 9999, 0, 620,  50, 800,480, Page[3], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003228:	4b68      	ldr	r3, [pc, #416]	; (80033cc <Set_Screen+0xf10>)
 800322a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800322e:	461c      	mov	r4, r3
 8003230:	4b69      	ldr	r3, [pc, #420]	; (80033d8 <Set_Screen+0xf1c>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a66      	ldr	r2, [pc, #408]	; (80033d0 <Set_Screen+0xf14>)
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	4966      	ldr	r1, [pc, #408]	; (80033d4 <Set_Screen+0xf18>)
 800323a:	6809      	ldr	r1, [r1, #0]
 800323c:	2012      	movs	r0, #18
 800323e:	900b      	str	r0, [sp, #44]	; 0x2c
 8003240:	200b      	movs	r0, #11
 8003242:	900a      	str	r0, [sp, #40]	; 0x28
 8003244:	486c      	ldr	r0, [pc, #432]	; (80033f8 <Set_Screen+0xf3c>)
 8003246:	9009      	str	r0, [sp, #36]	; 0x24
 8003248:	9108      	str	r1, [sp, #32]
 800324a:	9207      	str	r2, [sp, #28]
 800324c:	9306      	str	r3, [sp, #24]
 800324e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003252:	9305      	str	r3, [sp, #20]
 8003254:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003258:	9304      	str	r3, [sp, #16]
 800325a:	2332      	movs	r3, #50	; 0x32
 800325c:	9303      	str	r3, [sp, #12]
 800325e:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8003262:	9302      	str	r3, [sp, #8]
 8003264:	2300      	movs	r3, #0
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	f242 730f 	movw	r3, #9999	; 0x270f
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	4623      	mov	r3, r4
 8003270:	2204      	movs	r2, #4
 8003272:	2100      	movs	r1, #0
 8003274:	4861      	ldr	r0, [pc, #388]	; (80033fc <Set_Screen+0xf40>)
 8003276:	f003 ffe7 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_1.Pump.MotoClock, 								0, 10, 0,  440,  83, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800327a:	4b61      	ldr	r3, [pc, #388]	; (8003400 <Set_Screen+0xf44>)
 800327c:	68d8      	ldr	r0, [r3, #12]
 800327e:	4b56      	ldr	r3, [pc, #344]	; (80033d8 <Set_Screen+0xf1c>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4a60      	ldr	r2, [pc, #384]	; (8003404 <Set_Screen+0xf48>)
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	4953      	ldr	r1, [pc, #332]	; (80033d4 <Set_Screen+0xf18>)
 8003288:	6809      	ldr	r1, [r1, #0]
 800328a:	2412      	movs	r4, #18
 800328c:	9409      	str	r4, [sp, #36]	; 0x24
 800328e:	240b      	movs	r4, #11
 8003290:	9408      	str	r4, [sp, #32]
 8003292:	4c59      	ldr	r4, [pc, #356]	; (80033f8 <Set_Screen+0xf3c>)
 8003294:	9407      	str	r4, [sp, #28]
 8003296:	9106      	str	r1, [sp, #24]
 8003298:	9205      	str	r2, [sp, #20]
 800329a:	9304      	str	r3, [sp, #16]
 800329c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80032a0:	9303      	str	r3, [sp, #12]
 80032a2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80032a6:	9302      	str	r3, [sp, #8]
 80032a8:	2353      	movs	r3, #83	; 0x53
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2300      	movs	r3, #0
 80032b4:	220a      	movs	r2, #10
 80032b6:	2100      	movs	r1, #0
 80032b8:	f003 fd96 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_2.Pump.MotoClock, 								0, 10, 0,  440, 113, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80032bc:	4b50      	ldr	r3, [pc, #320]	; (8003400 <Set_Screen+0xf44>)
 80032be:	6a18      	ldr	r0, [r3, #32]
 80032c0:	4b45      	ldr	r3, [pc, #276]	; (80033d8 <Set_Screen+0xf1c>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a4f      	ldr	r2, [pc, #316]	; (8003404 <Set_Screen+0xf48>)
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	4942      	ldr	r1, [pc, #264]	; (80033d4 <Set_Screen+0xf18>)
 80032ca:	6809      	ldr	r1, [r1, #0]
 80032cc:	2412      	movs	r4, #18
 80032ce:	9409      	str	r4, [sp, #36]	; 0x24
 80032d0:	240b      	movs	r4, #11
 80032d2:	9408      	str	r4, [sp, #32]
 80032d4:	4c48      	ldr	r4, [pc, #288]	; (80033f8 <Set_Screen+0xf3c>)
 80032d6:	9407      	str	r4, [sp, #28]
 80032d8:	9106      	str	r1, [sp, #24]
 80032da:	9205      	str	r2, [sp, #20]
 80032dc:	9304      	str	r3, [sp, #16]
 80032de:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80032e2:	9303      	str	r3, [sp, #12]
 80032e4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	2371      	movs	r3, #113	; 0x71
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2300      	movs	r3, #0
 80032f6:	220a      	movs	r2, #10
 80032f8:	2100      	movs	r1, #0
 80032fa:	f003 fd75 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_3.Pump.MotoClock, 								0, 10, 0,  440, 143, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80032fe:	4b40      	ldr	r3, [pc, #256]	; (8003400 <Set_Screen+0xf44>)
 8003300:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003302:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <Set_Screen+0xf1c>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4a3f      	ldr	r2, [pc, #252]	; (8003404 <Set_Screen+0xf48>)
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	4932      	ldr	r1, [pc, #200]	; (80033d4 <Set_Screen+0xf18>)
 800330c:	6809      	ldr	r1, [r1, #0]
 800330e:	2412      	movs	r4, #18
 8003310:	9409      	str	r4, [sp, #36]	; 0x24
 8003312:	240b      	movs	r4, #11
 8003314:	9408      	str	r4, [sp, #32]
 8003316:	4c38      	ldr	r4, [pc, #224]	; (80033f8 <Set_Screen+0xf3c>)
 8003318:	9407      	str	r4, [sp, #28]
 800331a:	9106      	str	r1, [sp, #24]
 800331c:	9205      	str	r2, [sp, #20]
 800331e:	9304      	str	r3, [sp, #16]
 8003320:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003324:	9303      	str	r3, [sp, #12]
 8003326:	f44f 7348 	mov.w	r3, #800	; 0x320
 800332a:	9302      	str	r3, [sp, #8]
 800332c:	238f      	movs	r3, #143	; 0x8f
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	220a      	movs	r2, #10
 800333a:	2100      	movs	r1, #0
 800333c:	f003 fd54 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.MotoClock, 			0, 10, 0,  440, 173, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003340:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <Set_Screen+0xf44>)
 8003342:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003344:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <Set_Screen+0xf1c>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a2e      	ldr	r2, [pc, #184]	; (8003404 <Set_Screen+0xf48>)
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	4921      	ldr	r1, [pc, #132]	; (80033d4 <Set_Screen+0xf18>)
 800334e:	6809      	ldr	r1, [r1, #0]
 8003350:	2412      	movs	r4, #18
 8003352:	9409      	str	r4, [sp, #36]	; 0x24
 8003354:	240b      	movs	r4, #11
 8003356:	9408      	str	r4, [sp, #32]
 8003358:	4c27      	ldr	r4, [pc, #156]	; (80033f8 <Set_Screen+0xf3c>)
 800335a:	9407      	str	r4, [sp, #28]
 800335c:	9106      	str	r1, [sp, #24]
 800335e:	9205      	str	r2, [sp, #20]
 8003360:	9304      	str	r3, [sp, #16]
 8003362:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003366:	9303      	str	r3, [sp, #12]
 8003368:	f44f 7348 	mov.w	r3, #800	; 0x320
 800336c:	9302      	str	r3, [sp, #8]
 800336e:	23ad      	movs	r3, #173	; 0xad
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2300      	movs	r3, #0
 800337a:	220a      	movs	r2, #10
 800337c:	2100      	movs	r1, #0
 800337e:	f003 fd33 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.MotoClock, 			0, 10, 0,  440, 203, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003382:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <Set_Screen+0xf44>)
 8003384:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <Set_Screen+0xf1c>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <Set_Screen+0xf48>)
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	4911      	ldr	r1, [pc, #68]	; (80033d4 <Set_Screen+0xf18>)
 8003390:	6809      	ldr	r1, [r1, #0]
 8003392:	2412      	movs	r4, #18
 8003394:	9409      	str	r4, [sp, #36]	; 0x24
 8003396:	240b      	movs	r4, #11
 8003398:	9408      	str	r4, [sp, #32]
 800339a:	4c17      	ldr	r4, [pc, #92]	; (80033f8 <Set_Screen+0xf3c>)
 800339c:	9407      	str	r4, [sp, #28]
 800339e:	9106      	str	r1, [sp, #24]
 80033a0:	9205      	str	r2, [sp, #20]
 80033a2:	9304      	str	r3, [sp, #16]
 80033a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80033a8:	9303      	str	r3, [sp, #12]
 80033aa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	23cb      	movs	r3, #203	; 0xcb
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	220a      	movs	r2, #10
 80033be:	2100      	movs	r1, #0
 80033c0:	f003 fd12 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.MotoClock, 0, 10, 0,  440, 233, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <Set_Screen+0xf44>)
 80033c6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80033c8:	e01e      	b.n	8003408 <Set_Screen+0xf4c>
 80033ca:	bf00      	nop
 80033cc:	20000b18 	.word	0x20000b18
 80033d0:	200000a8 	.word	0x200000a8
 80033d4:	200009f8 	.word	0x200009f8
 80033d8:	20000984 	.word	0x20000984
 80033dc:	0800d408 	.word	0x0800d408
 80033e0:	0800d43c 	.word	0x0800d43c
 80033e4:	0800d464 	.word	0x0800d464
 80033e8:	0800d48c 	.word	0x0800d48c
 80033ec:	0800d4b4 	.word	0x0800d4b4
 80033f0:	0800d4dc 	.word	0x0800d4dc
 80033f4:	0800d504 	.word	0x0800d504
 80033f8:	08010518 	.word	0x08010518
 80033fc:	20000a00 	.word	0x20000a00
 8003400:	20000a50 	.word	0x20000a50
 8003404:	20000008 	.word	0x20000008
 8003408:	4b9f      	ldr	r3, [pc, #636]	; (8003688 <Set_Screen+0x11cc>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a9f      	ldr	r2, [pc, #636]	; (800368c <Set_Screen+0x11d0>)
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	499f      	ldr	r1, [pc, #636]	; (8003690 <Set_Screen+0x11d4>)
 8003412:	6809      	ldr	r1, [r1, #0]
 8003414:	2412      	movs	r4, #18
 8003416:	9409      	str	r4, [sp, #36]	; 0x24
 8003418:	240b      	movs	r4, #11
 800341a:	9408      	str	r4, [sp, #32]
 800341c:	4c9d      	ldr	r4, [pc, #628]	; (8003694 <Set_Screen+0x11d8>)
 800341e:	9407      	str	r4, [sp, #28]
 8003420:	9106      	str	r1, [sp, #24]
 8003422:	9205      	str	r2, [sp, #20]
 8003424:	9304      	str	r3, [sp, #16]
 8003426:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800342a:	9303      	str	r3, [sp, #12]
 800342c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003430:	9302      	str	r3, [sp, #8]
 8003432:	23e9      	movs	r3, #233	; 0xe9
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2300      	movs	r3, #0
 800343e:	220a      	movs	r2, #10
 8003440:	2100      	movs	r1, #0
 8003442:	f003 fcd1 	bl	8006de8 <Centred_DrawNumber_16_32bit>

			Short_Left_Colored_RU_DrawString_32("Ср-ки авт.разгр АНН1", 	20,	10, 260, FonColor[7], BasicSymbolColor, Page[3]);
 8003446:	4b94      	ldr	r3, [pc, #592]	; (8003698 <Set_Screen+0x11dc>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4a91      	ldr	r2, [pc, #580]	; (8003690 <Set_Screen+0x11d4>)
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	498e      	ldr	r1, [pc, #568]	; (8003688 <Set_Screen+0x11cc>)
 8003450:	68c9      	ldr	r1, [r1, #12]
 8003452:	9102      	str	r1, [sp, #8]
 8003454:	9201      	str	r2, [sp, #4]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	f44f 7382 	mov.w	r3, #260	; 0x104
 800345c:	220a      	movs	r2, #10
 800345e:	2114      	movs	r1, #20
 8003460:	488e      	ldr	r0, [pc, #568]	; (800369c <Set_Screen+0x11e0>)
 8003462:	f003 f953 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Ср-ки авт.разгр АНН2", 	20,	10, 290, FonColor[8], BasicSymbolColor, Page[3]);
 8003466:	4b8c      	ldr	r3, [pc, #560]	; (8003698 <Set_Screen+0x11dc>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4a89      	ldr	r2, [pc, #548]	; (8003690 <Set_Screen+0x11d4>)
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	4986      	ldr	r1, [pc, #536]	; (8003688 <Set_Screen+0x11cc>)
 8003470:	68c9      	ldr	r1, [r1, #12]
 8003472:	9102      	str	r1, [sp, #8]
 8003474:	9201      	str	r2, [sp, #4]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	f44f 7391 	mov.w	r3, #290	; 0x122
 800347c:	220a      	movs	r2, #10
 800347e:	2114      	movs	r1, #20
 8003480:	4887      	ldr	r0, [pc, #540]	; (80036a0 <Set_Screen+0x11e4>)
 8003482:	f003 f943 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Ср-ки авт.разгр АНН3", 	20,	10, 320, FonColor[9], BasicSymbolColor, Page[3]);
 8003486:	4b84      	ldr	r3, [pc, #528]	; (8003698 <Set_Screen+0x11dc>)
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	4a81      	ldr	r2, [pc, #516]	; (8003690 <Set_Screen+0x11d4>)
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	497e      	ldr	r1, [pc, #504]	; (8003688 <Set_Screen+0x11cc>)
 8003490:	68c9      	ldr	r1, [r1, #12]
 8003492:	9102      	str	r1, [sp, #8]
 8003494:	9201      	str	r2, [sp, #4]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800349c:	220a      	movs	r2, #10
 800349e:	2114      	movs	r1, #20
 80034a0:	4880      	ldr	r0, [pc, #512]	; (80036a4 <Set_Screen+0x11e8>)
 80034a2:	f003 f933 	bl	800670c <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_1.Unload_counter, 	 0, 10, 0,  440, 263, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80034a6:	4b80      	ldr	r3, [pc, #512]	; (80036a8 <Set_Screen+0x11ec>)
 80034a8:	6998      	ldr	r0, [r3, #24]
 80034aa:	4b77      	ldr	r3, [pc, #476]	; (8003688 <Set_Screen+0x11cc>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4a77      	ldr	r2, [pc, #476]	; (800368c <Set_Screen+0x11d0>)
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	4977      	ldr	r1, [pc, #476]	; (8003690 <Set_Screen+0x11d4>)
 80034b4:	6809      	ldr	r1, [r1, #0]
 80034b6:	2412      	movs	r4, #18
 80034b8:	9409      	str	r4, [sp, #36]	; 0x24
 80034ba:	240b      	movs	r4, #11
 80034bc:	9408      	str	r4, [sp, #32]
 80034be:	4c75      	ldr	r4, [pc, #468]	; (8003694 <Set_Screen+0x11d8>)
 80034c0:	9407      	str	r4, [sp, #28]
 80034c2:	9106      	str	r1, [sp, #24]
 80034c4:	9205      	str	r2, [sp, #20]
 80034c6:	9304      	str	r3, [sp, #16]
 80034c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80034cc:	9303      	str	r3, [sp, #12]
 80034ce:	f44f 7348 	mov.w	r3, #800	; 0x320
 80034d2:	9302      	str	r3, [sp, #8]
 80034d4:	f240 1307 	movw	r3, #263	; 0x107
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2300      	movs	r3, #0
 80034e2:	220a      	movs	r2, #10
 80034e4:	2100      	movs	r1, #0
 80034e6:	f003 fc7f 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_2.Unload_counter, 	 0, 10, 0,  440, 293, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80034ea:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <Set_Screen+0x11ec>)
 80034ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80034ee:	4b66      	ldr	r3, [pc, #408]	; (8003688 <Set_Screen+0x11cc>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	4a66      	ldr	r2, [pc, #408]	; (800368c <Set_Screen+0x11d0>)
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	4966      	ldr	r1, [pc, #408]	; (8003690 <Set_Screen+0x11d4>)
 80034f8:	6809      	ldr	r1, [r1, #0]
 80034fa:	2412      	movs	r4, #18
 80034fc:	9409      	str	r4, [sp, #36]	; 0x24
 80034fe:	240b      	movs	r4, #11
 8003500:	9408      	str	r4, [sp, #32]
 8003502:	4c64      	ldr	r4, [pc, #400]	; (8003694 <Set_Screen+0x11d8>)
 8003504:	9407      	str	r4, [sp, #28]
 8003506:	9106      	str	r1, [sp, #24]
 8003508:	9205      	str	r2, [sp, #20]
 800350a:	9304      	str	r3, [sp, #16]
 800350c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003510:	9303      	str	r3, [sp, #12]
 8003512:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003516:	9302      	str	r3, [sp, #8]
 8003518:	f240 1325 	movw	r3, #293	; 0x125
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2300      	movs	r3, #0
 8003526:	220a      	movs	r2, #10
 8003528:	2100      	movs	r1, #0
 800352a:	f003 fc5d 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_3.Unload_counter, 	 0, 10, 0,  440, 323, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800352e:	4b5e      	ldr	r3, [pc, #376]	; (80036a8 <Set_Screen+0x11ec>)
 8003530:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003532:	4b55      	ldr	r3, [pc, #340]	; (8003688 <Set_Screen+0x11cc>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	4a55      	ldr	r2, [pc, #340]	; (800368c <Set_Screen+0x11d0>)
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	4955      	ldr	r1, [pc, #340]	; (8003690 <Set_Screen+0x11d4>)
 800353c:	6809      	ldr	r1, [r1, #0]
 800353e:	2412      	movs	r4, #18
 8003540:	9409      	str	r4, [sp, #36]	; 0x24
 8003542:	240b      	movs	r4, #11
 8003544:	9408      	str	r4, [sp, #32]
 8003546:	4c53      	ldr	r4, [pc, #332]	; (8003694 <Set_Screen+0x11d8>)
 8003548:	9407      	str	r4, [sp, #28]
 800354a:	9106      	str	r1, [sp, #24]
 800354c:	9205      	str	r2, [sp, #20]
 800354e:	9304      	str	r3, [sp, #16]
 8003550:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003554:	9303      	str	r3, [sp, #12]
 8003556:	f44f 7348 	mov.w	r3, #800	; 0x320
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	f240 1343 	movw	r3, #323	; 0x143
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	2300      	movs	r3, #0
 800356a:	220a      	movs	r2, #10
 800356c:	2100      	movs	r1, #0
 800356e:	f003 fc3b 	bl	8006de8 <Centred_DrawNumber_16_32bit>

			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.1.эмульс", 	20,	10, 350, FonColor[10], BasicSymbolColor, Page[3]);
 8003572:	4b49      	ldr	r3, [pc, #292]	; (8003698 <Set_Screen+0x11dc>)
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	4a46      	ldr	r2, [pc, #280]	; (8003690 <Set_Screen+0x11d4>)
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	4943      	ldr	r1, [pc, #268]	; (8003688 <Set_Screen+0x11cc>)
 800357c:	68c9      	ldr	r1, [r1, #12]
 800357e:	9102      	str	r1, [sp, #8]
 8003580:	9201      	str	r2, [sp, #4]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003588:	220a      	movs	r2, #10
 800358a:	2114      	movs	r1, #20
 800358c:	4847      	ldr	r0, [pc, #284]	; (80036ac <Set_Screen+0x11f0>)
 800358e:	f003 f8bd 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.2.эмульс", 	20,	10, 380, FonColor[11], BasicSymbolColor, Page[3]);
 8003592:	4b41      	ldr	r3, [pc, #260]	; (8003698 <Set_Screen+0x11dc>)
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	4a3e      	ldr	r2, [pc, #248]	; (8003690 <Set_Screen+0x11d4>)
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	493b      	ldr	r1, [pc, #236]	; (8003688 <Set_Screen+0x11cc>)
 800359c:	68c9      	ldr	r1, [r1, #12]
 800359e:	9102      	str	r1, [sp, #8]
 80035a0:	9201      	str	r2, [sp, #4]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	f44f 73be 	mov.w	r3, #380	; 0x17c
 80035a8:	220a      	movs	r2, #10
 80035aa:	2114      	movs	r1, #20
 80035ac:	4840      	ldr	r0, [pc, #256]	; (80036b0 <Set_Screen+0x11f4>)
 80035ae:	f003 f8ad 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.1.воды  ", 	20,	10, 410, FonColor[12], BasicSymbolColor, Page[3]);
 80035b2:	4b39      	ldr	r3, [pc, #228]	; (8003698 <Set_Screen+0x11dc>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a36      	ldr	r2, [pc, #216]	; (8003690 <Set_Screen+0x11d4>)
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	4933      	ldr	r1, [pc, #204]	; (8003688 <Set_Screen+0x11cc>)
 80035bc:	68c9      	ldr	r1, [r1, #12]
 80035be:	9102      	str	r1, [sp, #8]
 80035c0:	9201      	str	r2, [sp, #4]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80035c8:	220a      	movs	r2, #10
 80035ca:	2114      	movs	r1, #20
 80035cc:	4839      	ldr	r0, [pc, #228]	; (80036b4 <Set_Screen+0x11f8>)
 80035ce:	f003 f89d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.2.воды  ", 	20,	10, 440, FonColor[13], BasicSymbolColor, Page[3]);
 80035d2:	4b31      	ldr	r3, [pc, #196]	; (8003698 <Set_Screen+0x11dc>)
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d6:	4a2e      	ldr	r2, [pc, #184]	; (8003690 <Set_Screen+0x11d4>)
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	492b      	ldr	r1, [pc, #172]	; (8003688 <Set_Screen+0x11cc>)
 80035dc:	68c9      	ldr	r1, [r1, #12]
 80035de:	9102      	str	r1, [sp, #8]
 80035e0:	9201      	str	r2, [sp, #4]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80035e8:	220a      	movs	r2, #10
 80035ea:	2114      	movs	r1, #20
 80035ec:	4832      	ldr	r0, [pc, #200]	; (80036b8 <Set_Screen+0x11fc>)
 80035ee:	f003 f88d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.3.воды  ", 	20,	10, 470, FonColor[14], BasicSymbolColor, Page[3]);
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <Set_Screen+0x11dc>)
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	4a26      	ldr	r2, [pc, #152]	; (8003690 <Set_Screen+0x11d4>)
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	4923      	ldr	r1, [pc, #140]	; (8003688 <Set_Screen+0x11cc>)
 80035fc:	68c9      	ldr	r1, [r1, #12]
 80035fe:	9102      	str	r1, [sp, #8]
 8003600:	9201      	str	r2, [sp, #4]
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003608:	220a      	movs	r2, #10
 800360a:	2114      	movs	r1, #20
 800360c:	482b      	ldr	r0, [pc, #172]	; (80036bc <Set_Screen+0x1200>)
 800360e:	f003 f87d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Flush_valve_1_counter, 			0, 10, 0,  440, 353, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003612:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <Set_Screen+0x11ec>)
 8003614:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <Set_Screen+0x11cc>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	4a1c      	ldr	r2, [pc, #112]	; (800368c <Set_Screen+0x11d0>)
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	491c      	ldr	r1, [pc, #112]	; (8003690 <Set_Screen+0x11d4>)
 8003620:	6809      	ldr	r1, [r1, #0]
 8003622:	2412      	movs	r4, #18
 8003624:	9409      	str	r4, [sp, #36]	; 0x24
 8003626:	240b      	movs	r4, #11
 8003628:	9408      	str	r4, [sp, #32]
 800362a:	4c1a      	ldr	r4, [pc, #104]	; (8003694 <Set_Screen+0x11d8>)
 800362c:	9407      	str	r4, [sp, #28]
 800362e:	9106      	str	r1, [sp, #24]
 8003630:	9205      	str	r2, [sp, #20]
 8003632:	9304      	str	r3, [sp, #16]
 8003634:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003638:	9303      	str	r3, [sp, #12]
 800363a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800363e:	9302      	str	r3, [sp, #8]
 8003640:	f240 1361 	movw	r3, #353	; 0x161
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	2300      	movs	r3, #0
 800364e:	220a      	movs	r2, #10
 8003650:	2100      	movs	r1, #0
 8003652:	f003 fbc9 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Flush_valve_2_counter, 			0, 10, 0,  440, 383, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003656:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <Set_Screen+0x11ec>)
 8003658:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <Set_Screen+0x11cc>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <Set_Screen+0x11d0>)
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	490b      	ldr	r1, [pc, #44]	; (8003690 <Set_Screen+0x11d4>)
 8003664:	6809      	ldr	r1, [r1, #0]
 8003666:	2412      	movs	r4, #18
 8003668:	9409      	str	r4, [sp, #36]	; 0x24
 800366a:	240b      	movs	r4, #11
 800366c:	9408      	str	r4, [sp, #32]
 800366e:	4c09      	ldr	r4, [pc, #36]	; (8003694 <Set_Screen+0x11d8>)
 8003670:	9407      	str	r4, [sp, #28]
 8003672:	9106      	str	r1, [sp, #24]
 8003674:	9205      	str	r2, [sp, #20]
 8003676:	9304      	str	r3, [sp, #16]
 8003678:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800367c:	9303      	str	r3, [sp, #12]
 800367e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003682:	9302      	str	r3, [sp, #8]
 8003684:	e01c      	b.n	80036c0 <Set_Screen+0x1204>
 8003686:	bf00      	nop
 8003688:	20000984 	.word	0x20000984
 800368c:	20000008 	.word	0x20000008
 8003690:	200009f8 	.word	0x200009f8
 8003694:	08010518 	.word	0x08010518
 8003698:	200000a8 	.word	0x200000a8
 800369c:	0800d52c 	.word	0x0800d52c
 80036a0:	0800d550 	.word	0x0800d550
 80036a4:	0800d574 	.word	0x0800d574
 80036a8:	20000a50 	.word	0x20000a50
 80036ac:	0800d598 	.word	0x0800d598
 80036b0:	0800d5bc 	.word	0x0800d5bc
 80036b4:	0800d5e0 	.word	0x0800d5e0
 80036b8:	0800d604 	.word	0x0800d604
 80036bc:	0800d628 	.word	0x0800d628
 80036c0:	f240 137f 	movw	r3, #383	; 0x17f
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	2300      	movs	r3, #0
 80036ce:	220a      	movs	r2, #10
 80036d0:	2100      	movs	r1, #0
 80036d2:	f003 fb89 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_1_counter, 	0, 10, 0,  440, 413, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80036d6:	4ba4      	ldr	r3, [pc, #656]	; (8003968 <Set_Screen+0x14ac>)
 80036d8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80036dc:	4ba3      	ldr	r3, [pc, #652]	; (800396c <Set_Screen+0x14b0>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4aa3      	ldr	r2, [pc, #652]	; (8003970 <Set_Screen+0x14b4>)
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	49a3      	ldr	r1, [pc, #652]	; (8003974 <Set_Screen+0x14b8>)
 80036e6:	6809      	ldr	r1, [r1, #0]
 80036e8:	2412      	movs	r4, #18
 80036ea:	9409      	str	r4, [sp, #36]	; 0x24
 80036ec:	240b      	movs	r4, #11
 80036ee:	9408      	str	r4, [sp, #32]
 80036f0:	4ca1      	ldr	r4, [pc, #644]	; (8003978 <Set_Screen+0x14bc>)
 80036f2:	9407      	str	r4, [sp, #28]
 80036f4:	9106      	str	r1, [sp, #24]
 80036f6:	9205      	str	r2, [sp, #20]
 80036f8:	9304      	str	r3, [sp, #16]
 80036fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80036fe:	9303      	str	r3, [sp, #12]
 8003700:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	f240 139d 	movw	r3, #413	; 0x19d
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2300      	movs	r3, #0
 8003714:	220a      	movs	r2, #10
 8003716:	2100      	movs	r1, #0
 8003718:	f003 fb66 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_2_counter, 	0, 10, 0,  440, 443, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800371c:	4b92      	ldr	r3, [pc, #584]	; (8003968 <Set_Screen+0x14ac>)
 800371e:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 8003722:	4b92      	ldr	r3, [pc, #584]	; (800396c <Set_Screen+0x14b0>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	4a92      	ldr	r2, [pc, #584]	; (8003970 <Set_Screen+0x14b4>)
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	4992      	ldr	r1, [pc, #584]	; (8003974 <Set_Screen+0x14b8>)
 800372c:	6809      	ldr	r1, [r1, #0]
 800372e:	2412      	movs	r4, #18
 8003730:	9409      	str	r4, [sp, #36]	; 0x24
 8003732:	240b      	movs	r4, #11
 8003734:	9408      	str	r4, [sp, #32]
 8003736:	4c90      	ldr	r4, [pc, #576]	; (8003978 <Set_Screen+0x14bc>)
 8003738:	9407      	str	r4, [sp, #28]
 800373a:	9106      	str	r1, [sp, #24]
 800373c:	9205      	str	r2, [sp, #20]
 800373e:	9304      	str	r3, [sp, #16]
 8003740:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003744:	9303      	str	r3, [sp, #12]
 8003746:	f44f 7348 	mov.w	r3, #800	; 0x320
 800374a:	9302      	str	r3, [sp, #8]
 800374c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2300      	movs	r3, #0
 800375a:	220a      	movs	r2, #10
 800375c:	2100      	movs	r1, #0
 800375e:	f003 fb43 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_3_counter, 	0, 10, 0,  440, 473, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003762:	4b81      	ldr	r3, [pc, #516]	; (8003968 <Set_Screen+0x14ac>)
 8003764:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8003768:	4b80      	ldr	r3, [pc, #512]	; (800396c <Set_Screen+0x14b0>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a80      	ldr	r2, [pc, #512]	; (8003970 <Set_Screen+0x14b4>)
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	4980      	ldr	r1, [pc, #512]	; (8003974 <Set_Screen+0x14b8>)
 8003772:	6809      	ldr	r1, [r1, #0]
 8003774:	2412      	movs	r4, #18
 8003776:	9409      	str	r4, [sp, #36]	; 0x24
 8003778:	240b      	movs	r4, #11
 800377a:	9408      	str	r4, [sp, #32]
 800377c:	4c7e      	ldr	r4, [pc, #504]	; (8003978 <Set_Screen+0x14bc>)
 800377e:	9407      	str	r4, [sp, #28]
 8003780:	9106      	str	r1, [sp, #24]
 8003782:	9205      	str	r2, [sp, #20]
 8003784:	9304      	str	r3, [sp, #16]
 8003786:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800378a:	9303      	str	r3, [sp, #12]
 800378c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003790:	9302      	str	r3, [sp, #8]
 8003792:	f240 13d9 	movw	r3, #473	; 0x1d9
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2300      	movs	r3, #0
 80037a0:	220a      	movs	r2, #10
 80037a2:	2100      	movs	r1, #0
 80037a4:	f003 fb20 	bl	8006de8 <Centred_DrawNumber_16_32bit>

			Short_Left_Colored_RU_DrawString_32("Объем сл.фильт  ",     16,	505,  80, FonColor[15], BasicSymbolColor, Page[3]);
 80037a8:	4b74      	ldr	r3, [pc, #464]	; (800397c <Set_Screen+0x14c0>)
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	4a71      	ldr	r2, [pc, #452]	; (8003974 <Set_Screen+0x14b8>)
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	496e      	ldr	r1, [pc, #440]	; (800396c <Set_Screen+0x14b0>)
 80037b2:	68c9      	ldr	r1, [r1, #12]
 80037b4:	9102      	str	r1, [sp, #8]
 80037b6:	9201      	str	r2, [sp, #4]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2350      	movs	r3, #80	; 0x50
 80037bc:	f240 12f9 	movw	r2, #505	; 0x1f9
 80037c0:	2110      	movs	r1, #16
 80037c2:	486f      	ldr	r0, [pc, #444]	; (8003980 <Set_Screen+0x14c4>)
 80037c4:	f002 ffa2 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Объем пр.эмульс ",     16,	505, 140, FonColor[16], BasicSymbolColor, Page[3]);
 80037c8:	4b6c      	ldr	r3, [pc, #432]	; (800397c <Set_Screen+0x14c0>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	4a69      	ldr	r2, [pc, #420]	; (8003974 <Set_Screen+0x14b8>)
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	4966      	ldr	r1, [pc, #408]	; (800396c <Set_Screen+0x14b0>)
 80037d2:	68c9      	ldr	r1, [r1, #12]
 80037d4:	9102      	str	r1, [sp, #8]
 80037d6:	9201      	str	r2, [sp, #4]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	238c      	movs	r3, #140	; 0x8c
 80037dc:	f240 12f9 	movw	r2, #505	; 0x1f9
 80037e0:	2110      	movs	r1, #16
 80037e2:	4868      	ldr	r0, [pc, #416]	; (8003984 <Set_Screen+0x14c8>)
 80037e4:	f002 ff92 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Объем пр.концент",     16,	505, 200, FonColor[17], BasicSymbolColor, Page[3]);
 80037e8:	4b64      	ldr	r3, [pc, #400]	; (800397c <Set_Screen+0x14c0>)
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	4a61      	ldr	r2, [pc, #388]	; (8003974 <Set_Screen+0x14b8>)
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	495e      	ldr	r1, [pc, #376]	; (800396c <Set_Screen+0x14b0>)
 80037f2:	68c9      	ldr	r1, [r1, #12]
 80037f4:	9102      	str	r1, [sp, #8]
 80037f6:	9201      	str	r2, [sp, #4]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	23c8      	movs	r3, #200	; 0xc8
 80037fc:	f240 12f9 	movw	r2, #505	; 0x1f9
 8003800:	2110      	movs	r1, #16
 8003802:	4861      	ldr	r0, [pc, #388]	; (8003988 <Set_Screen+0x14cc>)
 8003804:	f002 ff82 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Объем пр.воды   ",     16,	505, 260, FonColor[18], BasicSymbolColor, Page[3]);
 8003808:	4b5c      	ldr	r3, [pc, #368]	; (800397c <Set_Screen+0x14c0>)
 800380a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380c:	4a59      	ldr	r2, [pc, #356]	; (8003974 <Set_Screen+0x14b8>)
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	4956      	ldr	r1, [pc, #344]	; (800396c <Set_Screen+0x14b0>)
 8003812:	68c9      	ldr	r1, [r1, #12]
 8003814:	9102      	str	r1, [sp, #8]
 8003816:	9201      	str	r2, [sp, #4]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800381e:	f240 12f9 	movw	r2, #505	; 0x1f9
 8003822:	2110      	movs	r1, #16
 8003824:	4859      	ldr	r0, [pc, #356]	; (800398c <Set_Screen+0x14d0>)
 8003826:	f002 ff71 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Кол-во ср. УПЭ  ",     16,	505, 320, FonColor[19], BasicSymbolColor, Page[3]);
 800382a:	4b54      	ldr	r3, [pc, #336]	; (800397c <Set_Screen+0x14c0>)
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	4a51      	ldr	r2, [pc, #324]	; (8003974 <Set_Screen+0x14b8>)
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	494e      	ldr	r1, [pc, #312]	; (800396c <Set_Screen+0x14b0>)
 8003834:	68c9      	ldr	r1, [r1, #12]
 8003836:	9102      	str	r1, [sp, #8]
 8003838:	9201      	str	r2, [sp, #4]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003840:	f240 12f9 	movw	r2, #505	; 0x1f9
 8003844:	2110      	movs	r1, #16
 8003846:	4852      	ldr	r0, [pc, #328]	; (8003990 <Set_Screen+0x14d4>)
 8003848:	f002 ff60 	bl	800670c <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Volume, 	0, 10, 0,  650, 113, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800384c:	4b46      	ldr	r3, [pc, #280]	; (8003968 <Set_Screen+0x14ac>)
 800384e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003850:	4b46      	ldr	r3, [pc, #280]	; (800396c <Set_Screen+0x14b0>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a46      	ldr	r2, [pc, #280]	; (8003970 <Set_Screen+0x14b4>)
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	4946      	ldr	r1, [pc, #280]	; (8003974 <Set_Screen+0x14b8>)
 800385a:	6809      	ldr	r1, [r1, #0]
 800385c:	2412      	movs	r4, #18
 800385e:	9409      	str	r4, [sp, #36]	; 0x24
 8003860:	240b      	movs	r4, #11
 8003862:	9408      	str	r4, [sp, #32]
 8003864:	4c44      	ldr	r4, [pc, #272]	; (8003978 <Set_Screen+0x14bc>)
 8003866:	9407      	str	r4, [sp, #28]
 8003868:	9106      	str	r1, [sp, #24]
 800386a:	9205      	str	r2, [sp, #20]
 800386c:	9304      	str	r3, [sp, #16]
 800386e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003872:	9303      	str	r3, [sp, #12]
 8003874:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003878:	9302      	str	r3, [sp, #8]
 800387a:	2371      	movs	r3, #113	; 0x71
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	f240 238a 	movw	r3, #650	; 0x28a
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2300      	movs	r3, #0
 8003886:	220a      	movs	r2, #10
 8003888:	2100      	movs	r1, #0
 800388a:	f003 faad 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Volume, 		0, 10, 0,  650, 173, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800388e:	4b36      	ldr	r3, [pc, #216]	; (8003968 <Set_Screen+0x14ac>)
 8003890:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003892:	4b36      	ldr	r3, [pc, #216]	; (800396c <Set_Screen+0x14b0>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	4a36      	ldr	r2, [pc, #216]	; (8003970 <Set_Screen+0x14b4>)
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	4936      	ldr	r1, [pc, #216]	; (8003974 <Set_Screen+0x14b8>)
 800389c:	6809      	ldr	r1, [r1, #0]
 800389e:	2412      	movs	r4, #18
 80038a0:	9409      	str	r4, [sp, #36]	; 0x24
 80038a2:	240b      	movs	r4, #11
 80038a4:	9408      	str	r4, [sp, #32]
 80038a6:	4c34      	ldr	r4, [pc, #208]	; (8003978 <Set_Screen+0x14bc>)
 80038a8:	9407      	str	r4, [sp, #28]
 80038aa:	9106      	str	r1, [sp, #24]
 80038ac:	9205      	str	r2, [sp, #20]
 80038ae:	9304      	str	r3, [sp, #16]
 80038b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80038b4:	9303      	str	r3, [sp, #12]
 80038b6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80038ba:	9302      	str	r3, [sp, #8]
 80038bc:	23ad      	movs	r3, #173	; 0xad
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	f240 238a 	movw	r3, #650	; 0x28a
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	2300      	movs	r3, #0
 80038c8:	220a      	movs	r2, #10
 80038ca:	2100      	movs	r1, #0
 80038cc:	f003 fa8c 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Volume, 	0, 10, 0,  650, 233, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <Set_Screen+0x14ac>)
 80038d2:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <Set_Screen+0x14b0>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	4a25      	ldr	r2, [pc, #148]	; (8003970 <Set_Screen+0x14b4>)
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	4925      	ldr	r1, [pc, #148]	; (8003974 <Set_Screen+0x14b8>)
 80038e0:	6809      	ldr	r1, [r1, #0]
 80038e2:	2412      	movs	r4, #18
 80038e4:	9409      	str	r4, [sp, #36]	; 0x24
 80038e6:	240b      	movs	r4, #11
 80038e8:	9408      	str	r4, [sp, #32]
 80038ea:	4c23      	ldr	r4, [pc, #140]	; (8003978 <Set_Screen+0x14bc>)
 80038ec:	9407      	str	r4, [sp, #28]
 80038ee:	9106      	str	r1, [sp, #24]
 80038f0:	9205      	str	r2, [sp, #20]
 80038f2:	9304      	str	r3, [sp, #16]
 80038f4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80038f8:	9303      	str	r3, [sp, #12]
 80038fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80038fe:	9302      	str	r3, [sp, #8]
 8003900:	23e9      	movs	r3, #233	; 0xe9
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	f240 238a 	movw	r3, #650	; 0x28a
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	220a      	movs	r2, #10
 800390e:	2100      	movs	r1, #0
 8003910:	f003 fa6a 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Volume, 		0, 10, 0,  650, 293, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <Set_Screen+0x14ac>)
 8003916:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <Set_Screen+0x14b0>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	4a14      	ldr	r2, [pc, #80]	; (8003970 <Set_Screen+0x14b4>)
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	4914      	ldr	r1, [pc, #80]	; (8003974 <Set_Screen+0x14b8>)
 8003924:	6809      	ldr	r1, [r1, #0]
 8003926:	2412      	movs	r4, #18
 8003928:	9409      	str	r4, [sp, #36]	; 0x24
 800392a:	240b      	movs	r4, #11
 800392c:	9408      	str	r4, [sp, #32]
 800392e:	4c12      	ldr	r4, [pc, #72]	; (8003978 <Set_Screen+0x14bc>)
 8003930:	9407      	str	r4, [sp, #28]
 8003932:	9106      	str	r1, [sp, #24]
 8003934:	9205      	str	r2, [sp, #20]
 8003936:	9304      	str	r3, [sp, #16]
 8003938:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800393c:	9303      	str	r3, [sp, #12]
 800393e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003942:	9302      	str	r3, [sp, #8]
 8003944:	f240 1325 	movw	r3, #293	; 0x125
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	f240 238a 	movw	r3, #650	; 0x28a
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	2300      	movs	r3, #0
 8003952:	220a      	movs	r2, #10
 8003954:	2100      	movs	r1, #0
 8003956:	f003 fa47 	bl	8006de8 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Node_work_counter, 			0, 10, 0,  650, 353, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800395a:	4b03      	ldr	r3, [pc, #12]	; (8003968 <Set_Screen+0x14ac>)
 800395c:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <Set_Screen+0x14b0>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	e016      	b.n	8003994 <Set_Screen+0x14d8>
 8003966:	bf00      	nop
 8003968:	20000a50 	.word	0x20000a50
 800396c:	20000984 	.word	0x20000984
 8003970:	20000008 	.word	0x20000008
 8003974:	200009f8 	.word	0x200009f8
 8003978:	08010518 	.word	0x08010518
 800397c:	200000a8 	.word	0x200000a8
 8003980:	0800d64c 	.word	0x0800d64c
 8003984:	0800d66c 	.word	0x0800d66c
 8003988:	0800d68c 	.word	0x0800d68c
 800398c:	0800d6ac 	.word	0x0800d6ac
 8003990:	0800d6c8 	.word	0x0800d6c8
 8003994:	4a73      	ldr	r2, [pc, #460]	; (8003b64 <Set_Screen+0x16a8>)
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	4973      	ldr	r1, [pc, #460]	; (8003b68 <Set_Screen+0x16ac>)
 800399a:	6809      	ldr	r1, [r1, #0]
 800399c:	2412      	movs	r4, #18
 800399e:	9409      	str	r4, [sp, #36]	; 0x24
 80039a0:	240b      	movs	r4, #11
 80039a2:	9408      	str	r4, [sp, #32]
 80039a4:	4c71      	ldr	r4, [pc, #452]	; (8003b6c <Set_Screen+0x16b0>)
 80039a6:	9407      	str	r4, [sp, #28]
 80039a8:	9106      	str	r1, [sp, #24]
 80039aa:	9205      	str	r2, [sp, #20]
 80039ac:	9304      	str	r3, [sp, #16]
 80039ae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80039b2:	9303      	str	r3, [sp, #12]
 80039b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80039b8:	9302      	str	r3, [sp, #8]
 80039ba:	f240 1361 	movw	r3, #353	; 0x161
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	f240 238a 	movw	r3, #650	; 0x28a
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	220a      	movs	r2, #10
 80039ca:	2100      	movs	r1, #0
 80039cc:	f003 fa0c 	bl	8006de8 <Centred_DrawNumber_16_32bit>

			if(Control_DB.MenuPointer == 0)
 80039d0:	4b67      	ldr	r3, [pc, #412]	; (8003b70 <Set_Screen+0x16b4>)
 80039d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <Set_Screen+0x1528>
			{
				Control_DB.RazrPointerMAX   = 4;
 80039da:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <Set_Screen+0x16b4>)
 80039dc:	2204      	movs	r2, #4
 80039de:	80da      	strh	r2, [r3, #6]
				Control_DB.RazrPointer 		= 0;
				Control_DB.RazrPointerMAX   = 0;
			}


		break;
 80039e0:	f000 be29 	b.w	8004636 <Set_Screen+0x217a>
				Control_DB.RazrPointer 		= 0;
 80039e4:	4b62      	ldr	r3, [pc, #392]	; (8003b70 <Set_Screen+0x16b4>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	805a      	strh	r2, [r3, #2]
				Control_DB.RazrPointerMAX   = 0;
 80039ea:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <Set_Screen+0x16b4>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	80da      	strh	r2, [r3, #6]
		break;
 80039f0:	f000 be21 	b.w	8004636 <Set_Screen+0x217a>

		case 4: // Ручное управление

			if(!ALG_DB.clearing_pressure_filter_1.state)
 80039f4:	4b5f      	ldr	r3, [pc, #380]	; (8003b74 <Set_Screen+0x16b8>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10f      	bne.n	8003a1c <Set_Screen+0x1560>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть напорный фильтр 1 ", 27,	100,  70, FonColor[0], BasicSymbolColor, Page[4]);
 80039fc:	4b5e      	ldr	r3, [pc, #376]	; (8003b78 <Set_Screen+0x16bc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a59      	ldr	r2, [pc, #356]	; (8003b68 <Set_Screen+0x16ac>)
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	495d      	ldr	r1, [pc, #372]	; (8003b7c <Set_Screen+0x16c0>)
 8003a06:	6909      	ldr	r1, [r1, #16]
 8003a08:	9102      	str	r1, [sp, #8]
 8003a0a:	9201      	str	r2, [sp, #4]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2346      	movs	r3, #70	; 0x46
 8003a10:	2264      	movs	r2, #100	; 0x64
 8003a12:	211b      	movs	r1, #27
 8003a14:	485a      	ldr	r0, [pc, #360]	; (8003b80 <Set_Screen+0x16c4>)
 8003a16:	f002 fe79 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8003a1a:	e00e      	b.n	8003a3a <Set_Screen+0x157e>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  1 ", 27,	100,  70, FonColor[0], BasicSymbolColor, Page[4]);
 8003a1c:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <Set_Screen+0x16bc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a51      	ldr	r2, [pc, #324]	; (8003b68 <Set_Screen+0x16ac>)
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	4955      	ldr	r1, [pc, #340]	; (8003b7c <Set_Screen+0x16c0>)
 8003a26:	6909      	ldr	r1, [r1, #16]
 8003a28:	9102      	str	r1, [sp, #8]
 8003a2a:	9201      	str	r2, [sp, #4]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2346      	movs	r3, #70	; 0x46
 8003a30:	2264      	movs	r2, #100	; 0x64
 8003a32:	211b      	movs	r1, #27
 8003a34:	4853      	ldr	r0, [pc, #332]	; (8003b84 <Set_Screen+0x16c8>)
 8003a36:	f002 fe69 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_pressure_filter_2.state)
 8003a3a:	4b4e      	ldr	r3, [pc, #312]	; (8003b74 <Set_Screen+0x16b8>)
 8003a3c:	799b      	ldrb	r3, [r3, #6]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <Set_Screen+0x15a6>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть напорный фильтр 2 ", 27,	100, 110, FonColor[1], BasicSymbolColor, Page[4]);
 8003a42:	4b4d      	ldr	r3, [pc, #308]	; (8003b78 <Set_Screen+0x16bc>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4a48      	ldr	r2, [pc, #288]	; (8003b68 <Set_Screen+0x16ac>)
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	494c      	ldr	r1, [pc, #304]	; (8003b7c <Set_Screen+0x16c0>)
 8003a4c:	6909      	ldr	r1, [r1, #16]
 8003a4e:	9102      	str	r1, [sp, #8]
 8003a50:	9201      	str	r2, [sp, #4]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	236e      	movs	r3, #110	; 0x6e
 8003a56:	2264      	movs	r2, #100	; 0x64
 8003a58:	211b      	movs	r1, #27
 8003a5a:	484b      	ldr	r0, [pc, #300]	; (8003b88 <Set_Screen+0x16cc>)
 8003a5c:	f002 fe56 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8003a60:	e00e      	b.n	8003a80 <Set_Screen+0x15c4>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  2 ", 27,	100, 110, FonColor[1], BasicSymbolColor, Page[4]);
 8003a62:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <Set_Screen+0x16bc>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a40      	ldr	r2, [pc, #256]	; (8003b68 <Set_Screen+0x16ac>)
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	4944      	ldr	r1, [pc, #272]	; (8003b7c <Set_Screen+0x16c0>)
 8003a6c:	6909      	ldr	r1, [r1, #16]
 8003a6e:	9102      	str	r1, [sp, #8]
 8003a70:	9201      	str	r2, [sp, #4]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	236e      	movs	r3, #110	; 0x6e
 8003a76:	2264      	movs	r2, #100	; 0x64
 8003a78:	211b      	movs	r1, #27
 8003a7a:	4844      	ldr	r0, [pc, #272]	; (8003b8c <Set_Screen+0x16d0>)
 8003a7c:	f002 fe46 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_water_filter_1.state)
 8003a80:	4b3c      	ldr	r3, [pc, #240]	; (8003b74 <Set_Screen+0x16b8>)
 8003a82:	7b1b      	ldrb	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10f      	bne.n	8003aa8 <Set_Screen+0x15ec>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть фильтр воды     1 ", 27,	100, 150, FonColor[2], BasicSymbolColor, Page[4]);
 8003a88:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <Set_Screen+0x16bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a36      	ldr	r2, [pc, #216]	; (8003b68 <Set_Screen+0x16ac>)
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	493a      	ldr	r1, [pc, #232]	; (8003b7c <Set_Screen+0x16c0>)
 8003a92:	6909      	ldr	r1, [r1, #16]
 8003a94:	9102      	str	r1, [sp, #8]
 8003a96:	9201      	str	r2, [sp, #4]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2396      	movs	r3, #150	; 0x96
 8003a9c:	2264      	movs	r2, #100	; 0x64
 8003a9e:	211b      	movs	r1, #27
 8003aa0:	483b      	ldr	r0, [pc, #236]	; (8003b90 <Set_Screen+0x16d4>)
 8003aa2:	f002 fe33 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8003aa6:	e00e      	b.n	8003ac6 <Set_Screen+0x160a>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  1 ", 27,	100, 150, FonColor[2], BasicSymbolColor, Page[4]);
 8003aa8:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <Set_Screen+0x16bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a2e      	ldr	r2, [pc, #184]	; (8003b68 <Set_Screen+0x16ac>)
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	4932      	ldr	r1, [pc, #200]	; (8003b7c <Set_Screen+0x16c0>)
 8003ab2:	6909      	ldr	r1, [r1, #16]
 8003ab4:	9102      	str	r1, [sp, #8]
 8003ab6:	9201      	str	r2, [sp, #4]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2396      	movs	r3, #150	; 0x96
 8003abc:	2264      	movs	r2, #100	; 0x64
 8003abe:	211b      	movs	r1, #27
 8003ac0:	4830      	ldr	r0, [pc, #192]	; (8003b84 <Set_Screen+0x16c8>)
 8003ac2:	f002 fe23 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_water_filter_2.state)
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <Set_Screen+0x16b8>)
 8003ac8:	7c9b      	ldrb	r3, [r3, #18]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <Set_Screen+0x1632>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть фильтр воды     2 ", 27,	100, 190, FonColor[3], BasicSymbolColor, Page[4]);
 8003ace:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <Set_Screen+0x16bc>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4a25      	ldr	r2, [pc, #148]	; (8003b68 <Set_Screen+0x16ac>)
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	4929      	ldr	r1, [pc, #164]	; (8003b7c <Set_Screen+0x16c0>)
 8003ad8:	6909      	ldr	r1, [r1, #16]
 8003ada:	9102      	str	r1, [sp, #8]
 8003adc:	9201      	str	r2, [sp, #4]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	23be      	movs	r3, #190	; 0xbe
 8003ae2:	2264      	movs	r2, #100	; 0x64
 8003ae4:	211b      	movs	r1, #27
 8003ae6:	482b      	ldr	r0, [pc, #172]	; (8003b94 <Set_Screen+0x16d8>)
 8003ae8:	f002 fe10 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8003aec:	e00e      	b.n	8003b0c <Set_Screen+0x1650>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  2 ", 27,	100, 190, FonColor[3], BasicSymbolColor, Page[4]);
 8003aee:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <Set_Screen+0x16bc>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <Set_Screen+0x16ac>)
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	4921      	ldr	r1, [pc, #132]	; (8003b7c <Set_Screen+0x16c0>)
 8003af8:	6909      	ldr	r1, [r1, #16]
 8003afa:	9102      	str	r1, [sp, #8]
 8003afc:	9201      	str	r2, [sp, #4]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	23be      	movs	r3, #190	; 0xbe
 8003b02:	2264      	movs	r2, #100	; 0x64
 8003b04:	211b      	movs	r1, #27
 8003b06:	4821      	ldr	r0, [pc, #132]	; (8003b8c <Set_Screen+0x16d0>)
 8003b08:	f002 fe00 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_water_filter_3.state)
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <Set_Screen+0x16b8>)
 8003b0e:	7e1b      	ldrb	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10f      	bne.n	8003b34 <Set_Screen+0x1678>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть фильтр воды     3 ", 27,	100, 230, FonColor[4], BasicSymbolColor, Page[4]);
 8003b14:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <Set_Screen+0x16bc>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <Set_Screen+0x16ac>)
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	4917      	ldr	r1, [pc, #92]	; (8003b7c <Set_Screen+0x16c0>)
 8003b1e:	6909      	ldr	r1, [r1, #16]
 8003b20:	9102      	str	r1, [sp, #8]
 8003b22:	9201      	str	r2, [sp, #4]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	23e6      	movs	r3, #230	; 0xe6
 8003b28:	2264      	movs	r2, #100	; 0x64
 8003b2a:	211b      	movs	r1, #27
 8003b2c:	481a      	ldr	r0, [pc, #104]	; (8003b98 <Set_Screen+0x16dc>)
 8003b2e:	f002 fded 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8003b32:	e00e      	b.n	8003b52 <Set_Screen+0x1696>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  3 ", 27,	100, 230, FonColor[4], BasicSymbolColor, Page[4]);
 8003b34:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <Set_Screen+0x16bc>)
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <Set_Screen+0x16ac>)
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	490f      	ldr	r1, [pc, #60]	; (8003b7c <Set_Screen+0x16c0>)
 8003b3e:	6909      	ldr	r1, [r1, #16]
 8003b40:	9102      	str	r1, [sp, #8]
 8003b42:	9201      	str	r2, [sp, #4]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	23e6      	movs	r3, #230	; 0xe6
 8003b48:	2264      	movs	r2, #100	; 0x64
 8003b4a:	211b      	movs	r1, #27
 8003b4c:	4813      	ldr	r0, [pc, #76]	; (8003b9c <Set_Screen+0x16e0>)
 8003b4e:	f002 fddd 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			Control_DB.MenuPointerMAX 	= 4;
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <Set_Screen+0x16b4>)
 8003b54:	2204      	movs	r2, #4
 8003b56:	809a      	strh	r2, [r3, #4]
			Control_DB.RazrPointer 		= 0;
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <Set_Screen+0x16b4>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	805a      	strh	r2, [r3, #2]

		break;
 8003b5e:	f000 bd6a 	b.w	8004636 <Set_Screen+0x217a>
 8003b62:	bf00      	nop
 8003b64:	20000008 	.word	0x20000008
 8003b68:	200009f8 	.word	0x200009f8
 8003b6c:	08010518 	.word	0x08010518
 8003b70:	20000b18 	.word	0x20000b18
 8003b74:	20000a14 	.word	0x20000a14
 8003b78:	200000a8 	.word	0x200000a8
 8003b7c:	20000984 	.word	0x20000984
 8003b80:	0800d6e4 	.word	0x0800d6e4
 8003b84:	0800d718 	.word	0x0800d718
 8003b88:	0800d744 	.word	0x0800d744
 8003b8c:	0800d778 	.word	0x0800d778
 8003b90:	0800d7a4 	.word	0x0800d7a4
 8003b94:	0800d7d4 	.word	0x0800d7d4
 8003b98:	0800d804 	.word	0x0800d804
 8003b9c:	0800d834 	.word	0x0800d834



		case 5:

			Short_Centred_RU_DrawString_32("Введите пароль", 14, 	  		400, 190, BackgroundColor, BasicSymbolColor, Page[5]);
 8003ba0:	4b63      	ldr	r3, [pc, #396]	; (8003d30 <Set_Screen+0x1874>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a63      	ldr	r2, [pc, #396]	; (8003d34 <Set_Screen+0x1878>)
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	4963      	ldr	r1, [pc, #396]	; (8003d38 <Set_Screen+0x187c>)
 8003baa:	6949      	ldr	r1, [r1, #20]
 8003bac:	9102      	str	r1, [sp, #8]
 8003bae:	9201      	str	r2, [sp, #4]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	23be      	movs	r3, #190	; 0xbe
 8003bb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003bb8:	210e      	movs	r1, #14
 8003bba:	4860      	ldr	r0, [pc, #384]	; (8003d3c <Set_Screen+0x1880>)
 8003bbc:	f002 fec4 	bl	8006948 <Short_Centred_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&PassW_block.PassWord, 0,   4, Control_DB.RazrPointer, 9999, 0, 400,  240, 800,480, Page[5], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003bc0:	4b5f      	ldr	r3, [pc, #380]	; (8003d40 <Set_Screen+0x1884>)
 8003bc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bc6:	461c      	mov	r4, r3
 8003bc8:	4b5b      	ldr	r3, [pc, #364]	; (8003d38 <Set_Screen+0x187c>)
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	4a5d      	ldr	r2, [pc, #372]	; (8003d44 <Set_Screen+0x1888>)
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	4958      	ldr	r1, [pc, #352]	; (8003d34 <Set_Screen+0x1878>)
 8003bd2:	6809      	ldr	r1, [r1, #0]
 8003bd4:	2012      	movs	r0, #18
 8003bd6:	900b      	str	r0, [sp, #44]	; 0x2c
 8003bd8:	200b      	movs	r0, #11
 8003bda:	900a      	str	r0, [sp, #40]	; 0x28
 8003bdc:	485a      	ldr	r0, [pc, #360]	; (8003d48 <Set_Screen+0x188c>)
 8003bde:	9009      	str	r0, [sp, #36]	; 0x24
 8003be0:	9108      	str	r1, [sp, #32]
 8003be2:	9207      	str	r2, [sp, #28]
 8003be4:	9306      	str	r3, [sp, #24]
 8003be6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003bea:	9305      	str	r3, [sp, #20]
 8003bec:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003bf0:	9304      	str	r3, [sp, #16]
 8003bf2:	23f0      	movs	r3, #240	; 0xf0
 8003bf4:	9303      	str	r3, [sp, #12]
 8003bf6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003bfa:	9302      	str	r3, [sp, #8]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	f242 730f 	movw	r3, #9999	; 0x270f
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	4623      	mov	r3, r4
 8003c08:	2204      	movs	r2, #4
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	484f      	ldr	r0, [pc, #316]	; (8003d4c <Set_Screen+0x1890>)
 8003c0e:	f003 fb1b 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>
			if(PassW_block.PassFalseTimer)
 8003c12:	4b4e      	ldr	r3, [pc, #312]	; (8003d4c <Set_Screen+0x1890>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d011      	beq.n	8003c3e <Set_Screen+0x1782>
			{
				Short_Centred_RU_DrawString_32("Пароль неверный", 15, 		400, 290,        RedColor, BasicSymbolColor, Page[5]);
 8003c1a:	4b4d      	ldr	r3, [pc, #308]	; (8003d50 <Set_Screen+0x1894>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a45      	ldr	r2, [pc, #276]	; (8003d34 <Set_Screen+0x1878>)
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	4945      	ldr	r1, [pc, #276]	; (8003d38 <Set_Screen+0x187c>)
 8003c24:	6949      	ldr	r1, [r1, #20]
 8003c26:	9102      	str	r1, [sp, #8]
 8003c28:	9201      	str	r2, [sp, #4]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003c30:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003c34:	210f      	movs	r1, #15
 8003c36:	4847      	ldr	r0, [pc, #284]	; (8003d54 <Set_Screen+0x1898>)
 8003c38:	f002 fe86 	bl	8006948 <Short_Centred_RU_DrawString_32>
 8003c3c:	e010      	b.n	8003c60 <Set_Screen+0x17a4>
			}
			else
			{
				Short_Centred_RU_DrawString_32("               ", 15, 		400, 290, BackgroundColor, BasicSymbolColor, Page[5]);
 8003c3e:	4b3c      	ldr	r3, [pc, #240]	; (8003d30 <Set_Screen+0x1874>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3c      	ldr	r2, [pc, #240]	; (8003d34 <Set_Screen+0x1878>)
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	493c      	ldr	r1, [pc, #240]	; (8003d38 <Set_Screen+0x187c>)
 8003c48:	6949      	ldr	r1, [r1, #20]
 8003c4a:	9102      	str	r1, [sp, #8]
 8003c4c:	9201      	str	r2, [sp, #4]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003c54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003c58:	210f      	movs	r1, #15
 8003c5a:	483f      	ldr	r0, [pc, #252]	; (8003d58 <Set_Screen+0x189c>)
 8003c5c:	f002 fe74 	bl	8006948 <Short_Centred_RU_DrawString_32>
			}

			Control_DB.RazrPointerMAX 	= 4;
 8003c60:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <Set_Screen+0x1884>)
 8003c62:	2204      	movs	r2, #4
 8003c64:	80da      	strh	r2, [r3, #6]
			Control_DB.MenuPointerMAX 	= 0;
 8003c66:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <Set_Screen+0x1884>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	809a      	strh	r2, [r3, #4]

		break;
 8003c6c:	f000 bce3 	b.w	8004636 <Set_Screen+0x217a>

		case 6:
			Short_Left_Colored_RU_DrawString_32("Режим работы    ", 16,	30,  50, FonColor[0], BasicSymbolColor, Page[6]);
 8003c70:	4b3a      	ldr	r3, [pc, #232]	; (8003d5c <Set_Screen+0x18a0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <Set_Screen+0x1878>)
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	492f      	ldr	r1, [pc, #188]	; (8003d38 <Set_Screen+0x187c>)
 8003c7a:	6989      	ldr	r1, [r1, #24]
 8003c7c:	9102      	str	r1, [sp, #8]
 8003c7e:	9201      	str	r2, [sp, #4]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	2332      	movs	r3, #50	; 0x32
 8003c84:	221e      	movs	r2, #30
 8003c86:	2110      	movs	r1, #16
 8003c88:	4835      	ldr	r0, [pc, #212]	; (8003d60 <Set_Screen+0x18a4>)
 8003c8a:	f002 fd3f 	bl	800670c <Short_Left_Colored_RU_DrawString_32>

			if(BUV_settings.pump_mode == 1)
 8003c8e:	4b35      	ldr	r3, [pc, #212]	; (8003d64 <Set_Screen+0x18a8>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d16a      	bne.n	8003d6c <Set_Screen+0x18b0>
			{
				Short_Left_Colored_RU_DrawString_32("Авто", 4,600,  50, BackgroundColor, BasicSymbolColor, Page[6]);
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <Set_Screen+0x1874>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <Set_Screen+0x1878>)
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	4926      	ldr	r1, [pc, #152]	; (8003d38 <Set_Screen+0x187c>)
 8003ca0:	6989      	ldr	r1, [r1, #24]
 8003ca2:	9102      	str	r1, [sp, #8]
 8003ca4:	9201      	str	r2, [sp, #4]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2332      	movs	r3, #50	; 0x32
 8003caa:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003cae:	2104      	movs	r1, #4
 8003cb0:	482d      	ldr	r0, [pc, #180]	; (8003d68 <Set_Screen+0x18ac>)
 8003cb2:	f002 fd2b 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.pump_mode,0, 1, Control_DB.RazrPointer, 1,   0, 470, 50, 800,480, Page[6], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <Set_Screen+0x1884>)
 8003cb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cbc:	461c      	mov	r4, r3
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <Set_Screen+0x187c>)
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <Set_Screen+0x18a0>)
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	491b      	ldr	r1, [pc, #108]	; (8003d34 <Set_Screen+0x1878>)
 8003cc8:	6809      	ldr	r1, [r1, #0]
 8003cca:	2012      	movs	r0, #18
 8003ccc:	900b      	str	r0, [sp, #44]	; 0x2c
 8003cce:	200b      	movs	r0, #11
 8003cd0:	900a      	str	r0, [sp, #40]	; 0x28
 8003cd2:	481d      	ldr	r0, [pc, #116]	; (8003d48 <Set_Screen+0x188c>)
 8003cd4:	9009      	str	r0, [sp, #36]	; 0x24
 8003cd6:	9108      	str	r1, [sp, #32]
 8003cd8:	9207      	str	r2, [sp, #28]
 8003cda:	9306      	str	r3, [sp, #24]
 8003cdc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003ce0:	9305      	str	r3, [sp, #20]
 8003ce2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003ce6:	9304      	str	r3, [sp, #16]
 8003ce8:	2332      	movs	r3, #50	; 0x32
 8003cea:	9303      	str	r3, [sp, #12]
 8003cec:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003cf0:	9302      	str	r3, [sp, #8]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4818      	ldr	r0, [pc, #96]	; (8003d64 <Set_Screen+0x18a8>)
 8003d02:	f003 faa1 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>
				Draw_Rectangle(BackgroundColor, 30,   70,  750, 600, Page[6], 800, 480);
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <Set_Screen+0x1874>)
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <Set_Screen+0x187c>)
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003d12:	9203      	str	r2, [sp, #12]
 8003d14:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003d18:	9202      	str	r2, [sp, #8]
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	f240 23ee 	movw	r3, #750	; 0x2ee
 8003d26:	2246      	movs	r2, #70	; 0x46
 8003d28:	211e      	movs	r1, #30
 8003d2a:	f003 fe69 	bl	8007a00 <Draw_Rectangle>
 8003d2e:	e1a1      	b.n	8004074 <Set_Screen+0x1bb8>
 8003d30:	20000008 	.word	0x20000008
 8003d34:	200009f8 	.word	0x200009f8
 8003d38:	20000984 	.word	0x20000984
 8003d3c:	0800d860 	.word	0x0800d860
 8003d40:	20000b18 	.word	0x20000b18
 8003d44:	2000000c 	.word	0x2000000c
 8003d48:	08010518 	.word	0x08010518
 8003d4c:	20000a00 	.word	0x20000a00
 8003d50:	20000000 	.word	0x20000000
 8003d54:	0800d87c 	.word	0x0800d87c
 8003d58:	0800d89c 	.word	0x0800d89c
 8003d5c:	200000a8 	.word	0x200000a8
 8003d60:	0800d8ac 	.word	0x0800d8ac
 8003d64:	20000b2c 	.word	0x20000b2c
 8003d68:	0800d8c8 	.word	0x0800d8c8
			}
			else
			{
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.pump_mode,0, 1, Control_DB.RazrPointer, 1,   0, 470, 50, 800,480, Page[6], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003d6c:	4ba2      	ldr	r3, [pc, #648]	; (8003ff8 <Set_Screen+0x1b3c>)
 8003d6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d72:	461c      	mov	r4, r3
 8003d74:	4ba1      	ldr	r3, [pc, #644]	; (8003ffc <Set_Screen+0x1b40>)
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	4aa1      	ldr	r2, [pc, #644]	; (8004000 <Set_Screen+0x1b44>)
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	49a1      	ldr	r1, [pc, #644]	; (8004004 <Set_Screen+0x1b48>)
 8003d7e:	6809      	ldr	r1, [r1, #0]
 8003d80:	2012      	movs	r0, #18
 8003d82:	900b      	str	r0, [sp, #44]	; 0x2c
 8003d84:	200b      	movs	r0, #11
 8003d86:	900a      	str	r0, [sp, #40]	; 0x28
 8003d88:	489f      	ldr	r0, [pc, #636]	; (8004008 <Set_Screen+0x1b4c>)
 8003d8a:	9009      	str	r0, [sp, #36]	; 0x24
 8003d8c:	9108      	str	r1, [sp, #32]
 8003d8e:	9207      	str	r2, [sp, #28]
 8003d90:	9306      	str	r3, [sp, #24]
 8003d92:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003d96:	9305      	str	r3, [sp, #20]
 8003d98:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003d9c:	9304      	str	r3, [sp, #16]
 8003d9e:	2332      	movs	r3, #50	; 0x32
 8003da0:	9303      	str	r3, [sp, #12]
 8003da2:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003da6:	9302      	str	r3, [sp, #8]
 8003da8:	2300      	movs	r3, #0
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	2301      	movs	r3, #1
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4623      	mov	r3, r4
 8003db2:	2201      	movs	r2, #1
 8003db4:	2100      	movs	r1, #0
 8003db6:	4895      	ldr	r0, [pc, #596]	; (800400c <Set_Screen+0x1b50>)
 8003db8:	f003 fa46 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>
				Short_Left_Colored_RU_DrawString_32("Ручн", 4,600,  50, BackgroundColor, BasicSymbolColor, Page[6]);
 8003dbc:	4b94      	ldr	r3, [pc, #592]	; (8004010 <Set_Screen+0x1b54>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a90      	ldr	r2, [pc, #576]	; (8004004 <Set_Screen+0x1b48>)
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	498d      	ldr	r1, [pc, #564]	; (8003ffc <Set_Screen+0x1b40>)
 8003dc6:	6989      	ldr	r1, [r1, #24]
 8003dc8:	9102      	str	r1, [sp, #8]
 8003dca:	9201      	str	r2, [sp, #4]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	2332      	movs	r3, #50	; 0x32
 8003dd0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	488f      	ldr	r0, [pc, #572]	; (8004014 <Set_Screen+0x1b58>)
 8003dd8:	f002 fc98 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Конц эмульсии    ", 17,30,  80, FonColor[1], BasicSymbolColor, Page[6]);
 8003ddc:	4b88      	ldr	r3, [pc, #544]	; (8004000 <Set_Screen+0x1b44>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a88      	ldr	r2, [pc, #544]	; (8004004 <Set_Screen+0x1b48>)
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	4985      	ldr	r1, [pc, #532]	; (8003ffc <Set_Screen+0x1b40>)
 8003de6:	6989      	ldr	r1, [r1, #24]
 8003de8:	9102      	str	r1, [sp, #8]
 8003dea:	9201      	str	r2, [sp, #4]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	2350      	movs	r3, #80	; 0x50
 8003df0:	221e      	movs	r2, #30
 8003df2:	2111      	movs	r1, #17
 8003df4:	4888      	ldr	r0, [pc, #544]	; (8004018 <Set_Screen+0x1b5c>)
 8003df6:	f002 fc89 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Настр промыв фильт", 18, 30, 110, FonColor[2], BasicSymbolColor, Page[6]);
 8003dfa:	4b81      	ldr	r3, [pc, #516]	; (8004000 <Set_Screen+0x1b44>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	4a81      	ldr	r2, [pc, #516]	; (8004004 <Set_Screen+0x1b48>)
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	497e      	ldr	r1, [pc, #504]	; (8003ffc <Set_Screen+0x1b40>)
 8003e04:	6989      	ldr	r1, [r1, #24]
 8003e06:	9102      	str	r1, [sp, #8]
 8003e08:	9201      	str	r2, [sp, #4]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	236e      	movs	r3, #110	; 0x6e
 8003e0e:	221e      	movs	r2, #30
 8003e10:	2112      	movs	r1, #18
 8003e12:	4882      	ldr	r0, [pc, #520]	; (800401c <Set_Screen+0x1b60>)
 8003e14:	f002 fc7a 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Время промыв", 	12,	30, 140, FonColor[3], BasicSymbolColor, Page[6]);
 8003e18:	4b79      	ldr	r3, [pc, #484]	; (8004000 <Set_Screen+0x1b44>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4a79      	ldr	r2, [pc, #484]	; (8004004 <Set_Screen+0x1b48>)
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	4976      	ldr	r1, [pc, #472]	; (8003ffc <Set_Screen+0x1b40>)
 8003e22:	6989      	ldr	r1, [r1, #24]
 8003e24:	9102      	str	r1, [sp, #8]
 8003e26:	9201      	str	r2, [sp, #4]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	238c      	movs	r3, #140	; 0x8c
 8003e2c:	221e      	movs	r2, #30
 8003e2e:	210c      	movs	r1, #12
 8003e30:	487b      	ldr	r0, [pc, #492]	; (8004020 <Set_Screen+0x1b64>)
 8003e32:	f002 fc6b 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Настр мин уровн конц", 20, 30, 170, FonColor[4], BasicSymbolColor, Page[6]);
 8003e36:	4b72      	ldr	r3, [pc, #456]	; (8004000 <Set_Screen+0x1b44>)
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	4a72      	ldr	r2, [pc, #456]	; (8004004 <Set_Screen+0x1b48>)
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	496f      	ldr	r1, [pc, #444]	; (8003ffc <Set_Screen+0x1b40>)
 8003e40:	6989      	ldr	r1, [r1, #24]
 8003e42:	9102      	str	r1, [sp, #8]
 8003e44:	9201      	str	r2, [sp, #4]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	23aa      	movs	r3, #170	; 0xaa
 8003e4a:	221e      	movs	r2, #30
 8003e4c:	2114      	movs	r1, #20
 8003e4e:	4875      	ldr	r0, [pc, #468]	; (8004024 <Set_Screen+0x1b68>)
 8003e50:	f002 fc5c 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Настр уровн авт разгр", 21, 30, 200, FonColor[5], BasicSymbolColor, Page[6]);
 8003e54:	4b6a      	ldr	r3, [pc, #424]	; (8004000 <Set_Screen+0x1b44>)
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	4a6a      	ldr	r2, [pc, #424]	; (8004004 <Set_Screen+0x1b48>)
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	4967      	ldr	r1, [pc, #412]	; (8003ffc <Set_Screen+0x1b40>)
 8003e5e:	6989      	ldr	r1, [r1, #24]
 8003e60:	9102      	str	r1, [sp, #8]
 8003e62:	9201      	str	r2, [sp, #4]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	23c8      	movs	r3, #200	; 0xc8
 8003e68:	221e      	movs	r2, #30
 8003e6a:	2115      	movs	r1, #21
 8003e6c:	486e      	ldr	r0, [pc, #440]	; (8004028 <Set_Screen+0x1b6c>)
 8003e6e:	f002 fc4d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Сброс настр по умол", 19, 	30, 230, FonColor[6], BasicSymbolColor, Page[6]);
 8003e72:	4b63      	ldr	r3, [pc, #396]	; (8004000 <Set_Screen+0x1b44>)
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	4a63      	ldr	r2, [pc, #396]	; (8004004 <Set_Screen+0x1b48>)
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	4960      	ldr	r1, [pc, #384]	; (8003ffc <Set_Screen+0x1b40>)
 8003e7c:	6989      	ldr	r1, [r1, #24]
 8003e7e:	9102      	str	r1, [sp, #8]
 8003e80:	9201      	str	r2, [sp, #4]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	23e6      	movs	r3, #230	; 0xe6
 8003e86:	221e      	movs	r2, #30
 8003e88:	2113      	movs	r1, #19
 8003e8a:	4868      	ldr	r0, [pc, #416]	; (800402c <Set_Screen+0x1b70>)
 8003e8c:	f002 fc3e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(1,0, 1, Control_DB.RazrPointer, 1,   0, 470, 50, 800,480, Page[6], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003e90:	4b59      	ldr	r3, [pc, #356]	; (8003ff8 <Set_Screen+0x1b3c>)
 8003e92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e96:	461c      	mov	r4, r3
 8003e98:	4b58      	ldr	r3, [pc, #352]	; (8003ffc <Set_Screen+0x1b40>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	4a64      	ldr	r2, [pc, #400]	; (8004030 <Set_Screen+0x1b74>)
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	4958      	ldr	r1, [pc, #352]	; (8004004 <Set_Screen+0x1b48>)
 8003ea2:	6809      	ldr	r1, [r1, #0]
 8003ea4:	2012      	movs	r0, #18
 8003ea6:	900b      	str	r0, [sp, #44]	; 0x2c
 8003ea8:	200b      	movs	r0, #11
 8003eaa:	900a      	str	r0, [sp, #40]	; 0x28
 8003eac:	4856      	ldr	r0, [pc, #344]	; (8004008 <Set_Screen+0x1b4c>)
 8003eae:	9009      	str	r0, [sp, #36]	; 0x24
 8003eb0:	9108      	str	r1, [sp, #32]
 8003eb2:	9207      	str	r2, [sp, #28]
 8003eb4:	9306      	str	r3, [sp, #24]
 8003eb6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003eba:	9305      	str	r3, [sp, #20]
 8003ebc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	2332      	movs	r3, #50	; 0x32
 8003ec4:	9303      	str	r3, [sp, #12]
 8003ec6:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003eca:	9302      	str	r3, [sp, #8]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	4623      	mov	r3, r4
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	2100      	movs	r1, #0
 8003eda:	2001      	movs	r0, #1
 8003edc:	f003 f9b4 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>
				Centred_DrawNumber_16_32bit_controled(1,0, 1, Control_DB.RazrPointer, 1,   0, 470, 170, 800,480, Page[6], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003ee0:	4b45      	ldr	r3, [pc, #276]	; (8003ff8 <Set_Screen+0x1b3c>)
 8003ee2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ee6:	461c      	mov	r4, r3
 8003ee8:	4b44      	ldr	r3, [pc, #272]	; (8003ffc <Set_Screen+0x1b40>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	4a50      	ldr	r2, [pc, #320]	; (8004030 <Set_Screen+0x1b74>)
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	4944      	ldr	r1, [pc, #272]	; (8004004 <Set_Screen+0x1b48>)
 8003ef2:	6809      	ldr	r1, [r1, #0]
 8003ef4:	2012      	movs	r0, #18
 8003ef6:	900b      	str	r0, [sp, #44]	; 0x2c
 8003ef8:	200b      	movs	r0, #11
 8003efa:	900a      	str	r0, [sp, #40]	; 0x28
 8003efc:	4842      	ldr	r0, [pc, #264]	; (8004008 <Set_Screen+0x1b4c>)
 8003efe:	9009      	str	r0, [sp, #36]	; 0x24
 8003f00:	9108      	str	r1, [sp, #32]
 8003f02:	9207      	str	r2, [sp, #28]
 8003f04:	9306      	str	r3, [sp, #24]
 8003f06:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f0a:	9305      	str	r3, [sp, #20]
 8003f0c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003f10:	9304      	str	r3, [sp, #16]
 8003f12:	23aa      	movs	r3, #170	; 0xaa
 8003f14:	9303      	str	r3, [sp, #12]
 8003f16:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003f1a:	9302      	str	r3, [sp, #8]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	2301      	movs	r3, #1
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	4623      	mov	r3, r4
 8003f26:	2201      	movs	r2, #1
 8003f28:	2100      	movs	r1, #0
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f003 f98c 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>
				Centred_DrawNumber_16_32bit_controled(1,0, 1, Control_DB.RazrPointer, 1,   0, 470, 200, 800,480, Page[6], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003f30:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <Set_Screen+0x1b3c>)
 8003f32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f36:	461c      	mov	r4, r3
 8003f38:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <Set_Screen+0x1b40>)
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	4a3c      	ldr	r2, [pc, #240]	; (8004030 <Set_Screen+0x1b74>)
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	4930      	ldr	r1, [pc, #192]	; (8004004 <Set_Screen+0x1b48>)
 8003f42:	6809      	ldr	r1, [r1, #0]
 8003f44:	2012      	movs	r0, #18
 8003f46:	900b      	str	r0, [sp, #44]	; 0x2c
 8003f48:	200b      	movs	r0, #11
 8003f4a:	900a      	str	r0, [sp, #40]	; 0x28
 8003f4c:	482e      	ldr	r0, [pc, #184]	; (8004008 <Set_Screen+0x1b4c>)
 8003f4e:	9009      	str	r0, [sp, #36]	; 0x24
 8003f50:	9108      	str	r1, [sp, #32]
 8003f52:	9207      	str	r2, [sp, #28]
 8003f54:	9306      	str	r3, [sp, #24]
 8003f56:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f5a:	9305      	str	r3, [sp, #20]
 8003f5c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003f60:	9304      	str	r3, [sp, #16]
 8003f62:	23c8      	movs	r3, #200	; 0xc8
 8003f64:	9303      	str	r3, [sp, #12]
 8003f66:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003f6a:	9302      	str	r3, [sp, #8]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	2301      	movs	r3, #1
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	4623      	mov	r3, r4
 8003f76:	2201      	movs	r2, #1
 8003f78:	2100      	movs	r1, #0
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	f003 f964 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>
				Centred_DrawNumber_16_32bit_controled(1,0, 1, Control_DB.RazrPointer, 1,   0, 470, 80, 800,480, Page[6], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003f80:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <Set_Screen+0x1b3c>)
 8003f82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f86:	461c      	mov	r4, r3
 8003f88:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <Set_Screen+0x1b40>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	4a28      	ldr	r2, [pc, #160]	; (8004030 <Set_Screen+0x1b74>)
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	491c      	ldr	r1, [pc, #112]	; (8004004 <Set_Screen+0x1b48>)
 8003f92:	6809      	ldr	r1, [r1, #0]
 8003f94:	2012      	movs	r0, #18
 8003f96:	900b      	str	r0, [sp, #44]	; 0x2c
 8003f98:	200b      	movs	r0, #11
 8003f9a:	900a      	str	r0, [sp, #40]	; 0x28
 8003f9c:	481a      	ldr	r0, [pc, #104]	; (8004008 <Set_Screen+0x1b4c>)
 8003f9e:	9009      	str	r0, [sp, #36]	; 0x24
 8003fa0:	9108      	str	r1, [sp, #32]
 8003fa2:	9207      	str	r2, [sp, #28]
 8003fa4:	9306      	str	r3, [sp, #24]
 8003fa6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003faa:	9305      	str	r3, [sp, #20]
 8003fac:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003fb0:	9304      	str	r3, [sp, #16]
 8003fb2:	2350      	movs	r3, #80	; 0x50
 8003fb4:	9303      	str	r3, [sp, #12]
 8003fb6:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003fba:	9302      	str	r3, [sp, #8]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	4623      	mov	r3, r4
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	2100      	movs	r1, #0
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f003 f93c 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>
//				Short_Left_Colored_RU_DrawString_32("По переп дав", 12,585,  110, BackgroundColor, BasicSymbolColor, Page[6]);
				Short_Left_Colored_RU_DrawString_32("По врем", 7,600,  90, BackgroundColor, BasicSymbolColor, Page[6]);
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <Set_Screen+0x1b54>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <Set_Screen+0x1b48>)
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	4908      	ldr	r1, [pc, #32]	; (8003ffc <Set_Screen+0x1b40>)
 8003fda:	6989      	ldr	r1, [r1, #24]
 8003fdc:	9102      	str	r1, [sp, #8]
 8003fde:	9201      	str	r2, [sp, #4]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	235a      	movs	r3, #90	; 0x5a
 8003fe4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003fe8:	2107      	movs	r1, #7
 8003fea:	4812      	ldr	r0, [pc, #72]	; (8004034 <Set_Screen+0x1b78>)
 8003fec:	f002 fb8e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
//				Short_Left_Colored_RU_DrawString_32("механ", 5,600,  200, BackgroundColor, BasicSymbolColor, Page[6]);
				Short_Left_Colored_RU_DrawString_32("моль/л", 6,600,  170, BackgroundColor, BasicSymbolColor, Page[6]);
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <Set_Screen+0x1b54>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	e020      	b.n	8004038 <Set_Screen+0x1b7c>
 8003ff6:	bf00      	nop
 8003ff8:	20000b18 	.word	0x20000b18
 8003ffc:	20000984 	.word	0x20000984
 8004000:	200000a8 	.word	0x200000a8
 8004004:	200009f8 	.word	0x200009f8
 8004008:	08010518 	.word	0x08010518
 800400c:	20000b2c 	.word	0x20000b2c
 8004010:	20000008 	.word	0x20000008
 8004014:	0800d8d4 	.word	0x0800d8d4
 8004018:	0800d8e0 	.word	0x0800d8e0
 800401c:	0800d900 	.word	0x0800d900
 8004020:	0800d924 	.word	0x0800d924
 8004024:	0800d93c 	.word	0x0800d93c
 8004028:	0800d964 	.word	0x0800d964
 800402c:	0800d98c 	.word	0x0800d98c
 8004030:	2000000c 	.word	0x2000000c
 8004034:	0800d9b0 	.word	0x0800d9b0
 8004038:	4a8a      	ldr	r2, [pc, #552]	; (8004264 <Set_Screen+0x1da8>)
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	498a      	ldr	r1, [pc, #552]	; (8004268 <Set_Screen+0x1dac>)
 800403e:	6989      	ldr	r1, [r1, #24]
 8004040:	9102      	str	r1, [sp, #8]
 8004042:	9201      	str	r2, [sp, #4]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	23aa      	movs	r3, #170	; 0xaa
 8004048:	f44f 7216 	mov.w	r2, #600	; 0x258
 800404c:	2106      	movs	r1, #6
 800404e:	4887      	ldr	r0, [pc, #540]	; (800426c <Set_Screen+0x1db0>)
 8004050:	f002 fb5c 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("эл.магн", 7,600,  180, BackgroundColor, BasicSymbolColor, Page[6]);
 8004054:	4b86      	ldr	r3, [pc, #536]	; (8004270 <Set_Screen+0x1db4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a82      	ldr	r2, [pc, #520]	; (8004264 <Set_Screen+0x1da8>)
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	4982      	ldr	r1, [pc, #520]	; (8004268 <Set_Screen+0x1dac>)
 800405e:	6989      	ldr	r1, [r1, #24]
 8004060:	9102      	str	r1, [sp, #8]
 8004062:	9201      	str	r2, [sp, #4]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	23b4      	movs	r3, #180	; 0xb4
 8004068:	f44f 7216 	mov.w	r2, #600	; 0x258
 800406c:	2107      	movs	r1, #7
 800406e:	4881      	ldr	r0, [pc, #516]	; (8004274 <Set_Screen+0x1db8>)
 8004070:	f002 fb4c 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
//			Short_Left_Colored_RU_DrawString_32("По переп дав", 12,585,  110, BackgroundColor, BasicSymbolColor, Page[6]);
////			Short_Left_Colored_RU_DrawString_32("По врем", 7,600,  90, BackgroundColor, BasicSymbolColor, Page[6]);
//			Short_Left_Colored_RU_DrawString_32("механ", 5,600,  200, BackgroundColor, BasicSymbolColor, Page[6]);
//			Short_Left_Colored_RU_DrawString_32("моль/л", 6,600,  170, BackgroundColor, BasicSymbolColor, Page[6]);
////			Short_Left_Colored_RU_DrawString_32("эл.магн", 7,600,  180, BackgroundColor, BasicSymbolColor, Page[6]);
			Control_DB.MenuPointerMAX = 6;
 8004074:	4b80      	ldr	r3, [pc, #512]	; (8004278 <Set_Screen+0x1dbc>)
 8004076:	2206      	movs	r2, #6
 8004078:	809a      	strh	r2, [r3, #4]

		break;
 800407a:	e2dc      	b.n	8004636 <Set_Screen+0x217a>
		case 7: // Заводские настройки

			Short_Left_Colored_RU_DrawString_32("Макс кол-во одновр. раб. АНН :", 30,	20,  70, FonColor[0], BasicSymbolColor, Page[7]);
 800407c:	4b7f      	ldr	r3, [pc, #508]	; (800427c <Set_Screen+0x1dc0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a78      	ldr	r2, [pc, #480]	; (8004264 <Set_Screen+0x1da8>)
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	4978      	ldr	r1, [pc, #480]	; (8004268 <Set_Screen+0x1dac>)
 8004086:	69c9      	ldr	r1, [r1, #28]
 8004088:	9102      	str	r1, [sp, #8]
 800408a:	9201      	str	r2, [sp, #4]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2346      	movs	r3, #70	; 0x46
 8004090:	2214      	movs	r2, #20
 8004092:	211e      	movs	r1, #30
 8004094:	487a      	ldr	r0, [pc, #488]	; (8004280 <Set_Screen+0x1dc4>)
 8004096:	f002 fb39 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.Max_ANN_operation,   0, 1, Control_DB.RazrPointer,     3,      1, 700,  70, 800,480, Page[7], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800409a:	4b77      	ldr	r3, [pc, #476]	; (8004278 <Set_Screen+0x1dbc>)
 800409c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80040a0:	461c      	mov	r4, r3
 80040a2:	4b71      	ldr	r3, [pc, #452]	; (8004268 <Set_Screen+0x1dac>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	4a75      	ldr	r2, [pc, #468]	; (800427c <Set_Screen+0x1dc0>)
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	496e      	ldr	r1, [pc, #440]	; (8004264 <Set_Screen+0x1da8>)
 80040ac:	6809      	ldr	r1, [r1, #0]
 80040ae:	2012      	movs	r0, #18
 80040b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80040b2:	200b      	movs	r0, #11
 80040b4:	900a      	str	r0, [sp, #40]	; 0x28
 80040b6:	4873      	ldr	r0, [pc, #460]	; (8004284 <Set_Screen+0x1dc8>)
 80040b8:	9009      	str	r0, [sp, #36]	; 0x24
 80040ba:	9108      	str	r1, [sp, #32]
 80040bc:	9207      	str	r2, [sp, #28]
 80040be:	9306      	str	r3, [sp, #24]
 80040c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80040c4:	9305      	str	r3, [sp, #20]
 80040c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80040ca:	9304      	str	r3, [sp, #16]
 80040cc:	2346      	movs	r3, #70	; 0x46
 80040ce:	9303      	str	r3, [sp, #12]
 80040d0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80040d4:	9302      	str	r3, [sp, #8]
 80040d6:	2301      	movs	r3, #1
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	2303      	movs	r3, #3
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	4623      	mov	r3, r4
 80040e0:	2201      	movs	r2, #1
 80040e2:	2100      	movs	r1, #0
 80040e4:	4868      	ldr	r0, [pc, #416]	; (8004288 <Set_Screen+0x1dcc>)
 80040e6:	f003 f8af 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Макс выставляемое давление   :", 30,	20, 110, FonColor[1], BasicSymbolColor, Page[7]);
 80040ea:	4b64      	ldr	r3, [pc, #400]	; (800427c <Set_Screen+0x1dc0>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4a5d      	ldr	r2, [pc, #372]	; (8004264 <Set_Screen+0x1da8>)
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	495d      	ldr	r1, [pc, #372]	; (8004268 <Set_Screen+0x1dac>)
 80040f4:	69c9      	ldr	r1, [r1, #28]
 80040f6:	9102      	str	r1, [sp, #8]
 80040f8:	9201      	str	r2, [sp, #4]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	236e      	movs	r3, #110	; 0x6e
 80040fe:	2214      	movs	r2, #20
 8004100:	211e      	movs	r1, #30
 8004102:	4862      	ldr	r0, [pc, #392]	; (800428c <Set_Screen+0x1dd0>)
 8004104:	f002 fb02 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.Max_Pressure, 	    0, 2, Control_DB.RazrPointer,    60,     10, 700, 110, 800,480, Page[7], FonColor[1], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004108:	4b5b      	ldr	r3, [pc, #364]	; (8004278 <Set_Screen+0x1dbc>)
 800410a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800410e:	461c      	mov	r4, r3
 8004110:	4b55      	ldr	r3, [pc, #340]	; (8004268 <Set_Screen+0x1dac>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4a59      	ldr	r2, [pc, #356]	; (800427c <Set_Screen+0x1dc0>)
 8004116:	6852      	ldr	r2, [r2, #4]
 8004118:	4952      	ldr	r1, [pc, #328]	; (8004264 <Set_Screen+0x1da8>)
 800411a:	6809      	ldr	r1, [r1, #0]
 800411c:	2012      	movs	r0, #18
 800411e:	900b      	str	r0, [sp, #44]	; 0x2c
 8004120:	200b      	movs	r0, #11
 8004122:	900a      	str	r0, [sp, #40]	; 0x28
 8004124:	4857      	ldr	r0, [pc, #348]	; (8004284 <Set_Screen+0x1dc8>)
 8004126:	9009      	str	r0, [sp, #36]	; 0x24
 8004128:	9108      	str	r1, [sp, #32]
 800412a:	9207      	str	r2, [sp, #28]
 800412c:	9306      	str	r3, [sp, #24]
 800412e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004132:	9305      	str	r3, [sp, #20]
 8004134:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004138:	9304      	str	r3, [sp, #16]
 800413a:	236e      	movs	r3, #110	; 0x6e
 800413c:	9303      	str	r3, [sp, #12]
 800413e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8004142:	9302      	str	r3, [sp, #8]
 8004144:	230a      	movs	r3, #10
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	233c      	movs	r3, #60	; 0x3c
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	4623      	mov	r3, r4
 800414e:	2202      	movs	r2, #2
 8004150:	2100      	movs	r1, #0
 8004152:	484f      	ldr	r0, [pc, #316]	; (8004290 <Set_Screen+0x1dd4>)
 8004154:	f003 f878 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Срок кап ремонта АНН (ч)     :", 30,	20, 150, FonColor[2], BasicSymbolColor, Page[7]);
 8004158:	4b48      	ldr	r3, [pc, #288]	; (800427c <Set_Screen+0x1dc0>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4a41      	ldr	r2, [pc, #260]	; (8004264 <Set_Screen+0x1da8>)
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	4941      	ldr	r1, [pc, #260]	; (8004268 <Set_Screen+0x1dac>)
 8004162:	69c9      	ldr	r1, [r1, #28]
 8004164:	9102      	str	r1, [sp, #8]
 8004166:	9201      	str	r2, [sp, #4]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	2396      	movs	r3, #150	; 0x96
 800416c:	2214      	movs	r2, #20
 800416e:	211e      	movs	r1, #30
 8004170:	4848      	ldr	r0, [pc, #288]	; (8004294 <Set_Screen+0x1dd8>)
 8004172:	f002 facb 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.Major_repear_period, 0, 5, Control_DB.RazrPointer, 50000,   5000, 700, 150, 800,480, Page[7], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004176:	4b40      	ldr	r3, [pc, #256]	; (8004278 <Set_Screen+0x1dbc>)
 8004178:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800417c:	461c      	mov	r4, r3
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <Set_Screen+0x1dac>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	4a3e      	ldr	r2, [pc, #248]	; (800427c <Set_Screen+0x1dc0>)
 8004184:	6892      	ldr	r2, [r2, #8]
 8004186:	4937      	ldr	r1, [pc, #220]	; (8004264 <Set_Screen+0x1da8>)
 8004188:	6809      	ldr	r1, [r1, #0]
 800418a:	2012      	movs	r0, #18
 800418c:	900b      	str	r0, [sp, #44]	; 0x2c
 800418e:	200b      	movs	r0, #11
 8004190:	900a      	str	r0, [sp, #40]	; 0x28
 8004192:	483c      	ldr	r0, [pc, #240]	; (8004284 <Set_Screen+0x1dc8>)
 8004194:	9009      	str	r0, [sp, #36]	; 0x24
 8004196:	9108      	str	r1, [sp, #32]
 8004198:	9207      	str	r2, [sp, #28]
 800419a:	9306      	str	r3, [sp, #24]
 800419c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80041a0:	9305      	str	r3, [sp, #20]
 80041a2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80041a6:	9304      	str	r3, [sp, #16]
 80041a8:	2396      	movs	r3, #150	; 0x96
 80041aa:	9303      	str	r3, [sp, #12]
 80041ac:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80041b0:	9302      	str	r3, [sp, #8]
 80041b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	4623      	mov	r3, r4
 80041c0:	2205      	movs	r2, #5
 80041c2:	2100      	movs	r1, #0
 80041c4:	4834      	ldr	r0, [pc, #208]	; (8004298 <Set_Screen+0x1ddc>)
 80041c6:	f003 f83f 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Ур.эмульсии при котором откл :", 30,	20, 190, FonColor[3], BasicSymbolColor, Page[7]);
 80041ca:	4b2c      	ldr	r3, [pc, #176]	; (800427c <Set_Screen+0x1dc0>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	4a25      	ldr	r2, [pc, #148]	; (8004264 <Set_Screen+0x1da8>)
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	4925      	ldr	r1, [pc, #148]	; (8004268 <Set_Screen+0x1dac>)
 80041d4:	69c9      	ldr	r1, [r1, #28]
 80041d6:	9102      	str	r1, [sp, #8]
 80041d8:	9201      	str	r2, [sp, #4]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	23be      	movs	r3, #190	; 0xbe
 80041de:	2214      	movs	r2, #20
 80041e0:	211e      	movs	r1, #30
 80041e2:	482e      	ldr	r0, [pc, #184]	; (800429c <Set_Screen+0x1de0>)
 80041e4:	f002 fa92 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.emulsion_off_level, 0, 3, Control_DB.RazrPointer,    900,    100, 700, 190, 800,480, Page[7], FonColor[3], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80041e8:	4b23      	ldr	r3, [pc, #140]	; (8004278 <Set_Screen+0x1dbc>)
 80041ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041ee:	461c      	mov	r4, r3
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <Set_Screen+0x1dac>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	4a21      	ldr	r2, [pc, #132]	; (800427c <Set_Screen+0x1dc0>)
 80041f6:	68d2      	ldr	r2, [r2, #12]
 80041f8:	491a      	ldr	r1, [pc, #104]	; (8004264 <Set_Screen+0x1da8>)
 80041fa:	6809      	ldr	r1, [r1, #0]
 80041fc:	2012      	movs	r0, #18
 80041fe:	900b      	str	r0, [sp, #44]	; 0x2c
 8004200:	200b      	movs	r0, #11
 8004202:	900a      	str	r0, [sp, #40]	; 0x28
 8004204:	481f      	ldr	r0, [pc, #124]	; (8004284 <Set_Screen+0x1dc8>)
 8004206:	9009      	str	r0, [sp, #36]	; 0x24
 8004208:	9108      	str	r1, [sp, #32]
 800420a:	9207      	str	r2, [sp, #28]
 800420c:	9306      	str	r3, [sp, #24]
 800420e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004212:	9305      	str	r3, [sp, #20]
 8004214:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	23be      	movs	r3, #190	; 0xbe
 800421c:	9303      	str	r3, [sp, #12]
 800421e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8004222:	9302      	str	r3, [sp, #8]
 8004224:	2364      	movs	r3, #100	; 0x64
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	f44f 7361 	mov.w	r3, #900	; 0x384
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	4623      	mov	r3, r4
 8004230:	2203      	movs	r2, #3
 8004232:	2100      	movs	r1, #0
 8004234:	481a      	ldr	r0, [pc, #104]	; (80042a0 <Set_Screen+0x1de4>)
 8004236:	f003 f807 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>

			if(!BUV_settings_global.work_on_water_enable)
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <Set_Screen+0x1de8>)
 800423c:	7d1b      	ldrb	r3, [r3, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d134      	bne.n	80042ac <Set_Screen+0x1df0>
			{
				Short_Left_Colored_RU_DrawString_32("Работа на воде запрещена      ", 30,	20, 230, FonColor[4], BasicSymbolColor, Page[7]);
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <Set_Screen+0x1dc0>)
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	4a07      	ldr	r2, [pc, #28]	; (8004264 <Set_Screen+0x1da8>)
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	4907      	ldr	r1, [pc, #28]	; (8004268 <Set_Screen+0x1dac>)
 800424c:	69c9      	ldr	r1, [r1, #28]
 800424e:	9102      	str	r1, [sp, #8]
 8004250:	9201      	str	r2, [sp, #4]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	23e6      	movs	r3, #230	; 0xe6
 8004256:	2214      	movs	r2, #20
 8004258:	211e      	movs	r1, #30
 800425a:	4813      	ldr	r0, [pc, #76]	; (80042a8 <Set_Screen+0x1dec>)
 800425c:	f002 fa56 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
 8004260:	e033      	b.n	80042ca <Set_Screen+0x1e0e>
 8004262:	bf00      	nop
 8004264:	200009f8 	.word	0x200009f8
 8004268:	20000984 	.word	0x20000984
 800426c:	0800d9c0 	.word	0x0800d9c0
 8004270:	20000008 	.word	0x20000008
 8004274:	0800d9cc 	.word	0x0800d9cc
 8004278:	20000b18 	.word	0x20000b18
 800427c:	200000a8 	.word	0x200000a8
 8004280:	0800d9dc 	.word	0x0800d9dc
 8004284:	08010518 	.word	0x08010518
 8004288:	20000a38 	.word	0x20000a38
 800428c:	0800da10 	.word	0x0800da10
 8004290:	20000a3c 	.word	0x20000a3c
 8004294:	0800da48 	.word	0x0800da48
 8004298:	20000a40 	.word	0x20000a40
 800429c:	0800da7c 	.word	0x0800da7c
 80042a0:	20000a44 	.word	0x20000a44
 80042a4:	20000a34 	.word	0x20000a34
 80042a8:	0800dab4 	.word	0x0800dab4
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Работа на воде разрешена      ", 30,	20, 230, FonColor[4], BasicSymbolColor, Page[7]);
 80042ac:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <Set_Screen+0x1e9c>)
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	4a2a      	ldr	r2, [pc, #168]	; (800435c <Set_Screen+0x1ea0>)
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	492a      	ldr	r1, [pc, #168]	; (8004360 <Set_Screen+0x1ea4>)
 80042b6:	69c9      	ldr	r1, [r1, #28]
 80042b8:	9102      	str	r1, [sp, #8]
 80042ba:	9201      	str	r2, [sp, #4]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	23e6      	movs	r3, #230	; 0xe6
 80042c0:	2214      	movs	r2, #20
 80042c2:	211e      	movs	r1, #30
 80042c4:	4827      	ldr	r0, [pc, #156]	; (8004364 <Set_Screen+0x1ea8>)
 80042c6:	f002 fa21 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			}

			Short_Left_Colored_RU_DrawString_32("Ур.конц-та при котором предупр",    30,	20, 270, FonColor[5], BasicSymbolColor, Page[7]);
 80042ca:	4b23      	ldr	r3, [pc, #140]	; (8004358 <Set_Screen+0x1e9c>)
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	4a23      	ldr	r2, [pc, #140]	; (800435c <Set_Screen+0x1ea0>)
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	4923      	ldr	r1, [pc, #140]	; (8004360 <Set_Screen+0x1ea4>)
 80042d4:	69c9      	ldr	r1, [r1, #28]
 80042d6:	9102      	str	r1, [sp, #8]
 80042d8:	9201      	str	r2, [sp, #4]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80042e0:	2214      	movs	r2, #20
 80042e2:	211e      	movs	r1, #30
 80042e4:	4820      	ldr	r0, [pc, #128]	; (8004368 <Set_Screen+0x1eac>)
 80042e6:	f002 fa11 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.water_work_conconcentrate_level, 0, 3, Control_DB.RazrPointer,    900,    100, 700, 270, 800,480, Page[7], FonColor[5], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <Set_Screen+0x1eb0>)
 80042ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042f0:	461c      	mov	r4, r3
 80042f2:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <Set_Screen+0x1ea4>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <Set_Screen+0x1e9c>)
 80042f8:	6952      	ldr	r2, [r2, #20]
 80042fa:	4918      	ldr	r1, [pc, #96]	; (800435c <Set_Screen+0x1ea0>)
 80042fc:	6809      	ldr	r1, [r1, #0]
 80042fe:	2012      	movs	r0, #18
 8004300:	900b      	str	r0, [sp, #44]	; 0x2c
 8004302:	200b      	movs	r0, #11
 8004304:	900a      	str	r0, [sp, #40]	; 0x28
 8004306:	481a      	ldr	r0, [pc, #104]	; (8004370 <Set_Screen+0x1eb4>)
 8004308:	9009      	str	r0, [sp, #36]	; 0x24
 800430a:	9108      	str	r1, [sp, #32]
 800430c:	9207      	str	r2, [sp, #28]
 800430e:	9306      	str	r3, [sp, #24]
 8004310:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004314:	9305      	str	r3, [sp, #20]
 8004316:	f44f 7348 	mov.w	r3, #800	; 0x320
 800431a:	9304      	str	r3, [sp, #16]
 800431c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8004320:	9303      	str	r3, [sp, #12]
 8004322:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8004326:	9302      	str	r3, [sp, #8]
 8004328:	2364      	movs	r3, #100	; 0x64
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	4623      	mov	r3, r4
 8004334:	2203      	movs	r2, #3
 8004336:	2100      	movs	r1, #0
 8004338:	480e      	ldr	r0, [pc, #56]	; (8004374 <Set_Screen+0x1eb8>)
 800433a:	f002 ff85 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>


			Control_DB.MenuPointerMAX 	= 5;
 800433e:	4b0b      	ldr	r3, [pc, #44]	; (800436c <Set_Screen+0x1eb0>)
 8004340:	2205      	movs	r2, #5
 8004342:	809a      	strh	r2, [r3, #4]
			if(Control_DB.MenuPointer == 4)
 8004344:	4b09      	ldr	r3, [pc, #36]	; (800436c <Set_Screen+0x1eb0>)
 8004346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800434a:	2b04      	cmp	r3, #4
 800434c:	f040 8172 	bne.w	8004634 <Set_Screen+0x2178>
			{
				Control_DB.RazrPointer = 0;
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <Set_Screen+0x1eb0>)
 8004352:	2200      	movs	r2, #0
 8004354:	805a      	strh	r2, [r3, #2]
			}

		break;
 8004356:	e16d      	b.n	8004634 <Set_Screen+0x2178>
 8004358:	200000a8 	.word	0x200000a8
 800435c:	200009f8 	.word	0x200009f8
 8004360:	20000984 	.word	0x20000984
 8004364:	0800dae8 	.word	0x0800dae8
 8004368:	0800db1c 	.word	0x0800db1c
 800436c:	20000b18 	.word	0x20000b18
 8004370:	08010518 	.word	0x08010518
 8004374:	20000a4c 	.word	0x20000a4c

		case 21:

			Short_Left_Colored_RU_DrawString_32("Адрес            ", 17,	100,  70, FonColor[0], BasicSymbolColor, Page[21]);
 8004378:	4b9c      	ldr	r3, [pc, #624]	; (80045ec <Set_Screen+0x2130>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a9c      	ldr	r2, [pc, #624]	; (80045f0 <Set_Screen+0x2134>)
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	499c      	ldr	r1, [pc, #624]	; (80045f4 <Set_Screen+0x2138>)
 8004382:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004384:	9102      	str	r1, [sp, #8]
 8004386:	9201      	str	r2, [sp, #4]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2346      	movs	r3, #70	; 0x46
 800438c:	2264      	movs	r2, #100	; 0x64
 800438e:	2111      	movs	r1, #17
 8004390:	4899      	ldr	r0, [pc, #612]	; (80045f8 <Set_Screen+0x213c>)
 8004392:	f002 f9bb 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Скорость         ", 17, 	100, 110, FonColor[1], BasicSymbolColor, Page[21]);
 8004396:	4b95      	ldr	r3, [pc, #596]	; (80045ec <Set_Screen+0x2130>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4a95      	ldr	r2, [pc, #596]	; (80045f0 <Set_Screen+0x2134>)
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	4995      	ldr	r1, [pc, #596]	; (80045f4 <Set_Screen+0x2138>)
 80043a0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80043a2:	9102      	str	r1, [sp, #8]
 80043a4:	9201      	str	r2, [sp, #4]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	236e      	movs	r3, #110	; 0x6e
 80043aa:	2264      	movs	r2, #100	; 0x64
 80043ac:	2111      	movs	r1, #17
 80043ae:	4893      	ldr	r0, [pc, #588]	; (80045fc <Set_Screen+0x2140>)
 80043b0:	f002 f9ac 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Стоп биты        ", 17, 	100, 150, FonColor[2], BasicSymbolColor, Page[21]);
 80043b4:	4b8d      	ldr	r3, [pc, #564]	; (80045ec <Set_Screen+0x2130>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a8d      	ldr	r2, [pc, #564]	; (80045f0 <Set_Screen+0x2134>)
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	498d      	ldr	r1, [pc, #564]	; (80045f4 <Set_Screen+0x2138>)
 80043be:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80043c0:	9102      	str	r1, [sp, #8]
 80043c2:	9201      	str	r2, [sp, #4]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	2396      	movs	r3, #150	; 0x96
 80043c8:	2264      	movs	r2, #100	; 0x64
 80043ca:	2111      	movs	r1, #17
 80043cc:	488c      	ldr	r0, [pc, #560]	; (8004600 <Set_Screen+0x2144>)
 80043ce:	f002 f99d 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Яркость дисплея  ", 17, 	100, 190, FonColor[3], BasicSymbolColor, Page[21]);
 80043d2:	4b86      	ldr	r3, [pc, #536]	; (80045ec <Set_Screen+0x2130>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4a86      	ldr	r2, [pc, #536]	; (80045f0 <Set_Screen+0x2134>)
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	4986      	ldr	r1, [pc, #536]	; (80045f4 <Set_Screen+0x2138>)
 80043dc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80043de:	9102      	str	r1, [sp, #8]
 80043e0:	9201      	str	r2, [sp, #4]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	23be      	movs	r3, #190	; 0xbe
 80043e6:	2264      	movs	r2, #100	; 0x64
 80043e8:	2111      	movs	r1, #17
 80043ea:	4886      	ldr	r0, [pc, #536]	; (8004604 <Set_Screen+0x2148>)
 80043ec:	f002 f98e 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Яркость клав-ры  ", 17, 	100, 230, FonColor[4], BasicSymbolColor, Page[21]);
 80043f0:	4b7e      	ldr	r3, [pc, #504]	; (80045ec <Set_Screen+0x2130>)
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	4a7e      	ldr	r2, [pc, #504]	; (80045f0 <Set_Screen+0x2134>)
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	497e      	ldr	r1, [pc, #504]	; (80045f4 <Set_Screen+0x2138>)
 80043fa:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80043fc:	9102      	str	r1, [sp, #8]
 80043fe:	9201      	str	r2, [sp, #4]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	23e6      	movs	r3, #230	; 0xe6
 8004404:	2264      	movs	r2, #100	; 0x64
 8004406:	2111      	movs	r1, #17
 8004408:	487f      	ldr	r0, [pc, #508]	; (8004608 <Set_Screen+0x214c>)
 800440a:	f002 f97f 	bl	800670c <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Сохранить во флеш", 17, 	100, 270, FonColor[5], BasicSymbolColor, Page[21]);
 800440e:	4b77      	ldr	r3, [pc, #476]	; (80045ec <Set_Screen+0x2130>)
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	4a77      	ldr	r2, [pc, #476]	; (80045f0 <Set_Screen+0x2134>)
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	4977      	ldr	r1, [pc, #476]	; (80045f4 <Set_Screen+0x2138>)
 8004418:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800441a:	9102      	str	r1, [sp, #8]
 800441c:	9201      	str	r2, [sp, #4]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8004424:	2264      	movs	r2, #100	; 0x64
 8004426:	2111      	movs	r1, #17
 8004428:	4878      	ldr	r0, [pc, #480]	; (800460c <Set_Screen+0x2150>)
 800442a:	f002 f96f 	bl	800670c <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_ADDR, 			0, 3, Control_DB.RazrPointer,    255,      0, 470,  70, 800,480, Page[21], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800442e:	4b78      	ldr	r3, [pc, #480]	; (8004610 <Set_Screen+0x2154>)
 8004430:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004434:	461c      	mov	r4, r3
 8004436:	4b6f      	ldr	r3, [pc, #444]	; (80045f4 <Set_Screen+0x2138>)
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	4a6c      	ldr	r2, [pc, #432]	; (80045ec <Set_Screen+0x2130>)
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	496c      	ldr	r1, [pc, #432]	; (80045f0 <Set_Screen+0x2134>)
 8004440:	6809      	ldr	r1, [r1, #0]
 8004442:	2012      	movs	r0, #18
 8004444:	900b      	str	r0, [sp, #44]	; 0x2c
 8004446:	200b      	movs	r0, #11
 8004448:	900a      	str	r0, [sp, #40]	; 0x28
 800444a:	4872      	ldr	r0, [pc, #456]	; (8004614 <Set_Screen+0x2158>)
 800444c:	9009      	str	r0, [sp, #36]	; 0x24
 800444e:	9108      	str	r1, [sp, #32]
 8004450:	9207      	str	r2, [sp, #28]
 8004452:	9306      	str	r3, [sp, #24]
 8004454:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004458:	9305      	str	r3, [sp, #20]
 800445a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800445e:	9304      	str	r3, [sp, #16]
 8004460:	2346      	movs	r3, #70	; 0x46
 8004462:	9303      	str	r3, [sp, #12]
 8004464:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004468:	9302      	str	r3, [sp, #8]
 800446a:	2300      	movs	r3, #0
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	23ff      	movs	r3, #255	; 0xff
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	4623      	mov	r3, r4
 8004474:	2203      	movs	r2, #3
 8004476:	2100      	movs	r1, #0
 8004478:	4867      	ldr	r0, [pc, #412]	; (8004618 <Set_Screen+0x215c>)
 800447a:	f002 fee5 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_Speed, 		0, 6, Control_DB.RazrPointer, 115200,   9600, 470, 110, 800,480, Page[21], FonColor[1], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800447e:	4b64      	ldr	r3, [pc, #400]	; (8004610 <Set_Screen+0x2154>)
 8004480:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004484:	461c      	mov	r4, r3
 8004486:	4b5b      	ldr	r3, [pc, #364]	; (80045f4 <Set_Screen+0x2138>)
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	4a58      	ldr	r2, [pc, #352]	; (80045ec <Set_Screen+0x2130>)
 800448c:	6852      	ldr	r2, [r2, #4]
 800448e:	4958      	ldr	r1, [pc, #352]	; (80045f0 <Set_Screen+0x2134>)
 8004490:	6809      	ldr	r1, [r1, #0]
 8004492:	2012      	movs	r0, #18
 8004494:	900b      	str	r0, [sp, #44]	; 0x2c
 8004496:	200b      	movs	r0, #11
 8004498:	900a      	str	r0, [sp, #40]	; 0x28
 800449a:	485e      	ldr	r0, [pc, #376]	; (8004614 <Set_Screen+0x2158>)
 800449c:	9009      	str	r0, [sp, #36]	; 0x24
 800449e:	9108      	str	r1, [sp, #32]
 80044a0:	9207      	str	r2, [sp, #28]
 80044a2:	9306      	str	r3, [sp, #24]
 80044a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80044a8:	9305      	str	r3, [sp, #20]
 80044aa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80044ae:	9304      	str	r3, [sp, #16]
 80044b0:	236e      	movs	r3, #110	; 0x6e
 80044b2:	9303      	str	r3, [sp, #12]
 80044b4:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80044b8:	9302      	str	r3, [sp, #8]
 80044ba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	4623      	mov	r3, r4
 80044c8:	2206      	movs	r2, #6
 80044ca:	2100      	movs	r1, #0
 80044cc:	4853      	ldr	r0, [pc, #332]	; (800461c <Set_Screen+0x2160>)
 80044ce:	f002 febb 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_Stops, 		0, 1, Control_DB.RazrPointer,      2,      1, 470, 150, 800,480, Page[21], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80044d2:	4b4f      	ldr	r3, [pc, #316]	; (8004610 <Set_Screen+0x2154>)
 80044d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80044d8:	461c      	mov	r4, r3
 80044da:	4b46      	ldr	r3, [pc, #280]	; (80045f4 <Set_Screen+0x2138>)
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	4a43      	ldr	r2, [pc, #268]	; (80045ec <Set_Screen+0x2130>)
 80044e0:	6892      	ldr	r2, [r2, #8]
 80044e2:	4943      	ldr	r1, [pc, #268]	; (80045f0 <Set_Screen+0x2134>)
 80044e4:	6809      	ldr	r1, [r1, #0]
 80044e6:	2012      	movs	r0, #18
 80044e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80044ea:	200b      	movs	r0, #11
 80044ec:	900a      	str	r0, [sp, #40]	; 0x28
 80044ee:	4849      	ldr	r0, [pc, #292]	; (8004614 <Set_Screen+0x2158>)
 80044f0:	9009      	str	r0, [sp, #36]	; 0x24
 80044f2:	9108      	str	r1, [sp, #32]
 80044f4:	9207      	str	r2, [sp, #28]
 80044f6:	9306      	str	r3, [sp, #24]
 80044f8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80044fc:	9305      	str	r3, [sp, #20]
 80044fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	2396      	movs	r3, #150	; 0x96
 8004506:	9303      	str	r3, [sp, #12]
 8004508:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800450c:	9302      	str	r3, [sp, #8]
 800450e:	2301      	movs	r3, #1
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	2302      	movs	r3, #2
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	4623      	mov	r3, r4
 8004518:	2201      	movs	r2, #1
 800451a:	2100      	movs	r1, #0
 800451c:	4840      	ldr	r0, [pc, #256]	; (8004620 <Set_Screen+0x2164>)
 800451e:	f002 fe93 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.brightness_disp, 	0, 3, Control_DB.RazrPointer,    100,     10, 470, 190, 800,480, Page[21], FonColor[3], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004522:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <Set_Screen+0x2154>)
 8004524:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004528:	461c      	mov	r4, r3
 800452a:	4b32      	ldr	r3, [pc, #200]	; (80045f4 <Set_Screen+0x2138>)
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	4a2f      	ldr	r2, [pc, #188]	; (80045ec <Set_Screen+0x2130>)
 8004530:	68d2      	ldr	r2, [r2, #12]
 8004532:	492f      	ldr	r1, [pc, #188]	; (80045f0 <Set_Screen+0x2134>)
 8004534:	6809      	ldr	r1, [r1, #0]
 8004536:	2012      	movs	r0, #18
 8004538:	900b      	str	r0, [sp, #44]	; 0x2c
 800453a:	200b      	movs	r0, #11
 800453c:	900a      	str	r0, [sp, #40]	; 0x28
 800453e:	4835      	ldr	r0, [pc, #212]	; (8004614 <Set_Screen+0x2158>)
 8004540:	9009      	str	r0, [sp, #36]	; 0x24
 8004542:	9108      	str	r1, [sp, #32]
 8004544:	9207      	str	r2, [sp, #28]
 8004546:	9306      	str	r3, [sp, #24]
 8004548:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800454c:	9305      	str	r3, [sp, #20]
 800454e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	23be      	movs	r3, #190	; 0xbe
 8004556:	9303      	str	r3, [sp, #12]
 8004558:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800455c:	9302      	str	r3, [sp, #8]
 800455e:	230a      	movs	r3, #10
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	2364      	movs	r3, #100	; 0x64
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	4623      	mov	r3, r4
 8004568:	2203      	movs	r2, #3
 800456a:	2100      	movs	r1, #0
 800456c:	482d      	ldr	r0, [pc, #180]	; (8004624 <Set_Screen+0x2168>)
 800456e:	f002 fe6b 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.brightness_clav, 	0, 3, Control_DB.RazrPointer,    100,     10, 470, 230, 800,480, Page[21], FonColor[4], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004572:	4b27      	ldr	r3, [pc, #156]	; (8004610 <Set_Screen+0x2154>)
 8004574:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004578:	461c      	mov	r4, r3
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <Set_Screen+0x2138>)
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <Set_Screen+0x2130>)
 8004580:	6912      	ldr	r2, [r2, #16]
 8004582:	491b      	ldr	r1, [pc, #108]	; (80045f0 <Set_Screen+0x2134>)
 8004584:	6809      	ldr	r1, [r1, #0]
 8004586:	2012      	movs	r0, #18
 8004588:	900b      	str	r0, [sp, #44]	; 0x2c
 800458a:	200b      	movs	r0, #11
 800458c:	900a      	str	r0, [sp, #40]	; 0x28
 800458e:	4821      	ldr	r0, [pc, #132]	; (8004614 <Set_Screen+0x2158>)
 8004590:	9009      	str	r0, [sp, #36]	; 0x24
 8004592:	9108      	str	r1, [sp, #32]
 8004594:	9207      	str	r2, [sp, #28]
 8004596:	9306      	str	r3, [sp, #24]
 8004598:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800459c:	9305      	str	r3, [sp, #20]
 800459e:	f44f 7348 	mov.w	r3, #800	; 0x320
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	23e6      	movs	r3, #230	; 0xe6
 80045a6:	9303      	str	r3, [sp, #12]
 80045a8:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80045ac:	9302      	str	r3, [sp, #8]
 80045ae:	230a      	movs	r3, #10
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	2364      	movs	r3, #100	; 0x64
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	4623      	mov	r3, r4
 80045b8:	2203      	movs	r2, #3
 80045ba:	2100      	movs	r1, #0
 80045bc:	481a      	ldr	r0, [pc, #104]	; (8004628 <Set_Screen+0x216c>)
 80045be:	f002 fe43 	bl	8007248 <Centred_DrawNumber_16_32bit_controled>

			Control_DB.MenuPointerMAX = 5;
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <Set_Screen+0x2154>)
 80045c4:	2205      	movs	r2, #5
 80045c6:	809a      	strh	r2, [r3, #4]

			Short_Left_Colored_RU_DrawString_32("бод/с", 5,					585, 110, BackgroundColor, BasicSymbolColor, Page[21]);
 80045c8:	4b18      	ldr	r3, [pc, #96]	; (800462c <Set_Screen+0x2170>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <Set_Screen+0x2134>)
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	4908      	ldr	r1, [pc, #32]	; (80045f4 <Set_Screen+0x2138>)
 80045d2:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80045d4:	9102      	str	r1, [sp, #8]
 80045d6:	9201      	str	r2, [sp, #4]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	236e      	movs	r3, #110	; 0x6e
 80045dc:	f240 2249 	movw	r2, #585	; 0x249
 80045e0:	2105      	movs	r1, #5
 80045e2:	4813      	ldr	r0, [pc, #76]	; (8004630 <Set_Screen+0x2174>)
 80045e4:	f002 f892 	bl	800670c <Short_Left_Colored_RU_DrawString_32>

		break;
 80045e8:	e025      	b.n	8004636 <Set_Screen+0x217a>
 80045ea:	bf00      	nop
 80045ec:	200000a8 	.word	0x200000a8
 80045f0:	200009f8 	.word	0x200009f8
 80045f4:	20000984 	.word	0x20000984
 80045f8:	0800db54 	.word	0x0800db54
 80045fc:	0800db6c 	.word	0x0800db6c
 8004600:	0800db88 	.word	0x0800db88
 8004604:	0800dba4 	.word	0x0800dba4
 8004608:	0800dbc4 	.word	0x0800dbc4
 800460c:	0800dbe4 	.word	0x0800dbe4
 8004610:	20000b18 	.word	0x20000b18
 8004614:	08010518 	.word	0x08010518
 8004618:	20000afc 	.word	0x20000afc
 800461c:	20000b00 	.word	0x20000b00
 8004620:	20000b04 	.word	0x20000b04
 8004624:	20000b10 	.word	0x20000b10
 8004628:	20000b14 	.word	0x20000b14
 800462c:	20000008 	.word	0x20000008
 8004630:	0800dc08 	.word	0x0800dc08
		break;
 8004634:	bf00      	nop

	}


	if(screen_event)
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <Set_Screen+0x21bc>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00e      	beq.n	800465c <Set_Screen+0x21a0>
	{

		Control_DB.MenuPointer  		= 0;
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <Set_Screen+0x21c0>)
 8004640:	2200      	movs	r2, #0
 8004642:	801a      	strh	r2, [r3, #0]
		Control_DB.RazrPointer 			= 0;
 8004644:	4b0d      	ldr	r3, [pc, #52]	; (800467c <Set_Screen+0x21c0>)
 8004646:	2200      	movs	r2, #0
 8004648:	805a      	strh	r2, [r3, #2]
		PassW_block.PassWord   			= 0;
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <Set_Screen+0x21c4>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
		PassW_block.DataClearingUnlock	= 0;
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <Set_Screen+0x21c4>)
 8004652:	2200      	movs	r2, #0
 8004654:	741a      	strb	r2, [r3, #16]
		screen_event 					= 0;
 8004656:	4b08      	ldr	r3, [pc, #32]	; (8004678 <Set_Screen+0x21bc>)
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]

	}

	HAL_LTDC_SetAddress(&hltdc, Page[screen], 0);
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <Set_Screen+0x21c8>)
 8004660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004664:	2200      	movs	r2, #0
 8004666:	4619      	mov	r1, r3
 8004668:	4807      	ldr	r0, [pc, #28]	; (8004688 <Set_Screen+0x21cc>)
 800466a:	f004 fa77 	bl	8008b5c <HAL_LTDC_SetAddress>
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bdb0      	pop	{r4, r5, r7, pc}
 8004676:	bf00      	nop
 8004678:	200009fc 	.word	0x200009fc
 800467c:	20000b18 	.word	0x20000b18
 8004680:	20000a00 	.word	0x20000a00
 8004684:	20000984 	.word	0x20000984
 8004688:	20000148 	.word	0x20000148

0800468c <TimedBitValue_handler>:




void TimedBitValue_handler(TimedBitValue *Var)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	if(Var->state & !Var->state_mirror)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	785b      	ldrb	r3, [r3, #1]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <TimedBitValue_handler+0x2a>
	{
		Var->timer = Var->default_timer; // Запуск таймера при переходе 0 -> 1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	889a      	ldrh	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	805a      	strh	r2, [r3, #2]
	}
	Var->state_mirror = Var->state;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	781a      	ldrb	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	705a      	strb	r2, [r3, #1]

	if(!Var->state)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <TimedBitValue_handler+0x42>
	{
		Var->timer = 0; // Обнуление таймера при принудительном сбросе
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	805a      	strh	r2, [r3, #2]
		{
			Var->state = 0;
		}
		Var->timer--;
	}
}
 80046cc:	e00c      	b.n	80046e8 <TimedBitValue_handler+0x5c>
		if(!Var->timer)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	885b      	ldrh	r3, [r3, #2]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <TimedBitValue_handler+0x50>
			Var->state = 0;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
		Var->timer--;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	885b      	ldrh	r3, [r3, #2]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	805a      	strh	r2, [r3, #2]
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046f8:	b08a      	sub	sp, #40	; 0x28
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	PassW_block.PassWord 		=    0;
 80046fc:	4bac      	ldr	r3, [pc, #688]	; (80049b0 <main+0x2bc>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
	PassW_block.PassWord_true 	= 1234;
 8004702:	4bab      	ldr	r3, [pc, #684]	; (80049b0 <main+0x2bc>)
 8004704:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8004708:	605a      	str	r2, [r3, #4]
	PassW_block.PassWord_DATA   = 3850;
 800470a:	4ba9      	ldr	r3, [pc, #676]	; (80049b0 <main+0x2bc>)
 800470c:	f640 720a 	movw	r2, #3850	; 0xf0a
 8004710:	60da      	str	r2, [r3, #12]

	memcpy(&Settings_DB, 0x08060000, sizeof(Settings_DB)); // чтение настроек с флеш
 8004712:	4aa8      	ldr	r2, [pc, #672]	; (80049b4 <main+0x2c0>)
 8004714:	4ba8      	ldr	r3, [pc, #672]	; (80049b8 <main+0x2c4>)
 8004716:	4614      	mov	r4, r2
 8004718:	461d      	mov	r5, r3
 800471a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800471c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800471e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Settings_DB.FlashWriteFlag	 = 0;
 8004726:	4ba3      	ldr	r3, [pc, #652]	; (80049b4 <main+0x2c0>)
 8004728:	2200      	movs	r2, #0
 800472a:	741a      	strb	r2, [r3, #16]
	Settings_DB.RS485_Parity	 = 0;
 800472c:	4ba1      	ldr	r3, [pc, #644]	; (80049b4 <main+0x2c0>)
 800472e:	2200      	movs	r2, #0
 8004730:	60da      	str	r2, [r3, #12]

	if(Settings_DB.RS485_ADDR == -1)
 8004732:	4ba0      	ldr	r3, [pc, #640]	; (80049b4 <main+0x2c0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d10f      	bne.n	800475c <main+0x68>
	{
		Settings_DB.RS485_ADDR  = 1;
 800473c:	4b9d      	ldr	r3, [pc, #628]	; (80049b4 <main+0x2c0>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]
		Settings_DB.RS485_Speed = 115200;
 8004742:	4b9c      	ldr	r3, [pc, #624]	; (80049b4 <main+0x2c0>)
 8004744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004748:	605a      	str	r2, [r3, #4]
		Settings_DB.RS485_Stops = 1;
 800474a:	4b9a      	ldr	r3, [pc, #616]	; (80049b4 <main+0x2c0>)
 800474c:	2201      	movs	r2, #1
 800474e:	609a      	str	r2, [r3, #8]
		Settings_DB.brightness_disp = 100;
 8004750:	4b98      	ldr	r3, [pc, #608]	; (80049b4 <main+0x2c0>)
 8004752:	2264      	movs	r2, #100	; 0x64
 8004754:	615a      	str	r2, [r3, #20]
		Settings_DB.brightness_clav = 100;
 8004756:	4b97      	ldr	r3, [pc, #604]	; (80049b4 <main+0x2c0>)
 8004758:	2264      	movs	r2, #100	; 0x64
 800475a:	619a      	str	r2, [r3, #24]
	}

	Slave_1.PORT    		= UART7_BASE;
 800475c:	4b97      	ldr	r3, [pc, #604]	; (80049bc <main+0x2c8>)
 800475e:	4a98      	ldr	r2, [pc, #608]	; (80049c0 <main+0x2cc>)
 8004760:	601a      	str	r2, [r3, #0]
	Slave_1.MB_Addr 		= Settings_DB.RS485_ADDR;
 8004762:	4b94      	ldr	r3, [pc, #592]	; (80049b4 <main+0x2c0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	b2da      	uxtb	r2, r3
 8004768:	4b94      	ldr	r3, [pc, #592]	; (80049bc <main+0x2c8>)
 800476a:	711a      	strb	r2, [r3, #4]
	Slave_1.Roll_max 		= 0;
 800476c:	4b93      	ldr	r3, [pc, #588]	; (80049bc <main+0x2c8>)
 800476e:	2200      	movs	r2, #0
 8004770:	81da      	strh	r2, [r3, #14]
	Slave_1.Transmit_delay 	= 2;
 8004772:	4b92      	ldr	r3, [pc, #584]	; (80049bc <main+0x2c8>)
 8004774:	2202      	movs	r2, #2
 8004776:	f8a3 2616 	strh.w	r2, [r3, #1558]	; 0x616
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800477a:	f003 f981 	bl	8007a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800477e:	f000 f943 	bl	8004a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004782:	f000 fc17 	bl	8004fb4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8004786:	f000 f9af 	bl	8004ae8 <MX_DMA2D_Init>
  MX_FMC_Init();
 800478a:	f000 fbc1 	bl	8004f10 <MX_FMC_Init>
  MX_LTDC_Init();
 800478e:	f000 f9dd 	bl	8004b4c <MX_LTDC_Init>
  MX_SPI1_Init();
 8004792:	f000 fa5d 	bl	8004c50 <MX_SPI1_Init>
  MX_UART7_Init();
 8004796:	f000 fb61 	bl	8004e5c <MX_UART7_Init>
  MX_TIM4_Init();
 800479a:	f000 fa8f 	bl	8004cbc <MX_TIM4_Init>
  MX_TIM5_Init();
 800479e:	f000 fb0f 	bl	8004dc0 <MX_TIM5_Init>





	TIM4->CCR3 = 0;
 80047a2:	4b88      	ldr	r3, [pc, #544]	; (80049c4 <main+0x2d0>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 0;
 80047a8:	4b86      	ldr	r3, [pc, #536]	; (80049c4 <main+0x2d0>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80047ae:	2108      	movs	r1, #8
 80047b0:	4885      	ldr	r0, [pc, #532]	; (80049c8 <main+0x2d4>)
 80047b2:	f005 fc55 	bl	800a060 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80047b6:	210c      	movs	r1, #12
 80047b8:	4883      	ldr	r0, [pc, #524]	; (80049c8 <main+0x2d4>)
 80047ba:	f005 fc51 	bl	800a060 <HAL_TIM_PWM_Start>


	BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 80047be:	4983      	ldr	r1, [pc, #524]	; (80049cc <main+0x2d8>)
 80047c0:	4883      	ldr	r0, [pc, #524]	; (80049d0 <main+0x2dc>)
 80047c2:	f000 fd1d 	bl	8005200 <BSP_SDRAM_Initialization_Sequence>

	HAL_DMA2D_ConfigDeadTime(&hdma2d, 100);
 80047c6:	2164      	movs	r1, #100	; 0x64
 80047c8:	4882      	ldr	r0, [pc, #520]	; (80049d4 <main+0x2e0>)
 80047ca:	f003 fc97 	bl	80080fc <HAL_DMA2D_ConfigDeadTime>
	HAL_DMA2D_EnableDeadTime(&hdma2d);
 80047ce:	4881      	ldr	r0, [pc, #516]	; (80049d4 <main+0x2e0>)
 80047d0:	f003 fc6a 	bl	80080a8 <HAL_DMA2D_EnableDeadTime>

	Page[0] = SDRAM_BANK_ADDR;
 80047d4:	4b80      	ldr	r3, [pc, #512]	; (80049d8 <main+0x2e4>)
 80047d6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80047da:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 29; i++)
 80047dc:	2301      	movs	r3, #1
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
 80047e0:	e00f      	b.n	8004802 <main+0x10e>
	{
		Page[i] = Page[i-1] + (800*480*3);
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	3b01      	subs	r3, #1
 80047e6:	4a7c      	ldr	r2, [pc, #496]	; (80049d8 <main+0x2e4>)
 80047e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ec:	f503 138c 	add.w	r3, r3, #1146880	; 0x118000
 80047f0:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80047f4:	4978      	ldr	r1, [pc, #480]	; (80049d8 <main+0x2e4>)
 80047f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for(int i = 1; i < 29; i++)
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	3301      	adds	r3, #1
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	2b1c      	cmp	r3, #28
 8004806:	ddec      	ble.n	80047e2 <main+0xee>
	}

	Screens_init();
 8004808:	f7fd f89c 	bl	8001944 <Screens_init>
	HAL_GPIO_WritePin(LTDC_DISP_GPIO_Port, LTDC_DISP_Pin, GPIO_PIN_SET);
 800480c:	2201      	movs	r2, #1
 800480e:	2108      	movs	r1, #8
 8004810:	4872      	ldr	r0, [pc, #456]	; (80049dc <main+0x2e8>)
 8004812:	f004 f87b 	bl	800890c <HAL_GPIO_WritePin>
	PWM_launch = 1;
 8004816:	4b72      	ldr	r3, [pc, #456]	; (80049e0 <main+0x2ec>)
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]


	screen = 1;
 800481c:	4b71      	ldr	r3, [pc, #452]	; (80049e4 <main+0x2f0>)
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]


	HAL_TIM_Base_Start_IT(&htim5);
 8004822:	4871      	ldr	r0, [pc, #452]	; (80049e8 <main+0x2f4>)
 8004824:	f005 fb52 	bl	8009ecc <HAL_TIM_Base_Start_IT>





	ALG_DB.clearing_pressure_filter_1.default_timer = 1000;
 8004828:	4b70      	ldr	r3, [pc, #448]	; (80049ec <main+0x2f8>)
 800482a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800482e:	809a      	strh	r2, [r3, #4]
	ALG_DB.clearing_pressure_filter_2.default_timer = 1000;
 8004830:	4b6e      	ldr	r3, [pc, #440]	; (80049ec <main+0x2f8>)
 8004832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004836:	815a      	strh	r2, [r3, #10]
	ALG_DB.clearing_water_filter_1.default_timer	= 1000;
 8004838:	4b6c      	ldr	r3, [pc, #432]	; (80049ec <main+0x2f8>)
 800483a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800483e:	821a      	strh	r2, [r3, #16]
	ALG_DB.clearing_water_filter_2.default_timer	= 1000;
 8004840:	4b6a      	ldr	r3, [pc, #424]	; (80049ec <main+0x2f8>)
 8004842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004846:	82da      	strh	r2, [r3, #22]
	ALG_DB.clearing_water_filter_3.default_timer	= 1000;
 8004848:	4b68      	ldr	r3, [pc, #416]	; (80049ec <main+0x2f8>)
 800484a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800484e:	839a      	strh	r2, [r3, #28]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(PWM_launch)
 8004850:	4b63      	ldr	r3, [pc, #396]	; (80049e0 <main+0x2ec>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d04f      	beq.n	80048f8 <main+0x204>
	{
		float temp  = brightness_disp;
 8004858:	4b65      	ldr	r3, [pc, #404]	; (80049f0 <main+0x2fc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004864:	edc7 7a08 	vstr	s15, [r7, #32]
		float temp2 = Settings_DB.brightness_disp;
 8004868:	4b52      	ldr	r3, [pc, #328]	; (80049b4 <main+0x2c0>)
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	ee07 3a90 	vmov	s15, r3
 8004870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004874:	edc7 7a07 	vstr	s15, [r7, #28]
		temp2 /= 100;
 8004878:	ed97 7a07 	vldr	s14, [r7, #28]
 800487c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80049f4 <main+0x300>
 8004880:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004884:	edc7 7a07 	vstr	s15, [r7, #28]
		temp *= temp2;
 8004888:	ed97 7a08 	vldr	s14, [r7, #32]
 800488c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004894:	edc7 7a08 	vstr	s15, [r7, #32]
		TIM4->CCR3 = temp;
 8004898:	4b4a      	ldr	r3, [pc, #296]	; (80049c4 <main+0x2d0>)
 800489a:	edd7 7a08 	vldr	s15, [r7, #32]
 800489e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a2:	ee17 2a90 	vmov	r2, s15
 80048a6:	63da      	str	r2, [r3, #60]	; 0x3c

		temp  = brightness_clav;
 80048a8:	4b53      	ldr	r3, [pc, #332]	; (80049f8 <main+0x304>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	ee07 3a90 	vmov	s15, r3
 80048b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b4:	edc7 7a08 	vstr	s15, [r7, #32]
		temp2 = Settings_DB.brightness_clav;
 80048b8:	4b3e      	ldr	r3, [pc, #248]	; (80049b4 <main+0x2c0>)
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	ee07 3a90 	vmov	s15, r3
 80048c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048c4:	edc7 7a07 	vstr	s15, [r7, #28]
		temp2 /= 100;
 80048c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80048cc:	eddf 6a49 	vldr	s13, [pc, #292]	; 80049f4 <main+0x300>
 80048d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048d4:	edc7 7a07 	vstr	s15, [r7, #28]
		temp *= temp2;
 80048d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80048dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80048e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e4:	edc7 7a08 	vstr	s15, [r7, #32]
		TIM4->CCR4 = temp;
 80048e8:	4b36      	ldr	r3, [pc, #216]	; (80049c4 <main+0x2d0>)
 80048ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80048ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f2:	ee17 2a90 	vmov	r2, s15
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40
	} // работа с подсветкой

	if(Settings_DB.FlashWriteFlag)
 80048f8:	4b2e      	ldr	r3, [pc, #184]	; (80049b4 <main+0x2c0>)
 80048fa:	7c1b      	ldrb	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d051      	beq.n	80049a4 <main+0x2b0>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004900:	b672      	cpsid	i
}
 8004902:	bf00      	nop
	{

		__disable_irq (); // запретить прерывания

		HAL_FLASH_Unlock();
 8004904:	f003 fc7e 	bl	8008204 <HAL_FLASH_Unlock>

		FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_1); // стирание сектора 7 (0x08060000)
 8004908:	2100      	movs	r1, #0
 800490a:	2007      	movs	r0, #7
 800490c:	f003 fdec 	bl	80084e8 <FLASH_Erase_Sector>

		while(FLASH->SR & 0x01){;} // Ждем пока снимется флаг BSY=
 8004910:	bf00      	nop
 8004912:	4b3a      	ldr	r3, [pc, #232]	; (80049fc <main+0x308>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f9      	bne.n	8004912 <main+0x21e>

		uint8_t massive[sizeof(Settings_DB)];
		memcpy(&massive, &Settings_DB, sizeof(Settings_DB));
 800491e:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <main+0x2c0>)
 8004920:	463c      	mov	r4, r7
 8004922:	461d      	mov	r5, r3
 8004924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004928:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800492c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		for(flash_i = 0; flash_i < sizeof(Settings_DB); flash_i++)
 8004930:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <main+0x30c>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e01a      	b.n	800496e <main+0x27a>
		{
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x08060000 + flash_i, massive[flash_i]);
 8004938:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <main+0x30c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004940:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 8004944:	4619      	mov	r1, r3
 8004946:	4b2e      	ldr	r3, [pc, #184]	; (8004a00 <main+0x30c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3328      	adds	r3, #40	; 0x28
 800494c:	443b      	add	r3, r7
 800494e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2200      	movs	r2, #0
 8004956:	4698      	mov	r8, r3
 8004958:	4691      	mov	r9, r2
 800495a:	4642      	mov	r2, r8
 800495c:	464b      	mov	r3, r9
 800495e:	2000      	movs	r0, #0
 8004960:	f003 fbfc 	bl	800815c <HAL_FLASH_Program>
		for(flash_i = 0; flash_i < sizeof(Settings_DB); flash_i++)
 8004964:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <main+0x30c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3301      	adds	r3, #1
 800496a:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <main+0x30c>)
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <main+0x30c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b1b      	cmp	r3, #27
 8004974:	d9e0      	bls.n	8004938 <main+0x244>
		}

		HAL_FLASH_Lock();
 8004976:	f003 fc67 	bl	8008248 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800497a:	b662      	cpsie	i
}
 800497c:	bf00      	nop
		__enable_irq ();  // разрешить прерывания

		MX_UART7_Init();
 800497e:	f000 fa6d 	bl	8004e5c <MX_UART7_Init>

		screen 						= 1;
 8004982:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <main+0x2f0>)
 8004984:	2201      	movs	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
		Control_DB.MenuPointer 		= 0;
 8004988:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <main+0x310>)
 800498a:	2200      	movs	r2, #0
 800498c:	801a      	strh	r2, [r3, #0]
		Settings_DB.FlashWriteFlag 	= 0;
 800498e:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <main+0x2c0>)
 8004990:	2200      	movs	r2, #0
 8004992:	741a      	strb	r2, [r3, #16]
		Control_DB.RazrPointer      = 0;
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <main+0x310>)
 8004996:	2200      	movs	r2, #0
 8004998:	805a      	strh	r2, [r3, #2]
		Slave_1.MB_Addr 			= Settings_DB.RS485_ADDR;
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <main+0x2c0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	4b06      	ldr	r3, [pc, #24]	; (80049bc <main+0x2c8>)
 80049a2:	711a      	strb	r2, [r3, #4]

	} // перепись настроек flash

	Set_Screen(screen);
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <main+0x2f0>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fd fd87 	bl	80024bc <Set_Screen>
  {
 80049ae:	e74f      	b.n	8004850 <main+0x15c>
 80049b0:	20000a00 	.word	0x20000a00
 80049b4:	20000afc 	.word	0x20000afc
 80049b8:	08060000 	.word	0x08060000
 80049bc:	20000358 	.word	0x20000358
 80049c0:	40007800 	.word	0x40007800
 80049c4:	40000800 	.word	0x40000800
 80049c8:	20000248 	.word	0x20000248
 80049cc:	20000970 	.word	0x20000970
 80049d0:	2000031c 	.word	0x2000031c
 80049d4:	20000108 	.word	0x20000108
 80049d8:	20000984 	.word	0x20000984
 80049dc:	40021000 	.word	0x40021000
 80049e0:	200009fd 	.word	0x200009fd
 80049e4:	20000018 	.word	0x20000018
 80049e8:	20000290 	.word	0x20000290
 80049ec:	20000a14 	.word	0x20000a14
 80049f0:	20000350 	.word	0x20000350
 80049f4:	42c80000 	.word	0x42c80000
 80049f8:	20000354 	.word	0x20000354
 80049fc:	40023c00 	.word	0x40023c00
 8004a00:	20000980 	.word	0x20000980
 8004a04:	20000b18 	.word	0x20000b18

08004a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b094      	sub	sp, #80	; 0x50
 8004a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a0e:	f107 0320 	add.w	r3, r7, #32
 8004a12:	2230      	movs	r2, #48	; 0x30
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f007 fab8 	bl	800bf8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a1c:	f107 030c 	add.w	r3, r7, #12
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	60da      	str	r2, [r3, #12]
 8004a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <SystemClock_Config+0xd8>)
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	4a2a      	ldr	r2, [pc, #168]	; (8004ae0 <SystemClock_Config+0xd8>)
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3c:	4b28      	ldr	r3, [pc, #160]	; (8004ae0 <SystemClock_Config+0xd8>)
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	4b25      	ldr	r3, [pc, #148]	; (8004ae4 <SystemClock_Config+0xdc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a24      	ldr	r2, [pc, #144]	; (8004ae4 <SystemClock_Config+0xdc>)
 8004a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <SystemClock_Config+0xdc>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004a78:	2304      	movs	r3, #4
 8004a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004a7c:	23b4      	movs	r3, #180	; 0xb4
 8004a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a80:	2302      	movs	r3, #2
 8004a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004a84:	2304      	movs	r3, #4
 8004a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a88:	f107 0320 	add.w	r3, r7, #32
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f004 fa83 	bl	8008f98 <HAL_RCC_OscConfig>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004a98:	f000 fc10 	bl	80052bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004a9c:	f004 fa2c 	bl	8008ef8 <HAL_PWREx_EnableOverDrive>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8004aa6:	f000 fc09 	bl	80052bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004aaa:	230f      	movs	r3, #15
 8004aac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004ab6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ac0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ac2:	f107 030c 	add.w	r3, r7, #12
 8004ac6:	2105      	movs	r1, #5
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f004 fcdd 	bl	8009488 <HAL_RCC_ClockConfig>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004ad4:	f000 fbf2 	bl	80052bc <Error_Handler>
  }
}
 8004ad8:	bf00      	nop
 8004ada:	3750      	adds	r7, #80	; 0x50
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	40007000 	.word	0x40007000

08004ae8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8004aec:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <MX_DMA2D_Init+0x5c>)
 8004aee:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <MX_DMA2D_Init+0x60>)
 8004af0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8004af2:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <MX_DMA2D_Init+0x5c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8004af8:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <MX_DMA2D_Init+0x5c>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8004afe:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <MX_DMA2D_Init+0x5c>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8004b04:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <MX_DMA2D_Init+0x5c>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <MX_DMA2D_Init+0x5c>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <MX_DMA2D_Init+0x5c>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <MX_DMA2D_Init+0x5c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8004b1c:	4809      	ldr	r0, [pc, #36]	; (8004b44 <MX_DMA2D_Init+0x5c>)
 8004b1e:	f003 f9e8 	bl	8007ef2 <HAL_DMA2D_Init>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8004b28:	f000 fbc8 	bl	80052bc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	4805      	ldr	r0, [pc, #20]	; (8004b44 <MX_DMA2D_Init+0x5c>)
 8004b30:	f003 fa28 	bl	8007f84 <HAL_DMA2D_ConfigLayer>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8004b3a:	f000 fbbf 	bl	80052bc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8004b3e:	bf00      	nop
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000108 	.word	0x20000108
 8004b48:	4002b000 	.word	0x4002b000

08004b4c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08e      	sub	sp, #56	; 0x38
 8004b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8004b52:	1d3b      	adds	r3, r7, #4
 8004b54:	2234      	movs	r2, #52	; 0x34
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f007 fa17 	bl	800bf8c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8004b5e:	4b3a      	ldr	r3, [pc, #232]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004b60:	4a3a      	ldr	r2, [pc, #232]	; (8004c4c <MX_LTDC_Init+0x100>)
 8004b62:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004b64:	4b38      	ldr	r3, [pc, #224]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004b6a:	4b37      	ldr	r3, [pc, #220]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004b70:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004b76:	4b34      	ldr	r3, [pc, #208]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 47;
 8004b7c:	4b32      	ldr	r3, [pc, #200]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004b7e:	222f      	movs	r2, #47	; 0x2f
 8004b80:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8004b82:	4b31      	ldr	r3, [pc, #196]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 87;
 8004b88:	4b2f      	ldr	r3, [pc, #188]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004b8a:	2257      	movs	r2, #87	; 0x57
 8004b8c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 8004b8e:	4b2e      	ldr	r3, [pc, #184]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004b90:	221f      	movs	r2, #31
 8004b92:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 887;
 8004b94:	4b2c      	ldr	r3, [pc, #176]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004b96:	f240 3277 	movw	r2, #887	; 0x377
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 511;
 8004b9c:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004b9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 927;
 8004ba4:	4b28      	ldr	r3, [pc, #160]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004ba6:	f240 329f 	movw	r2, #927	; 0x39f
 8004baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 524;
 8004bac:	4b26      	ldr	r3, [pc, #152]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004bae:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8004bb4:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8004bbc:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8004bc4:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8004bcc:	481e      	ldr	r0, [pc, #120]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004bce:	f003 feb7 	bl	8008940 <HAL_LTDC_Init>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8004bd8:	f000 fb70 	bl	80052bc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8004be0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004be4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8004bea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004bee:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8004bf4:	23ff      	movs	r3, #255	; 0xff
 8004bf6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004bfc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004c00:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004c02:	2307      	movs	r3, #7
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8004c06:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8004c0c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8004c12:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004c16:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004c2a:	1d3b      	adds	r3, r7, #4
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4805      	ldr	r0, [pc, #20]	; (8004c48 <MX_LTDC_Init+0xfc>)
 8004c32:	f003 ff55 	bl	8008ae0 <HAL_LTDC_ConfigLayer>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8004c3c:	f000 fb3e 	bl	80052bc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8004c40:	bf00      	nop
 8004c42:	3738      	adds	r7, #56	; 0x38
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20000148 	.word	0x20000148
 8004c4c:	40016800 	.word	0x40016800

08004c50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004c54:	4b17      	ldr	r3, [pc, #92]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c56:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <MX_SPI1_Init+0x68>)
 8004c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004c5a:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c62:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c68:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c6e:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004c82:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c84:	2218      	movs	r2, #24
 8004c86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004c9a:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004c9c:	220a      	movs	r2, #10
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ca0:	4804      	ldr	r0, [pc, #16]	; (8004cb4 <MX_SPI1_Init+0x64>)
 8004ca2:	f005 f83a 	bl	8009d1a <HAL_SPI_Init>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004cac:	f000 fb06 	bl	80052bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	200001f0 	.word	0x200001f0
 8004cb8:	40013000 	.word	0x40013000

08004cbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08e      	sub	sp, #56	; 0x38
 8004cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	605a      	str	r2, [r3, #4]
 8004ccc:	609a      	str	r2, [r3, #8]
 8004cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cd0:	f107 0320 	add.w	r3, r7, #32
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cda:	1d3b      	adds	r3, r7, #4
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	611a      	str	r2, [r3, #16]
 8004ce8:	615a      	str	r2, [r3, #20]
 8004cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004cec:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004cee:	4a33      	ldr	r2, [pc, #204]	; (8004dbc <MX_TIM4_Init+0x100>)
 8004cf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004cf2:	4b31      	ldr	r3, [pc, #196]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf8:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8004cfe:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004d00:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d06:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d0c:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004d12:	4829      	ldr	r0, [pc, #164]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004d14:	f005 f88a 	bl	8009e2c <HAL_TIM_Base_Init>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8004d1e:	f000 facd 	bl	80052bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4822      	ldr	r0, [pc, #136]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004d30:	f005 fc28 	bl	800a584 <HAL_TIM_ConfigClockSource>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004d3a:	f000 fabf 	bl	80052bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004d3e:	481e      	ldr	r0, [pc, #120]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004d40:	f005 f934 	bl	8009fac <HAL_TIM_PWM_Init>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004d4a:	f000 fab7 	bl	80052bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d56:	f107 0320 	add.w	r3, r7, #32
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4816      	ldr	r0, [pc, #88]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004d5e:	f006 f81b 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004d68:	f000 faa8 	bl	80052bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d6c:	2360      	movs	r3, #96	; 0x60
 8004d6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d7c:	1d3b      	adds	r3, r7, #4
 8004d7e:	2208      	movs	r2, #8
 8004d80:	4619      	mov	r1, r3
 8004d82:	480d      	ldr	r0, [pc, #52]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004d84:	f005 fb3c 	bl	800a400 <HAL_TIM_PWM_ConfigChannel>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8004d8e:	f000 fa95 	bl	80052bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004d92:	1d3b      	adds	r3, r7, #4
 8004d94:	220c      	movs	r2, #12
 8004d96:	4619      	mov	r1, r3
 8004d98:	4807      	ldr	r0, [pc, #28]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004d9a:	f005 fb31 	bl	800a400 <HAL_TIM_PWM_ConfigChannel>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8004da4:	f000 fa8a 	bl	80052bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004da8:	4803      	ldr	r0, [pc, #12]	; (8004db8 <MX_TIM4_Init+0xfc>)
 8004daa:	f000 fc53 	bl	8005654 <HAL_TIM_MspPostInit>

}
 8004dae:	bf00      	nop
 8004db0:	3738      	adds	r7, #56	; 0x38
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000248 	.word	0x20000248
 8004dbc:	40000800 	.word	0x40000800

08004dc0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dc6:	f107 0308 	add.w	r3, r7, #8
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	609a      	str	r2, [r3, #8]
 8004dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004ddc:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <MX_TIM5_Init+0x90>)
 8004dde:	4a1d      	ldr	r2, [pc, #116]	; (8004e54 <MX_TIM5_Init+0x94>)
 8004de0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004de2:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <MX_TIM5_Init+0x90>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de8:	4b19      	ldr	r3, [pc, #100]	; (8004e50 <MX_TIM5_Init+0x90>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90000;
 8004dee:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <MX_TIM5_Init+0x90>)
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <MX_TIM5_Init+0x98>)
 8004df2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004df4:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <MX_TIM5_Init+0x90>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <MX_TIM5_Init+0x90>)
 8004dfc:	2280      	movs	r2, #128	; 0x80
 8004dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004e00:	4813      	ldr	r0, [pc, #76]	; (8004e50 <MX_TIM5_Init+0x90>)
 8004e02:	f005 f813 	bl	8009e2c <HAL_TIM_Base_Init>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8004e0c:	f000 fa56 	bl	80052bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004e16:	f107 0308 	add.w	r3, r7, #8
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	480c      	ldr	r0, [pc, #48]	; (8004e50 <MX_TIM5_Init+0x90>)
 8004e1e:	f005 fbb1 	bl	800a584 <HAL_TIM_ConfigClockSource>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8004e28:	f000 fa48 	bl	80052bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004e34:	463b      	mov	r3, r7
 8004e36:	4619      	mov	r1, r3
 8004e38:	4805      	ldr	r0, [pc, #20]	; (8004e50 <MX_TIM5_Init+0x90>)
 8004e3a:	f005 ffad 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8004e44:	f000 fa3a 	bl	80052bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004e48:	bf00      	nop
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20000290 	.word	0x20000290
 8004e54:	40000c00 	.word	0x40000c00
 8004e58:	00015f90 	.word	0x00015f90

08004e5c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */

	  huart7.Instance = UART7;
 8004e60:	4b28      	ldr	r3, [pc, #160]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004e62:	4a29      	ldr	r2, [pc, #164]	; (8004f08 <MX_UART7_Init+0xac>)
 8004e64:	601a      	str	r2, [r3, #0]

	  huart7.Init.BaudRate = Settings_DB.RS485_Speed;
 8004e66:	4b29      	ldr	r3, [pc, #164]	; (8004f0c <MX_UART7_Init+0xb0>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4b25      	ldr	r3, [pc, #148]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004e6e:	605a      	str	r2, [r3, #4]

	  if(Settings_DB.RS485_Parity)
 8004e70:	4b26      	ldr	r3, [pc, #152]	; (8004f0c <MX_UART7_Init+0xb0>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <MX_UART7_Init+0x26>
	  {
		  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8004e78:	4b22      	ldr	r3, [pc, #136]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e7e:	609a      	str	r2, [r3, #8]
 8004e80:	e002      	b.n	8004e88 <MX_UART7_Init+0x2c>
	  }
	  else
	  {
		  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004e82:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	609a      	str	r2, [r3, #8]
	  }

	  if(Settings_DB.RS485_Stops == 1)
 8004e88:	4b20      	ldr	r3, [pc, #128]	; (8004f0c <MX_UART7_Init+0xb0>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d103      	bne.n	8004e98 <MX_UART7_Init+0x3c>
	  {
		  huart7.Init.StopBits = UART_STOPBITS_1;
 8004e90:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	e003      	b.n	8004ea0 <MX_UART7_Init+0x44>
	  }
	  else
	  {
		  huart7.Init.StopBits = UART_STOPBITS_2;
 8004e98:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e9e:	60da      	str	r2, [r3, #12]
	  }

	  switch(Settings_DB.RS485_Parity)
 8004ea0:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <MX_UART7_Init+0xb0>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d00f      	beq.n	8004ec8 <MX_UART7_Init+0x6c>
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	dc12      	bgt.n	8004ed2 <MX_UART7_Init+0x76>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <MX_UART7_Init+0x5a>
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d004      	beq.n	8004ebe <MX_UART7_Init+0x62>
 8004eb4:	e00d      	b.n	8004ed2 <MX_UART7_Init+0x76>
	  {
	  	  case 0:
	  		  huart7.Init.Parity = UART_PARITY_NONE;
 8004eb6:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	611a      	str	r2, [r3, #16]
	      break;
 8004ebc:	e009      	b.n	8004ed2 <MX_UART7_Init+0x76>
	  	  case 1:
	  		  huart7.Init.Parity = UART_PARITY_EVEN;
 8004ebe:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ec4:	611a      	str	r2, [r3, #16]
	      break;
 8004ec6:	e004      	b.n	8004ed2 <MX_UART7_Init+0x76>
	  	  case 2:
	  		  huart7.Init.Parity = UART_PARITY_ODD;
 8004ec8:	4b0e      	ldr	r3, [pc, #56]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004eca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004ece:	611a      	str	r2, [r3, #16]
	      break;
 8004ed0:	bf00      	nop
	  }

	  huart7.Init.Mode = UART_MODE_TX_RX;
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004ed4:	220c      	movs	r2, #12
 8004ed6:	615a      	str	r2, [r3, #20]
	  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	619a      	str	r2, [r3, #24]
	  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004ee4:	4807      	ldr	r0, [pc, #28]	; (8004f04 <MX_UART7_Init+0xa8>)
 8004ee6:	f005 ffe7 	bl	800aeb8 <HAL_UART_Init>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <MX_UART7_Init+0x98>
	  {
	    Error_Handler();
 8004ef0:	f000 f9e4 	bl	80052bc <Error_Handler>
	  }

  /* USER CODE BEGIN UART7_Init 2 */
  UART7->CR1 |= 0x20;
 8004ef4:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <MX_UART7_Init+0xac>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a03      	ldr	r2, [pc, #12]	; (8004f08 <MX_UART7_Init+0xac>)
 8004efa:	f043 0320 	orr.w	r3, r3, #32
 8004efe:	60d3      	str	r3, [r2, #12]
  /* USER CODE END UART7_Init 2 */

}
 8004f00:	bf00      	nop
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	200002d8 	.word	0x200002d8
 8004f08:	40007800 	.word	0x40007800
 8004f0c:	20000afc 	.word	0x20000afc

08004f10 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	605a      	str	r2, [r3, #4]
 8004f1e:	609a      	str	r2, [r3, #8]
 8004f20:	60da      	str	r2, [r3, #12]
 8004f22:	611a      	str	r2, [r3, #16]
 8004f24:	615a      	str	r2, [r3, #20]
 8004f26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8004f28:	4b20      	ldr	r3, [pc, #128]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f2a:	4a21      	ldr	r2, [pc, #132]	; (8004fb0 <MX_FMC_Init+0xa0>)
 8004f2c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8004f40:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f42:	2210      	movs	r2, #16
 8004f44:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004f46:	4b19      	ldr	r3, [pc, #100]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f48:	2240      	movs	r2, #64	; 0x40
 8004f4a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8004f4c:	4b17      	ldr	r3, [pc, #92]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f52:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004f54:	4b15      	ldr	r3, [pc, #84]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8004f5a:	4b14      	ldr	r3, [pc, #80]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f60:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8004f62:	4b12      	ldr	r3, [pc, #72]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8004f6a:	4b10      	ldr	r3, [pc, #64]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f70:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8004f72:	2302      	movs	r3, #2
 8004f74:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8004f76:	2308      	movs	r3, #8
 8004f78:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 5;
 8004f7a:	2305      	movs	r3, #5
 8004f7c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 8;
 8004f7e:	2308      	movs	r3, #8
 8004f80:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 8004f82:	2304      	movs	r3, #4
 8004f84:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8004f86:	2302      	movs	r3, #2
 8004f88:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8004f8e:	1d3b      	adds	r3, r7, #4
 8004f90:	4619      	mov	r1, r3
 8004f92:	4806      	ldr	r0, [pc, #24]	; (8004fac <MX_FMC_Init+0x9c>)
 8004f94:	f004 fe58 	bl	8009c48 <HAL_SDRAM_Init>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8004f9e:	f000 f98d 	bl	80052bc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8004fa2:	bf00      	nop
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	2000031c 	.word	0x2000031c
 8004fb0:	a0000140 	.word	0xa0000140

08004fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b090      	sub	sp, #64	; 0x40
 8004fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	609a      	str	r2, [r3, #8]
 8004fc6:	60da      	str	r2, [r3, #12]
 8004fc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fca:	2300      	movs	r3, #0
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fce:	4b84      	ldr	r3, [pc, #528]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	4a83      	ldr	r2, [pc, #524]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8004fd4:	f043 0310 	orr.w	r3, r3, #16
 8004fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fda:	4b81      	ldr	r3, [pc, #516]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fea:	4b7d      	ldr	r3, [pc, #500]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	4a7c      	ldr	r2, [pc, #496]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff6:	4b7a      	ldr	r3, [pc, #488]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005002:	2300      	movs	r3, #0
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	4b76      	ldr	r3, [pc, #472]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	4a75      	ldr	r2, [pc, #468]	; (80051e0 <MX_GPIO_Init+0x22c>)
 800500c:	f043 0320 	orr.w	r3, r3, #32
 8005010:	6313      	str	r3, [r2, #48]	; 0x30
 8005012:	4b73      	ldr	r3, [pc, #460]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	623b      	str	r3, [r7, #32]
 800501c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	4b6f      	ldr	r3, [pc, #444]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	4a6e      	ldr	r2, [pc, #440]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502c:	6313      	str	r3, [r2, #48]	; 0x30
 800502e:	4b6c      	ldr	r3, [pc, #432]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	4b68      	ldr	r3, [pc, #416]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	4a67      	ldr	r2, [pc, #412]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005044:	f043 0304 	orr.w	r3, r3, #4
 8005048:	6313      	str	r3, [r2, #48]	; 0x30
 800504a:	4b65      	ldr	r3, [pc, #404]	; (80051e0 <MX_GPIO_Init+0x22c>)
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	4b61      	ldr	r3, [pc, #388]	; (80051e0 <MX_GPIO_Init+0x22c>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	4a60      	ldr	r2, [pc, #384]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6313      	str	r3, [r2, #48]	; 0x30
 8005066:	4b5e      	ldr	r3, [pc, #376]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	4b5a      	ldr	r3, [pc, #360]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	4a59      	ldr	r2, [pc, #356]	; (80051e0 <MX_GPIO_Init+0x22c>)
 800507c:	f043 0302 	orr.w	r3, r3, #2
 8005080:	6313      	str	r3, [r2, #48]	; 0x30
 8005082:	4b57      	ldr	r3, [pc, #348]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	4b53      	ldr	r3, [pc, #332]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4a52      	ldr	r2, [pc, #328]	; (80051e0 <MX_GPIO_Init+0x22c>)
 8005098:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800509c:	6313      	str	r3, [r2, #48]	; 0x30
 800509e:	4b50      	ldr	r3, [pc, #320]	; (80051e0 <MX_GPIO_Init+0x22c>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	4b4c      	ldr	r3, [pc, #304]	; (80051e0 <MX_GPIO_Init+0x22c>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	4a4b      	ldr	r2, [pc, #300]	; (80051e0 <MX_GPIO_Init+0x22c>)
 80050b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b8:	6313      	str	r3, [r2, #48]	; 0x30
 80050ba:	4b49      	ldr	r3, [pc, #292]	; (80051e0 <MX_GPIO_Init+0x22c>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	607b      	str	r3, [r7, #4]
 80050ca:	4b45      	ldr	r3, [pc, #276]	; (80051e0 <MX_GPIO_Init+0x22c>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	4a44      	ldr	r2, [pc, #272]	; (80051e0 <MX_GPIO_Init+0x22c>)
 80050d0:	f043 0308 	orr.w	r3, r3, #8
 80050d4:	6313      	str	r3, [r2, #48]	; 0x30
 80050d6:	4b42      	ldr	r3, [pc, #264]	; (80051e0 <MX_GPIO_Init+0x22c>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	607b      	str	r3, [r7, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	4b3e      	ldr	r3, [pc, #248]	; (80051e0 <MX_GPIO_Init+0x22c>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	4a3d      	ldr	r2, [pc, #244]	; (80051e0 <MX_GPIO_Init+0x22c>)
 80050ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050f0:	6313      	str	r3, [r2, #48]	; 0x30
 80050f2:	4b3b      	ldr	r3, [pc, #236]	; (80051e0 <MX_GPIO_Init+0x22c>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_DISP_GPIO_Port, LTDC_DISP_Pin, GPIO_PIN_RESET);
 80050fe:	2200      	movs	r2, #0
 8005100:	2108      	movs	r1, #8
 8005102:	4838      	ldr	r0, [pc, #224]	; (80051e4 <MX_GPIO_Init+0x230>)
 8005104:	f003 fc02 	bl	800890c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485DE_GPIO_Port, RS485DE_Pin, GPIO_PIN_RESET);
 8005108:	2200      	movs	r2, #0
 800510a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800510e:	4836      	ldr	r0, [pc, #216]	; (80051e8 <MX_GPIO_Init+0x234>)
 8005110:	f003 fbfc 	bl	800890c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8005114:	2201      	movs	r2, #1
 8005116:	2110      	movs	r1, #16
 8005118:	4834      	ldr	r0, [pc, #208]	; (80051ec <MX_GPIO_Init+0x238>)
 800511a:	f003 fbf7 	bl	800890c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_DISP_Pin */
  GPIO_InitStruct.Pin = LTDC_DISP_Pin;
 800511e:	2308      	movs	r3, #8
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005122:	2301      	movs	r3, #1
 8005124:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005126:	2300      	movs	r3, #0
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800512a:	2300      	movs	r3, #0
 800512c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LTDC_DISP_GPIO_Port, &GPIO_InitStruct);
 800512e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005132:	4619      	mov	r1, r3
 8005134:	482b      	ldr	r0, [pc, #172]	; (80051e4 <MX_GPIO_Init+0x230>)
 8005136:	f003 fa25 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485DE_Pin */
  GPIO_InitStruct.Pin = RS485DE_Pin;
 800513a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005140:	2301      	movs	r3, #1
 8005142:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	2300      	movs	r3, #0
 8005146:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005148:	2303      	movs	r3, #3
 800514a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(RS485DE_GPIO_Port, &GPIO_InitStruct);
 800514c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005150:	4619      	mov	r1, r3
 8005152:	4825      	ldr	r0, [pc, #148]	; (80051e8 <MX_GPIO_Init+0x234>)
 8005154:	f003 fa16 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8005158:	2310      	movs	r3, #16
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800515c:	2301      	movs	r3, #1
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005160:	2301      	movs	r3, #1
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005164:	2303      	movs	r3, #3
 8005166:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8005168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800516c:	4619      	mov	r1, r3
 800516e:	481f      	ldr	r0, [pc, #124]	; (80051ec <MX_GPIO_Init+0x238>)
 8005170:	f003 fa08 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 8005174:	2320      	movs	r3, #32
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005178:	2300      	movs	r3, #0
 800517a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800517c:	2301      	movs	r3, #1
 800517e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8005180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005184:	4619      	mov	r1, r3
 8005186:	481a      	ldr	r0, [pc, #104]	; (80051f0 <MX_GPIO_Init+0x23c>)
 8005188:	f003 f9fc 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin BUTTON_4_Pin BUTTON_5_Pin
                           BUTTON_6_Pin BUTTON_7_Pin BUTTON_8_Pin BUTTON_16_Pin
                           BUTTON_15_Pin BUTTON_14_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_4_Pin|BUTTON_5_Pin
 800518c:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BUTTON_6_Pin|BUTTON_7_Pin|BUTTON_8_Pin|BUTTON_16_Pin
                          |BUTTON_15_Pin|BUTTON_14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005192:	2300      	movs	r3, #0
 8005194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005196:	2301      	movs	r3, #1
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800519a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800519e:	4619      	mov	r1, r3
 80051a0:	4814      	ldr	r0, [pc, #80]	; (80051f4 <MX_GPIO_Init+0x240>)
 80051a2:	f003 f9ef 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_12_Pin BUTTON_11_Pin BUTTON_10_Pin BUTTON_9_Pin */
  GPIO_InitStruct.Pin = BUTTON_12_Pin|BUTTON_11_Pin|BUTTON_10_Pin|BUTTON_9_Pin;
 80051a6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051ac:	2300      	movs	r3, #0
 80051ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051b0:	2301      	movs	r3, #1
 80051b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051b8:	4619      	mov	r1, r3
 80051ba:	480f      	ldr	r0, [pc, #60]	; (80051f8 <MX_GPIO_Init+0x244>)
 80051bc:	f003 f9e2 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_13_Pin */
  GPIO_InitStruct.Pin = BUTTON_13_Pin;
 80051c0:	2301      	movs	r3, #1
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051c4:	2300      	movs	r3, #0
 80051c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051c8:	2301      	movs	r3, #1
 80051ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_13_GPIO_Port, &GPIO_InitStruct);
 80051cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051d0:	4619      	mov	r1, r3
 80051d2:	480a      	ldr	r0, [pc, #40]	; (80051fc <MX_GPIO_Init+0x248>)
 80051d4:	f003 f9d6 	bl	8008584 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80051d8:	bf00      	nop
 80051da:	3740      	adds	r7, #64	; 0x40
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40021400 	.word	0x40021400
 80051ec:	40020000 	.word	0x40020000
 80051f0:	40022400 	.word	0x40022400
 80051f4:	40021c00 	.word	0x40021c00
 80051f8:	40020800 	.word	0x40020800
 80051fc:	40022000 	.word	0x40022000

08005200 <BSP_SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */

void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command){
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2210      	movs	r2, #16
 8005218:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2201      	movs	r2, #1
 800521e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8005226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f004 fd3f 	bl	8009cb0 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005232:	2001      	movs	r0, #1
 8005234:	f002 fc96 	bl	8007b64 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2202      	movs	r2, #2
 800523c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2210      	movs	r2, #16
 8005242:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2201      	movs	r2, #1
 8005248:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2200      	movs	r2, #0
 800524e:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8005250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f004 fd2a 	bl	8009cb0 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2203      	movs	r2, #3
 8005260:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2210      	movs	r2, #16
 8005266:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2208      	movs	r2, #8
 800526c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2200      	movs	r2, #0
 8005272:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8005274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f004 fd18 	bl	8009cb0 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8005280:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005284:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2204      	movs	r2, #4
 800528a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2210      	movs	r2, #16
 8005290:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2201      	movs	r2, #1
 8005296:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800529e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f004 fd03 	bl	8009cb0 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  //hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
  hsdram->Instance->SDRTR = ((uint32_t)(64000*65/4096-20) << 1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80052b2:	615a      	str	r2, [r3, #20]
};
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80052c0:	b672      	cpsid	i
}
 80052c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052c4:	e7fe      	b.n	80052c4 <Error_Handler+0x8>
	...

080052c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ce:	2300      	movs	r3, #0
 80052d0:	607b      	str	r3, [r7, #4]
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <HAL_MspInit+0x4c>)
 80052d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d6:	4a0f      	ldr	r2, [pc, #60]	; (8005314 <HAL_MspInit+0x4c>)
 80052d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052dc:	6453      	str	r3, [r2, #68]	; 0x44
 80052de:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <HAL_MspInit+0x4c>)
 80052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052ea:	2300      	movs	r3, #0
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <HAL_MspInit+0x4c>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	4a08      	ldr	r2, [pc, #32]	; (8005314 <HAL_MspInit+0x4c>)
 80052f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f8:	6413      	str	r3, [r2, #64]	; 0x40
 80052fa:	4b06      	ldr	r3, [pc, #24]	; (8005314 <HAL_MspInit+0x4c>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40023800 	.word	0x40023800

08005318 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a0b      	ldr	r2, [pc, #44]	; (8005354 <HAL_DMA2D_MspInit+0x3c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d10d      	bne.n	8005346 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <HAL_DMA2D_MspInit+0x40>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <HAL_DMA2D_MspInit+0x40>)
 8005334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005338:	6313      	str	r3, [r2, #48]	; 0x30
 800533a:	4b07      	ldr	r3, [pc, #28]	; (8005358 <HAL_DMA2D_MspInit+0x40>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	4002b000 	.word	0x4002b000
 8005358:	40023800 	.word	0x40023800

0800535c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b09a      	sub	sp, #104	; 0x68
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005364:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005378:	2230      	movs	r2, #48	; 0x30
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f006 fe05 	bl	800bf8c <memset>
  if(hltdc->Instance==LTDC)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a69      	ldr	r2, [pc, #420]	; (800552c <HAL_LTDC_MspInit+0x1d0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	f040 80ca 	bne.w	8005522 <HAL_LTDC_MspInit+0x1c6>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800538e:	2308      	movs	r3, #8
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8005392:	2332      	movs	r3, #50	; 0x32
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8005396:	2302      	movs	r3, #2
 8005398:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800539a:	2300      	movs	r3, #0
 800539c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800539e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a2:	4618      	mov	r0, r3
 80053a4:	f004 fa90 	bl	80098c8 <HAL_RCCEx_PeriphCLKConfig>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80053ae:	f7ff ff85 	bl	80052bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80053b2:	2300      	movs	r3, #0
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	4b5e      	ldr	r3, [pc, #376]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	4a5d      	ldr	r2, [pc, #372]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 80053bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053c0:	6453      	str	r3, [r2, #68]	; 0x44
 80053c2:	4b5b      	ldr	r3, [pc, #364]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 80053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053ca:	623b      	str	r3, [r7, #32]
 80053cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	4b57      	ldr	r3, [pc, #348]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	4a56      	ldr	r2, [pc, #344]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 80053d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053dc:	6313      	str	r3, [r2, #48]	; 0x30
 80053de:	4b54      	ldr	r3, [pc, #336]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053ea:	2300      	movs	r3, #0
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	4b50      	ldr	r3, [pc, #320]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	4a4f      	ldr	r2, [pc, #316]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 80053f4:	f043 0320 	orr.w	r3, r3, #32
 80053f8:	6313      	str	r3, [r2, #48]	; 0x30
 80053fa:	4b4d      	ldr	r3, [pc, #308]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	4b49      	ldr	r3, [pc, #292]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	4a48      	ldr	r2, [pc, #288]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 8005410:	f043 0302 	orr.w	r3, r3, #2
 8005414:	6313      	str	r3, [r2, #48]	; 0x30
 8005416:	4b46      	ldr	r3, [pc, #280]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005422:	2300      	movs	r3, #0
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	4b42      	ldr	r3, [pc, #264]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	4a41      	ldr	r2, [pc, #260]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 800542c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005430:	6313      	str	r3, [r2, #48]	; 0x30
 8005432:	4b3f      	ldr	r3, [pc, #252]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	4b3b      	ldr	r3, [pc, #236]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	4a3a      	ldr	r2, [pc, #232]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 8005448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800544c:	6313      	str	r3, [r2, #48]	; 0x30
 800544e:	4b38      	ldr	r3, [pc, #224]	; (8005530 <HAL_LTDC_MspInit+0x1d4>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
    PK3     ------> LTDC_B4
    PK4     ------> LTDC_B5
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800545a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800545e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005460:	2302      	movs	r3, #2
 8005462:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005464:	2300      	movs	r3, #0
 8005466:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005468:	2303      	movs	r3, #3
 800546a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800546c:	230e      	movs	r3, #14
 800546e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005470:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005474:	4619      	mov	r1, r3
 8005476:	482f      	ldr	r0, [pc, #188]	; (8005534 <HAL_LTDC_MspInit+0x1d8>)
 8005478:	f003 f884 	bl	8008584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800547c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005480:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005482:	2302      	movs	r3, #2
 8005484:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005486:	2300      	movs	r3, #0
 8005488:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800548a:	2303      	movs	r3, #3
 800548c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800548e:	230e      	movs	r3, #14
 8005490:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005492:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005496:	4619      	mov	r1, r3
 8005498:	4827      	ldr	r0, [pc, #156]	; (8005538 <HAL_LTDC_MspInit+0x1dc>)
 800549a:	f003 f873 	bl	8008584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800549e:	2302      	movs	r3, #2
 80054a0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a2:	2302      	movs	r3, #2
 80054a4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054aa:	2303      	movs	r3, #3
 80054ac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80054ae:	2309      	movs	r3, #9
 80054b0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054b6:	4619      	mov	r1, r3
 80054b8:	4820      	ldr	r0, [pc, #128]	; (800553c <HAL_LTDC_MspInit+0x1e0>)
 80054ba:	f003 f863 	bl	8008584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80054be:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80054c2:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c4:	2302      	movs	r3, #2
 80054c6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054cc:	2303      	movs	r3, #3
 80054ce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80054d0:	230e      	movs	r3, #14
 80054d2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80054d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054d8:	4619      	mov	r1, r3
 80054da:	4819      	ldr	r0, [pc, #100]	; (8005540 <HAL_LTDC_MspInit+0x1e4>)
 80054dc:	f003 f852 	bl	8008584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80054e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e6:	2302      	movs	r3, #2
 80054e8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ee:	2303      	movs	r3, #3
 80054f0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80054f2:	230e      	movs	r3, #14
 80054f4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054fa:	4619      	mov	r1, r3
 80054fc:	480f      	ldr	r0, [pc, #60]	; (800553c <HAL_LTDC_MspInit+0x1e0>)
 80054fe:	f003 f841 	bl	8008584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005502:	237f      	movs	r3, #127	; 0x7f
 8005504:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005506:	2302      	movs	r3, #2
 8005508:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550a:	2300      	movs	r3, #0
 800550c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800550e:	2303      	movs	r3, #3
 8005510:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005512:	230e      	movs	r3, #14
 8005514:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005516:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800551a:	4619      	mov	r1, r3
 800551c:	4809      	ldr	r0, [pc, #36]	; (8005544 <HAL_LTDC_MspInit+0x1e8>)
 800551e:	f003 f831 	bl	8008584 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8005522:	bf00      	nop
 8005524:	3768      	adds	r7, #104	; 0x68
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40016800 	.word	0x40016800
 8005530:	40023800 	.word	0x40023800
 8005534:	40022000 	.word	0x40022000
 8005538:	40021400 	.word	0x40021400
 800553c:	40020400 	.word	0x40020400
 8005540:	40022400 	.word	0x40022400
 8005544:	40022800 	.word	0x40022800

08005548 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	; 0x28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005550:	f107 0314 	add.w	r3, r7, #20
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a19      	ldr	r2, [pc, #100]	; (80055cc <HAL_SPI_MspInit+0x84>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d12b      	bne.n	80055c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	4b18      	ldr	r3, [pc, #96]	; (80055d0 <HAL_SPI_MspInit+0x88>)
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	4a17      	ldr	r2, [pc, #92]	; (80055d0 <HAL_SPI_MspInit+0x88>)
 8005574:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005578:	6453      	str	r3, [r2, #68]	; 0x44
 800557a:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <HAL_SPI_MspInit+0x88>)
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <HAL_SPI_MspInit+0x88>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558e:	4a10      	ldr	r2, [pc, #64]	; (80055d0 <HAL_SPI_MspInit+0x88>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	6313      	str	r3, [r2, #48]	; 0x30
 8005596:	4b0e      	ldr	r3, [pc, #56]	; (80055d0 <HAL_SPI_MspInit+0x88>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80055a2:	23e0      	movs	r3, #224	; 0xe0
 80055a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a6:	2302      	movs	r3, #2
 80055a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ae:	2303      	movs	r3, #3
 80055b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80055b2:	2305      	movs	r3, #5
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b6:	f107 0314 	add.w	r3, r7, #20
 80055ba:	4619      	mov	r1, r3
 80055bc:	4805      	ldr	r0, [pc, #20]	; (80055d4 <HAL_SPI_MspInit+0x8c>)
 80055be:	f002 ffe1 	bl	8008584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80055c2:	bf00      	nop
 80055c4:	3728      	adds	r7, #40	; 0x28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40013000 	.word	0x40013000
 80055d0:	40023800 	.word	0x40023800
 80055d4:	40020000 	.word	0x40020000

080055d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a18      	ldr	r2, [pc, #96]	; (8005648 <HAL_TIM_Base_MspInit+0x70>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d10e      	bne.n	8005608 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	4b17      	ldr	r3, [pc, #92]	; (800564c <HAL_TIM_Base_MspInit+0x74>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	4a16      	ldr	r2, [pc, #88]	; (800564c <HAL_TIM_Base_MspInit+0x74>)
 80055f4:	f043 0304 	orr.w	r3, r3, #4
 80055f8:	6413      	str	r3, [r2, #64]	; 0x40
 80055fa:	4b14      	ldr	r3, [pc, #80]	; (800564c <HAL_TIM_Base_MspInit+0x74>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005606:	e01a      	b.n	800563e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a10      	ldr	r2, [pc, #64]	; (8005650 <HAL_TIM_Base_MspInit+0x78>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d115      	bne.n	800563e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <HAL_TIM_Base_MspInit+0x74>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	4a0c      	ldr	r2, [pc, #48]	; (800564c <HAL_TIM_Base_MspInit+0x74>)
 800561c:	f043 0308 	orr.w	r3, r3, #8
 8005620:	6413      	str	r3, [r2, #64]	; 0x40
 8005622:	4b0a      	ldr	r3, [pc, #40]	; (800564c <HAL_TIM_Base_MspInit+0x74>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800562e:	2200      	movs	r2, #0
 8005630:	2101      	movs	r1, #1
 8005632:	2032      	movs	r0, #50	; 0x32
 8005634:	f002 fb95 	bl	8007d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005638:	2032      	movs	r0, #50	; 0x32
 800563a:	f002 fbae 	bl	8007d9a <HAL_NVIC_EnableIRQ>
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	40000800 	.word	0x40000800
 800564c:	40023800 	.word	0x40023800
 8005650:	40000c00 	.word	0x40000c00

08005654 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800565c:	f107 030c 	add.w	r3, r7, #12
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	609a      	str	r2, [r3, #8]
 8005668:	60da      	str	r2, [r3, #12]
 800566a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <HAL_TIM_MspPostInit+0x68>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d11e      	bne.n	80056b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <HAL_TIM_MspPostInit+0x6c>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <HAL_TIM_MspPostInit+0x6c>)
 8005680:	f043 0302 	orr.w	r3, r3, #2
 8005684:	6313      	str	r3, [r2, #48]	; 0x30
 8005686:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <HAL_TIM_MspPostInit+0x6c>)
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	60bb      	str	r3, [r7, #8]
 8005690:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005692:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005696:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005698:	2302      	movs	r3, #2
 800569a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80056a4:	2302      	movs	r3, #2
 80056a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056a8:	f107 030c 	add.w	r3, r7, #12
 80056ac:	4619      	mov	r1, r3
 80056ae:	4805      	ldr	r0, [pc, #20]	; (80056c4 <HAL_TIM_MspPostInit+0x70>)
 80056b0:	f002 ff68 	bl	8008584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80056b4:	bf00      	nop
 80056b6:	3720      	adds	r7, #32
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40023800 	.word	0x40023800
 80056c4:	40020400 	.word	0x40020400

080056c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	; 0x28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d0:	f107 0314 	add.w	r3, r7, #20
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	609a      	str	r2, [r3, #8]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1d      	ldr	r2, [pc, #116]	; (800575c <HAL_UART_MspInit+0x94>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d133      	bne.n	8005752 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <HAL_UART_MspInit+0x98>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <HAL_UART_MspInit+0x98>)
 80056f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f8:	6413      	str	r3, [r2, #64]	; 0x40
 80056fa:	4b19      	ldr	r3, [pc, #100]	; (8005760 <HAL_UART_MspInit+0x98>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	4b15      	ldr	r3, [pc, #84]	; (8005760 <HAL_UART_MspInit+0x98>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	4a14      	ldr	r2, [pc, #80]	; (8005760 <HAL_UART_MspInit+0x98>)
 8005710:	f043 0320 	orr.w	r3, r3, #32
 8005714:	6313      	str	r3, [r2, #48]	; 0x30
 8005716:	4b12      	ldr	r3, [pc, #72]	; (8005760 <HAL_UART_MspInit+0x98>)
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005722:	23c0      	movs	r3, #192	; 0xc0
 8005724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005726:	2302      	movs	r3, #2
 8005728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800572e:	2303      	movs	r3, #3
 8005730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005732:	2308      	movs	r3, #8
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005736:	f107 0314 	add.w	r3, r7, #20
 800573a:	4619      	mov	r1, r3
 800573c:	4809      	ldr	r0, [pc, #36]	; (8005764 <HAL_UART_MspInit+0x9c>)
 800573e:	f002 ff21 	bl	8008584 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8005742:	2200      	movs	r2, #0
 8005744:	2100      	movs	r1, #0
 8005746:	2052      	movs	r0, #82	; 0x52
 8005748:	f002 fb0b 	bl	8007d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800574c:	2052      	movs	r0, #82	; 0x52
 800574e:	f002 fb24 	bl	8007d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8005752:	bf00      	nop
 8005754:	3728      	adds	r7, #40	; 0x28
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40007800 	.word	0x40007800
 8005760:	40023800 	.word	0x40023800
 8005764:	40021400 	.word	0x40021400

08005768 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	605a      	str	r2, [r3, #4]
 8005776:	609a      	str	r2, [r3, #8]
 8005778:	60da      	str	r2, [r3, #12]
 800577a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800577c:	4b34      	ldr	r3, [pc, #208]	; (8005850 <HAL_FMC_MspInit+0xe8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d160      	bne.n	8005846 <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 8005784:	4b32      	ldr	r3, [pc, #200]	; (8005850 <HAL_FMC_MspInit+0xe8>)
 8005786:	2201      	movs	r2, #1
 8005788:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800578a:	2300      	movs	r3, #0
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <HAL_FMC_MspInit+0xec>)
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	4a30      	ldr	r2, [pc, #192]	; (8005854 <HAL_FMC_MspInit+0xec>)
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	6393      	str	r3, [r2, #56]	; 0x38
 800579a:	4b2e      	ldr	r3, [pc, #184]	; (8005854 <HAL_FMC_MspInit+0xec>)
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80057a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80057aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ac:	2302      	movs	r3, #2
 80057ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b4:	2303      	movs	r3, #3
 80057b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80057b8:	230c      	movs	r3, #12
 80057ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	4825      	ldr	r0, [pc, #148]	; (8005858 <HAL_FMC_MspInit+0xf0>)
 80057c2:	f002 fedf 	bl	8008584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80057c6:	230d      	movs	r3, #13
 80057c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ca:	2302      	movs	r3, #2
 80057cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d2:	2303      	movs	r3, #3
 80057d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80057d6:	230c      	movs	r3, #12
 80057d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057da:	1d3b      	adds	r3, r7, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	481f      	ldr	r0, [pc, #124]	; (800585c <HAL_FMC_MspInit+0xf4>)
 80057e0:	f002 fed0 	bl	8008584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80057e4:	f248 1337 	movw	r3, #33079	; 0x8137
 80057e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ea:	2302      	movs	r3, #2
 80057ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f2:	2303      	movs	r3, #3
 80057f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80057f6:	230c      	movs	r3, #12
 80057f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80057fa:	1d3b      	adds	r3, r7, #4
 80057fc:	4619      	mov	r1, r3
 80057fe:	4818      	ldr	r0, [pc, #96]	; (8005860 <HAL_FMC_MspInit+0xf8>)
 8005800:	f002 fec0 	bl	8008584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005804:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005808:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800580a:	2302      	movs	r3, #2
 800580c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005812:	2303      	movs	r3, #3
 8005814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005816:	230c      	movs	r3, #12
 8005818:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4811      	ldr	r0, [pc, #68]	; (8005864 <HAL_FMC_MspInit+0xfc>)
 8005820:	f002 feb0 	bl	8008584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005824:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005828:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800582a:	2302      	movs	r3, #2
 800582c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005832:	2303      	movs	r3, #3
 8005834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005836:	230c      	movs	r3, #12
 8005838:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	4619      	mov	r1, r3
 800583e:	480a      	ldr	r0, [pc, #40]	; (8005868 <HAL_FMC_MspInit+0x100>)
 8005840:	f002 fea0 	bl	8008584 <HAL_GPIO_Init>
 8005844:	e000      	b.n	8005848 <HAL_FMC_MspInit+0xe0>
    return;
 8005846:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000b48 	.word	0x20000b48
 8005854:	40023800 	.word	0x40023800
 8005858:	40021400 	.word	0x40021400
 800585c:	40020800 	.word	0x40020800
 8005860:	40021800 	.word	0x40021800
 8005864:	40021000 	.word	0x40021000
 8005868:	40020c00 	.word	0x40020c00

0800586c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005874:	f7ff ff78 	bl	8005768 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005884:	e7fe      	b.n	8005884 <NMI_Handler+0x4>

08005886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005886:	b480      	push	{r7}
 8005888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800588a:	e7fe      	b.n	800588a <HardFault_Handler+0x4>

0800588c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005890:	e7fe      	b.n	8005890 <MemManage_Handler+0x4>

08005892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005892:	b480      	push	{r7}
 8005894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005896:	e7fe      	b.n	8005896 <BusFault_Handler+0x4>

08005898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800589c:	e7fe      	b.n	800589c <UsageFault_Handler+0x4>

0800589e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800589e:	b480      	push	{r7}
 80058a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058a2:	bf00      	nop
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058b0:	bf00      	nop
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058ba:	b480      	push	{r7}
 80058bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058be:	bf00      	nop
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	timer_1++;
 80058cc:	4b1f      	ldr	r3, [pc, #124]	; (800594c <SysTick_Handler+0x84>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <SysTick_Handler+0x84>)
 80058d4:	6013      	str	r3, [r2, #0]

	if(PassW_block.PassFalseTimer){PassW_block.PassFalseTimer--;}
 80058d6:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <SysTick_Handler+0x88>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <SysTick_Handler+0x20>
 80058de:	4b1c      	ldr	r3, [pc, #112]	; (8005950 <SysTick_Handler+0x88>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	4a1a      	ldr	r2, [pc, #104]	; (8005950 <SysTick_Handler+0x88>)
 80058e6:	6093      	str	r3, [r2, #8]

	if(PWM_launch)
 80058e8:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <SysTick_Handler+0x8c>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d015      	beq.n	800591c <SysTick_Handler+0x54>
	{
		if(brightness_disp < 10000){brightness_disp += 1;}
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <SysTick_Handler+0x90>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d804      	bhi.n	8005906 <SysTick_Handler+0x3e>
 80058fc:	4b16      	ldr	r3, [pc, #88]	; (8005958 <SysTick_Handler+0x90>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3301      	adds	r3, #1
 8005902:	4a15      	ldr	r2, [pc, #84]	; (8005958 <SysTick_Handler+0x90>)
 8005904:	6013      	str	r3, [r2, #0]
		if(brightness_clav < 10000){brightness_clav += 1;}
 8005906:	4b15      	ldr	r3, [pc, #84]	; (800595c <SysTick_Handler+0x94>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f242 720f 	movw	r2, #9999	; 0x270f
 800590e:	4293      	cmp	r3, r2
 8005910:	d804      	bhi.n	800591c <SysTick_Handler+0x54>
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <SysTick_Handler+0x94>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3301      	adds	r3, #1
 8005918:	4a10      	ldr	r2, [pc, #64]	; (800595c <SysTick_Handler+0x94>)
 800591a:	6013      	str	r3, [r2, #0]
	}

	TimedBitValue_handler(&ALG_DB.clearing_pressure_filter_1);
 800591c:	4810      	ldr	r0, [pc, #64]	; (8005960 <SysTick_Handler+0x98>)
 800591e:	f7fe feb5 	bl	800468c <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_pressure_filter_2);
 8005922:	4810      	ldr	r0, [pc, #64]	; (8005964 <SysTick_Handler+0x9c>)
 8005924:	f7fe feb2 	bl	800468c <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_water_filter_1);
 8005928:	480f      	ldr	r0, [pc, #60]	; (8005968 <SysTick_Handler+0xa0>)
 800592a:	f7fe feaf 	bl	800468c <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_water_filter_2);
 800592e:	480f      	ldr	r0, [pc, #60]	; (800596c <SysTick_Handler+0xa4>)
 8005930:	f7fe feac 	bl	800468c <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_water_filter_3);
 8005934:	480e      	ldr	r0, [pc, #56]	; (8005970 <SysTick_Handler+0xa8>)
 8005936:	f7fe fea9 	bl	800468c <TimedBitValue_handler>

	KeyboardCheck();
 800593a:	f000 faed 	bl	8005f18 <KeyboardCheck>

	KeyboardWork();
 800593e:	f000 f841 	bl	80059c4 <KeyboardWork>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005942:	f002 f8ef 	bl	8007b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005946:	bf00      	nop
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20000b7c 	.word	0x20000b7c
 8005950:	20000a00 	.word	0x20000a00
 8005954:	200009fd 	.word	0x200009fd
 8005958:	20000350 	.word	0x20000350
 800595c:	20000354 	.word	0x20000354
 8005960:	20000a14 	.word	0x20000a14
 8005964:	20000a1a 	.word	0x20000a1a
 8005968:	20000a20 	.word	0x20000a20
 800596c:	20000a26 	.word	0x20000a26
 8005970:	20000a2c 	.word	0x20000a2c

08005974 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

	timer_2++;
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <TIM5_IRQHandler+0x20>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	4a05      	ldr	r2, [pc, #20]	; (8005994 <TIM5_IRQHandler+0x20>)
 8005980:	6013      	str	r3, [r2, #0]
	Slave_Clock_1ms(&Slave_1);
 8005982:	4805      	ldr	r0, [pc, #20]	; (8005998 <TIM5_IRQHandler+0x24>)
 8005984:	f7fb ffb8 	bl	80018f8 <Slave_Clock_1ms>

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005988:	4804      	ldr	r0, [pc, #16]	; (800599c <TIM5_IRQHandler+0x28>)
 800598a:	f004 fc31 	bl	800a1f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000b80 	.word	0x20000b80
 8005998:	20000358 	.word	0x20000358
 800599c:	20000290 	.word	0x20000290

080059a0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

	  Slave_PORT_Processor(&Slave_1);
 80059a4:	4805      	ldr	r0, [pc, #20]	; (80059bc <UART7_IRQHandler+0x1c>)
 80059a6:	f7fb fab3 	bl	8000f10 <Slave_PORT_Processor>

	  Slave_Processor(&Slave_1);
 80059aa:	4804      	ldr	r0, [pc, #16]	; (80059bc <UART7_IRQHandler+0x1c>)
 80059ac:	f7fb fb2a 	bl	8001004 <Slave_Processor>

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80059b0:	4803      	ldr	r0, [pc, #12]	; (80059c0 <UART7_IRQHandler+0x20>)
 80059b2:	f005 facf 	bl	800af54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80059b6:	bf00      	nop
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000358 	.word	0x20000358
 80059c0:	200002d8 	.word	0x200002d8

080059c4 <KeyboardWork>:

/* USER CODE BEGIN 1 */

void KeyboardWork(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af02      	add	r7, sp, #8

	uint8_t scr_plus  = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	71fb      	strb	r3, [r7, #7]
	uint8_t scr_minus = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	71bb      	strb	r3, [r7, #6]


	if(KeysRetain.Up & KeysRetain.Down)
 80059d2:	4b9f      	ldr	r3, [pc, #636]	; (8005c50 <KeyboardWork+0x28c>)
 80059d4:	795a      	ldrb	r2, [r3, #5]
 80059d6:	4b9e      	ldr	r3, [pc, #632]	; (8005c50 <KeyboardWork+0x28c>)
 80059d8:	791b      	ldrb	r3, [r3, #4]
 80059da:	4013      	ands	r3, r2
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <KeyboardWork+0x30>
	{
		screen 					= 21;
 80059e2:	4b9c      	ldr	r3, [pc, #624]	; (8005c54 <KeyboardWork+0x290>)
 80059e4:	2215      	movs	r2, #21
 80059e6:	701a      	strb	r2, [r3, #0]
		Control_DB.MenuPointer  = 0;
 80059e8:	4b9b      	ldr	r3, [pc, #620]	; (8005c58 <KeyboardWork+0x294>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	801a      	strh	r2, [r3, #0]
		Control_DB.RazrPointer 	= 0;
 80059ee:	4b9a      	ldr	r3, [pc, #616]	; (8005c58 <KeyboardWork+0x294>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	805a      	strh	r2, [r3, #2]
	}
	if(KeysFlash.ESC & (screen < 5))
 80059f4:	4b99      	ldr	r3, [pc, #612]	; (8005c5c <KeyboardWork+0x298>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	4b96      	ldr	r3, [pc, #600]	; (8005c54 <KeyboardWork+0x290>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	bf94      	ite	ls
 8005a02:	2301      	movls	r3, #1
 8005a04:	2300      	movhi	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <KeyboardWork+0x5e>
	{
		screen_save 	= screen;
 8005a0e:	4b91      	ldr	r3, [pc, #580]	; (8005c54 <KeyboardWork+0x290>)
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	4b93      	ldr	r3, [pc, #588]	; (8005c60 <KeyboardWork+0x29c>)
 8005a14:	701a      	strb	r2, [r3, #0]
		screen 			= 20;
 8005a16:	4b8f      	ldr	r3, [pc, #572]	; (8005c54 <KeyboardWork+0x290>)
 8005a18:	2214      	movs	r2, #20
 8005a1a:	701a      	strb	r2, [r3, #0]
		KeysFlash.ESC 	= 0;
 8005a1c:	4b8f      	ldr	r3, [pc, #572]	; (8005c5c <KeyboardWork+0x298>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
	}
	if(KeysFlash.ESC & (screen == 20))
 8005a22:	4b8e      	ldr	r3, [pc, #568]	; (8005c5c <KeyboardWork+0x298>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	4b8a      	ldr	r3, [pc, #552]	; (8005c54 <KeyboardWork+0x290>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b14      	cmp	r3, #20
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d006      	beq.n	8005a4a <KeyboardWork+0x86>
	{
		screen = screen_save;
 8005a3c:	4b88      	ldr	r3, [pc, #544]	; (8005c60 <KeyboardWork+0x29c>)
 8005a3e:	781a      	ldrb	r2, [r3, #0]
 8005a40:	4b84      	ldr	r3, [pc, #528]	; (8005c54 <KeyboardWork+0x290>)
 8005a42:	701a      	strb	r2, [r3, #0]
		KeysFlash.ESC 	= 0;
 8005a44:	4b85      	ldr	r3, [pc, #532]	; (8005c5c <KeyboardWork+0x298>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
	}
	if(KeysFlash.ESC & (((screen >= 5) & (screen <= 7)) | (screen == 21)))
 8005a4a:	4b84      	ldr	r3, [pc, #528]	; (8005c5c <KeyboardWork+0x298>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4b80      	ldr	r3, [pc, #512]	; (8005c54 <KeyboardWork+0x290>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	bf8c      	ite	hi
 8005a58:	2301      	movhi	r3, #1
 8005a5a:	2300      	movls	r3, #0
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	4b7d      	ldr	r3, [pc, #500]	; (8005c54 <KeyboardWork+0x290>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b07      	cmp	r3, #7
 8005a64:	bf94      	ite	ls
 8005a66:	2301      	movls	r3, #1
 8005a68:	2300      	movhi	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	4b78      	ldr	r3, [pc, #480]	; (8005c54 <KeyboardWork+0x290>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b15      	cmp	r3, #21
 8005a78:	bf0c      	ite	eq
 8005a7a:	2301      	moveq	r3, #1
 8005a7c:	2300      	movne	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	4313      	orrs	r3, r2
 8005a82:	400b      	ands	r3, r1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <KeyboardWork+0xd6>
	{
		screen 			= 1;
 8005a88:	4b72      	ldr	r3, [pc, #456]	; (8005c54 <KeyboardWork+0x290>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
		screen_save 	= 1;
 8005a8e:	4b74      	ldr	r3, [pc, #464]	; (8005c60 <KeyboardWork+0x29c>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	701a      	strb	r2, [r3, #0]
		Control_DB.RazrPointer 	= 0;
 8005a94:	4b70      	ldr	r3, [pc, #448]	; (8005c58 <KeyboardWork+0x294>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	805a      	strh	r2, [r3, #2]
	}

	if(KeysFlash.Right)
 8005a9a:	4b70      	ldr	r3, [pc, #448]	; (8005c5c <KeyboardWork+0x298>)
 8005a9c:	789b      	ldrb	r3, [r3, #2]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01a      	beq.n	8005ad8 <KeyboardWork+0x114>
	{
		if(Control_DB.RazrPointer)
 8005aa2:	4b6d      	ldr	r3, [pc, #436]	; (8005c58 <KeyboardWork+0x294>)
 8005aa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d013      	beq.n	8005ad4 <KeyboardWork+0x110>
		{
			Control_DB.RazrPointer--;
 8005aac:	4b6a      	ldr	r3, [pc, #424]	; (8005c58 <KeyboardWork+0x294>)
 8005aae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	b21a      	sxth	r2, r3
 8005aba:	4b67      	ldr	r3, [pc, #412]	; (8005c58 <KeyboardWork+0x294>)
 8005abc:	805a      	strh	r2, [r3, #2]
			if(Control_DB.RazrPointer == 0)
 8005abe:	4b66      	ldr	r3, [pc, #408]	; (8005c58 <KeyboardWork+0x294>)
 8005ac0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d107      	bne.n	8005ad8 <KeyboardWork+0x114>
			{
				Control_DB.RazrPointer = Control_DB.RazrPointerMAX;
 8005ac8:	4b63      	ldr	r3, [pc, #396]	; (8005c58 <KeyboardWork+0x294>)
 8005aca:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8005ace:	4b62      	ldr	r3, [pc, #392]	; (8005c58 <KeyboardWork+0x294>)
 8005ad0:	805a      	strh	r2, [r3, #2]
 8005ad2:	e001      	b.n	8005ad8 <KeyboardWork+0x114>
			}
		}
		else
		{
			scr_plus = 1;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	71fb      	strb	r3, [r7, #7]
		}
	}
	if(KeysFlash.Left)
 8005ad8:	4b60      	ldr	r3, [pc, #384]	; (8005c5c <KeyboardWork+0x298>)
 8005ada:	78db      	ldrb	r3, [r3, #3]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01b      	beq.n	8005b18 <KeyboardWork+0x154>
	{
		if(Control_DB.RazrPointer)
 8005ae0:	4b5d      	ldr	r3, [pc, #372]	; (8005c58 <KeyboardWork+0x294>)
 8005ae2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d014      	beq.n	8005b14 <KeyboardWork+0x150>
		{
			Control_DB.RazrPointer++;
 8005aea:	4b5b      	ldr	r3, [pc, #364]	; (8005c58 <KeyboardWork+0x294>)
 8005aec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3301      	adds	r3, #1
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	b21a      	sxth	r2, r3
 8005af8:	4b57      	ldr	r3, [pc, #348]	; (8005c58 <KeyboardWork+0x294>)
 8005afa:	805a      	strh	r2, [r3, #2]
			if(Control_DB.RazrPointer > Control_DB.RazrPointerMAX)
 8005afc:	4b56      	ldr	r3, [pc, #344]	; (8005c58 <KeyboardWork+0x294>)
 8005afe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005b02:	4b55      	ldr	r3, [pc, #340]	; (8005c58 <KeyboardWork+0x294>)
 8005b04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	dd05      	ble.n	8005b18 <KeyboardWork+0x154>
			{
				Control_DB.RazrPointer = 1;
 8005b0c:	4b52      	ldr	r3, [pc, #328]	; (8005c58 <KeyboardWork+0x294>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	805a      	strh	r2, [r3, #2]
 8005b12:	e001      	b.n	8005b18 <KeyboardWork+0x154>
			}
		}
		else
		{
			scr_minus = 1;
 8005b14:	2301      	movs	r3, #1
 8005b16:	71bb      	strb	r3, [r7, #6]
		}
	}

	if(KeysFlash.ENT)
 8005b18:	4b50      	ldr	r3, [pc, #320]	; (8005c5c <KeyboardWork+0x298>)
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 814a 	beq.w	8005db6 <KeyboardWork+0x3f2>
	{



		if(screen == 3)
 8005b22:	4b4c      	ldr	r3, [pc, #304]	; (8005c54 <KeyboardWork+0x290>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	f040 80a6 	bne.w	8005c78 <KeyboardWork+0x2b4>
		{

			if(PassW_block.DataClearingUnlock)
 8005b2c:	4b4d      	ldr	r3, [pc, #308]	; (8005c64 <KeyboardWork+0x2a0>)
 8005b2e:	7c1b      	ldrb	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8081 	beq.w	8005c38 <KeyboardWork+0x274>
			{
				switch(Control_DB.MenuPointer)
 8005b36:	4b48      	ldr	r3, [pc, #288]	; (8005c58 <KeyboardWork+0x294>)
 8005b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	2b12      	cmp	r3, #18
 8005b40:	d87b      	bhi.n	8005c3a <KeyboardWork+0x276>
 8005b42:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <KeyboardWork+0x184>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b95 	.word	0x08005b95
 8005b4c:	08005b9d 	.word	0x08005b9d
 8005b50:	08005ba5 	.word	0x08005ba5
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005bb5 	.word	0x08005bb5
 8005b5c:	08005bbd 	.word	0x08005bbd
 8005b60:	08005bc5 	.word	0x08005bc5
 8005b64:	08005bcd 	.word	0x08005bcd
 8005b68:	08005bd5 	.word	0x08005bd5
 8005b6c:	08005bdd 	.word	0x08005bdd
 8005b70:	08005be5 	.word	0x08005be5
 8005b74:	08005bed 	.word	0x08005bed
 8005b78:	08005bf7 	.word	0x08005bf7
 8005b7c:	08005c01 	.word	0x08005c01
 8005b80:	08005c0b 	.word	0x08005c0b
 8005b84:	08005c13 	.word	0x08005c13
 8005b88:	08005c1b 	.word	0x08005c1b
 8005b8c:	08005c25 	.word	0x08005c25
 8005b90:	08005c2f 	.word	0x08005c2f
				{
					case 1:
						BUV_RT_VALS.ANN_1.Pump.MotoClock = 0;
 8005b94:	4b34      	ldr	r3, [pc, #208]	; (8005c68 <KeyboardWork+0x2a4>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	60da      	str	r2, [r3, #12]
					break;
 8005b9a:	e04e      	b.n	8005c3a <KeyboardWork+0x276>
					case 2:
						BUV_RT_VALS.ANN_2.Pump.MotoClock = 0;
 8005b9c:	4b32      	ldr	r3, [pc, #200]	; (8005c68 <KeyboardWork+0x2a4>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	621a      	str	r2, [r3, #32]
					break;
 8005ba2:	e04a      	b.n	8005c3a <KeyboardWork+0x276>
					case 3:
						BUV_RT_VALS.ANN_3.Pump.MotoClock = 0;
 8005ba4:	4b30      	ldr	r3, [pc, #192]	; (8005c68 <KeyboardWork+0x2a4>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8005baa:	e046      	b.n	8005c3a <KeyboardWork+0x276>
					case 4:
						BUV_RT_VALS.EMULSION_NODE.Pump_circulation.MotoClock = 0;
 8005bac:	4b2e      	ldr	r3, [pc, #184]	; (8005c68 <KeyboardWork+0x2a4>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	66da      	str	r2, [r3, #108]	; 0x6c
					break;
 8005bb2:	e042      	b.n	8005c3a <KeyboardWork+0x276>
					case 5:
						BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.MotoClock = 0;
 8005bb4:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <KeyboardWork+0x2a4>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	675a      	str	r2, [r3, #116]	; 0x74
					break;
 8005bba:	e03e      	b.n	8005c3a <KeyboardWork+0x276>
					case 6:
						BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.MotoClock = 0;
 8005bbc:	4b2a      	ldr	r3, [pc, #168]	; (8005c68 <KeyboardWork+0x2a4>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	67da      	str	r2, [r3, #124]	; 0x7c
					break;
 8005bc2:	e03a      	b.n	8005c3a <KeyboardWork+0x276>
					case 7:
						BUV_RT_VALS.ANN_1.Unload_counter = 0;
 8005bc4:	4b28      	ldr	r3, [pc, #160]	; (8005c68 <KeyboardWork+0x2a4>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	619a      	str	r2, [r3, #24]
					break;
 8005bca:	e036      	b.n	8005c3a <KeyboardWork+0x276>
					case 8:
						BUV_RT_VALS.ANN_2.Unload_counter = 0;
 8005bcc:	4b26      	ldr	r3, [pc, #152]	; (8005c68 <KeyboardWork+0x2a4>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8005bd2:	e032      	b.n	8005c3a <KeyboardWork+0x276>
					case 9:
						BUV_RT_VALS.ANN_3.Unload_counter = 0;
 8005bd4:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <KeyboardWork+0x2a4>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40
					break;
 8005bda:	e02e      	b.n	8005c3a <KeyboardWork+0x276>
					case 10:
						BUV_RT_VALS.FILT_NODE.Flush_valve_1_counter = 0;
 8005bdc:	4b22      	ldr	r3, [pc, #136]	; (8005c68 <KeyboardWork+0x2a4>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	661a      	str	r2, [r3, #96]	; 0x60
					break;
 8005be2:	e02a      	b.n	8005c3a <KeyboardWork+0x276>
					case 11:
						BUV_RT_VALS.FILT_NODE.Flush_valve_2_counter = 0;
 8005be4:	4b20      	ldr	r3, [pc, #128]	; (8005c68 <KeyboardWork+0x2a4>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 8005bea:	e026      	b.n	8005c3a <KeyboardWork+0x276>
					case 12:
						BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_1_counter = 0;
 8005bec:	4b1e      	ldr	r3, [pc, #120]	; (8005c68 <KeyboardWork+0x2a4>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8005bf4:	e021      	b.n	8005c3a <KeyboardWork+0x276>
					case 13:
						BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_2_counter = 0;
 8005bf6:	4b1c      	ldr	r3, [pc, #112]	; (8005c68 <KeyboardWork+0x2a4>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					break;
 8005bfe:	e01c      	b.n	8005c3a <KeyboardWork+0x276>
					case 14:
						BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_3_counter = 0;
 8005c00:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <KeyboardWork+0x2a4>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8005c08:	e017      	b.n	8005c3a <KeyboardWork+0x276>
					case 15:
						BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Volume = 0;
 8005c0a:	4b17      	ldr	r3, [pc, #92]	; (8005c68 <KeyboardWork+0x2a4>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8005c10:	e013      	b.n	8005c3a <KeyboardWork+0x276>
					case 16:
						BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Volume = 0;
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <KeyboardWork+0x2a4>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8005c18:	e00f      	b.n	8005c3a <KeyboardWork+0x276>
					case 17:
						BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Volume = 0;
 8005c1a:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <KeyboardWork+0x2a4>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					break;
 8005c22:	e00a      	b.n	8005c3a <KeyboardWork+0x276>
					case 18:
						BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Volume = 0;
 8005c24:	4b10      	ldr	r3, [pc, #64]	; (8005c68 <KeyboardWork+0x2a4>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					break;
 8005c2c:	e005      	b.n	8005c3a <KeyboardWork+0x276>
					case 19:
						BUV_RT_VALS.EMULSION_NODE.Node_work_counter = 0;
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <KeyboardWork+0x2a4>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8005c36:	e000      	b.n	8005c3a <KeyboardWork+0x276>
				}
			}
 8005c38:	bf00      	nop

			if(PassW_block.PassWord != PassW_block.PassWord_DATA)
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <KeyboardWork+0x2a0>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <KeyboardWork+0x2a0>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d012      	beq.n	8005c6c <KeyboardWork+0x2a8>
			{
				PassW_block.PassWord = 0;
 8005c46:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <KeyboardWork+0x2a0>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e014      	b.n	8005c78 <KeyboardWork+0x2b4>
 8005c4e:	bf00      	nop
 8005c50:	20000b4c 	.word	0x20000b4c
 8005c54:	20000018 	.word	0x20000018
 8005c58:	20000b18 	.word	0x20000b18
 8005c5c:	20000b5c 	.word	0x20000b5c
 8005c60:	2000001a 	.word	0x2000001a
 8005c64:	20000a00 	.word	0x20000a00
 8005c68:	20000a50 	.word	0x20000a50
			}
			else
			{
				PassW_block.PassWord = 0;
 8005c6c:	4b77      	ldr	r3, [pc, #476]	; (8005e4c <KeyboardWork+0x488>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
				PassW_block.DataClearingUnlock = 1;
 8005c72:	4b76      	ldr	r3, [pc, #472]	; (8005e4c <KeyboardWork+0x488>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	741a      	strb	r2, [r3, #16]
			}
		}

		if(screen == 4)
 8005c78:	4b75      	ldr	r3, [pc, #468]	; (8005e50 <KeyboardWork+0x48c>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d125      	bne.n	8005ccc <KeyboardWork+0x308>
		{
			switch(Control_DB.MenuPointer)
 8005c80:	4b74      	ldr	r3, [pc, #464]	; (8005e54 <KeyboardWork+0x490>)
 8005c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d821      	bhi.n	8005cce <KeyboardWork+0x30a>
 8005c8a:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <KeyboardWork+0x2cc>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005ca5 	.word	0x08005ca5
 8005c94:	08005cad 	.word	0x08005cad
 8005c98:	08005cb5 	.word	0x08005cb5
 8005c9c:	08005cbd 	.word	0x08005cbd
 8005ca0:	08005cc5 	.word	0x08005cc5
			{
				case 0:
					ALG_DB.clearing_pressure_filter_1.state = 1;
 8005ca4:	4b6c      	ldr	r3, [pc, #432]	; (8005e58 <KeyboardWork+0x494>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
				break;
 8005caa:	e010      	b.n	8005cce <KeyboardWork+0x30a>
				case 1:
					ALG_DB.clearing_pressure_filter_2.state = 1;
 8005cac:	4b6a      	ldr	r3, [pc, #424]	; (8005e58 <KeyboardWork+0x494>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	719a      	strb	r2, [r3, #6]
				break;
 8005cb2:	e00c      	b.n	8005cce <KeyboardWork+0x30a>
				case 2:
					ALG_DB.clearing_water_filter_1.state = 1;
 8005cb4:	4b68      	ldr	r3, [pc, #416]	; (8005e58 <KeyboardWork+0x494>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	731a      	strb	r2, [r3, #12]
				break;
 8005cba:	e008      	b.n	8005cce <KeyboardWork+0x30a>
				case 3:
					ALG_DB.clearing_water_filter_2.state = 1;
 8005cbc:	4b66      	ldr	r3, [pc, #408]	; (8005e58 <KeyboardWork+0x494>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	749a      	strb	r2, [r3, #18]
				break;
 8005cc2:	e004      	b.n	8005cce <KeyboardWork+0x30a>
				case 4:
					ALG_DB.clearing_water_filter_3.state = 1;
 8005cc4:	4b64      	ldr	r3, [pc, #400]	; (8005e58 <KeyboardWork+0x494>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	761a      	strb	r2, [r3, #24]
				break;
 8005cca:	e000      	b.n	8005cce <KeyboardWork+0x30a>
			}
		}
 8005ccc:	bf00      	nop

		if(screen == 5)
 8005cce:	4b60      	ldr	r3, [pc, #384]	; (8005e50 <KeyboardWork+0x48c>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d115      	bne.n	8005d02 <KeyboardWork+0x33e>
		{
			if(PassW_block.PassWord != PassW_block.PassWord_true)
 8005cd6:	4b5d      	ldr	r3, [pc, #372]	; (8005e4c <KeyboardWork+0x488>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b5c      	ldr	r3, [pc, #368]	; (8005e4c <KeyboardWork+0x488>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d00c      	beq.n	8005cfc <KeyboardWork+0x338>
			{
				if(Control_DB.RazrPointer)
 8005ce2:	4b5c      	ldr	r3, [pc, #368]	; (8005e54 <KeyboardWork+0x490>)
 8005ce4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <KeyboardWork+0x33e>
				{
					PassW_block.PassFalseTimer = 1000;
 8005cec:	4b57      	ldr	r3, [pc, #348]	; (8005e4c <KeyboardWork+0x488>)
 8005cee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cf2:	609a      	str	r2, [r3, #8]
					PassW_block.PassWord       =    0;
 8005cf4:	4b55      	ldr	r3, [pc, #340]	; (8005e4c <KeyboardWork+0x488>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e002      	b.n	8005d02 <KeyboardWork+0x33e>
				}
			}
			else
			{
				screen = 6; // переход после ввода правильного пароля
 8005cfc:	4b54      	ldr	r3, [pc, #336]	; (8005e50 <KeyboardWork+0x48c>)
 8005cfe:	2206      	movs	r2, #6
 8005d00:	701a      	strb	r2, [r3, #0]
			}
		}

		if((screen == 7) & (Control_DB.MenuPointer == 4))
 8005d02:	4b53      	ldr	r3, [pc, #332]	; (8005e50 <KeyboardWork+0x48c>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b07      	cmp	r3, #7
 8005d08:	bf0c      	ite	eq
 8005d0a:	2301      	moveq	r3, #1
 8005d0c:	2300      	movne	r3, #0
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	4b50      	ldr	r3, [pc, #320]	; (8005e54 <KeyboardWork+0x490>)
 8005d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	bf0c      	ite	eq
 8005d1a:	2301      	moveq	r3, #1
 8005d1c:	2300      	movne	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	4013      	ands	r3, r2
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d009      	beq.n	8005d3c <KeyboardWork+0x378>
		{
			BUV_settings_global.work_on_water_enable = !BUV_settings_global.work_on_water_enable;
 8005d28:	4b4c      	ldr	r3, [pc, #304]	; (8005e5c <KeyboardWork+0x498>)
 8005d2a:	7d1b      	ldrb	r3, [r3, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bf0c      	ite	eq
 8005d30:	2301      	moveq	r3, #1
 8005d32:	2300      	movne	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	4b48      	ldr	r3, [pc, #288]	; (8005e5c <KeyboardWork+0x498>)
 8005d3a:	751a      	strb	r2, [r3, #20]
		}



		if(Control_DB.RazrPointerMAX)
 8005d3c:	4b45      	ldr	r3, [pc, #276]	; (8005e54 <KeyboardWork+0x490>)
 8005d3e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d021      	beq.n	8005d8a <KeyboardWork+0x3c6>
		{
			if(Control_DB.RazrPointer)
 8005d46:	4b43      	ldr	r3, [pc, #268]	; (8005e54 <KeyboardWork+0x490>)
 8005d48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <KeyboardWork+0x394>
			{
				Control_DB.RazrPointer = 0;
 8005d50:	4b40      	ldr	r3, [pc, #256]	; (8005e54 <KeyboardWork+0x490>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	805a      	strh	r2, [r3, #2]
 8005d56:	e018      	b.n	8005d8a <KeyboardWork+0x3c6>
			}
			else
			{
				if((screen == 3) | (screen == 5))
 8005d58:	4b3d      	ldr	r3, [pc, #244]	; (8005e50 <KeyboardWork+0x48c>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	bf0c      	ite	eq
 8005d60:	2301      	moveq	r3, #1
 8005d62:	2300      	movne	r3, #0
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	4b3a      	ldr	r3, [pc, #232]	; (8005e50 <KeyboardWork+0x48c>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	bf0c      	ite	eq
 8005d6e:	2301      	moveq	r3, #1
 8005d70:	2300      	movne	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	4313      	orrs	r3, r2
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <KeyboardWork+0x3c0>
				{
					Control_DB.RazrPointer = 4;
 8005d7c:	4b35      	ldr	r3, [pc, #212]	; (8005e54 <KeyboardWork+0x490>)
 8005d7e:	2204      	movs	r2, #4
 8005d80:	805a      	strh	r2, [r3, #2]
 8005d82:	e002      	b.n	8005d8a <KeyboardWork+0x3c6>
				}
				else
				{
					Control_DB.RazrPointer = 1;
 8005d84:	4b33      	ldr	r3, [pc, #204]	; (8005e54 <KeyboardWork+0x490>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	805a      	strh	r2, [r3, #2]
				}
			}
		}

		if((screen == 21) & (Control_DB.MenuPointer == 5))
 8005d8a:	4b31      	ldr	r3, [pc, #196]	; (8005e50 <KeyboardWork+0x48c>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	bf0c      	ite	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	2300      	movne	r3, #0
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	4b2e      	ldr	r3, [pc, #184]	; (8005e54 <KeyboardWork+0x490>)
 8005d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d9e:	2b05      	cmp	r3, #5
 8005da0:	bf0c      	ite	eq
 8005da2:	2301      	moveq	r3, #1
 8005da4:	2300      	movne	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	4013      	ands	r3, r2
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <KeyboardWork+0x3f2>
		{
			Settings_DB.FlashWriteFlag = 1;
 8005db0:	4b2b      	ldr	r3, [pc, #172]	; (8005e60 <KeyboardWork+0x49c>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	741a      	strb	r2, [r3, #16]



	}

	if(KeysFlash.Down)
 8005db6:	4b2b      	ldr	r3, [pc, #172]	; (8005e64 <KeyboardWork+0x4a0>)
 8005db8:	791b      	ldrb	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d028      	beq.n	8005e10 <KeyboardWork+0x44c>
	{
		if(Control_DB.RazrPointer == 0)
 8005dbe:	4b25      	ldr	r3, [pc, #148]	; (8005e54 <KeyboardWork+0x490>)
 8005dc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d114      	bne.n	8005df2 <KeyboardWork+0x42e>
		{
			Control_DB.MenuPointer++;
 8005dc8:	4b22      	ldr	r3, [pc, #136]	; (8005e54 <KeyboardWork+0x490>)
 8005dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	b21a      	sxth	r2, r3
 8005dd6:	4b1f      	ldr	r3, [pc, #124]	; (8005e54 <KeyboardWork+0x490>)
 8005dd8:	801a      	strh	r2, [r3, #0]
			if(Control_DB.MenuPointer > Control_DB.MenuPointerMAX){Control_DB.MenuPointer = 0;}
 8005dda:	4b1e      	ldr	r3, [pc, #120]	; (8005e54 <KeyboardWork+0x490>)
 8005ddc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005de0:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <KeyboardWork+0x490>)
 8005de2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	dd12      	ble.n	8005e10 <KeyboardWork+0x44c>
 8005dea:	4b1a      	ldr	r3, [pc, #104]	; (8005e54 <KeyboardWork+0x490>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	e00e      	b.n	8005e10 <KeyboardWork+0x44c>
		}
		else
		{
			NumberChange(Control_DB.VauePointer, Control_DB.RazrPointer, Control_DB.RazrPointerMAX, 0, 1);
 8005df2:	4b18      	ldr	r3, [pc, #96]	; (8005e54 <KeyboardWork+0x490>)
 8005df4:	6898      	ldr	r0, [r3, #8]
 8005df6:	4b17      	ldr	r3, [pc, #92]	; (8005e54 <KeyboardWork+0x490>)
 8005df8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <KeyboardWork+0x490>)
 8005e00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005e04:	461a      	mov	r2, r3
 8005e06:	2301      	movs	r3, #1
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f001 fcdc 	bl	80077c8 <NumberChange>
		}
	}
	if(KeysFlash.Up)
 8005e10:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <KeyboardWork+0x4a0>)
 8005e12:	795b      	ldrb	r3, [r3, #5]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d036      	beq.n	8005e86 <KeyboardWork+0x4c2>
	{
		if(Control_DB.RazrPointer == 0)
 8005e18:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <KeyboardWork+0x490>)
 8005e1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d122      	bne.n	8005e68 <KeyboardWork+0x4a4>
		{
			Control_DB.MenuPointer--;
 8005e22:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <KeyboardWork+0x490>)
 8005e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	b21a      	sxth	r2, r3
 8005e30:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <KeyboardWork+0x490>)
 8005e32:	801a      	strh	r2, [r3, #0]
			if(Control_DB.MenuPointer < 0){Control_DB.MenuPointer = Control_DB.MenuPointerMAX;}
 8005e34:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <KeyboardWork+0x490>)
 8005e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	da23      	bge.n	8005e86 <KeyboardWork+0x4c2>
 8005e3e:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <KeyboardWork+0x490>)
 8005e40:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005e44:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <KeyboardWork+0x490>)
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e01d      	b.n	8005e86 <KeyboardWork+0x4c2>
 8005e4a:	bf00      	nop
 8005e4c:	20000a00 	.word	0x20000a00
 8005e50:	20000018 	.word	0x20000018
 8005e54:	20000b18 	.word	0x20000b18
 8005e58:	20000a14 	.word	0x20000a14
 8005e5c:	20000a34 	.word	0x20000a34
 8005e60:	20000afc 	.word	0x20000afc
 8005e64:	20000b5c 	.word	0x20000b5c
		}
		else
		{
			NumberChange(Control_DB.VauePointer, Control_DB.RazrPointer, Control_DB.RazrPointerMAX, 1, 0);
 8005e68:	4b26      	ldr	r3, [pc, #152]	; (8005f04 <KeyboardWork+0x540>)
 8005e6a:	6898      	ldr	r0, [r3, #8]
 8005e6c:	4b25      	ldr	r3, [pc, #148]	; (8005f04 <KeyboardWork+0x540>)
 8005e6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4b23      	ldr	r3, [pc, #140]	; (8005f04 <KeyboardWork+0x540>)
 8005e76:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	2301      	movs	r3, #1
 8005e82:	f001 fca1 	bl	80077c8 <NumberChange>
		}
	}


	if(screen <= 5)
 8005e86:	4b20      	ldr	r3, [pc, #128]	; (8005f08 <KeyboardWork+0x544>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b05      	cmp	r3, #5
 8005e8c:	d827      	bhi.n	8005ede <KeyboardWork+0x51a>
	{
		if(scr_plus) {screen++;}
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <KeyboardWork+0x4dc>
 8005e94:	4b1c      	ldr	r3, [pc, #112]	; (8005f08 <KeyboardWork+0x544>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	4b1a      	ldr	r3, [pc, #104]	; (8005f08 <KeyboardWork+0x544>)
 8005e9e:	701a      	strb	r2, [r3, #0]
		if(scr_minus){screen--;}
 8005ea0:	79bb      	ldrb	r3, [r7, #6]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <KeyboardWork+0x4ee>
 8005ea6:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <KeyboardWork+0x544>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	4b16      	ldr	r3, [pc, #88]	; (8005f08 <KeyboardWork+0x544>)
 8005eb0:	701a      	strb	r2, [r3, #0]

		if(KeysFlash.Right | KeysFlash.Left)
 8005eb2:	4b16      	ldr	r3, [pc, #88]	; (8005f0c <KeyboardWork+0x548>)
 8005eb4:	789a      	ldrb	r2, [r3, #2]
 8005eb6:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <KeyboardWork+0x548>)
 8005eb8:	78db      	ldrb	r3, [r3, #3]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00d      	beq.n	8005ede <KeyboardWork+0x51a>
		{
			if(screen > 5){screen = 1;}
 8005ec2:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <KeyboardWork+0x544>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d902      	bls.n	8005ed0 <KeyboardWork+0x50c>
 8005eca:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <KeyboardWork+0x544>)
 8005ecc:	2201      	movs	r2, #1
 8005ece:	701a      	strb	r2, [r3, #0]
			if(screen < 1){screen = 5;}
 8005ed0:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <KeyboardWork+0x544>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <KeyboardWork+0x51a>
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <KeyboardWork+0x544>)
 8005eda:	2205      	movs	r2, #5
 8005edc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(screen != screen_mirror)
 8005ede:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <KeyboardWork+0x544>)
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <KeyboardWork+0x54c>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d006      	beq.n	8005ef8 <KeyboardWork+0x534>
	{
		screen_mirror = screen;
 8005eea:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <KeyboardWork+0x544>)
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <KeyboardWork+0x54c>)
 8005ef0:	701a      	strb	r2, [r3, #0]
		screen_event  = 1;
 8005ef2:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <KeyboardWork+0x550>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]
	}

	KeyboardClear();
 8005ef8:	f000 fa42 	bl	8006380 <KeyboardClear>
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20000b18 	.word	0x20000b18
 8005f08:	20000018 	.word	0x20000018
 8005f0c:	20000b5c 	.word	0x20000b5c
 8005f10:	20000019 	.word	0x20000019
 8005f14:	200009fc 	.word	0x200009fc

08005f18 <KeyboardCheck>:

void KeyboardCheck(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0

	KeysRetain.ESC 			= !HAL_GPIO_ReadPin( BUTTON_1_GPIO_Port,  BUTTON_1_Pin);
 8005f1c:	2120      	movs	r1, #32
 8005f1e:	48a6      	ldr	r0, [pc, #664]	; (80061b8 <KeyboardCheck+0x2a0>)
 8005f20:	f002 fcdc 	bl	80088dc <HAL_GPIO_ReadPin>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	bf0c      	ite	eq
 8005f2a:	2301      	moveq	r3, #1
 8005f2c:	2300      	movne	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	4ba2      	ldr	r3, [pc, #648]	; (80061bc <KeyboardCheck+0x2a4>)
 8005f34:	701a      	strb	r2, [r3, #0]
	KeysRetain.ENT 			= !HAL_GPIO_ReadPin( BUTTON_2_GPIO_Port,  BUTTON_2_Pin);
 8005f36:	2140      	movs	r1, #64	; 0x40
 8005f38:	48a1      	ldr	r0, [pc, #644]	; (80061c0 <KeyboardCheck+0x2a8>)
 8005f3a:	f002 fccf 	bl	80088dc <HAL_GPIO_ReadPin>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	bf0c      	ite	eq
 8005f44:	2301      	moveq	r3, #1
 8005f46:	2300      	movne	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4b9b      	ldr	r3, [pc, #620]	; (80061bc <KeyboardCheck+0x2a4>)
 8005f4e:	705a      	strb	r2, [r3, #1]
	KeysRetain.Right 		= !HAL_GPIO_ReadPin( BUTTON_3_GPIO_Port,  BUTTON_3_Pin);
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	489b      	ldr	r0, [pc, #620]	; (80061c0 <KeyboardCheck+0x2a8>)
 8005f54:	f002 fcc2 	bl	80088dc <HAL_GPIO_ReadPin>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bf0c      	ite	eq
 8005f5e:	2301      	moveq	r3, #1
 8005f60:	2300      	movne	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	461a      	mov	r2, r3
 8005f66:	4b95      	ldr	r3, [pc, #596]	; (80061bc <KeyboardCheck+0x2a4>)
 8005f68:	709a      	strb	r2, [r3, #2]
	KeysRetain.Left 		= !HAL_GPIO_ReadPin( BUTTON_4_GPIO_Port,  BUTTON_4_Pin);
 8005f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f6e:	4894      	ldr	r0, [pc, #592]	; (80061c0 <KeyboardCheck+0x2a8>)
 8005f70:	f002 fcb4 	bl	80088dc <HAL_GPIO_ReadPin>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	4b8e      	ldr	r3, [pc, #568]	; (80061bc <KeyboardCheck+0x2a4>)
 8005f84:	70da      	strb	r2, [r3, #3]
	KeysRetain.Down 		= !HAL_GPIO_ReadPin( BUTTON_5_GPIO_Port,  BUTTON_5_Pin);
 8005f86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f8a:	488d      	ldr	r0, [pc, #564]	; (80061c0 <KeyboardCheck+0x2a8>)
 8005f8c:	f002 fca6 	bl	80088dc <HAL_GPIO_ReadPin>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bf0c      	ite	eq
 8005f96:	2301      	moveq	r3, #1
 8005f98:	2300      	movne	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4b87      	ldr	r3, [pc, #540]	; (80061bc <KeyboardCheck+0x2a4>)
 8005fa0:	711a      	strb	r2, [r3, #4]
	KeysRetain.Up 			= !HAL_GPIO_ReadPin( BUTTON_6_GPIO_Port,  BUTTON_6_Pin);
 8005fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005fa6:	4886      	ldr	r0, [pc, #536]	; (80061c0 <KeyboardCheck+0x2a8>)
 8005fa8:	f002 fc98 	bl	80088dc <HAL_GPIO_ReadPin>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bf0c      	ite	eq
 8005fb2:	2301      	moveq	r3, #1
 8005fb4:	2300      	movne	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4b80      	ldr	r3, [pc, #512]	; (80061bc <KeyboardCheck+0x2a4>)
 8005fbc:	715a      	strb	r2, [r3, #5]
	KeysRetain.PressDown 	= !HAL_GPIO_ReadPin( BUTTON_7_GPIO_Port,  BUTTON_7_Pin);
 8005fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fc2:	487f      	ldr	r0, [pc, #508]	; (80061c0 <KeyboardCheck+0x2a8>)
 8005fc4:	f002 fc8a 	bl	80088dc <HAL_GPIO_ReadPin>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	bf0c      	ite	eq
 8005fce:	2301      	moveq	r3, #1
 8005fd0:	2300      	movne	r3, #0
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4b79      	ldr	r3, [pc, #484]	; (80061bc <KeyboardCheck+0x2a4>)
 8005fd8:	719a      	strb	r2, [r3, #6]
	KeysRetain.AHH3_Stop 	= !HAL_GPIO_ReadPin( BUTTON_8_GPIO_Port,  BUTTON_8_Pin);
 8005fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fde:	4878      	ldr	r0, [pc, #480]	; (80061c0 <KeyboardCheck+0x2a8>)
 8005fe0:	f002 fc7c 	bl	80088dc <HAL_GPIO_ReadPin>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bf0c      	ite	eq
 8005fea:	2301      	moveq	r3, #1
 8005fec:	2300      	movne	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4b72      	ldr	r3, [pc, #456]	; (80061bc <KeyboardCheck+0x2a4>)
 8005ff4:	71da      	strb	r2, [r3, #7]
	KeysRetain.AutoPusk 	= !HAL_GPIO_ReadPin( BUTTON_9_GPIO_Port,  BUTTON_9_Pin);
 8005ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ffa:	4872      	ldr	r0, [pc, #456]	; (80061c4 <KeyboardCheck+0x2ac>)
 8005ffc:	f002 fc6e 	bl	80088dc <HAL_GPIO_ReadPin>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	4b6b      	ldr	r3, [pc, #428]	; (80061bc <KeyboardCheck+0x2a4>)
 8006010:	721a      	strb	r2, [r3, #8]
	KeysRetain.AutoStop 	= !HAL_GPIO_ReadPin(BUTTON_10_GPIO_Port, BUTTON_10_Pin);
 8006012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006016:	486b      	ldr	r0, [pc, #428]	; (80061c4 <KeyboardCheck+0x2ac>)
 8006018:	f002 fc60 	bl	80088dc <HAL_GPIO_ReadPin>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	bf0c      	ite	eq
 8006022:	2301      	moveq	r3, #1
 8006024:	2300      	movne	r3, #0
 8006026:	b2db      	uxtb	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	4b64      	ldr	r3, [pc, #400]	; (80061bc <KeyboardCheck+0x2a4>)
 800602c:	725a      	strb	r2, [r3, #9]
	KeysRetain.AHH1_Stop 	= !HAL_GPIO_ReadPin(BUTTON_11_GPIO_Port, BUTTON_11_Pin);
 800602e:	2180      	movs	r1, #128	; 0x80
 8006030:	4864      	ldr	r0, [pc, #400]	; (80061c4 <KeyboardCheck+0x2ac>)
 8006032:	f002 fc53 	bl	80088dc <HAL_GPIO_ReadPin>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	bf0c      	ite	eq
 800603c:	2301      	moveq	r3, #1
 800603e:	2300      	movne	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	4b5d      	ldr	r3, [pc, #372]	; (80061bc <KeyboardCheck+0x2a4>)
 8006046:	729a      	strb	r2, [r3, #10]
	KeysRetain.AHH2_Stop 	= !HAL_GPIO_ReadPin(BUTTON_12_GPIO_Port, BUTTON_12_Pin);
 8006048:	2140      	movs	r1, #64	; 0x40
 800604a:	485e      	ldr	r0, [pc, #376]	; (80061c4 <KeyboardCheck+0x2ac>)
 800604c:	f002 fc46 	bl	80088dc <HAL_GPIO_ReadPin>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	4b57      	ldr	r3, [pc, #348]	; (80061bc <KeyboardCheck+0x2a4>)
 8006060:	72da      	strb	r2, [r3, #11]
	KeysRetain.PressUp 		= !HAL_GPIO_ReadPin(BUTTON_13_GPIO_Port, BUTTON_13_Pin);
 8006062:	2101      	movs	r1, #1
 8006064:	4858      	ldr	r0, [pc, #352]	; (80061c8 <KeyboardCheck+0x2b0>)
 8006066:	f002 fc39 	bl	80088dc <HAL_GPIO_ReadPin>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	bf0c      	ite	eq
 8006070:	2301      	moveq	r3, #1
 8006072:	2300      	movne	r3, #0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	461a      	mov	r2, r3
 8006078:	4b50      	ldr	r3, [pc, #320]	; (80061bc <KeyboardCheck+0x2a4>)
 800607a:	731a      	strb	r2, [r3, #12]
	KeysRetain.AHH3_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_14_GPIO_Port, BUTTON_14_Pin);
 800607c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006080:	484f      	ldr	r0, [pc, #316]	; (80061c0 <KeyboardCheck+0x2a8>)
 8006082:	f002 fc2b 	bl	80088dc <HAL_GPIO_ReadPin>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	4b49      	ldr	r3, [pc, #292]	; (80061bc <KeyboardCheck+0x2a4>)
 8006096:	735a      	strb	r2, [r3, #13]
	KeysRetain.AHH2_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_15_GPIO_Port, BUTTON_15_Pin);
 8006098:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800609c:	4848      	ldr	r0, [pc, #288]	; (80061c0 <KeyboardCheck+0x2a8>)
 800609e:	f002 fc1d 	bl	80088dc <HAL_GPIO_ReadPin>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bf0c      	ite	eq
 80060a8:	2301      	moveq	r3, #1
 80060aa:	2300      	movne	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	4b42      	ldr	r3, [pc, #264]	; (80061bc <KeyboardCheck+0x2a4>)
 80060b2:	739a      	strb	r2, [r3, #14]
	KeysRetain.AHH1_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_16_GPIO_Port, BUTTON_16_Pin);
 80060b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060b8:	4841      	ldr	r0, [pc, #260]	; (80061c0 <KeyboardCheck+0x2a8>)
 80060ba:	f002 fc0f 	bl	80088dc <HAL_GPIO_ReadPin>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	4b3b      	ldr	r3, [pc, #236]	; (80061bc <KeyboardCheck+0x2a4>)
 80060ce:	73da      	strb	r2, [r3, #15]

	if(KeysRetain.ESC 		& !KeysMirror.ESC)			{KeysFlash.ESC 			= 1;}
 80060d0:	4b3a      	ldr	r3, [pc, #232]	; (80061bc <KeyboardCheck+0x2a4>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	4b3d      	ldr	r3, [pc, #244]	; (80061cc <KeyboardCheck+0x2b4>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bf0c      	ite	eq
 80060de:	2301      	moveq	r3, #1
 80060e0:	2300      	movne	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4013      	ands	r3, r2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <KeyboardCheck+0x1d8>
 80060ea:	4b39      	ldr	r3, [pc, #228]	; (80061d0 <KeyboardCheck+0x2b8>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]
	if(KeysRetain.ENT 		& !KeysMirror.ENT)			{KeysFlash.ENT 			= 1;}
 80060f0:	4b32      	ldr	r3, [pc, #200]	; (80061bc <KeyboardCheck+0x2a4>)
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	461a      	mov	r2, r3
 80060f6:	4b35      	ldr	r3, [pc, #212]	; (80061cc <KeyboardCheck+0x2b4>)
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bf0c      	ite	eq
 80060fe:	2301      	moveq	r3, #1
 8006100:	2300      	movne	r3, #0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	4013      	ands	r3, r2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <KeyboardCheck+0x1f8>
 800610a:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <KeyboardCheck+0x2b8>)
 800610c:	2201      	movs	r2, #1
 800610e:	705a      	strb	r2, [r3, #1]
	if(KeysRetain.Right 	& !KeysMirror.Right)		{KeysFlash.Right 		= 1;}
 8006110:	4b2a      	ldr	r3, [pc, #168]	; (80061bc <KeyboardCheck+0x2a4>)
 8006112:	789b      	ldrb	r3, [r3, #2]
 8006114:	461a      	mov	r2, r3
 8006116:	4b2d      	ldr	r3, [pc, #180]	; (80061cc <KeyboardCheck+0x2b4>)
 8006118:	789b      	ldrb	r3, [r3, #2]
 800611a:	2b00      	cmp	r3, #0
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	4013      	ands	r3, r2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <KeyboardCheck+0x218>
 800612a:	4b29      	ldr	r3, [pc, #164]	; (80061d0 <KeyboardCheck+0x2b8>)
 800612c:	2201      	movs	r2, #1
 800612e:	709a      	strb	r2, [r3, #2]
	if(KeysRetain.Left 		& !KeysMirror.Left)			{KeysFlash.Left 		= 1;}
 8006130:	4b22      	ldr	r3, [pc, #136]	; (80061bc <KeyboardCheck+0x2a4>)
 8006132:	78db      	ldrb	r3, [r3, #3]
 8006134:	461a      	mov	r2, r3
 8006136:	4b25      	ldr	r3, [pc, #148]	; (80061cc <KeyboardCheck+0x2b4>)
 8006138:	78db      	ldrb	r3, [r3, #3]
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf0c      	ite	eq
 800613e:	2301      	moveq	r3, #1
 8006140:	2300      	movne	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	4013      	ands	r3, r2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <KeyboardCheck+0x238>
 800614a:	4b21      	ldr	r3, [pc, #132]	; (80061d0 <KeyboardCheck+0x2b8>)
 800614c:	2201      	movs	r2, #1
 800614e:	70da      	strb	r2, [r3, #3]
	if(KeysRetain.Down 		& !KeysMirror.Down)			{KeysFlash.Down 		= 1;}
 8006150:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <KeyboardCheck+0x2a4>)
 8006152:	791b      	ldrb	r3, [r3, #4]
 8006154:	461a      	mov	r2, r3
 8006156:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <KeyboardCheck+0x2b4>)
 8006158:	791b      	ldrb	r3, [r3, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	4013      	ands	r3, r2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <KeyboardCheck+0x258>
 800616a:	4b19      	ldr	r3, [pc, #100]	; (80061d0 <KeyboardCheck+0x2b8>)
 800616c:	2201      	movs	r2, #1
 800616e:	711a      	strb	r2, [r3, #4]
	if(KeysRetain.Up 		& !KeysMirror.Up)			{KeysFlash.Up 			= 1;}
 8006170:	4b12      	ldr	r3, [pc, #72]	; (80061bc <KeyboardCheck+0x2a4>)
 8006172:	795b      	ldrb	r3, [r3, #5]
 8006174:	461a      	mov	r2, r3
 8006176:	4b15      	ldr	r3, [pc, #84]	; (80061cc <KeyboardCheck+0x2b4>)
 8006178:	795b      	ldrb	r3, [r3, #5]
 800617a:	2b00      	cmp	r3, #0
 800617c:	bf0c      	ite	eq
 800617e:	2301      	moveq	r3, #1
 8006180:	2300      	movne	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	4013      	ands	r3, r2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <KeyboardCheck+0x278>
 800618a:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <KeyboardCheck+0x2b8>)
 800618c:	2201      	movs	r2, #1
 800618e:	715a      	strb	r2, [r3, #5]
	if(KeysRetain.PressDown & !KeysMirror.PressDown)	{KeysFlash.PressDown 	= 1;}
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <KeyboardCheck+0x2a4>)
 8006192:	799b      	ldrb	r3, [r3, #6]
 8006194:	461a      	mov	r2, r3
 8006196:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <KeyboardCheck+0x2b4>)
 8006198:	799b      	ldrb	r3, [r3, #6]
 800619a:	2b00      	cmp	r3, #0
 800619c:	bf0c      	ite	eq
 800619e:	2301      	moveq	r3, #1
 80061a0:	2300      	movne	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <KeyboardCheck+0x298>
 80061aa:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <KeyboardCheck+0x2b8>)
 80061ac:	2201      	movs	r2, #1
 80061ae:	719a      	strb	r2, [r3, #6]
	if(KeysRetain.AHH3_Stop & !KeysMirror.AHH3_Stop)	{KeysFlash.AHH3_Stop 	= 1;}
 80061b0:	4b02      	ldr	r3, [pc, #8]	; (80061bc <KeyboardCheck+0x2a4>)
 80061b2:	79db      	ldrb	r3, [r3, #7]
 80061b4:	461a      	mov	r2, r3
 80061b6:	e00d      	b.n	80061d4 <KeyboardCheck+0x2bc>
 80061b8:	40022400 	.word	0x40022400
 80061bc:	20000b4c 	.word	0x20000b4c
 80061c0:	40021c00 	.word	0x40021c00
 80061c4:	40020800 	.word	0x40020800
 80061c8:	40022000 	.word	0x40022000
 80061cc:	20000b6c 	.word	0x20000b6c
 80061d0:	20000b5c 	.word	0x20000b5c
 80061d4:	4b67      	ldr	r3, [pc, #412]	; (8006374 <KeyboardCheck+0x45c>)
 80061d6:	79db      	ldrb	r3, [r3, #7]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <KeyboardCheck+0x2d6>
 80061e8:	4b63      	ldr	r3, [pc, #396]	; (8006378 <KeyboardCheck+0x460>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	71da      	strb	r2, [r3, #7]
	if(KeysRetain.AutoPusk 	& !KeysMirror.AutoPusk)		{KeysFlash.AutoPusk 	= 1;}
 80061ee:	4b63      	ldr	r3, [pc, #396]	; (800637c <KeyboardCheck+0x464>)
 80061f0:	7a1b      	ldrb	r3, [r3, #8]
 80061f2:	461a      	mov	r2, r3
 80061f4:	4b5f      	ldr	r3, [pc, #380]	; (8006374 <KeyboardCheck+0x45c>)
 80061f6:	7a1b      	ldrb	r3, [r3, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	bf0c      	ite	eq
 80061fc:	2301      	moveq	r3, #1
 80061fe:	2300      	movne	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	4013      	ands	r3, r2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <KeyboardCheck+0x2f6>
 8006208:	4b5b      	ldr	r3, [pc, #364]	; (8006378 <KeyboardCheck+0x460>)
 800620a:	2201      	movs	r2, #1
 800620c:	721a      	strb	r2, [r3, #8]
	if(KeysRetain.AutoStop 	& !KeysMirror.AutoStop)		{KeysFlash.AutoStop 	= 1;}
 800620e:	4b5b      	ldr	r3, [pc, #364]	; (800637c <KeyboardCheck+0x464>)
 8006210:	7a5b      	ldrb	r3, [r3, #9]
 8006212:	461a      	mov	r2, r3
 8006214:	4b57      	ldr	r3, [pc, #348]	; (8006374 <KeyboardCheck+0x45c>)
 8006216:	7a5b      	ldrb	r3, [r3, #9]
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf0c      	ite	eq
 800621c:	2301      	moveq	r3, #1
 800621e:	2300      	movne	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	4013      	ands	r3, r2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <KeyboardCheck+0x316>
 8006228:	4b53      	ldr	r3, [pc, #332]	; (8006378 <KeyboardCheck+0x460>)
 800622a:	2201      	movs	r2, #1
 800622c:	725a      	strb	r2, [r3, #9]
	if(KeysRetain.AHH1_Stop & !KeysMirror.AHH1_Stop)	{KeysFlash.AHH1_Stop 	= 1;}
 800622e:	4b53      	ldr	r3, [pc, #332]	; (800637c <KeyboardCheck+0x464>)
 8006230:	7a9b      	ldrb	r3, [r3, #10]
 8006232:	461a      	mov	r2, r3
 8006234:	4b4f      	ldr	r3, [pc, #316]	; (8006374 <KeyboardCheck+0x45c>)
 8006236:	7a9b      	ldrb	r3, [r3, #10]
 8006238:	2b00      	cmp	r3, #0
 800623a:	bf0c      	ite	eq
 800623c:	2301      	moveq	r3, #1
 800623e:	2300      	movne	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	4013      	ands	r3, r2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <KeyboardCheck+0x336>
 8006248:	4b4b      	ldr	r3, [pc, #300]	; (8006378 <KeyboardCheck+0x460>)
 800624a:	2201      	movs	r2, #1
 800624c:	729a      	strb	r2, [r3, #10]
	if(KeysRetain.AHH2_Stop & !KeysMirror.AHH2_Stop)	{KeysFlash.AHH2_Stop 	= 1;}
 800624e:	4b4b      	ldr	r3, [pc, #300]	; (800637c <KeyboardCheck+0x464>)
 8006250:	7adb      	ldrb	r3, [r3, #11]
 8006252:	461a      	mov	r2, r3
 8006254:	4b47      	ldr	r3, [pc, #284]	; (8006374 <KeyboardCheck+0x45c>)
 8006256:	7adb      	ldrb	r3, [r3, #11]
 8006258:	2b00      	cmp	r3, #0
 800625a:	bf0c      	ite	eq
 800625c:	2301      	moveq	r3, #1
 800625e:	2300      	movne	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	4013      	ands	r3, r2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <KeyboardCheck+0x356>
 8006268:	4b43      	ldr	r3, [pc, #268]	; (8006378 <KeyboardCheck+0x460>)
 800626a:	2201      	movs	r2, #1
 800626c:	72da      	strb	r2, [r3, #11]
	if(KeysRetain.PressUp 	& !KeysMirror.PressUp)		{KeysFlash.PressUp 		= 1;}
 800626e:	4b43      	ldr	r3, [pc, #268]	; (800637c <KeyboardCheck+0x464>)
 8006270:	7b1b      	ldrb	r3, [r3, #12]
 8006272:	461a      	mov	r2, r3
 8006274:	4b3f      	ldr	r3, [pc, #252]	; (8006374 <KeyboardCheck+0x45c>)
 8006276:	7b1b      	ldrb	r3, [r3, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	bf0c      	ite	eq
 800627c:	2301      	moveq	r3, #1
 800627e:	2300      	movne	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	4013      	ands	r3, r2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <KeyboardCheck+0x376>
 8006288:	4b3b      	ldr	r3, [pc, #236]	; (8006378 <KeyboardCheck+0x460>)
 800628a:	2201      	movs	r2, #1
 800628c:	731a      	strb	r2, [r3, #12]
	if(KeysRetain.AHH3_Pusk & !KeysMirror.AHH3_Pusk)	{KeysFlash.AHH3_Pusk 	= 1;}
 800628e:	4b3b      	ldr	r3, [pc, #236]	; (800637c <KeyboardCheck+0x464>)
 8006290:	7b5b      	ldrb	r3, [r3, #13]
 8006292:	461a      	mov	r2, r3
 8006294:	4b37      	ldr	r3, [pc, #220]	; (8006374 <KeyboardCheck+0x45c>)
 8006296:	7b5b      	ldrb	r3, [r3, #13]
 8006298:	2b00      	cmp	r3, #0
 800629a:	bf0c      	ite	eq
 800629c:	2301      	moveq	r3, #1
 800629e:	2300      	movne	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	4013      	ands	r3, r2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <KeyboardCheck+0x396>
 80062a8:	4b33      	ldr	r3, [pc, #204]	; (8006378 <KeyboardCheck+0x460>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	735a      	strb	r2, [r3, #13]
	if(KeysRetain.AHH2_Pusk & !KeysMirror.AHH2_Pusk)	{KeysFlash.AHH2_Pusk 	= 1;}
 80062ae:	4b33      	ldr	r3, [pc, #204]	; (800637c <KeyboardCheck+0x464>)
 80062b0:	7b9b      	ldrb	r3, [r3, #14]
 80062b2:	461a      	mov	r2, r3
 80062b4:	4b2f      	ldr	r3, [pc, #188]	; (8006374 <KeyboardCheck+0x45c>)
 80062b6:	7b9b      	ldrb	r3, [r3, #14]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <KeyboardCheck+0x3b6>
 80062c8:	4b2b      	ldr	r3, [pc, #172]	; (8006378 <KeyboardCheck+0x460>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	739a      	strb	r2, [r3, #14]
	if(KeysRetain.AHH1_Pusk & !KeysMirror.AHH1_Pusk)	{KeysFlash.AHH1_Pusk 	= 1;}
 80062ce:	4b2b      	ldr	r3, [pc, #172]	; (800637c <KeyboardCheck+0x464>)
 80062d0:	7bdb      	ldrb	r3, [r3, #15]
 80062d2:	461a      	mov	r2, r3
 80062d4:	4b27      	ldr	r3, [pc, #156]	; (8006374 <KeyboardCheck+0x45c>)
 80062d6:	7bdb      	ldrb	r3, [r3, #15]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bf0c      	ite	eq
 80062dc:	2301      	moveq	r3, #1
 80062de:	2300      	movne	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <KeyboardCheck+0x3d6>
 80062e8:	4b23      	ldr	r3, [pc, #140]	; (8006378 <KeyboardCheck+0x460>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	73da      	strb	r2, [r3, #15]

	KeysMirror.ESC 			= KeysRetain.ESC;
 80062ee:	4b23      	ldr	r3, [pc, #140]	; (800637c <KeyboardCheck+0x464>)
 80062f0:	781a      	ldrb	r2, [r3, #0]
 80062f2:	4b20      	ldr	r3, [pc, #128]	; (8006374 <KeyboardCheck+0x45c>)
 80062f4:	701a      	strb	r2, [r3, #0]
	KeysMirror.ENT 			= KeysRetain.ENT;
 80062f6:	4b21      	ldr	r3, [pc, #132]	; (800637c <KeyboardCheck+0x464>)
 80062f8:	785a      	ldrb	r2, [r3, #1]
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <KeyboardCheck+0x45c>)
 80062fc:	705a      	strb	r2, [r3, #1]
	KeysMirror.Right 		= KeysRetain.Right;
 80062fe:	4b1f      	ldr	r3, [pc, #124]	; (800637c <KeyboardCheck+0x464>)
 8006300:	789a      	ldrb	r2, [r3, #2]
 8006302:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <KeyboardCheck+0x45c>)
 8006304:	709a      	strb	r2, [r3, #2]
	KeysMirror.Left 		= KeysRetain.Left;
 8006306:	4b1d      	ldr	r3, [pc, #116]	; (800637c <KeyboardCheck+0x464>)
 8006308:	78da      	ldrb	r2, [r3, #3]
 800630a:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <KeyboardCheck+0x45c>)
 800630c:	70da      	strb	r2, [r3, #3]
	KeysMirror.Down 		= KeysRetain.Down;
 800630e:	4b1b      	ldr	r3, [pc, #108]	; (800637c <KeyboardCheck+0x464>)
 8006310:	791a      	ldrb	r2, [r3, #4]
 8006312:	4b18      	ldr	r3, [pc, #96]	; (8006374 <KeyboardCheck+0x45c>)
 8006314:	711a      	strb	r2, [r3, #4]
	KeysMirror.Up 			= KeysRetain.Up;
 8006316:	4b19      	ldr	r3, [pc, #100]	; (800637c <KeyboardCheck+0x464>)
 8006318:	795a      	ldrb	r2, [r3, #5]
 800631a:	4b16      	ldr	r3, [pc, #88]	; (8006374 <KeyboardCheck+0x45c>)
 800631c:	715a      	strb	r2, [r3, #5]
	KeysMirror.PressDown 	= KeysRetain.PressDown;
 800631e:	4b17      	ldr	r3, [pc, #92]	; (800637c <KeyboardCheck+0x464>)
 8006320:	799a      	ldrb	r2, [r3, #6]
 8006322:	4b14      	ldr	r3, [pc, #80]	; (8006374 <KeyboardCheck+0x45c>)
 8006324:	719a      	strb	r2, [r3, #6]
	KeysMirror.AHH3_Stop 	= KeysRetain.AHH3_Stop;
 8006326:	4b15      	ldr	r3, [pc, #84]	; (800637c <KeyboardCheck+0x464>)
 8006328:	79da      	ldrb	r2, [r3, #7]
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <KeyboardCheck+0x45c>)
 800632c:	71da      	strb	r2, [r3, #7]
	KeysMirror.AutoPusk 	= KeysRetain.AutoPusk;
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <KeyboardCheck+0x464>)
 8006330:	7a1a      	ldrb	r2, [r3, #8]
 8006332:	4b10      	ldr	r3, [pc, #64]	; (8006374 <KeyboardCheck+0x45c>)
 8006334:	721a      	strb	r2, [r3, #8]
	KeysMirror.AutoStop 	= KeysRetain.AutoStop;
 8006336:	4b11      	ldr	r3, [pc, #68]	; (800637c <KeyboardCheck+0x464>)
 8006338:	7a5a      	ldrb	r2, [r3, #9]
 800633a:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <KeyboardCheck+0x45c>)
 800633c:	725a      	strb	r2, [r3, #9]
	KeysMirror.AHH1_Stop 	= KeysRetain.AHH1_Stop;
 800633e:	4b0f      	ldr	r3, [pc, #60]	; (800637c <KeyboardCheck+0x464>)
 8006340:	7a9a      	ldrb	r2, [r3, #10]
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <KeyboardCheck+0x45c>)
 8006344:	729a      	strb	r2, [r3, #10]
	KeysMirror.AHH2_Stop 	= KeysRetain.AHH2_Stop;
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <KeyboardCheck+0x464>)
 8006348:	7ada      	ldrb	r2, [r3, #11]
 800634a:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <KeyboardCheck+0x45c>)
 800634c:	72da      	strb	r2, [r3, #11]
	KeysMirror.PressUp 		= KeysRetain.PressUp;
 800634e:	4b0b      	ldr	r3, [pc, #44]	; (800637c <KeyboardCheck+0x464>)
 8006350:	7b1a      	ldrb	r2, [r3, #12]
 8006352:	4b08      	ldr	r3, [pc, #32]	; (8006374 <KeyboardCheck+0x45c>)
 8006354:	731a      	strb	r2, [r3, #12]
	KeysMirror.AHH3_Pusk 	= KeysRetain.AHH3_Pusk;
 8006356:	4b09      	ldr	r3, [pc, #36]	; (800637c <KeyboardCheck+0x464>)
 8006358:	7b5a      	ldrb	r2, [r3, #13]
 800635a:	4b06      	ldr	r3, [pc, #24]	; (8006374 <KeyboardCheck+0x45c>)
 800635c:	735a      	strb	r2, [r3, #13]
	KeysMirror.AHH2_Pusk 	= KeysRetain.AHH2_Pusk;
 800635e:	4b07      	ldr	r3, [pc, #28]	; (800637c <KeyboardCheck+0x464>)
 8006360:	7b9a      	ldrb	r2, [r3, #14]
 8006362:	4b04      	ldr	r3, [pc, #16]	; (8006374 <KeyboardCheck+0x45c>)
 8006364:	739a      	strb	r2, [r3, #14]
	KeysMirror.AHH1_Pusk 	= KeysRetain.AHH1_Pusk;
 8006366:	4b05      	ldr	r3, [pc, #20]	; (800637c <KeyboardCheck+0x464>)
 8006368:	7bda      	ldrb	r2, [r3, #15]
 800636a:	4b02      	ldr	r3, [pc, #8]	; (8006374 <KeyboardCheck+0x45c>)
 800636c:	73da      	strb	r2, [r3, #15]

}
 800636e:	bf00      	nop
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000b6c 	.word	0x20000b6c
 8006378:	20000b5c 	.word	0x20000b5c
 800637c:	20000b4c 	.word	0x20000b4c

08006380 <KeyboardClear>:

void KeyboardClear(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
	KeysFlash.ESC 			= 0;
 8006384:	4b1a      	ldr	r3, [pc, #104]	; (80063f0 <KeyboardClear+0x70>)
 8006386:	2200      	movs	r2, #0
 8006388:	701a      	strb	r2, [r3, #0]
	KeysFlash.ENT 			= 0;
 800638a:	4b19      	ldr	r3, [pc, #100]	; (80063f0 <KeyboardClear+0x70>)
 800638c:	2200      	movs	r2, #0
 800638e:	705a      	strb	r2, [r3, #1]
	KeysFlash.Right 		= 0;
 8006390:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <KeyboardClear+0x70>)
 8006392:	2200      	movs	r2, #0
 8006394:	709a      	strb	r2, [r3, #2]
	KeysFlash.Left 			= 0;
 8006396:	4b16      	ldr	r3, [pc, #88]	; (80063f0 <KeyboardClear+0x70>)
 8006398:	2200      	movs	r2, #0
 800639a:	70da      	strb	r2, [r3, #3]
	KeysFlash.Down 			= 0;
 800639c:	4b14      	ldr	r3, [pc, #80]	; (80063f0 <KeyboardClear+0x70>)
 800639e:	2200      	movs	r2, #0
 80063a0:	711a      	strb	r2, [r3, #4]
	KeysFlash.Up 			= 0;
 80063a2:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <KeyboardClear+0x70>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	715a      	strb	r2, [r3, #5]
	KeysFlash.PressDown 	= 0;
 80063a8:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <KeyboardClear+0x70>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	719a      	strb	r2, [r3, #6]
	KeysFlash.AHH3_Stop 	= 0;
 80063ae:	4b10      	ldr	r3, [pc, #64]	; (80063f0 <KeyboardClear+0x70>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	71da      	strb	r2, [r3, #7]
	KeysFlash.AutoPusk 		= 0;
 80063b4:	4b0e      	ldr	r3, [pc, #56]	; (80063f0 <KeyboardClear+0x70>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	721a      	strb	r2, [r3, #8]
	KeysFlash.AutoStop 		= 0;
 80063ba:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <KeyboardClear+0x70>)
 80063bc:	2200      	movs	r2, #0
 80063be:	725a      	strb	r2, [r3, #9]
	KeysFlash.AHH1_Stop 	= 0;
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <KeyboardClear+0x70>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	729a      	strb	r2, [r3, #10]
	KeysFlash.AHH2_Stop 	= 0;
 80063c6:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <KeyboardClear+0x70>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	72da      	strb	r2, [r3, #11]
	KeysFlash.PressUp 		= 0;
 80063cc:	4b08      	ldr	r3, [pc, #32]	; (80063f0 <KeyboardClear+0x70>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	731a      	strb	r2, [r3, #12]
	KeysFlash.AHH3_Pusk 	= 0;
 80063d2:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <KeyboardClear+0x70>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	735a      	strb	r2, [r3, #13]
	KeysFlash.AHH2_Pusk 	= 0;
 80063d8:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <KeyboardClear+0x70>)
 80063da:	2200      	movs	r2, #0
 80063dc:	739a      	strb	r2, [r3, #14]
	KeysFlash.AHH1_Pusk 	= 0;
 80063de:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <KeyboardClear+0x70>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	73da      	strb	r2, [r3, #15]
}
 80063e4:	bf00      	nop
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	20000b5c 	.word	0x20000b5c

080063f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80063f8:	4b06      	ldr	r3, [pc, #24]	; (8006414 <SystemInit+0x20>)
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fe:	4a05      	ldr	r2, [pc, #20]	; (8006414 <SystemInit+0x20>)
 8006400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006408:	bf00      	nop
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	e000ed00 	.word	0xe000ed00

08006418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006450 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800641c:	480d      	ldr	r0, [pc, #52]	; (8006454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800641e:	490e      	ldr	r1, [pc, #56]	; (8006458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006420:	4a0e      	ldr	r2, [pc, #56]	; (800645c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006424:	e002      	b.n	800642c <LoopCopyDataInit>

08006426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800642a:	3304      	adds	r3, #4

0800642c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800642c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800642e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006430:	d3f9      	bcc.n	8006426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006432:	4a0b      	ldr	r2, [pc, #44]	; (8006460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006434:	4c0b      	ldr	r4, [pc, #44]	; (8006464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006438:	e001      	b.n	800643e <LoopFillZerobss>

0800643a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800643a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800643c:	3204      	adds	r2, #4

0800643e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800643e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006440:	d3fb      	bcc.n	800643a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006442:	f7ff ffd7 	bl	80063f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006446:	f005 fd55 	bl	800bef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800644a:	f7fe f953 	bl	80046f4 <main>
  bx  lr    
 800644e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006450:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006458:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800645c:	08012568 	.word	0x08012568
  ldr r2, =_sbss
 8006460:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8006464:	20000ba8 	.word	0x20000ba8

08006468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006468:	e7fe      	b.n	8006468 <ADC_IRQHandler>

0800646a <DrawChar_16>:
//extern Settings Settings_DB;
extern InterfaceControlDB Control_DB;


void DrawChar_16(uint8_t Char, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint16_t Table[], uint16_t width_char, uint16_t height_char)
{
 800646a:	b590      	push	{r4, r7, lr}
 800646c:	b089      	sub	sp, #36	; 0x24
 800646e:	af00      	add	r7, sp, #0
 8006470:	4604      	mov	r4, r0
 8006472:	4608      	mov	r0, r1
 8006474:	4611      	mov	r1, r2
 8006476:	461a      	mov	r2, r3
 8006478:	4623      	mov	r3, r4
 800647a:	71fb      	strb	r3, [r7, #7]
 800647c:	4603      	mov	r3, r0
 800647e:	80bb      	strh	r3, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	807b      	strh	r3, [r7, #2]
 8006484:	4613      	mov	r3, r2
 8006486:	803b      	strh	r3, [r7, #0]
	uint32_t Color_RGB;
	uint16_t Horizontal_line;
	struct {uint8_t b,g,r;} *vbuf=Video_buffer_pointer;
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	613b      	str	r3, [r7, #16]

	for(int j=0;j<height_char;j++)
 800648c:	2300      	movs	r3, #0
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	e044      	b.n	800651c <DrawChar_16+0xb2>
	{
		Horizontal_line = Table[(Char * height_char) + j];
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006498:	fb03 f202 	mul.w	r2, r3, r2
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	4413      	add	r3, r2
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064a4:	4413      	add	r3, r2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	83fb      	strh	r3, [r7, #30]
		Horizontal_line = Horizontal_line >> (16 - width_char);
 80064aa:	8bfa      	ldrh	r2, [r7, #30]
 80064ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064b0:	f1c3 0310 	rsb	r3, r3, #16
 80064b4:	fa42 f303 	asr.w	r3, r2, r3
 80064b8:	83fb      	strh	r3, [r7, #30]

		for(int i=width_char;i>0;i--)
 80064ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e026      	b.n	8006510 <DrawChar_16+0xa6>
		{

			if(Horizontal_line & 0x1)
 80064c2:	8bfb      	ldrh	r3, [r7, #30]
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <DrawChar_16+0x68>
			{
				Color_RGB = Symbol_Color;
 80064cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	e001      	b.n	80064d6 <DrawChar_16+0x6c>
			}
			else
			{
				Color_RGB = Font_Color;
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	60fb      	str	r3, [r7, #12]
			}

			memcpy(&vbuf[Coord_X + ((Coord_Y+j) * Resolution_X) + i].b, &Color_RGB, 3);
 80064d6:	88ba      	ldrh	r2, [r7, #4]
 80064d8:	8879      	ldrh	r1, [r7, #2]
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	440b      	add	r3, r1
 80064de:	8839      	ldrh	r1, [r7, #0]
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	441a      	add	r2, r3
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	4413      	add	r3, r2
 80064ea:	461a      	mov	r2, r3
 80064ec:	4613      	mov	r3, r2
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	4413      	add	r3, r2
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4413      	add	r3, r2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f107 030c 	add.w	r3, r7, #12
 80064fc:	2203      	movs	r2, #3
 80064fe:	4619      	mov	r1, r3
 8006500:	f005 fd36 	bl	800bf70 <memcpy>
			Horizontal_line = Horizontal_line >> 1;
 8006504:	8bfb      	ldrh	r3, [r7, #30]
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	83fb      	strh	r3, [r7, #30]
		for(int i=width_char;i>0;i--)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	3b01      	subs	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2b00      	cmp	r3, #0
 8006514:	dcd5      	bgt.n	80064c2 <DrawChar_16+0x58>
	for(int j=0;j<height_char;j++)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	3301      	adds	r3, #1
 800651a:	61bb      	str	r3, [r7, #24]
 800651c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	429a      	cmp	r2, r3
 8006524:	dbb5      	blt.n	8006492 <DrawChar_16+0x28>
		}

	}

}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	3724      	adds	r7, #36	; 0x24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd90      	pop	{r4, r7, pc}

08006530 <DrawChar_32>:


void DrawChar_32(uint8_t Char, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8006530:	b590      	push	{r4, r7, lr}
 8006532:	b089      	sub	sp, #36	; 0x24
 8006534:	af00      	add	r7, sp, #0
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	4611      	mov	r1, r2
 800653c:	461a      	mov	r2, r3
 800653e:	4623      	mov	r3, r4
 8006540:	71fb      	strb	r3, [r7, #7]
 8006542:	4603      	mov	r3, r0
 8006544:	80bb      	strh	r3, [r7, #4]
 8006546:	460b      	mov	r3, r1
 8006548:	807b      	strh	r3, [r7, #2]
 800654a:	4613      	mov	r3, r2
 800654c:	803b      	strh	r3, [r7, #0]
	uint32_t Color_RGB;
	uint32_t Horizontal_line;
	struct {uint8_t b,g,r;} *vbuf=Video_buffer_pointer;
 800654e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006550:	613b      	str	r3, [r7, #16]
	Char = Char - 32;
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	3b20      	subs	r3, #32
 8006556:	71fb      	strb	r3, [r7, #7]

	for(int j=0;j<height_char;j++)
 8006558:	2300      	movs	r3, #0
 800655a:	61bb      	str	r3, [r7, #24]
 800655c:	e044      	b.n	80065e8 <DrawChar_32+0xb8>
	{
		Horizontal_line = Table[(Char * height_char) + j];
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006564:	fb03 f202 	mul.w	r2, r3, r2
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006570:	4413      	add	r3, r2
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	61fb      	str	r3, [r7, #28]
		Horizontal_line = Horizontal_line >> (32 - width_char);
 8006576:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800657a:	f1c3 0320 	rsb	r3, r3, #32
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
 8006584:	61fb      	str	r3, [r7, #28]

		for(int i=width_char;i>0;i--)
 8006586:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e026      	b.n	80065dc <DrawChar_32+0xac>
		{

			if(Horizontal_line & 0x1)
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <DrawChar_32+0x6e>
			{
				Color_RGB = Symbol_Color;
 8006598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e001      	b.n	80065a2 <DrawChar_32+0x72>
			}
			else
			{
				Color_RGB = Font_Color;
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	60fb      	str	r3, [r7, #12]
			}

			memcpy(&vbuf[Coord_X + ((Coord_Y+j) * Resolution_X) + i].b, &Color_RGB, 3);
 80065a2:	88ba      	ldrh	r2, [r7, #4]
 80065a4:	8879      	ldrh	r1, [r7, #2]
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	440b      	add	r3, r1
 80065aa:	8839      	ldrh	r1, [r7, #0]
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	441a      	add	r2, r3
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	4413      	add	r3, r2
 80065b6:	461a      	mov	r2, r3
 80065b8:	4613      	mov	r3, r2
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	4413      	add	r3, r2
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4413      	add	r3, r2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f107 030c 	add.w	r3, r7, #12
 80065c8:	2203      	movs	r2, #3
 80065ca:	4619      	mov	r1, r3
 80065cc:	f005 fcd0 	bl	800bf70 <memcpy>
			Horizontal_line = Horizontal_line >> 1;
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	085b      	lsrs	r3, r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
		for(int i=width_char;i>0;i--)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	3b01      	subs	r3, #1
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	dcd5      	bgt.n	800658e <DrawChar_32+0x5e>
	for(int j=0;j<height_char;j++)
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	3301      	adds	r3, #1
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	dbb5      	blt.n	800655e <DrawChar_32+0x2e>
		}
	}
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	3724      	adds	r7, #36	; 0x24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd90      	pop	{r4, r7, pc}

080065fc <DrawString_16>:


void DrawString_16(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b09b      	sub	sp, #108	; 0x6c
 8006600:	af08      	add	r7, sp, #32
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	4608      	mov	r0, r1
 8006606:	4611      	mov	r1, r2
 8006608:	461a      	mov	r2, r3
 800660a:	4603      	mov	r3, r0
 800660c:	817b      	strh	r3, [r7, #10]
 800660e:	460b      	mov	r3, r1
 8006610:	813b      	strh	r3, [r7, #8]
 8006612:	4613      	mov	r3, r2
 8006614:	80fb      	strh	r3, [r7, #6]
	char String2[50];
	for(int i=0;i<Len;i++)
 8006616:	2300      	movs	r3, #0
 8006618:	647b      	str	r3, [r7, #68]	; 0x44
 800661a:	e034      	b.n	8006686 <DrawString_16+0x8a>
	{
	String2[i] = String[i] - 32;
 800661c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	3b20      	subs	r3, #32
 8006626:	b2d9      	uxtb	r1, r3
 8006628:	f107 0210 	add.w	r2, r7, #16
 800662c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662e:	4413      	add	r3, r2
 8006630:	460a      	mov	r2, r1
 8006632:	701a      	strb	r2, [r3, #0]
	DrawChar_16(String2[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8006634:	f107 0210 	add.w	r2, r7, #16
 8006638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800663a:	4413      	add	r3, r2
 800663c:	7818      	ldrb	r0, [r3, #0]
 800663e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006640:	b29b      	uxth	r3, r3
 8006642:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8006646:	fb12 f303 	smulbb	r3, r2, r3
 800664a:	b29a      	uxth	r2, r3
 800664c:	893b      	ldrh	r3, [r7, #8]
 800664e:	4413      	add	r3, r2
 8006650:	b299      	uxth	r1, r3
 8006652:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 8006656:	88fa      	ldrh	r2, [r7, #6]
 8006658:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800665c:	9306      	str	r3, [sp, #24]
 800665e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8006662:	9305      	str	r3, [sp, #20]
 8006664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006666:	9304      	str	r3, [sp, #16]
 8006668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800666a:	9303      	str	r3, [sp, #12]
 800666c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800666e:	9302      	str	r3, [sp, #8]
 8006670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006672:	9301      	str	r3, [sp, #4]
 8006674:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	4623      	mov	r3, r4
 800667c:	f7ff fef5 	bl	800646a <DrawChar_16>
	for(int i=0;i<Len;i++)
 8006680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006682:	3301      	adds	r3, #1
 8006684:	647b      	str	r3, [r7, #68]	; 0x44
 8006686:	897b      	ldrh	r3, [r7, #10]
 8006688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800668a:	429a      	cmp	r2, r3
 800668c:	dbc6      	blt.n	800661c <DrawString_16+0x20>
	}
}
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	374c      	adds	r7, #76	; 0x4c
 8006694:	46bd      	mov	sp, r7
 8006696:	bd90      	pop	{r4, r7, pc}

08006698 <Centred_DrawString_16>:

void Centred_DrawString_16(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	; 0x30
 800669c:	af08      	add	r7, sp, #32
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	4608      	mov	r0, r1
 80066a2:	4611      	mov	r1, r2
 80066a4:	461a      	mov	r2, r3
 80066a6:	4603      	mov	r3, r0
 80066a8:	817b      	strh	r3, [r7, #10]
 80066aa:	460b      	mov	r3, r1
 80066ac:	813b      	strh	r3, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (height_char / 2);
 80066b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80066b4:	085b      	lsrs	r3, r3, #1
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	88fa      	ldrh	r2, [r7, #6]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	80fb      	strh	r3, [r7, #6]
	Coord_X = Coord_X - ((width_char * Len) / 2);
 80066be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80066c0:	897a      	ldrh	r2, [r7, #10]
 80066c2:	fb02 f303 	mul.w	r3, r2, r3
 80066c6:	0fda      	lsrs	r2, r3, #31
 80066c8:	4413      	add	r3, r2
 80066ca:	105b      	asrs	r3, r3, #1
 80066cc:	425b      	negs	r3, r3
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	893b      	ldrh	r3, [r7, #8]
 80066d2:	4413      	add	r3, r2
 80066d4:	813b      	strh	r3, [r7, #8]
	DrawString_16(String, Len, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 80066d6:	88f8      	ldrh	r0, [r7, #6]
 80066d8:	893a      	ldrh	r2, [r7, #8]
 80066da:	8979      	ldrh	r1, [r7, #10]
 80066dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80066de:	9307      	str	r3, [sp, #28]
 80066e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80066e2:	9306      	str	r3, [sp, #24]
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	9305      	str	r3, [sp, #20]
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	9303      	str	r3, [sp, #12]
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	9302      	str	r3, [sp, #8]
 80066f4:	8bbb      	ldrh	r3, [r7, #28]
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	8b3b      	ldrh	r3, [r7, #24]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	4603      	mov	r3, r0
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7ff ff7c 	bl	80065fc <DrawString_16>
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <Short_Left_Colored_RU_DrawString_32>:
	Coord_Y = Coord_Y - (27 / 2);
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, BackgroundColor, BasicSymbolColor, RU_18x27_Table, 18, 27);
}

void Short_Left_Colored_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t PageNumber)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08c      	sub	sp, #48	; 0x30
 8006710:	af08      	add	r7, sp, #32
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	4608      	mov	r0, r1
 8006716:	4611      	mov	r1, r2
 8006718:	461a      	mov	r2, r3
 800671a:	4603      	mov	r3, r0
 800671c:	817b      	strh	r3, [r7, #10]
 800671e:	460b      	mov	r3, r1
 8006720:	813b      	strh	r3, [r7, #8]
 8006722:	4613      	mov	r3, r2
 8006724:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (27 / 2);
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	3b0d      	subs	r3, #13
 800672a:	80fb      	strh	r3, [r7, #6]
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
 800672c:	88f8      	ldrh	r0, [r7, #6]
 800672e:	893a      	ldrh	r2, [r7, #8]
 8006730:	8979      	ldrh	r1, [r7, #10]
 8006732:	231b      	movs	r3, #27
 8006734:	9307      	str	r3, [sp, #28]
 8006736:	2312      	movs	r3, #18
 8006738:	9306      	str	r3, [sp, #24]
 800673a:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <Short_Left_Colored_RU_DrawString_32+0x5c>)
 800673c:	9305      	str	r3, [sp, #20]
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	9304      	str	r3, [sp, #16]
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	9303      	str	r3, [sp, #12]
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	9302      	str	r3, [sp, #8]
 800674a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	4603      	mov	r3, r0
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f807 	bl	800676c <RU_DrawString_32>
}
 800675e:	bf00      	nop
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	0800dc2c 	.word	0x0800dc2c

0800676c <RU_DrawString_32>:
	DrawChar_32(String[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
	}
}

void RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 800676c:	b590      	push	{r4, r7, lr}
 800676e:	b0ab      	sub	sp, #172	; 0xac
 8006770:	af08      	add	r7, sp, #32
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	4608      	mov	r0, r1
 8006776:	4611      	mov	r1, r2
 8006778:	461a      	mov	r2, r3
 800677a:	4603      	mov	r3, r0
 800677c:	817b      	strh	r3, [r7, #10]
 800677e:	460b      	mov	r3, r1
 8006780:	813b      	strh	r3, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	80fb      	strh	r3, [r7, #6]

	uint8_t String_OUT[100];
	uint16_t num = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint16_t limit = Len*2;
 800678c:	897b      	ldrh	r3, [r7, #10]
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	for(int i=0;i<limit;i++)
 8006794:	2300      	movs	r3, #0
 8006796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800679a:	e04a      	b.n	8006832 <RU_DrawString_32+0xc6>
	{
		if(String[i]>=208)
 800679c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2bcf      	cmp	r3, #207	; 0xcf
 80067a8:	d929      	bls.n	80067fe <RU_DrawString_32+0x92>
		{
			if(String[i]==208){String_OUT[num] = (String[i+1] - 79);}
 80067aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2bd0      	cmp	r3, #208	; 0xd0
 80067b6:	d10e      	bne.n	80067d6 <RU_DrawString_32+0x6a>
 80067b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067bc:	3301      	adds	r3, #1
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	781a      	ldrb	r2, [r3, #0]
 80067c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80067c8:	3a4f      	subs	r2, #79	; 0x4f
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	3388      	adds	r3, #136	; 0x88
 80067ce:	443b      	add	r3, r7
 80067d0:	f803 2c74 	strb.w	r2, [r3, #-116]
 80067d4:	e00d      	b.n	80067f2 <RU_DrawString_32+0x86>
			else{String_OUT[num] = (String[i+1] - 15);}
 80067d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067da:	3301      	adds	r3, #1
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80067e6:	3a0f      	subs	r2, #15
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	3388      	adds	r3, #136	; 0x88
 80067ec:	443b      	add	r3, r7
 80067ee:	f803 2c74 	strb.w	r2, [r3, #-116]
			i++;
 80067f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067f6:	3301      	adds	r3, #1
 80067f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067fc:	e00f      	b.n	800681e <RU_DrawString_32+0xb2>
		}
		else
		{
			String_OUT[num] = (String[i]);
 80067fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	441a      	add	r2, r3
 8006806:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800680a:	7812      	ldrb	r2, [r2, #0]
 800680c:	3388      	adds	r3, #136	; 0x88
 800680e:	443b      	add	r3, r7
 8006810:	f803 2c74 	strb.w	r2, [r3, #-116]
			limit--;
 8006814:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006818:	3b01      	subs	r3, #1
 800681a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		}
		num++;
 800681e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006822:	3301      	adds	r3, #1
 8006824:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	for(int i=0;i<limit;i++)
 8006828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800682c:	3301      	adds	r3, #1
 800682e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006832:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006836:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800683a:	429a      	cmp	r2, r3
 800683c:	dbae      	blt.n	800679c <RU_DrawString_32+0x30>
	}

	for(int i=num;i<(Len*2);i++){String_OUT[i]=0;}
 800683e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006842:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006844:	e008      	b.n	8006858 <RU_DrawString_32+0xec>
 8006846:	f107 0214 	add.w	r2, r7, #20
 800684a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800684c:	4413      	add	r3, r2
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006854:	3301      	adds	r3, #1
 8006856:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006858:	897b      	ldrh	r3, [r7, #10]
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800685e:	429a      	cmp	r2, r3
 8006860:	dbf1      	blt.n	8006846 <RU_DrawString_32+0xda>


	for(int i=0;i<Len;i++)
 8006862:	2300      	movs	r3, #0
 8006864:	67bb      	str	r3, [r7, #120]	; 0x78
 8006866:	e02c      	b.n	80068c2 <RU_DrawString_32+0x156>
	{
		DrawChar_32(String_OUT[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color,
 8006868:	f107 0214 	add.w	r2, r7, #20
 800686c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800686e:	4413      	add	r3, r2
 8006870:	7818      	ldrb	r0, [r3, #0]
 8006872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006874:	b29b      	uxth	r3, r3
 8006876:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 800687a:	fb12 f303 	smulbb	r3, r2, r3
 800687e:	b29a      	uxth	r2, r3
 8006880:	893b      	ldrh	r3, [r7, #8]
 8006882:	4413      	add	r3, r2
 8006884:	b299      	uxth	r1, r3
 8006886:	f8b7 4098 	ldrh.w	r4, [r7, #152]	; 0x98
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006890:	9306      	str	r3, [sp, #24]
 8006892:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006896:	9305      	str	r3, [sp, #20]
 8006898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800689c:	9304      	str	r3, [sp, #16]
 800689e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068a2:	9303      	str	r3, [sp, #12]
 80068a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068a8:	9302      	str	r3, [sp, #8]
 80068aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	4623      	mov	r3, r4
 80068b8:	f7ff fe3a 	bl	8006530 <DrawChar_32>
	for(int i=0;i<Len;i++)
 80068bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068be:	3301      	adds	r3, #1
 80068c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80068c2:	897b      	ldrh	r3, [r7, #10]
 80068c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068c6:	429a      	cmp	r2, r3
 80068c8:	dbce      	blt.n	8006868 <RU_DrawString_32+0xfc>
				Table, width_char, height_char);
	}
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	378c      	adds	r7, #140	; 0x8c
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd90      	pop	{r4, r7, pc}

080068d4 <Centred_RU_DrawString_32>:

void Centred_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	; 0x30
 80068d8:	af08      	add	r7, sp, #32
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	4608      	mov	r0, r1
 80068de:	4611      	mov	r1, r2
 80068e0:	461a      	mov	r2, r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	817b      	strh	r3, [r7, #10]
 80068e6:	460b      	mov	r3, r1
 80068e8:	813b      	strh	r3, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (height_char / 2);
 80068ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068f0:	085b      	lsrs	r3, r3, #1
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	88fa      	ldrh	r2, [r7, #6]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	80fb      	strh	r3, [r7, #6]
	Coord_X = Coord_X - ((width_char * Len) / 2);
 80068fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80068fc:	897a      	ldrh	r2, [r7, #10]
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	0fda      	lsrs	r2, r3, #31
 8006904:	4413      	add	r3, r2
 8006906:	105b      	asrs	r3, r3, #1
 8006908:	425b      	negs	r3, r3
 800690a:	b29a      	uxth	r2, r3
 800690c:	893b      	ldrh	r3, [r7, #8]
 800690e:	4413      	add	r3, r2
 8006910:	813b      	strh	r3, [r7, #8]
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8006912:	88f8      	ldrh	r0, [r7, #6]
 8006914:	893a      	ldrh	r2, [r7, #8]
 8006916:	8979      	ldrh	r1, [r7, #10]
 8006918:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800691a:	9307      	str	r3, [sp, #28]
 800691c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800691e:	9306      	str	r3, [sp, #24]
 8006920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006922:	9305      	str	r3, [sp, #20]
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	9304      	str	r3, [sp, #16]
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	9303      	str	r3, [sp, #12]
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	9302      	str	r3, [sp, #8]
 8006930:	8bbb      	ldrh	r3, [r7, #28]
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	8b3b      	ldrh	r3, [r7, #24]
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	4603      	mov	r3, r0
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff ff16 	bl	800676c <RU_DrawString_32>
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <Short_Centred_RU_DrawString_32>:

void Short_Centred_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X,
		uint16_t Coord_Y, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t PageNumber)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08c      	sub	sp, #48	; 0x30
 800694c:	af08      	add	r7, sp, #32
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	4608      	mov	r0, r1
 8006952:	4611      	mov	r1, r2
 8006954:	461a      	mov	r2, r3
 8006956:	4603      	mov	r3, r0
 8006958:	817b      	strh	r3, [r7, #10]
 800695a:	460b      	mov	r3, r1
 800695c:	813b      	strh	r3, [r7, #8]
 800695e:	4613      	mov	r3, r2
 8006960:	80fb      	strh	r3, [r7, #6]
	Centred_RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
 8006962:	88f8      	ldrh	r0, [r7, #6]
 8006964:	893a      	ldrh	r2, [r7, #8]
 8006966:	8979      	ldrh	r1, [r7, #10]
 8006968:	231b      	movs	r3, #27
 800696a:	9307      	str	r3, [sp, #28]
 800696c:	2312      	movs	r3, #18
 800696e:	9306      	str	r3, [sp, #24]
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <Short_Centred_RU_DrawString_32+0x54>)
 8006972:	9305      	str	r3, [sp, #20]
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	9304      	str	r3, [sp, #16]
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	9303      	str	r3, [sp, #12]
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	9302      	str	r3, [sp, #8]
 8006980:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006984:	9301      	str	r3, [sp, #4]
 8006986:	f44f 7348 	mov.w	r3, #800	; 0x320
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	4603      	mov	r3, r0
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7ff ffa0 	bl	80068d4 <Centred_RU_DrawString_32>
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	0800dc2c 	.word	0x0800dc2c

080069a0 <Centred_DrawNumber_16>:
{
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, VideoBuffer, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
}

void Centred_DrawNumber_16(int16_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b09d      	sub	sp, #116	; 0x74
 80069a4:	af08      	add	r7, sp, #32
 80069a6:	4604      	mov	r4, r0
 80069a8:	4608      	mov	r0, r1
 80069aa:	4611      	mov	r1, r2
 80069ac:	461a      	mov	r2, r3
 80069ae:	4623      	mov	r3, r4
 80069b0:	80fb      	strh	r3, [r7, #6]
 80069b2:	4603      	mov	r3, r0
 80069b4:	80bb      	strh	r3, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	807b      	strh	r3, [r7, #2]
 80069ba:	4613      	mov	r3, r2
 80069bc:	803b      	strh	r3, [r7, #0]
	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 80069be:	2300      	movs	r3, #0
 80069c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c2:	e008      	b.n	80069d6 <Centred_DrawNumber_16+0x36>
 80069c4:	f107 0208 	add.w	r2, r7, #8
 80069c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ca:	4413      	add	r3, r2
 80069cc:	2200      	movs	r2, #0
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d2:	3301      	adds	r3, #1
 80069d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d8:	2b09      	cmp	r3, #9
 80069da:	ddf3      	ble.n	80069c4 <Centred_DrawNumber_16+0x24>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	  if(Register < 0)
 80069e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	da06      	bge.n	80069fe <Centred_DrawNumber_16+0x5e>
	  {
		  BelowZero = 1;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		  Register = 0 - Register;
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	425b      	negs	r3, r3
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	80fb      	strh	r3, [r7, #6]
	  }

	  if(Comma>5){Comma=5;}
 80069fe:	88bb      	ldrh	r3, [r7, #4]
 8006a00:	2b05      	cmp	r3, #5
 8006a02:	d901      	bls.n	8006a08 <Centred_DrawNumber_16+0x68>
 8006a04:	2305      	movs	r3, #5
 8006a06:	80bb      	strh	r3, [r7, #4]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 8006a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a0c:	f107 0114 	add.w	r1, r7, #20
 8006a10:	220a      	movs	r2, #10
 8006a12:	4618      	mov	r0, r3
 8006a14:	f005 faaa 	bl	800bf6c <itoa>

	  Cycle_Pointer = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8006a1e:	e004      	b.n	8006a2a <Centred_DrawNumber_16+0x8a>
	  {
		  Cycle_Pointer++;
 8006a20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a24:	3301      	adds	r3, #1
 8006a26:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8006a2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a2e:	3350      	adds	r3, #80	; 0x50
 8006a30:	443b      	add	r3, r7
 8006a32:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f2      	bne.n	8006a20 <Centred_DrawNumber_16+0x80>
	  }

	  TemporaryLenPointer = Numbers;
 8006a3a:	887b      	ldrh	r3, [r7, #2]
 8006a3c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  for(int i=TemporaryLenPointer;i;i--)
 8006a40:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006a44:	643b      	str	r3, [r7, #64]	; 0x40
 8006a46:	e00f      	b.n	8006a68 <Centred_DrawNumber_16+0xc8>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 8006a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	3350      	adds	r3, #80	; 0x50
 8006a4e:	443b      	add	r3, r7
 8006a50:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8006a54:	f803 2c48 	strb.w	r2, [r3, #-72]
		  TemporaryLenPointer--;
 8006a58:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  for(int i=TemporaryLenPointer;i;i--)
 8006a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a64:	3b01      	subs	r3, #1
 8006a66:	643b      	str	r3, [r7, #64]	; 0x40
 8006a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1ec      	bne.n	8006a48 <Centred_DrawNumber_16+0xa8>
	  }


	  if(Comma>0)
 8006a6e:	88bb      	ldrh	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d06b      	beq.n	8006b4c <Centred_DrawNumber_16+0x1ac>
	  {
		  if(Comma>=Cycle_Pointer)
 8006a74:	88ba      	ldrh	r2, [r7, #4]
 8006a76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d338      	bcc.n	8006af0 <Centred_DrawNumber_16+0x150>
		  {
			  Final_Len = Comma + 2;
 8006a7e:	88bb      	ldrh	r3, [r7, #4]
 8006a80:	3302      	adds	r3, #2
 8006a82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			  int8_t temp = Cycle_Pointer;
 8006a86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  for(int i=(Final_Len-1);i>=0;i--)
 8006a8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a92:	3b01      	subs	r3, #1
 8006a94:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a96:	e020      	b.n	8006ada <Centred_DrawNumber_16+0x13a>
			  {
				  if(temp)
 8006a98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d013      	beq.n	8006ac8 <Centred_DrawNumber_16+0x128>
				  {
					  temp--;
 8006aa0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					  String[i] = String[temp];
 8006aae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006ab2:	3350      	adds	r3, #80	; 0x50
 8006ab4:	443b      	add	r3, r7
 8006ab6:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8006aba:	f107 0214 	add.w	r2, r7, #20
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	4413      	add	r3, r2
 8006ac2:	460a      	mov	r2, r1
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e005      	b.n	8006ad4 <Centred_DrawNumber_16+0x134>
				  }
				  else
				  {
					  String[i] = '0';
 8006ac8:	f107 0214 	add.w	r2, r7, #20
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	4413      	add	r3, r2
 8006ad0:	2230      	movs	r2, #48	; 0x30
 8006ad2:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	dadb      	bge.n	8006a98 <Centred_DrawNumber_16+0xf8>
				  }
			  }
			  String[1] = ',';
 8006ae0:	232c      	movs	r3, #44	; 0x2c
 8006ae2:	757b      	strb	r3, [r7, #21]
			  Cycle_Pointer--;
 8006ae4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006aee:	e031      	b.n	8006b54 <Centred_DrawNumber_16+0x1b4>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 8006af0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006af4:	3301      	adds	r3, #1
 8006af6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			  for(int i=(Final_Len-1);i>=0;i--)
 8006afa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006afe:	3b01      	subs	r3, #1
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
 8006b02:	e015      	b.n	8006b30 <Centred_DrawNumber_16+0x190>
			  {
				  if( i > (Final_Len - Comma - 1))
 8006b04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006b08:	88bb      	ldrh	r3, [r7, #4]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	db0b      	blt.n	8006b2a <Centred_DrawNumber_16+0x18a>
				  {
					  String[i] = String[i-1];
 8006b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b14:	3b01      	subs	r3, #1
 8006b16:	3350      	adds	r3, #80	; 0x50
 8006b18:	443b      	add	r3, r7
 8006b1a:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8006b1e:	f107 0214 	add.w	r2, r7, #20
 8006b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b24:	4413      	add	r3, r2
 8006b26:	460a      	mov	r2, r1
 8006b28:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	dae6      	bge.n	8006b04 <Centred_DrawNumber_16+0x164>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 8006b36:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006b3a:	88bb      	ldrh	r3, [r7, #4]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	3350      	adds	r3, #80	; 0x50
 8006b42:	443b      	add	r3, r7
 8006b44:	222c      	movs	r2, #44	; 0x2c
 8006b46:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8006b4a:	e003      	b.n	8006b54 <Centred_DrawNumber_16+0x1b4>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 8006b4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b50:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46


	  if(BelowZero)
 8006b54:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01c      	beq.n	8006b96 <Centred_DrawNumber_16+0x1f6>
	  {
		  for(int i=Final_Len;i>=0;i--)
 8006b5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b60:	633b      	str	r3, [r7, #48]	; 0x30
 8006b62:	e00e      	b.n	8006b82 <Centred_DrawNumber_16+0x1e2>
		  {
			  String[i] = String[i - 1];
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	3b01      	subs	r3, #1
 8006b68:	3350      	adds	r3, #80	; 0x50
 8006b6a:	443b      	add	r3, r7
 8006b6c:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8006b70:	f107 0214 	add.w	r2, r7, #20
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	4413      	add	r3, r2
 8006b78:	460a      	mov	r2, r1
 8006b7a:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	633b      	str	r3, [r7, #48]	; 0x30
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	daed      	bge.n	8006b64 <Centred_DrawNumber_16+0x1c4>
		  }
		  String[0] = '-';
 8006b88:	232d      	movs	r3, #45	; 0x2d
 8006b8a:	753b      	strb	r3, [r7, #20]
		  Final_Len++;
 8006b8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b90:	3301      	adds	r3, #1
 8006b92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  }

		uint8_t StandartLen = Numbers;
 8006b96:	887b      	ldrh	r3, [r7, #2]
 8006b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t IschLen = Final_Len - 1;
 8006b9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(Final_Len < StandartLen)
 8006ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d236      	bcs.n	8006c24 <Centred_DrawNumber_16+0x284>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 8006bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bbe:	e02e      	b.n	8006c1e <Centred_DrawNumber_16+0x27e>
			{
				if(IschLen)
 8006bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d011      	beq.n	8006bec <Centred_DrawNumber_16+0x24c>
				{
					String[i] = String[IschLen];
 8006bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bcc:	3350      	adds	r3, #80	; 0x50
 8006bce:	443b      	add	r3, r7
 8006bd0:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8006bd4:	f107 0214 	add.w	r2, r7, #20
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	4413      	add	r3, r2
 8006bdc:	460a      	mov	r2, r1
 8006bde:	701a      	strb	r2, [r3, #0]
					IschLen--;
 8006be0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006be4:	3b01      	subs	r3, #1
 8006be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006bea:	e015      	b.n	8006c18 <Centred_DrawNumber_16+0x278>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 8006bec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006bf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d107      	bne.n	8006c0c <Centred_DrawNumber_16+0x26c>
					{
						String[i] = String[0];
 8006bfc:	7d39      	ldrb	r1, [r7, #20]
 8006bfe:	f107 0214 	add.w	r2, r7, #20
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	4413      	add	r3, r2
 8006c06:	460a      	mov	r2, r1
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	e005      	b.n	8006c18 <Centred_DrawNumber_16+0x278>
					}
					else
					{
						String[i] = ' ';
 8006c0c:	f107 0214 	add.w	r2, r7, #20
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	4413      	add	r3, r2
 8006c14:	2220      	movs	r2, #32
 8006c16:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	dacd      	bge.n	8006bc0 <Centred_DrawNumber_16+0x220>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 8006c24:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006c28:	085b      	lsrs	r3, r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006c30:	4413      	add	r3, r2
 8006c32:	843b      	strh	r3, [r7, #32]
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 8006c34:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8006c38:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006c3c:	fb02 f303 	mul.w	r3, r2, r3
 8006c40:	0fda      	lsrs	r2, r3, #31
 8006c42:	4413      	add	r3, r2
 8006c44:	105b      	asrs	r3, r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8006c4c:	4413      	add	r3, r2
 8006c4e:	83fb      	strh	r3, [r7, #30]

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 8006c50:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da01      	bge.n	8006c5c <Centred_DrawNumber_16+0x2bc>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	803b      	strh	r3, [r7, #0]

		for(int i=0;i<Numbers;i++)
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c60:	e095      	b.n	8006d8e <Centred_DrawNumber_16+0x3ee>
		{
			if(Pointer_Razr == RazrPointerArray[i])
 8006c62:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006c66:	f107 0108 	add.w	r1, r7, #8
 8006c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6c:	440a      	add	r2, r1
 8006c6e:	7812      	ldrb	r2, [r2, #0]
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d147      	bne.n	8006d04 <Centred_DrawNumber_16+0x364>
			{
				if(Pointer_Razr)
 8006c74:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8085 	beq.w	8006d88 <Centred_DrawNumber_16+0x3e8>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8006c7e:	4b58      	ldr	r3, [pc, #352]	; (8006de0 <Centred_DrawNumber_16+0x440>)
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	3301      	adds	r3, #1
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8006c8c:	fb12 f303 	smulbb	r3, r2, r3
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	8bfa      	ldrh	r2, [r7, #30]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	b299      	uxth	r1, r3
 8006c98:	8c3b      	ldrh	r3, [r7, #32]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8006ca2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006ca6:	9303      	str	r3, [sp, #12]
 8006ca8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006cac:	9302      	str	r3, [sp, #8]
 8006cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	2304      	movs	r3, #4
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	f000 fea2 	bl	8007a00 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8006cbc:	4b48      	ldr	r3, [pc, #288]	; (8006de0 <Centred_DrawNumber_16+0x440>)
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8006cca:	fb12 f303 	smulbb	r3, r2, r3
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	8bfa      	ldrh	r2, [r7, #30]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	b299      	uxth	r1, r3
 8006cd6:	8c3a      	ldrh	r2, [r7, #32]
 8006cd8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b04      	subs	r3, #4
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8006ce8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006cec:	9303      	str	r3, [sp, #12]
 8006cee:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006cf2:	9302      	str	r3, [sp, #8]
 8006cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	2304      	movs	r3, #4
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	4623      	mov	r3, r4
 8006cfe:	f000 fe7f 	bl	8007a00 <Draw_Rectangle>
 8006d02:	e041      	b.n	8006d88 <Centred_DrawNumber_16+0x3e8>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8006d04:	4b37      	ldr	r3, [pc, #220]	; (8006de4 <Centred_DrawNumber_16+0x444>)
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8006d12:	fb12 f303 	smulbb	r3, r2, r3
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	8bfa      	ldrh	r2, [r7, #30]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	b299      	uxth	r1, r3
 8006d1e:	8c3b      	ldrh	r3, [r7, #32]
 8006d20:	3301      	adds	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8006d28:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006d2c:	9303      	str	r3, [sp, #12]
 8006d2e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006d32:	9302      	str	r3, [sp, #8]
 8006d34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	2304      	movs	r3, #4
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	f000 fe5f 	bl	8007a00 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8006d42:	4b28      	ldr	r3, [pc, #160]	; (8006de4 <Centred_DrawNumber_16+0x444>)
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	3301      	adds	r3, #1
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8006d50:	fb12 f303 	smulbb	r3, r2, r3
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8bfa      	ldrh	r2, [r7, #30]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	b299      	uxth	r1, r3
 8006d5c:	8c3a      	ldrh	r2, [r7, #32]
 8006d5e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b04      	subs	r3, #4
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8006d6e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006d72:	9303      	str	r3, [sp, #12]
 8006d74:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006d78:	9302      	str	r3, [sp, #8]
 8006d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	2304      	movs	r3, #4
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	4623      	mov	r3, r4
 8006d84:	f000 fe3c 	bl	8007a00 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8e:	887b      	ldrh	r3, [r7, #2]
 8006d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d92:	429a      	cmp	r2, r3
 8006d94:	f6ff af65 	blt.w	8006c62 <Centred_DrawNumber_16+0x2c2>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8006d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d9c:	b299      	uxth	r1, r3
 8006d9e:	f8b7 4064 	ldrh.w	r4, [r7, #100]	; 0x64
 8006da2:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8006da6:	f107 0014 	add.w	r0, r7, #20
 8006daa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006dae:	9307      	str	r3, [sp, #28]
 8006db0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8006db4:	9306      	str	r3, [sp, #24]
 8006db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006db8:	9305      	str	r3, [sp, #20]
 8006dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dbc:	9304      	str	r3, [sp, #16]
 8006dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc0:	9303      	str	r3, [sp, #12]
 8006dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dc4:	9302      	str	r3, [sp, #8]
 8006dc6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006dca:	9301      	str	r3, [sp, #4]
 8006dcc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	4623      	mov	r3, r4
 8006dd4:	f7ff fc60 	bl	8006698 <Centred_DrawString_16>
}
 8006dd8:	bf00      	nop
 8006dda:	3754      	adds	r7, #84	; 0x54
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd90      	pop	{r4, r7, pc}
 8006de0:	20000014 	.word	0x20000014
 8006de4:	20000008 	.word	0x20000008

08006de8 <Centred_DrawNumber_16_32bit>:

void Centred_DrawNumber_16_32bit(int32_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8006de8:	b590      	push	{r4, r7, lr}
 8006dea:	b09f      	sub	sp, #124	; 0x7c
 8006dec:	af08      	add	r7, sp, #32
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	4608      	mov	r0, r1
 8006df2:	4611      	mov	r1, r2
 8006df4:	461a      	mov	r2, r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	817b      	strh	r3, [r7, #10]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	813b      	strh	r3, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80fb      	strh	r3, [r7, #6]

	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 8006e02:	2300      	movs	r3, #0
 8006e04:	657b      	str	r3, [r7, #84]	; 0x54
 8006e06:	e008      	b.n	8006e1a <Centred_DrawNumber_16_32bit+0x32>
 8006e08:	f107 0210 	add.w	r2, r7, #16
 8006e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e0e:	4413      	add	r3, r2
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e16:	3301      	adds	r3, #1
 8006e18:	657b      	str	r3, [r7, #84]	; 0x54
 8006e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e1c:	2b09      	cmp	r3, #9
 8006e1e:	ddf3      	ble.n	8006e08 <Centred_DrawNumber_16_32bit+0x20>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d




	  if(Register < 0)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	da05      	bge.n	8006e3e <Centred_DrawNumber_16_32bit+0x56>
	  {
		  BelowZero = 1;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		  Register = 0 - Register;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	425b      	negs	r3, r3
 8006e3c:	60fb      	str	r3, [r7, #12]
	  }

	  if(Comma>5){Comma=5;}
 8006e3e:	897b      	ldrh	r3, [r7, #10]
 8006e40:	2b05      	cmp	r3, #5
 8006e42:	d901      	bls.n	8006e48 <Centred_DrawNumber_16_32bit+0x60>
 8006e44:	2305      	movs	r3, #5
 8006e46:	817b      	strh	r3, [r7, #10]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 8006e48:	f107 031c 	add.w	r3, r7, #28
 8006e4c:	220a      	movs	r2, #10
 8006e4e:	4619      	mov	r1, r3
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f005 f88b 	bl	800bf6c <itoa>

	  Cycle_Pointer = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8006e5c:	e004      	b.n	8006e68 <Centred_DrawNumber_16_32bit+0x80>
	  {
		  Cycle_Pointer++;
 8006e5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006e62:	3301      	adds	r3, #1
 8006e64:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8006e68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006e6c:	3358      	adds	r3, #88	; 0x58
 8006e6e:	443b      	add	r3, r7
 8006e70:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1f2      	bne.n	8006e5e <Centred_DrawNumber_16_32bit+0x76>
	  }

	  TemporaryLenPointer = Numbers;
 8006e78:	893b      	ldrh	r3, [r7, #8]
 8006e7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  for(int i=TemporaryLenPointer;i;i--)
 8006e7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006e82:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e84:	e00f      	b.n	8006ea6 <Centred_DrawNumber_16_32bit+0xbe>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 8006e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	3358      	adds	r3, #88	; 0x58
 8006e8c:	443b      	add	r3, r7
 8006e8e:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8006e92:	f803 2c48 	strb.w	r2, [r3, #-72]
		  TemporaryLenPointer--;
 8006e96:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  for(int i=TemporaryLenPointer;i;i--)
 8006ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1ec      	bne.n	8006e86 <Centred_DrawNumber_16_32bit+0x9e>
	  }


	  if(Comma>0)
 8006eac:	897b      	ldrh	r3, [r7, #10]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d06b      	beq.n	8006f8a <Centred_DrawNumber_16_32bit+0x1a2>
	  {
		  if(Comma>=Cycle_Pointer)
 8006eb2:	897a      	ldrh	r2, [r7, #10]
 8006eb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d338      	bcc.n	8006f2e <Centred_DrawNumber_16_32bit+0x146>
		  {
			  Final_Len = Comma + 2;
 8006ebc:	897b      	ldrh	r3, [r7, #10]
 8006ebe:	3302      	adds	r3, #2
 8006ec0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			  int8_t temp = Cycle_Pointer;
 8006ec4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006ec8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  for(int i=(Final_Len-1);i>=0;i--)
 8006ecc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed4:	e020      	b.n	8006f18 <Centred_DrawNumber_16_32bit+0x130>
			  {
				  if(temp)
 8006ed6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d013      	beq.n	8006f06 <Centred_DrawNumber_16_32bit+0x11e>
				  {
					  temp--;
 8006ede:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  String[i] = String[temp];
 8006eec:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006ef0:	3358      	adds	r3, #88	; 0x58
 8006ef2:	443b      	add	r3, r7
 8006ef4:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8006ef8:	f107 021c 	add.w	r2, r7, #28
 8006efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006efe:	4413      	add	r3, r2
 8006f00:	460a      	mov	r2, r1
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	e005      	b.n	8006f12 <Centred_DrawNumber_16_32bit+0x12a>
				  }
				  else
				  {
					  String[i] = '0';
 8006f06:	f107 021c 	add.w	r2, r7, #28
 8006f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0c:	4413      	add	r3, r2
 8006f0e:	2230      	movs	r2, #48	; 0x30
 8006f10:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8006f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f14:	3b01      	subs	r3, #1
 8006f16:	643b      	str	r3, [r7, #64]	; 0x40
 8006f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dadb      	bge.n	8006ed6 <Centred_DrawNumber_16_32bit+0xee>
				  }
			  }
			  String[1] = ',';
 8006f1e:	232c      	movs	r3, #44	; 0x2c
 8006f20:	777b      	strb	r3, [r7, #29]
			  Cycle_Pointer--;
 8006f22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f26:	3b01      	subs	r3, #1
 8006f28:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006f2c:	e031      	b.n	8006f92 <Centred_DrawNumber_16_32bit+0x1aa>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 8006f2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f32:	3301      	adds	r3, #1
 8006f34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			  for(int i=(Final_Len-1);i>=0;i--)
 8006f38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f40:	e015      	b.n	8006f6e <Centred_DrawNumber_16_32bit+0x186>
			  {
				  if( i > (Final_Len - Comma - 1))
 8006f42:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006f46:	897b      	ldrh	r3, [r7, #10]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	db0b      	blt.n	8006f68 <Centred_DrawNumber_16_32bit+0x180>
				  {
					  String[i] = String[i-1];
 8006f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f52:	3b01      	subs	r3, #1
 8006f54:	3358      	adds	r3, #88	; 0x58
 8006f56:	443b      	add	r3, r7
 8006f58:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8006f5c:	f107 021c 	add.w	r2, r7, #28
 8006f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f62:	4413      	add	r3, r2
 8006f64:	460a      	mov	r2, r1
 8006f66:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8006f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	dae6      	bge.n	8006f42 <Centred_DrawNumber_16_32bit+0x15a>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 8006f74:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006f78:	897b      	ldrh	r3, [r7, #10]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	3358      	adds	r3, #88	; 0x58
 8006f80:	443b      	add	r3, r7
 8006f82:	222c      	movs	r2, #44	; 0x2c
 8006f84:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8006f88:	e003      	b.n	8006f92 <Centred_DrawNumber_16_32bit+0x1aa>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 8006f8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e


	  if(BelowZero)
 8006f92:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d01c      	beq.n	8006fd4 <Centred_DrawNumber_16_32bit+0x1ec>
	  {
		  for(int i=Final_Len;i>=0;i--)
 8006f9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fa0:	e00e      	b.n	8006fc0 <Centred_DrawNumber_16_32bit+0x1d8>
		  {
			  String[i] = String[i - 1];
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	3358      	adds	r3, #88	; 0x58
 8006fa8:	443b      	add	r3, r7
 8006faa:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8006fae:	f107 021c 	add.w	r2, r7, #28
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	4413      	add	r3, r2
 8006fb6:	460a      	mov	r2, r1
 8006fb8:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	daed      	bge.n	8006fa2 <Centred_DrawNumber_16_32bit+0x1ba>
		  }
		  String[0] = '-';
 8006fc6:	232d      	movs	r3, #45	; 0x2d
 8006fc8:	773b      	strb	r3, [r7, #28]
		  Final_Len++;
 8006fca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fce:	3301      	adds	r3, #1
 8006fd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  }

		uint8_t StandartLen = Numbers;
 8006fd4:	893b      	ldrh	r3, [r7, #8]
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		uint8_t IschLen = Final_Len - 1;
 8006fda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(Final_Len < StandartLen)
 8006fe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d236      	bcs.n	8007062 <Centred_DrawNumber_16_32bit+0x27a>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 8006ff4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8006ffc:	e02e      	b.n	800705c <Centred_DrawNumber_16_32bit+0x274>
			{
				if(IschLen)
 8006ffe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007002:	2b00      	cmp	r3, #0
 8007004:	d011      	beq.n	800702a <Centred_DrawNumber_16_32bit+0x242>
				{
					String[i] = String[IschLen];
 8007006:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800700a:	3358      	adds	r3, #88	; 0x58
 800700c:	443b      	add	r3, r7
 800700e:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8007012:	f107 021c 	add.w	r2, r7, #28
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	4413      	add	r3, r2
 800701a:	460a      	mov	r2, r1
 800701c:	701a      	strb	r2, [r3, #0]
					IschLen--;
 800701e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007022:	3b01      	subs	r3, #1
 8007024:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007028:	e015      	b.n	8007056 <Centred_DrawNumber_16_32bit+0x26e>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 800702a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800702e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007036:	429a      	cmp	r2, r3
 8007038:	d107      	bne.n	800704a <Centred_DrawNumber_16_32bit+0x262>
					{
						String[i] = String[0];
 800703a:	7f39      	ldrb	r1, [r7, #28]
 800703c:	f107 021c 	add.w	r2, r7, #28
 8007040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007042:	4413      	add	r3, r2
 8007044:	460a      	mov	r2, r1
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e005      	b.n	8007056 <Centred_DrawNumber_16_32bit+0x26e>
					}
					else
					{
						String[i] = ' ';
 800704a:	f107 021c 	add.w	r2, r7, #28
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	4413      	add	r3, r2
 8007052:	2220      	movs	r2, #32
 8007054:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	3b01      	subs	r3, #1
 800705a:	633b      	str	r3, [r7, #48]	; 0x30
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	2b00      	cmp	r3, #0
 8007060:	dacd      	bge.n	8006ffe <Centred_DrawNumber_16_32bit+0x216>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 8007062:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	b29a      	uxth	r2, r3
 800706a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800706e:	4413      	add	r3, r2
 8007070:	853b      	strh	r3, [r7, #40]	; 0x28
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 8007072:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8007076:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800707a:	fb02 f303 	mul.w	r3, r2, r3
 800707e:	0fda      	lsrs	r2, r3, #31
 8007080:	4413      	add	r3, r2
 8007082:	105b      	asrs	r3, r3, #1
 8007084:	b29a      	uxth	r2, r3
 8007086:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800708a:	4413      	add	r3, r2
 800708c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 800708e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007092:	2b00      	cmp	r3, #0
 8007094:	da01      	bge.n	800709a <Centred_DrawNumber_16_32bit+0x2b2>
 8007096:	2300      	movs	r3, #0
 8007098:	80fb      	strh	r3, [r7, #6]

		for(int i=0;i<Numbers;i++)
 800709a:	2300      	movs	r3, #0
 800709c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800709e:	e0a4      	b.n	80071ea <Centred_DrawNumber_16_32bit+0x402>
		{
			if((Pointer_Razr == RazrPointerArray[i]) & (Font_Color != BackgroundColor))
 80070a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070a4:	f107 0110 	add.w	r1, r7, #16
 80070a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070aa:	440a      	add	r2, r1
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	4293      	cmp	r3, r2
 80070b0:	bf0c      	ite	eq
 80070b2:	2301      	moveq	r3, #1
 80070b4:	2300      	movne	r3, #0
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	4b61      	ldr	r3, [pc, #388]	; (8007240 <Centred_DrawNumber_16_32bit+0x458>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070be:	4299      	cmp	r1, r3
 80070c0:	bf14      	ite	ne
 80070c2:	2301      	movne	r3, #1
 80070c4:	2300      	moveq	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	4013      	ands	r3, r2
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d047      	beq.n	8007160 <Centred_DrawNumber_16_32bit+0x378>
			{
				if(Pointer_Razr)
 80070d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 8085 	beq.w	80071e4 <Centred_DrawNumber_16_32bit+0x3fc>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 80070da:	4b5a      	ldr	r3, [pc, #360]	; (8007244 <Centred_DrawNumber_16_32bit+0x45c>)
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	3301      	adds	r3, #1
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80070e8:	fb12 f303 	smulbb	r3, r2, r3
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	b299      	uxth	r1, r3
 80070f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80070f6:	3301      	adds	r3, #1
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 80070fe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007102:	9303      	str	r3, [sp, #12]
 8007104:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007108:	9302      	str	r3, [sp, #8]
 800710a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	2304      	movs	r3, #4
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4623      	mov	r3, r4
 8007114:	f000 fc74 	bl	8007a00 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8007118:	4b4a      	ldr	r3, [pc, #296]	; (8007244 <Centred_DrawNumber_16_32bit+0x45c>)
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	3301      	adds	r3, #1
 8007120:	b29b      	uxth	r3, r3
 8007122:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8007126:	fb12 f303 	smulbb	r3, r2, r3
 800712a:	b29b      	uxth	r3, r3
 800712c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	b299      	uxth	r1, r3
 8007132:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007134:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b04      	subs	r3, #4
 800713e:	b29a      	uxth	r2, r3
 8007140:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 8007144:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007148:	9303      	str	r3, [sp, #12]
 800714a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800714e:	9302      	str	r3, [sp, #8]
 8007150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007152:	9301      	str	r3, [sp, #4]
 8007154:	2304      	movs	r3, #4
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	4623      	mov	r3, r4
 800715a:	f000 fc51 	bl	8007a00 <Draw_Rectangle>
 800715e:	e041      	b.n	80071e4 <Centred_DrawNumber_16_32bit+0x3fc>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8007160:	4b37      	ldr	r3, [pc, #220]	; (8007240 <Centred_DrawNumber_16_32bit+0x458>)
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	3301      	adds	r3, #1
 8007168:	b29b      	uxth	r3, r3
 800716a:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800716e:	fb12 f303 	smulbb	r3, r2, r3
 8007172:	b29b      	uxth	r3, r3
 8007174:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	b299      	uxth	r1, r3
 800717a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800717c:	3301      	adds	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 8007184:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007188:	9303      	str	r3, [sp, #12]
 800718a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800718e:	9302      	str	r3, [sp, #8]
 8007190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	2304      	movs	r3, #4
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	4623      	mov	r3, r4
 800719a:	f000 fc31 	bl	8007a00 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 800719e:	4b28      	ldr	r3, [pc, #160]	; (8007240 <Centred_DrawNumber_16_32bit+0x458>)
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	3301      	adds	r3, #1
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80071ac:	fb12 f303 	smulbb	r3, r2, r3
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	b299      	uxth	r1, r3
 80071b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80071ba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	3b04      	subs	r3, #4
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 80071ca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80071ce:	9303      	str	r3, [sp, #12]
 80071d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80071d4:	9302      	str	r3, [sp, #8]
 80071d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d8:	9301      	str	r3, [sp, #4]
 80071da:	2304      	movs	r3, #4
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	4623      	mov	r3, r4
 80071e0:	f000 fc0e 	bl	8007a00 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	3301      	adds	r3, #1
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071ea:	893b      	ldrh	r3, [r7, #8]
 80071ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ee:	429a      	cmp	r2, r3
 80071f0:	f6ff af56 	blt.w	80070a0 <Centred_DrawNumber_16_32bit+0x2b8>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 80071f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071f8:	b299      	uxth	r1, r3
 80071fa:	f8b7 406c 	ldrh.w	r4, [r7, #108]	; 0x6c
 80071fe:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8007202:	f107 001c 	add.w	r0, r7, #28
 8007206:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800720a:	9307      	str	r3, [sp, #28]
 800720c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8007210:	9306      	str	r3, [sp, #24]
 8007212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007216:	9305      	str	r3, [sp, #20]
 8007218:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800721c:	9304      	str	r3, [sp, #16]
 800721e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007220:	9303      	str	r3, [sp, #12]
 8007222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007224:	9302      	str	r3, [sp, #8]
 8007226:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	4623      	mov	r3, r4
 8007234:	f7ff fa30 	bl	8006698 <Centred_DrawString_16>
}
 8007238:	bf00      	nop
 800723a:	375c      	adds	r7, #92	; 0x5c
 800723c:	46bd      	mov	sp, r7
 800723e:	bd90      	pop	{r4, r7, pc}
 8007240:	20000008 	.word	0x20000008
 8007244:	20000014 	.word	0x20000014

08007248 <Centred_DrawNumber_16_32bit_controled>:


void Centred_DrawNumber_16_32bit_controled(uint32_t ValPointer, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, int32_t Max, int32_t Min, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b0a3      	sub	sp, #140	; 0x8c
 800724c:	af08      	add	r7, sp, #32
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	461a      	mov	r2, r3
 8007256:	4603      	mov	r3, r0
 8007258:	817b      	strh	r3, [r7, #10]
 800725a:	460b      	mov	r3, r1
 800725c:	813b      	strh	r3, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	80fb      	strh	r3, [r7, #6]


	  int32_t Register;
	  memcpy(&Register, ValPointer, 4);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if((Pointer_Razr > 0) & (Font_Color != BackgroundColor))
 8007268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800726c:	2b00      	cmp	r3, #0
 800726e:	bfcc      	ite	gt
 8007270:	2301      	movgt	r3, #1
 8007272:	2300      	movle	r3, #0
 8007274:	b2da      	uxtb	r2, r3
 8007276:	4bb0      	ldr	r3, [pc, #704]	; (8007538 <Centred_DrawNumber_16_32bit_controled+0x2f0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800727e:	4299      	cmp	r1, r3
 8007280:	bf14      	ite	ne
 8007282:	2301      	movne	r3, #1
 8007284:	2300      	moveq	r3, #0
 8007286:	b2db      	uxtb	r3, r3
 8007288:	4013      	ands	r3, r2
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d02c      	beq.n	80072ea <Centred_DrawNumber_16_32bit_controled+0xa2>
	  {
		  Control_DB.VauePointer    = ValPointer;
 8007290:	4aaa      	ldr	r2, [pc, #680]	; (800753c <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6093      	str	r3, [r2, #8]
		  Control_DB.RazrPointerMAX = Numbers;
 8007296:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800729a:	4ba8      	ldr	r3, [pc, #672]	; (800753c <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 800729c:	80da      	strh	r2, [r3, #6]
		  Control_DB.ValueMax		= Max;
 800729e:	4aa7      	ldr	r2, [pc, #668]	; (800753c <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80072a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072a2:	60d3      	str	r3, [r2, #12]
		  Control_DB.ValueMin		= Min;
 80072a4:	4aa5      	ldr	r2, [pc, #660]	; (800753c <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80072a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072a8:	6113      	str	r3, [r2, #16]

		  uint8_t BackWriteFlag = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  if(Register > Control_DB.ValueMax)
 80072b0:	4ba2      	ldr	r3, [pc, #648]	; (800753c <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b6:	429a      	cmp	r2, r3
 80072b8:	da05      	bge.n	80072c6 <Centred_DrawNumber_16_32bit_controled+0x7e>
		  {
			  BackWriteFlag = 1;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  Register = Control_DB.ValueMax;
 80072c0:	4b9e      	ldr	r3, [pc, #632]	; (800753c <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
		  if(Register < Control_DB.ValueMin)
 80072c6:	4b9d      	ldr	r3, [pc, #628]	; (800753c <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	429a      	cmp	r2, r3
 80072ce:	dd05      	ble.n	80072dc <Centred_DrawNumber_16_32bit_controled+0x94>
		  {
			  BackWriteFlag = 1;
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  Register = Control_DB.ValueMin;
 80072d6:	4b99      	ldr	r3, [pc, #612]	; (800753c <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
		  if(BackWriteFlag)
 80072dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <Centred_DrawNumber_16_32bit_controled+0xa2>
		  {
			  memcpy(ValPointer, &Register, 4);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072e8:	601a      	str	r2, [r3, #0]


	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 80072ea:	2300      	movs	r3, #0
 80072ec:	663b      	str	r3, [r7, #96]	; 0x60
 80072ee:	e008      	b.n	8007302 <Centred_DrawNumber_16_32bit_controled+0xba>
 80072f0:	f107 0214 	add.w	r2, r7, #20
 80072f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072f6:	4413      	add	r3, r2
 80072f8:	2200      	movs	r2, #0
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072fe:	3301      	adds	r3, #1
 8007300:	663b      	str	r3, [r7, #96]	; 0x60
 8007302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007304:	2b09      	cmp	r3, #9
 8007306:	ddf3      	ble.n	80072f0 <Centred_DrawNumber_16_32bit_controled+0xa8>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59



	  if(Register < 0)
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	2b00      	cmp	r3, #0
 8007318:	da05      	bge.n	8007326 <Centred_DrawNumber_16_32bit_controled+0xde>
	  {
		  BelowZero = 1;
 800731a:	2301      	movs	r3, #1
 800731c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		  Register = 0 - Register;
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	425b      	negs	r3, r3
 8007324:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }

	  if(Comma>5){Comma=5;}
 8007326:	897b      	ldrh	r3, [r7, #10]
 8007328:	2b05      	cmp	r3, #5
 800732a:	d901      	bls.n	8007330 <Centred_DrawNumber_16_32bit_controled+0xe8>
 800732c:	2305      	movs	r3, #5
 800732e:	817b      	strh	r3, [r7, #10]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	f107 0120 	add.w	r1, r7, #32
 8007336:	220a      	movs	r2, #10
 8007338:	4618      	mov	r0, r3
 800733a:	f004 fe17 	bl	800bf6c <itoa>

	  Cycle_Pointer = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8007344:	e004      	b.n	8007350 <Centred_DrawNumber_16_32bit_controled+0x108>
	  {
		  Cycle_Pointer++;
 8007346:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800734a:	3301      	adds	r3, #1
 800734c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8007350:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007354:	3368      	adds	r3, #104	; 0x68
 8007356:	443b      	add	r3, r7
 8007358:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1f2      	bne.n	8007346 <Centred_DrawNumber_16_32bit_controled+0xfe>
	  }

	  TemporaryLenPointer = Numbers;
 8007360:	893b      	ldrh	r3, [r7, #8]
 8007362:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  for(int i=TemporaryLenPointer;i;i--)
 8007366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800736a:	657b      	str	r3, [r7, #84]	; 0x54
 800736c:	e00f      	b.n	800738e <Centred_DrawNumber_16_32bit_controled+0x146>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 800736e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007370:	3b01      	subs	r3, #1
 8007372:	3368      	adds	r3, #104	; 0x68
 8007374:	443b      	add	r3, r7
 8007376:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800737a:	f803 2c54 	strb.w	r2, [r3, #-84]
		  TemporaryLenPointer--;
 800737e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007382:	3b01      	subs	r3, #1
 8007384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  for(int i=TemporaryLenPointer;i;i--)
 8007388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800738a:	3b01      	subs	r3, #1
 800738c:	657b      	str	r3, [r7, #84]	; 0x54
 800738e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1ec      	bne.n	800736e <Centred_DrawNumber_16_32bit_controled+0x126>
	  }


	  if(Comma>0)
 8007394:	897b      	ldrh	r3, [r7, #10]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d06c      	beq.n	8007474 <Centred_DrawNumber_16_32bit_controled+0x22c>
	  {
		  if(Comma>=Cycle_Pointer)
 800739a:	897a      	ldrh	r2, [r7, #10]
 800739c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d339      	bcc.n	8007418 <Centred_DrawNumber_16_32bit_controled+0x1d0>
		  {
			  Final_Len = Comma + 2;
 80073a4:	897b      	ldrh	r3, [r7, #10]
 80073a6:	3302      	adds	r3, #2
 80073a8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

			  int8_t temp = Cycle_Pointer;
 80073ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80073b0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			  for(int i=(Final_Len-1);i>=0;i--)
 80073b4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80073b8:	3b01      	subs	r3, #1
 80073ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073bc:	e020      	b.n	8007400 <Centred_DrawNumber_16_32bit_controled+0x1b8>
			  {
				  if(temp)
 80073be:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d013      	beq.n	80073ee <Centred_DrawNumber_16_32bit_controled+0x1a6>
				  {
					  temp--;
 80073c6:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					  String[i] = String[temp];
 80073d4:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80073d8:	3368      	adds	r3, #104	; 0x68
 80073da:	443b      	add	r3, r7
 80073dc:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 80073e0:	f107 0220 	add.w	r2, r7, #32
 80073e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e6:	4413      	add	r3, r2
 80073e8:	460a      	mov	r2, r1
 80073ea:	701a      	strb	r2, [r3, #0]
 80073ec:	e005      	b.n	80073fa <Centred_DrawNumber_16_32bit_controled+0x1b2>
				  }
				  else
				  {
					  String[i] = '0';
 80073ee:	f107 0220 	add.w	r2, r7, #32
 80073f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f4:	4413      	add	r3, r2
 80073f6:	2230      	movs	r2, #48	; 0x30
 80073f8:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 80073fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fc:	3b01      	subs	r3, #1
 80073fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007402:	2b00      	cmp	r3, #0
 8007404:	dadb      	bge.n	80073be <Centred_DrawNumber_16_32bit_controled+0x176>
				  }
			  }
			  String[1] = ',';
 8007406:	232c      	movs	r3, #44	; 0x2c
 8007408:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			  Cycle_Pointer--;
 800740c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007410:	3b01      	subs	r3, #1
 8007412:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007416:	e031      	b.n	800747c <Centred_DrawNumber_16_32bit_controled+0x234>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 8007418:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800741c:	3301      	adds	r3, #1
 800741e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

			  for(int i=(Final_Len-1);i>=0;i--)
 8007422:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007426:	3b01      	subs	r3, #1
 8007428:	64bb      	str	r3, [r7, #72]	; 0x48
 800742a:	e015      	b.n	8007458 <Centred_DrawNumber_16_32bit_controled+0x210>
			  {
				  if( i > (Final_Len - Comma - 1))
 800742c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8007430:	897b      	ldrh	r3, [r7, #10]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007436:	429a      	cmp	r2, r3
 8007438:	db0b      	blt.n	8007452 <Centred_DrawNumber_16_32bit_controled+0x20a>
				  {
					  String[i] = String[i-1];
 800743a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743c:	3b01      	subs	r3, #1
 800743e:	3368      	adds	r3, #104	; 0x68
 8007440:	443b      	add	r3, r7
 8007442:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 8007446:	f107 0220 	add.w	r2, r7, #32
 800744a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744c:	4413      	add	r3, r2
 800744e:	460a      	mov	r2, r1
 8007450:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8007452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007454:	3b01      	subs	r3, #1
 8007456:	64bb      	str	r3, [r7, #72]	; 0x48
 8007458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745a:	2b00      	cmp	r3, #0
 800745c:	dae6      	bge.n	800742c <Centred_DrawNumber_16_32bit_controled+0x1e4>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 800745e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8007462:	897b      	ldrh	r3, [r7, #10]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	3368      	adds	r3, #104	; 0x68
 800746a:	443b      	add	r3, r7
 800746c:	222c      	movs	r2, #44	; 0x2c
 800746e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8007472:	e003      	b.n	800747c <Centred_DrawNumber_16_32bit_controled+0x234>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 8007474:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007478:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a


	  if(BelowZero)
 800747c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01d      	beq.n	80074c0 <Centred_DrawNumber_16_32bit_controled+0x278>
	  {
		  for(int i=Final_Len;i>=0;i--)
 8007484:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007488:	647b      	str	r3, [r7, #68]	; 0x44
 800748a:	e00e      	b.n	80074aa <Centred_DrawNumber_16_32bit_controled+0x262>
		  {
			  String[i] = String[i - 1];
 800748c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800748e:	3b01      	subs	r3, #1
 8007490:	3368      	adds	r3, #104	; 0x68
 8007492:	443b      	add	r3, r7
 8007494:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 8007498:	f107 0220 	add.w	r2, r7, #32
 800749c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800749e:	4413      	add	r3, r2
 80074a0:	460a      	mov	r2, r1
 80074a2:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 80074a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a6:	3b01      	subs	r3, #1
 80074a8:	647b      	str	r3, [r7, #68]	; 0x44
 80074aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	daed      	bge.n	800748c <Centred_DrawNumber_16_32bit_controled+0x244>
		  }
		  String[0] = '-';
 80074b0:	232d      	movs	r3, #45	; 0x2d
 80074b2:	f887 3020 	strb.w	r3, [r7, #32]
		  Final_Len++;
 80074b6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80074ba:	3301      	adds	r3, #1
 80074bc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  }

		uint8_t StandartLen = Numbers;
 80074c0:	893b      	ldrh	r3, [r7, #8]
 80074c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint8_t IschLen = Final_Len - 1;
 80074c6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if(Final_Len < StandartLen)
 80074d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80074dc:	429a      	cmp	r2, r3
 80074de:	d23b      	bcs.n	8007558 <Centred_DrawNumber_16_32bit_controled+0x310>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 80074e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074e4:	3b01      	subs	r3, #1
 80074e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e8:	e033      	b.n	8007552 <Centred_DrawNumber_16_32bit_controled+0x30a>
			{
				if(IschLen)
 80074ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d011      	beq.n	8007516 <Centred_DrawNumber_16_32bit_controled+0x2ce>
				{
					String[i] = String[IschLen];
 80074f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074f6:	3368      	adds	r3, #104	; 0x68
 80074f8:	443b      	add	r3, r7
 80074fa:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 80074fe:	f107 0220 	add.w	r2, r7, #32
 8007502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007504:	4413      	add	r3, r2
 8007506:	460a      	mov	r2, r1
 8007508:	701a      	strb	r2, [r3, #0]
					IschLen--;
 800750a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800750e:	3b01      	subs	r3, #1
 8007510:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007514:	e01a      	b.n	800754c <Centred_DrawNumber_16_32bit_controled+0x304>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 8007516:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800751a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007522:	429a      	cmp	r2, r3
 8007524:	d10c      	bne.n	8007540 <Centred_DrawNumber_16_32bit_controled+0x2f8>
					{
						String[i] = String[0];
 8007526:	f897 1020 	ldrb.w	r1, [r7, #32]
 800752a:	f107 0220 	add.w	r2, r7, #32
 800752e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007530:	4413      	add	r3, r2
 8007532:	460a      	mov	r2, r1
 8007534:	701a      	strb	r2, [r3, #0]
 8007536:	e009      	b.n	800754c <Centred_DrawNumber_16_32bit_controled+0x304>
 8007538:	20000008 	.word	0x20000008
 800753c:	20000b18 	.word	0x20000b18
					}
					else
					{
						String[i] = ' ';
 8007540:	f107 0220 	add.w	r2, r7, #32
 8007544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007546:	4413      	add	r3, r2
 8007548:	2220      	movs	r2, #32
 800754a:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 800754c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754e:	3b01      	subs	r3, #1
 8007550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007554:	2b00      	cmp	r3, #0
 8007556:	dac8      	bge.n	80074ea <Centred_DrawNumber_16_32bit_controled+0x2a2>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 8007558:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007564:	4413      	add	r3, r2
 8007566:	86bb      	strh	r3, [r7, #52]	; 0x34
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 8007568:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800756c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	0fda      	lsrs	r2, r3, #31
 8007576:	4413      	add	r3, r2
 8007578:	105b      	asrs	r3, r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8007580:	4413      	add	r3, r2
 8007582:	867b      	strh	r3, [r7, #50]	; 0x32

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 8007584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007588:	2b00      	cmp	r3, #0
 800758a:	da01      	bge.n	8007590 <Centred_DrawNumber_16_32bit_controled+0x348>
 800758c:	2300      	movs	r3, #0
 800758e:	80fb      	strh	r3, [r7, #6]

		for(int i=0;i<Numbers;i++)
 8007590:	2300      	movs	r3, #0
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38
 8007594:	e0a9      	b.n	80076ea <Centred_DrawNumber_16_32bit_controled+0x4a2>
		{
			if((Pointer_Razr == RazrPointerArray[i]) & (Font_Color != BackgroundColor))
 8007596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800759a:	f107 0114 	add.w	r1, r7, #20
 800759e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075a0:	440a      	add	r2, r1
 80075a2:	7812      	ldrb	r2, [r2, #0]
 80075a4:	4293      	cmp	r3, r2
 80075a6:	bf0c      	ite	eq
 80075a8:	2301      	moveq	r3, #1
 80075aa:	2300      	movne	r3, #0
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	4b65      	ldr	r3, [pc, #404]	; (8007744 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80075b6:	4299      	cmp	r1, r3
 80075b8:	bf14      	ite	ne
 80075ba:	2301      	movne	r3, #1
 80075bc:	2300      	moveq	r3, #0
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	4013      	ands	r3, r2
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d049      	beq.n	800765c <Centred_DrawNumber_16_32bit_controled+0x414>
			{
				if(Pointer_Razr)
 80075c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 8089 	beq.w	80076e4 <Centred_DrawNumber_16_32bit_controled+0x49c>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 80075d2:	4b5d      	ldr	r3, [pc, #372]	; (8007748 <Centred_DrawNumber_16_32bit_controled+0x500>)
 80075d4:	6818      	ldr	r0, [r3, #0]
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	3301      	adds	r3, #1
 80075da:	b29b      	uxth	r3, r3
 80075dc:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80075e0:	fb12 f303 	smulbb	r3, r2, r3
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	b299      	uxth	r1, r3
 80075ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80075ee:	3301      	adds	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 80075f6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80075fa:	9303      	str	r3, [sp, #12]
 80075fc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007600:	9302      	str	r3, [sp, #8]
 8007602:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007606:	9301      	str	r3, [sp, #4]
 8007608:	2304      	movs	r3, #4
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	4623      	mov	r3, r4
 800760e:	f000 f9f7 	bl	8007a00 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8007612:	4b4d      	ldr	r3, [pc, #308]	; (8007748 <Centred_DrawNumber_16_32bit_controled+0x500>)
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	3301      	adds	r3, #1
 800761a:	b29b      	uxth	r3, r3
 800761c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8007620:	fb12 f303 	smulbb	r3, r2, r3
 8007624:	b29b      	uxth	r3, r3
 8007626:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	b299      	uxth	r1, r3
 800762c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800762e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b04      	subs	r3, #4
 8007638:	b29a      	uxth	r2, r3
 800763a:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 800763e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007642:	9303      	str	r3, [sp, #12]
 8007644:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007648:	9302      	str	r3, [sp, #8]
 800764a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	2304      	movs	r3, #4
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	4623      	mov	r3, r4
 8007656:	f000 f9d3 	bl	8007a00 <Draw_Rectangle>
 800765a:	e043      	b.n	80076e4 <Centred_DrawNumber_16_32bit_controled+0x49c>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 800765c:	4b39      	ldr	r3, [pc, #228]	; (8007744 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	3301      	adds	r3, #1
 8007664:	b29b      	uxth	r3, r3
 8007666:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800766a:	fb12 f303 	smulbb	r3, r2, r3
 800766e:	b29b      	uxth	r3, r3
 8007670:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	b299      	uxth	r1, r3
 8007676:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007678:	3301      	adds	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 8007680:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007684:	9303      	str	r3, [sp, #12]
 8007686:	f44f 7348 	mov.w	r3, #800	; 0x320
 800768a:	9302      	str	r3, [sp, #8]
 800768c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	2304      	movs	r3, #4
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	4623      	mov	r3, r4
 8007698:	f000 f9b2 	bl	8007a00 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 800769c:	4b29      	ldr	r3, [pc, #164]	; (8007744 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	3301      	adds	r3, #1
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80076aa:	fb12 f303 	smulbb	r3, r2, r3
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	b299      	uxth	r1, r3
 80076b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80076b8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b04      	subs	r3, #4
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 80076c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80076cc:	9303      	str	r3, [sp, #12]
 80076ce:	f44f 7348 	mov.w	r3, #800	; 0x320
 80076d2:	9302      	str	r3, [sp, #8]
 80076d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	2304      	movs	r3, #4
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	4623      	mov	r3, r4
 80076e0:	f000 f98e 	bl	8007a00 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	3301      	adds	r3, #1
 80076e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ea:	893b      	ldrh	r3, [r7, #8]
 80076ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ee:	429a      	cmp	r2, r3
 80076f0:	f6ff af51 	blt.w	8007596 <Centred_DrawNumber_16_32bit_controled+0x34e>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 80076f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076f8:	b299      	uxth	r1, r3
 80076fa:	f8b7 4084 	ldrh.w	r4, [r7, #132]	; 0x84
 80076fe:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8007702:	f107 0020 	add.w	r0, r7, #32
 8007706:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800770a:	9307      	str	r3, [sp, #28]
 800770c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8007710:	9306      	str	r3, [sp, #24]
 8007712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007716:	9305      	str	r3, [sp, #20]
 8007718:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007722:	9303      	str	r3, [sp, #12]
 8007724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007728:	9302      	str	r3, [sp, #8]
 800772a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4623      	mov	r3, r4
 8007738:	f7fe ffae 	bl	8006698 <Centred_DrawString_16>
}
 800773c:	bf00      	nop
 800773e:	376c      	adds	r7, #108	; 0x6c
 8007740:	46bd      	mov	sp, r7
 8007742:	bd90      	pop	{r4, r7, pc}
 8007744:	20000008 	.word	0x20000008
 8007748:	20000014 	.word	0x20000014

0800774c <Short_Centred_DrawNumber_16>:


void Short_Centred_DrawNumber_16(int16_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr,
		uint16_t Coord_X, uint16_t Coord_Y,  uint32_t PageNumber)
{
 800774c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800774e:	b08d      	sub	sp, #52	; 0x34
 8007750:	af0a      	add	r7, sp, #40	; 0x28
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	4611      	mov	r1, r2
 8007758:	461a      	mov	r2, r3
 800775a:	4623      	mov	r3, r4
 800775c:	80fb      	strh	r3, [r7, #6]
 800775e:	4603      	mov	r3, r0
 8007760:	80bb      	strh	r3, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	807b      	strh	r3, [r7, #2]
 8007766:	4613      	mov	r3, r2
 8007768:	803b      	strh	r3, [r7, #0]
	Centred_DrawNumber_16(Register, Comma, Numbers, Pointer_Razr, Coord_X, Coord_Y, 800, 480, PageNumber, BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800776a:	4b13      	ldr	r3, [pc, #76]	; (80077b8 <Short_Centred_DrawNumber_16+0x6c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a13      	ldr	r2, [pc, #76]	; (80077bc <Short_Centred_DrawNumber_16+0x70>)
 8007770:	6812      	ldr	r2, [r2, #0]
 8007772:	f9b7 5000 	ldrsh.w	r5, [r7]
 8007776:	887c      	ldrh	r4, [r7, #2]
 8007778:	88b9      	ldrh	r1, [r7, #4]
 800777a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800777e:	2612      	movs	r6, #18
 8007780:	9609      	str	r6, [sp, #36]	; 0x24
 8007782:	260b      	movs	r6, #11
 8007784:	9608      	str	r6, [sp, #32]
 8007786:	4e0e      	ldr	r6, [pc, #56]	; (80077c0 <Short_Centred_DrawNumber_16+0x74>)
 8007788:	9607      	str	r6, [sp, #28]
 800778a:	9206      	str	r2, [sp, #24]
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	9304      	str	r3, [sp, #16]
 8007792:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007796:	9303      	str	r3, [sp, #12]
 8007798:	f44f 7348 	mov.w	r3, #800	; 0x320
 800779c:	9302      	str	r3, [sp, #8]
 800779e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	8c3b      	ldrh	r3, [r7, #32]
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	462b      	mov	r3, r5
 80077a8:	4622      	mov	r2, r4
 80077aa:	f7ff f8f9 	bl	80069a0 <Centred_DrawNumber_16>
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20000008 	.word	0x20000008
 80077bc:	200009f8 	.word	0x200009f8
 80077c0:	08010518 	.word	0x08010518
 80077c4:	00000000 	.word	0x00000000

080077c8 <NumberChange>:




void NumberChange(uint32_t pointer, uint8_t razr, uint8_t len, uint8_t Up, uint8_t Down)
{
 80077c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80077cc:	b08c      	sub	sp, #48	; 0x30
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	4608      	mov	r0, r1
 80077d4:	4611      	mov	r1, r2
 80077d6:	461a      	mov	r2, r3
 80077d8:	4603      	mov	r3, r0
 80077da:	70fb      	strb	r3, [r7, #3]
 80077dc:	460b      	mov	r3, r1
 80077de:	70bb      	strb	r3, [r7, #2]
 80077e0:	4613      	mov	r3, r2
 80077e2:	707b      	strb	r3, [r7, #1]
	struct {int32_t a;} *Number = pointer;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t temp2;
	int16_t Tpoint = razr - 1;
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	847b      	strh	r3, [r7, #34]	; 0x22

	int16_t Symbols[10];

	for(int i= (len-1);i>=0;i--)
 80077f2:	78bb      	ldrb	r3, [r7, #2]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077f8:	e03d      	b.n	8007876 <NumberChange+0xae>
	{
		temp2 = pow(10,i);
 80077fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077fc:	f7f8 fe4a 	bl	8000494 <__aeabi_i2d>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	ec43 2b11 	vmov	d1, r2, r3
 8007808:	ed9f 0b65 	vldr	d0, [pc, #404]	; 80079a0 <NumberChange+0x1d8>
 800780c:	f004 fc08 	bl	800c020 <pow>
 8007810:	ec53 2b10 	vmov	r2, r3, d0
 8007814:	4610      	mov	r0, r2
 8007816:	4619      	mov	r1, r3
 8007818:	f7f9 f956 	bl	8000ac8 <__aeabi_d2iz>
 800781c:	4603      	mov	r3, r0
 800781e:	61fb      	str	r3, [r7, #28]
		if(Number->a >= temp2)
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69fa      	ldr	r2, [r7, #28]
 8007826:	429a      	cmp	r2, r3
 8007828:	dc1b      	bgt.n	8007862 <NumberChange+0x9a>
		{
			Symbols[i] = Number->a / temp2;
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	fb92 f3f3 	sdiv	r3, r2, r3
 8007834:	b21a      	sxth	r2, r3
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	3330      	adds	r3, #48	; 0x30
 800783c:	443b      	add	r3, r7
 800783e:	f823 2c28 	strh.w	r2, [r3, #-40]
			Number->a = Number->a - (temp2 * Symbols[i]);
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	3330      	adds	r3, #48	; 0x30
 800784c:	443b      	add	r3, r7
 800784e:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8007852:	4619      	mov	r1, r3
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	fb01 f303 	mul.w	r3, r1, r3
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e006      	b.n	8007870 <NumberChange+0xa8>
		}
		else
		{
			Symbols[i] = 0;
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	3330      	adds	r3, #48	; 0x30
 8007868:	443b      	add	r3, r7
 800786a:	2200      	movs	r2, #0
 800786c:	f823 2c28 	strh.w	r2, [r3, #-40]
	for(int i= (len-1);i>=0;i--)
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	3b01      	subs	r3, #1
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	2b00      	cmp	r3, #0
 800787a:	dabe      	bge.n	80077fa <NumberChange+0x32>
		}
	}	// Разделение числа на разряды



	if(Up)
 800787c:	787b      	ldrb	r3, [r7, #1]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d021      	beq.n	80078c6 <NumberChange+0xfe>
	{
		Symbols[Tpoint]++;
 8007882:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8007886:	0053      	lsls	r3, r2, #1
 8007888:	3330      	adds	r3, #48	; 0x30
 800788a:	443b      	add	r3, r7
 800788c:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8007890:	b29b      	uxth	r3, r3
 8007892:	3301      	adds	r3, #1
 8007894:	b29b      	uxth	r3, r3
 8007896:	b219      	sxth	r1, r3
 8007898:	0053      	lsls	r3, r2, #1
 800789a:	3330      	adds	r3, #48	; 0x30
 800789c:	443b      	add	r3, r7
 800789e:	460a      	mov	r2, r1
 80078a0:	f823 2c28 	strh.w	r2, [r3, #-40]
		if(Symbols[Tpoint] > 9){Symbols[Tpoint] = 0;}
 80078a4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	3330      	adds	r3, #48	; 0x30
 80078ac:	443b      	add	r3, r7
 80078ae:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 80078b2:	2b09      	cmp	r3, #9
 80078b4:	dd07      	ble.n	80078c6 <NumberChange+0xfe>
 80078b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	3330      	adds	r3, #48	; 0x30
 80078be:	443b      	add	r3, r7
 80078c0:	2200      	movs	r2, #0
 80078c2:	f823 2c28 	strh.w	r2, [r3, #-40]
	}

	if(Down)
 80078c6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d021      	beq.n	8007912 <NumberChange+0x14a>
	{
		Symbols[Tpoint]--;
 80078ce:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80078d2:	0053      	lsls	r3, r2, #1
 80078d4:	3330      	adds	r3, #48	; 0x30
 80078d6:	443b      	add	r3, r7
 80078d8:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	b219      	sxth	r1, r3
 80078e4:	0053      	lsls	r3, r2, #1
 80078e6:	3330      	adds	r3, #48	; 0x30
 80078e8:	443b      	add	r3, r7
 80078ea:	460a      	mov	r2, r1
 80078ec:	f823 2c28 	strh.w	r2, [r3, #-40]
		if(Symbols[Tpoint] < 0){Symbols[Tpoint] = 9;}
 80078f0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	3330      	adds	r3, #48	; 0x30
 80078f8:	443b      	add	r3, r7
 80078fa:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	da07      	bge.n	8007912 <NumberChange+0x14a>
 8007902:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	3330      	adds	r3, #48	; 0x30
 800790a:	443b      	add	r3, r7
 800790c:	2209      	movs	r2, #9
 800790e:	f823 2c28 	strh.w	r2, [r3, #-40]
	}



	Number->a = 0;
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]
	for(int i=(len-1);i>=0;i--)
 8007918:	78bb      	ldrb	r3, [r7, #2]
 800791a:	3b01      	subs	r3, #1
 800791c:	62bb      	str	r3, [r7, #40]	; 0x28
 800791e:	e034      	b.n	800798a <NumberChange+0x1c2>
	{
		Number->a = Number->a + Symbols[i] * pow(10,i);
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4618      	mov	r0, r3
 8007926:	f7f8 fdb5 	bl	8000494 <__aeabi_i2d>
 800792a:	4604      	mov	r4, r0
 800792c:	460d      	mov	r5, r1
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	3330      	adds	r3, #48	; 0x30
 8007934:	443b      	add	r3, r7
 8007936:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 800793a:	4618      	mov	r0, r3
 800793c:	f7f8 fdaa 	bl	8000494 <__aeabi_i2d>
 8007940:	4680      	mov	r8, r0
 8007942:	4689      	mov	r9, r1
 8007944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007946:	f7f8 fda5 	bl	8000494 <__aeabi_i2d>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	ec43 2b11 	vmov	d1, r2, r3
 8007952:	ed9f 0b13 	vldr	d0, [pc, #76]	; 80079a0 <NumberChange+0x1d8>
 8007956:	f004 fb63 	bl	800c020 <pow>
 800795a:	ec53 2b10 	vmov	r2, r3, d0
 800795e:	4640      	mov	r0, r8
 8007960:	4649      	mov	r1, r9
 8007962:	f7f8 fe01 	bl	8000568 <__aeabi_dmul>
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	4620      	mov	r0, r4
 800796c:	4629      	mov	r1, r5
 800796e:	f7f8 fc45 	bl	80001fc <__adddf3>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4610      	mov	r0, r2
 8007978:	4619      	mov	r1, r3
 800797a:	f7f9 f8a5 	bl	8000ac8 <__aeabi_d2iz>
 800797e:	4602      	mov	r2, r0
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	601a      	str	r2, [r3, #0]
	for(int i=(len-1);i>=0;i--)
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	3b01      	subs	r3, #1
 8007988:	62bb      	str	r3, [r7, #40]	; 0x28
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	2b00      	cmp	r3, #0
 800798e:	dac7      	bge.n	8007920 <NumberChange+0x158>
	}	// Сборка числа обратно
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	3730      	adds	r7, #48	; 0x30
 8007996:	46bd      	mov	sp, r7
 8007998:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800799c:	f3af 8000 	nop.w
 80079a0:	00000000 	.word	0x00000000
 80079a4:	40240000 	.word	0x40240000

080079a8 <Zaliv>:
extern uint32_t VideoBuffer;
extern __IO uint32_t BasicFon;
extern __IO uint8_t  temporary_line_buffer;

void Zaliv(uint32_t Color, uint32_t Bufer_Pointer, uint16_t Resolution_X, uint16_t Resolution_Y)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	4611      	mov	r1, r2
 80079b4:	461a      	mov	r2, r3
 80079b6:	460b      	mov	r3, r1
 80079b8:	80fb      	strh	r3, [r7, #6]
 80079ba:	4613      	mov	r3, r2
 80079bc:	80bb      	strh	r3, [r7, #4]
	struct {uint8_t b,g,r;} *TempBuf=Bufer_Pointer;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	613b      	str	r3, [r7, #16]
	for(int i=0;i<(Resolution_X*Resolution_Y);i++){memcpy(&TempBuf[i].b, &Color, 3);} //Заливка всего экрана
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	e00f      	b.n	80079e8 <Zaliv+0x40>
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	4613      	mov	r3, r2
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	4413      	add	r3, r2
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4413      	add	r3, r2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f107 030c 	add.w	r3, r7, #12
 80079da:	2203      	movs	r2, #3
 80079dc:	4619      	mov	r1, r3
 80079de:	f004 fac7 	bl	800bf70 <memcpy>
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	3301      	adds	r3, #1
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	88fb      	ldrh	r3, [r7, #6]
 80079ea:	88ba      	ldrh	r2, [r7, #4]
 80079ec:	fb02 f303 	mul.w	r3, r2, r3
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	dbe8      	blt.n	80079c8 <Zaliv+0x20>
} // Заливка экрана
 80079f6:	bf00      	nop
 80079f8:	bf00      	nop
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <Draw_Rectangle>:
	struct {uint8_t a,b,g,r;} *TempBuf=Bufer_Pointer;
	for(int i=0;i<(Resolution_X*Resolution_Y);i++){memcpy(&TempBuf[i].b, &Color, 4);} //Заливка всего экрана
} // Заливка экрана

void Draw_Rectangle(uint32_t Color, uint16_t Start_X, uint16_t Start_Y, uint16_t Size_X, uint16_t Size_Y, uint32_t Bufer_Pointer, uint16_t Resolution_X, uint16_t Resolution_Y)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	4608      	mov	r0, r1
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4603      	mov	r3, r0
 8007a10:	817b      	strh	r3, [r7, #10]
 8007a12:	460b      	mov	r3, r1
 8007a14:	813b      	strh	r3, [r7, #8]
 8007a16:	4613      	mov	r3, r2
 8007a18:	80fb      	strh	r3, [r7, #6]
	struct {uint8_t b,g,r;} *TempBuf=Bufer_Pointer;
 8007a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1c:	617b      	str	r3, [r7, #20]
	for(int i=Start_Y;i<(Start_Y + Size_Y);i++)
 8007a1e:	893b      	ldrh	r3, [r7, #8]
 8007a20:	61fb      	str	r3, [r7, #28]
 8007a22:	e021      	b.n	8007a68 <Draw_Rectangle+0x68>
	{
		for(int j=Start_X;j<(Start_X + Size_X);j++)
 8007a24:	897b      	ldrh	r3, [r7, #10]
 8007a26:	61bb      	str	r3, [r7, #24]
 8007a28:	e015      	b.n	8007a56 <Draw_Rectangle+0x56>
		{
			memcpy(&TempBuf[(i * Resolution_X) + j].b, &Color, 3);
 8007a2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	fb03 f202 	mul.w	r2, r3, r2
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	4413      	add	r3, r2
 8007a36:	461a      	mov	r2, r3
 8007a38:	4613      	mov	r3, r2
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	4413      	add	r3, r2
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4413      	add	r3, r2
 8007a42:	4618      	mov	r0, r3
 8007a44:	f107 030c 	add.w	r3, r7, #12
 8007a48:	2203      	movs	r2, #3
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	f004 fa90 	bl	800bf70 <memcpy>
		for(int j=Start_X;j<(Start_X + Size_X);j++)
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	3301      	adds	r3, #1
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	897a      	ldrh	r2, [r7, #10]
 8007a58:	88fb      	ldrh	r3, [r7, #6]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	dbe3      	blt.n	8007a2a <Draw_Rectangle+0x2a>
	for(int i=Start_Y;i<(Start_Y + Size_Y);i++)
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	3301      	adds	r3, #1
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	893a      	ldrh	r2, [r7, #8]
 8007a6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a6c:	4413      	add	r3, r2
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	dbd7      	blt.n	8007a24 <Draw_Rectangle+0x24>
		}
	}
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	3720      	adds	r7, #32
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007a84:	4b0e      	ldr	r3, [pc, #56]	; (8007ac0 <HAL_Init+0x40>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a0d      	ldr	r2, [pc, #52]	; (8007ac0 <HAL_Init+0x40>)
 8007a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a90:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <HAL_Init+0x40>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a0a      	ldr	r2, [pc, #40]	; (8007ac0 <HAL_Init+0x40>)
 8007a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a9c:	4b08      	ldr	r3, [pc, #32]	; (8007ac0 <HAL_Init+0x40>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a07      	ldr	r2, [pc, #28]	; (8007ac0 <HAL_Init+0x40>)
 8007aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007aa8:	2003      	movs	r0, #3
 8007aaa:	f000 f94f 	bl	8007d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007aae:	200f      	movs	r0, #15
 8007ab0:	f000 f808 	bl	8007ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007ab4:	f7fd fc08 	bl	80052c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	40023c00 	.word	0x40023c00

08007ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007acc:	4b12      	ldr	r3, [pc, #72]	; (8007b18 <HAL_InitTick+0x54>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <HAL_InitTick+0x58>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 f967 	bl	8007db6 <HAL_SYSTICK_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e00e      	b.n	8007b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b0f      	cmp	r3, #15
 8007af6:	d80a      	bhi.n	8007b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007af8:	2200      	movs	r2, #0
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	f000 f92f 	bl	8007d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b04:	4a06      	ldr	r2, [pc, #24]	; (8007b20 <HAL_InitTick+0x5c>)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e000      	b.n	8007b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	2000001c 	.word	0x2000001c
 8007b1c:	20000024 	.word	0x20000024
 8007b20:	20000020 	.word	0x20000020

08007b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b24:	b480      	push	{r7}
 8007b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b28:	4b06      	ldr	r3, [pc, #24]	; (8007b44 <HAL_IncTick+0x20>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <HAL_IncTick+0x24>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4413      	add	r3, r2
 8007b34:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <HAL_IncTick+0x24>)
 8007b36:	6013      	str	r3, [r2, #0]
}
 8007b38:	bf00      	nop
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20000024 	.word	0x20000024
 8007b48:	20000b84 	.word	0x20000b84

08007b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8007b50:	4b03      	ldr	r3, [pc, #12]	; (8007b60 <HAL_GetTick+0x14>)
 8007b52:	681b      	ldr	r3, [r3, #0]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	20000b84 	.word	0x20000b84

08007b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b6c:	f7ff ffee 	bl	8007b4c <HAL_GetTick>
 8007b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7c:	d005      	beq.n	8007b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <HAL_Delay+0x44>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4413      	add	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007b8a:	bf00      	nop
 8007b8c:	f7ff ffde 	bl	8007b4c <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d8f7      	bhi.n	8007b8c <HAL_Delay+0x28>
  {
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20000024 	.word	0x20000024

08007bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007bc8:	4013      	ands	r3, r2
 8007bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007bde:	4a04      	ldr	r2, [pc, #16]	; (8007bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	60d3      	str	r3, [r2, #12]
}
 8007be4:	bf00      	nop
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	e000ed00 	.word	0xe000ed00

08007bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007bf8:	4b04      	ldr	r3, [pc, #16]	; (8007c0c <__NVIC_GetPriorityGrouping+0x18>)
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	0a1b      	lsrs	r3, r3, #8
 8007bfe:	f003 0307 	and.w	r3, r3, #7
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	e000ed00 	.word	0xe000ed00

08007c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	db0b      	blt.n	8007c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	f003 021f 	and.w	r2, r3, #31
 8007c28:	4907      	ldr	r1, [pc, #28]	; (8007c48 <__NVIC_EnableIRQ+0x38>)
 8007c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c2e:	095b      	lsrs	r3, r3, #5
 8007c30:	2001      	movs	r0, #1
 8007c32:	fa00 f202 	lsl.w	r2, r0, r2
 8007c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c3a:	bf00      	nop
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	e000e100 	.word	0xe000e100

08007c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	6039      	str	r1, [r7, #0]
 8007c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	db0a      	blt.n	8007c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	490c      	ldr	r1, [pc, #48]	; (8007c98 <__NVIC_SetPriority+0x4c>)
 8007c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c6a:	0112      	lsls	r2, r2, #4
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	440b      	add	r3, r1
 8007c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c74:	e00a      	b.n	8007c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	4908      	ldr	r1, [pc, #32]	; (8007c9c <__NVIC_SetPriority+0x50>)
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	3b04      	subs	r3, #4
 8007c84:	0112      	lsls	r2, r2, #4
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	440b      	add	r3, r1
 8007c8a:	761a      	strb	r2, [r3, #24]
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	e000e100 	.word	0xe000e100
 8007c9c:	e000ed00 	.word	0xe000ed00

08007ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b089      	sub	sp, #36	; 0x24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f1c3 0307 	rsb	r3, r3, #7
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	bf28      	it	cs
 8007cbe:	2304      	movcs	r3, #4
 8007cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	2b06      	cmp	r3, #6
 8007cc8:	d902      	bls.n	8007cd0 <NVIC_EncodePriority+0x30>
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	3b03      	subs	r3, #3
 8007cce:	e000      	b.n	8007cd2 <NVIC_EncodePriority+0x32>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	43da      	mvns	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	401a      	ands	r2, r3
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf2:	43d9      	mvns	r1, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cf8:	4313      	orrs	r3, r2
         );
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3724      	adds	r7, #36	; 0x24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d18:	d301      	bcc.n	8007d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e00f      	b.n	8007d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d1e:	4a0a      	ldr	r2, [pc, #40]	; (8007d48 <SysTick_Config+0x40>)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d26:	210f      	movs	r1, #15
 8007d28:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2c:	f7ff ff8e 	bl	8007c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d30:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <SysTick_Config+0x40>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d36:	4b04      	ldr	r3, [pc, #16]	; (8007d48 <SysTick_Config+0x40>)
 8007d38:	2207      	movs	r2, #7
 8007d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	e000e010 	.word	0xe000e010

08007d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff ff29 	bl	8007bac <__NVIC_SetPriorityGrouping>
}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b086      	sub	sp, #24
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	4603      	mov	r3, r0
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	607a      	str	r2, [r7, #4]
 8007d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d74:	f7ff ff3e 	bl	8007bf4 <__NVIC_GetPriorityGrouping>
 8007d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	6978      	ldr	r0, [r7, #20]
 8007d80:	f7ff ff8e 	bl	8007ca0 <NVIC_EncodePriority>
 8007d84:	4602      	mov	r2, r0
 8007d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff ff5d 	bl	8007c4c <__NVIC_SetPriority>
}
 8007d92:	bf00      	nop
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	4603      	mov	r3, r0
 8007da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff ff31 	bl	8007c10 <__NVIC_EnableIRQ>
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff ffa2 	bl	8007d08 <SysTick_Config>
 8007dc4:	4603      	mov	r3, r0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007ddc:	f7ff feb6 	bl	8007b4c <HAL_GetTick>
 8007de0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d008      	beq.n	8007e00 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2280      	movs	r2, #128	; 0x80
 8007df2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e052      	b.n	8007ea6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0216 	bic.w	r2, r2, #22
 8007e0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	695a      	ldr	r2, [r3, #20]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e1e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d103      	bne.n	8007e30 <HAL_DMA_Abort+0x62>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0208 	bic.w	r2, r2, #8
 8007e3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0201 	bic.w	r2, r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e50:	e013      	b.n	8007e7a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e52:	f7ff fe7b 	bl	8007b4c <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b05      	cmp	r3, #5
 8007e5e:	d90c      	bls.n	8007e7a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2203      	movs	r2, #3
 8007e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e015      	b.n	8007ea6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e4      	bne.n	8007e52 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8c:	223f      	movs	r2, #63	; 0x3f
 8007e8e:	409a      	lsls	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d004      	beq.n	8007ecc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2280      	movs	r2, #128	; 0x80
 8007ec6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e00c      	b.n	8007ee6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2205      	movs	r2, #5
 8007ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0201 	bic.w	r2, r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e03b      	b.n	8007f7c <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7fd f9fd 	bl	8005318 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2202      	movs	r2, #2
 8007f22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f42:	f023 0107 	bic.w	r1, r3, #7
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689a      	ldr	r2, [r3, #8]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	68d1      	ldr	r1, [r2, #12]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	6812      	ldr	r2, [r2, #0]
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_DMA2D_ConfigLayer+0x20>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e079      	b.n	8008098 <HAL_DMA2D_ConfigLayer+0x114>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	3318      	adds	r3, #24
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	041b      	lsls	r3, r3, #16
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007fce:	4b35      	ldr	r3, [pc, #212]	; (80080a4 <HAL_DMA2D_ConfigLayer+0x120>)
 8007fd0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2b0a      	cmp	r3, #10
 8007fd8:	d003      	beq.n	8007fe2 <HAL_DMA2D_ConfigLayer+0x5e>
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2b09      	cmp	r3, #9
 8007fe0:	d107      	bne.n	8007ff2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	e005      	b.n	8007ffe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	061b      	lsls	r3, r3, #24
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d120      	bne.n	8008046 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	43db      	mvns	r3, r3
 800800e:	ea02 0103 	and.w	r1, r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	430a      	orrs	r2, r1
 800801a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	2b0a      	cmp	r3, #10
 800802c:	d003      	beq.n	8008036 <HAL_DMA2D_ConfigLayer+0xb2>
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	2b09      	cmp	r3, #9
 8008034:	d127      	bne.n	8008086 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008042:	629a      	str	r2, [r3, #40]	; 0x28
 8008044:	e01f      	b.n	8008086 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69da      	ldr	r2, [r3, #28]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	43db      	mvns	r3, r3
 8008050:	ea02 0103 	and.w	r1, r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	430a      	orrs	r2, r1
 800805c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	6812      	ldr	r2, [r2, #0]
 8008066:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	2b0a      	cmp	r3, #10
 800806e:	d003      	beq.n	8008078 <HAL_DMA2D_ConfigLayer+0xf4>
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b09      	cmp	r3, #9
 8008076:	d106      	bne.n	8008086 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008084:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	ff03000f 	.word	0xff03000f

080080a8 <HAL_DMA2D_EnableDeadTime>:
  * @brief Enable DMA2D dead time feature.
  * @param hdma2d DMA2D handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_EnableDeadTime(DMA2D_HandleTypeDef *hdma2d)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdma2d);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d101      	bne.n	80080be <HAL_DMA2D_EnableDeadTime+0x16>
 80080ba:	2302      	movs	r3, #2
 80080bc:	e018      	b.n	80080f0 <HAL_DMA2D_EnableDeadTime+0x48>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2202      	movs	r2, #2
 80080ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set DMA2D_AMTCR EN bit */
  SET_BIT(hdma2d->Instance->AMTCR, DMA2D_AMTCR_EN);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f042 0201 	orr.w	r2, r2, #1
 80080dc:	64da      	str	r2, [r3, #76]	; 0x4c

  hdma2d->State = HAL_DMA2D_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_DMA2D_ConfigDeadTime>:
  * @param hdma2d DMA2D handle.
  * @param DeadTime dead time value.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigDeadTime(DMA2D_HandleTypeDef *hdma2d, uint8_t DeadTime)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  /* Process Locked */
  __HAL_LOCK(hdma2d);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_DMA2D_ConfigDeadTime+0x1a>
 8008112:	2302      	movs	r3, #2
 8008114:	e01b      	b.n	800814e <HAL_DMA2D_ConfigDeadTime+0x52>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2202      	movs	r2, #2
 8008122:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set DMA2D_AMTCR DT field */
  MODIFY_REG(hdma2d->Instance->AMTCR, DMA2D_AMTCR_DT, (((uint32_t) DeadTime) << DMA2D_AMTCR_DT_Pos));
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800812c:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	021a      	lsls	r2, r3, #8
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	64da      	str	r2, [r3, #76]	; 0x4c

  hdma2d->State = HAL_DMA2D_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800816e:	4b23      	ldr	r3, [pc, #140]	; (80081fc <HAL_FLASH_Program+0xa0>)
 8008170:	7e1b      	ldrb	r3, [r3, #24]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <HAL_FLASH_Program+0x1e>
 8008176:	2302      	movs	r3, #2
 8008178:	e03b      	b.n	80081f2 <HAL_FLASH_Program+0x96>
 800817a:	4b20      	ldr	r3, [pc, #128]	; (80081fc <HAL_FLASH_Program+0xa0>)
 800817c:	2201      	movs	r2, #1
 800817e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008180:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008184:	f000 f870 	bl	8008268 <FLASH_WaitForLastOperation>
 8008188:	4603      	mov	r3, r0
 800818a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d12b      	bne.n	80081ea <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d105      	bne.n	80081a4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8008198:	783b      	ldrb	r3, [r7, #0]
 800819a:	4619      	mov	r1, r3
 800819c:	68b8      	ldr	r0, [r7, #8]
 800819e:	f000 f91b 	bl	80083d8 <FLASH_Program_Byte>
 80081a2:	e016      	b.n	80081d2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d105      	bne.n	80081b6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80081aa:	883b      	ldrh	r3, [r7, #0]
 80081ac:	4619      	mov	r1, r3
 80081ae:	68b8      	ldr	r0, [r7, #8]
 80081b0:	f000 f8ee 	bl	8008390 <FLASH_Program_HalfWord>
 80081b4:	e00d      	b.n	80081d2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d105      	bne.n	80081c8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	4619      	mov	r1, r3
 80081c0:	68b8      	ldr	r0, [r7, #8]
 80081c2:	f000 f8c3 	bl	800834c <FLASH_Program_Word>
 80081c6:	e004      	b.n	80081d2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80081c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081cc:	68b8      	ldr	r0, [r7, #8]
 80081ce:	f000 f88b 	bl	80082e8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80081d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80081d6:	f000 f847 	bl	8008268 <FLASH_WaitForLastOperation>
 80081da:	4603      	mov	r3, r0
 80081dc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80081de:	4b08      	ldr	r3, [pc, #32]	; (8008200 <HAL_FLASH_Program+0xa4>)
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	4a07      	ldr	r2, [pc, #28]	; (8008200 <HAL_FLASH_Program+0xa4>)
 80081e4:	f023 0301 	bic.w	r3, r3, #1
 80081e8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80081ea:	4b04      	ldr	r3, [pc, #16]	; (80081fc <HAL_FLASH_Program+0xa0>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	761a      	strb	r2, [r3, #24]
  
  return status;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000b88 	.word	0x20000b88
 8008200:	40023c00 	.word	0x40023c00

08008204 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800820e:	4b0b      	ldr	r3, [pc, #44]	; (800823c <HAL_FLASH_Unlock+0x38>)
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	da0b      	bge.n	800822e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008216:	4b09      	ldr	r3, [pc, #36]	; (800823c <HAL_FLASH_Unlock+0x38>)
 8008218:	4a09      	ldr	r2, [pc, #36]	; (8008240 <HAL_FLASH_Unlock+0x3c>)
 800821a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800821c:	4b07      	ldr	r3, [pc, #28]	; (800823c <HAL_FLASH_Unlock+0x38>)
 800821e:	4a09      	ldr	r2, [pc, #36]	; (8008244 <HAL_FLASH_Unlock+0x40>)
 8008220:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008222:	4b06      	ldr	r3, [pc, #24]	; (800823c <HAL_FLASH_Unlock+0x38>)
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	da01      	bge.n	800822e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800822e:	79fb      	ldrb	r3, [r7, #7]
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	40023c00 	.word	0x40023c00
 8008240:	45670123 	.word	0x45670123
 8008244:	cdef89ab 	.word	0xcdef89ab

08008248 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <HAL_FLASH_Lock+0x1c>)
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	4a04      	ldr	r2, [pc, #16]	; (8008264 <HAL_FLASH_Lock+0x1c>)
 8008252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008256:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	40023c00 	.word	0x40023c00

08008268 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008274:	4b1a      	ldr	r3, [pc, #104]	; (80082e0 <FLASH_WaitForLastOperation+0x78>)
 8008276:	2200      	movs	r2, #0
 8008278:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800827a:	f7ff fc67 	bl	8007b4c <HAL_GetTick>
 800827e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008280:	e010      	b.n	80082a4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008288:	d00c      	beq.n	80082a4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <FLASH_WaitForLastOperation+0x38>
 8008290:	f7ff fc5c 	bl	8007b4c <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	429a      	cmp	r2, r3
 800829e:	d201      	bcs.n	80082a4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e019      	b.n	80082d8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80082a4:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <FLASH_WaitForLastOperation+0x7c>)
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e8      	bne.n	8008282 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80082b0:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <FLASH_WaitForLastOperation+0x7c>)
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <FLASH_WaitForLastOperation+0x7c>)
 80082be:	2201      	movs	r2, #1
 80082c0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80082c2:	4b08      	ldr	r3, [pc, #32]	; (80082e4 <FLASH_WaitForLastOperation+0x7c>)
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80082ce:	f000 f8a5 	bl	800841c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
  
}  
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20000b88 	.word	0x20000b88
 80082e4:	40023c00 	.word	0x40023c00

080082e8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80082f4:	4b14      	ldr	r3, [pc, #80]	; (8008348 <FLASH_Program_DoubleWord+0x60>)
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	4a13      	ldr	r2, [pc, #76]	; (8008348 <FLASH_Program_DoubleWord+0x60>)
 80082fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8008300:	4b11      	ldr	r3, [pc, #68]	; (8008348 <FLASH_Program_DoubleWord+0x60>)
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	4a10      	ldr	r2, [pc, #64]	; (8008348 <FLASH_Program_DoubleWord+0x60>)
 8008306:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800830a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800830c:	4b0e      	ldr	r3, [pc, #56]	; (8008348 <FLASH_Program_DoubleWord+0x60>)
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	4a0d      	ldr	r2, [pc, #52]	; (8008348 <FLASH_Program_DoubleWord+0x60>)
 8008312:	f043 0301 	orr.w	r3, r3, #1
 8008316:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800831e:	f3bf 8f6f 	isb	sy
}
 8008322:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008324:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008328:	f04f 0200 	mov.w	r2, #0
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	000a      	movs	r2, r1
 8008332:	2300      	movs	r3, #0
 8008334:	68f9      	ldr	r1, [r7, #12]
 8008336:	3104      	adds	r1, #4
 8008338:	4613      	mov	r3, r2
 800833a:	600b      	str	r3, [r1, #0]
}
 800833c:	bf00      	nop
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	40023c00 	.word	0x40023c00

0800834c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008356:	4b0d      	ldr	r3, [pc, #52]	; (800838c <FLASH_Program_Word+0x40>)
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	4a0c      	ldr	r2, [pc, #48]	; (800838c <FLASH_Program_Word+0x40>)
 800835c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008360:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8008362:	4b0a      	ldr	r3, [pc, #40]	; (800838c <FLASH_Program_Word+0x40>)
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	4a09      	ldr	r2, [pc, #36]	; (800838c <FLASH_Program_Word+0x40>)
 8008368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800836c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800836e:	4b07      	ldr	r3, [pc, #28]	; (800838c <FLASH_Program_Word+0x40>)
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	4a06      	ldr	r2, [pc, #24]	; (800838c <FLASH_Program_Word+0x40>)
 8008374:	f043 0301 	orr.w	r3, r3, #1
 8008378:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	601a      	str	r2, [r3, #0]
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	40023c00 	.word	0x40023c00

08008390 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800839c:	4b0d      	ldr	r3, [pc, #52]	; (80083d4 <FLASH_Program_HalfWord+0x44>)
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	4a0c      	ldr	r2, [pc, #48]	; (80083d4 <FLASH_Program_HalfWord+0x44>)
 80083a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80083a8:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <FLASH_Program_HalfWord+0x44>)
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <FLASH_Program_HalfWord+0x44>)
 80083ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80083b4:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <FLASH_Program_HalfWord+0x44>)
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	4a06      	ldr	r2, [pc, #24]	; (80083d4 <FLASH_Program_HalfWord+0x44>)
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	887a      	ldrh	r2, [r7, #2]
 80083c4:	801a      	strh	r2, [r3, #0]
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	40023c00 	.word	0x40023c00

080083d8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80083e4:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <FLASH_Program_Byte+0x40>)
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	4a0b      	ldr	r2, [pc, #44]	; (8008418 <FLASH_Program_Byte+0x40>)
 80083ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80083f0:	4b09      	ldr	r3, [pc, #36]	; (8008418 <FLASH_Program_Byte+0x40>)
 80083f2:	4a09      	ldr	r2, [pc, #36]	; (8008418 <FLASH_Program_Byte+0x40>)
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80083f8:	4b07      	ldr	r3, [pc, #28]	; (8008418 <FLASH_Program_Byte+0x40>)
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	4a06      	ldr	r2, [pc, #24]	; (8008418 <FLASH_Program_Byte+0x40>)
 80083fe:	f043 0301 	orr.w	r3, r3, #1
 8008402:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	78fa      	ldrb	r2, [r7, #3]
 8008408:	701a      	strb	r2, [r3, #0]
}
 800840a:	bf00      	nop
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	40023c00 	.word	0x40023c00

0800841c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008420:	4b2f      	ldr	r3, [pc, #188]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800842c:	4b2d      	ldr	r3, [pc, #180]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f043 0310 	orr.w	r3, r3, #16
 8008434:	4a2b      	ldr	r2, [pc, #172]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 8008436:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008438:	4b29      	ldr	r3, [pc, #164]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 800843a:	2210      	movs	r2, #16
 800843c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800843e:	4b28      	ldr	r3, [pc, #160]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f003 0320 	and.w	r3, r3, #32
 8008446:	2b00      	cmp	r3, #0
 8008448:	d008      	beq.n	800845c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800844a:	4b26      	ldr	r3, [pc, #152]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f043 0308 	orr.w	r3, r3, #8
 8008452:	4a24      	ldr	r2, [pc, #144]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 8008454:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8008456:	4b22      	ldr	r3, [pc, #136]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 8008458:	2220      	movs	r2, #32
 800845a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800845c:	4b20      	ldr	r3, [pc, #128]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8008468:	4b1e      	ldr	r3, [pc, #120]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f043 0304 	orr.w	r3, r3, #4
 8008470:	4a1c      	ldr	r2, [pc, #112]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 8008472:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008474:	4b1a      	ldr	r3, [pc, #104]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 8008476:	2240      	movs	r2, #64	; 0x40
 8008478:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800847a:	4b19      	ldr	r3, [pc, #100]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008482:	2b00      	cmp	r3, #0
 8008484:	d008      	beq.n	8008498 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008486:	4b17      	ldr	r3, [pc, #92]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	f043 0302 	orr.w	r3, r3, #2
 800848e:	4a15      	ldr	r2, [pc, #84]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 8008490:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008492:	4b13      	ldr	r3, [pc, #76]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 8008494:	2280      	movs	r2, #128	; 0x80
 8008496:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8008498:	4b11      	ldr	r3, [pc, #68]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d009      	beq.n	80084b8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80084a4:	4b0f      	ldr	r3, [pc, #60]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	f043 0301 	orr.w	r3, r3, #1
 80084ac:	4a0d      	ldr	r2, [pc, #52]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 80084ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80084b0:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 80084b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084b6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80084b8:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d008      	beq.n	80084d6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80084c4:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	f043 0320 	orr.w	r3, r3, #32
 80084cc:	4a05      	ldr	r2, [pc, #20]	; (80084e4 <FLASH_SetErrorCode+0xc8>)
 80084ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80084d0:	4b03      	ldr	r3, [pc, #12]	; (80084e0 <FLASH_SetErrorCode+0xc4>)
 80084d2:	2202      	movs	r2, #2
 80084d4:	60da      	str	r2, [r3, #12]
  }
}
 80084d6:	bf00      	nop
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	40023c00 	.word	0x40023c00
 80084e4:	20000b88 	.word	0x20000b88

080084e8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80084fe:	2300      	movs	r3, #0
 8008500:	60fb      	str	r3, [r7, #12]
 8008502:	e010      	b.n	8008526 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d103      	bne.n	8008512 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800850a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	e009      	b.n	8008526 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d103      	bne.n	8008520 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e002      	b.n	8008526 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008520:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008524:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b0b      	cmp	r3, #11
 800852a:	d902      	bls.n	8008532 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3304      	adds	r3, #4
 8008530:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008532:	4b13      	ldr	r3, [pc, #76]	; (8008580 <FLASH_Erase_Sector+0x98>)
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	4a12      	ldr	r2, [pc, #72]	; (8008580 <FLASH_Erase_Sector+0x98>)
 8008538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800853c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800853e:	4b10      	ldr	r3, [pc, #64]	; (8008580 <FLASH_Erase_Sector+0x98>)
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	490f      	ldr	r1, [pc, #60]	; (8008580 <FLASH_Erase_Sector+0x98>)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4313      	orrs	r3, r2
 8008548:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800854a:	4b0d      	ldr	r3, [pc, #52]	; (8008580 <FLASH_Erase_Sector+0x98>)
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	4a0c      	ldr	r2, [pc, #48]	; (8008580 <FLASH_Erase_Sector+0x98>)
 8008550:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008554:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8008556:	4b0a      	ldr	r3, [pc, #40]	; (8008580 <FLASH_Erase_Sector+0x98>)
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	4313      	orrs	r3, r2
 8008560:	4a07      	ldr	r2, [pc, #28]	; (8008580 <FLASH_Erase_Sector+0x98>)
 8008562:	f043 0302 	orr.w	r3, r3, #2
 8008566:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008568:	4b05      	ldr	r3, [pc, #20]	; (8008580 <FLASH_Erase_Sector+0x98>)
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	4a04      	ldr	r2, [pc, #16]	; (8008580 <FLASH_Erase_Sector+0x98>)
 800856e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008572:	6113      	str	r3, [r2, #16]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	40023c00 	.word	0x40023c00

08008584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008584:	b480      	push	{r7}
 8008586:	b089      	sub	sp, #36	; 0x24
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800858e:	2300      	movs	r3, #0
 8008590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008592:	2300      	movs	r3, #0
 8008594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008596:	2300      	movs	r3, #0
 8008598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
 800859e:	e177      	b.n	8008890 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80085a0:	2201      	movs	r2, #1
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4013      	ands	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	f040 8166 	bne.w	800888a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d005      	beq.n	80085d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d130      	bne.n	8008638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	2203      	movs	r2, #3
 80085e2:	fa02 f303 	lsl.w	r3, r2, r3
 80085e6:	43db      	mvns	r3, r3
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	4013      	ands	r3, r2
 80085ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	fa02 f303 	lsl.w	r3, r2, r3
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800860c:	2201      	movs	r2, #1
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	fa02 f303 	lsl.w	r3, r2, r3
 8008614:	43db      	mvns	r3, r3
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	4013      	ands	r3, r2
 800861a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	091b      	lsrs	r3, r3, #4
 8008622:	f003 0201 	and.w	r2, r3, #1
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	fa02 f303 	lsl.w	r3, r2, r3
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	4313      	orrs	r3, r2
 8008630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f003 0303 	and.w	r3, r3, #3
 8008640:	2b03      	cmp	r3, #3
 8008642:	d017      	beq.n	8008674 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	2203      	movs	r2, #3
 8008650:	fa02 f303 	lsl.w	r3, r2, r3
 8008654:	43db      	mvns	r3, r3
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	4013      	ands	r3, r2
 800865a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	fa02 f303 	lsl.w	r3, r2, r3
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	4313      	orrs	r3, r2
 800866c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d123      	bne.n	80086c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	08da      	lsrs	r2, r3, #3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3208      	adds	r2, #8
 8008688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	f003 0307 	and.w	r3, r3, #7
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	220f      	movs	r2, #15
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	43db      	mvns	r3, r3
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	4013      	ands	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	691a      	ldr	r2, [r3, #16]
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	08da      	lsrs	r2, r3, #3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3208      	adds	r2, #8
 80086c2:	69b9      	ldr	r1, [r7, #24]
 80086c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	2203      	movs	r2, #3
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	43db      	mvns	r3, r3
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	4013      	ands	r3, r2
 80086de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f003 0203 	and.w	r2, r3, #3
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	fa02 f303 	lsl.w	r3, r2, r3
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 80c0 	beq.w	800888a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	4b66      	ldr	r3, [pc, #408]	; (80088a8 <HAL_GPIO_Init+0x324>)
 8008710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008712:	4a65      	ldr	r2, [pc, #404]	; (80088a8 <HAL_GPIO_Init+0x324>)
 8008714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008718:	6453      	str	r3, [r2, #68]	; 0x44
 800871a:	4b63      	ldr	r3, [pc, #396]	; (80088a8 <HAL_GPIO_Init+0x324>)
 800871c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008722:	60fb      	str	r3, [r7, #12]
 8008724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008726:	4a61      	ldr	r2, [pc, #388]	; (80088ac <HAL_GPIO_Init+0x328>)
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	089b      	lsrs	r3, r3, #2
 800872c:	3302      	adds	r3, #2
 800872e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	220f      	movs	r2, #15
 800873e:	fa02 f303 	lsl.w	r3, r2, r3
 8008742:	43db      	mvns	r3, r3
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	4013      	ands	r3, r2
 8008748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a58      	ldr	r2, [pc, #352]	; (80088b0 <HAL_GPIO_Init+0x32c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d037      	beq.n	80087c2 <HAL_GPIO_Init+0x23e>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a57      	ldr	r2, [pc, #348]	; (80088b4 <HAL_GPIO_Init+0x330>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d031      	beq.n	80087be <HAL_GPIO_Init+0x23a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a56      	ldr	r2, [pc, #344]	; (80088b8 <HAL_GPIO_Init+0x334>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d02b      	beq.n	80087ba <HAL_GPIO_Init+0x236>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a55      	ldr	r2, [pc, #340]	; (80088bc <HAL_GPIO_Init+0x338>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d025      	beq.n	80087b6 <HAL_GPIO_Init+0x232>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a54      	ldr	r2, [pc, #336]	; (80088c0 <HAL_GPIO_Init+0x33c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d01f      	beq.n	80087b2 <HAL_GPIO_Init+0x22e>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a53      	ldr	r2, [pc, #332]	; (80088c4 <HAL_GPIO_Init+0x340>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d019      	beq.n	80087ae <HAL_GPIO_Init+0x22a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a52      	ldr	r2, [pc, #328]	; (80088c8 <HAL_GPIO_Init+0x344>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d013      	beq.n	80087aa <HAL_GPIO_Init+0x226>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a51      	ldr	r2, [pc, #324]	; (80088cc <HAL_GPIO_Init+0x348>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00d      	beq.n	80087a6 <HAL_GPIO_Init+0x222>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a50      	ldr	r2, [pc, #320]	; (80088d0 <HAL_GPIO_Init+0x34c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d007      	beq.n	80087a2 <HAL_GPIO_Init+0x21e>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a4f      	ldr	r2, [pc, #316]	; (80088d4 <HAL_GPIO_Init+0x350>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d101      	bne.n	800879e <HAL_GPIO_Init+0x21a>
 800879a:	2309      	movs	r3, #9
 800879c:	e012      	b.n	80087c4 <HAL_GPIO_Init+0x240>
 800879e:	230a      	movs	r3, #10
 80087a0:	e010      	b.n	80087c4 <HAL_GPIO_Init+0x240>
 80087a2:	2308      	movs	r3, #8
 80087a4:	e00e      	b.n	80087c4 <HAL_GPIO_Init+0x240>
 80087a6:	2307      	movs	r3, #7
 80087a8:	e00c      	b.n	80087c4 <HAL_GPIO_Init+0x240>
 80087aa:	2306      	movs	r3, #6
 80087ac:	e00a      	b.n	80087c4 <HAL_GPIO_Init+0x240>
 80087ae:	2305      	movs	r3, #5
 80087b0:	e008      	b.n	80087c4 <HAL_GPIO_Init+0x240>
 80087b2:	2304      	movs	r3, #4
 80087b4:	e006      	b.n	80087c4 <HAL_GPIO_Init+0x240>
 80087b6:	2303      	movs	r3, #3
 80087b8:	e004      	b.n	80087c4 <HAL_GPIO_Init+0x240>
 80087ba:	2302      	movs	r3, #2
 80087bc:	e002      	b.n	80087c4 <HAL_GPIO_Init+0x240>
 80087be:	2301      	movs	r3, #1
 80087c0:	e000      	b.n	80087c4 <HAL_GPIO_Init+0x240>
 80087c2:	2300      	movs	r3, #0
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	f002 0203 	and.w	r2, r2, #3
 80087ca:	0092      	lsls	r2, r2, #2
 80087cc:	4093      	lsls	r3, r2
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087d4:	4935      	ldr	r1, [pc, #212]	; (80088ac <HAL_GPIO_Init+0x328>)
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	089b      	lsrs	r3, r3, #2
 80087da:	3302      	adds	r3, #2
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80087e2:	4b3d      	ldr	r3, [pc, #244]	; (80088d8 <HAL_GPIO_Init+0x354>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	43db      	mvns	r3, r3
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	4013      	ands	r3, r2
 80087f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	4313      	orrs	r3, r2
 8008804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008806:	4a34      	ldr	r2, [pc, #208]	; (80088d8 <HAL_GPIO_Init+0x354>)
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800880c:	4b32      	ldr	r3, [pc, #200]	; (80088d8 <HAL_GPIO_Init+0x354>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	43db      	mvns	r3, r3
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	4013      	ands	r3, r2
 800881a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	4313      	orrs	r3, r2
 800882e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008830:	4a29      	ldr	r2, [pc, #164]	; (80088d8 <HAL_GPIO_Init+0x354>)
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008836:	4b28      	ldr	r3, [pc, #160]	; (80088d8 <HAL_GPIO_Init+0x354>)
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	43db      	mvns	r3, r3
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	4013      	ands	r3, r2
 8008844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	4313      	orrs	r3, r2
 8008858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800885a:	4a1f      	ldr	r2, [pc, #124]	; (80088d8 <HAL_GPIO_Init+0x354>)
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008860:	4b1d      	ldr	r3, [pc, #116]	; (80088d8 <HAL_GPIO_Init+0x354>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	43db      	mvns	r3, r3
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	4013      	ands	r3, r2
 800886e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008884:	4a14      	ldr	r2, [pc, #80]	; (80088d8 <HAL_GPIO_Init+0x354>)
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	3301      	adds	r3, #1
 800888e:	61fb      	str	r3, [r7, #28]
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	2b0f      	cmp	r3, #15
 8008894:	f67f ae84 	bls.w	80085a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	3724      	adds	r7, #36	; 0x24
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	40023800 	.word	0x40023800
 80088ac:	40013800 	.word	0x40013800
 80088b0:	40020000 	.word	0x40020000
 80088b4:	40020400 	.word	0x40020400
 80088b8:	40020800 	.word	0x40020800
 80088bc:	40020c00 	.word	0x40020c00
 80088c0:	40021000 	.word	0x40021000
 80088c4:	40021400 	.word	0x40021400
 80088c8:	40021800 	.word	0x40021800
 80088cc:	40021c00 	.word	0x40021c00
 80088d0:	40022000 	.word	0x40022000
 80088d4:	40022400 	.word	0x40022400
 80088d8:	40013c00 	.word	0x40013c00

080088dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	887b      	ldrh	r3, [r7, #2]
 80088ee:	4013      	ands	r3, r2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80088f4:	2301      	movs	r3, #1
 80088f6:	73fb      	strb	r3, [r7, #15]
 80088f8:	e001      	b.n	80088fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	807b      	strh	r3, [r7, #2]
 8008918:	4613      	mov	r3, r2
 800891a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800891c:	787b      	ldrb	r3, [r7, #1]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008922:	887a      	ldrh	r2, [r7, #2]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008928:	e003      	b.n	8008932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800892a:	887b      	ldrh	r3, [r7, #2]
 800892c:	041a      	lsls	r2, r3, #16
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	619a      	str	r2, [r3, #24]
}
 8008932:	bf00      	nop
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
	...

08008940 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e0bf      	b.n	8008ad2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d106      	bne.n	800896c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7fc fcf8 	bl	800535c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	699a      	ldr	r2, [r3, #24]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008982:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6999      	ldr	r1, [r3, #24]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008998:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6899      	ldr	r1, [r3, #8]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4b4a      	ldr	r3, [pc, #296]	; (8008adc <HAL_LTDC_Init+0x19c>)
 80089b4:	400b      	ands	r3, r1
 80089b6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	041b      	lsls	r3, r3, #16
 80089be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6899      	ldr	r1, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699a      	ldr	r2, [r3, #24]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68d9      	ldr	r1, [r3, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	4b3e      	ldr	r3, [pc, #248]	; (8008adc <HAL_LTDC_Init+0x19c>)
 80089e2:	400b      	ands	r3, r1
 80089e4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	041b      	lsls	r3, r3, #16
 80089ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68d9      	ldr	r1, [r3, #12]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1a      	ldr	r2, [r3, #32]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6919      	ldr	r1, [r3, #16]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	4b33      	ldr	r3, [pc, #204]	; (8008adc <HAL_LTDC_Init+0x19c>)
 8008a10:	400b      	ands	r3, r1
 8008a12:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	041b      	lsls	r3, r3, #16
 8008a1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6919      	ldr	r1, [r3, #16]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6959      	ldr	r1, [r3, #20]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	4b27      	ldr	r3, [pc, #156]	; (8008adc <HAL_LTDC_Init+0x19c>)
 8008a3e:	400b      	ands	r3, r1
 8008a40:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a46:	041b      	lsls	r3, r3, #16
 8008a48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6959      	ldr	r1, [r3, #20]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	431a      	orrs	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a66:	021b      	lsls	r3, r3, #8
 8008a68:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008a70:	041b      	lsls	r3, r3, #16
 8008a72:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008a96:	431a      	orrs	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0206 	orr.w	r2, r2, #6
 8008aae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	699a      	ldr	r2, [r3, #24]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0201 	orr.w	r2, r2, #1
 8008abe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	f000f800 	.word	0xf000f800

08008ae0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008ae0:	b5b0      	push	{r4, r5, r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d101      	bne.n	8008afa <HAL_LTDC_ConfigLayer+0x1a>
 8008af6:	2302      	movs	r3, #2
 8008af8:	e02c      	b.n	8008b54 <HAL_LTDC_ConfigLayer+0x74>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2202      	movs	r2, #2
 8008b06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2134      	movs	r1, #52	; 0x34
 8008b10:	fb01 f303 	mul.w	r3, r1, r3
 8008b14:	4413      	add	r3, r2
 8008b16:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4614      	mov	r4, r2
 8008b1e:	461d      	mov	r5, r3
 8008b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	68b9      	ldr	r1, [r7, #8]
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 f847 	bl	8008bc8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bdb0      	pop	{r4, r5, r7, pc}

08008b5c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d101      	bne.n	8008b76 <HAL_LTDC_SetAddress+0x1a>
 8008b72:	2302      	movs	r3, #2
 8008b74:	e024      	b.n	8008bc0 <HAL_LTDC_SetAddress+0x64>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2202      	movs	r2, #2
 8008b82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2234      	movs	r2, #52	; 0x34
 8008b8a:	fb02 f303 	mul.w	r3, r2, r3
 8008b8e:	3338      	adds	r3, #56	; 0x38
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4413      	add	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	6979      	ldr	r1, [r7, #20]
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 f811 	bl	8008bc8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2201      	movs	r2, #1
 8008bac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b089      	sub	sp, #36	; 0x24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	0c1b      	lsrs	r3, r3, #16
 8008be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008be4:	4413      	add	r3, r2
 8008be6:	041b      	lsls	r3, r3, #16
 8008be8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	01db      	lsls	r3, r3, #7
 8008bf4:	4413      	add	r3, r2
 8008bf6:	3384      	adds	r3, #132	; 0x84
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	6812      	ldr	r2, [r2, #0]
 8008bfe:	4611      	mov	r1, r2
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	01d2      	lsls	r2, r2, #7
 8008c04:	440a      	add	r2, r1
 8008c06:	3284      	adds	r2, #132	; 0x84
 8008c08:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008c0c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	0c1b      	lsrs	r3, r3, #16
 8008c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008c1e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008c20:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4619      	mov	r1, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	01db      	lsls	r3, r3, #7
 8008c2c:	440b      	add	r3, r1
 8008c2e:	3384      	adds	r3, #132	; 0x84
 8008c30:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008c36:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c46:	4413      	add	r3, r2
 8008c48:	041b      	lsls	r3, r3, #16
 8008c4a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	01db      	lsls	r3, r3, #7
 8008c56:	4413      	add	r3, r2
 8008c58:	3384      	adds	r3, #132	; 0x84
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	6812      	ldr	r2, [r2, #0]
 8008c60:	4611      	mov	r1, r2
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	01d2      	lsls	r2, r2, #7
 8008c66:	440a      	add	r2, r1
 8008c68:	3284      	adds	r2, #132	; 0x84
 8008c6a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008c6e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c7e:	4413      	add	r3, r2
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4619      	mov	r1, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	01db      	lsls	r3, r3, #7
 8008c8c:	440b      	add	r3, r1
 8008c8e:	3384      	adds	r3, #132	; 0x84
 8008c90:	4619      	mov	r1, r3
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	01db      	lsls	r3, r3, #7
 8008ca2:	4413      	add	r3, r2
 8008ca4:	3384      	adds	r3, #132	; 0x84
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	6812      	ldr	r2, [r2, #0]
 8008cac:	4611      	mov	r1, r2
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	01d2      	lsls	r2, r2, #7
 8008cb2:	440a      	add	r2, r1
 8008cb4:	3284      	adds	r2, #132	; 0x84
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	01db      	lsls	r3, r3, #7
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3384      	adds	r3, #132	; 0x84
 8008cca:	461a      	mov	r2, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008ce2:	041b      	lsls	r3, r3, #16
 8008ce4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	061b      	lsls	r3, r3, #24
 8008cec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	01db      	lsls	r3, r3, #7
 8008cf8:	4413      	add	r3, r2
 8008cfa:	3384      	adds	r3, #132	; 0x84
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	01db      	lsls	r3, r3, #7
 8008d08:	4413      	add	r3, r2
 8008d0a:	3384      	adds	r3, #132	; 0x84
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d18:	461a      	mov	r2, r3
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	431a      	orrs	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4619      	mov	r1, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	01db      	lsls	r3, r3, #7
 8008d2c:	440b      	add	r3, r1
 8008d2e:	3384      	adds	r3, #132	; 0x84
 8008d30:	4619      	mov	r1, r3
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	01db      	lsls	r3, r3, #7
 8008d42:	4413      	add	r3, r2
 8008d44:	3384      	adds	r3, #132	; 0x84
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	6812      	ldr	r2, [r2, #0]
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	01d2      	lsls	r2, r2, #7
 8008d52:	440a      	add	r2, r1
 8008d54:	3284      	adds	r2, #132	; 0x84
 8008d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d5a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	461a      	mov	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	01db      	lsls	r3, r3, #7
 8008d66:	4413      	add	r3, r2
 8008d68:	3384      	adds	r3, #132	; 0x84
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	01db      	lsls	r3, r3, #7
 8008d7c:	4413      	add	r3, r2
 8008d7e:	3384      	adds	r3, #132	; 0x84
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	6812      	ldr	r2, [r2, #0]
 8008d86:	4611      	mov	r1, r2
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	01d2      	lsls	r2, r2, #7
 8008d8c:	440a      	add	r2, r1
 8008d8e:	3284      	adds	r2, #132	; 0x84
 8008d90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008d94:	f023 0307 	bic.w	r3, r3, #7
 8008d98:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	69da      	ldr	r2, [r3, #28]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	68f9      	ldr	r1, [r7, #12]
 8008da4:	6809      	ldr	r1, [r1, #0]
 8008da6:	4608      	mov	r0, r1
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	01c9      	lsls	r1, r1, #7
 8008dac:	4401      	add	r1, r0
 8008dae:	3184      	adds	r1, #132	; 0x84
 8008db0:	4313      	orrs	r3, r2
 8008db2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	461a      	mov	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	01db      	lsls	r3, r3, #7
 8008dbe:	4413      	add	r3, r2
 8008dc0:	3384      	adds	r3, #132	; 0x84
 8008dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	01db      	lsls	r3, r3, #7
 8008dce:	4413      	add	r3, r2
 8008dd0:	3384      	adds	r3, #132	; 0x84
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	01db      	lsls	r3, r3, #7
 8008de2:	4413      	add	r3, r2
 8008de4:	3384      	adds	r3, #132	; 0x84
 8008de6:	461a      	mov	r2, r3
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d102      	bne.n	8008dfc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008df6:	2304      	movs	r3, #4
 8008df8:	61fb      	str	r3, [r7, #28]
 8008dfa:	e01b      	b.n	8008e34 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d102      	bne.n	8008e0a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008e04:	2303      	movs	r3, #3
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	e014      	b.n	8008e34 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d00b      	beq.n	8008e2a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d007      	beq.n	8008e2a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d003      	beq.n	8008e2a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008e26:	2b07      	cmp	r3, #7
 8008e28:	d102      	bne.n	8008e30 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	61fb      	str	r3, [r7, #28]
 8008e2e:	e001      	b.n	8008e34 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008e30:	2301      	movs	r3, #1
 8008e32:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	01db      	lsls	r3, r3, #7
 8008e3e:	4413      	add	r3, r2
 8008e40:	3384      	adds	r3, #132	; 0x84
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	6812      	ldr	r2, [r2, #0]
 8008e48:	4611      	mov	r1, r2
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	01d2      	lsls	r2, r2, #7
 8008e4e:	440a      	add	r2, r1
 8008e50:	3284      	adds	r2, #132	; 0x84
 8008e52:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008e56:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	69fa      	ldr	r2, [r7, #28]
 8008e5e:	fb02 f303 	mul.w	r3, r2, r3
 8008e62:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	6859      	ldr	r1, [r3, #4]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	1acb      	subs	r3, r1, r3
 8008e6e:	69f9      	ldr	r1, [r7, #28]
 8008e70:	fb01 f303 	mul.w	r3, r1, r3
 8008e74:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008e76:	68f9      	ldr	r1, [r7, #12]
 8008e78:	6809      	ldr	r1, [r1, #0]
 8008e7a:	4608      	mov	r0, r1
 8008e7c:	6879      	ldr	r1, [r7, #4]
 8008e7e:	01c9      	lsls	r1, r1, #7
 8008e80:	4401      	add	r1, r0
 8008e82:	3184      	adds	r1, #132	; 0x84
 8008e84:	4313      	orrs	r3, r2
 8008e86:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	01db      	lsls	r3, r3, #7
 8008e92:	4413      	add	r3, r2
 8008e94:	3384      	adds	r3, #132	; 0x84
 8008e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	6812      	ldr	r2, [r2, #0]
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	01d2      	lsls	r2, r2, #7
 8008ea2:	440a      	add	r2, r1
 8008ea4:	3284      	adds	r2, #132	; 0x84
 8008ea6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008eaa:	f023 0307 	bic.w	r3, r3, #7
 8008eae:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	01db      	lsls	r3, r3, #7
 8008eba:	4413      	add	r3, r2
 8008ebc:	3384      	adds	r3, #132	; 0x84
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	01db      	lsls	r3, r3, #7
 8008ed0:	4413      	add	r3, r2
 8008ed2:	3384      	adds	r3, #132	; 0x84
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	4611      	mov	r1, r2
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	01d2      	lsls	r2, r2, #7
 8008ee0:	440a      	add	r2, r1
 8008ee2:	3284      	adds	r2, #132	; 0x84
 8008ee4:	f043 0301 	orr.w	r3, r3, #1
 8008ee8:	6013      	str	r3, [r2, #0]
}
 8008eea:	bf00      	nop
 8008eec:	3724      	adds	r7, #36	; 0x24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
	...

08008ef8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008f02:	2300      	movs	r3, #0
 8008f04:	603b      	str	r3, [r7, #0]
 8008f06:	4b20      	ldr	r3, [pc, #128]	; (8008f88 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0a:	4a1f      	ldr	r2, [pc, #124]	; (8008f88 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f10:	6413      	str	r3, [r2, #64]	; 0x40
 8008f12:	4b1d      	ldr	r3, [pc, #116]	; (8008f88 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008f1e:	4b1b      	ldr	r3, [pc, #108]	; (8008f8c <HAL_PWREx_EnableOverDrive+0x94>)
 8008f20:	2201      	movs	r2, #1
 8008f22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f24:	f7fe fe12 	bl	8007b4c <HAL_GetTick>
 8008f28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008f2a:	e009      	b.n	8008f40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008f2c:	f7fe fe0e 	bl	8007b4c <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f3a:	d901      	bls.n	8008f40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e01f      	b.n	8008f80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008f40:	4b13      	ldr	r3, [pc, #76]	; (8008f90 <HAL_PWREx_EnableOverDrive+0x98>)
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f4c:	d1ee      	bne.n	8008f2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008f4e:	4b11      	ldr	r3, [pc, #68]	; (8008f94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008f50:	2201      	movs	r2, #1
 8008f52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f54:	f7fe fdfa 	bl	8007b4c <HAL_GetTick>
 8008f58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008f5a:	e009      	b.n	8008f70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008f5c:	f7fe fdf6 	bl	8007b4c <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f6a:	d901      	bls.n	8008f70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e007      	b.n	8008f80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008f70:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <HAL_PWREx_EnableOverDrive+0x98>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f7c:	d1ee      	bne.n	8008f5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	40023800 	.word	0x40023800
 8008f8c:	420e0040 	.word	0x420e0040
 8008f90:	40007000 	.word	0x40007000
 8008f94:	420e0044 	.word	0x420e0044

08008f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e267      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d075      	beq.n	80090a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fb6:	4b88      	ldr	r3, [pc, #544]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f003 030c 	and.w	r3, r3, #12
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	d00c      	beq.n	8008fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fc2:	4b85      	ldr	r3, [pc, #532]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fca:	2b08      	cmp	r3, #8
 8008fcc:	d112      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fce:	4b82      	ldr	r3, [pc, #520]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fda:	d10b      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fdc:	4b7e      	ldr	r3, [pc, #504]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d05b      	beq.n	80090a0 <HAL_RCC_OscConfig+0x108>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d157      	bne.n	80090a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e242      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ffc:	d106      	bne.n	800900c <HAL_RCC_OscConfig+0x74>
 8008ffe:	4b76      	ldr	r3, [pc, #472]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a75      	ldr	r2, [pc, #468]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8009004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	e01d      	b.n	8009048 <HAL_RCC_OscConfig+0xb0>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009014:	d10c      	bne.n	8009030 <HAL_RCC_OscConfig+0x98>
 8009016:	4b70      	ldr	r3, [pc, #448]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a6f      	ldr	r2, [pc, #444]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 800901c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	4b6d      	ldr	r3, [pc, #436]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a6c      	ldr	r2, [pc, #432]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8009028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	e00b      	b.n	8009048 <HAL_RCC_OscConfig+0xb0>
 8009030:	4b69      	ldr	r3, [pc, #420]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a68      	ldr	r2, [pc, #416]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8009036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	4b66      	ldr	r3, [pc, #408]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a65      	ldr	r2, [pc, #404]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8009042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d013      	beq.n	8009078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009050:	f7fe fd7c 	bl	8007b4c <HAL_GetTick>
 8009054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009056:	e008      	b.n	800906a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009058:	f7fe fd78 	bl	8007b4c <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	2b64      	cmp	r3, #100	; 0x64
 8009064:	d901      	bls.n	800906a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e207      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800906a:	4b5b      	ldr	r3, [pc, #364]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0f0      	beq.n	8009058 <HAL_RCC_OscConfig+0xc0>
 8009076:	e014      	b.n	80090a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009078:	f7fe fd68 	bl	8007b4c <HAL_GetTick>
 800907c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800907e:	e008      	b.n	8009092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009080:	f7fe fd64 	bl	8007b4c <HAL_GetTick>
 8009084:	4602      	mov	r2, r0
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	2b64      	cmp	r3, #100	; 0x64
 800908c:	d901      	bls.n	8009092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800908e:	2303      	movs	r3, #3
 8009090:	e1f3      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009092:	4b51      	ldr	r3, [pc, #324]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1f0      	bne.n	8009080 <HAL_RCC_OscConfig+0xe8>
 800909e:	e000      	b.n	80090a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d063      	beq.n	8009176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090ae:	4b4a      	ldr	r3, [pc, #296]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f003 030c 	and.w	r3, r3, #12
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ba:	4b47      	ldr	r3, [pc, #284]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090c2:	2b08      	cmp	r3, #8
 80090c4:	d11c      	bne.n	8009100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090c6:	4b44      	ldr	r3, [pc, #272]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d116      	bne.n	8009100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090d2:	4b41      	ldr	r3, [pc, #260]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d005      	beq.n	80090ea <HAL_RCC_OscConfig+0x152>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d001      	beq.n	80090ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e1c7      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ea:	4b3b      	ldr	r3, [pc, #236]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	4937      	ldr	r1, [pc, #220]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090fe:	e03a      	b.n	8009176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d020      	beq.n	800914a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009108:	4b34      	ldr	r3, [pc, #208]	; (80091dc <HAL_RCC_OscConfig+0x244>)
 800910a:	2201      	movs	r2, #1
 800910c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800910e:	f7fe fd1d 	bl	8007b4c <HAL_GetTick>
 8009112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009114:	e008      	b.n	8009128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009116:	f7fe fd19 	bl	8007b4c <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	2b02      	cmp	r3, #2
 8009122:	d901      	bls.n	8009128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e1a8      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009128:	4b2b      	ldr	r3, [pc, #172]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0f0      	beq.n	8009116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009134:	4b28      	ldr	r3, [pc, #160]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	4925      	ldr	r1, [pc, #148]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 8009144:	4313      	orrs	r3, r2
 8009146:	600b      	str	r3, [r1, #0]
 8009148:	e015      	b.n	8009176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800914a:	4b24      	ldr	r3, [pc, #144]	; (80091dc <HAL_RCC_OscConfig+0x244>)
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009150:	f7fe fcfc 	bl	8007b4c <HAL_GetTick>
 8009154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009156:	e008      	b.n	800916a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009158:	f7fe fcf8 	bl	8007b4c <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	2b02      	cmp	r3, #2
 8009164:	d901      	bls.n	800916a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e187      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800916a:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1f0      	bne.n	8009158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	2b00      	cmp	r3, #0
 8009180:	d036      	beq.n	80091f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d016      	beq.n	80091b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800918a:	4b15      	ldr	r3, [pc, #84]	; (80091e0 <HAL_RCC_OscConfig+0x248>)
 800918c:	2201      	movs	r2, #1
 800918e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009190:	f7fe fcdc 	bl	8007b4c <HAL_GetTick>
 8009194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009196:	e008      	b.n	80091aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009198:	f7fe fcd8 	bl	8007b4c <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e167      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091aa:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <HAL_RCC_OscConfig+0x240>)
 80091ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0f0      	beq.n	8009198 <HAL_RCC_OscConfig+0x200>
 80091b6:	e01b      	b.n	80091f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091b8:	4b09      	ldr	r3, [pc, #36]	; (80091e0 <HAL_RCC_OscConfig+0x248>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091be:	f7fe fcc5 	bl	8007b4c <HAL_GetTick>
 80091c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091c4:	e00e      	b.n	80091e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091c6:	f7fe fcc1 	bl	8007b4c <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d907      	bls.n	80091e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e150      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
 80091d8:	40023800 	.word	0x40023800
 80091dc:	42470000 	.word	0x42470000
 80091e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091e4:	4b88      	ldr	r3, [pc, #544]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 80091e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1ea      	bne.n	80091c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 8097 	beq.w	800932c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091fe:	2300      	movs	r3, #0
 8009200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009202:	4b81      	ldr	r3, [pc, #516]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 8009204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10f      	bne.n	800922e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800920e:	2300      	movs	r3, #0
 8009210:	60bb      	str	r3, [r7, #8]
 8009212:	4b7d      	ldr	r3, [pc, #500]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 8009214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009216:	4a7c      	ldr	r2, [pc, #496]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 8009218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800921c:	6413      	str	r3, [r2, #64]	; 0x40
 800921e:	4b7a      	ldr	r3, [pc, #488]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009226:	60bb      	str	r3, [r7, #8]
 8009228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800922a:	2301      	movs	r3, #1
 800922c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800922e:	4b77      	ldr	r3, [pc, #476]	; (800940c <HAL_RCC_OscConfig+0x474>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009236:	2b00      	cmp	r3, #0
 8009238:	d118      	bne.n	800926c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800923a:	4b74      	ldr	r3, [pc, #464]	; (800940c <HAL_RCC_OscConfig+0x474>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a73      	ldr	r2, [pc, #460]	; (800940c <HAL_RCC_OscConfig+0x474>)
 8009240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009246:	f7fe fc81 	bl	8007b4c <HAL_GetTick>
 800924a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800924c:	e008      	b.n	8009260 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800924e:	f7fe fc7d 	bl	8007b4c <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	2b02      	cmp	r3, #2
 800925a:	d901      	bls.n	8009260 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e10c      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009260:	4b6a      	ldr	r3, [pc, #424]	; (800940c <HAL_RCC_OscConfig+0x474>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0f0      	beq.n	800924e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d106      	bne.n	8009282 <HAL_RCC_OscConfig+0x2ea>
 8009274:	4b64      	ldr	r3, [pc, #400]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 8009276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009278:	4a63      	ldr	r2, [pc, #396]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 800927a:	f043 0301 	orr.w	r3, r3, #1
 800927e:	6713      	str	r3, [r2, #112]	; 0x70
 8009280:	e01c      	b.n	80092bc <HAL_RCC_OscConfig+0x324>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	2b05      	cmp	r3, #5
 8009288:	d10c      	bne.n	80092a4 <HAL_RCC_OscConfig+0x30c>
 800928a:	4b5f      	ldr	r3, [pc, #380]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 800928c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928e:	4a5e      	ldr	r2, [pc, #376]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 8009290:	f043 0304 	orr.w	r3, r3, #4
 8009294:	6713      	str	r3, [r2, #112]	; 0x70
 8009296:	4b5c      	ldr	r3, [pc, #368]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 8009298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929a:	4a5b      	ldr	r2, [pc, #364]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 800929c:	f043 0301 	orr.w	r3, r3, #1
 80092a0:	6713      	str	r3, [r2, #112]	; 0x70
 80092a2:	e00b      	b.n	80092bc <HAL_RCC_OscConfig+0x324>
 80092a4:	4b58      	ldr	r3, [pc, #352]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 80092a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a8:	4a57      	ldr	r2, [pc, #348]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 80092aa:	f023 0301 	bic.w	r3, r3, #1
 80092ae:	6713      	str	r3, [r2, #112]	; 0x70
 80092b0:	4b55      	ldr	r3, [pc, #340]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 80092b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b4:	4a54      	ldr	r2, [pc, #336]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 80092b6:	f023 0304 	bic.w	r3, r3, #4
 80092ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d015      	beq.n	80092f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092c4:	f7fe fc42 	bl	8007b4c <HAL_GetTick>
 80092c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092ca:	e00a      	b.n	80092e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092cc:	f7fe fc3e 	bl	8007b4c <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092da:	4293      	cmp	r3, r2
 80092dc:	d901      	bls.n	80092e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e0cb      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092e2:	4b49      	ldr	r3, [pc, #292]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 80092e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d0ee      	beq.n	80092cc <HAL_RCC_OscConfig+0x334>
 80092ee:	e014      	b.n	800931a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092f0:	f7fe fc2c 	bl	8007b4c <HAL_GetTick>
 80092f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092f6:	e00a      	b.n	800930e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092f8:	f7fe fc28 	bl	8007b4c <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	f241 3288 	movw	r2, #5000	; 0x1388
 8009306:	4293      	cmp	r3, r2
 8009308:	d901      	bls.n	800930e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800930a:	2303      	movs	r3, #3
 800930c:	e0b5      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800930e:	4b3e      	ldr	r3, [pc, #248]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 8009310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1ee      	bne.n	80092f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800931a:	7dfb      	ldrb	r3, [r7, #23]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d105      	bne.n	800932c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009320:	4b39      	ldr	r3, [pc, #228]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 8009322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009324:	4a38      	ldr	r2, [pc, #224]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 8009326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800932a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 80a1 	beq.w	8009478 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009336:	4b34      	ldr	r3, [pc, #208]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f003 030c 	and.w	r3, r3, #12
 800933e:	2b08      	cmp	r3, #8
 8009340:	d05c      	beq.n	80093fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	2b02      	cmp	r3, #2
 8009348:	d141      	bne.n	80093ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800934a:	4b31      	ldr	r3, [pc, #196]	; (8009410 <HAL_RCC_OscConfig+0x478>)
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009350:	f7fe fbfc 	bl	8007b4c <HAL_GetTick>
 8009354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009356:	e008      	b.n	800936a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009358:	f7fe fbf8 	bl	8007b4c <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	2b02      	cmp	r3, #2
 8009364:	d901      	bls.n	800936a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e087      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800936a:	4b27      	ldr	r3, [pc, #156]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1f0      	bne.n	8009358 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	69da      	ldr	r2, [r3, #28]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009384:	019b      	lsls	r3, r3, #6
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938c:	085b      	lsrs	r3, r3, #1
 800938e:	3b01      	subs	r3, #1
 8009390:	041b      	lsls	r3, r3, #16
 8009392:	431a      	orrs	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	061b      	lsls	r3, r3, #24
 800939a:	491b      	ldr	r1, [pc, #108]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 800939c:	4313      	orrs	r3, r2
 800939e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093a0:	4b1b      	ldr	r3, [pc, #108]	; (8009410 <HAL_RCC_OscConfig+0x478>)
 80093a2:	2201      	movs	r2, #1
 80093a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093a6:	f7fe fbd1 	bl	8007b4c <HAL_GetTick>
 80093aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093ac:	e008      	b.n	80093c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093ae:	f7fe fbcd 	bl	8007b4c <HAL_GetTick>
 80093b2:	4602      	mov	r2, r0
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d901      	bls.n	80093c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80093bc:	2303      	movs	r3, #3
 80093be:	e05c      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093c0:	4b11      	ldr	r3, [pc, #68]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d0f0      	beq.n	80093ae <HAL_RCC_OscConfig+0x416>
 80093cc:	e054      	b.n	8009478 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093ce:	4b10      	ldr	r3, [pc, #64]	; (8009410 <HAL_RCC_OscConfig+0x478>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093d4:	f7fe fbba 	bl	8007b4c <HAL_GetTick>
 80093d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093da:	e008      	b.n	80093ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093dc:	f7fe fbb6 	bl	8007b4c <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d901      	bls.n	80093ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e045      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093ee:	4b06      	ldr	r3, [pc, #24]	; (8009408 <HAL_RCC_OscConfig+0x470>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1f0      	bne.n	80093dc <HAL_RCC_OscConfig+0x444>
 80093fa:	e03d      	b.n	8009478 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d107      	bne.n	8009414 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e038      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
 8009408:	40023800 	.word	0x40023800
 800940c:	40007000 	.word	0x40007000
 8009410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009414:	4b1b      	ldr	r3, [pc, #108]	; (8009484 <HAL_RCC_OscConfig+0x4ec>)
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d028      	beq.n	8009474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800942c:	429a      	cmp	r2, r3
 800942e:	d121      	bne.n	8009474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800943a:	429a      	cmp	r2, r3
 800943c:	d11a      	bne.n	8009474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009444:	4013      	ands	r3, r2
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800944a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800944c:	4293      	cmp	r3, r2
 800944e:	d111      	bne.n	8009474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945a:	085b      	lsrs	r3, r3, #1
 800945c:	3b01      	subs	r3, #1
 800945e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009460:	429a      	cmp	r2, r3
 8009462:	d107      	bne.n	8009474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009470:	429a      	cmp	r2, r3
 8009472:	d001      	beq.n	8009478 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e000      	b.n	800947a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3718      	adds	r7, #24
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	40023800 	.word	0x40023800

08009488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e0cc      	b.n	8009636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800949c:	4b68      	ldr	r3, [pc, #416]	; (8009640 <HAL_RCC_ClockConfig+0x1b8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 030f 	and.w	r3, r3, #15
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d90c      	bls.n	80094c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094aa:	4b65      	ldr	r3, [pc, #404]	; (8009640 <HAL_RCC_ClockConfig+0x1b8>)
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	b2d2      	uxtb	r2, r2
 80094b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094b2:	4b63      	ldr	r3, [pc, #396]	; (8009640 <HAL_RCC_ClockConfig+0x1b8>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 030f 	and.w	r3, r3, #15
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d001      	beq.n	80094c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e0b8      	b.n	8009636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d020      	beq.n	8009512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094dc:	4b59      	ldr	r3, [pc, #356]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	4a58      	ldr	r2, [pc, #352]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 80094e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80094e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 0308 	and.w	r3, r3, #8
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d005      	beq.n	8009500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094f4:	4b53      	ldr	r3, [pc, #332]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	4a52      	ldr	r2, [pc, #328]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 80094fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80094fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009500:	4b50      	ldr	r3, [pc, #320]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	494d      	ldr	r1, [pc, #308]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 800950e:	4313      	orrs	r3, r2
 8009510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d044      	beq.n	80095a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d107      	bne.n	8009536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009526:	4b47      	ldr	r3, [pc, #284]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d119      	bne.n	8009566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e07f      	b.n	8009636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d003      	beq.n	8009546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009542:	2b03      	cmp	r3, #3
 8009544:	d107      	bne.n	8009556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009546:	4b3f      	ldr	r3, [pc, #252]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d109      	bne.n	8009566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e06f      	b.n	8009636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009556:	4b3b      	ldr	r3, [pc, #236]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e067      	b.n	8009636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009566:	4b37      	ldr	r3, [pc, #220]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f023 0203 	bic.w	r2, r3, #3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	4934      	ldr	r1, [pc, #208]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 8009574:	4313      	orrs	r3, r2
 8009576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009578:	f7fe fae8 	bl	8007b4c <HAL_GetTick>
 800957c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800957e:	e00a      	b.n	8009596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009580:	f7fe fae4 	bl	8007b4c <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	f241 3288 	movw	r2, #5000	; 0x1388
 800958e:	4293      	cmp	r3, r2
 8009590:	d901      	bls.n	8009596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e04f      	b.n	8009636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009596:	4b2b      	ldr	r3, [pc, #172]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f003 020c 	and.w	r2, r3, #12
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d1eb      	bne.n	8009580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095a8:	4b25      	ldr	r3, [pc, #148]	; (8009640 <HAL_RCC_ClockConfig+0x1b8>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d20c      	bcs.n	80095d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095b6:	4b22      	ldr	r3, [pc, #136]	; (8009640 <HAL_RCC_ClockConfig+0x1b8>)
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	b2d2      	uxtb	r2, r2
 80095bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095be:	4b20      	ldr	r3, [pc, #128]	; (8009640 <HAL_RCC_ClockConfig+0x1b8>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 030f 	and.w	r3, r3, #15
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d001      	beq.n	80095d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e032      	b.n	8009636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d008      	beq.n	80095ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095dc:	4b19      	ldr	r3, [pc, #100]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	4916      	ldr	r1, [pc, #88]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d009      	beq.n	800960e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095fa:	4b12      	ldr	r3, [pc, #72]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	490e      	ldr	r1, [pc, #56]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 800960a:	4313      	orrs	r3, r2
 800960c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800960e:	f000 f821 	bl	8009654 <HAL_RCC_GetSysClockFreq>
 8009612:	4602      	mov	r2, r0
 8009614:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <HAL_RCC_ClockConfig+0x1bc>)
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	091b      	lsrs	r3, r3, #4
 800961a:	f003 030f 	and.w	r3, r3, #15
 800961e:	490a      	ldr	r1, [pc, #40]	; (8009648 <HAL_RCC_ClockConfig+0x1c0>)
 8009620:	5ccb      	ldrb	r3, [r1, r3]
 8009622:	fa22 f303 	lsr.w	r3, r2, r3
 8009626:	4a09      	ldr	r2, [pc, #36]	; (800964c <HAL_RCC_ClockConfig+0x1c4>)
 8009628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800962a:	4b09      	ldr	r3, [pc, #36]	; (8009650 <HAL_RCC_ClockConfig+0x1c8>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe fa48 	bl	8007ac4 <HAL_InitTick>

  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	40023c00 	.word	0x40023c00
 8009644:	40023800 	.word	0x40023800
 8009648:	0800dc14 	.word	0x0800dc14
 800964c:	2000001c 	.word	0x2000001c
 8009650:	20000020 	.word	0x20000020

08009654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009658:	b094      	sub	sp, #80	; 0x50
 800965a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800965c:	2300      	movs	r3, #0
 800965e:	647b      	str	r3, [r7, #68]	; 0x44
 8009660:	2300      	movs	r3, #0
 8009662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009664:	2300      	movs	r3, #0
 8009666:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800966c:	4b79      	ldr	r3, [pc, #484]	; (8009854 <HAL_RCC_GetSysClockFreq+0x200>)
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	f003 030c 	and.w	r3, r3, #12
 8009674:	2b08      	cmp	r3, #8
 8009676:	d00d      	beq.n	8009694 <HAL_RCC_GetSysClockFreq+0x40>
 8009678:	2b08      	cmp	r3, #8
 800967a:	f200 80e1 	bhi.w	8009840 <HAL_RCC_GetSysClockFreq+0x1ec>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <HAL_RCC_GetSysClockFreq+0x34>
 8009682:	2b04      	cmp	r3, #4
 8009684:	d003      	beq.n	800968e <HAL_RCC_GetSysClockFreq+0x3a>
 8009686:	e0db      	b.n	8009840 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009688:	4b73      	ldr	r3, [pc, #460]	; (8009858 <HAL_RCC_GetSysClockFreq+0x204>)
 800968a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800968c:	e0db      	b.n	8009846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800968e:	4b73      	ldr	r3, [pc, #460]	; (800985c <HAL_RCC_GetSysClockFreq+0x208>)
 8009690:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009692:	e0d8      	b.n	8009846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009694:	4b6f      	ldr	r3, [pc, #444]	; (8009854 <HAL_RCC_GetSysClockFreq+0x200>)
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800969c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800969e:	4b6d      	ldr	r3, [pc, #436]	; (8009854 <HAL_RCC_GetSysClockFreq+0x200>)
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d063      	beq.n	8009772 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096aa:	4b6a      	ldr	r3, [pc, #424]	; (8009854 <HAL_RCC_GetSysClockFreq+0x200>)
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	099b      	lsrs	r3, r3, #6
 80096b0:	2200      	movs	r2, #0
 80096b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80096b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80096b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096bc:	633b      	str	r3, [r7, #48]	; 0x30
 80096be:	2300      	movs	r3, #0
 80096c0:	637b      	str	r3, [r7, #52]	; 0x34
 80096c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80096c6:	4622      	mov	r2, r4
 80096c8:	462b      	mov	r3, r5
 80096ca:	f04f 0000 	mov.w	r0, #0
 80096ce:	f04f 0100 	mov.w	r1, #0
 80096d2:	0159      	lsls	r1, r3, #5
 80096d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096d8:	0150      	lsls	r0, r2, #5
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	4621      	mov	r1, r4
 80096e0:	1a51      	subs	r1, r2, r1
 80096e2:	6139      	str	r1, [r7, #16]
 80096e4:	4629      	mov	r1, r5
 80096e6:	eb63 0301 	sbc.w	r3, r3, r1
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	f04f 0200 	mov.w	r2, #0
 80096f0:	f04f 0300 	mov.w	r3, #0
 80096f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096f8:	4659      	mov	r1, fp
 80096fa:	018b      	lsls	r3, r1, #6
 80096fc:	4651      	mov	r1, sl
 80096fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009702:	4651      	mov	r1, sl
 8009704:	018a      	lsls	r2, r1, #6
 8009706:	4651      	mov	r1, sl
 8009708:	ebb2 0801 	subs.w	r8, r2, r1
 800970c:	4659      	mov	r1, fp
 800970e:	eb63 0901 	sbc.w	r9, r3, r1
 8009712:	f04f 0200 	mov.w	r2, #0
 8009716:	f04f 0300 	mov.w	r3, #0
 800971a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800971e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009726:	4690      	mov	r8, r2
 8009728:	4699      	mov	r9, r3
 800972a:	4623      	mov	r3, r4
 800972c:	eb18 0303 	adds.w	r3, r8, r3
 8009730:	60bb      	str	r3, [r7, #8]
 8009732:	462b      	mov	r3, r5
 8009734:	eb49 0303 	adc.w	r3, r9, r3
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	f04f 0200 	mov.w	r2, #0
 800973e:	f04f 0300 	mov.w	r3, #0
 8009742:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009746:	4629      	mov	r1, r5
 8009748:	024b      	lsls	r3, r1, #9
 800974a:	4621      	mov	r1, r4
 800974c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009750:	4621      	mov	r1, r4
 8009752:	024a      	lsls	r2, r1, #9
 8009754:	4610      	mov	r0, r2
 8009756:	4619      	mov	r1, r3
 8009758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800975a:	2200      	movs	r2, #0
 800975c:	62bb      	str	r3, [r7, #40]	; 0x28
 800975e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009764:	f7f7 f9d8 	bl	8000b18 <__aeabi_uldivmod>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4613      	mov	r3, r2
 800976e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009770:	e058      	b.n	8009824 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009772:	4b38      	ldr	r3, [pc, #224]	; (8009854 <HAL_RCC_GetSysClockFreq+0x200>)
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	099b      	lsrs	r3, r3, #6
 8009778:	2200      	movs	r2, #0
 800977a:	4618      	mov	r0, r3
 800977c:	4611      	mov	r1, r2
 800977e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009782:	623b      	str	r3, [r7, #32]
 8009784:	2300      	movs	r3, #0
 8009786:	627b      	str	r3, [r7, #36]	; 0x24
 8009788:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800978c:	4642      	mov	r2, r8
 800978e:	464b      	mov	r3, r9
 8009790:	f04f 0000 	mov.w	r0, #0
 8009794:	f04f 0100 	mov.w	r1, #0
 8009798:	0159      	lsls	r1, r3, #5
 800979a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800979e:	0150      	lsls	r0, r2, #5
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4641      	mov	r1, r8
 80097a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80097aa:	4649      	mov	r1, r9
 80097ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80097b0:	f04f 0200 	mov.w	r2, #0
 80097b4:	f04f 0300 	mov.w	r3, #0
 80097b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80097bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80097c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80097c4:	ebb2 040a 	subs.w	r4, r2, sl
 80097c8:	eb63 050b 	sbc.w	r5, r3, fp
 80097cc:	f04f 0200 	mov.w	r2, #0
 80097d0:	f04f 0300 	mov.w	r3, #0
 80097d4:	00eb      	lsls	r3, r5, #3
 80097d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097da:	00e2      	lsls	r2, r4, #3
 80097dc:	4614      	mov	r4, r2
 80097de:	461d      	mov	r5, r3
 80097e0:	4643      	mov	r3, r8
 80097e2:	18e3      	adds	r3, r4, r3
 80097e4:	603b      	str	r3, [r7, #0]
 80097e6:	464b      	mov	r3, r9
 80097e8:	eb45 0303 	adc.w	r3, r5, r3
 80097ec:	607b      	str	r3, [r7, #4]
 80097ee:	f04f 0200 	mov.w	r2, #0
 80097f2:	f04f 0300 	mov.w	r3, #0
 80097f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80097fa:	4629      	mov	r1, r5
 80097fc:	028b      	lsls	r3, r1, #10
 80097fe:	4621      	mov	r1, r4
 8009800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009804:	4621      	mov	r1, r4
 8009806:	028a      	lsls	r2, r1, #10
 8009808:	4610      	mov	r0, r2
 800980a:	4619      	mov	r1, r3
 800980c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800980e:	2200      	movs	r2, #0
 8009810:	61bb      	str	r3, [r7, #24]
 8009812:	61fa      	str	r2, [r7, #28]
 8009814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009818:	f7f7 f97e 	bl	8000b18 <__aeabi_uldivmod>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4613      	mov	r3, r2
 8009822:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009824:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <HAL_RCC_GetSysClockFreq+0x200>)
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	0c1b      	lsrs	r3, r3, #16
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	3301      	adds	r3, #1
 8009830:	005b      	lsls	r3, r3, #1
 8009832:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009838:	fbb2 f3f3 	udiv	r3, r2, r3
 800983c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800983e:	e002      	b.n	8009846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009840:	4b05      	ldr	r3, [pc, #20]	; (8009858 <HAL_RCC_GetSysClockFreq+0x204>)
 8009842:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009848:	4618      	mov	r0, r3
 800984a:	3750      	adds	r7, #80	; 0x50
 800984c:	46bd      	mov	sp, r7
 800984e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009852:	bf00      	nop
 8009854:	40023800 	.word	0x40023800
 8009858:	00f42400 	.word	0x00f42400
 800985c:	007a1200 	.word	0x007a1200

08009860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009860:	b480      	push	{r7}
 8009862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009864:	4b03      	ldr	r3, [pc, #12]	; (8009874 <HAL_RCC_GetHCLKFreq+0x14>)
 8009866:	681b      	ldr	r3, [r3, #0]
}
 8009868:	4618      	mov	r0, r3
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	2000001c 	.word	0x2000001c

08009878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800987c:	f7ff fff0 	bl	8009860 <HAL_RCC_GetHCLKFreq>
 8009880:	4602      	mov	r2, r0
 8009882:	4b05      	ldr	r3, [pc, #20]	; (8009898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	0a9b      	lsrs	r3, r3, #10
 8009888:	f003 0307 	and.w	r3, r3, #7
 800988c:	4903      	ldr	r1, [pc, #12]	; (800989c <HAL_RCC_GetPCLK1Freq+0x24>)
 800988e:	5ccb      	ldrb	r3, [r1, r3]
 8009890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009894:	4618      	mov	r0, r3
 8009896:	bd80      	pop	{r7, pc}
 8009898:	40023800 	.word	0x40023800
 800989c:	0800dc24 	.word	0x0800dc24

080098a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80098a4:	f7ff ffdc 	bl	8009860 <HAL_RCC_GetHCLKFreq>
 80098a8:	4602      	mov	r2, r0
 80098aa:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	0b5b      	lsrs	r3, r3, #13
 80098b0:	f003 0307 	and.w	r3, r3, #7
 80098b4:	4903      	ldr	r1, [pc, #12]	; (80098c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098b6:	5ccb      	ldrb	r3, [r1, r3]
 80098b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098bc:	4618      	mov	r0, r3
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	40023800 	.word	0x40023800
 80098c4:	0800dc24 	.word	0x0800dc24

080098c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80098d0:	2300      	movs	r3, #0
 80098d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10b      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d105      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d075      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80098fc:	4b91      	ldr	r3, [pc, #580]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80098fe:	2200      	movs	r2, #0
 8009900:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009902:	f7fe f923 	bl	8007b4c <HAL_GetTick>
 8009906:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009908:	e008      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800990a:	f7fe f91f 	bl	8007b4c <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	2b02      	cmp	r3, #2
 8009916:	d901      	bls.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	e189      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800991c:	4b8a      	ldr	r3, [pc, #552]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1f0      	bne.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b00      	cmp	r3, #0
 8009932:	d009      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	019a      	lsls	r2, r3, #6
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	071b      	lsls	r3, r3, #28
 8009940:	4981      	ldr	r1, [pc, #516]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009942:	4313      	orrs	r3, r2
 8009944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0302 	and.w	r3, r3, #2
 8009950:	2b00      	cmp	r3, #0
 8009952:	d01f      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009954:	4b7c      	ldr	r3, [pc, #496]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800995a:	0f1b      	lsrs	r3, r3, #28
 800995c:	f003 0307 	and.w	r3, r3, #7
 8009960:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	019a      	lsls	r2, r3, #6
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	061b      	lsls	r3, r3, #24
 800996e:	431a      	orrs	r2, r3
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	071b      	lsls	r3, r3, #28
 8009974:	4974      	ldr	r1, [pc, #464]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009976:	4313      	orrs	r3, r2
 8009978:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800997c:	4b72      	ldr	r3, [pc, #456]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800997e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009982:	f023 021f 	bic.w	r2, r3, #31
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	3b01      	subs	r3, #1
 800998c:	496e      	ldr	r1, [pc, #440]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800998e:	4313      	orrs	r3, r2
 8009990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00d      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	019a      	lsls	r2, r3, #6
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	061b      	lsls	r3, r3, #24
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	071b      	lsls	r3, r3, #28
 80099b4:	4964      	ldr	r1, [pc, #400]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80099bc:	4b61      	ldr	r3, [pc, #388]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80099be:	2201      	movs	r2, #1
 80099c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80099c2:	f7fe f8c3 	bl	8007b4c <HAL_GetTick>
 80099c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80099c8:	e008      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80099ca:	f7fe f8bf 	bl	8007b4c <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d901      	bls.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e129      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80099dc:	4b5a      	ldr	r3, [pc, #360]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d0f0      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f003 0304 	and.w	r3, r3, #4
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d105      	bne.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d079      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009a00:	4b52      	ldr	r3, [pc, #328]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a06:	f7fe f8a1 	bl	8007b4c <HAL_GetTick>
 8009a0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a0c:	e008      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009a0e:	f7fe f89d 	bl	8007b4c <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d901      	bls.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e107      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a20:	4b49      	ldr	r3, [pc, #292]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a2c:	d0ef      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0304 	and.w	r3, r3, #4
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d020      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009a3a:	4b43      	ldr	r3, [pc, #268]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a40:	0f1b      	lsrs	r3, r3, #28
 8009a42:	f003 0307 	and.w	r3, r3, #7
 8009a46:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	019a      	lsls	r2, r3, #6
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	061b      	lsls	r3, r3, #24
 8009a54:	431a      	orrs	r2, r3
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	071b      	lsls	r3, r3, #28
 8009a5a:	493b      	ldr	r1, [pc, #236]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009a62:	4b39      	ldr	r3, [pc, #228]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	3b01      	subs	r3, #1
 8009a72:	021b      	lsls	r3, r3, #8
 8009a74:	4934      	ldr	r1, [pc, #208]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0308 	and.w	r3, r3, #8
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d01e      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009a88:	4b2f      	ldr	r3, [pc, #188]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a8e:	0e1b      	lsrs	r3, r3, #24
 8009a90:	f003 030f 	and.w	r3, r3, #15
 8009a94:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	019a      	lsls	r2, r3, #6
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	061b      	lsls	r3, r3, #24
 8009aa0:	431a      	orrs	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	071b      	lsls	r3, r3, #28
 8009aa8:	4927      	ldr	r1, [pc, #156]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009ab0:	4b25      	ldr	r3, [pc, #148]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ab6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	4922      	ldr	r1, [pc, #136]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009ac6:	4b21      	ldr	r3, [pc, #132]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009acc:	f7fe f83e 	bl	8007b4c <HAL_GetTick>
 8009ad0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ad2:	e008      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009ad4:	f7fe f83a 	bl	8007b4c <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d901      	bls.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e0a4      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ae6:	4b18      	ldr	r3, [pc, #96]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009af2:	d1ef      	bne.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0320 	and.w	r3, r3, #32
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 808b 	beq.w	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b02:	2300      	movs	r3, #0
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	4b10      	ldr	r3, [pc, #64]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0a:	4a0f      	ldr	r2, [pc, #60]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b10:	6413      	str	r3, [r2, #64]	; 0x40
 8009b12:	4b0d      	ldr	r3, [pc, #52]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009b1e:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a0b      	ldr	r2, [pc, #44]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b2a:	f7fe f80f 	bl	8007b4c <HAL_GetTick>
 8009b2e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009b30:	e010      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009b32:	f7fe f80b 	bl	8007b4c <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d909      	bls.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e075      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009b44:	42470068 	.word	0x42470068
 8009b48:	40023800 	.word	0x40023800
 8009b4c:	42470070 	.word	0x42470070
 8009b50:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009b54:	4b38      	ldr	r3, [pc, #224]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0e8      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009b60:	4b36      	ldr	r3, [pc, #216]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d02f      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d028      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b7e:	4b2f      	ldr	r3, [pc, #188]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009b88:	4b2d      	ldr	r3, [pc, #180]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009b8e:	4b2c      	ldr	r3, [pc, #176]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009b94:	4a29      	ldr	r2, [pc, #164]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009b9a:	4b28      	ldr	r3, [pc, #160]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d114      	bne.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009ba6:	f7fd ffd1 	bl	8007b4c <HAL_GetTick>
 8009baa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bac:	e00a      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bae:	f7fd ffcd 	bl	8007b4c <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d901      	bls.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e035      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bc4:	4b1d      	ldr	r3, [pc, #116]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc8:	f003 0302 	and.w	r3, r3, #2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0ee      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bdc:	d10d      	bne.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009bde:	4b17      	ldr	r3, [pc, #92]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bf2:	4912      	ldr	r1, [pc, #72]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	608b      	str	r3, [r1, #8]
 8009bf8:	e005      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8009bfa:	4b10      	ldr	r3, [pc, #64]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	4a0f      	ldr	r2, [pc, #60]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009c04:	6093      	str	r3, [r2, #8]
 8009c06:	4b0d      	ldr	r3, [pc, #52]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c12:	490a      	ldr	r1, [pc, #40]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0310 	and.w	r3, r3, #16
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d004      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009c2a:	4b06      	ldr	r3, [pc, #24]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009c2c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	40007000 	.word	0x40007000
 8009c3c:	40023800 	.word	0x40023800
 8009c40:	42470e40 	.word	0x42470e40
 8009c44:	424711e0 	.word	0x424711e0

08009c48 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e025      	b.n	8009ca8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d106      	bne.n	8009c76 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7fb fdfb 	bl	800586c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2202      	movs	r2, #2
 8009c7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	3304      	adds	r3, #4
 8009c86:	4619      	mov	r1, r3
 8009c88:	4610      	mov	r0, r2
 8009c8a:	f002 f829 	bl	800bce0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	461a      	mov	r2, r3
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	f002 f87e 	bl	800bd9a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009cc2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009cc4:	7dfb      	ldrb	r3, [r7, #23]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d101      	bne.n	8009cce <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	e021      	b.n	8009d12 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d002      	beq.n	8009cda <HAL_SDRAM_SendCommand+0x2a>
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	2b05      	cmp	r3, #5
 8009cd8:	d118      	bne.n	8009d0c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	68b9      	ldr	r1, [r7, #8]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f002 f8be 	bl	800be6c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d104      	bne.n	8009d02 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2205      	movs	r2, #5
 8009cfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009d00:	e006      	b.n	8009d10 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009d0a:	e001      	b.n	8009d10 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e000      	b.n	8009d12 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3718      	adds	r7, #24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e07b      	b.n	8009e24 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d108      	bne.n	8009d46 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d3c:	d009      	beq.n	8009d52 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	61da      	str	r2, [r3, #28]
 8009d44:	e005      	b.n	8009d52 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d106      	bne.n	8009d72 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7fb fbeb 	bl	8005548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2202      	movs	r2, #2
 8009d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009d9a:	431a      	orrs	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009da4:	431a      	orrs	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	f003 0302 	and.w	r3, r3, #2
 8009dae:	431a      	orrs	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	431a      	orrs	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	69db      	ldr	r3, [r3, #28]
 8009dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd6:	ea42 0103 	orr.w	r1, r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	0c1b      	lsrs	r3, r3, #16
 8009df0:	f003 0104 	and.w	r1, r3, #4
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	f003 0210 	and.w	r2, r3, #16
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	69da      	ldr	r2, [r3, #28]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e041      	b.n	8009ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d106      	bne.n	8009e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7fb fbc0 	bl	80055d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3304      	adds	r3, #4
 8009e68:	4619      	mov	r1, r3
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	f000 fc84 	bl	800a778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d001      	beq.n	8009ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e04e      	b.n	8009f82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f042 0201 	orr.w	r2, r2, #1
 8009efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a23      	ldr	r2, [pc, #140]	; (8009f90 <HAL_TIM_Base_Start_IT+0xc4>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d022      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x80>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f0e:	d01d      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x80>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1f      	ldr	r2, [pc, #124]	; (8009f94 <HAL_TIM_Base_Start_IT+0xc8>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d018      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x80>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a1e      	ldr	r2, [pc, #120]	; (8009f98 <HAL_TIM_Base_Start_IT+0xcc>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d013      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x80>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a1c      	ldr	r2, [pc, #112]	; (8009f9c <HAL_TIM_Base_Start_IT+0xd0>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d00e      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x80>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a1b      	ldr	r2, [pc, #108]	; (8009fa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d009      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x80>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a19      	ldr	r2, [pc, #100]	; (8009fa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d004      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x80>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a18      	ldr	r2, [pc, #96]	; (8009fa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d111      	bne.n	8009f70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f003 0307 	and.w	r3, r3, #7
 8009f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b06      	cmp	r3, #6
 8009f5c:	d010      	beq.n	8009f80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f042 0201 	orr.w	r2, r2, #1
 8009f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f6e:	e007      	b.n	8009f80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f042 0201 	orr.w	r2, r2, #1
 8009f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	40010000 	.word	0x40010000
 8009f94:	40000400 	.word	0x40000400
 8009f98:	40000800 	.word	0x40000800
 8009f9c:	40000c00 	.word	0x40000c00
 8009fa0:	40010400 	.word	0x40010400
 8009fa4:	40014000 	.word	0x40014000
 8009fa8:	40001800 	.word	0x40001800

08009fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e041      	b.n	800a042 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d106      	bne.n	8009fd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f839 	bl	800a04a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4610      	mov	r0, r2
 8009fec:	f000 fbc4 	bl	800a778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
	...

0800a060 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d109      	bne.n	800a084 <HAL_TIM_PWM_Start+0x24>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b01      	cmp	r3, #1
 800a07a:	bf14      	ite	ne
 800a07c:	2301      	movne	r3, #1
 800a07e:	2300      	moveq	r3, #0
 800a080:	b2db      	uxtb	r3, r3
 800a082:	e022      	b.n	800a0ca <HAL_TIM_PWM_Start+0x6a>
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2b04      	cmp	r3, #4
 800a088:	d109      	bne.n	800a09e <HAL_TIM_PWM_Start+0x3e>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b01      	cmp	r3, #1
 800a094:	bf14      	ite	ne
 800a096:	2301      	movne	r3, #1
 800a098:	2300      	moveq	r3, #0
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	e015      	b.n	800a0ca <HAL_TIM_PWM_Start+0x6a>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d109      	bne.n	800a0b8 <HAL_TIM_PWM_Start+0x58>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	bf14      	ite	ne
 800a0b0:	2301      	movne	r3, #1
 800a0b2:	2300      	moveq	r3, #0
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	e008      	b.n	800a0ca <HAL_TIM_PWM_Start+0x6a>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	bf14      	ite	ne
 800a0c4:	2301      	movne	r3, #1
 800a0c6:	2300      	moveq	r3, #0
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e07c      	b.n	800a1cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d104      	bne.n	800a0e2 <HAL_TIM_PWM_Start+0x82>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0e0:	e013      	b.n	800a10a <HAL_TIM_PWM_Start+0xaa>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	d104      	bne.n	800a0f2 <HAL_TIM_PWM_Start+0x92>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0f0:	e00b      	b.n	800a10a <HAL_TIM_PWM_Start+0xaa>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2b08      	cmp	r3, #8
 800a0f6:	d104      	bne.n	800a102 <HAL_TIM_PWM_Start+0xa2>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a100:	e003      	b.n	800a10a <HAL_TIM_PWM_Start+0xaa>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2202      	movs	r2, #2
 800a106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2201      	movs	r2, #1
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	4618      	mov	r0, r3
 800a114:	f000 fe1a 	bl	800ad4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a2d      	ldr	r2, [pc, #180]	; (800a1d4 <HAL_TIM_PWM_Start+0x174>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d004      	beq.n	800a12c <HAL_TIM_PWM_Start+0xcc>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a2c      	ldr	r2, [pc, #176]	; (800a1d8 <HAL_TIM_PWM_Start+0x178>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d101      	bne.n	800a130 <HAL_TIM_PWM_Start+0xd0>
 800a12c:	2301      	movs	r3, #1
 800a12e:	e000      	b.n	800a132 <HAL_TIM_PWM_Start+0xd2>
 800a130:	2300      	movs	r3, #0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d007      	beq.n	800a146 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a22      	ldr	r2, [pc, #136]	; (800a1d4 <HAL_TIM_PWM_Start+0x174>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d022      	beq.n	800a196 <HAL_TIM_PWM_Start+0x136>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a158:	d01d      	beq.n	800a196 <HAL_TIM_PWM_Start+0x136>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a1f      	ldr	r2, [pc, #124]	; (800a1dc <HAL_TIM_PWM_Start+0x17c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d018      	beq.n	800a196 <HAL_TIM_PWM_Start+0x136>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a1d      	ldr	r2, [pc, #116]	; (800a1e0 <HAL_TIM_PWM_Start+0x180>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d013      	beq.n	800a196 <HAL_TIM_PWM_Start+0x136>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a1c      	ldr	r2, [pc, #112]	; (800a1e4 <HAL_TIM_PWM_Start+0x184>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d00e      	beq.n	800a196 <HAL_TIM_PWM_Start+0x136>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a16      	ldr	r2, [pc, #88]	; (800a1d8 <HAL_TIM_PWM_Start+0x178>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d009      	beq.n	800a196 <HAL_TIM_PWM_Start+0x136>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a18      	ldr	r2, [pc, #96]	; (800a1e8 <HAL_TIM_PWM_Start+0x188>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d004      	beq.n	800a196 <HAL_TIM_PWM_Start+0x136>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a16      	ldr	r2, [pc, #88]	; (800a1ec <HAL_TIM_PWM_Start+0x18c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d111      	bne.n	800a1ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	f003 0307 	and.w	r3, r3, #7
 800a1a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2b06      	cmp	r3, #6
 800a1a6:	d010      	beq.n	800a1ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f042 0201 	orr.w	r2, r2, #1
 800a1b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1b8:	e007      	b.n	800a1ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f042 0201 	orr.w	r2, r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	40010400 	.word	0x40010400
 800a1dc:	40000400 	.word	0x40000400
 800a1e0:	40000800 	.word	0x40000800
 800a1e4:	40000c00 	.word	0x40000c00
 800a1e8:	40014000 	.word	0x40014000
 800a1ec:	40001800 	.word	0x40001800

0800a1f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	f003 0302 	and.w	r3, r3, #2
 800a202:	2b02      	cmp	r3, #2
 800a204:	d122      	bne.n	800a24c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	f003 0302 	and.w	r3, r3, #2
 800a210:	2b02      	cmp	r3, #2
 800a212:	d11b      	bne.n	800a24c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f06f 0202 	mvn.w	r2, #2
 800a21c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	f003 0303 	and.w	r3, r3, #3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fa81 	bl	800a73a <HAL_TIM_IC_CaptureCallback>
 800a238:	e005      	b.n	800a246 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fa73 	bl	800a726 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fa84 	bl	800a74e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	f003 0304 	and.w	r3, r3, #4
 800a256:	2b04      	cmp	r3, #4
 800a258:	d122      	bne.n	800a2a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b04      	cmp	r3, #4
 800a266:	d11b      	bne.n	800a2a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f06f 0204 	mvn.w	r2, #4
 800a270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2202      	movs	r2, #2
 800a276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fa57 	bl	800a73a <HAL_TIM_IC_CaptureCallback>
 800a28c:	e005      	b.n	800a29a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 fa49 	bl	800a726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fa5a 	bl	800a74e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	f003 0308 	and.w	r3, r3, #8
 800a2aa:	2b08      	cmp	r3, #8
 800a2ac:	d122      	bne.n	800a2f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	f003 0308 	and.w	r3, r3, #8
 800a2b8:	2b08      	cmp	r3, #8
 800a2ba:	d11b      	bne.n	800a2f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f06f 0208 	mvn.w	r2, #8
 800a2c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2204      	movs	r2, #4
 800a2ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	f003 0303 	and.w	r3, r3, #3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fa2d 	bl	800a73a <HAL_TIM_IC_CaptureCallback>
 800a2e0:	e005      	b.n	800a2ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fa1f 	bl	800a726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fa30 	bl	800a74e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	f003 0310 	and.w	r3, r3, #16
 800a2fe:	2b10      	cmp	r3, #16
 800a300:	d122      	bne.n	800a348 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	f003 0310 	and.w	r3, r3, #16
 800a30c:	2b10      	cmp	r3, #16
 800a30e:	d11b      	bne.n	800a348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f06f 0210 	mvn.w	r2, #16
 800a318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2208      	movs	r2, #8
 800a31e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d003      	beq.n	800a336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fa03 	bl	800a73a <HAL_TIM_IC_CaptureCallback>
 800a334:	e005      	b.n	800a342 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 f9f5 	bl	800a726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fa06 	bl	800a74e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	2b01      	cmp	r3, #1
 800a354:	d10e      	bne.n	800a374 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b01      	cmp	r3, #1
 800a362:	d107      	bne.n	800a374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f06f 0201 	mvn.w	r2, #1
 800a36c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f9cf 	bl	800a712 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a37e:	2b80      	cmp	r3, #128	; 0x80
 800a380:	d10e      	bne.n	800a3a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a38c:	2b80      	cmp	r3, #128	; 0x80
 800a38e:	d107      	bne.n	800a3a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fd82 	bl	800aea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3aa:	2b40      	cmp	r3, #64	; 0x40
 800a3ac:	d10e      	bne.n	800a3cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b8:	2b40      	cmp	r3, #64	; 0x40
 800a3ba:	d107      	bne.n	800a3cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f9cb 	bl	800a762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	f003 0320 	and.w	r3, r3, #32
 800a3d6:	2b20      	cmp	r3, #32
 800a3d8:	d10e      	bne.n	800a3f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	f003 0320 	and.w	r3, r3, #32
 800a3e4:	2b20      	cmp	r3, #32
 800a3e6:	d107      	bne.n	800a3f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f06f 0220 	mvn.w	r2, #32
 800a3f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fd4c 	bl	800ae90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a416:	2b01      	cmp	r3, #1
 800a418:	d101      	bne.n	800a41e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a41a:	2302      	movs	r3, #2
 800a41c:	e0ae      	b.n	800a57c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2b0c      	cmp	r3, #12
 800a42a:	f200 809f 	bhi.w	800a56c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a42e:	a201      	add	r2, pc, #4	; (adr r2, 800a434 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a469 	.word	0x0800a469
 800a438:	0800a56d 	.word	0x0800a56d
 800a43c:	0800a56d 	.word	0x0800a56d
 800a440:	0800a56d 	.word	0x0800a56d
 800a444:	0800a4a9 	.word	0x0800a4a9
 800a448:	0800a56d 	.word	0x0800a56d
 800a44c:	0800a56d 	.word	0x0800a56d
 800a450:	0800a56d 	.word	0x0800a56d
 800a454:	0800a4eb 	.word	0x0800a4eb
 800a458:	0800a56d 	.word	0x0800a56d
 800a45c:	0800a56d 	.word	0x0800a56d
 800a460:	0800a56d 	.word	0x0800a56d
 800a464:	0800a52b 	.word	0x0800a52b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68b9      	ldr	r1, [r7, #8]
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 fa22 	bl	800a8b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	699a      	ldr	r2, [r3, #24]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f042 0208 	orr.w	r2, r2, #8
 800a482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	699a      	ldr	r2, [r3, #24]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 0204 	bic.w	r2, r2, #4
 800a492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6999      	ldr	r1, [r3, #24]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	691a      	ldr	r2, [r3, #16]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	619a      	str	r2, [r3, #24]
      break;
 800a4a6:	e064      	b.n	800a572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68b9      	ldr	r1, [r7, #8]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 fa72 	bl	800a998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	699a      	ldr	r2, [r3, #24]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	699a      	ldr	r2, [r3, #24]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6999      	ldr	r1, [r3, #24]
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	021a      	lsls	r2, r3, #8
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	430a      	orrs	r2, r1
 800a4e6:	619a      	str	r2, [r3, #24]
      break;
 800a4e8:	e043      	b.n	800a572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68b9      	ldr	r1, [r7, #8]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 fac7 	bl	800aa84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69da      	ldr	r2, [r3, #28]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f042 0208 	orr.w	r2, r2, #8
 800a504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	69da      	ldr	r2, [r3, #28]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0204 	bic.w	r2, r2, #4
 800a514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	69d9      	ldr	r1, [r3, #28]
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	691a      	ldr	r2, [r3, #16]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	61da      	str	r2, [r3, #28]
      break;
 800a528:	e023      	b.n	800a572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68b9      	ldr	r1, [r7, #8]
 800a530:	4618      	mov	r0, r3
 800a532:	f000 fb1b 	bl	800ab6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	69da      	ldr	r2, [r3, #28]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	69da      	ldr	r2, [r3, #28]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	69d9      	ldr	r1, [r3, #28]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	021a      	lsls	r2, r3, #8
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	61da      	str	r2, [r3, #28]
      break;
 800a56a:	e002      	b.n	800a572 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	75fb      	strb	r3, [r7, #23]
      break;
 800a570:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3718      	adds	r7, #24
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d101      	bne.n	800a5a0 <HAL_TIM_ConfigClockSource+0x1c>
 800a59c:	2302      	movs	r3, #2
 800a59e:	e0b4      	b.n	800a70a <HAL_TIM_ConfigClockSource+0x186>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d8:	d03e      	beq.n	800a658 <HAL_TIM_ConfigClockSource+0xd4>
 800a5da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5de:	f200 8087 	bhi.w	800a6f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a5e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e6:	f000 8086 	beq.w	800a6f6 <HAL_TIM_ConfigClockSource+0x172>
 800a5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ee:	d87f      	bhi.n	800a6f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a5f0:	2b70      	cmp	r3, #112	; 0x70
 800a5f2:	d01a      	beq.n	800a62a <HAL_TIM_ConfigClockSource+0xa6>
 800a5f4:	2b70      	cmp	r3, #112	; 0x70
 800a5f6:	d87b      	bhi.n	800a6f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a5f8:	2b60      	cmp	r3, #96	; 0x60
 800a5fa:	d050      	beq.n	800a69e <HAL_TIM_ConfigClockSource+0x11a>
 800a5fc:	2b60      	cmp	r3, #96	; 0x60
 800a5fe:	d877      	bhi.n	800a6f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a600:	2b50      	cmp	r3, #80	; 0x50
 800a602:	d03c      	beq.n	800a67e <HAL_TIM_ConfigClockSource+0xfa>
 800a604:	2b50      	cmp	r3, #80	; 0x50
 800a606:	d873      	bhi.n	800a6f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a608:	2b40      	cmp	r3, #64	; 0x40
 800a60a:	d058      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x13a>
 800a60c:	2b40      	cmp	r3, #64	; 0x40
 800a60e:	d86f      	bhi.n	800a6f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a610:	2b30      	cmp	r3, #48	; 0x30
 800a612:	d064      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x15a>
 800a614:	2b30      	cmp	r3, #48	; 0x30
 800a616:	d86b      	bhi.n	800a6f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a618:	2b20      	cmp	r3, #32
 800a61a:	d060      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x15a>
 800a61c:	2b20      	cmp	r3, #32
 800a61e:	d867      	bhi.n	800a6f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a620:	2b00      	cmp	r3, #0
 800a622:	d05c      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x15a>
 800a624:	2b10      	cmp	r3, #16
 800a626:	d05a      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x15a>
 800a628:	e062      	b.n	800a6f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6818      	ldr	r0, [r3, #0]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	6899      	ldr	r1, [r3, #8]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	f000 fb67 	bl	800ad0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a64c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	609a      	str	r2, [r3, #8]
      break;
 800a656:	e04f      	b.n	800a6f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6818      	ldr	r0, [r3, #0]
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	6899      	ldr	r1, [r3, #8]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	f000 fb50 	bl	800ad0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689a      	ldr	r2, [r3, #8]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a67a:	609a      	str	r2, [r3, #8]
      break;
 800a67c:	e03c      	b.n	800a6f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6818      	ldr	r0, [r3, #0]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	6859      	ldr	r1, [r3, #4]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	461a      	mov	r2, r3
 800a68c:	f000 fac4 	bl	800ac18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2150      	movs	r1, #80	; 0x50
 800a696:	4618      	mov	r0, r3
 800a698:	f000 fb1d 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800a69c:	e02c      	b.n	800a6f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6818      	ldr	r0, [r3, #0]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	6859      	ldr	r1, [r3, #4]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f000 fae3 	bl	800ac76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2160      	movs	r1, #96	; 0x60
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 fb0d 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800a6bc:	e01c      	b.n	800a6f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6818      	ldr	r0, [r3, #0]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	6859      	ldr	r1, [r3, #4]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f000 faa4 	bl	800ac18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2140      	movs	r1, #64	; 0x40
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 fafd 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800a6dc:	e00c      	b.n	800a6f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	f000 faf4 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800a6ee:	e003      	b.n	800a6f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f4:	e000      	b.n	800a6f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a6f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a708:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a712:	b480      	push	{r7}
 800a714:	b083      	sub	sp, #12
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a71a:	bf00      	nop
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a726:	b480      	push	{r7}
 800a728:	b083      	sub	sp, #12
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a72e:	bf00      	nop
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a73a:	b480      	push	{r7}
 800a73c:	b083      	sub	sp, #12
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a742:	bf00      	nop
 800a744:	370c      	adds	r7, #12
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a756:	bf00      	nop
 800a758:	370c      	adds	r7, #12
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a762:	b480      	push	{r7}
 800a764:	b083      	sub	sp, #12
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a76a:	bf00      	nop
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
	...

0800a778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a40      	ldr	r2, [pc, #256]	; (800a88c <TIM_Base_SetConfig+0x114>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d013      	beq.n	800a7b8 <TIM_Base_SetConfig+0x40>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a796:	d00f      	beq.n	800a7b8 <TIM_Base_SetConfig+0x40>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a3d      	ldr	r2, [pc, #244]	; (800a890 <TIM_Base_SetConfig+0x118>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d00b      	beq.n	800a7b8 <TIM_Base_SetConfig+0x40>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a3c      	ldr	r2, [pc, #240]	; (800a894 <TIM_Base_SetConfig+0x11c>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d007      	beq.n	800a7b8 <TIM_Base_SetConfig+0x40>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a3b      	ldr	r2, [pc, #236]	; (800a898 <TIM_Base_SetConfig+0x120>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d003      	beq.n	800a7b8 <TIM_Base_SetConfig+0x40>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a3a      	ldr	r2, [pc, #232]	; (800a89c <TIM_Base_SetConfig+0x124>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d108      	bne.n	800a7ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a2f      	ldr	r2, [pc, #188]	; (800a88c <TIM_Base_SetConfig+0x114>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d02b      	beq.n	800a82a <TIM_Base_SetConfig+0xb2>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d8:	d027      	beq.n	800a82a <TIM_Base_SetConfig+0xb2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a2c      	ldr	r2, [pc, #176]	; (800a890 <TIM_Base_SetConfig+0x118>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d023      	beq.n	800a82a <TIM_Base_SetConfig+0xb2>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a2b      	ldr	r2, [pc, #172]	; (800a894 <TIM_Base_SetConfig+0x11c>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d01f      	beq.n	800a82a <TIM_Base_SetConfig+0xb2>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a2a      	ldr	r2, [pc, #168]	; (800a898 <TIM_Base_SetConfig+0x120>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d01b      	beq.n	800a82a <TIM_Base_SetConfig+0xb2>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a29      	ldr	r2, [pc, #164]	; (800a89c <TIM_Base_SetConfig+0x124>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d017      	beq.n	800a82a <TIM_Base_SetConfig+0xb2>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a28      	ldr	r2, [pc, #160]	; (800a8a0 <TIM_Base_SetConfig+0x128>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d013      	beq.n	800a82a <TIM_Base_SetConfig+0xb2>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a27      	ldr	r2, [pc, #156]	; (800a8a4 <TIM_Base_SetConfig+0x12c>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d00f      	beq.n	800a82a <TIM_Base_SetConfig+0xb2>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a26      	ldr	r2, [pc, #152]	; (800a8a8 <TIM_Base_SetConfig+0x130>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d00b      	beq.n	800a82a <TIM_Base_SetConfig+0xb2>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a25      	ldr	r2, [pc, #148]	; (800a8ac <TIM_Base_SetConfig+0x134>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d007      	beq.n	800a82a <TIM_Base_SetConfig+0xb2>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a24      	ldr	r2, [pc, #144]	; (800a8b0 <TIM_Base_SetConfig+0x138>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d003      	beq.n	800a82a <TIM_Base_SetConfig+0xb2>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a23      	ldr	r2, [pc, #140]	; (800a8b4 <TIM_Base_SetConfig+0x13c>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d108      	bne.n	800a83c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	4313      	orrs	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	689a      	ldr	r2, [r3, #8]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a0a      	ldr	r2, [pc, #40]	; (800a88c <TIM_Base_SetConfig+0x114>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d003      	beq.n	800a870 <TIM_Base_SetConfig+0xf8>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a0c      	ldr	r2, [pc, #48]	; (800a89c <TIM_Base_SetConfig+0x124>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d103      	bne.n	800a878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	691a      	ldr	r2, [r3, #16]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	615a      	str	r2, [r3, #20]
}
 800a87e:	bf00      	nop
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	40010000 	.word	0x40010000
 800a890:	40000400 	.word	0x40000400
 800a894:	40000800 	.word	0x40000800
 800a898:	40000c00 	.word	0x40000c00
 800a89c:	40010400 	.word	0x40010400
 800a8a0:	40014000 	.word	0x40014000
 800a8a4:	40014400 	.word	0x40014400
 800a8a8:	40014800 	.word	0x40014800
 800a8ac:	40001800 	.word	0x40001800
 800a8b0:	40001c00 	.word	0x40001c00
 800a8b4:	40002000 	.word	0x40002000

0800a8b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b087      	sub	sp, #28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	f023 0201 	bic.w	r2, r3, #1
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f023 0303 	bic.w	r3, r3, #3
 800a8ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f023 0302 	bic.w	r3, r3, #2
 800a900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	4313      	orrs	r3, r2
 800a90a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a20      	ldr	r2, [pc, #128]	; (800a990 <TIM_OC1_SetConfig+0xd8>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d003      	beq.n	800a91c <TIM_OC1_SetConfig+0x64>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a1f      	ldr	r2, [pc, #124]	; (800a994 <TIM_OC1_SetConfig+0xdc>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d10c      	bne.n	800a936 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f023 0308 	bic.w	r3, r3, #8
 800a922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f023 0304 	bic.w	r3, r3, #4
 800a934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a15      	ldr	r2, [pc, #84]	; (800a990 <TIM_OC1_SetConfig+0xd8>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d003      	beq.n	800a946 <TIM_OC1_SetConfig+0x8e>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a14      	ldr	r2, [pc, #80]	; (800a994 <TIM_OC1_SetConfig+0xdc>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d111      	bne.n	800a96a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a94c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	4313      	orrs	r3, r2
 800a968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	621a      	str	r2, [r3, #32]
}
 800a984:	bf00      	nop
 800a986:	371c      	adds	r7, #28
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	40010000 	.word	0x40010000
 800a994:	40010400 	.word	0x40010400

0800a998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a998:	b480      	push	{r7}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	f023 0210 	bic.w	r2, r3, #16
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	021b      	lsls	r3, r3, #8
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f023 0320 	bic.w	r3, r3, #32
 800a9e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	011b      	lsls	r3, r3, #4
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a22      	ldr	r2, [pc, #136]	; (800aa7c <TIM_OC2_SetConfig+0xe4>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d003      	beq.n	800aa00 <TIM_OC2_SetConfig+0x68>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a21      	ldr	r2, [pc, #132]	; (800aa80 <TIM_OC2_SetConfig+0xe8>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d10d      	bne.n	800aa1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	011b      	lsls	r3, r3, #4
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a17      	ldr	r2, [pc, #92]	; (800aa7c <TIM_OC2_SetConfig+0xe4>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d003      	beq.n	800aa2c <TIM_OC2_SetConfig+0x94>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a16      	ldr	r2, [pc, #88]	; (800aa80 <TIM_OC2_SetConfig+0xe8>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d113      	bne.n	800aa54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	695b      	ldr	r3, [r3, #20]
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685a      	ldr	r2, [r3, #4]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	621a      	str	r2, [r3, #32]
}
 800aa6e:	bf00      	nop
 800aa70:	371c      	adds	r7, #28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	40010000 	.word	0x40010000
 800aa80:	40010400 	.word	0x40010400

0800aa84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a1b      	ldr	r3, [r3, #32]
 800aa9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 0303 	bic.w	r3, r3, #3
 800aaba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aacc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	021b      	lsls	r3, r3, #8
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a21      	ldr	r2, [pc, #132]	; (800ab64 <TIM_OC3_SetConfig+0xe0>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d003      	beq.n	800aaea <TIM_OC3_SetConfig+0x66>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a20      	ldr	r2, [pc, #128]	; (800ab68 <TIM_OC3_SetConfig+0xe4>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d10d      	bne.n	800ab06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aaf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	021b      	lsls	r3, r3, #8
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a16      	ldr	r2, [pc, #88]	; (800ab64 <TIM_OC3_SetConfig+0xe0>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d003      	beq.n	800ab16 <TIM_OC3_SetConfig+0x92>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a15      	ldr	r2, [pc, #84]	; (800ab68 <TIM_OC3_SetConfig+0xe4>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d113      	bne.n	800ab3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	695b      	ldr	r3, [r3, #20]
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	011b      	lsls	r3, r3, #4
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	693a      	ldr	r2, [r7, #16]
 800ab42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	621a      	str	r2, [r3, #32]
}
 800ab58:	bf00      	nop
 800ab5a:	371c      	adds	r7, #28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	40010000 	.word	0x40010000
 800ab68:	40010400 	.word	0x40010400

0800ab6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
 800ab7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a1b      	ldr	r3, [r3, #32]
 800ab86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	69db      	ldr	r3, [r3, #28]
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	021b      	lsls	r3, r3, #8
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	4313      	orrs	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	031b      	lsls	r3, r3, #12
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a12      	ldr	r2, [pc, #72]	; (800ac10 <TIM_OC4_SetConfig+0xa4>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d003      	beq.n	800abd4 <TIM_OC4_SetConfig+0x68>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a11      	ldr	r2, [pc, #68]	; (800ac14 <TIM_OC4_SetConfig+0xa8>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d109      	bne.n	800abe8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	019b      	lsls	r3, r3, #6
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	697a      	ldr	r2, [r7, #20]
 800abec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	621a      	str	r2, [r3, #32]
}
 800ac02:	bf00      	nop
 800ac04:	371c      	adds	r7, #28
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	40010000 	.word	0x40010000
 800ac14:	40010400 	.word	0x40010400

0800ac18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	f023 0201 	bic.w	r2, r3, #1
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f023 030a 	bic.w	r3, r3, #10
 800ac54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	621a      	str	r2, [r3, #32]
}
 800ac6a:	bf00      	nop
 800ac6c:	371c      	adds	r7, #28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b087      	sub	sp, #28
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	60f8      	str	r0, [r7, #12]
 800ac7e:	60b9      	str	r1, [r7, #8]
 800ac80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	f023 0210 	bic.w	r2, r3, #16
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	031b      	lsls	r3, r3, #12
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800acb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	011b      	lsls	r3, r3, #4
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	4313      	orrs	r3, r2
 800acbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	621a      	str	r2, [r3, #32]
}
 800acca:	bf00      	nop
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b085      	sub	sp, #20
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	f043 0307 	orr.w	r3, r3, #7
 800acf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	609a      	str	r2, [r3, #8]
}
 800ad00:	bf00      	nop
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b087      	sub	sp, #28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	021a      	lsls	r2, r3, #8
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	609a      	str	r2, [r3, #8]
}
 800ad40:	bf00      	nop
 800ad42:	371c      	adds	r7, #28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	f003 031f 	and.w	r3, r3, #31
 800ad5e:	2201      	movs	r2, #1
 800ad60:	fa02 f303 	lsl.w	r3, r2, r3
 800ad64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6a1a      	ldr	r2, [r3, #32]
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	43db      	mvns	r3, r3
 800ad6e:	401a      	ands	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6a1a      	ldr	r2, [r3, #32]
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	f003 031f 	and.w	r3, r3, #31
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	fa01 f303 	lsl.w	r3, r1, r3
 800ad84:	431a      	orrs	r2, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	621a      	str	r2, [r3, #32]
}
 800ad8a:	bf00      	nop
 800ad8c:	371c      	adds	r7, #28
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
	...

0800ad98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d101      	bne.n	800adb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adac:	2302      	movs	r3, #2
 800adae:	e05a      	b.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2202      	movs	r2, #2
 800adbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	4313      	orrs	r3, r2
 800ade0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a21      	ldr	r2, [pc, #132]	; (800ae74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d022      	beq.n	800ae3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adfc:	d01d      	beq.n	800ae3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a1d      	ldr	r2, [pc, #116]	; (800ae78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d018      	beq.n	800ae3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a1b      	ldr	r2, [pc, #108]	; (800ae7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d013      	beq.n	800ae3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a1a      	ldr	r2, [pc, #104]	; (800ae80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d00e      	beq.n	800ae3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a18      	ldr	r2, [pc, #96]	; (800ae84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d009      	beq.n	800ae3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a17      	ldr	r2, [pc, #92]	; (800ae88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d004      	beq.n	800ae3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a15      	ldr	r2, [pc, #84]	; (800ae8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d10c      	bne.n	800ae54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	40010000 	.word	0x40010000
 800ae78:	40000400 	.word	0x40000400
 800ae7c:	40000800 	.word	0x40000800
 800ae80:	40000c00 	.word	0x40000c00
 800ae84:	40010400 	.word	0x40010400
 800ae88:	40014000 	.word	0x40014000
 800ae8c:	40001800 	.word	0x40001800

0800ae90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aeac:	bf00      	nop
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e03f      	b.n	800af4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d106      	bne.n	800aee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7fa fbf2 	bl	80056c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2224      	movs	r2, #36	; 0x24
 800aee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68da      	ldr	r2, [r3, #12]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aefa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 fc7b 	bl	800b7f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	691a      	ldr	r2, [r3, #16]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	695a      	ldr	r2, [r3, #20]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68da      	ldr	r2, [r3, #12]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2220      	movs	r2, #32
 800af3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2220      	movs	r2, #32
 800af44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
	...

0800af54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b0ba      	sub	sp, #232	; 0xe8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800af7a:	2300      	movs	r3, #0
 800af7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800af80:	2300      	movs	r3, #0
 800af82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800af86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af8a:	f003 030f 	and.w	r3, r3, #15
 800af8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800af92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10f      	bne.n	800afba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af9e:	f003 0320 	and.w	r3, r3, #32
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d009      	beq.n	800afba <HAL_UART_IRQHandler+0x66>
 800afa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afaa:	f003 0320 	and.w	r3, r3, #32
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d003      	beq.n	800afba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fb65 	bl	800b682 <UART_Receive_IT>
      return;
 800afb8:	e256      	b.n	800b468 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800afba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 80de 	beq.w	800b180 <HAL_UART_IRQHandler+0x22c>
 800afc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d106      	bne.n	800afde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800afd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f000 80d1 	beq.w	800b180 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800afde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afe2:	f003 0301 	and.w	r3, r3, #1
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00b      	beq.n	800b002 <HAL_UART_IRQHandler+0xae>
 800afea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d005      	beq.n	800b002 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affa:	f043 0201 	orr.w	r2, r3, #1
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b006:	f003 0304 	and.w	r3, r3, #4
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00b      	beq.n	800b026 <HAL_UART_IRQHandler+0xd2>
 800b00e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b012:	f003 0301 	and.w	r3, r3, #1
 800b016:	2b00      	cmp	r3, #0
 800b018:	d005      	beq.n	800b026 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	f043 0202 	orr.w	r2, r3, #2
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b02a:	f003 0302 	and.w	r3, r3, #2
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00b      	beq.n	800b04a <HAL_UART_IRQHandler+0xf6>
 800b032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d005      	beq.n	800b04a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	f043 0204 	orr.w	r2, r3, #4
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b04e:	f003 0308 	and.w	r3, r3, #8
 800b052:	2b00      	cmp	r3, #0
 800b054:	d011      	beq.n	800b07a <HAL_UART_IRQHandler+0x126>
 800b056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b05a:	f003 0320 	and.w	r3, r3, #32
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d105      	bne.n	800b06e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b066:	f003 0301 	and.w	r3, r3, #1
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d005      	beq.n	800b07a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b072:	f043 0208 	orr.w	r2, r3, #8
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 81ed 	beq.w	800b45e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b088:	f003 0320 	and.w	r3, r3, #32
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d008      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x14e>
 800b090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b094:	f003 0320 	and.w	r3, r3, #32
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 faf0 	bl	800b682 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	695b      	ldr	r3, [r3, #20]
 800b0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ac:	2b40      	cmp	r3, #64	; 0x40
 800b0ae:	bf0c      	ite	eq
 800b0b0:	2301      	moveq	r3, #1
 800b0b2:	2300      	movne	r3, #0
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0be:	f003 0308 	and.w	r3, r3, #8
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d103      	bne.n	800b0ce <HAL_UART_IRQHandler+0x17a>
 800b0c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d04f      	beq.n	800b16e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f9f8 	bl	800b4c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0de:	2b40      	cmp	r3, #64	; 0x40
 800b0e0:	d141      	bne.n	800b166 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3314      	adds	r3, #20
 800b0e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b0f0:	e853 3f00 	ldrex	r3, [r3]
 800b0f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b0f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3314      	adds	r3, #20
 800b10a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b10e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b11a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b11e:	e841 2300 	strex	r3, r2, [r1]
 800b122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1d9      	bne.n	800b0e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b132:	2b00      	cmp	r3, #0
 800b134:	d013      	beq.n	800b15e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13a:	4a7d      	ldr	r2, [pc, #500]	; (800b330 <HAL_UART_IRQHandler+0x3dc>)
 800b13c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b142:	4618      	mov	r0, r3
 800b144:	f7fc feb3 	bl	8007eae <HAL_DMA_Abort_IT>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d016      	beq.n	800b17c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b158:	4610      	mov	r0, r2
 800b15a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b15c:	e00e      	b.n	800b17c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f99a 	bl	800b498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b164:	e00a      	b.n	800b17c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f996 	bl	800b498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b16c:	e006      	b.n	800b17c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f992 	bl	800b498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b17a:	e170      	b.n	800b45e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b17c:	bf00      	nop
    return;
 800b17e:	e16e      	b.n	800b45e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b184:	2b01      	cmp	r3, #1
 800b186:	f040 814a 	bne.w	800b41e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b18e:	f003 0310 	and.w	r3, r3, #16
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 8143 	beq.w	800b41e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b19c:	f003 0310 	and.w	r3, r3, #16
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f000 813c 	beq.w	800b41e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60bb      	str	r3, [r7, #8]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	60bb      	str	r3, [r7, #8]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	60bb      	str	r3, [r7, #8]
 800b1ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c6:	2b40      	cmp	r3, #64	; 0x40
 800b1c8:	f040 80b4 	bne.w	800b334 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b1d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 8140 	beq.w	800b462 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	f080 8139 	bcs.w	800b462 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b1f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fc:	69db      	ldr	r3, [r3, #28]
 800b1fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b202:	f000 8088 	beq.w	800b316 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	330c      	adds	r3, #12
 800b20c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b214:	e853 3f00 	ldrex	r3, [r3]
 800b218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b21c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	330c      	adds	r3, #12
 800b22e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b232:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b23e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b242:	e841 2300 	strex	r3, r2, [r1]
 800b246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b24a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1d9      	bne.n	800b206 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3314      	adds	r3, #20
 800b258:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b264:	f023 0301 	bic.w	r3, r3, #1
 800b268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3314      	adds	r3, #20
 800b272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b276:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b27a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b27e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b282:	e841 2300 	strex	r3, r2, [r1]
 800b286:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1e1      	bne.n	800b252 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3314      	adds	r3, #20
 800b294:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b298:	e853 3f00 	ldrex	r3, [r3]
 800b29c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b29e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3314      	adds	r3, #20
 800b2ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b2b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b2b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b2b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b2ba:	e841 2300 	strex	r3, r2, [r1]
 800b2be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b2c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e3      	bne.n	800b28e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2220      	movs	r2, #32
 800b2ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	330c      	adds	r3, #12
 800b2da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2de:	e853 3f00 	ldrex	r3, [r3]
 800b2e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2e6:	f023 0310 	bic.w	r3, r3, #16
 800b2ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	330c      	adds	r3, #12
 800b2f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b2f8:	65ba      	str	r2, [r7, #88]	; 0x58
 800b2fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b2fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b300:	e841 2300 	strex	r3, r2, [r1]
 800b304:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1e3      	bne.n	800b2d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b310:	4618      	mov	r0, r3
 800b312:	f7fc fd5c 	bl	8007dce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b31e:	b29b      	uxth	r3, r3
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	b29b      	uxth	r3, r3
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f8c0 	bl	800b4ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b32c:	e099      	b.n	800b462 <HAL_UART_IRQHandler+0x50e>
 800b32e:	bf00      	nop
 800b330:	0800b58b 	.word	0x0800b58b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b348:	b29b      	uxth	r3, r3
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f000 808b 	beq.w	800b466 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b354:	2b00      	cmp	r3, #0
 800b356:	f000 8086 	beq.w	800b466 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	330c      	adds	r3, #12
 800b360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b364:	e853 3f00 	ldrex	r3, [r3]
 800b368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b370:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	330c      	adds	r3, #12
 800b37a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b37e:	647a      	str	r2, [r7, #68]	; 0x44
 800b380:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b382:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b386:	e841 2300 	strex	r3, r2, [r1]
 800b38a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1e3      	bne.n	800b35a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	3314      	adds	r3, #20
 800b398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	e853 3f00 	ldrex	r3, [r3]
 800b3a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	f023 0301 	bic.w	r3, r3, #1
 800b3a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3314      	adds	r3, #20
 800b3b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b3b6:	633a      	str	r2, [r7, #48]	; 0x30
 800b3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3be:	e841 2300 	strex	r3, r2, [r1]
 800b3c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1e3      	bne.n	800b392 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2220      	movs	r2, #32
 800b3ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	330c      	adds	r3, #12
 800b3de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	e853 3f00 	ldrex	r3, [r3]
 800b3e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f023 0310 	bic.w	r3, r3, #16
 800b3ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	330c      	adds	r3, #12
 800b3f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b3fc:	61fa      	str	r2, [r7, #28]
 800b3fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b400:	69b9      	ldr	r1, [r7, #24]
 800b402:	69fa      	ldr	r2, [r7, #28]
 800b404:	e841 2300 	strex	r3, r2, [r1]
 800b408:	617b      	str	r3, [r7, #20]
   return(result);
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1e3      	bne.n	800b3d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b410:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 f848 	bl	800b4ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b41c:	e023      	b.n	800b466 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b426:	2b00      	cmp	r3, #0
 800b428:	d009      	beq.n	800b43e <HAL_UART_IRQHandler+0x4ea>
 800b42a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b432:	2b00      	cmp	r3, #0
 800b434:	d003      	beq.n	800b43e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f8bb 	bl	800b5b2 <UART_Transmit_IT>
    return;
 800b43c:	e014      	b.n	800b468 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b43e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00e      	beq.n	800b468 <HAL_UART_IRQHandler+0x514>
 800b44a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b452:	2b00      	cmp	r3, #0
 800b454:	d008      	beq.n	800b468 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f8fb 	bl	800b652 <UART_EndTransmit_IT>
    return;
 800b45c:	e004      	b.n	800b468 <HAL_UART_IRQHandler+0x514>
    return;
 800b45e:	bf00      	nop
 800b460:	e002      	b.n	800b468 <HAL_UART_IRQHandler+0x514>
      return;
 800b462:	bf00      	nop
 800b464:	e000      	b.n	800b468 <HAL_UART_IRQHandler+0x514>
      return;
 800b466:	bf00      	nop
  }
}
 800b468:	37e8      	adds	r7, #232	; 0xe8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop

0800b470 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b48c:	bf00      	nop
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b4b8:	bf00      	nop
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b095      	sub	sp, #84	; 0x54
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	330c      	adds	r3, #12
 800b4d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d6:	e853 3f00 	ldrex	r3, [r3]
 800b4da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	330c      	adds	r3, #12
 800b4ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4ec:	643a      	str	r2, [r7, #64]	; 0x40
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4f4:	e841 2300 	strex	r3, r2, [r1]
 800b4f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1e5      	bne.n	800b4cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3314      	adds	r3, #20
 800b506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b508:	6a3b      	ldr	r3, [r7, #32]
 800b50a:	e853 3f00 	ldrex	r3, [r3]
 800b50e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	f023 0301 	bic.w	r3, r3, #1
 800b516:	64bb      	str	r3, [r7, #72]	; 0x48
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3314      	adds	r3, #20
 800b51e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b520:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b528:	e841 2300 	strex	r3, r2, [r1]
 800b52c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1e5      	bne.n	800b500 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d119      	bne.n	800b570 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	330c      	adds	r3, #12
 800b542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	e853 3f00 	ldrex	r3, [r3]
 800b54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	f023 0310 	bic.w	r3, r3, #16
 800b552:	647b      	str	r3, [r7, #68]	; 0x44
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	330c      	adds	r3, #12
 800b55a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b55c:	61ba      	str	r2, [r7, #24]
 800b55e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b560:	6979      	ldr	r1, [r7, #20]
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	e841 2300 	strex	r3, r2, [r1]
 800b568:	613b      	str	r3, [r7, #16]
   return(result);
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1e5      	bne.n	800b53c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2220      	movs	r2, #32
 800b574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b57e:	bf00      	nop
 800b580:	3754      	adds	r7, #84	; 0x54
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b596:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f7ff ff77 	bl	800b498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b085      	sub	sp, #20
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	2b21      	cmp	r3, #33	; 0x21
 800b5c4:	d13e      	bne.n	800b644 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5ce:	d114      	bne.n	800b5fa <UART_Transmit_IT+0x48>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d110      	bne.n	800b5fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a1b      	ldr	r3, [r3, #32]
 800b5dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	881b      	ldrh	r3, [r3, #0]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	1c9a      	adds	r2, r3, #2
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	621a      	str	r2, [r3, #32]
 800b5f8:	e008      	b.n	800b60c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	1c59      	adds	r1, r3, #1
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	6211      	str	r1, [r2, #32]
 800b604:	781a      	ldrb	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b610:	b29b      	uxth	r3, r3
 800b612:	3b01      	subs	r3, #1
 800b614:	b29b      	uxth	r3, r3
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	4619      	mov	r1, r3
 800b61a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10f      	bne.n	800b640 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68da      	ldr	r2, [r3, #12]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b62e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68da      	ldr	r2, [r3, #12]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b63e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	e000      	b.n	800b646 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b644:	2302      	movs	r3, #2
  }
}
 800b646:	4618      	mov	r0, r3
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b082      	sub	sp, #8
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68da      	ldr	r2, [r3, #12]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b668:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2220      	movs	r2, #32
 800b66e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7ff fefc 	bl	800b470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b08c      	sub	sp, #48	; 0x30
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b22      	cmp	r3, #34	; 0x22
 800b694:	f040 80ab 	bne.w	800b7ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6a0:	d117      	bne.n	800b6d2 <UART_Receive_IT+0x50>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d113      	bne.n	800b6d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ca:	1c9a      	adds	r2, r3, #2
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	629a      	str	r2, [r3, #40]	; 0x28
 800b6d0:	e026      	b.n	800b720 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6e4:	d007      	beq.n	800b6f6 <UART_Receive_IT+0x74>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d10a      	bne.n	800b704 <UART_Receive_IT+0x82>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d106      	bne.n	800b704 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	701a      	strb	r2, [r3, #0]
 800b702:	e008      	b.n	800b716 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b710:	b2da      	uxtb	r2, r3
 800b712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b714:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71a:	1c5a      	adds	r2, r3, #1
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b724:	b29b      	uxth	r3, r3
 800b726:	3b01      	subs	r3, #1
 800b728:	b29b      	uxth	r3, r3
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	4619      	mov	r1, r3
 800b72e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b730:	2b00      	cmp	r3, #0
 800b732:	d15a      	bne.n	800b7ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	68da      	ldr	r2, [r3, #12]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f022 0220 	bic.w	r2, r2, #32
 800b742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68da      	ldr	r2, [r3, #12]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	695a      	ldr	r2, [r3, #20]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f022 0201 	bic.w	r2, r2, #1
 800b762:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2220      	movs	r2, #32
 800b768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b770:	2b01      	cmp	r3, #1
 800b772:	d135      	bne.n	800b7e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	330c      	adds	r3, #12
 800b780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	e853 3f00 	ldrex	r3, [r3]
 800b788:	613b      	str	r3, [r7, #16]
   return(result);
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	f023 0310 	bic.w	r3, r3, #16
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	330c      	adds	r3, #12
 800b798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b79a:	623a      	str	r2, [r7, #32]
 800b79c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79e:	69f9      	ldr	r1, [r7, #28]
 800b7a0:	6a3a      	ldr	r2, [r7, #32]
 800b7a2:	e841 2300 	strex	r3, r2, [r1]
 800b7a6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1e5      	bne.n	800b77a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 0310 	and.w	r3, r3, #16
 800b7b8:	2b10      	cmp	r3, #16
 800b7ba:	d10a      	bne.n	800b7d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7bc:	2300      	movs	r3, #0
 800b7be:	60fb      	str	r3, [r7, #12]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	60fb      	str	r3, [r7, #12]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	60fb      	str	r3, [r7, #12]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f7ff fe67 	bl	800b4ac <HAL_UARTEx_RxEventCallback>
 800b7de:	e002      	b.n	800b7e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff fe4f 	bl	800b484 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	e002      	b.n	800b7f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e000      	b.n	800b7f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b7ee:	2302      	movs	r3, #2
  }
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3730      	adds	r7, #48	; 0x30
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7fc:	b0c0      	sub	sp, #256	; 0x100
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b814:	68d9      	ldr	r1, [r3, #12]
 800b816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	ea40 0301 	orr.w	r3, r0, r1
 800b820:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b826:	689a      	ldr	r2, [r3, #8]
 800b828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	431a      	orrs	r2, r3
 800b830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b834:	695b      	ldr	r3, [r3, #20]
 800b836:	431a      	orrs	r2, r3
 800b838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b83c:	69db      	ldr	r3, [r3, #28]
 800b83e:	4313      	orrs	r3, r2
 800b840:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b850:	f021 010c 	bic.w	r1, r1, #12
 800b854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b85e:	430b      	orrs	r3, r1
 800b860:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	695b      	ldr	r3, [r3, #20]
 800b86a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b86e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b872:	6999      	ldr	r1, [r3, #24]
 800b874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	ea40 0301 	orr.w	r3, r0, r1
 800b87e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	4b8f      	ldr	r3, [pc, #572]	; (800bac4 <UART_SetConfig+0x2cc>)
 800b888:	429a      	cmp	r2, r3
 800b88a:	d005      	beq.n	800b898 <UART_SetConfig+0xa0>
 800b88c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	4b8d      	ldr	r3, [pc, #564]	; (800bac8 <UART_SetConfig+0x2d0>)
 800b894:	429a      	cmp	r2, r3
 800b896:	d104      	bne.n	800b8a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b898:	f7fe f802 	bl	80098a0 <HAL_RCC_GetPCLK2Freq>
 800b89c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b8a0:	e003      	b.n	800b8aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b8a2:	f7fd ffe9 	bl	8009878 <HAL_RCC_GetPCLK1Freq>
 800b8a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8ae:	69db      	ldr	r3, [r3, #28]
 800b8b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8b4:	f040 810c 	bne.w	800bad0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b8c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b8c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b8ca:	4622      	mov	r2, r4
 800b8cc:	462b      	mov	r3, r5
 800b8ce:	1891      	adds	r1, r2, r2
 800b8d0:	65b9      	str	r1, [r7, #88]	; 0x58
 800b8d2:	415b      	adcs	r3, r3
 800b8d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b8da:	4621      	mov	r1, r4
 800b8dc:	eb12 0801 	adds.w	r8, r2, r1
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	eb43 0901 	adc.w	r9, r3, r1
 800b8e6:	f04f 0200 	mov.w	r2, #0
 800b8ea:	f04f 0300 	mov.w	r3, #0
 800b8ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8fa:	4690      	mov	r8, r2
 800b8fc:	4699      	mov	r9, r3
 800b8fe:	4623      	mov	r3, r4
 800b900:	eb18 0303 	adds.w	r3, r8, r3
 800b904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b908:	462b      	mov	r3, r5
 800b90a:	eb49 0303 	adc.w	r3, r9, r3
 800b90e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b91e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b922:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b926:	460b      	mov	r3, r1
 800b928:	18db      	adds	r3, r3, r3
 800b92a:	653b      	str	r3, [r7, #80]	; 0x50
 800b92c:	4613      	mov	r3, r2
 800b92e:	eb42 0303 	adc.w	r3, r2, r3
 800b932:	657b      	str	r3, [r7, #84]	; 0x54
 800b934:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b938:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b93c:	f7f5 f8ec 	bl	8000b18 <__aeabi_uldivmod>
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	4b61      	ldr	r3, [pc, #388]	; (800bacc <UART_SetConfig+0x2d4>)
 800b946:	fba3 2302 	umull	r2, r3, r3, r2
 800b94a:	095b      	lsrs	r3, r3, #5
 800b94c:	011c      	lsls	r4, r3, #4
 800b94e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b952:	2200      	movs	r2, #0
 800b954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b958:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b95c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b960:	4642      	mov	r2, r8
 800b962:	464b      	mov	r3, r9
 800b964:	1891      	adds	r1, r2, r2
 800b966:	64b9      	str	r1, [r7, #72]	; 0x48
 800b968:	415b      	adcs	r3, r3
 800b96a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b96c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b970:	4641      	mov	r1, r8
 800b972:	eb12 0a01 	adds.w	sl, r2, r1
 800b976:	4649      	mov	r1, r9
 800b978:	eb43 0b01 	adc.w	fp, r3, r1
 800b97c:	f04f 0200 	mov.w	r2, #0
 800b980:	f04f 0300 	mov.w	r3, #0
 800b984:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b988:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b98c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b990:	4692      	mov	sl, r2
 800b992:	469b      	mov	fp, r3
 800b994:	4643      	mov	r3, r8
 800b996:	eb1a 0303 	adds.w	r3, sl, r3
 800b99a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b99e:	464b      	mov	r3, r9
 800b9a0:	eb4b 0303 	adc.w	r3, fp, r3
 800b9a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b9b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	18db      	adds	r3, r3, r3
 800b9c0:	643b      	str	r3, [r7, #64]	; 0x40
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	eb42 0303 	adc.w	r3, r2, r3
 800b9c8:	647b      	str	r3, [r7, #68]	; 0x44
 800b9ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b9ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b9d2:	f7f5 f8a1 	bl	8000b18 <__aeabi_uldivmod>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4611      	mov	r1, r2
 800b9dc:	4b3b      	ldr	r3, [pc, #236]	; (800bacc <UART_SetConfig+0x2d4>)
 800b9de:	fba3 2301 	umull	r2, r3, r3, r1
 800b9e2:	095b      	lsrs	r3, r3, #5
 800b9e4:	2264      	movs	r2, #100	; 0x64
 800b9e6:	fb02 f303 	mul.w	r3, r2, r3
 800b9ea:	1acb      	subs	r3, r1, r3
 800b9ec:	00db      	lsls	r3, r3, #3
 800b9ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b9f2:	4b36      	ldr	r3, [pc, #216]	; (800bacc <UART_SetConfig+0x2d4>)
 800b9f4:	fba3 2302 	umull	r2, r3, r3, r2
 800b9f8:	095b      	lsrs	r3, r3, #5
 800b9fa:	005b      	lsls	r3, r3, #1
 800b9fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba00:	441c      	add	r4, r3
 800ba02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba06:	2200      	movs	r2, #0
 800ba08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ba10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ba14:	4642      	mov	r2, r8
 800ba16:	464b      	mov	r3, r9
 800ba18:	1891      	adds	r1, r2, r2
 800ba1a:	63b9      	str	r1, [r7, #56]	; 0x38
 800ba1c:	415b      	adcs	r3, r3
 800ba1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ba24:	4641      	mov	r1, r8
 800ba26:	1851      	adds	r1, r2, r1
 800ba28:	6339      	str	r1, [r7, #48]	; 0x30
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	414b      	adcs	r3, r1
 800ba2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba30:	f04f 0200 	mov.w	r2, #0
 800ba34:	f04f 0300 	mov.w	r3, #0
 800ba38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ba3c:	4659      	mov	r1, fp
 800ba3e:	00cb      	lsls	r3, r1, #3
 800ba40:	4651      	mov	r1, sl
 800ba42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba46:	4651      	mov	r1, sl
 800ba48:	00ca      	lsls	r2, r1, #3
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4603      	mov	r3, r0
 800ba50:	4642      	mov	r2, r8
 800ba52:	189b      	adds	r3, r3, r2
 800ba54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba58:	464b      	mov	r3, r9
 800ba5a:	460a      	mov	r2, r1
 800ba5c:	eb42 0303 	adc.w	r3, r2, r3
 800ba60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ba74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ba78:	460b      	mov	r3, r1
 800ba7a:	18db      	adds	r3, r3, r3
 800ba7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba7e:	4613      	mov	r3, r2
 800ba80:	eb42 0303 	adc.w	r3, r2, r3
 800ba84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ba8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba8e:	f7f5 f843 	bl	8000b18 <__aeabi_uldivmod>
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	4b0d      	ldr	r3, [pc, #52]	; (800bacc <UART_SetConfig+0x2d4>)
 800ba98:	fba3 1302 	umull	r1, r3, r3, r2
 800ba9c:	095b      	lsrs	r3, r3, #5
 800ba9e:	2164      	movs	r1, #100	; 0x64
 800baa0:	fb01 f303 	mul.w	r3, r1, r3
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	00db      	lsls	r3, r3, #3
 800baa8:	3332      	adds	r3, #50	; 0x32
 800baaa:	4a08      	ldr	r2, [pc, #32]	; (800bacc <UART_SetConfig+0x2d4>)
 800baac:	fba2 2303 	umull	r2, r3, r2, r3
 800bab0:	095b      	lsrs	r3, r3, #5
 800bab2:	f003 0207 	and.w	r2, r3, #7
 800bab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4422      	add	r2, r4
 800babe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bac0:	e105      	b.n	800bcce <UART_SetConfig+0x4d6>
 800bac2:	bf00      	nop
 800bac4:	40011000 	.word	0x40011000
 800bac8:	40011400 	.word	0x40011400
 800bacc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bad4:	2200      	movs	r2, #0
 800bad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bada:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bade:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bae2:	4642      	mov	r2, r8
 800bae4:	464b      	mov	r3, r9
 800bae6:	1891      	adds	r1, r2, r2
 800bae8:	6239      	str	r1, [r7, #32]
 800baea:	415b      	adcs	r3, r3
 800baec:	627b      	str	r3, [r7, #36]	; 0x24
 800baee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800baf2:	4641      	mov	r1, r8
 800baf4:	1854      	adds	r4, r2, r1
 800baf6:	4649      	mov	r1, r9
 800baf8:	eb43 0501 	adc.w	r5, r3, r1
 800bafc:	f04f 0200 	mov.w	r2, #0
 800bb00:	f04f 0300 	mov.w	r3, #0
 800bb04:	00eb      	lsls	r3, r5, #3
 800bb06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb0a:	00e2      	lsls	r2, r4, #3
 800bb0c:	4614      	mov	r4, r2
 800bb0e:	461d      	mov	r5, r3
 800bb10:	4643      	mov	r3, r8
 800bb12:	18e3      	adds	r3, r4, r3
 800bb14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb18:	464b      	mov	r3, r9
 800bb1a:	eb45 0303 	adc.w	r3, r5, r3
 800bb1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb32:	f04f 0200 	mov.w	r2, #0
 800bb36:	f04f 0300 	mov.w	r3, #0
 800bb3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bb3e:	4629      	mov	r1, r5
 800bb40:	008b      	lsls	r3, r1, #2
 800bb42:	4621      	mov	r1, r4
 800bb44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb48:	4621      	mov	r1, r4
 800bb4a:	008a      	lsls	r2, r1, #2
 800bb4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bb50:	f7f4 ffe2 	bl	8000b18 <__aeabi_uldivmod>
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	4b60      	ldr	r3, [pc, #384]	; (800bcdc <UART_SetConfig+0x4e4>)
 800bb5a:	fba3 2302 	umull	r2, r3, r3, r2
 800bb5e:	095b      	lsrs	r3, r3, #5
 800bb60:	011c      	lsls	r4, r3, #4
 800bb62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb66:	2200      	movs	r2, #0
 800bb68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bb74:	4642      	mov	r2, r8
 800bb76:	464b      	mov	r3, r9
 800bb78:	1891      	adds	r1, r2, r2
 800bb7a:	61b9      	str	r1, [r7, #24]
 800bb7c:	415b      	adcs	r3, r3
 800bb7e:	61fb      	str	r3, [r7, #28]
 800bb80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb84:	4641      	mov	r1, r8
 800bb86:	1851      	adds	r1, r2, r1
 800bb88:	6139      	str	r1, [r7, #16]
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	414b      	adcs	r3, r1
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	f04f 0200 	mov.w	r2, #0
 800bb94:	f04f 0300 	mov.w	r3, #0
 800bb98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb9c:	4659      	mov	r1, fp
 800bb9e:	00cb      	lsls	r3, r1, #3
 800bba0:	4651      	mov	r1, sl
 800bba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bba6:	4651      	mov	r1, sl
 800bba8:	00ca      	lsls	r2, r1, #3
 800bbaa:	4610      	mov	r0, r2
 800bbac:	4619      	mov	r1, r3
 800bbae:	4603      	mov	r3, r0
 800bbb0:	4642      	mov	r2, r8
 800bbb2:	189b      	adds	r3, r3, r2
 800bbb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbb8:	464b      	mov	r3, r9
 800bbba:	460a      	mov	r2, r1
 800bbbc:	eb42 0303 	adc.w	r3, r2, r3
 800bbc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbce:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bbd0:	f04f 0200 	mov.w	r2, #0
 800bbd4:	f04f 0300 	mov.w	r3, #0
 800bbd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bbdc:	4649      	mov	r1, r9
 800bbde:	008b      	lsls	r3, r1, #2
 800bbe0:	4641      	mov	r1, r8
 800bbe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbe6:	4641      	mov	r1, r8
 800bbe8:	008a      	lsls	r2, r1, #2
 800bbea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bbee:	f7f4 ff93 	bl	8000b18 <__aeabi_uldivmod>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4b39      	ldr	r3, [pc, #228]	; (800bcdc <UART_SetConfig+0x4e4>)
 800bbf8:	fba3 1302 	umull	r1, r3, r3, r2
 800bbfc:	095b      	lsrs	r3, r3, #5
 800bbfe:	2164      	movs	r1, #100	; 0x64
 800bc00:	fb01 f303 	mul.w	r3, r1, r3
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	3332      	adds	r3, #50	; 0x32
 800bc0a:	4a34      	ldr	r2, [pc, #208]	; (800bcdc <UART_SetConfig+0x4e4>)
 800bc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc10:	095b      	lsrs	r3, r3, #5
 800bc12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc16:	441c      	add	r4, r3
 800bc18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	673b      	str	r3, [r7, #112]	; 0x70
 800bc20:	677a      	str	r2, [r7, #116]	; 0x74
 800bc22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bc26:	4642      	mov	r2, r8
 800bc28:	464b      	mov	r3, r9
 800bc2a:	1891      	adds	r1, r2, r2
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	415b      	adcs	r3, r3
 800bc30:	60fb      	str	r3, [r7, #12]
 800bc32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc36:	4641      	mov	r1, r8
 800bc38:	1851      	adds	r1, r2, r1
 800bc3a:	6039      	str	r1, [r7, #0]
 800bc3c:	4649      	mov	r1, r9
 800bc3e:	414b      	adcs	r3, r1
 800bc40:	607b      	str	r3, [r7, #4]
 800bc42:	f04f 0200 	mov.w	r2, #0
 800bc46:	f04f 0300 	mov.w	r3, #0
 800bc4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc4e:	4659      	mov	r1, fp
 800bc50:	00cb      	lsls	r3, r1, #3
 800bc52:	4651      	mov	r1, sl
 800bc54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc58:	4651      	mov	r1, sl
 800bc5a:	00ca      	lsls	r2, r1, #3
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	4619      	mov	r1, r3
 800bc60:	4603      	mov	r3, r0
 800bc62:	4642      	mov	r2, r8
 800bc64:	189b      	adds	r3, r3, r2
 800bc66:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc68:	464b      	mov	r3, r9
 800bc6a:	460a      	mov	r2, r1
 800bc6c:	eb42 0303 	adc.w	r3, r2, r3
 800bc70:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	663b      	str	r3, [r7, #96]	; 0x60
 800bc7c:	667a      	str	r2, [r7, #100]	; 0x64
 800bc7e:	f04f 0200 	mov.w	r2, #0
 800bc82:	f04f 0300 	mov.w	r3, #0
 800bc86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bc8a:	4649      	mov	r1, r9
 800bc8c:	008b      	lsls	r3, r1, #2
 800bc8e:	4641      	mov	r1, r8
 800bc90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc94:	4641      	mov	r1, r8
 800bc96:	008a      	lsls	r2, r1, #2
 800bc98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bc9c:	f7f4 ff3c 	bl	8000b18 <__aeabi_uldivmod>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4b0d      	ldr	r3, [pc, #52]	; (800bcdc <UART_SetConfig+0x4e4>)
 800bca6:	fba3 1302 	umull	r1, r3, r3, r2
 800bcaa:	095b      	lsrs	r3, r3, #5
 800bcac:	2164      	movs	r1, #100	; 0x64
 800bcae:	fb01 f303 	mul.w	r3, r1, r3
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	011b      	lsls	r3, r3, #4
 800bcb6:	3332      	adds	r3, #50	; 0x32
 800bcb8:	4a08      	ldr	r2, [pc, #32]	; (800bcdc <UART_SetConfig+0x4e4>)
 800bcba:	fba2 2303 	umull	r2, r3, r2, r3
 800bcbe:	095b      	lsrs	r3, r3, #5
 800bcc0:	f003 020f 	and.w	r2, r3, #15
 800bcc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4422      	add	r2, r4
 800bccc:	609a      	str	r2, [r3, #8]
}
 800bcce:	bf00      	nop
 800bcd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcda:	bf00      	nop
 800bcdc:	51eb851f 	.word	0x51eb851f

0800bce0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d123      	bne.n	800bd3a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800bcfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	6851      	ldr	r1, [r2, #4]
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	6892      	ldr	r2, [r2, #8]
 800bd06:	4311      	orrs	r1, r2
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	68d2      	ldr	r2, [r2, #12]
 800bd0c:	4311      	orrs	r1, r2
 800bd0e:	683a      	ldr	r2, [r7, #0]
 800bd10:	6912      	ldr	r2, [r2, #16]
 800bd12:	4311      	orrs	r1, r2
 800bd14:	683a      	ldr	r2, [r7, #0]
 800bd16:	6952      	ldr	r2, [r2, #20]
 800bd18:	4311      	orrs	r1, r2
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	6992      	ldr	r2, [r2, #24]
 800bd1e:	4311      	orrs	r1, r2
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	69d2      	ldr	r2, [r2, #28]
 800bd24:	4311      	orrs	r1, r2
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	6a12      	ldr	r2, [r2, #32]
 800bd2a:	4311      	orrs	r1, r2
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bd30:	430a      	orrs	r2, r1
 800bd32:	431a      	orrs	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	601a      	str	r2, [r3, #0]
 800bd38:	e028      	b.n	800bd8c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	69d9      	ldr	r1, [r3, #28]
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	4319      	orrs	r1, r3
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd50:	430b      	orrs	r3, r1
 800bd52:	431a      	orrs	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800bd60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	6851      	ldr	r1, [r2, #4]
 800bd68:	683a      	ldr	r2, [r7, #0]
 800bd6a:	6892      	ldr	r2, [r2, #8]
 800bd6c:	4311      	orrs	r1, r2
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	68d2      	ldr	r2, [r2, #12]
 800bd72:	4311      	orrs	r1, r2
 800bd74:	683a      	ldr	r2, [r7, #0]
 800bd76:	6912      	ldr	r2, [r2, #16]
 800bd78:	4311      	orrs	r1, r2
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	6952      	ldr	r2, [r2, #20]
 800bd7e:	4311      	orrs	r1, r2
 800bd80:	683a      	ldr	r2, [r7, #0]
 800bd82:	6992      	ldr	r2, [r2, #24]
 800bd84:	430a      	orrs	r2, r1
 800bd86:	431a      	orrs	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	370c      	adds	r7, #12
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b085      	sub	sp, #20
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	60f8      	str	r0, [r7, #12]
 800bda2:	60b9      	str	r1, [r7, #8]
 800bda4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d128      	bne.n	800bdfe <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	1e59      	subs	r1, r3, #1
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	011b      	lsls	r3, r3, #4
 800bdc2:	4319      	orrs	r1, r3
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	021b      	lsls	r3, r3, #8
 800bdcc:	4319      	orrs	r1, r3
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	031b      	lsls	r3, r3, #12
 800bdd6:	4319      	orrs	r1, r3
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	041b      	lsls	r3, r3, #16
 800bde0:	4319      	orrs	r1, r3
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	051b      	lsls	r3, r3, #20
 800bdea:	4319      	orrs	r1, r3
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	061b      	lsls	r3, r3, #24
 800bdf4:	430b      	orrs	r3, r1
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	609a      	str	r2, [r3, #8]
 800bdfc:	e02f      	b.n	800be5e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	68d2      	ldr	r2, [r2, #12]
 800be0e:	3a01      	subs	r2, #1
 800be10:	0311      	lsls	r1, r2, #12
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	6952      	ldr	r2, [r2, #20]
 800be16:	3a01      	subs	r2, #1
 800be18:	0512      	lsls	r2, r2, #20
 800be1a:	430a      	orrs	r2, r1
 800be1c:	431a      	orrs	r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	1e59      	subs	r1, r3, #1
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	3b01      	subs	r3, #1
 800be36:	011b      	lsls	r3, r3, #4
 800be38:	4319      	orrs	r1, r3
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	3b01      	subs	r3, #1
 800be40:	021b      	lsls	r3, r3, #8
 800be42:	4319      	orrs	r1, r3
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	3b01      	subs	r3, #1
 800be4a:	041b      	lsls	r3, r3, #16
 800be4c:	4319      	orrs	r1, r3
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	699b      	ldr	r3, [r3, #24]
 800be52:	3b01      	subs	r3, #1
 800be54:	061b      	lsls	r3, r3, #24
 800be56:	430b      	orrs	r3, r1
 800be58:	431a      	orrs	r2, r3
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800be78:	2300      	movs	r3, #0
 800be7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	0d9b      	lsrs	r3, r3, #22
 800be82:	059b      	lsls	r3, r3, #22
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	6811      	ldr	r1, [r2, #0]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	6852      	ldr	r2, [r2, #4]
 800be8c:	4311      	orrs	r1, r2
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	6892      	ldr	r2, [r2, #8]
 800be92:	3a01      	subs	r2, #1
 800be94:	0152      	lsls	r2, r2, #5
 800be96:	4311      	orrs	r1, r2
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	68d2      	ldr	r2, [r2, #12]
 800be9c:	0252      	lsls	r2, r2, #9
 800be9e:	430a      	orrs	r2, r1
 800bea0:	431a      	orrs	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800bea6:	f7fb fe51 	bl	8007b4c <HAL_GetTick>
 800beaa:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800beac:	e010      	b.n	800bed0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb4:	d00c      	beq.n	800bed0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d007      	beq.n	800becc <FMC_SDRAM_SendCommand+0x60>
 800bebc:	f7fb fe46 	bl	8007b4c <HAL_GetTick>
 800bec0:	4602      	mov	r2, r0
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d201      	bcs.n	800bed0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800becc:	2303      	movs	r3, #3
 800bece:	e006      	b.n	800bede <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	f003 0320 	and.w	r3, r3, #32
 800bed8:	2b20      	cmp	r3, #32
 800beda:	d0e8      	beq.n	800beae <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3718      	adds	r7, #24
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
	...

0800bee8 <__errno>:
 800bee8:	4b01      	ldr	r3, [pc, #4]	; (800bef0 <__errno+0x8>)
 800beea:	6818      	ldr	r0, [r3, #0]
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	20000028 	.word	0x20000028

0800bef4 <__libc_init_array>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	4d0d      	ldr	r5, [pc, #52]	; (800bf2c <__libc_init_array+0x38>)
 800bef8:	4c0d      	ldr	r4, [pc, #52]	; (800bf30 <__libc_init_array+0x3c>)
 800befa:	1b64      	subs	r4, r4, r5
 800befc:	10a4      	asrs	r4, r4, #2
 800befe:	2600      	movs	r6, #0
 800bf00:	42a6      	cmp	r6, r4
 800bf02:	d109      	bne.n	800bf18 <__libc_init_array+0x24>
 800bf04:	4d0b      	ldr	r5, [pc, #44]	; (800bf34 <__libc_init_array+0x40>)
 800bf06:	4c0c      	ldr	r4, [pc, #48]	; (800bf38 <__libc_init_array+0x44>)
 800bf08:	f000 ffa4 	bl	800ce54 <_init>
 800bf0c:	1b64      	subs	r4, r4, r5
 800bf0e:	10a4      	asrs	r4, r4, #2
 800bf10:	2600      	movs	r6, #0
 800bf12:	42a6      	cmp	r6, r4
 800bf14:	d105      	bne.n	800bf22 <__libc_init_array+0x2e>
 800bf16:	bd70      	pop	{r4, r5, r6, pc}
 800bf18:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf1c:	4798      	blx	r3
 800bf1e:	3601      	adds	r6, #1
 800bf20:	e7ee      	b.n	800bf00 <__libc_init_array+0xc>
 800bf22:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf26:	4798      	blx	r3
 800bf28:	3601      	adds	r6, #1
 800bf2a:	e7f2      	b.n	800bf12 <__libc_init_array+0x1e>
 800bf2c:	08012560 	.word	0x08012560
 800bf30:	08012560 	.word	0x08012560
 800bf34:	08012560 	.word	0x08012560
 800bf38:	08012564 	.word	0x08012564

0800bf3c <__itoa>:
 800bf3c:	1e93      	subs	r3, r2, #2
 800bf3e:	2b22      	cmp	r3, #34	; 0x22
 800bf40:	b510      	push	{r4, lr}
 800bf42:	460c      	mov	r4, r1
 800bf44:	d904      	bls.n	800bf50 <__itoa+0x14>
 800bf46:	2300      	movs	r3, #0
 800bf48:	700b      	strb	r3, [r1, #0]
 800bf4a:	461c      	mov	r4, r3
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	bd10      	pop	{r4, pc}
 800bf50:	2a0a      	cmp	r2, #10
 800bf52:	d109      	bne.n	800bf68 <__itoa+0x2c>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	da07      	bge.n	800bf68 <__itoa+0x2c>
 800bf58:	232d      	movs	r3, #45	; 0x2d
 800bf5a:	700b      	strb	r3, [r1, #0]
 800bf5c:	4240      	negs	r0, r0
 800bf5e:	2101      	movs	r1, #1
 800bf60:	4421      	add	r1, r4
 800bf62:	f000 f81b 	bl	800bf9c <__utoa>
 800bf66:	e7f1      	b.n	800bf4c <__itoa+0x10>
 800bf68:	2100      	movs	r1, #0
 800bf6a:	e7f9      	b.n	800bf60 <__itoa+0x24>

0800bf6c <itoa>:
 800bf6c:	f7ff bfe6 	b.w	800bf3c <__itoa>

0800bf70 <memcpy>:
 800bf70:	440a      	add	r2, r1
 800bf72:	4291      	cmp	r1, r2
 800bf74:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf78:	d100      	bne.n	800bf7c <memcpy+0xc>
 800bf7a:	4770      	bx	lr
 800bf7c:	b510      	push	{r4, lr}
 800bf7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf86:	4291      	cmp	r1, r2
 800bf88:	d1f9      	bne.n	800bf7e <memcpy+0xe>
 800bf8a:	bd10      	pop	{r4, pc}

0800bf8c <memset>:
 800bf8c:	4402      	add	r2, r0
 800bf8e:	4603      	mov	r3, r0
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d100      	bne.n	800bf96 <memset+0xa>
 800bf94:	4770      	bx	lr
 800bf96:	f803 1b01 	strb.w	r1, [r3], #1
 800bf9a:	e7f9      	b.n	800bf90 <memset+0x4>

0800bf9c <__utoa>:
 800bf9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf9e:	4c1f      	ldr	r4, [pc, #124]	; (800c01c <__utoa+0x80>)
 800bfa0:	b08b      	sub	sp, #44	; 0x2c
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	466e      	mov	r6, sp
 800bfa8:	f104 0c20 	add.w	ip, r4, #32
 800bfac:	6820      	ldr	r0, [r4, #0]
 800bfae:	6861      	ldr	r1, [r4, #4]
 800bfb0:	4637      	mov	r7, r6
 800bfb2:	c703      	stmia	r7!, {r0, r1}
 800bfb4:	3408      	adds	r4, #8
 800bfb6:	4564      	cmp	r4, ip
 800bfb8:	463e      	mov	r6, r7
 800bfba:	d1f7      	bne.n	800bfac <__utoa+0x10>
 800bfbc:	7921      	ldrb	r1, [r4, #4]
 800bfbe:	7139      	strb	r1, [r7, #4]
 800bfc0:	1e91      	subs	r1, r2, #2
 800bfc2:	6820      	ldr	r0, [r4, #0]
 800bfc4:	6038      	str	r0, [r7, #0]
 800bfc6:	2922      	cmp	r1, #34	; 0x22
 800bfc8:	f04f 0100 	mov.w	r1, #0
 800bfcc:	d904      	bls.n	800bfd8 <__utoa+0x3c>
 800bfce:	7019      	strb	r1, [r3, #0]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	b00b      	add	sp, #44	; 0x2c
 800bfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd8:	1e58      	subs	r0, r3, #1
 800bfda:	4684      	mov	ip, r0
 800bfdc:	fbb5 f7f2 	udiv	r7, r5, r2
 800bfe0:	fb02 5617 	mls	r6, r2, r7, r5
 800bfe4:	3628      	adds	r6, #40	; 0x28
 800bfe6:	446e      	add	r6, sp
 800bfe8:	460c      	mov	r4, r1
 800bfea:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bfee:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bff2:	462e      	mov	r6, r5
 800bff4:	42b2      	cmp	r2, r6
 800bff6:	f101 0101 	add.w	r1, r1, #1
 800bffa:	463d      	mov	r5, r7
 800bffc:	d9ee      	bls.n	800bfdc <__utoa+0x40>
 800bffe:	2200      	movs	r2, #0
 800c000:	545a      	strb	r2, [r3, r1]
 800c002:	1919      	adds	r1, r3, r4
 800c004:	1aa5      	subs	r5, r4, r2
 800c006:	42aa      	cmp	r2, r5
 800c008:	dae3      	bge.n	800bfd2 <__utoa+0x36>
 800c00a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c00e:	780e      	ldrb	r6, [r1, #0]
 800c010:	7006      	strb	r6, [r0, #0]
 800c012:	3201      	adds	r2, #1
 800c014:	f801 5901 	strb.w	r5, [r1], #-1
 800c018:	e7f4      	b.n	800c004 <__utoa+0x68>
 800c01a:	bf00      	nop
 800c01c:	08012502 	.word	0x08012502

0800c020 <pow>:
 800c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c022:	ed2d 8b02 	vpush	{d8}
 800c026:	eeb0 8a40 	vmov.f32	s16, s0
 800c02a:	eef0 8a60 	vmov.f32	s17, s1
 800c02e:	ec55 4b11 	vmov	r4, r5, d1
 800c032:	f000 f865 	bl	800c100 <__ieee754_pow>
 800c036:	4622      	mov	r2, r4
 800c038:	462b      	mov	r3, r5
 800c03a:	4620      	mov	r0, r4
 800c03c:	4629      	mov	r1, r5
 800c03e:	ec57 6b10 	vmov	r6, r7, d0
 800c042:	f7f4 fd2b 	bl	8000a9c <__aeabi_dcmpun>
 800c046:	2800      	cmp	r0, #0
 800c048:	d13b      	bne.n	800c0c2 <pow+0xa2>
 800c04a:	ec51 0b18 	vmov	r0, r1, d8
 800c04e:	2200      	movs	r2, #0
 800c050:	2300      	movs	r3, #0
 800c052:	f7f4 fcf1 	bl	8000a38 <__aeabi_dcmpeq>
 800c056:	b1b8      	cbz	r0, 800c088 <pow+0x68>
 800c058:	2200      	movs	r2, #0
 800c05a:	2300      	movs	r3, #0
 800c05c:	4620      	mov	r0, r4
 800c05e:	4629      	mov	r1, r5
 800c060:	f7f4 fcea 	bl	8000a38 <__aeabi_dcmpeq>
 800c064:	2800      	cmp	r0, #0
 800c066:	d146      	bne.n	800c0f6 <pow+0xd6>
 800c068:	ec45 4b10 	vmov	d0, r4, r5
 800c06c:	f000 fe61 	bl	800cd32 <finite>
 800c070:	b338      	cbz	r0, 800c0c2 <pow+0xa2>
 800c072:	2200      	movs	r2, #0
 800c074:	2300      	movs	r3, #0
 800c076:	4620      	mov	r0, r4
 800c078:	4629      	mov	r1, r5
 800c07a:	f7f4 fce7 	bl	8000a4c <__aeabi_dcmplt>
 800c07e:	b300      	cbz	r0, 800c0c2 <pow+0xa2>
 800c080:	f7ff ff32 	bl	800bee8 <__errno>
 800c084:	2322      	movs	r3, #34	; 0x22
 800c086:	e01b      	b.n	800c0c0 <pow+0xa0>
 800c088:	ec47 6b10 	vmov	d0, r6, r7
 800c08c:	f000 fe51 	bl	800cd32 <finite>
 800c090:	b9e0      	cbnz	r0, 800c0cc <pow+0xac>
 800c092:	eeb0 0a48 	vmov.f32	s0, s16
 800c096:	eef0 0a68 	vmov.f32	s1, s17
 800c09a:	f000 fe4a 	bl	800cd32 <finite>
 800c09e:	b1a8      	cbz	r0, 800c0cc <pow+0xac>
 800c0a0:	ec45 4b10 	vmov	d0, r4, r5
 800c0a4:	f000 fe45 	bl	800cd32 <finite>
 800c0a8:	b180      	cbz	r0, 800c0cc <pow+0xac>
 800c0aa:	4632      	mov	r2, r6
 800c0ac:	463b      	mov	r3, r7
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	4639      	mov	r1, r7
 800c0b2:	f7f4 fcf3 	bl	8000a9c <__aeabi_dcmpun>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d0e2      	beq.n	800c080 <pow+0x60>
 800c0ba:	f7ff ff15 	bl	800bee8 <__errno>
 800c0be:	2321      	movs	r3, #33	; 0x21
 800c0c0:	6003      	str	r3, [r0, #0]
 800c0c2:	ecbd 8b02 	vpop	{d8}
 800c0c6:	ec47 6b10 	vmov	d0, r6, r7
 800c0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	f7f4 fcb0 	bl	8000a38 <__aeabi_dcmpeq>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d0f2      	beq.n	800c0c2 <pow+0xa2>
 800c0dc:	eeb0 0a48 	vmov.f32	s0, s16
 800c0e0:	eef0 0a68 	vmov.f32	s1, s17
 800c0e4:	f000 fe25 	bl	800cd32 <finite>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d0ea      	beq.n	800c0c2 <pow+0xa2>
 800c0ec:	ec45 4b10 	vmov	d0, r4, r5
 800c0f0:	f000 fe1f 	bl	800cd32 <finite>
 800c0f4:	e7c3      	b.n	800c07e <pow+0x5e>
 800c0f6:	4f01      	ldr	r7, [pc, #4]	; (800c0fc <pow+0xdc>)
 800c0f8:	2600      	movs	r6, #0
 800c0fa:	e7e2      	b.n	800c0c2 <pow+0xa2>
 800c0fc:	3ff00000 	.word	0x3ff00000

0800c100 <__ieee754_pow>:
 800c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c104:	ed2d 8b06 	vpush	{d8-d10}
 800c108:	b089      	sub	sp, #36	; 0x24
 800c10a:	ed8d 1b00 	vstr	d1, [sp]
 800c10e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c112:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c116:	ea58 0102 	orrs.w	r1, r8, r2
 800c11a:	ec57 6b10 	vmov	r6, r7, d0
 800c11e:	d115      	bne.n	800c14c <__ieee754_pow+0x4c>
 800c120:	19b3      	adds	r3, r6, r6
 800c122:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c126:	4152      	adcs	r2, r2
 800c128:	4299      	cmp	r1, r3
 800c12a:	4b89      	ldr	r3, [pc, #548]	; (800c350 <__ieee754_pow+0x250>)
 800c12c:	4193      	sbcs	r3, r2
 800c12e:	f080 84d2 	bcs.w	800cad6 <__ieee754_pow+0x9d6>
 800c132:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c136:	4630      	mov	r0, r6
 800c138:	4639      	mov	r1, r7
 800c13a:	f7f4 f85f 	bl	80001fc <__adddf3>
 800c13e:	ec41 0b10 	vmov	d0, r0, r1
 800c142:	b009      	add	sp, #36	; 0x24
 800c144:	ecbd 8b06 	vpop	{d8-d10}
 800c148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c14c:	4b81      	ldr	r3, [pc, #516]	; (800c354 <__ieee754_pow+0x254>)
 800c14e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c152:	429c      	cmp	r4, r3
 800c154:	ee10 aa10 	vmov	sl, s0
 800c158:	463d      	mov	r5, r7
 800c15a:	dc06      	bgt.n	800c16a <__ieee754_pow+0x6a>
 800c15c:	d101      	bne.n	800c162 <__ieee754_pow+0x62>
 800c15e:	2e00      	cmp	r6, #0
 800c160:	d1e7      	bne.n	800c132 <__ieee754_pow+0x32>
 800c162:	4598      	cmp	r8, r3
 800c164:	dc01      	bgt.n	800c16a <__ieee754_pow+0x6a>
 800c166:	d10f      	bne.n	800c188 <__ieee754_pow+0x88>
 800c168:	b172      	cbz	r2, 800c188 <__ieee754_pow+0x88>
 800c16a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c16e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c172:	ea55 050a 	orrs.w	r5, r5, sl
 800c176:	d1dc      	bne.n	800c132 <__ieee754_pow+0x32>
 800c178:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c17c:	18db      	adds	r3, r3, r3
 800c17e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c182:	4152      	adcs	r2, r2
 800c184:	429d      	cmp	r5, r3
 800c186:	e7d0      	b.n	800c12a <__ieee754_pow+0x2a>
 800c188:	2d00      	cmp	r5, #0
 800c18a:	da3b      	bge.n	800c204 <__ieee754_pow+0x104>
 800c18c:	4b72      	ldr	r3, [pc, #456]	; (800c358 <__ieee754_pow+0x258>)
 800c18e:	4598      	cmp	r8, r3
 800c190:	dc51      	bgt.n	800c236 <__ieee754_pow+0x136>
 800c192:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c196:	4598      	cmp	r8, r3
 800c198:	f340 84ac 	ble.w	800caf4 <__ieee754_pow+0x9f4>
 800c19c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c1a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c1a4:	2b14      	cmp	r3, #20
 800c1a6:	dd0f      	ble.n	800c1c8 <__ieee754_pow+0xc8>
 800c1a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c1ac:	fa22 f103 	lsr.w	r1, r2, r3
 800c1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	f040 849d 	bne.w	800caf4 <__ieee754_pow+0x9f4>
 800c1ba:	f001 0101 	and.w	r1, r1, #1
 800c1be:	f1c1 0302 	rsb	r3, r1, #2
 800c1c2:	9304      	str	r3, [sp, #16]
 800c1c4:	b182      	cbz	r2, 800c1e8 <__ieee754_pow+0xe8>
 800c1c6:	e05f      	b.n	800c288 <__ieee754_pow+0x188>
 800c1c8:	2a00      	cmp	r2, #0
 800c1ca:	d15b      	bne.n	800c284 <__ieee754_pow+0x184>
 800c1cc:	f1c3 0314 	rsb	r3, r3, #20
 800c1d0:	fa48 f103 	asr.w	r1, r8, r3
 800c1d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d8:	4543      	cmp	r3, r8
 800c1da:	f040 8488 	bne.w	800caee <__ieee754_pow+0x9ee>
 800c1de:	f001 0101 	and.w	r1, r1, #1
 800c1e2:	f1c1 0302 	rsb	r3, r1, #2
 800c1e6:	9304      	str	r3, [sp, #16]
 800c1e8:	4b5c      	ldr	r3, [pc, #368]	; (800c35c <__ieee754_pow+0x25c>)
 800c1ea:	4598      	cmp	r8, r3
 800c1ec:	d132      	bne.n	800c254 <__ieee754_pow+0x154>
 800c1ee:	f1b9 0f00 	cmp.w	r9, #0
 800c1f2:	f280 8478 	bge.w	800cae6 <__ieee754_pow+0x9e6>
 800c1f6:	4959      	ldr	r1, [pc, #356]	; (800c35c <__ieee754_pow+0x25c>)
 800c1f8:	4632      	mov	r2, r6
 800c1fa:	463b      	mov	r3, r7
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	f7f4 fadd 	bl	80007bc <__aeabi_ddiv>
 800c202:	e79c      	b.n	800c13e <__ieee754_pow+0x3e>
 800c204:	2300      	movs	r3, #0
 800c206:	9304      	str	r3, [sp, #16]
 800c208:	2a00      	cmp	r2, #0
 800c20a:	d13d      	bne.n	800c288 <__ieee754_pow+0x188>
 800c20c:	4b51      	ldr	r3, [pc, #324]	; (800c354 <__ieee754_pow+0x254>)
 800c20e:	4598      	cmp	r8, r3
 800c210:	d1ea      	bne.n	800c1e8 <__ieee754_pow+0xe8>
 800c212:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c216:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c21a:	ea53 030a 	orrs.w	r3, r3, sl
 800c21e:	f000 845a 	beq.w	800cad6 <__ieee754_pow+0x9d6>
 800c222:	4b4f      	ldr	r3, [pc, #316]	; (800c360 <__ieee754_pow+0x260>)
 800c224:	429c      	cmp	r4, r3
 800c226:	dd08      	ble.n	800c23a <__ieee754_pow+0x13a>
 800c228:	f1b9 0f00 	cmp.w	r9, #0
 800c22c:	f2c0 8457 	blt.w	800cade <__ieee754_pow+0x9de>
 800c230:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c234:	e783      	b.n	800c13e <__ieee754_pow+0x3e>
 800c236:	2302      	movs	r3, #2
 800c238:	e7e5      	b.n	800c206 <__ieee754_pow+0x106>
 800c23a:	f1b9 0f00 	cmp.w	r9, #0
 800c23e:	f04f 0000 	mov.w	r0, #0
 800c242:	f04f 0100 	mov.w	r1, #0
 800c246:	f6bf af7a 	bge.w	800c13e <__ieee754_pow+0x3e>
 800c24a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c24e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c252:	e774      	b.n	800c13e <__ieee754_pow+0x3e>
 800c254:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c258:	d106      	bne.n	800c268 <__ieee754_pow+0x168>
 800c25a:	4632      	mov	r2, r6
 800c25c:	463b      	mov	r3, r7
 800c25e:	4630      	mov	r0, r6
 800c260:	4639      	mov	r1, r7
 800c262:	f7f4 f981 	bl	8000568 <__aeabi_dmul>
 800c266:	e76a      	b.n	800c13e <__ieee754_pow+0x3e>
 800c268:	4b3e      	ldr	r3, [pc, #248]	; (800c364 <__ieee754_pow+0x264>)
 800c26a:	4599      	cmp	r9, r3
 800c26c:	d10c      	bne.n	800c288 <__ieee754_pow+0x188>
 800c26e:	2d00      	cmp	r5, #0
 800c270:	db0a      	blt.n	800c288 <__ieee754_pow+0x188>
 800c272:	ec47 6b10 	vmov	d0, r6, r7
 800c276:	b009      	add	sp, #36	; 0x24
 800c278:	ecbd 8b06 	vpop	{d8-d10}
 800c27c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c280:	f000 bc6c 	b.w	800cb5c <__ieee754_sqrt>
 800c284:	2300      	movs	r3, #0
 800c286:	9304      	str	r3, [sp, #16]
 800c288:	ec47 6b10 	vmov	d0, r6, r7
 800c28c:	f000 fd48 	bl	800cd20 <fabs>
 800c290:	ec51 0b10 	vmov	r0, r1, d0
 800c294:	f1ba 0f00 	cmp.w	sl, #0
 800c298:	d129      	bne.n	800c2ee <__ieee754_pow+0x1ee>
 800c29a:	b124      	cbz	r4, 800c2a6 <__ieee754_pow+0x1a6>
 800c29c:	4b2f      	ldr	r3, [pc, #188]	; (800c35c <__ieee754_pow+0x25c>)
 800c29e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d123      	bne.n	800c2ee <__ieee754_pow+0x1ee>
 800c2a6:	f1b9 0f00 	cmp.w	r9, #0
 800c2aa:	da05      	bge.n	800c2b8 <__ieee754_pow+0x1b8>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	492a      	ldr	r1, [pc, #168]	; (800c35c <__ieee754_pow+0x25c>)
 800c2b4:	f7f4 fa82 	bl	80007bc <__aeabi_ddiv>
 800c2b8:	2d00      	cmp	r5, #0
 800c2ba:	f6bf af40 	bge.w	800c13e <__ieee754_pow+0x3e>
 800c2be:	9b04      	ldr	r3, [sp, #16]
 800c2c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c2c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c2c8:	4323      	orrs	r3, r4
 800c2ca:	d108      	bne.n	800c2de <__ieee754_pow+0x1de>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	f7f3 ff90 	bl	80001f8 <__aeabi_dsub>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	e78f      	b.n	800c1fe <__ieee754_pow+0xfe>
 800c2de:	9b04      	ldr	r3, [sp, #16]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	f47f af2c 	bne.w	800c13e <__ieee754_pow+0x3e>
 800c2e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	e727      	b.n	800c13e <__ieee754_pow+0x3e>
 800c2ee:	0feb      	lsrs	r3, r5, #31
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	9306      	str	r3, [sp, #24]
 800c2f4:	9a06      	ldr	r2, [sp, #24]
 800c2f6:	9b04      	ldr	r3, [sp, #16]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	d102      	bne.n	800c302 <__ieee754_pow+0x202>
 800c2fc:	4632      	mov	r2, r6
 800c2fe:	463b      	mov	r3, r7
 800c300:	e7e6      	b.n	800c2d0 <__ieee754_pow+0x1d0>
 800c302:	4b19      	ldr	r3, [pc, #100]	; (800c368 <__ieee754_pow+0x268>)
 800c304:	4598      	cmp	r8, r3
 800c306:	f340 80fb 	ble.w	800c500 <__ieee754_pow+0x400>
 800c30a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c30e:	4598      	cmp	r8, r3
 800c310:	4b13      	ldr	r3, [pc, #76]	; (800c360 <__ieee754_pow+0x260>)
 800c312:	dd0c      	ble.n	800c32e <__ieee754_pow+0x22e>
 800c314:	429c      	cmp	r4, r3
 800c316:	dc0f      	bgt.n	800c338 <__ieee754_pow+0x238>
 800c318:	f1b9 0f00 	cmp.w	r9, #0
 800c31c:	da0f      	bge.n	800c33e <__ieee754_pow+0x23e>
 800c31e:	2000      	movs	r0, #0
 800c320:	b009      	add	sp, #36	; 0x24
 800c322:	ecbd 8b06 	vpop	{d8-d10}
 800c326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32a:	f000 bcf0 	b.w	800cd0e <__math_oflow>
 800c32e:	429c      	cmp	r4, r3
 800c330:	dbf2      	blt.n	800c318 <__ieee754_pow+0x218>
 800c332:	4b0a      	ldr	r3, [pc, #40]	; (800c35c <__ieee754_pow+0x25c>)
 800c334:	429c      	cmp	r4, r3
 800c336:	dd19      	ble.n	800c36c <__ieee754_pow+0x26c>
 800c338:	f1b9 0f00 	cmp.w	r9, #0
 800c33c:	dcef      	bgt.n	800c31e <__ieee754_pow+0x21e>
 800c33e:	2000      	movs	r0, #0
 800c340:	b009      	add	sp, #36	; 0x24
 800c342:	ecbd 8b06 	vpop	{d8-d10}
 800c346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34a:	f000 bcd7 	b.w	800ccfc <__math_uflow>
 800c34e:	bf00      	nop
 800c350:	fff00000 	.word	0xfff00000
 800c354:	7ff00000 	.word	0x7ff00000
 800c358:	433fffff 	.word	0x433fffff
 800c35c:	3ff00000 	.word	0x3ff00000
 800c360:	3fefffff 	.word	0x3fefffff
 800c364:	3fe00000 	.word	0x3fe00000
 800c368:	41e00000 	.word	0x41e00000
 800c36c:	4b60      	ldr	r3, [pc, #384]	; (800c4f0 <__ieee754_pow+0x3f0>)
 800c36e:	2200      	movs	r2, #0
 800c370:	f7f3 ff42 	bl	80001f8 <__aeabi_dsub>
 800c374:	a354      	add	r3, pc, #336	; (adr r3, 800c4c8 <__ieee754_pow+0x3c8>)
 800c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37a:	4604      	mov	r4, r0
 800c37c:	460d      	mov	r5, r1
 800c37e:	f7f4 f8f3 	bl	8000568 <__aeabi_dmul>
 800c382:	a353      	add	r3, pc, #332	; (adr r3, 800c4d0 <__ieee754_pow+0x3d0>)
 800c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c388:	4606      	mov	r6, r0
 800c38a:	460f      	mov	r7, r1
 800c38c:	4620      	mov	r0, r4
 800c38e:	4629      	mov	r1, r5
 800c390:	f7f4 f8ea 	bl	8000568 <__aeabi_dmul>
 800c394:	4b57      	ldr	r3, [pc, #348]	; (800c4f4 <__ieee754_pow+0x3f4>)
 800c396:	4682      	mov	sl, r0
 800c398:	468b      	mov	fp, r1
 800c39a:	2200      	movs	r2, #0
 800c39c:	4620      	mov	r0, r4
 800c39e:	4629      	mov	r1, r5
 800c3a0:	f7f4 f8e2 	bl	8000568 <__aeabi_dmul>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	a14b      	add	r1, pc, #300	; (adr r1, 800c4d8 <__ieee754_pow+0x3d8>)
 800c3aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ae:	f7f3 ff23 	bl	80001f8 <__aeabi_dsub>
 800c3b2:	4622      	mov	r2, r4
 800c3b4:	462b      	mov	r3, r5
 800c3b6:	f7f4 f8d7 	bl	8000568 <__aeabi_dmul>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	2000      	movs	r0, #0
 800c3c0:	494d      	ldr	r1, [pc, #308]	; (800c4f8 <__ieee754_pow+0x3f8>)
 800c3c2:	f7f3 ff19 	bl	80001f8 <__aeabi_dsub>
 800c3c6:	4622      	mov	r2, r4
 800c3c8:	4680      	mov	r8, r0
 800c3ca:	4689      	mov	r9, r1
 800c3cc:	462b      	mov	r3, r5
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	f7f4 f8c9 	bl	8000568 <__aeabi_dmul>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	4640      	mov	r0, r8
 800c3dc:	4649      	mov	r1, r9
 800c3de:	f7f4 f8c3 	bl	8000568 <__aeabi_dmul>
 800c3e2:	a33f      	add	r3, pc, #252	; (adr r3, 800c4e0 <__ieee754_pow+0x3e0>)
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	f7f4 f8be 	bl	8000568 <__aeabi_dmul>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	4650      	mov	r0, sl
 800c3f2:	4659      	mov	r1, fp
 800c3f4:	f7f3 ff00 	bl	80001f8 <__aeabi_dsub>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4680      	mov	r8, r0
 800c3fe:	4689      	mov	r9, r1
 800c400:	4630      	mov	r0, r6
 800c402:	4639      	mov	r1, r7
 800c404:	f7f3 fefa 	bl	80001fc <__adddf3>
 800c408:	2000      	movs	r0, #0
 800c40a:	4632      	mov	r2, r6
 800c40c:	463b      	mov	r3, r7
 800c40e:	4604      	mov	r4, r0
 800c410:	460d      	mov	r5, r1
 800c412:	f7f3 fef1 	bl	80001f8 <__aeabi_dsub>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	4640      	mov	r0, r8
 800c41c:	4649      	mov	r1, r9
 800c41e:	f7f3 feeb 	bl	80001f8 <__aeabi_dsub>
 800c422:	9b04      	ldr	r3, [sp, #16]
 800c424:	9a06      	ldr	r2, [sp, #24]
 800c426:	3b01      	subs	r3, #1
 800c428:	4313      	orrs	r3, r2
 800c42a:	4682      	mov	sl, r0
 800c42c:	468b      	mov	fp, r1
 800c42e:	f040 81e7 	bne.w	800c800 <__ieee754_pow+0x700>
 800c432:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c4e8 <__ieee754_pow+0x3e8>
 800c436:	eeb0 8a47 	vmov.f32	s16, s14
 800c43a:	eef0 8a67 	vmov.f32	s17, s15
 800c43e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c442:	2600      	movs	r6, #0
 800c444:	4632      	mov	r2, r6
 800c446:	463b      	mov	r3, r7
 800c448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c44c:	f7f3 fed4 	bl	80001f8 <__aeabi_dsub>
 800c450:	4622      	mov	r2, r4
 800c452:	462b      	mov	r3, r5
 800c454:	f7f4 f888 	bl	8000568 <__aeabi_dmul>
 800c458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c45c:	4680      	mov	r8, r0
 800c45e:	4689      	mov	r9, r1
 800c460:	4650      	mov	r0, sl
 800c462:	4659      	mov	r1, fp
 800c464:	f7f4 f880 	bl	8000568 <__aeabi_dmul>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	4640      	mov	r0, r8
 800c46e:	4649      	mov	r1, r9
 800c470:	f7f3 fec4 	bl	80001fc <__adddf3>
 800c474:	4632      	mov	r2, r6
 800c476:	463b      	mov	r3, r7
 800c478:	4680      	mov	r8, r0
 800c47a:	4689      	mov	r9, r1
 800c47c:	4620      	mov	r0, r4
 800c47e:	4629      	mov	r1, r5
 800c480:	f7f4 f872 	bl	8000568 <__aeabi_dmul>
 800c484:	460b      	mov	r3, r1
 800c486:	4604      	mov	r4, r0
 800c488:	460d      	mov	r5, r1
 800c48a:	4602      	mov	r2, r0
 800c48c:	4649      	mov	r1, r9
 800c48e:	4640      	mov	r0, r8
 800c490:	f7f3 feb4 	bl	80001fc <__adddf3>
 800c494:	4b19      	ldr	r3, [pc, #100]	; (800c4fc <__ieee754_pow+0x3fc>)
 800c496:	4299      	cmp	r1, r3
 800c498:	ec45 4b19 	vmov	d9, r4, r5
 800c49c:	4606      	mov	r6, r0
 800c49e:	460f      	mov	r7, r1
 800c4a0:	468b      	mov	fp, r1
 800c4a2:	f340 82f1 	ble.w	800ca88 <__ieee754_pow+0x988>
 800c4a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c4aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c4ae:	4303      	orrs	r3, r0
 800c4b0:	f000 81e4 	beq.w	800c87c <__ieee754_pow+0x77c>
 800c4b4:	ec51 0b18 	vmov	r0, r1, d8
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	f7f4 fac6 	bl	8000a4c <__aeabi_dcmplt>
 800c4c0:	3800      	subs	r0, #0
 800c4c2:	bf18      	it	ne
 800c4c4:	2001      	movne	r0, #1
 800c4c6:	e72b      	b.n	800c320 <__ieee754_pow+0x220>
 800c4c8:	60000000 	.word	0x60000000
 800c4cc:	3ff71547 	.word	0x3ff71547
 800c4d0:	f85ddf44 	.word	0xf85ddf44
 800c4d4:	3e54ae0b 	.word	0x3e54ae0b
 800c4d8:	55555555 	.word	0x55555555
 800c4dc:	3fd55555 	.word	0x3fd55555
 800c4e0:	652b82fe 	.word	0x652b82fe
 800c4e4:	3ff71547 	.word	0x3ff71547
 800c4e8:	00000000 	.word	0x00000000
 800c4ec:	bff00000 	.word	0xbff00000
 800c4f0:	3ff00000 	.word	0x3ff00000
 800c4f4:	3fd00000 	.word	0x3fd00000
 800c4f8:	3fe00000 	.word	0x3fe00000
 800c4fc:	408fffff 	.word	0x408fffff
 800c500:	4bd5      	ldr	r3, [pc, #852]	; (800c858 <__ieee754_pow+0x758>)
 800c502:	402b      	ands	r3, r5
 800c504:	2200      	movs	r2, #0
 800c506:	b92b      	cbnz	r3, 800c514 <__ieee754_pow+0x414>
 800c508:	4bd4      	ldr	r3, [pc, #848]	; (800c85c <__ieee754_pow+0x75c>)
 800c50a:	f7f4 f82d 	bl	8000568 <__aeabi_dmul>
 800c50e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c512:	460c      	mov	r4, r1
 800c514:	1523      	asrs	r3, r4, #20
 800c516:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c51a:	4413      	add	r3, r2
 800c51c:	9305      	str	r3, [sp, #20]
 800c51e:	4bd0      	ldr	r3, [pc, #832]	; (800c860 <__ieee754_pow+0x760>)
 800c520:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c524:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c528:	429c      	cmp	r4, r3
 800c52a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c52e:	dd08      	ble.n	800c542 <__ieee754_pow+0x442>
 800c530:	4bcc      	ldr	r3, [pc, #816]	; (800c864 <__ieee754_pow+0x764>)
 800c532:	429c      	cmp	r4, r3
 800c534:	f340 8162 	ble.w	800c7fc <__ieee754_pow+0x6fc>
 800c538:	9b05      	ldr	r3, [sp, #20]
 800c53a:	3301      	adds	r3, #1
 800c53c:	9305      	str	r3, [sp, #20]
 800c53e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c542:	2400      	movs	r4, #0
 800c544:	00e3      	lsls	r3, r4, #3
 800c546:	9307      	str	r3, [sp, #28]
 800c548:	4bc7      	ldr	r3, [pc, #796]	; (800c868 <__ieee754_pow+0x768>)
 800c54a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c54e:	ed93 7b00 	vldr	d7, [r3]
 800c552:	4629      	mov	r1, r5
 800c554:	ec53 2b17 	vmov	r2, r3, d7
 800c558:	eeb0 9a47 	vmov.f32	s18, s14
 800c55c:	eef0 9a67 	vmov.f32	s19, s15
 800c560:	4682      	mov	sl, r0
 800c562:	f7f3 fe49 	bl	80001f8 <__aeabi_dsub>
 800c566:	4652      	mov	r2, sl
 800c568:	4606      	mov	r6, r0
 800c56a:	460f      	mov	r7, r1
 800c56c:	462b      	mov	r3, r5
 800c56e:	ec51 0b19 	vmov	r0, r1, d9
 800c572:	f7f3 fe43 	bl	80001fc <__adddf3>
 800c576:	4602      	mov	r2, r0
 800c578:	460b      	mov	r3, r1
 800c57a:	2000      	movs	r0, #0
 800c57c:	49bb      	ldr	r1, [pc, #748]	; (800c86c <__ieee754_pow+0x76c>)
 800c57e:	f7f4 f91d 	bl	80007bc <__aeabi_ddiv>
 800c582:	ec41 0b1a 	vmov	d10, r0, r1
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4630      	mov	r0, r6
 800c58c:	4639      	mov	r1, r7
 800c58e:	f7f3 ffeb 	bl	8000568 <__aeabi_dmul>
 800c592:	2300      	movs	r3, #0
 800c594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c598:	9302      	str	r3, [sp, #8]
 800c59a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c59e:	46ab      	mov	fp, r5
 800c5a0:	106d      	asrs	r5, r5, #1
 800c5a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c5a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c5aa:	ec41 0b18 	vmov	d8, r0, r1
 800c5ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	4640      	mov	r0, r8
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	461d      	mov	r5, r3
 800c5bc:	f7f3 ffd4 	bl	8000568 <__aeabi_dmul>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	4639      	mov	r1, r7
 800c5c8:	f7f3 fe16 	bl	80001f8 <__aeabi_dsub>
 800c5cc:	ec53 2b19 	vmov	r2, r3, d9
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	460f      	mov	r7, r1
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	f7f3 fe0e 	bl	80001f8 <__aeabi_dsub>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4650      	mov	r0, sl
 800c5e2:	4659      	mov	r1, fp
 800c5e4:	f7f3 fe08 	bl	80001f8 <__aeabi_dsub>
 800c5e8:	4642      	mov	r2, r8
 800c5ea:	464b      	mov	r3, r9
 800c5ec:	f7f3 ffbc 	bl	8000568 <__aeabi_dmul>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	f7f3 fdfe 	bl	80001f8 <__aeabi_dsub>
 800c5fc:	ec53 2b1a 	vmov	r2, r3, d10
 800c600:	f7f3 ffb2 	bl	8000568 <__aeabi_dmul>
 800c604:	ec53 2b18 	vmov	r2, r3, d8
 800c608:	ec41 0b19 	vmov	d9, r0, r1
 800c60c:	ec51 0b18 	vmov	r0, r1, d8
 800c610:	f7f3 ffaa 	bl	8000568 <__aeabi_dmul>
 800c614:	a37c      	add	r3, pc, #496	; (adr r3, 800c808 <__ieee754_pow+0x708>)
 800c616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61a:	4604      	mov	r4, r0
 800c61c:	460d      	mov	r5, r1
 800c61e:	f7f3 ffa3 	bl	8000568 <__aeabi_dmul>
 800c622:	a37b      	add	r3, pc, #492	; (adr r3, 800c810 <__ieee754_pow+0x710>)
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	f7f3 fde8 	bl	80001fc <__adddf3>
 800c62c:	4622      	mov	r2, r4
 800c62e:	462b      	mov	r3, r5
 800c630:	f7f3 ff9a 	bl	8000568 <__aeabi_dmul>
 800c634:	a378      	add	r3, pc, #480	; (adr r3, 800c818 <__ieee754_pow+0x718>)
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f7f3 fddf 	bl	80001fc <__adddf3>
 800c63e:	4622      	mov	r2, r4
 800c640:	462b      	mov	r3, r5
 800c642:	f7f3 ff91 	bl	8000568 <__aeabi_dmul>
 800c646:	a376      	add	r3, pc, #472	; (adr r3, 800c820 <__ieee754_pow+0x720>)
 800c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64c:	f7f3 fdd6 	bl	80001fc <__adddf3>
 800c650:	4622      	mov	r2, r4
 800c652:	462b      	mov	r3, r5
 800c654:	f7f3 ff88 	bl	8000568 <__aeabi_dmul>
 800c658:	a373      	add	r3, pc, #460	; (adr r3, 800c828 <__ieee754_pow+0x728>)
 800c65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65e:	f7f3 fdcd 	bl	80001fc <__adddf3>
 800c662:	4622      	mov	r2, r4
 800c664:	462b      	mov	r3, r5
 800c666:	f7f3 ff7f 	bl	8000568 <__aeabi_dmul>
 800c66a:	a371      	add	r3, pc, #452	; (adr r3, 800c830 <__ieee754_pow+0x730>)
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	f7f3 fdc4 	bl	80001fc <__adddf3>
 800c674:	4622      	mov	r2, r4
 800c676:	4606      	mov	r6, r0
 800c678:	460f      	mov	r7, r1
 800c67a:	462b      	mov	r3, r5
 800c67c:	4620      	mov	r0, r4
 800c67e:	4629      	mov	r1, r5
 800c680:	f7f3 ff72 	bl	8000568 <__aeabi_dmul>
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	4630      	mov	r0, r6
 800c68a:	4639      	mov	r1, r7
 800c68c:	f7f3 ff6c 	bl	8000568 <__aeabi_dmul>
 800c690:	4642      	mov	r2, r8
 800c692:	4604      	mov	r4, r0
 800c694:	460d      	mov	r5, r1
 800c696:	464b      	mov	r3, r9
 800c698:	ec51 0b18 	vmov	r0, r1, d8
 800c69c:	f7f3 fdae 	bl	80001fc <__adddf3>
 800c6a0:	ec53 2b19 	vmov	r2, r3, d9
 800c6a4:	f7f3 ff60 	bl	8000568 <__aeabi_dmul>
 800c6a8:	4622      	mov	r2, r4
 800c6aa:	462b      	mov	r3, r5
 800c6ac:	f7f3 fda6 	bl	80001fc <__adddf3>
 800c6b0:	4642      	mov	r2, r8
 800c6b2:	4682      	mov	sl, r0
 800c6b4:	468b      	mov	fp, r1
 800c6b6:	464b      	mov	r3, r9
 800c6b8:	4640      	mov	r0, r8
 800c6ba:	4649      	mov	r1, r9
 800c6bc:	f7f3 ff54 	bl	8000568 <__aeabi_dmul>
 800c6c0:	4b6b      	ldr	r3, [pc, #428]	; (800c870 <__ieee754_pow+0x770>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	460f      	mov	r7, r1
 800c6c8:	f7f3 fd98 	bl	80001fc <__adddf3>
 800c6cc:	4652      	mov	r2, sl
 800c6ce:	465b      	mov	r3, fp
 800c6d0:	f7f3 fd94 	bl	80001fc <__adddf3>
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	460d      	mov	r5, r1
 800c6da:	4602      	mov	r2, r0
 800c6dc:	460b      	mov	r3, r1
 800c6de:	4640      	mov	r0, r8
 800c6e0:	4649      	mov	r1, r9
 800c6e2:	f7f3 ff41 	bl	8000568 <__aeabi_dmul>
 800c6e6:	4b62      	ldr	r3, [pc, #392]	; (800c870 <__ieee754_pow+0x770>)
 800c6e8:	4680      	mov	r8, r0
 800c6ea:	4689      	mov	r9, r1
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	f7f3 fd81 	bl	80001f8 <__aeabi_dsub>
 800c6f6:	4632      	mov	r2, r6
 800c6f8:	463b      	mov	r3, r7
 800c6fa:	f7f3 fd7d 	bl	80001f8 <__aeabi_dsub>
 800c6fe:	4602      	mov	r2, r0
 800c700:	460b      	mov	r3, r1
 800c702:	4650      	mov	r0, sl
 800c704:	4659      	mov	r1, fp
 800c706:	f7f3 fd77 	bl	80001f8 <__aeabi_dsub>
 800c70a:	ec53 2b18 	vmov	r2, r3, d8
 800c70e:	f7f3 ff2b 	bl	8000568 <__aeabi_dmul>
 800c712:	4622      	mov	r2, r4
 800c714:	4606      	mov	r6, r0
 800c716:	460f      	mov	r7, r1
 800c718:	462b      	mov	r3, r5
 800c71a:	ec51 0b19 	vmov	r0, r1, d9
 800c71e:	f7f3 ff23 	bl	8000568 <__aeabi_dmul>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4630      	mov	r0, r6
 800c728:	4639      	mov	r1, r7
 800c72a:	f7f3 fd67 	bl	80001fc <__adddf3>
 800c72e:	4606      	mov	r6, r0
 800c730:	460f      	mov	r7, r1
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	4640      	mov	r0, r8
 800c738:	4649      	mov	r1, r9
 800c73a:	f7f3 fd5f 	bl	80001fc <__adddf3>
 800c73e:	a33e      	add	r3, pc, #248	; (adr r3, 800c838 <__ieee754_pow+0x738>)
 800c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c744:	2000      	movs	r0, #0
 800c746:	4604      	mov	r4, r0
 800c748:	460d      	mov	r5, r1
 800c74a:	f7f3 ff0d 	bl	8000568 <__aeabi_dmul>
 800c74e:	4642      	mov	r2, r8
 800c750:	ec41 0b18 	vmov	d8, r0, r1
 800c754:	464b      	mov	r3, r9
 800c756:	4620      	mov	r0, r4
 800c758:	4629      	mov	r1, r5
 800c75a:	f7f3 fd4d 	bl	80001f8 <__aeabi_dsub>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	4630      	mov	r0, r6
 800c764:	4639      	mov	r1, r7
 800c766:	f7f3 fd47 	bl	80001f8 <__aeabi_dsub>
 800c76a:	a335      	add	r3, pc, #212	; (adr r3, 800c840 <__ieee754_pow+0x740>)
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	f7f3 fefa 	bl	8000568 <__aeabi_dmul>
 800c774:	a334      	add	r3, pc, #208	; (adr r3, 800c848 <__ieee754_pow+0x748>)
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	4606      	mov	r6, r0
 800c77c:	460f      	mov	r7, r1
 800c77e:	4620      	mov	r0, r4
 800c780:	4629      	mov	r1, r5
 800c782:	f7f3 fef1 	bl	8000568 <__aeabi_dmul>
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	4630      	mov	r0, r6
 800c78c:	4639      	mov	r1, r7
 800c78e:	f7f3 fd35 	bl	80001fc <__adddf3>
 800c792:	9a07      	ldr	r2, [sp, #28]
 800c794:	4b37      	ldr	r3, [pc, #220]	; (800c874 <__ieee754_pow+0x774>)
 800c796:	4413      	add	r3, r2
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	f7f3 fd2e 	bl	80001fc <__adddf3>
 800c7a0:	4682      	mov	sl, r0
 800c7a2:	9805      	ldr	r0, [sp, #20]
 800c7a4:	468b      	mov	fp, r1
 800c7a6:	f7f3 fe75 	bl	8000494 <__aeabi_i2d>
 800c7aa:	9a07      	ldr	r2, [sp, #28]
 800c7ac:	4b32      	ldr	r3, [pc, #200]	; (800c878 <__ieee754_pow+0x778>)
 800c7ae:	4413      	add	r3, r2
 800c7b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7b4:	4606      	mov	r6, r0
 800c7b6:	460f      	mov	r7, r1
 800c7b8:	4652      	mov	r2, sl
 800c7ba:	465b      	mov	r3, fp
 800c7bc:	ec51 0b18 	vmov	r0, r1, d8
 800c7c0:	f7f3 fd1c 	bl	80001fc <__adddf3>
 800c7c4:	4642      	mov	r2, r8
 800c7c6:	464b      	mov	r3, r9
 800c7c8:	f7f3 fd18 	bl	80001fc <__adddf3>
 800c7cc:	4632      	mov	r2, r6
 800c7ce:	463b      	mov	r3, r7
 800c7d0:	f7f3 fd14 	bl	80001fc <__adddf3>
 800c7d4:	2000      	movs	r0, #0
 800c7d6:	4632      	mov	r2, r6
 800c7d8:	463b      	mov	r3, r7
 800c7da:	4604      	mov	r4, r0
 800c7dc:	460d      	mov	r5, r1
 800c7de:	f7f3 fd0b 	bl	80001f8 <__aeabi_dsub>
 800c7e2:	4642      	mov	r2, r8
 800c7e4:	464b      	mov	r3, r9
 800c7e6:	f7f3 fd07 	bl	80001f8 <__aeabi_dsub>
 800c7ea:	ec53 2b18 	vmov	r2, r3, d8
 800c7ee:	f7f3 fd03 	bl	80001f8 <__aeabi_dsub>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4650      	mov	r0, sl
 800c7f8:	4659      	mov	r1, fp
 800c7fa:	e610      	b.n	800c41e <__ieee754_pow+0x31e>
 800c7fc:	2401      	movs	r4, #1
 800c7fe:	e6a1      	b.n	800c544 <__ieee754_pow+0x444>
 800c800:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c850 <__ieee754_pow+0x750>
 800c804:	e617      	b.n	800c436 <__ieee754_pow+0x336>
 800c806:	bf00      	nop
 800c808:	4a454eef 	.word	0x4a454eef
 800c80c:	3fca7e28 	.word	0x3fca7e28
 800c810:	93c9db65 	.word	0x93c9db65
 800c814:	3fcd864a 	.word	0x3fcd864a
 800c818:	a91d4101 	.word	0xa91d4101
 800c81c:	3fd17460 	.word	0x3fd17460
 800c820:	518f264d 	.word	0x518f264d
 800c824:	3fd55555 	.word	0x3fd55555
 800c828:	db6fabff 	.word	0xdb6fabff
 800c82c:	3fdb6db6 	.word	0x3fdb6db6
 800c830:	33333303 	.word	0x33333303
 800c834:	3fe33333 	.word	0x3fe33333
 800c838:	e0000000 	.word	0xe0000000
 800c83c:	3feec709 	.word	0x3feec709
 800c840:	dc3a03fd 	.word	0xdc3a03fd
 800c844:	3feec709 	.word	0x3feec709
 800c848:	145b01f5 	.word	0x145b01f5
 800c84c:	be3e2fe0 	.word	0xbe3e2fe0
 800c850:	00000000 	.word	0x00000000
 800c854:	3ff00000 	.word	0x3ff00000
 800c858:	7ff00000 	.word	0x7ff00000
 800c85c:	43400000 	.word	0x43400000
 800c860:	0003988e 	.word	0x0003988e
 800c864:	000bb679 	.word	0x000bb679
 800c868:	08012528 	.word	0x08012528
 800c86c:	3ff00000 	.word	0x3ff00000
 800c870:	40080000 	.word	0x40080000
 800c874:	08012548 	.word	0x08012548
 800c878:	08012538 	.word	0x08012538
 800c87c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cb54 <__ieee754_pow+0xa54>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	4640      	mov	r0, r8
 800c884:	4649      	mov	r1, r9
 800c886:	f7f3 fcb9 	bl	80001fc <__adddf3>
 800c88a:	4622      	mov	r2, r4
 800c88c:	ec41 0b1a 	vmov	d10, r0, r1
 800c890:	462b      	mov	r3, r5
 800c892:	4630      	mov	r0, r6
 800c894:	4639      	mov	r1, r7
 800c896:	f7f3 fcaf 	bl	80001f8 <__aeabi_dsub>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	ec51 0b1a 	vmov	r0, r1, d10
 800c8a2:	f7f4 f8f1 	bl	8000a88 <__aeabi_dcmpgt>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	f47f ae04 	bne.w	800c4b4 <__ieee754_pow+0x3b4>
 800c8ac:	4aa4      	ldr	r2, [pc, #656]	; (800cb40 <__ieee754_pow+0xa40>)
 800c8ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	f340 8108 	ble.w	800cac8 <__ieee754_pow+0x9c8>
 800c8b8:	151b      	asrs	r3, r3, #20
 800c8ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c8be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c8c2:	fa4a f303 	asr.w	r3, sl, r3
 800c8c6:	445b      	add	r3, fp
 800c8c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c8cc:	4e9d      	ldr	r6, [pc, #628]	; (800cb44 <__ieee754_pow+0xa44>)
 800c8ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c8d2:	4116      	asrs	r6, r2
 800c8d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c8d8:	2000      	movs	r0, #0
 800c8da:	ea23 0106 	bic.w	r1, r3, r6
 800c8de:	f1c2 0214 	rsb	r2, r2, #20
 800c8e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c8e6:	fa4a fa02 	asr.w	sl, sl, r2
 800c8ea:	f1bb 0f00 	cmp.w	fp, #0
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	bfb8      	it	lt
 800c8f8:	f1ca 0a00 	rsblt	sl, sl, #0
 800c8fc:	f7f3 fc7c 	bl	80001f8 <__aeabi_dsub>
 800c900:	ec41 0b19 	vmov	d9, r0, r1
 800c904:	4642      	mov	r2, r8
 800c906:	464b      	mov	r3, r9
 800c908:	ec51 0b19 	vmov	r0, r1, d9
 800c90c:	f7f3 fc76 	bl	80001fc <__adddf3>
 800c910:	a37b      	add	r3, pc, #492	; (adr r3, 800cb00 <__ieee754_pow+0xa00>)
 800c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c916:	2000      	movs	r0, #0
 800c918:	4604      	mov	r4, r0
 800c91a:	460d      	mov	r5, r1
 800c91c:	f7f3 fe24 	bl	8000568 <__aeabi_dmul>
 800c920:	ec53 2b19 	vmov	r2, r3, d9
 800c924:	4606      	mov	r6, r0
 800c926:	460f      	mov	r7, r1
 800c928:	4620      	mov	r0, r4
 800c92a:	4629      	mov	r1, r5
 800c92c:	f7f3 fc64 	bl	80001f8 <__aeabi_dsub>
 800c930:	4602      	mov	r2, r0
 800c932:	460b      	mov	r3, r1
 800c934:	4640      	mov	r0, r8
 800c936:	4649      	mov	r1, r9
 800c938:	f7f3 fc5e 	bl	80001f8 <__aeabi_dsub>
 800c93c:	a372      	add	r3, pc, #456	; (adr r3, 800cb08 <__ieee754_pow+0xa08>)
 800c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c942:	f7f3 fe11 	bl	8000568 <__aeabi_dmul>
 800c946:	a372      	add	r3, pc, #456	; (adr r3, 800cb10 <__ieee754_pow+0xa10>)
 800c948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94c:	4680      	mov	r8, r0
 800c94e:	4689      	mov	r9, r1
 800c950:	4620      	mov	r0, r4
 800c952:	4629      	mov	r1, r5
 800c954:	f7f3 fe08 	bl	8000568 <__aeabi_dmul>
 800c958:	4602      	mov	r2, r0
 800c95a:	460b      	mov	r3, r1
 800c95c:	4640      	mov	r0, r8
 800c95e:	4649      	mov	r1, r9
 800c960:	f7f3 fc4c 	bl	80001fc <__adddf3>
 800c964:	4604      	mov	r4, r0
 800c966:	460d      	mov	r5, r1
 800c968:	4602      	mov	r2, r0
 800c96a:	460b      	mov	r3, r1
 800c96c:	4630      	mov	r0, r6
 800c96e:	4639      	mov	r1, r7
 800c970:	f7f3 fc44 	bl	80001fc <__adddf3>
 800c974:	4632      	mov	r2, r6
 800c976:	463b      	mov	r3, r7
 800c978:	4680      	mov	r8, r0
 800c97a:	4689      	mov	r9, r1
 800c97c:	f7f3 fc3c 	bl	80001f8 <__aeabi_dsub>
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	4620      	mov	r0, r4
 800c986:	4629      	mov	r1, r5
 800c988:	f7f3 fc36 	bl	80001f8 <__aeabi_dsub>
 800c98c:	4642      	mov	r2, r8
 800c98e:	4606      	mov	r6, r0
 800c990:	460f      	mov	r7, r1
 800c992:	464b      	mov	r3, r9
 800c994:	4640      	mov	r0, r8
 800c996:	4649      	mov	r1, r9
 800c998:	f7f3 fde6 	bl	8000568 <__aeabi_dmul>
 800c99c:	a35e      	add	r3, pc, #376	; (adr r3, 800cb18 <__ieee754_pow+0xa18>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	460d      	mov	r5, r1
 800c9a6:	f7f3 fddf 	bl	8000568 <__aeabi_dmul>
 800c9aa:	a35d      	add	r3, pc, #372	; (adr r3, 800cb20 <__ieee754_pow+0xa20>)
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	f7f3 fc22 	bl	80001f8 <__aeabi_dsub>
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	f7f3 fdd6 	bl	8000568 <__aeabi_dmul>
 800c9bc:	a35a      	add	r3, pc, #360	; (adr r3, 800cb28 <__ieee754_pow+0xa28>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	f7f3 fc1b 	bl	80001fc <__adddf3>
 800c9c6:	4622      	mov	r2, r4
 800c9c8:	462b      	mov	r3, r5
 800c9ca:	f7f3 fdcd 	bl	8000568 <__aeabi_dmul>
 800c9ce:	a358      	add	r3, pc, #352	; (adr r3, 800cb30 <__ieee754_pow+0xa30>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	f7f3 fc10 	bl	80001f8 <__aeabi_dsub>
 800c9d8:	4622      	mov	r2, r4
 800c9da:	462b      	mov	r3, r5
 800c9dc:	f7f3 fdc4 	bl	8000568 <__aeabi_dmul>
 800c9e0:	a355      	add	r3, pc, #340	; (adr r3, 800cb38 <__ieee754_pow+0xa38>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	f7f3 fc09 	bl	80001fc <__adddf3>
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	462b      	mov	r3, r5
 800c9ee:	f7f3 fdbb 	bl	8000568 <__aeabi_dmul>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	4640      	mov	r0, r8
 800c9f8:	4649      	mov	r1, r9
 800c9fa:	f7f3 fbfd 	bl	80001f8 <__aeabi_dsub>
 800c9fe:	4604      	mov	r4, r0
 800ca00:	460d      	mov	r5, r1
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	4640      	mov	r0, r8
 800ca08:	4649      	mov	r1, r9
 800ca0a:	f7f3 fdad 	bl	8000568 <__aeabi_dmul>
 800ca0e:	2200      	movs	r2, #0
 800ca10:	ec41 0b19 	vmov	d9, r0, r1
 800ca14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca18:	4620      	mov	r0, r4
 800ca1a:	4629      	mov	r1, r5
 800ca1c:	f7f3 fbec 	bl	80001f8 <__aeabi_dsub>
 800ca20:	4602      	mov	r2, r0
 800ca22:	460b      	mov	r3, r1
 800ca24:	ec51 0b19 	vmov	r0, r1, d9
 800ca28:	f7f3 fec8 	bl	80007bc <__aeabi_ddiv>
 800ca2c:	4632      	mov	r2, r6
 800ca2e:	4604      	mov	r4, r0
 800ca30:	460d      	mov	r5, r1
 800ca32:	463b      	mov	r3, r7
 800ca34:	4640      	mov	r0, r8
 800ca36:	4649      	mov	r1, r9
 800ca38:	f7f3 fd96 	bl	8000568 <__aeabi_dmul>
 800ca3c:	4632      	mov	r2, r6
 800ca3e:	463b      	mov	r3, r7
 800ca40:	f7f3 fbdc 	bl	80001fc <__adddf3>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	4620      	mov	r0, r4
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	f7f3 fbd4 	bl	80001f8 <__aeabi_dsub>
 800ca50:	4642      	mov	r2, r8
 800ca52:	464b      	mov	r3, r9
 800ca54:	f7f3 fbd0 	bl	80001f8 <__aeabi_dsub>
 800ca58:	460b      	mov	r3, r1
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	493a      	ldr	r1, [pc, #232]	; (800cb48 <__ieee754_pow+0xa48>)
 800ca5e:	2000      	movs	r0, #0
 800ca60:	f7f3 fbca 	bl	80001f8 <__aeabi_dsub>
 800ca64:	ec41 0b10 	vmov	d0, r0, r1
 800ca68:	ee10 3a90 	vmov	r3, s1
 800ca6c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ca70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca74:	da2b      	bge.n	800cace <__ieee754_pow+0x9ce>
 800ca76:	4650      	mov	r0, sl
 800ca78:	f000 f966 	bl	800cd48 <scalbn>
 800ca7c:	ec51 0b10 	vmov	r0, r1, d0
 800ca80:	ec53 2b18 	vmov	r2, r3, d8
 800ca84:	f7ff bbed 	b.w	800c262 <__ieee754_pow+0x162>
 800ca88:	4b30      	ldr	r3, [pc, #192]	; (800cb4c <__ieee754_pow+0xa4c>)
 800ca8a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ca8e:	429e      	cmp	r6, r3
 800ca90:	f77f af0c 	ble.w	800c8ac <__ieee754_pow+0x7ac>
 800ca94:	4b2e      	ldr	r3, [pc, #184]	; (800cb50 <__ieee754_pow+0xa50>)
 800ca96:	440b      	add	r3, r1
 800ca98:	4303      	orrs	r3, r0
 800ca9a:	d009      	beq.n	800cab0 <__ieee754_pow+0x9b0>
 800ca9c:	ec51 0b18 	vmov	r0, r1, d8
 800caa0:	2200      	movs	r2, #0
 800caa2:	2300      	movs	r3, #0
 800caa4:	f7f3 ffd2 	bl	8000a4c <__aeabi_dcmplt>
 800caa8:	3800      	subs	r0, #0
 800caaa:	bf18      	it	ne
 800caac:	2001      	movne	r0, #1
 800caae:	e447      	b.n	800c340 <__ieee754_pow+0x240>
 800cab0:	4622      	mov	r2, r4
 800cab2:	462b      	mov	r3, r5
 800cab4:	f7f3 fba0 	bl	80001f8 <__aeabi_dsub>
 800cab8:	4642      	mov	r2, r8
 800caba:	464b      	mov	r3, r9
 800cabc:	f7f3 ffda 	bl	8000a74 <__aeabi_dcmpge>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	f43f aef3 	beq.w	800c8ac <__ieee754_pow+0x7ac>
 800cac6:	e7e9      	b.n	800ca9c <__ieee754_pow+0x99c>
 800cac8:	f04f 0a00 	mov.w	sl, #0
 800cacc:	e71a      	b.n	800c904 <__ieee754_pow+0x804>
 800cace:	ec51 0b10 	vmov	r0, r1, d0
 800cad2:	4619      	mov	r1, r3
 800cad4:	e7d4      	b.n	800ca80 <__ieee754_pow+0x980>
 800cad6:	491c      	ldr	r1, [pc, #112]	; (800cb48 <__ieee754_pow+0xa48>)
 800cad8:	2000      	movs	r0, #0
 800cada:	f7ff bb30 	b.w	800c13e <__ieee754_pow+0x3e>
 800cade:	2000      	movs	r0, #0
 800cae0:	2100      	movs	r1, #0
 800cae2:	f7ff bb2c 	b.w	800c13e <__ieee754_pow+0x3e>
 800cae6:	4630      	mov	r0, r6
 800cae8:	4639      	mov	r1, r7
 800caea:	f7ff bb28 	b.w	800c13e <__ieee754_pow+0x3e>
 800caee:	9204      	str	r2, [sp, #16]
 800caf0:	f7ff bb7a 	b.w	800c1e8 <__ieee754_pow+0xe8>
 800caf4:	2300      	movs	r3, #0
 800caf6:	f7ff bb64 	b.w	800c1c2 <__ieee754_pow+0xc2>
 800cafa:	bf00      	nop
 800cafc:	f3af 8000 	nop.w
 800cb00:	00000000 	.word	0x00000000
 800cb04:	3fe62e43 	.word	0x3fe62e43
 800cb08:	fefa39ef 	.word	0xfefa39ef
 800cb0c:	3fe62e42 	.word	0x3fe62e42
 800cb10:	0ca86c39 	.word	0x0ca86c39
 800cb14:	be205c61 	.word	0xbe205c61
 800cb18:	72bea4d0 	.word	0x72bea4d0
 800cb1c:	3e663769 	.word	0x3e663769
 800cb20:	c5d26bf1 	.word	0xc5d26bf1
 800cb24:	3ebbbd41 	.word	0x3ebbbd41
 800cb28:	af25de2c 	.word	0xaf25de2c
 800cb2c:	3f11566a 	.word	0x3f11566a
 800cb30:	16bebd93 	.word	0x16bebd93
 800cb34:	3f66c16c 	.word	0x3f66c16c
 800cb38:	5555553e 	.word	0x5555553e
 800cb3c:	3fc55555 	.word	0x3fc55555
 800cb40:	3fe00000 	.word	0x3fe00000
 800cb44:	000fffff 	.word	0x000fffff
 800cb48:	3ff00000 	.word	0x3ff00000
 800cb4c:	4090cbff 	.word	0x4090cbff
 800cb50:	3f6f3400 	.word	0x3f6f3400
 800cb54:	652b82fe 	.word	0x652b82fe
 800cb58:	3c971547 	.word	0x3c971547

0800cb5c <__ieee754_sqrt>:
 800cb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb60:	ec55 4b10 	vmov	r4, r5, d0
 800cb64:	4e55      	ldr	r6, [pc, #340]	; (800ccbc <__ieee754_sqrt+0x160>)
 800cb66:	43ae      	bics	r6, r5
 800cb68:	ee10 0a10 	vmov	r0, s0
 800cb6c:	ee10 3a10 	vmov	r3, s0
 800cb70:	462a      	mov	r2, r5
 800cb72:	4629      	mov	r1, r5
 800cb74:	d110      	bne.n	800cb98 <__ieee754_sqrt+0x3c>
 800cb76:	ee10 2a10 	vmov	r2, s0
 800cb7a:	462b      	mov	r3, r5
 800cb7c:	f7f3 fcf4 	bl	8000568 <__aeabi_dmul>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	4620      	mov	r0, r4
 800cb86:	4629      	mov	r1, r5
 800cb88:	f7f3 fb38 	bl	80001fc <__adddf3>
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	460d      	mov	r5, r1
 800cb90:	ec45 4b10 	vmov	d0, r4, r5
 800cb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb98:	2d00      	cmp	r5, #0
 800cb9a:	dc10      	bgt.n	800cbbe <__ieee754_sqrt+0x62>
 800cb9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cba0:	4330      	orrs	r0, r6
 800cba2:	d0f5      	beq.n	800cb90 <__ieee754_sqrt+0x34>
 800cba4:	b15d      	cbz	r5, 800cbbe <__ieee754_sqrt+0x62>
 800cba6:	ee10 2a10 	vmov	r2, s0
 800cbaa:	462b      	mov	r3, r5
 800cbac:	ee10 0a10 	vmov	r0, s0
 800cbb0:	f7f3 fb22 	bl	80001f8 <__aeabi_dsub>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	f7f3 fe00 	bl	80007bc <__aeabi_ddiv>
 800cbbc:	e7e6      	b.n	800cb8c <__ieee754_sqrt+0x30>
 800cbbe:	1512      	asrs	r2, r2, #20
 800cbc0:	d074      	beq.n	800ccac <__ieee754_sqrt+0x150>
 800cbc2:	07d4      	lsls	r4, r2, #31
 800cbc4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cbc8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cbcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cbd0:	bf5e      	ittt	pl
 800cbd2:	0fda      	lsrpl	r2, r3, #31
 800cbd4:	005b      	lslpl	r3, r3, #1
 800cbd6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cbda:	2400      	movs	r4, #0
 800cbdc:	0fda      	lsrs	r2, r3, #31
 800cbde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cbe2:	107f      	asrs	r7, r7, #1
 800cbe4:	005b      	lsls	r3, r3, #1
 800cbe6:	2516      	movs	r5, #22
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cbee:	1886      	adds	r6, r0, r2
 800cbf0:	428e      	cmp	r6, r1
 800cbf2:	bfde      	ittt	le
 800cbf4:	1b89      	suble	r1, r1, r6
 800cbf6:	18b0      	addle	r0, r6, r2
 800cbf8:	18a4      	addle	r4, r4, r2
 800cbfa:	0049      	lsls	r1, r1, #1
 800cbfc:	3d01      	subs	r5, #1
 800cbfe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800cc02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cc06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc0a:	d1f0      	bne.n	800cbee <__ieee754_sqrt+0x92>
 800cc0c:	462a      	mov	r2, r5
 800cc0e:	f04f 0e20 	mov.w	lr, #32
 800cc12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cc16:	4281      	cmp	r1, r0
 800cc18:	eb06 0c05 	add.w	ip, r6, r5
 800cc1c:	dc02      	bgt.n	800cc24 <__ieee754_sqrt+0xc8>
 800cc1e:	d113      	bne.n	800cc48 <__ieee754_sqrt+0xec>
 800cc20:	459c      	cmp	ip, r3
 800cc22:	d811      	bhi.n	800cc48 <__ieee754_sqrt+0xec>
 800cc24:	f1bc 0f00 	cmp.w	ip, #0
 800cc28:	eb0c 0506 	add.w	r5, ip, r6
 800cc2c:	da43      	bge.n	800ccb6 <__ieee754_sqrt+0x15a>
 800cc2e:	2d00      	cmp	r5, #0
 800cc30:	db41      	blt.n	800ccb6 <__ieee754_sqrt+0x15a>
 800cc32:	f100 0801 	add.w	r8, r0, #1
 800cc36:	1a09      	subs	r1, r1, r0
 800cc38:	459c      	cmp	ip, r3
 800cc3a:	bf88      	it	hi
 800cc3c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800cc40:	eba3 030c 	sub.w	r3, r3, ip
 800cc44:	4432      	add	r2, r6
 800cc46:	4640      	mov	r0, r8
 800cc48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cc4c:	f1be 0e01 	subs.w	lr, lr, #1
 800cc50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800cc54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cc5c:	d1db      	bne.n	800cc16 <__ieee754_sqrt+0xba>
 800cc5e:	430b      	orrs	r3, r1
 800cc60:	d006      	beq.n	800cc70 <__ieee754_sqrt+0x114>
 800cc62:	1c50      	adds	r0, r2, #1
 800cc64:	bf13      	iteet	ne
 800cc66:	3201      	addne	r2, #1
 800cc68:	3401      	addeq	r4, #1
 800cc6a:	4672      	moveq	r2, lr
 800cc6c:	f022 0201 	bicne.w	r2, r2, #1
 800cc70:	1063      	asrs	r3, r4, #1
 800cc72:	0852      	lsrs	r2, r2, #1
 800cc74:	07e1      	lsls	r1, r4, #31
 800cc76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cc7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cc7e:	bf48      	it	mi
 800cc80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cc84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cc88:	4614      	mov	r4, r2
 800cc8a:	e781      	b.n	800cb90 <__ieee754_sqrt+0x34>
 800cc8c:	0ad9      	lsrs	r1, r3, #11
 800cc8e:	3815      	subs	r0, #21
 800cc90:	055b      	lsls	r3, r3, #21
 800cc92:	2900      	cmp	r1, #0
 800cc94:	d0fa      	beq.n	800cc8c <__ieee754_sqrt+0x130>
 800cc96:	02cd      	lsls	r5, r1, #11
 800cc98:	d50a      	bpl.n	800ccb0 <__ieee754_sqrt+0x154>
 800cc9a:	f1c2 0420 	rsb	r4, r2, #32
 800cc9e:	fa23 f404 	lsr.w	r4, r3, r4
 800cca2:	1e55      	subs	r5, r2, #1
 800cca4:	4093      	lsls	r3, r2
 800cca6:	4321      	orrs	r1, r4
 800cca8:	1b42      	subs	r2, r0, r5
 800ccaa:	e78a      	b.n	800cbc2 <__ieee754_sqrt+0x66>
 800ccac:	4610      	mov	r0, r2
 800ccae:	e7f0      	b.n	800cc92 <__ieee754_sqrt+0x136>
 800ccb0:	0049      	lsls	r1, r1, #1
 800ccb2:	3201      	adds	r2, #1
 800ccb4:	e7ef      	b.n	800cc96 <__ieee754_sqrt+0x13a>
 800ccb6:	4680      	mov	r8, r0
 800ccb8:	e7bd      	b.n	800cc36 <__ieee754_sqrt+0xda>
 800ccba:	bf00      	nop
 800ccbc:	7ff00000 	.word	0x7ff00000

0800ccc0 <with_errno>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	460d      	mov	r5, r1
 800ccc6:	4616      	mov	r6, r2
 800ccc8:	f7ff f90e 	bl	800bee8 <__errno>
 800cccc:	4629      	mov	r1, r5
 800ccce:	6006      	str	r6, [r0, #0]
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	bd70      	pop	{r4, r5, r6, pc}

0800ccd4 <xflow>:
 800ccd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccd6:	4614      	mov	r4, r2
 800ccd8:	461d      	mov	r5, r3
 800ccda:	b108      	cbz	r0, 800cce0 <xflow+0xc>
 800ccdc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cce0:	e9cd 2300 	strd	r2, r3, [sp]
 800cce4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cce8:	4620      	mov	r0, r4
 800ccea:	4629      	mov	r1, r5
 800ccec:	f7f3 fc3c 	bl	8000568 <__aeabi_dmul>
 800ccf0:	2222      	movs	r2, #34	; 0x22
 800ccf2:	b003      	add	sp, #12
 800ccf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccf8:	f7ff bfe2 	b.w	800ccc0 <with_errno>

0800ccfc <__math_uflow>:
 800ccfc:	b508      	push	{r3, lr}
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cd04:	f7ff ffe6 	bl	800ccd4 <xflow>
 800cd08:	ec41 0b10 	vmov	d0, r0, r1
 800cd0c:	bd08      	pop	{r3, pc}

0800cd0e <__math_oflow>:
 800cd0e:	b508      	push	{r3, lr}
 800cd10:	2200      	movs	r2, #0
 800cd12:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cd16:	f7ff ffdd 	bl	800ccd4 <xflow>
 800cd1a:	ec41 0b10 	vmov	d0, r0, r1
 800cd1e:	bd08      	pop	{r3, pc}

0800cd20 <fabs>:
 800cd20:	ec51 0b10 	vmov	r0, r1, d0
 800cd24:	ee10 2a10 	vmov	r2, s0
 800cd28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd2c:	ec43 2b10 	vmov	d0, r2, r3
 800cd30:	4770      	bx	lr

0800cd32 <finite>:
 800cd32:	b082      	sub	sp, #8
 800cd34:	ed8d 0b00 	vstr	d0, [sp]
 800cd38:	9801      	ldr	r0, [sp, #4]
 800cd3a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cd3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cd42:	0fc0      	lsrs	r0, r0, #31
 800cd44:	b002      	add	sp, #8
 800cd46:	4770      	bx	lr

0800cd48 <scalbn>:
 800cd48:	b570      	push	{r4, r5, r6, lr}
 800cd4a:	ec55 4b10 	vmov	r4, r5, d0
 800cd4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cd52:	4606      	mov	r6, r0
 800cd54:	462b      	mov	r3, r5
 800cd56:	b99a      	cbnz	r2, 800cd80 <scalbn+0x38>
 800cd58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cd5c:	4323      	orrs	r3, r4
 800cd5e:	d036      	beq.n	800cdce <scalbn+0x86>
 800cd60:	4b39      	ldr	r3, [pc, #228]	; (800ce48 <scalbn+0x100>)
 800cd62:	4629      	mov	r1, r5
 800cd64:	ee10 0a10 	vmov	r0, s0
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f7f3 fbfd 	bl	8000568 <__aeabi_dmul>
 800cd6e:	4b37      	ldr	r3, [pc, #220]	; (800ce4c <scalbn+0x104>)
 800cd70:	429e      	cmp	r6, r3
 800cd72:	4604      	mov	r4, r0
 800cd74:	460d      	mov	r5, r1
 800cd76:	da10      	bge.n	800cd9a <scalbn+0x52>
 800cd78:	a32b      	add	r3, pc, #172	; (adr r3, 800ce28 <scalbn+0xe0>)
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	e03a      	b.n	800cdf6 <scalbn+0xae>
 800cd80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cd84:	428a      	cmp	r2, r1
 800cd86:	d10c      	bne.n	800cda2 <scalbn+0x5a>
 800cd88:	ee10 2a10 	vmov	r2, s0
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	4629      	mov	r1, r5
 800cd90:	f7f3 fa34 	bl	80001fc <__adddf3>
 800cd94:	4604      	mov	r4, r0
 800cd96:	460d      	mov	r5, r1
 800cd98:	e019      	b.n	800cdce <scalbn+0x86>
 800cd9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cd9e:	460b      	mov	r3, r1
 800cda0:	3a36      	subs	r2, #54	; 0x36
 800cda2:	4432      	add	r2, r6
 800cda4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cda8:	428a      	cmp	r2, r1
 800cdaa:	dd08      	ble.n	800cdbe <scalbn+0x76>
 800cdac:	2d00      	cmp	r5, #0
 800cdae:	a120      	add	r1, pc, #128	; (adr r1, 800ce30 <scalbn+0xe8>)
 800cdb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdb4:	da1c      	bge.n	800cdf0 <scalbn+0xa8>
 800cdb6:	a120      	add	r1, pc, #128	; (adr r1, 800ce38 <scalbn+0xf0>)
 800cdb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdbc:	e018      	b.n	800cdf0 <scalbn+0xa8>
 800cdbe:	2a00      	cmp	r2, #0
 800cdc0:	dd08      	ble.n	800cdd4 <scalbn+0x8c>
 800cdc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cdc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cdca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cdce:	ec45 4b10 	vmov	d0, r4, r5
 800cdd2:	bd70      	pop	{r4, r5, r6, pc}
 800cdd4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cdd8:	da19      	bge.n	800ce0e <scalbn+0xc6>
 800cdda:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cdde:	429e      	cmp	r6, r3
 800cde0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cde4:	dd0a      	ble.n	800cdfc <scalbn+0xb4>
 800cde6:	a112      	add	r1, pc, #72	; (adr r1, 800ce30 <scalbn+0xe8>)
 800cde8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1e2      	bne.n	800cdb6 <scalbn+0x6e>
 800cdf0:	a30f      	add	r3, pc, #60	; (adr r3, 800ce30 <scalbn+0xe8>)
 800cdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf6:	f7f3 fbb7 	bl	8000568 <__aeabi_dmul>
 800cdfa:	e7cb      	b.n	800cd94 <scalbn+0x4c>
 800cdfc:	a10a      	add	r1, pc, #40	; (adr r1, 800ce28 <scalbn+0xe0>)
 800cdfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d0b8      	beq.n	800cd78 <scalbn+0x30>
 800ce06:	a10e      	add	r1, pc, #56	; (adr r1, 800ce40 <scalbn+0xf8>)
 800ce08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce0c:	e7b4      	b.n	800cd78 <scalbn+0x30>
 800ce0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce12:	3236      	adds	r2, #54	; 0x36
 800ce14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	4b0c      	ldr	r3, [pc, #48]	; (800ce50 <scalbn+0x108>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	e7e8      	b.n	800cdf6 <scalbn+0xae>
 800ce24:	f3af 8000 	nop.w
 800ce28:	c2f8f359 	.word	0xc2f8f359
 800ce2c:	01a56e1f 	.word	0x01a56e1f
 800ce30:	8800759c 	.word	0x8800759c
 800ce34:	7e37e43c 	.word	0x7e37e43c
 800ce38:	8800759c 	.word	0x8800759c
 800ce3c:	fe37e43c 	.word	0xfe37e43c
 800ce40:	c2f8f359 	.word	0xc2f8f359
 800ce44:	81a56e1f 	.word	0x81a56e1f
 800ce48:	43500000 	.word	0x43500000
 800ce4c:	ffff3cb0 	.word	0xffff3cb0
 800ce50:	3c900000 	.word	0x3c900000

0800ce54 <_init>:
 800ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce56:	bf00      	nop
 800ce58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce5a:	bc08      	pop	{r3}
 800ce5c:	469e      	mov	lr, r3
 800ce5e:	4770      	bx	lr

0800ce60 <_fini>:
 800ce60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce62:	bf00      	nop
 800ce64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce66:	bc08      	pop	{r3}
 800ce68:	469e      	mov	lr, r3
 800ce6a:	4770      	bx	lr
