
BUV_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf98  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005788  0800d148  0800d148  0001d148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128d0  080128d0  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  080128d0  080128d0  000228d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128d8  080128d8  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128d8  080128d8  000228d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080128dc  080128dc  000228dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080128e0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          00000c80  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d08  20000d08  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a61c  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c2f  00000000  00000000  0004a717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016e0  00000000  00000000  0004e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001193  00000000  00000000  0004fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003e8b  00000000  00000000  00050bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e369  00000000  00000000  00054a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1567  00000000  00000000  00072daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006670  00000000  00000000  00154318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003b  00000000  00000000  0015a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d130 	.word	0x0800d130

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800d130 	.word	0x0800d130

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_uldivmod>:
 8000b18:	b953      	cbnz	r3, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1a:	b94a      	cbnz	r2, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bf08      	it	eq
 8000b20:	2800      	cmpeq	r0, #0
 8000b22:	bf1c      	itt	ne
 8000b24:	f04f 31ff 	movne.w	r1, #4294967295
 8000b28:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2c:	f000 b970 	b.w	8000e10 <__aeabi_idiv0>
 8000b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b38:	f000 f806 	bl	8000b48 <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <__udivmoddi4>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	9e08      	ldr	r6, [sp, #32]
 8000b4e:	460d      	mov	r5, r1
 8000b50:	4604      	mov	r4, r0
 8000b52:	460f      	mov	r7, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d14a      	bne.n	8000bee <__udivmoddi4+0xa6>
 8000b58:	428a      	cmp	r2, r1
 8000b5a:	4694      	mov	ip, r2
 8000b5c:	d965      	bls.n	8000c2a <__udivmoddi4+0xe2>
 8000b5e:	fab2 f382 	clz	r3, r2
 8000b62:	b143      	cbz	r3, 8000b76 <__udivmoddi4+0x2e>
 8000b64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b68:	f1c3 0220 	rsb	r2, r3, #32
 8000b6c:	409f      	lsls	r7, r3
 8000b6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b72:	4317      	orrs	r7, r2
 8000b74:	409c      	lsls	r4, r3
 8000b76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b7a:	fa1f f58c 	uxth.w	r5, ip
 8000b7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b82:	0c22      	lsrs	r2, r4, #16
 8000b84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b8c:	fb01 f005 	mul.w	r0, r1, r5
 8000b90:	4290      	cmp	r0, r2
 8000b92:	d90a      	bls.n	8000baa <__udivmoddi4+0x62>
 8000b94:	eb1c 0202 	adds.w	r2, ip, r2
 8000b98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b9c:	f080 811c 	bcs.w	8000dd8 <__udivmoddi4+0x290>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f240 8119 	bls.w	8000dd8 <__udivmoddi4+0x290>
 8000ba6:	3902      	subs	r1, #2
 8000ba8:	4462      	add	r2, ip
 8000baa:	1a12      	subs	r2, r2, r0
 8000bac:	b2a4      	uxth	r4, r4
 8000bae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bba:	fb00 f505 	mul.w	r5, r0, r5
 8000bbe:	42a5      	cmp	r5, r4
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x90>
 8000bc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bca:	f080 8107 	bcs.w	8000ddc <__udivmoddi4+0x294>
 8000bce:	42a5      	cmp	r5, r4
 8000bd0:	f240 8104 	bls.w	8000ddc <__udivmoddi4+0x294>
 8000bd4:	4464      	add	r4, ip
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bdc:	1b64      	subs	r4, r4, r5
 8000bde:	2100      	movs	r1, #0
 8000be0:	b11e      	cbz	r6, 8000bea <__udivmoddi4+0xa2>
 8000be2:	40dc      	lsrs	r4, r3
 8000be4:	2300      	movs	r3, #0
 8000be6:	e9c6 4300 	strd	r4, r3, [r6]
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0xbc>
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	f000 80ed 	beq.w	8000dd2 <__udivmoddi4+0x28a>
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000bfe:	4608      	mov	r0, r1
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	fab3 f183 	clz	r1, r3
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	d149      	bne.n	8000ca0 <__udivmoddi4+0x158>
 8000c0c:	42ab      	cmp	r3, r5
 8000c0e:	d302      	bcc.n	8000c16 <__udivmoddi4+0xce>
 8000c10:	4282      	cmp	r2, r0
 8000c12:	f200 80f8 	bhi.w	8000e06 <__udivmoddi4+0x2be>
 8000c16:	1a84      	subs	r4, r0, r2
 8000c18:	eb65 0203 	sbc.w	r2, r5, r3
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	4617      	mov	r7, r2
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	d0e2      	beq.n	8000bea <__udivmoddi4+0xa2>
 8000c24:	e9c6 4700 	strd	r4, r7, [r6]
 8000c28:	e7df      	b.n	8000bea <__udivmoddi4+0xa2>
 8000c2a:	b902      	cbnz	r2, 8000c2e <__udivmoddi4+0xe6>
 8000c2c:	deff      	udf	#255	; 0xff
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8090 	bne.w	8000d58 <__udivmoddi4+0x210>
 8000c38:	1a8a      	subs	r2, r1, r2
 8000c3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3e:	fa1f fe8c 	uxth.w	lr, ip
 8000c42:	2101      	movs	r1, #1
 8000c44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c48:	fb07 2015 	mls	r0, r7, r5, r2
 8000c4c:	0c22      	lsrs	r2, r4, #16
 8000c4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c52:	fb0e f005 	mul.w	r0, lr, r5
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0x124>
 8000c5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x122>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f200 80cb 	bhi.w	8000e00 <__udivmoddi4+0x2b8>
 8000c6a:	4645      	mov	r5, r8
 8000c6c:	1a12      	subs	r2, r2, r0
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c74:	fb07 2210 	mls	r2, r7, r0, r2
 8000c78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x14e>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x14c>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	f200 80bb 	bhi.w	8000e0a <__udivmoddi4+0x2c2>
 8000c94:	4610      	mov	r0, r2
 8000c96:	eba4 040e 	sub.w	r4, r4, lr
 8000c9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c9e:	e79f      	b.n	8000be0 <__udivmoddi4+0x98>
 8000ca0:	f1c1 0720 	rsb	r7, r1, #32
 8000ca4:	408b      	lsls	r3, r1
 8000ca6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000caa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cae:	fa05 f401 	lsl.w	r4, r5, r1
 8000cb2:	fa20 f307 	lsr.w	r3, r0, r7
 8000cb6:	40fd      	lsrs	r5, r7
 8000cb8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cbc:	4323      	orrs	r3, r4
 8000cbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cc2:	fa1f fe8c 	uxth.w	lr, ip
 8000cc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000cca:	0c1c      	lsrs	r4, r3, #16
 8000ccc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000cd4:	42a5      	cmp	r5, r4
 8000cd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cda:	fa00 f001 	lsl.w	r0, r0, r1
 8000cde:	d90b      	bls.n	8000cf8 <__udivmoddi4+0x1b0>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce8:	f080 8088 	bcs.w	8000dfc <__udivmoddi4+0x2b4>
 8000cec:	42a5      	cmp	r5, r4
 8000cee:	f240 8085 	bls.w	8000dfc <__udivmoddi4+0x2b4>
 8000cf2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf6:	4464      	add	r4, ip
 8000cf8:	1b64      	subs	r4, r4, r5
 8000cfa:	b29d      	uxth	r5, r3
 8000cfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d00:	fb09 4413 	mls	r4, r9, r3, r4
 8000d04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x1da>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d18:	d26c      	bcs.n	8000df4 <__udivmoddi4+0x2ac>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	d96a      	bls.n	8000df4 <__udivmoddi4+0x2ac>
 8000d1e:	3b02      	subs	r3, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d26:	fba3 9502 	umull	r9, r5, r3, r2
 8000d2a:	eba4 040e 	sub.w	r4, r4, lr
 8000d2e:	42ac      	cmp	r4, r5
 8000d30:	46c8      	mov	r8, r9
 8000d32:	46ae      	mov	lr, r5
 8000d34:	d356      	bcc.n	8000de4 <__udivmoddi4+0x29c>
 8000d36:	d053      	beq.n	8000de0 <__udivmoddi4+0x298>
 8000d38:	b156      	cbz	r6, 8000d50 <__udivmoddi4+0x208>
 8000d3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d42:	fa04 f707 	lsl.w	r7, r4, r7
 8000d46:	40ca      	lsrs	r2, r1
 8000d48:	40cc      	lsrs	r4, r1
 8000d4a:	4317      	orrs	r7, r2
 8000d4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d50:	4618      	mov	r0, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d58:	f1c3 0120 	rsb	r1, r3, #32
 8000d5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d60:	fa20 f201 	lsr.w	r2, r0, r1
 8000d64:	fa25 f101 	lsr.w	r1, r5, r1
 8000d68:	409d      	lsls	r5, r3
 8000d6a:	432a      	orrs	r2, r5
 8000d6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d78:	fb07 1510 	mls	r5, r7, r0, r1
 8000d7c:	0c11      	lsrs	r1, r2, #16
 8000d7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d82:	fb00 f50e 	mul.w	r5, r0, lr
 8000d86:	428d      	cmp	r5, r1
 8000d88:	fa04 f403 	lsl.w	r4, r4, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x258>
 8000d8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d96:	d22f      	bcs.n	8000df8 <__udivmoddi4+0x2b0>
 8000d98:	428d      	cmp	r5, r1
 8000d9a:	d92d      	bls.n	8000df8 <__udivmoddi4+0x2b0>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1b49      	subs	r1, r1, r5
 8000da2:	b292      	uxth	r2, r2
 8000da4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000da8:	fb07 1115 	mls	r1, r7, r5, r1
 8000dac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db0:	fb05 f10e 	mul.w	r1, r5, lr
 8000db4:	4291      	cmp	r1, r2
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x282>
 8000db8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc0:	d216      	bcs.n	8000df0 <__udivmoddi4+0x2a8>
 8000dc2:	4291      	cmp	r1, r2
 8000dc4:	d914      	bls.n	8000df0 <__udivmoddi4+0x2a8>
 8000dc6:	3d02      	subs	r5, #2
 8000dc8:	4462      	add	r2, ip
 8000dca:	1a52      	subs	r2, r2, r1
 8000dcc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dd0:	e738      	b.n	8000c44 <__udivmoddi4+0xfc>
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	e708      	b.n	8000bea <__udivmoddi4+0xa2>
 8000dd8:	4639      	mov	r1, r7
 8000dda:	e6e6      	b.n	8000baa <__udivmoddi4+0x62>
 8000ddc:	4610      	mov	r0, r2
 8000dde:	e6fb      	b.n	8000bd8 <__udivmoddi4+0x90>
 8000de0:	4548      	cmp	r0, r9
 8000de2:	d2a9      	bcs.n	8000d38 <__udivmoddi4+0x1f0>
 8000de4:	ebb9 0802 	subs.w	r8, r9, r2
 8000de8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dec:	3b01      	subs	r3, #1
 8000dee:	e7a3      	b.n	8000d38 <__udivmoddi4+0x1f0>
 8000df0:	4645      	mov	r5, r8
 8000df2:	e7ea      	b.n	8000dca <__udivmoddi4+0x282>
 8000df4:	462b      	mov	r3, r5
 8000df6:	e794      	b.n	8000d22 <__udivmoddi4+0x1da>
 8000df8:	4640      	mov	r0, r8
 8000dfa:	e7d1      	b.n	8000da0 <__udivmoddi4+0x258>
 8000dfc:	46d0      	mov	r8, sl
 8000dfe:	e77b      	b.n	8000cf8 <__udivmoddi4+0x1b0>
 8000e00:	3d02      	subs	r5, #2
 8000e02:	4462      	add	r2, ip
 8000e04:	e732      	b.n	8000c6c <__udivmoddi4+0x124>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e70a      	b.n	8000c20 <__udivmoddi4+0xd8>
 8000e0a:	4464      	add	r4, ip
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	e742      	b.n	8000c96 <__udivmoddi4+0x14e>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <CRC_16_Modbus>:

// Поддерживаются функции 0x03, 0x04, 0x06, 0x10, 0x17


CRC_16_Modbus(uint8_t Buffer[], uint8_t Len, uint32_t pointer_out) //Рассчёт CRC
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	72fb      	strb	r3, [r7, #11]
	uint8_t OutTable[3];

	uint16_t  i;
	uint8_t  j;
	uint16_t TempByte, CurrentCRC = 0xFFFF;
 8000e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e26:	833b      	strh	r3, [r7, #24]

	uint8_t HiByte;
	uint8_t LoByte;
	//make byte 16 bit format

	for ( i = 0; i < Len; i++ )
 8000e28:	2300      	movs	r3, #0
 8000e2a:	83fb      	strh	r3, [r7, #30]
 8000e2c:	e02c      	b.n	8000e88 <CRC_16_Modbus+0x74>
	{
	  TempByte = Buffer[i];
 8000e2e:	8bfb      	ldrh	r3, [r7, #30]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	837b      	strh	r3, [r7, #26]

	  for ( j = 0; j < 8; j++ )
 8000e38:	2300      	movs	r3, #0
 8000e3a:	777b      	strb	r3, [r7, #29]
 8000e3c:	e01e      	b.n	8000e7c <CRC_16_Modbus+0x68>
	  {
		  if ( (CurrentCRC & 0x0001) == (TempByte & 0x0001) )
 8000e3e:	8b3a      	ldrh	r2, [r7, #24]
 8000e40:	8b7b      	ldrh	r3, [r7, #26]
 8000e42:	4053      	eors	r3, r2
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d106      	bne.n	8000e5c <CRC_16_Modbus+0x48>
		  {
			  //right shift crc
			  CurrentCRC >>= 1;
 8000e4e:	8b3b      	ldrh	r3, [r7, #24]
 8000e50:	085b      	lsrs	r3, r3, #1
 8000e52:	833b      	strh	r3, [r7, #24]
			  //right shift data
			  TempByte >>= 1;
 8000e54:	8b7b      	ldrh	r3, [r7, #26]
 8000e56:	085b      	lsrs	r3, r3, #1
 8000e58:	837b      	strh	r3, [r7, #26]
 8000e5a:	e00c      	b.n	8000e76 <CRC_16_Modbus+0x62>
		  }
		  else
		  {
			  CurrentCRC >>= 1;
 8000e5c:	8b3b      	ldrh	r3, [r7, #24]
 8000e5e:	085b      	lsrs	r3, r3, #1
 8000e60:	833b      	strh	r3, [r7, #24]
			  TempByte >>= 1;
 8000e62:	8b7b      	ldrh	r3, [r7, #26]
 8000e64:	085b      	lsrs	r3, r3, #1
 8000e66:	837b      	strh	r3, [r7, #26]
			  CurrentCRC = CurrentCRC ^ 0xA001; /* 1000 0100 0000 1000 = x^16 + x^12 + x^5 + 1 */
 8000e68:	8b3b      	ldrh	r3, [r7, #24]
 8000e6a:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000e6e:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000e72:	43db      	mvns	r3, r3
 8000e74:	833b      	strh	r3, [r7, #24]
	  for ( j = 0; j < 8; j++ )
 8000e76:	7f7b      	ldrb	r3, [r7, #29]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	777b      	strb	r3, [r7, #29]
 8000e7c:	7f7b      	ldrb	r3, [r7, #29]
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	d9dd      	bls.n	8000e3e <CRC_16_Modbus+0x2a>
	for ( i = 0; i < Len; i++ )
 8000e82:	8bfb      	ldrh	r3, [r7, #30]
 8000e84:	3301      	adds	r3, #1
 8000e86:	83fb      	strh	r3, [r7, #30]
 8000e88:	7afb      	ldrb	r3, [r7, #11]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	8bfa      	ldrh	r2, [r7, #30]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d3cd      	bcc.n	8000e2e <CRC_16_Modbus+0x1a>
		  }
	  }
	}

	HiByte = 0x00FF & CurrentCRC;
 8000e92:	8b3b      	ldrh	r3, [r7, #24]
 8000e94:	75fb      	strb	r3, [r7, #23]
	CurrentCRC = 0xFF00 & CurrentCRC;
 8000e96:	8b3b      	ldrh	r3, [r7, #24]
 8000e98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e9c:	833b      	strh	r3, [r7, #24]
	CurrentCRC = CurrentCRC >> 8;
 8000e9e:	8b3b      	ldrh	r3, [r7, #24]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	833b      	strh	r3, [r7, #24]
	LoByte = 0x00FF & CurrentCRC;
 8000ea4:	8b3b      	ldrh	r3, [r7, #24]
 8000ea6:	75bb      	strb	r3, [r7, #22]

	OutTable[0] = HiByte;
 8000ea8:	7dfb      	ldrb	r3, [r7, #23]
 8000eaa:	743b      	strb	r3, [r7, #16]
	OutTable[1] = LoByte;
 8000eac:	7dbb      	ldrb	r3, [r7, #22]
 8000eae:	747b      	strb	r3, [r7, #17]
	OutTable[2] = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	74bb      	strb	r3, [r7, #18]


	if( (Buffer[Len] == HiByte) & (Buffer[Len+1] == LoByte) )
 8000eb4:	7afb      	ldrb	r3, [r7, #11]
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	7dfa      	ldrb	r2, [r7, #23]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	bf0c      	ite	eq
 8000ec2:	2301      	moveq	r3, #1
 8000ec4:	2300      	movne	r3, #0
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	7afb      	ldrb	r3, [r7, #11]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	68f9      	ldr	r1, [r7, #12]
 8000ece:	440b      	add	r3, r1
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	7db9      	ldrb	r1, [r7, #22]
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	bf0c      	ite	eq
 8000ed8:	2301      	moveq	r3, #1
 8000eda:	2300      	movne	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <CRC_16_Modbus+0xd6>
	{
		OutTable[2] = 1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	74bb      	strb	r3, [r7, #18]
	}

	memcpy(pointer_out, &OutTable, 3);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	461a      	mov	r2, r3
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	8819      	ldrh	r1, [r3, #0]
 8000ef4:	789b      	ldrb	r3, [r3, #2]
 8000ef6:	8011      	strh	r1, [r2, #0]
 8000ef8:	7093      	strb	r3, [r2, #2]
}
 8000efa:	bf00      	nop
 8000efc:	4618      	mov	r0, r3
 8000efe:	3724      	adds	r7, #36	; 0x24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <Slave_PORT_Processor>:

void Slave_PORT_Processor(uint32_t pointer_DB)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	60fb      	str	r3, [r7, #12]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60bb      	str	r3, [r7, #8]

	if(USART_port->a.SR & 0x80) // если прерывание по передаче
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d038      	beq.n	8000f98 <Slave_PORT_Processor+0x90>
	{
		if(Slave_DB->a.TX_count)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	895b      	ldrh	r3, [r3, #10]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d034      	beq.n	8000f98 <Slave_PORT_Processor+0x90>
		{
			GPIOF->BSRR = GPIO_PIN_8;		//Tx On
 8000f2e:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <Slave_PORT_Processor+0xf0>)
 8000f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f34:	619a      	str	r2, [r3, #24]

			Slave_DB->a.Roll++;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	899b      	ldrh	r3, [r3, #12]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	819a      	strh	r2, [r3, #12]
			if(Slave_DB->a.Roll > Slave_DB->a.Roll_max)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	899a      	ldrh	r2, [r3, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	89db      	ldrh	r3, [r3, #14]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d924      	bls.n	8000f98 <Slave_PORT_Processor+0x90>
			{

				Slave_DB->a.Roll= 0;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2200      	movs	r2, #0
 8000f52:	819a      	strh	r2, [r3, #12]

				if(Slave_DB->a.TX_count < Slave_DB->a.TX_incr)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	895a      	ldrh	r2, [r3, #10]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	891b      	ldrh	r3, [r3, #8]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d20b      	bcs.n	8000f78 <Slave_PORT_Processor+0x70>
				{
					Slave_DB->a.TX_count = 0;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2200      	movs	r2, #0
 8000f64:	815a      	strh	r2, [r3, #10]
					USART_port->a.CR1 = 0x202c;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	f242 022c 	movw	r2, #8236	; 0x202c
 8000f6c:	60da      	str	r2, [r3, #12]
					GPIOF->BSRR = GPIO_PIN_8 << 16;	//Tx Off
 8000f6e:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <Slave_PORT_Processor+0xf0>)
 8000f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f74:	619a      	str	r2, [r3, #24]
 8000f76:	e00f      	b.n	8000f98 <Slave_PORT_Processor+0x90>
				}
				else
				{
					USART_port->a.DR = Slave_DB->a.TX_buff[Slave_DB->a.TX_incr];
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	891b      	ldrh	r3, [r3, #8]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4413      	add	r3, r2
 8000f82:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8000f86:	461a      	mov	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	605a      	str	r2, [r3, #4]
					Slave_DB->a.TX_incr++;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	891b      	ldrh	r3, [r3, #8]
 8000f90:	3301      	adds	r3, #1
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	811a      	strh	r2, [r3, #8]
			}

		}
	}

	if(!Slave_DB->a.TX_count)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	895b      	ldrh	r3, [r3, #10]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d125      	bne.n	8000fec <Slave_PORT_Processor+0xe4>
	{
		if( (USART_port->a.SR & 0x20) ) // если прерывание по приёму
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d019      	beq.n	8000fe0 <Slave_PORT_Processor+0xd8>
		{

			if(Slave_DB->a.schet > 3){Slave_DB->a.RX_buff_pointer = 0;}
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	8a1b      	ldrh	r3, [r3, #16]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d902      	bls.n	8000fba <Slave_PORT_Processor+0xb2>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	715a      	strb	r2, [r3, #5]
			Slave_DB->a.RX_buff[Slave_DB->a.RX_buff_pointer] = 0x000000FF & (USART_port->a.DR);
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	795b      	ldrb	r3, [r3, #5]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	440b      	add	r3, r1
 8000fca:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			Slave_DB->a.RX_buff_pointer++;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	795b      	ldrb	r3, [r3, #5]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	715a      	strb	r2, [r3, #5]
			Slave_DB->a.schet=0;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	821a      	strh	r2, [r3, #16]
		}

		USART_port->a.CR1 |= 0x20;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	f043 0220 	orr.w	r2, r3, #32
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60da      	str	r2, [r3, #12]
	}

}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40021400 	.word	0x40021400

08000ffc <Slave_Processor>:

void Slave_Processor(uint32_t pointer_DB)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b08d      	sub	sp, #52	; 0x34
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	613b      	str	r3, [r7, #16]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]

	if( Slave_DB->a.RX_buff[0] == Slave_DB->a.MB_Addr )
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8465 	bne.w	80018e8 <Slave_Processor+0x8ec>
	{
		if( Slave_DB->a.RX_buff_pointer == 8 )
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	795b      	ldrb	r3, [r3, #5]
 8001022:	2b08      	cmp	r3, #8
 8001024:	f040 81f1 	bne.w	800140a <Slave_Processor+0x40e>
		{

				if ((Slave_DB->a.RX_buff[1] == 3) | (Slave_DB->a.RX_buff[1] == 4) | (Slave_DB->a.RX_buff[1] == 6))
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800102e:	2b03      	cmp	r3, #3
 8001030:	bf0c      	ite	eq
 8001032:	2301      	moveq	r3, #1
 8001034:	2300      	movne	r3, #0
 8001036:	b2da      	uxtb	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf0c      	ite	eq
 8001042:	2301      	moveq	r3, #1
 8001044:	2300      	movne	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001054:	2b06      	cmp	r3, #6
 8001056:	bf0c      	ite	eq
 8001058:	2301      	moveq	r3, #1
 800105a:	2300      	movne	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 81be 	beq.w	80013e2 <Slave_Processor+0x3e6>
					{
						Slave_DB->a.CRC_Calc_out_table[2] = 0;
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
						if(Slave_DB->a.RX_buff[1] <= 6) {CRC_16_Modbus(Slave_DB->a.RX_buff, 6, &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001074:	2b06      	cmp	r3, #6
 8001076:	d809      	bhi.n	800108c <Slave_Processor+0x90>
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8001084:	461a      	mov	r2, r3
 8001086:	2106      	movs	r1, #6
 8001088:	f7ff fec4 	bl	8000e14 <CRC_16_Modbus>

						if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 81a5 	beq.w	80013e2 <Slave_Processor+0x3e6>
						{

							if(Slave_DB->a.RX_buff[1] == 6) // обработка функции 0x06
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d174      	bne.n	800118c <Slave_Processor+0x190>
							{

								Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.RX_buff[4];
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	f893 2511 	ldrb.w	r2, [r3, #1297]	; 0x511
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80010e4:	b211      	sxth	r1, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	3308      	adds	r3, #8
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	460a      	mov	r2, r1
 80010f0:	805a      	strh	r2, [r3, #2]
								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.Registers[Slave_DB->a.StartAddr] << 8;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	3308      	adds	r3, #8
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001104:	021a      	lsls	r2, r3, #8
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800110c:	b211      	sxth	r1, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	3308      	adds	r3, #8
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	460a      	mov	r2, r1
 8001118:	805a      	strh	r2, [r3, #2]
								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.Registers[Slave_DB->a.StartAddr] | Slave_DB->a.RX_buff[5];
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	3308      	adds	r3, #8
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8001132:	b21b      	sxth	r3, r3
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	f8b1 1610 	ldrh.w	r1, [r1, #1552]	; 0x610
 800113a:	4608      	mov	r0, r1
 800113c:	4313      	orrs	r3, r2
 800113e:	b219      	sxth	r1, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	f100 0308 	add.w	r3, r0, #8
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	460a      	mov	r2, r1
 800114c:	805a      	strh	r2, [r3, #2]

								for(int i=0;i<8;i++)
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001152:	e00f      	b.n	8001174 <Slave_Processor+0x178>
								{
									Slave_DB->a.TX_buff[i] = Slave_DB->a.RX_buff[i];
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001158:	4413      	add	r3, r2
 800115a:	f203 530d 	addw	r3, r3, #1293	; 0x50d
 800115e:	7819      	ldrb	r1, [r3, #0]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001164:	4413      	add	r3, r2
 8001166:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 800116a:	460a      	mov	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
								for(int i=0;i<8;i++)
 800116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001170:	3301      	adds	r3, #1
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001176:	2b07      	cmp	r3, #7
 8001178:	ddec      	ble.n	8001154 <Slave_Processor+0x158>
								}

								Slave_DB->a.TX_count = 8;
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	2208      	movs	r2, #8
 800117e:	815a      	strh	r2, [r3, #10]
								Slave_DB->a.TX_incr = 0;
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	2200      	movs	r2, #0
 8001184:	811a      	strh	r2, [r3, #8]
								Slave_DB->a.RX_buff_pointer = 0;
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	2200      	movs	r2, #0
 800118a:	715a      	strb	r2, [r3, #5]

							}

							if((Slave_DB->a.RX_buff[1] == 3) | (Slave_DB->a.RX_buff[1] == 4)) // обработка функции 0x03 и 0x04
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001192:	2b03      	cmp	r3, #3
 8001194:	bf0c      	ite	eq
 8001196:	2301      	moveq	r3, #1
 8001198:	2300      	movne	r3, #0
 800119a:	b2da      	uxtb	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 8116 	beq.w	80013e2 <Slave_Processor+0x3e6>
							{

								Slave_DB->a.TX_buff[0] = Slave_DB->a.RX_buff[0];
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
								Slave_DB->a.TX_buff[1] = Slave_DB->a.RX_buff[1];
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	f893 250e 	ldrb.w	r2, [r3, #1294]	; 0x50e
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f

								Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

								Slave_DB->a.Quanity = Slave_DB->a.RX_buff[4];
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 800120a:	b29a      	uxth	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
								Slave_DB->a.Quanity = Slave_DB->a.Quanity << 8;
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b29a      	uxth	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
								Slave_DB->a.Quanity = Slave_DB->a.Quanity | Slave_DB->a.RX_buff[5];
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	f8b3 2612 	ldrh.w	r2, [r3, #1554]	; 0x612
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 800122e:	b29b      	uxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b29a      	uxth	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612

								Slave_DB->a.TX_buff[2] = Slave_DB->a.Quanity * 2;
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001240:	b2db      	uxtb	r3, r3
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

								if(Slave_DB->a.RX_buff[1] == 4)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001252:	2b04      	cmp	r3, #4
 8001254:	d14a      	bne.n	80012ec <Slave_Processor+0x2f0>
								{
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
 800125a:	e03f      	b.n	80012dc <Slave_Processor+0x2e0>
									{
										Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Input_Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001262:	4619      	mov	r1, r3
 8001264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001266:	0fda      	lsrs	r2, r3, #31
 8001268:	4413      	add	r3, r2
 800126a:	105b      	asrs	r3, r3, #1
 800126c:	18ca      	adds	r2, r1, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001274:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	3304      	adds	r3, #4
 800127c:	b2d1      	uxtb	r1, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4413      	add	r3, r2
 8001282:	460a      	mov	r2, r1
 8001284:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
										Slave_DB->a.TempRegister = Slave_DB->a.Input_Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800128e:	4619      	mov	r1, r3
 8001290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001292:	0fda      	lsrs	r2, r3, #31
 8001294:	4413      	add	r3, r2
 8001296:	105b      	asrs	r3, r3, #1
 8001298:	18ca      	adds	r2, r1, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80012a0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80012a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 80012b6:	121b      	asrs	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	3303      	adds	r3, #3
 80012ca:	b2d1      	uxtb	r1, r2
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4413      	add	r3, r2
 80012d0:	460a      	mov	r2, r1
 80012d2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d8:	3302      	adds	r3, #2
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80012e2:	461a      	mov	r2, r3
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e6:	4293      	cmp	r3, r2
 80012e8:	dbb8      	blt.n	800125c <Slave_Processor+0x260>
 80012ea:	e04b      	b.n	8001384 <Slave_Processor+0x388>
									}
								}
								else
								{
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
 80012f0:	e041      	b.n	8001376 <Slave_Processor+0x37a>
									{
										Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80012f8:	4619      	mov	r1, r3
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	0fda      	lsrs	r2, r3, #31
 80012fe:	4413      	add	r3, r2
 8001300:	105b      	asrs	r3, r3, #1
 8001302:	440b      	add	r3, r1
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	3308      	adds	r3, #8
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	3304      	adds	r3, #4
 8001314:	b2d1      	uxtb	r1, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4413      	add	r3, r2
 800131a:	460a      	mov	r2, r1
 800131c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
										Slave_DB->a.TempRegister = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001326:	4619      	mov	r1, r3
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	0fda      	lsrs	r2, r3, #31
 800132c:	4413      	add	r3, r2
 800132e:	105b      	asrs	r3, r3, #1
 8001330:	440b      	add	r3, r1
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	3308      	adds	r3, #8
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800133e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001342:	b21a      	sxth	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 8001350:	121b      	asrs	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	3303      	adds	r3, #3
 8001364:	b2d1      	uxtb	r1, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4413      	add	r3, r2
 800136a:	460a      	mov	r2, r1
 800136c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	3302      	adds	r3, #2
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800137c:	461a      	mov	r2, r3
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	4293      	cmp	r3, r2
 8001382:	dbb6      	blt.n	80012f2 <Slave_Processor+0x2f6>
									}
								}

								uint8_t LenMess;
								LenMess = Slave_DB->a.TX_buff[2] + 5;
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800138a:	3305      	adds	r3, #5
 800138c:	72fb      	strb	r3, [r7, #11]
								CRC_16_Modbus(Slave_DB->a.TX_buff, (LenMess - 2), &Slave_DB->a.CRC_Calc_out_table);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 8001394:	7afb      	ldrb	r3, [r7, #11]
 8001396:	3b02      	subs	r3, #2
 8001398:	b2d9      	uxtb	r1, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80013a0:	461a      	mov	r2, r3
 80013a2:	f7ff fd37 	bl	8000e14 <CRC_16_Modbus>
								Slave_DB->a.TX_buff[LenMess - 1] = Slave_DB->a.CRC_Calc_out_table[1];
 80013a6:	7afb      	ldrb	r3, [r7, #11]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	f892 160d 	ldrb.w	r1, [r2, #1549]	; 0x60d
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4413      	add	r3, r2
 80013b4:	460a      	mov	r2, r1
 80013b6:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
								Slave_DB->a.TX_buff[LenMess - 2] = Slave_DB->a.CRC_Calc_out_table[0];
 80013ba:	7afb      	ldrb	r3, [r7, #11]
 80013bc:	3b02      	subs	r3, #2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	f892 160c 	ldrb.w	r1, [r2, #1548]	; 0x60c
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4413      	add	r3, r2
 80013c8:	460a      	mov	r2, r1
 80013ca:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

								Slave_DB->a.TX_count = LenMess;
 80013ce:	7afb      	ldrb	r3, [r7, #11]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	815a      	strh	r2, [r3, #10]
								Slave_DB->a.TX_incr = 0;
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	2200      	movs	r2, #0
 80013da:	811a      	strh	r2, [r3, #8]
								Slave_DB->a.RX_buff_pointer = 0;
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2200      	movs	r2, #0
 80013e0:	715a      	strb	r2, [r3, #5]
							}

						}
					}

				if( Slave_DB->a.RX_buff[1] == 16 ) // зондирование для функции 0x10
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 80013e8:	2b10      	cmp	r3, #16
 80013ea:	d10e      	bne.n	800140a <Slave_Processor+0x40e>
				{
					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[6];
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.LenLongMessage = Slave_DB->a.Quanity + 9;
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001400:	b2db      	uxtb	r3, r3
 8001402:	3309      	adds	r3, #9
 8001404:	b2da      	uxtb	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	719a      	strb	r2, [r3, #6]
				}
		}

		if( Slave_DB->a.RX_buff_pointer == 11 )
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	795b      	ldrb	r3, [r3, #5]
 800140e:	2b0b      	cmp	r3, #11
 8001410:	d113      	bne.n	800143a <Slave_Processor+0x43e>
		{
			if( Slave_DB->a.RX_buff[1] == 23 ) // зондирование для функции 0x17
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001418:	2b17      	cmp	r3, #23
 800141a:	d10e      	bne.n	800143a <Slave_Processor+0x43e>
				{
					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[10];
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001422:	b29a      	uxth	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.LenLongMessage = Slave_DB->a.Quanity + 13;
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001430:	b2db      	uxtb	r3, r3
 8001432:	330d      	adds	r3, #13
 8001434:	b2da      	uxtb	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	719a      	strb	r2, [r3, #6]
				}
		}


		if( Slave_DB->a.RX_buff[1] == 16 ) // обработка функции 0x10
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001440:	2b10      	cmp	r3, #16
 8001442:	f040 80dd 	bne.w	8001600 <Slave_Processor+0x604>
		{
			if( (Slave_DB->a.RX_buff_pointer == Slave_DB->a.LenLongMessage) )
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	795a      	ldrb	r2, [r3, #5]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	799b      	ldrb	r3, [r3, #6]
 800144e:	429a      	cmp	r2, r3
 8001450:	f040 80d6 	bne.w	8001600 <Slave_Processor+0x604>
			{
				Slave_DB->a.CRC_Calc_out_table[2] = 0;
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
				if(Slave_DB->a.RX_buff[1] == 16) {CRC_16_Modbus(Slave_DB->a.RX_buff, (Slave_DB->a.LenLongMessage-2), &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001462:	2b10      	cmp	r3, #16
 8001464:	d10c      	bne.n	8001480 <Slave_Processor+0x484>
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	799b      	ldrb	r3, [r3, #6]
 8001470:	3b02      	subs	r3, #2
 8001472:	b2d9      	uxtb	r1, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 800147a:	461a      	mov	r2, r3
 800147c:	f7ff fcca 	bl	8000e14 <CRC_16_Modbus>

				if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 80ba 	beq.w	8001600 <Slave_Processor+0x604>
				{

					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 8001492:	b29a      	uxth	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.RX_buff[6];i=i+2)
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
 80014c6:	e05f      	b.n	8001588 <Slave_Processor+0x58c>
					{
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.RX_buff[i+7];
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	3307      	adds	r3, #7
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4413      	add	r3, r2
 80014d0:	f893 150d 	ldrb.w	r1, [r3, #1293]	; 0x50d
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80014da:	4618      	mov	r0, r3
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	0fda      	lsrs	r2, r3, #31
 80014e0:	4413      	add	r3, r2
 80014e2:	105b      	asrs	r3, r3, #1
 80014e4:	4403      	add	r3, r0
 80014e6:	b209      	sxth	r1, r1
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	3308      	adds	r3, #8
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	460a      	mov	r2, r1
 80014f2:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] << 8;
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80014fa:	4619      	mov	r1, r3
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	0fda      	lsrs	r2, r3, #31
 8001500:	4413      	add	r3, r2
 8001502:	105b      	asrs	r3, r3, #1
 8001504:	440b      	add	r3, r1
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	3308      	adds	r3, #8
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001512:	0219      	lsls	r1, r3, #8
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800151a:	4618      	mov	r0, r3
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	0fda      	lsrs	r2, r3, #31
 8001520:	4413      	add	r3, r2
 8001522:	105b      	asrs	r3, r3, #1
 8001524:	4403      	add	r3, r0
 8001526:	b209      	sxth	r1, r1
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	3308      	adds	r3, #8
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	460a      	mov	r2, r1
 8001532:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] | Slave_DB->a.RX_buff[i+8];
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800153a:	4619      	mov	r1, r3
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	0fda      	lsrs	r2, r3, #31
 8001540:	4413      	add	r3, r2
 8001542:	105b      	asrs	r3, r3, #1
 8001544:	440b      	add	r3, r1
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	3308      	adds	r3, #8
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	3308      	adds	r3, #8
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4413      	add	r3, r2
 800155a:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 800155e:	b21a      	sxth	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001566:	461c      	mov	r4, r3
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	0fd8      	lsrs	r0, r3, #31
 800156c:	4403      	add	r3, r0
 800156e:	105b      	asrs	r3, r3, #1
 8001570:	4423      	add	r3, r4
 8001572:	430a      	orrs	r2, r1
 8001574:	b211      	sxth	r1, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	3308      	adds	r3, #8
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	460a      	mov	r2, r1
 8001580:	805a      	strh	r2, [r3, #2]
					for(int i=0;i<Slave_DB->a.RX_buff[6];i=i+2)
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	3302      	adds	r3, #2
 8001586:	623b      	str	r3, [r7, #32]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 800158e:	461a      	mov	r2, r3
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	4293      	cmp	r3, r2
 8001594:	db98      	blt.n	80014c8 <Slave_Processor+0x4cc>
					}

					for(int i=0;i<6;i++)
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	e00f      	b.n	80015bc <Slave_Processor+0x5c0>
					{Slave_DB->a.TX_buff[i] = Slave_DB->a.RX_buff[i];}
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4413      	add	r3, r2
 80015a2:	f203 530d 	addw	r3, r3, #1293	; 0x50d
 80015a6:	7819      	ldrb	r1, [r3, #0]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	4413      	add	r3, r2
 80015ae:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 80015b2:	460a      	mov	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<6;i++)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	2b05      	cmp	r3, #5
 80015c0:	ddec      	ble.n	800159c <Slave_Processor+0x5a0>

					CRC_16_Modbus(Slave_DB->a.TX_buff, 6, &Slave_DB->a.CRC_Calc_out_table);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80015ce:	461a      	mov	r2, r3
 80015d0:	2106      	movs	r1, #6
 80015d2:	f7ff fc1f 	bl	8000e14 <CRC_16_Modbus>
					Slave_DB->a.TX_buff[6] = Slave_DB->a.CRC_Calc_out_table[0];
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	f893 260c 	ldrb.w	r2, [r3, #1548]	; 0x60c
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
					Slave_DB->a.TX_buff[7] = Slave_DB->a.CRC_Calc_out_table[1];
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f893 260d 	ldrb.w	r2, [r3, #1549]	; 0x60d
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

					Slave_DB->a.TX_count = 8;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2208      	movs	r2, #8
 80015f2:	815a      	strh	r2, [r3, #10]
					Slave_DB->a.TX_incr = 0;
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	2200      	movs	r2, #0
 80015f8:	811a      	strh	r2, [r3, #8]
					Slave_DB->a.RX_buff_pointer = 0;
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2200      	movs	r2, #0
 80015fe:	715a      	strb	r2, [r3, #5]
				}
			}
		}

		if( Slave_DB->a.RX_buff[1] == 23 ) // обработка функции 0x17
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001606:	2b17      	cmp	r3, #23
 8001608:	f040 816e 	bne.w	80018e8 <Slave_Processor+0x8ec>
		{
			if( (Slave_DB->a.RX_buff_pointer == Slave_DB->a.LenLongMessage) )
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	795a      	ldrb	r2, [r3, #5]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	799b      	ldrb	r3, [r3, #6]
 8001614:	429a      	cmp	r2, r3
 8001616:	f040 8167 	bne.w	80018e8 <Slave_Processor+0x8ec>
			{
				Slave_DB->a.CRC_Calc_out_table[2] = 0;
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
				if(Slave_DB->a.RX_buff[1] == 23) {CRC_16_Modbus(Slave_DB->a.RX_buff, (Slave_DB->a.LenLongMessage-2), &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001628:	2b17      	cmp	r3, #23
 800162a:	d10c      	bne.n	8001646 <Slave_Processor+0x64a>
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	799b      	ldrb	r3, [r3, #6]
 8001636:	3b02      	subs	r3, #2
 8001638:	b2d9      	uxtb	r1, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8001640:	461a      	mov	r2, r3
 8001642:	f7ff fbe7 	bl	8000e14 <CRC_16_Modbus>

				if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 814b 	beq.w	80018e8 <Slave_Processor+0x8ec>
				{
					// Приём регистров
					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[6];
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8001658:	b29a      	uxth	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b29a      	uxth	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[7];
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f893 3514 	ldrb.w	r3, [r3, #1300]	; 0x514
 800167c:	b29b      	uxth	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b29a      	uxth	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.RX_buff[10];i=i+2)
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	e05f      	b.n	800174e <Slave_Processor+0x752>
					{
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.RX_buff[i+11];
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	330b      	adds	r3, #11
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4413      	add	r3, r2
 8001696:	f893 150d 	ldrb.w	r1, [r3, #1293]	; 0x50d
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80016a0:	4618      	mov	r0, r3
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	0fda      	lsrs	r2, r3, #31
 80016a6:	4413      	add	r3, r2
 80016a8:	105b      	asrs	r3, r3, #1
 80016aa:	4403      	add	r3, r0
 80016ac:	b209      	sxth	r1, r1
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	3308      	adds	r3, #8
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	460a      	mov	r2, r1
 80016b8:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] << 8;
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80016c0:	4619      	mov	r1, r3
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	0fda      	lsrs	r2, r3, #31
 80016c6:	4413      	add	r3, r2
 80016c8:	105b      	asrs	r3, r3, #1
 80016ca:	440b      	add	r3, r1
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	3308      	adds	r3, #8
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016d8:	0219      	lsls	r1, r3, #8
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80016e0:	4618      	mov	r0, r3
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	0fda      	lsrs	r2, r3, #31
 80016e6:	4413      	add	r3, r2
 80016e8:	105b      	asrs	r3, r3, #1
 80016ea:	4403      	add	r3, r0
 80016ec:	b209      	sxth	r1, r1
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	3308      	adds	r3, #8
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	460a      	mov	r2, r1
 80016f8:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] | Slave_DB->a.RX_buff[i+12];
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001700:	4619      	mov	r1, r3
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	0fda      	lsrs	r2, r3, #31
 8001706:	4413      	add	r3, r2
 8001708:	105b      	asrs	r3, r3, #1
 800170a:	440b      	add	r3, r1
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	3308      	adds	r3, #8
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	330c      	adds	r3, #12
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4413      	add	r3, r2
 8001720:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 8001724:	b21a      	sxth	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800172c:	461c      	mov	r4, r3
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	0fd8      	lsrs	r0, r3, #31
 8001732:	4403      	add	r3, r0
 8001734:	105b      	asrs	r3, r3, #1
 8001736:	4423      	add	r3, r4
 8001738:	430a      	orrs	r2, r1
 800173a:	b211      	sxth	r1, r2
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	3308      	adds	r3, #8
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	460a      	mov	r2, r1
 8001746:	805a      	strh	r2, [r3, #2]
					for(int i=0;i<Slave_DB->a.RX_buff[10];i=i+2)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	3302      	adds	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001754:	461a      	mov	r2, r3
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4293      	cmp	r3, r2
 800175a:	db98      	blt.n	800168e <Slave_Processor+0x692>
					}

					// Формирование ответа
					Slave_DB->a.TX_buff[0] = Slave_DB->a.RX_buff[0];
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					Slave_DB->a.TX_buff[1] = Slave_DB->a.RX_buff[1];
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f893 250e 	ldrb.w	r2, [r3, #1294]	; 0x50e
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f

					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[4];
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 800177a:	b29a      	uxth	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.Quanity = Slave_DB->a.Quanity << 8;
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b29a      	uxth	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.Quanity = Slave_DB->a.Quanity | Slave_DB->a.RX_buff[5];
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	f8b3 2612 	ldrh.w	r2, [r3, #1554]	; 0x612
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612

					Slave_DB->a.TX_buff[2] = Slave_DB->a.Quanity * 2;
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e041      	b.n	800187c <Slave_Processor+0x880>
					{
						Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80017fe:	4619      	mov	r1, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	0fda      	lsrs	r2, r3, #31
 8001804:	4413      	add	r3, r2
 8001806:	105b      	asrs	r3, r3, #1
 8001808:	440b      	add	r3, r1
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	3308      	adds	r3, #8
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3304      	adds	r3, #4
 800181a:	b2d1      	uxtb	r1, r2
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4413      	add	r3, r2
 8001820:	460a      	mov	r2, r1
 8001822:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
						Slave_DB->a.TempRegister = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800182c:	4619      	mov	r1, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	0fda      	lsrs	r2, r3, #31
 8001832:	4413      	add	r3, r2
 8001834:	105b      	asrs	r3, r3, #1
 8001836:	440b      	add	r3, r1
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	3308      	adds	r3, #8
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001844:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001848:	b21a      	sxth	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
						Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 8001856:	121b      	asrs	r3, r3, #8
 8001858:	b21a      	sxth	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
						Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3303      	adds	r3, #3
 800186a:	b2d1      	uxtb	r1, r2
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	460a      	mov	r2, r1
 8001872:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3302      	adds	r3, #2
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001882:	461a      	mov	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	4293      	cmp	r3, r2
 8001888:	dbb6      	blt.n	80017f8 <Slave_Processor+0x7fc>
					}

					uint8_t LenMess;
					LenMess = Slave_DB->a.TX_buff[2] + 5;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001890:	3305      	adds	r3, #5
 8001892:	72bb      	strb	r3, [r7, #10]
					CRC_16_Modbus(Slave_DB->a.TX_buff, (LenMess - 2), &Slave_DB->a.CRC_Calc_out_table);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 800189a:	7abb      	ldrb	r3, [r7, #10]
 800189c:	3b02      	subs	r3, #2
 800189e:	b2d9      	uxtb	r1, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80018a6:	461a      	mov	r2, r3
 80018a8:	f7ff fab4 	bl	8000e14 <CRC_16_Modbus>
					Slave_DB->a.TX_buff[LenMess - 1] = Slave_DB->a.CRC_Calc_out_table[1];
 80018ac:	7abb      	ldrb	r3, [r7, #10]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	f892 160d 	ldrb.w	r1, [r2, #1549]	; 0x60d
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4413      	add	r3, r2
 80018ba:	460a      	mov	r2, r1
 80018bc:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					Slave_DB->a.TX_buff[LenMess - 2] = Slave_DB->a.CRC_Calc_out_table[0];
 80018c0:	7abb      	ldrb	r3, [r7, #10]
 80018c2:	3b02      	subs	r3, #2
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	f892 160c 	ldrb.w	r1, [r2, #1548]	; 0x60c
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4413      	add	r3, r2
 80018ce:	460a      	mov	r2, r1
 80018d0:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

					Slave_DB->a.TX_count = LenMess;
 80018d4:	7abb      	ldrb	r3, [r7, #10]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	815a      	strh	r2, [r3, #10]
					Slave_DB->a.TX_incr = 0;
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2200      	movs	r2, #0
 80018e0:	811a      	strh	r2, [r3, #8]
					Slave_DB->a.RX_buff_pointer = 0;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2200      	movs	r2, #0
 80018e6:	715a      	strb	r2, [r3, #5]
				}
			}
		}
	}
}
 80018e8:	bf00      	nop
 80018ea:	3734      	adds	r7, #52	; 0x34
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <Slave_Clock_1ms>:
		}
	}
}

void Slave_Clock_1ms(uint32_t pointer_DB)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	60fb      	str	r3, [r7, #12]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60bb      	str	r3, [r7, #8]

	Slave_DB->a.schet++;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8a1b      	ldrh	r3, [r3, #16]
 8001906:	3301      	adds	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	821a      	strh	r2, [r3, #16]
	if(Slave_DB->a.schet>=100){Slave_DB->a.schet=100;}
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8a1b      	ldrh	r3, [r3, #16]
 8001912:	2b63      	cmp	r3, #99	; 0x63
 8001914:	d902      	bls.n	800191c <Slave_Clock_1ms+0x2c>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2264      	movs	r2, #100	; 0x64
 800191a:	821a      	strh	r2, [r3, #16]
	if(Slave_DB->a.TX_count){USART_port->a.CR1 |= 0x80;}
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	895b      	ldrh	r3, [r3, #10]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <Slave_Clock_1ms+0x40>
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60da      	str	r2, [r3, #12]

}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <Screens_init>:
background_zaliv Work_regim_zaliv_1 = {0};



void Screens_init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af04      	add	r7, sp, #16

	for(int i = 0; i < 20;i++)
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e008      	b.n	800195a <Screens_init+0x1e>
	{
		FonColor[i] = BackgroundColor;
 8001948:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <Screens_init+0x128>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4946      	ldr	r1, [pc, #280]	; (8001a68 <Screens_init+0x12c>)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 20;i++)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3301      	adds	r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b13      	cmp	r3, #19
 800195e:	ddf3      	ble.n	8001948 <Screens_init+0xc>
	}


	// Экран 0 (черный экран)
	HAL_LTDC_SetAddress(&hltdc, Page[0], 0);
 8001960:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <Screens_init+0x130>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	4619      	mov	r1, r3
 8001968:	4841      	ldr	r0, [pc, #260]	; (8001a70 <Screens_init+0x134>)
 800196a:	f007 fa47 	bl	8008dfc <HAL_LTDC_SetAddress>
	Zaliv(0x000000, Page[0], 800, 480);
 800196e:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <Screens_init+0x130>)
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001976:	f44f 7248 	mov.w	r2, #800	; 0x320
 800197a:	2000      	movs	r0, #0
 800197c:	f006 f964 	bl	8007c48 <Zaliv>

	// Экран_1
	Zaliv(BackgroundColor, Page[1], 800, 480);
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <Screens_init+0x128>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <Screens_init+0x130>)
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800198c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001990:	f006 f95a 	bl	8007c48 <Zaliv>
	Draw_Rectangle(0x000000,   0, 220, 800,   3, Page[1], 800, 480); // первая горизонталь
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <Screens_init+0x130>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800199c:	9203      	str	r2, [sp, #12]
 800199e:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019a2:	9202      	str	r2, [sp, #8]
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	2303      	movs	r3, #3
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80019ae:	22dc      	movs	r2, #220	; 0xdc
 80019b0:	2100      	movs	r1, #0
 80019b2:	2000      	movs	r0, #0
 80019b4:	f006 f974 	bl	8007ca0 <Draw_Rectangle>

	for(int i = 0; i < 3; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	e13c      	b.n	8001c38 <Screens_init+0x2fc>
	{

		uint16_t shift_X = i * 260 + 7;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	0192      	lsls	r2, r2, #6
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	3307      	adds	r3, #7
 80019ce:	80fb      	strh	r3, [r7, #6]

		if(i < 2)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	dc13      	bgt.n	80019fe <Screens_init+0xc2>
		{
			Draw_Rectangle(0x000000, 260 + shift_X,   0,   3, 220, Page[1], 800, 480);
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80019dc:	b299      	uxth	r1, r3
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <Screens_init+0x130>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019e6:	9203      	str	r2, [sp, #12]
 80019e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019ec:	9202      	str	r2, [sp, #8]
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	23dc      	movs	r3, #220	; 0xdc
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2303      	movs	r3, #3
 80019f6:	2200      	movs	r2, #0
 80019f8:	2000      	movs	r0, #0
 80019fa:	f006 f951 	bl	8007ca0 <Draw_Rectangle>
		}

		switch(i)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d03d      	beq.n	8001a80 <Screens_init+0x144>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	dc4d      	bgt.n	8001aa6 <Screens_init+0x16a>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <Screens_init+0xdc>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d013      	beq.n	8001a3e <Screens_init+0x102>
 8001a16:	e046      	b.n	8001aa6 <Screens_init+0x16a>
		{
			case 0:
				Short_Left_Colored_RU_DrawString_32("1",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	3346      	adds	r3, #70	; 0x46
 8001a1c:	b298      	uxth	r0, r3
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <Screens_init+0x128>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <Screens_init+0x138>)
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	4911      	ldr	r1, [pc, #68]	; (8001a6c <Screens_init+0x130>)
 8001a28:	6849      	ldr	r1, [r1, #4]
 8001a2a:	9102      	str	r1, [sp, #8]
 8001a2c:	9201      	str	r2, [sp, #4]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2317      	movs	r3, #23
 8001a32:	4602      	mov	r2, r0
 8001a34:	2101      	movs	r1, #1
 8001a36:	4810      	ldr	r0, [pc, #64]	; (8001a78 <Screens_init+0x13c>)
 8001a38:	f004 ffba 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			break;
 8001a3c:	e033      	b.n	8001aa6 <Screens_init+0x16a>

			case 1:
				Short_Left_Colored_RU_DrawString_32("2",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	3346      	adds	r3, #70	; 0x46
 8001a42:	b298      	uxth	r0, r3
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <Screens_init+0x128>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <Screens_init+0x138>)
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <Screens_init+0x130>)
 8001a4e:	6849      	ldr	r1, [r1, #4]
 8001a50:	9102      	str	r1, [sp, #8]
 8001a52:	9201      	str	r2, [sp, #4]
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2317      	movs	r3, #23
 8001a58:	4602      	mov	r2, r0
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4807      	ldr	r0, [pc, #28]	; (8001a7c <Screens_init+0x140>)
 8001a5e:	f004 ffa7 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			break;
 8001a62:	e020      	b.n	8001aa6 <Screens_init+0x16a>
 8001a64:	20000008 	.word	0x20000008
 8001a68:	200000a4 	.word	0x200000a4
 8001a6c:	20000984 	.word	0x20000984
 8001a70:	20000148 	.word	0x20000148
 8001a74:	200009f8 	.word	0x200009f8
 8001a78:	0800d148 	.word	0x0800d148
 8001a7c:	0800d14c 	.word	0x0800d14c

			case 2:
				Short_Left_Colored_RU_DrawString_32("3",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	3346      	adds	r3, #70	; 0x46
 8001a84:	b298      	uxth	r0, r3
 8001a86:	4b9c      	ldr	r3, [pc, #624]	; (8001cf8 <Screens_init+0x3bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a9c      	ldr	r2, [pc, #624]	; (8001cfc <Screens_init+0x3c0>)
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	499c      	ldr	r1, [pc, #624]	; (8001d00 <Screens_init+0x3c4>)
 8001a90:	6849      	ldr	r1, [r1, #4]
 8001a92:	9102      	str	r1, [sp, #8]
 8001a94:	9201      	str	r2, [sp, #4]
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2317      	movs	r3, #23
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4899      	ldr	r0, [pc, #612]	; (8001d04 <Screens_init+0x3c8>)
 8001aa0:	f004 ff86 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			break;
 8001aa4:	bf00      	nop
		}

		Short_Left_Colored_RU_DrawString_32("АНН",  			  3,   5 + shift_X,  20, BackgroundColor, BasicSymbolColor, Page[1]);
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	3305      	adds	r3, #5
 8001aaa:	b298      	uxth	r0, r3
 8001aac:	4b92      	ldr	r3, [pc, #584]	; (8001cf8 <Screens_init+0x3bc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a92      	ldr	r2, [pc, #584]	; (8001cfc <Screens_init+0x3c0>)
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	4992      	ldr	r1, [pc, #584]	; (8001d00 <Screens_init+0x3c4>)
 8001ab6:	6849      	ldr	r1, [r1, #4]
 8001ab8:	9102      	str	r1, [sp, #8]
 8001aba:	9201      	str	r2, [sp, #4]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2314      	movs	r3, #20
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	4890      	ldr	r0, [pc, #576]	; (8001d08 <Screens_init+0x3cc>)
 8001ac6:	f004 ff73 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Д.напор", 	 	  	  7,   5 + shift_X,  50, BackgroundColor, BasicSymbolColor, Page[1]);
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	3305      	adds	r3, #5
 8001ace:	b298      	uxth	r0, r3
 8001ad0:	4b89      	ldr	r3, [pc, #548]	; (8001cf8 <Screens_init+0x3bc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a89      	ldr	r2, [pc, #548]	; (8001cfc <Screens_init+0x3c0>)
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	4989      	ldr	r1, [pc, #548]	; (8001d00 <Screens_init+0x3c4>)
 8001ada:	6849      	ldr	r1, [r1, #4]
 8001adc:	9102      	str	r1, [sp, #8]
 8001ade:	9201      	str	r2, [sp, #4]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2332      	movs	r3, #50	; 0x32
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	2107      	movs	r1, #7
 8001ae8:	4888      	ldr	r0, [pc, #544]	; (8001d0c <Screens_init+0x3d0>)
 8001aea:	f004 ff61 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		  3, 200 + shift_X,  50, BackgroundColor, BasicSymbolColor, Page[1]);
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	33c8      	adds	r3, #200	; 0xc8
 8001af2:	b298      	uxth	r0, r3
 8001af4:	4b80      	ldr	r3, [pc, #512]	; (8001cf8 <Screens_init+0x3bc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a80      	ldr	r2, [pc, #512]	; (8001cfc <Screens_init+0x3c0>)
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	4980      	ldr	r1, [pc, #512]	; (8001d00 <Screens_init+0x3c4>)
 8001afe:	6849      	ldr	r1, [r1, #4]
 8001b00:	9102      	str	r1, [sp, #8]
 8001b02:	9201      	str	r2, [sp, #4]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2332      	movs	r3, #50	; 0x32
 8001b08:	4602      	mov	r2, r0
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	4880      	ldr	r0, [pc, #512]	; (8001d10 <Screens_init+0x3d4>)
 8001b0e:	f004 ff4f 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Д.масла", 	 		  7,   5 + shift_X,  80, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	3305      	adds	r3, #5
 8001b16:	b298      	uxth	r0, r3
 8001b18:	4b77      	ldr	r3, [pc, #476]	; (8001cf8 <Screens_init+0x3bc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a77      	ldr	r2, [pc, #476]	; (8001cfc <Screens_init+0x3c0>)
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	4977      	ldr	r1, [pc, #476]	; (8001d00 <Screens_init+0x3c4>)
 8001b22:	6849      	ldr	r1, [r1, #4]
 8001b24:	9102      	str	r1, [sp, #8]
 8001b26:	9201      	str	r2, [sp, #4]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2350      	movs	r3, #80	; 0x50
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	2107      	movs	r1, #7
 8001b30:	4878      	ldr	r0, [pc, #480]	; (8001d14 <Screens_init+0x3d8>)
 8001b32:	f004 ff3d 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		  3, 200 + shift_X,  80, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	33c8      	adds	r3, #200	; 0xc8
 8001b3a:	b298      	uxth	r0, r3
 8001b3c:	4b6e      	ldr	r3, [pc, #440]	; (8001cf8 <Screens_init+0x3bc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a6e      	ldr	r2, [pc, #440]	; (8001cfc <Screens_init+0x3c0>)
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	496e      	ldr	r1, [pc, #440]	; (8001d00 <Screens_init+0x3c4>)
 8001b46:	6849      	ldr	r1, [r1, #4]
 8001b48:	9102      	str	r1, [sp, #8]
 8001b4a:	9201      	str	r2, [sp, #4]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2350      	movs	r3, #80	; 0x50
 8001b50:	4602      	mov	r2, r0
 8001b52:	2103      	movs	r1, #3
 8001b54:	486e      	ldr	r0, [pc, #440]	; (8001d10 <Screens_init+0x3d4>)
 8001b56:	f004 ff2b 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Т.масла", 	 	  	  7,   5 + shift_X, 110, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	3305      	adds	r3, #5
 8001b5e:	b298      	uxth	r0, r3
 8001b60:	4b65      	ldr	r3, [pc, #404]	; (8001cf8 <Screens_init+0x3bc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <Screens_init+0x3c0>)
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	4965      	ldr	r1, [pc, #404]	; (8001d00 <Screens_init+0x3c4>)
 8001b6a:	6849      	ldr	r1, [r1, #4]
 8001b6c:	9102      	str	r1, [sp, #8]
 8001b6e:	9201      	str	r2, [sp, #4]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	236e      	movs	r3, #110	; 0x6e
 8001b74:	4602      	mov	r2, r0
 8001b76:	2107      	movs	r1, #7
 8001b78:	4867      	ldr	r0, [pc, #412]	; (8001d18 <Screens_init+0x3dc>)
 8001b7a:	f004 ff19 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("*С", 	 	  		  2, 200 + shift_X, 110, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	33c8      	adds	r3, #200	; 0xc8
 8001b82:	b298      	uxth	r0, r3
 8001b84:	4b5c      	ldr	r3, [pc, #368]	; (8001cf8 <Screens_init+0x3bc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5c      	ldr	r2, [pc, #368]	; (8001cfc <Screens_init+0x3c0>)
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	495c      	ldr	r1, [pc, #368]	; (8001d00 <Screens_init+0x3c4>)
 8001b8e:	6849      	ldr	r1, [r1, #4]
 8001b90:	9102      	str	r1, [sp, #8]
 8001b92:	9201      	str	r2, [sp, #4]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	236e      	movs	r3, #110	; 0x6e
 8001b98:	4602      	mov	r2, r0
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	485f      	ldr	r0, [pc, #380]	; (8001d1c <Screens_init+0x3e0>)
 8001b9e:	f004 ff07 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МотЧасы", 	 	  	  7,   5 + shift_X, 200, BackgroundColor, BasicSymbolColor, Page[1]);
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	3305      	adds	r3, #5
 8001ba6:	b298      	uxth	r0, r3
 8001ba8:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <Screens_init+0x3bc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a53      	ldr	r2, [pc, #332]	; (8001cfc <Screens_init+0x3c0>)
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	4953      	ldr	r1, [pc, #332]	; (8001d00 <Screens_init+0x3c4>)
 8001bb2:	6849      	ldr	r1, [r1, #4]
 8001bb4:	9102      	str	r1, [sp, #8]
 8001bb6:	9201      	str	r2, [sp, #4]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	23c8      	movs	r3, #200	; 0xc8
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	2107      	movs	r1, #7
 8001bc0:	4857      	ldr	r0, [pc, #348]	; (8001d20 <Screens_init+0x3e4>)
 8001bc2:	f004 fef5 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

		Short_Left_Colored_RU_DrawString_32("   Вкл   ", 		  9,  95 + shift_X,  20,      GreenColor, BasicSymbolColor, Page[1]);
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	335f      	adds	r3, #95	; 0x5f
 8001bca:	b298      	uxth	r0, r3
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <Screens_init+0x3e8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a4a      	ldr	r2, [pc, #296]	; (8001cfc <Screens_init+0x3c0>)
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	494a      	ldr	r1, [pc, #296]	; (8001d00 <Screens_init+0x3c4>)
 8001bd6:	6849      	ldr	r1, [r1, #4]
 8001bd8:	9102      	str	r1, [sp, #8]
 8001bda:	9201      	str	r2, [sp, #4]
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2314      	movs	r3, #20
 8001be0:	4602      	mov	r2, r0
 8001be2:	2109      	movs	r1, #9
 8001be4:	4850      	ldr	r0, [pc, #320]	; (8001d28 <Screens_init+0x3ec>)
 8001be6:	f004 fee3 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("  РАЗГРУЗКА   ", 	 14,   5 + shift_X, 140, 		RedColor, BasicSymbolColor, Page[1]);
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	3305      	adds	r3, #5
 8001bee:	b298      	uxth	r0, r3
 8001bf0:	4b4e      	ldr	r3, [pc, #312]	; (8001d2c <Screens_init+0x3f0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a41      	ldr	r2, [pc, #260]	; (8001cfc <Screens_init+0x3c0>)
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	4941      	ldr	r1, [pc, #260]	; (8001d00 <Screens_init+0x3c4>)
 8001bfa:	6849      	ldr	r1, [r1, #4]
 8001bfc:	9102      	str	r1, [sp, #8]
 8001bfe:	9201      	str	r2, [sp, #4]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	238c      	movs	r3, #140	; 0x8c
 8001c04:	4602      	mov	r2, r0
 8001c06:	210e      	movs	r1, #14
 8001c08:	4849      	ldr	r0, [pc, #292]	; (8001d30 <Screens_init+0x3f4>)
 8001c0a:	f004 fed1 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("тепл. защита  ", 	 14,   5 + shift_X, 170, 		RedColor, BasicSymbolColor, Page[1]);
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	3305      	adds	r3, #5
 8001c12:	b298      	uxth	r0, r3
 8001c14:	4b45      	ldr	r3, [pc, #276]	; (8001d2c <Screens_init+0x3f0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a38      	ldr	r2, [pc, #224]	; (8001cfc <Screens_init+0x3c0>)
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	4938      	ldr	r1, [pc, #224]	; (8001d00 <Screens_init+0x3c4>)
 8001c1e:	6849      	ldr	r1, [r1, #4]
 8001c20:	9102      	str	r1, [sp, #8]
 8001c22:	9201      	str	r2, [sp, #4]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	23aa      	movs	r3, #170	; 0xaa
 8001c28:	4602      	mov	r2, r0
 8001c2a:	210e      	movs	r1, #14
 8001c2c:	4841      	ldr	r0, [pc, #260]	; (8001d34 <Screens_init+0x3f8>)
 8001c2e:	f004 febf 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	for(int i = 0; i < 3; i++)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3301      	adds	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	f77f aebf 	ble.w	80019be <Screens_init+0x82>
		

	}

	Draw_Rectangle(0x000000, 665, 220, 3, 360, Page[1], 800, 480);
 8001c40:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <Screens_init+0x3c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c48:	9203      	str	r2, [sp, #12]
 8001c4a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001c4e:	9202      	str	r2, [sp, #8]
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2303      	movs	r3, #3
 8001c5a:	22dc      	movs	r2, #220	; 0xdc
 8001c5c:	f240 2199 	movw	r1, #665	; 0x299
 8001c60:	2000      	movs	r0, #0
 8001c62:	f006 f81d 	bl	8007ca0 <Draw_Rectangle>
	Short_Left_Colored_RU_DrawString_32("УСТАВКА", 	 	  	 			 7, 670, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <Screens_init+0x3bc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <Screens_init+0x3c0>)
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	4924      	ldr	r1, [pc, #144]	; (8001d00 <Screens_init+0x3c4>)
 8001c70:	6849      	ldr	r1, [r1, #4]
 8001c72:	9102      	str	r1, [sp, #8]
 8001c74:	9201      	str	r2, [sp, #4]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	23f0      	movs	r3, #240	; 0xf0
 8001c7a:	f240 229e 	movw	r2, #670	; 0x29e
 8001c7e:	2107      	movs	r1, #7
 8001c80:	482d      	ldr	r0, [pc, #180]	; (8001d38 <Screens_init+0x3fc>)
 8001c82:	f004 fe95 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  	     			 3, 740, 267, BackgroundColor, BasicSymbolColor, Page[1]);
 8001c86:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <Screens_init+0x3bc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <Screens_init+0x3c0>)
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	491c      	ldr	r1, [pc, #112]	; (8001d00 <Screens_init+0x3c4>)
 8001c90:	6849      	ldr	r1, [r1, #4]
 8001c92:	9102      	str	r1, [sp, #8]
 8001c94:	9201      	str	r2, [sp, #4]
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f240 130b 	movw	r3, #267	; 0x10b
 8001c9c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001ca0:	2103      	movs	r1, #3
 8001ca2:	481b      	ldr	r0, [pc, #108]	; (8001d10 <Screens_init+0x3d4>)
 8001ca4:	f004 fe84 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Ур.Бак ", 	 	  	 			 7, 670, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <Screens_init+0x3bc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <Screens_init+0x3c0>)
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4913      	ldr	r1, [pc, #76]	; (8001d00 <Screens_init+0x3c4>)
 8001cb2:	6849      	ldr	r1, [r1, #4]
 8001cb4:	9102      	str	r1, [sp, #8]
 8001cb6:	9201      	str	r2, [sp, #4]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001cbe:	f240 229e 	movw	r2, #670	; 0x29e
 8001cc2:	2107      	movs	r1, #7
 8001cc4:	481d      	ldr	r0, [pc, #116]	; (8001d3c <Screens_init+0x400>)
 8001cc6:	f004 fe73 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("мм", 	 	  	     			 2, 740, 327, BackgroundColor, BasicSymbolColor, Page[1]);
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <Screens_init+0x3bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <Screens_init+0x3c0>)
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	490b      	ldr	r1, [pc, #44]	; (8001d00 <Screens_init+0x3c4>)
 8001cd4:	6849      	ldr	r1, [r1, #4]
 8001cd6:	9102      	str	r1, [sp, #8]
 8001cd8:	9201      	str	r2, [sp, #4]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f240 1347 	movw	r3, #327	; 0x147
 8001ce0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4816      	ldr	r0, [pc, #88]	; (8001d40 <Screens_init+0x404>)
 8001ce8:	f004 fe62 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Тем.Бак", 	 	  	 			 7, 670, 360, BackgroundColor, BasicSymbolColor, Page[1]);
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <Screens_init+0x3bc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a02      	ldr	r2, [pc, #8]	; (8001cfc <Screens_init+0x3c0>)
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	e026      	b.n	8001d44 <Screens_init+0x408>
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	200009f8 	.word	0x200009f8
 8001d00:	20000984 	.word	0x20000984
 8001d04:	0800d150 	.word	0x0800d150
 8001d08:	0800d154 	.word	0x0800d154
 8001d0c:	0800d15c 	.word	0x0800d15c
 8001d10:	0800d16c 	.word	0x0800d16c
 8001d14:	0800d174 	.word	0x0800d174
 8001d18:	0800d184 	.word	0x0800d184
 8001d1c:	0800d194 	.word	0x0800d194
 8001d20:	0800d198 	.word	0x0800d198
 8001d24:	20000004 	.word	0x20000004
 8001d28:	0800d1a8 	.word	0x0800d1a8
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	0800d1b8 	.word	0x0800d1b8
 8001d34:	0800d1d0 	.word	0x0800d1d0
 8001d38:	0800d1ec 	.word	0x0800d1ec
 8001d3c:	0800d1fc 	.word	0x0800d1fc
 8001d40:	0800d20c 	.word	0x0800d20c
 8001d44:	499e      	ldr	r1, [pc, #632]	; (8001fc0 <Screens_init+0x684>)
 8001d46:	6849      	ldr	r1, [r1, #4]
 8001d48:	9102      	str	r1, [sp, #8]
 8001d4a:	9201      	str	r2, [sp, #4]
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001d52:	f240 229e 	movw	r2, #670	; 0x29e
 8001d56:	2107      	movs	r1, #7
 8001d58:	489a      	ldr	r0, [pc, #616]	; (8001fc4 <Screens_init+0x688>)
 8001d5a:	f004 fe29 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("*С", 	 	  	     			 2, 740, 387, BackgroundColor, BasicSymbolColor, Page[1]);
 8001d5e:	4b9a      	ldr	r3, [pc, #616]	; (8001fc8 <Screens_init+0x68c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a9a      	ldr	r2, [pc, #616]	; (8001fcc <Screens_init+0x690>)
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	4996      	ldr	r1, [pc, #600]	; (8001fc0 <Screens_init+0x684>)
 8001d68:	6849      	ldr	r1, [r1, #4]
 8001d6a:	9102      	str	r1, [sp, #8]
 8001d6c:	9201      	str	r2, [sp, #4]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f240 1383 	movw	r3, #387	; 0x183
 8001d74:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4895      	ldr	r0, [pc, #596]	; (8001fd0 <Screens_init+0x694>)
 8001d7c:	f004 fe18 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("УЗЕЛ ФИЛЬТРОВ", 	 			13,  13, 240,       GrayColor, BasicSymbolColor, Page[1]);
 8001d80:	4b94      	ldr	r3, [pc, #592]	; (8001fd4 <Screens_init+0x698>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a91      	ldr	r2, [pc, #580]	; (8001fcc <Screens_init+0x690>)
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	498d      	ldr	r1, [pc, #564]	; (8001fc0 <Screens_init+0x684>)
 8001d8a:	6849      	ldr	r1, [r1, #4]
 8001d8c:	9102      	str	r1, [sp, #8]
 8001d8e:	9201      	str	r2, [sp, #4]
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	23f0      	movs	r3, #240	; 0xf0
 8001d94:	220d      	movs	r2, #13
 8001d96:	210d      	movs	r1, #13
 8001d98:	488f      	ldr	r0, [pc, #572]	; (8001fd8 <Screens_init+0x69c>)
 8001d9a:	f004 fe09 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.в магистр:",		 			12, 300, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001d9e:	4b8a      	ldr	r3, [pc, #552]	; (8001fc8 <Screens_init+0x68c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a8a      	ldr	r2, [pc, #552]	; (8001fcc <Screens_init+0x690>)
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	4986      	ldr	r1, [pc, #536]	; (8001fc0 <Screens_init+0x684>)
 8001da8:	6849      	ldr	r1, [r1, #4]
 8001daa:	9102      	str	r1, [sp, #8]
 8001dac:	9201      	str	r2, [sp, #4]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	23f0      	movs	r3, #240	; 0xf0
 8001db2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001db6:	210c      	movs	r1, #12
 8001db8:	4888      	ldr	r0, [pc, #544]	; (8001fdc <Screens_init+0x6a0>)
 8001dba:	f004 fdf9 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 3, 580, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001dbe:	4b82      	ldr	r3, [pc, #520]	; (8001fc8 <Screens_init+0x68c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a82      	ldr	r2, [pc, #520]	; (8001fcc <Screens_init+0x690>)
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	497e      	ldr	r1, [pc, #504]	; (8001fc0 <Screens_init+0x684>)
 8001dc8:	6849      	ldr	r1, [r1, #4]
 8001dca:	9102      	str	r1, [sp, #8]
 8001dcc:	9201      	str	r2, [sp, #4]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	23f0      	movs	r3, #240	; 0xf0
 8001dd2:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001dd6:	2103      	movs	r1, #3
 8001dd8:	4881      	ldr	r0, [pc, #516]	; (8001fe0 <Screens_init+0x6a4>)
 8001dda:	f004 fde9 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.перед сл. напорн фильтром:", 28,  13, 270, BackgroundColor, BasicSymbolColor, Page[1]);
 8001dde:	4b7a      	ldr	r3, [pc, #488]	; (8001fc8 <Screens_init+0x68c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a7a      	ldr	r2, [pc, #488]	; (8001fcc <Screens_init+0x690>)
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	4976      	ldr	r1, [pc, #472]	; (8001fc0 <Screens_init+0x684>)
 8001de8:	6849      	ldr	r1, [r1, #4]
 8001dea:	9102      	str	r1, [sp, #8]
 8001dec:	9201      	str	r2, [sp, #4]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001df4:	220d      	movs	r2, #13
 8001df6:	211c      	movs	r1, #28
 8001df8:	487a      	ldr	r0, [pc, #488]	; (8001fe4 <Screens_init+0x6a8>)
 8001dfa:	f004 fdd9 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 3, 580, 270, BackgroundColor, BasicSymbolColor, Page[1]);
 8001dfe:	4b72      	ldr	r3, [pc, #456]	; (8001fc8 <Screens_init+0x68c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a72      	ldr	r2, [pc, #456]	; (8001fcc <Screens_init+0x690>)
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	496e      	ldr	r1, [pc, #440]	; (8001fc0 <Screens_init+0x684>)
 8001e08:	6849      	ldr	r1, [r1, #4]
 8001e0a:	9102      	str	r1, [sp, #8]
 8001e0c:	9201      	str	r2, [sp, #4]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001e14:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001e18:	2103      	movs	r1, #3
 8001e1a:	4871      	ldr	r0, [pc, #452]	; (8001fe0 <Screens_init+0x6a4>)
 8001e1c:	f004 fdc8 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.перед сл.ф.:",			 	14,  13, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e20:	4b69      	ldr	r3, [pc, #420]	; (8001fc8 <Screens_init+0x68c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a69      	ldr	r2, [pc, #420]	; (8001fcc <Screens_init+0x690>)
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	4965      	ldr	r1, [pc, #404]	; (8001fc0 <Screens_init+0x684>)
 8001e2a:	6849      	ldr	r1, [r1, #4]
 8001e2c:	9102      	str	r1, [sp, #8]
 8001e2e:	9201      	str	r2, [sp, #4]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e36:	220d      	movs	r2, #13
 8001e38:	210e      	movs	r1, #14
 8001e3a:	486b      	ldr	r0, [pc, #428]	; (8001fe8 <Screens_init+0x6ac>)
 8001e3c:	f004 fdb8 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 							 3, 360, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e40:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <Screens_init+0x68c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a61      	ldr	r2, [pc, #388]	; (8001fcc <Screens_init+0x690>)
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	495d      	ldr	r1, [pc, #372]	; (8001fc0 <Screens_init+0x684>)
 8001e4a:	6849      	ldr	r1, [r1, #4]
 8001e4c:	9102      	str	r1, [sp, #8]
 8001e4e:	9201      	str	r2, [sp, #4]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e56:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	4860      	ldr	r0, [pc, #384]	; (8001fe0 <Screens_init+0x6a4>)
 8001e5e:	f004 fda7 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("за", 							 2, 450, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e62:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <Screens_init+0x68c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a59      	ldr	r2, [pc, #356]	; (8001fcc <Screens_init+0x690>)
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	4955      	ldr	r1, [pc, #340]	; (8001fc0 <Screens_init+0x684>)
 8001e6c:	6849      	ldr	r1, [r1, #4]
 8001e6e:	9102      	str	r1, [sp, #8]
 8001e70:	9201      	str	r2, [sp, #4]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e78:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	485b      	ldr	r0, [pc, #364]	; (8001fec <Screens_init+0x6b0>)
 8001e80:	f004 fd96 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 							 3, 580, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <Screens_init+0x68c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a50      	ldr	r2, [pc, #320]	; (8001fcc <Screens_init+0x690>)
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	494c      	ldr	r1, [pc, #304]	; (8001fc0 <Screens_init+0x684>)
 8001e8e:	6849      	ldr	r1, [r1, #4]
 8001e90:	9102      	str	r1, [sp, #8]
 8001e92:	9201      	str	r2, [sp, #4]
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e9a:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001e9e:	2103      	movs	r1, #3
 8001ea0:	484f      	ldr	r0, [pc, #316]	; (8001fe0 <Screens_init+0x6a4>)
 8001ea2:	f004 fd85 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Расход. сл.ф.:", 				14,  13, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 8001ea6:	4b48      	ldr	r3, [pc, #288]	; (8001fc8 <Screens_init+0x68c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <Screens_init+0x690>)
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	4944      	ldr	r1, [pc, #272]	; (8001fc0 <Screens_init+0x684>)
 8001eb0:	6849      	ldr	r1, [r1, #4]
 8001eb2:	9102      	str	r1, [sp, #8]
 8001eb4:	9201      	str	r2, [sp, #4]
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001ebc:	220d      	movs	r2, #13
 8001ebe:	210e      	movs	r1, #14
 8001ec0:	484b      	ldr	r0, [pc, #300]	; (8001ff0 <Screens_init+0x6b4>)
 8001ec2:	f004 fd75 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 3, 360, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 8001ec6:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <Screens_init+0x68c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a40      	ldr	r2, [pc, #256]	; (8001fcc <Screens_init+0x690>)
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	493c      	ldr	r1, [pc, #240]	; (8001fc0 <Screens_init+0x684>)
 8001ed0:	6849      	ldr	r1, [r1, #4]
 8001ed2:	9102      	str	r1, [sp, #8]
 8001ed4:	9201      	str	r2, [sp, #4]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001edc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001ee0:	2103      	movs	r1, #3
 8001ee2:	4844      	ldr	r0, [pc, #272]	; (8001ff4 <Screens_init+0x6b8>)
 8001ee4:	f004 fd64 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("эмул", 					 	 4, 420, 330,       GrayColor, BasicSymbolColor, Page[1]);
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <Screens_init+0x698>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a37      	ldr	r2, [pc, #220]	; (8001fcc <Screens_init+0x690>)
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	4933      	ldr	r1, [pc, #204]	; (8001fc0 <Screens_init+0x684>)
 8001ef2:	6849      	ldr	r1, [r1, #4]
 8001ef4:	9102      	str	r1, [sp, #8]
 8001ef6:	9201      	str	r2, [sp, #4]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001efe:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001f02:	2104      	movs	r1, #4
 8001f04:	483c      	ldr	r0, [pc, #240]	; (8001ff8 <Screens_init+0x6bc>)
 8001f06:	f004 fd53 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 3, 580, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <Screens_init+0x68c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <Screens_init+0x690>)
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	492b      	ldr	r1, [pc, #172]	; (8001fc0 <Screens_init+0x684>)
 8001f14:	6849      	ldr	r1, [r1, #4]
 8001f16:	9102      	str	r1, [sp, #8]
 8001f18:	9201      	str	r2, [sp, #4]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001f20:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001f24:	2103      	movs	r1, #3
 8001f26:	4833      	ldr	r0, [pc, #204]	; (8001ff4 <Screens_init+0x6b8>)
 8001f28:	f004 fd42 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Прокач  объем:", 				14,  13, 360, BackgroundColor, BasicSymbolColor, Page[1]);
 8001f2c:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <Screens_init+0x68c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a26      	ldr	r2, [pc, #152]	; (8001fcc <Screens_init+0x690>)
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	4922      	ldr	r1, [pc, #136]	; (8001fc0 <Screens_init+0x684>)
 8001f36:	6849      	ldr	r1, [r1, #4]
 8001f38:	9102      	str	r1, [sp, #8]
 8001f3a:	9201      	str	r2, [sp, #4]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001f42:	220d      	movs	r2, #13
 8001f44:	210e      	movs	r1, #14
 8001f46:	482d      	ldr	r0, [pc, #180]	; (8001ffc <Screens_init+0x6c0>)
 8001f48:	f004 fd32 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("(м3)", 					 	 4, 420, 360,       GrayColor, BasicSymbolColor, Page[1]);
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <Screens_init+0x698>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <Screens_init+0x690>)
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	491a      	ldr	r1, [pc, #104]	; (8001fc0 <Screens_init+0x684>)
 8001f56:	6849      	ldr	r1, [r1, #4]
 8001f58:	9102      	str	r1, [sp, #8]
 8001f5a:	9201      	str	r2, [sp, #4]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001f62:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001f66:	2104      	movs	r1, #4
 8001f68:	4825      	ldr	r0, [pc, #148]	; (8002000 <Screens_init+0x6c4>)
 8001f6a:	f004 fd21 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	

	// Экран_2 (устройство эмульсии)
	Zaliv(BackgroundColor, Page[2], 800, 480);
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <Screens_init+0x68c>)
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <Screens_init+0x684>)
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001f7a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f7e:	f005 fe63 	bl	8007c48 <Zaliv>
	Short_Left_Colored_RU_DrawString_32("Устройство приготовления эмульсии", 	33,  10,  30,       GrayColor, BasicSymbolColor, Page[2]);
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <Screens_init+0x698>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <Screens_init+0x690>)
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	490d      	ldr	r1, [pc, #52]	; (8001fc0 <Screens_init+0x684>)
 8001f8c:	6889      	ldr	r1, [r1, #8]
 8001f8e:	9102      	str	r1, [sp, #8]
 8001f90:	9201      	str	r2, [sp, #4]
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	231e      	movs	r3, #30
 8001f96:	220a      	movs	r2, #10
 8001f98:	2121      	movs	r1, #33	; 0x21
 8001f9a:	481a      	ldr	r0, [pc, #104]	; (8002004 <Screens_init+0x6c8>)
 8001f9c:	f004 fd08 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

	Short_Left_Colored_RU_DrawString_32("Расход концентрата:", 	 				19,  10, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <Screens_init+0x68c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <Screens_init+0x690>)
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	4905      	ldr	r1, [pc, #20]	; (8001fc0 <Screens_init+0x684>)
 8001faa:	6889      	ldr	r1, [r1, #8]
 8001fac:	9102      	str	r1, [sp, #8]
 8001fae:	9201      	str	r2, [sp, #4]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	23b4      	movs	r3, #180	; 0xb4
 8001fb4:	220a      	movs	r2, #10
 8001fb6:	2113      	movs	r1, #19
 8001fb8:	4813      	ldr	r0, [pc, #76]	; (8002008 <Screens_init+0x6cc>)
 8001fba:	f004 fcf9 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8001fbe:	e025      	b.n	800200c <Screens_init+0x6d0>
 8001fc0:	20000984 	.word	0x20000984
 8001fc4:	0800d214 	.word	0x0800d214
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	200009f8 	.word	0x200009f8
 8001fd0:	0800d194 	.word	0x0800d194
 8001fd4:	2000000c 	.word	0x2000000c
 8001fd8:	0800d224 	.word	0x0800d224
 8001fdc:	0800d240 	.word	0x0800d240
 8001fe0:	0800d16c 	.word	0x0800d16c
 8001fe4:	0800d258 	.word	0x0800d258
 8001fe8:	0800d28c 	.word	0x0800d28c
 8001fec:	0800d2a4 	.word	0x0800d2a4
 8001ff0:	0800d2ac 	.word	0x0800d2ac
 8001ff4:	0800d2c4 	.word	0x0800d2c4
 8001ff8:	0800d2cc 	.word	0x0800d2cc
 8001ffc:	0800d2d8 	.word	0x0800d2d8
 8002000:	0800d2f4 	.word	0x0800d2f4
 8002004:	0800d2fc 	.word	0x0800d2fc
 8002008:	0800d340 	.word	0x0800d340
	Short_Left_Colored_RU_DrawString_32("Рефрактометр поточный", 	 			21,  10, 210, BackgroundColor, BasicSymbolColor, Page[2]);
 800200c:	4ba0      	ldr	r3, [pc, #640]	; (8002290 <Screens_init+0x954>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4aa0      	ldr	r2, [pc, #640]	; (8002294 <Screens_init+0x958>)
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	49a0      	ldr	r1, [pc, #640]	; (8002298 <Screens_init+0x95c>)
 8002016:	6889      	ldr	r1, [r1, #8]
 8002018:	9102      	str	r1, [sp, #8]
 800201a:	9201      	str	r2, [sp, #4]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	23d2      	movs	r3, #210	; 0xd2
 8002020:	220a      	movs	r2, #10
 8002022:	2115      	movs	r1, #21
 8002024:	489d      	ldr	r0, [pc, #628]	; (800229c <Screens_init+0x960>)
 8002026:	f004 fcc3 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Датчик проводимости", 	 				19,  10, 240, BackgroundColor, BasicSymbolColor, Page[2]);
 800202a:	4b99      	ldr	r3, [pc, #612]	; (8002290 <Screens_init+0x954>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a99      	ldr	r2, [pc, #612]	; (8002294 <Screens_init+0x958>)
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	4999      	ldr	r1, [pc, #612]	; (8002298 <Screens_init+0x95c>)
 8002034:	6889      	ldr	r1, [r1, #8]
 8002036:	9102      	str	r1, [sp, #8]
 8002038:	9201      	str	r2, [sp, #4]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	23f0      	movs	r3, #240	; 0xf0
 800203e:	220a      	movs	r2, #10
 8002040:	2113      	movs	r1, #19
 8002042:	4897      	ldr	r0, [pc, #604]	; (80022a0 <Screens_init+0x964>)
 8002044:	f004 fcb4 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Датчик рН          ", 	 				19,  10, 270, BackgroundColor, BasicSymbolColor, Page[2]);
 8002048:	4b91      	ldr	r3, [pc, #580]	; (8002290 <Screens_init+0x954>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a91      	ldr	r2, [pc, #580]	; (8002294 <Screens_init+0x958>)
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4991      	ldr	r1, [pc, #580]	; (8002298 <Screens_init+0x95c>)
 8002052:	6889      	ldr	r1, [r1, #8]
 8002054:	9102      	str	r1, [sp, #8]
 8002056:	9201      	str	r2, [sp, #4]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800205e:	220a      	movs	r2, #10
 8002060:	2113      	movs	r1, #19
 8002062:	4890      	ldr	r0, [pc, #576]	; (80022a4 <Screens_init+0x968>)
 8002064:	f004 fca4 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Давление перед фильтрами воды", 		29,  10, 300, BackgroundColor, BasicSymbolColor, Page[2]);
 8002068:	4b89      	ldr	r3, [pc, #548]	; (8002290 <Screens_init+0x954>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a89      	ldr	r2, [pc, #548]	; (8002294 <Screens_init+0x958>)
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	4989      	ldr	r1, [pc, #548]	; (8002298 <Screens_init+0x95c>)
 8002072:	6889      	ldr	r1, [r1, #8]
 8002074:	9102      	str	r1, [sp, #8]
 8002076:	9201      	str	r2, [sp, #4]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800207e:	220a      	movs	r2, #10
 8002080:	211d      	movs	r1, #29
 8002082:	4889      	ldr	r0, [pc, #548]	; (80022a8 <Screens_init+0x96c>)
 8002084:	f004 fc94 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Давление после фильтров  воды", 		29,  10, 330, BackgroundColor, BasicSymbolColor, Page[2]);
 8002088:	4b81      	ldr	r3, [pc, #516]	; (8002290 <Screens_init+0x954>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a81      	ldr	r2, [pc, #516]	; (8002294 <Screens_init+0x958>)
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	4981      	ldr	r1, [pc, #516]	; (8002298 <Screens_init+0x95c>)
 8002092:	6889      	ldr	r1, [r1, #8]
 8002094:	9102      	str	r1, [sp, #8]
 8002096:	9201      	str	r2, [sp, #4]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800209e:	220a      	movs	r2, #10
 80020a0:	211d      	movs	r1, #29
 80020a2:	4882      	ldr	r0, [pc, #520]	; (80022ac <Screens_init+0x970>)
 80020a4:	f004 fc84 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Расходомер воды", 						15,  10, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 80020a8:	4b79      	ldr	r3, [pc, #484]	; (8002290 <Screens_init+0x954>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a79      	ldr	r2, [pc, #484]	; (8002294 <Screens_init+0x958>)
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	4979      	ldr	r1, [pc, #484]	; (8002298 <Screens_init+0x95c>)
 80020b2:	6889      	ldr	r1, [r1, #8]
 80020b4:	9102      	str	r1, [sp, #8]
 80020b6:	9201      	str	r2, [sp, #4]
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80020be:	220a      	movs	r2, #10
 80020c0:	210f      	movs	r1, #15
 80020c2:	487b      	ldr	r0, [pc, #492]	; (80022b0 <Screens_init+0x974>)
 80020c4:	f004 fc74 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 		 3, 520, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 80020c8:	4b71      	ldr	r3, [pc, #452]	; (8002290 <Screens_init+0x954>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a71      	ldr	r2, [pc, #452]	; (8002294 <Screens_init+0x958>)
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	4971      	ldr	r1, [pc, #452]	; (8002298 <Screens_init+0x95c>)
 80020d2:	6889      	ldr	r1, [r1, #8]
 80020d4:	9102      	str	r1, [sp, #8]
 80020d6:	9201      	str	r2, [sp, #4]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	23b4      	movs	r3, #180	; 0xb4
 80020dc:	f44f 7202 	mov.w	r2, #520	; 0x208
 80020e0:	2103      	movs	r1, #3
 80020e2:	4874      	ldr	r0, [pc, #464]	; (80022b4 <Screens_init+0x978>)
 80020e4:	f004 fc64 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("м3", 						 	 		 2, 720, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 80020e8:	4b69      	ldr	r3, [pc, #420]	; (8002290 <Screens_init+0x954>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a69      	ldr	r2, [pc, #420]	; (8002294 <Screens_init+0x958>)
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	4969      	ldr	r1, [pc, #420]	; (8002298 <Screens_init+0x95c>)
 80020f2:	6889      	ldr	r1, [r1, #8]
 80020f4:	9102      	str	r1, [sp, #8]
 80020f6:	9201      	str	r2, [sp, #4]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	23b4      	movs	r3, #180	; 0xb4
 80020fc:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002100:	2102      	movs	r1, #2
 8002102:	486d      	ldr	r0, [pc, #436]	; (80022b8 <Screens_init+0x97c>)
 8002104:	f004 fc54 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 		 3, 520, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 8002108:	4b61      	ldr	r3, [pc, #388]	; (8002290 <Screens_init+0x954>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a61      	ldr	r2, [pc, #388]	; (8002294 <Screens_init+0x958>)
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	4961      	ldr	r1, [pc, #388]	; (8002298 <Screens_init+0x95c>)
 8002112:	6889      	ldr	r1, [r1, #8]
 8002114:	9102      	str	r1, [sp, #8]
 8002116:	9201      	str	r2, [sp, #4]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800211e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002122:	2103      	movs	r1, #3
 8002124:	4863      	ldr	r0, [pc, #396]	; (80022b4 <Screens_init+0x978>)
 8002126:	f004 fc43 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("м3", 						 	 		 2, 720, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <Screens_init+0x954>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a59      	ldr	r2, [pc, #356]	; (8002294 <Screens_init+0x958>)
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	4959      	ldr	r1, [pc, #356]	; (8002298 <Screens_init+0x95c>)
 8002134:	6889      	ldr	r1, [r1, #8]
 8002136:	9102      	str	r1, [sp, #8]
 8002138:	9201      	str	r2, [sp, #4]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002140:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002144:	2102      	movs	r1, #2
 8002146:	485c      	ldr	r0, [pc, #368]	; (80022b8 <Screens_init+0x97c>)
 8002148:	f004 fc32 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 		 3, 720, 300, BackgroundColor, BasicSymbolColor, Page[2]);
 800214c:	4b50      	ldr	r3, [pc, #320]	; (8002290 <Screens_init+0x954>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a50      	ldr	r2, [pc, #320]	; (8002294 <Screens_init+0x958>)
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	4950      	ldr	r1, [pc, #320]	; (8002298 <Screens_init+0x95c>)
 8002156:	6889      	ldr	r1, [r1, #8]
 8002158:	9102      	str	r1, [sp, #8]
 800215a:	9201      	str	r2, [sp, #4]
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002162:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002166:	2103      	movs	r1, #3
 8002168:	4854      	ldr	r0, [pc, #336]	; (80022bc <Screens_init+0x980>)
 800216a:	f004 fc21 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 		 3, 720, 330, BackgroundColor, BasicSymbolColor, Page[2]);
 800216e:	4b48      	ldr	r3, [pc, #288]	; (8002290 <Screens_init+0x954>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a48      	ldr	r2, [pc, #288]	; (8002294 <Screens_init+0x958>)
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	4948      	ldr	r1, [pc, #288]	; (8002298 <Screens_init+0x95c>)
 8002178:	6889      	ldr	r1, [r1, #8]
 800217a:	9102      	str	r1, [sp, #8]
 800217c:	9201      	str	r2, [sp, #4]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8002184:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002188:	2103      	movs	r1, #3
 800218a:	484c      	ldr	r0, [pc, #304]	; (80022bc <Screens_init+0x980>)
 800218c:	f004 fc10 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560,  90, BackgroundColor, BasicSymbolColor, Page[2]);
 8002190:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <Screens_init+0x954>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a3f      	ldr	r2, [pc, #252]	; (8002294 <Screens_init+0x958>)
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	493f      	ldr	r1, [pc, #252]	; (8002298 <Screens_init+0x95c>)
 800219a:	6889      	ldr	r1, [r1, #8]
 800219c:	9102      	str	r1, [sp, #8]
 800219e:	9201      	str	r2, [sp, #4]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	235a      	movs	r3, #90	; 0x5a
 80021a4:	f44f 720c 	mov.w	r2, #560	; 0x230
 80021a8:	2106      	movs	r1, #6
 80021aa:	4845      	ldr	r0, [pc, #276]	; (80022c0 <Screens_init+0x984>)
 80021ac:	f004 fc00 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560, 120, BackgroundColor, BasicSymbolColor, Page[2]);
 80021b0:	4b37      	ldr	r3, [pc, #220]	; (8002290 <Screens_init+0x954>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a37      	ldr	r2, [pc, #220]	; (8002294 <Screens_init+0x958>)
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	4937      	ldr	r1, [pc, #220]	; (8002298 <Screens_init+0x95c>)
 80021ba:	6889      	ldr	r1, [r1, #8]
 80021bc:	9102      	str	r1, [sp, #8]
 80021be:	9201      	str	r2, [sp, #4]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2378      	movs	r3, #120	; 0x78
 80021c4:	f44f 720c 	mov.w	r2, #560	; 0x230
 80021c8:	2106      	movs	r1, #6
 80021ca:	483d      	ldr	r0, [pc, #244]	; (80022c0 <Screens_init+0x984>)
 80021cc:	f004 fbf0 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560, 150, BackgroundColor, BasicSymbolColor, Page[2]);
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <Screens_init+0x954>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <Screens_init+0x958>)
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	492f      	ldr	r1, [pc, #188]	; (8002298 <Screens_init+0x95c>)
 80021da:	6889      	ldr	r1, [r1, #8]
 80021dc:	9102      	str	r1, [sp, #8]
 80021de:	9201      	str	r2, [sp, #4]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2396      	movs	r3, #150	; 0x96
 80021e4:	f44f 720c 	mov.w	r2, #560	; 0x230
 80021e8:	2106      	movs	r1, #6
 80021ea:	4835      	ldr	r0, [pc, #212]	; (80022c0 <Screens_init+0x984>)
 80021ec:	f004 fbe0 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

	// Экран 3
	Zaliv(BackgroundColor, Page[3], 800, 480);
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <Screens_init+0x954>)
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	4b28      	ldr	r3, [pc, #160]	; (8002298 <Screens_init+0x95c>)
 80021f6:	68d9      	ldr	r1, [r3, #12]
 80021f8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80021fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002200:	f005 fd22 	bl	8007c48 <Zaliv>
	Short_Centred_RU_DrawString_32("ОКНО ДАННЫЕ", 11, 400, 15, BackgroundColor, BasicSymbolColor, Page[3]);
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <Screens_init+0x954>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a22      	ldr	r2, [pc, #136]	; (8002294 <Screens_init+0x958>)
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	4922      	ldr	r1, [pc, #136]	; (8002298 <Screens_init+0x95c>)
 800220e:	68c9      	ldr	r1, [r1, #12]
 8002210:	9102      	str	r1, [sp, #8]
 8002212:	9201      	str	r2, [sp, #4]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	230f      	movs	r3, #15
 8002218:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800221c:	210b      	movs	r1, #11
 800221e:	4829      	ldr	r0, [pc, #164]	; (80022c4 <Screens_init+0x988>)
 8002220:	f004 fce4 	bl	8006bec <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,     0, 30, 800,   3, Page[3], 800, 480);
 8002224:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <Screens_init+0x95c>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800222c:	9203      	str	r2, [sp, #12]
 800222e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002232:	9202      	str	r2, [sp, #8]
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	2303      	movs	r3, #3
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800223e:	221e      	movs	r2, #30
 8002240:	2100      	movs	r1, #0
 8002242:	2000      	movs	r0, #0
 8002244:	f005 fd2c 	bl	8007ca0 <Draw_Rectangle>
	Draw_Rectangle(0x000000,   500, 70,   3, 410, Page[3], 800, 480);
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <Screens_init+0x95c>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002250:	9203      	str	r2, [sp, #12]
 8002252:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002256:	9202      	str	r2, [sp, #8]
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2303      	movs	r3, #3
 8002262:	2246      	movs	r2, #70	; 0x46
 8002264:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002268:	2000      	movs	r0, #0
 800226a:	f005 fd19 	bl	8007ca0 <Draw_Rectangle>


	// Экран 4
	Zaliv(BackgroundColor, Page[4], 800, 480);
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <Screens_init+0x954>)
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <Screens_init+0x95c>)
 8002274:	6919      	ldr	r1, [r3, #16]
 8002276:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800227a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800227e:	f005 fce3 	bl	8007c48 <Zaliv>
	Short_Centred_RU_DrawString_32("ОКНО РУЧНОГО УПРАВЛЕНИЯ", 23, 400, 15, BackgroundColor, BasicSymbolColor, Page[4]);
 8002282:	4b03      	ldr	r3, [pc, #12]	; (8002290 <Screens_init+0x954>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a03      	ldr	r2, [pc, #12]	; (8002294 <Screens_init+0x958>)
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	4903      	ldr	r1, [pc, #12]	; (8002298 <Screens_init+0x95c>)
 800228c:	6909      	ldr	r1, [r1, #16]
 800228e:	e01b      	b.n	80022c8 <Screens_init+0x98c>
 8002290:	20000008 	.word	0x20000008
 8002294:	200009f8 	.word	0x200009f8
 8002298:	20000984 	.word	0x20000984
 800229c:	0800d368 	.word	0x0800d368
 80022a0:	0800d394 	.word	0x0800d394
 80022a4:	0800d3bc 	.word	0x0800d3bc
 80022a8:	0800d3d8 	.word	0x0800d3d8
 80022ac:	0800d410 	.word	0x0800d410
 80022b0:	0800d448 	.word	0x0800d448
 80022b4:	0800d2c4 	.word	0x0800d2c4
 80022b8:	0800d468 	.word	0x0800d468
 80022bc:	0800d16c 	.word	0x0800d16c
 80022c0:	0800d46c 	.word	0x0800d46c
 80022c4:	0800d478 	.word	0x0800d478
 80022c8:	9102      	str	r1, [sp, #8]
 80022ca:	9201      	str	r2, [sp, #4]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	230f      	movs	r3, #15
 80022d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80022d4:	2117      	movs	r1, #23
 80022d6:	486d      	ldr	r0, [pc, #436]	; (800248c <Screens_init+0xb50>)
 80022d8:	f004 fc88 	bl	8006bec <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[4], 800, 480);
 80022dc:	4b6c      	ldr	r3, [pc, #432]	; (8002490 <Screens_init+0xb54>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80022e4:	9203      	str	r2, [sp, #12]
 80022e6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80022ea:	9202      	str	r2, [sp, #8]
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	2303      	movs	r3, #3
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80022f6:	221e      	movs	r2, #30
 80022f8:	2100      	movs	r1, #0
 80022fa:	2000      	movs	r0, #0
 80022fc:	f005 fcd0 	bl	8007ca0 <Draw_Rectangle>

	// Экран_5 (пароль)
	Zaliv(BackgroundColor, Page[5], 800, 480);
 8002300:	4b64      	ldr	r3, [pc, #400]	; (8002494 <Screens_init+0xb58>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	4b62      	ldr	r3, [pc, #392]	; (8002490 <Screens_init+0xb54>)
 8002306:	6959      	ldr	r1, [r3, #20]
 8002308:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800230c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002310:	f005 fc9a 	bl	8007c48 <Zaliv>
	if(Control_DB.RazrPointer > 4){Control_DB.RazrPointer = 4;}
 8002314:	4b60      	ldr	r3, [pc, #384]	; (8002498 <Screens_init+0xb5c>)
 8002316:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800231a:	2b04      	cmp	r3, #4
 800231c:	dd02      	ble.n	8002324 <Screens_init+0x9e8>
 800231e:	4b5e      	ldr	r3, [pc, #376]	; (8002498 <Screens_init+0xb5c>)
 8002320:	2204      	movs	r2, #4
 8002322:	805a      	strh	r2, [r3, #2]


	// Экран 6
	Zaliv(BackgroundColor, Page[6], 800, 480);
 8002324:	4b5b      	ldr	r3, [pc, #364]	; (8002494 <Screens_init+0xb58>)
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <Screens_init+0xb54>)
 800232a:	6999      	ldr	r1, [r3, #24]
 800232c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002330:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002334:	f005 fc88 	bl	8007c48 <Zaliv>
	Short_Centred_RU_DrawString_32("Настройки станции насосной", 26, 400, 15, BackgroundColor, BasicSymbolColor, Page[6]);
 8002338:	4b56      	ldr	r3, [pc, #344]	; (8002494 <Screens_init+0xb58>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a57      	ldr	r2, [pc, #348]	; (800249c <Screens_init+0xb60>)
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	4953      	ldr	r1, [pc, #332]	; (8002490 <Screens_init+0xb54>)
 8002342:	6989      	ldr	r1, [r1, #24]
 8002344:	9102      	str	r1, [sp, #8]
 8002346:	9201      	str	r2, [sp, #4]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	230f      	movs	r3, #15
 800234c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002350:	211a      	movs	r1, #26
 8002352:	4853      	ldr	r0, [pc, #332]	; (80024a0 <Screens_init+0xb64>)
 8002354:	f004 fc4a 	bl	8006bec <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[6], 800, 480);
 8002358:	4b4d      	ldr	r3, [pc, #308]	; (8002490 <Screens_init+0xb54>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002360:	9203      	str	r2, [sp, #12]
 8002362:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002366:	9202      	str	r2, [sp, #8]
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	2303      	movs	r3, #3
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002372:	221e      	movs	r2, #30
 8002374:	2100      	movs	r1, #0
 8002376:	2000      	movs	r0, #0
 8002378:	f005 fc92 	bl	8007ca0 <Draw_Rectangle>


	// Экран 7
	Zaliv(BackgroundColor, Page[7], 800, 480);
 800237c:	4b45      	ldr	r3, [pc, #276]	; (8002494 <Screens_init+0xb58>)
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	4b43      	ldr	r3, [pc, #268]	; (8002490 <Screens_init+0xb54>)
 8002382:	69d9      	ldr	r1, [r3, #28]
 8002384:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002388:	f44f 7248 	mov.w	r2, #800	; 0x320
 800238c:	f005 fc5c 	bl	8007c48 <Zaliv>
	Short_Centred_RU_DrawString_32("Заводские параметры", 19, 400, 15, BackgroundColor, BasicSymbolColor, Page[7]);
 8002390:	4b40      	ldr	r3, [pc, #256]	; (8002494 <Screens_init+0xb58>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a41      	ldr	r2, [pc, #260]	; (800249c <Screens_init+0xb60>)
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	493d      	ldr	r1, [pc, #244]	; (8002490 <Screens_init+0xb54>)
 800239a:	69c9      	ldr	r1, [r1, #28]
 800239c:	9102      	str	r1, [sp, #8]
 800239e:	9201      	str	r2, [sp, #4]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	230f      	movs	r3, #15
 80023a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80023a8:	2113      	movs	r1, #19
 80023aa:	483e      	ldr	r0, [pc, #248]	; (80024a4 <Screens_init+0xb68>)
 80023ac:	f004 fc1e 	bl	8006bec <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[7], 800, 480);
 80023b0:	4b37      	ldr	r3, [pc, #220]	; (8002490 <Screens_init+0xb54>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023b8:	9203      	str	r2, [sp, #12]
 80023ba:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023be:	9202      	str	r2, [sp, #8]
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	2303      	movs	r3, #3
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80023ca:	221e      	movs	r2, #30
 80023cc:	2100      	movs	r1, #0
 80023ce:	2000      	movs	r0, #0
 80023d0:	f005 fc66 	bl	8007ca0 <Draw_Rectangle>




	// Экран 20 (Авария)
	Zaliv(RedColor, Page[20], 800, 480);
 80023d4:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <Screens_init+0xb6c>)
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <Screens_init+0xb54>)
 80023da:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80023e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023e4:	f005 fc30 	bl	8007c48 <Zaliv>
	Short_Centred_RU_DrawString_32("Активные аварийные сообщения", 28, 400, 15, RedColor, BasicSymbolColor, Page[20]);
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <Screens_init+0xb6c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <Screens_init+0xb60>)
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	4927      	ldr	r1, [pc, #156]	; (8002490 <Screens_init+0xb54>)
 80023f2:	6d09      	ldr	r1, [r1, #80]	; 0x50
 80023f4:	9102      	str	r1, [sp, #8]
 80023f6:	9201      	str	r2, [sp, #4]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	230f      	movs	r3, #15
 80023fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002400:	211c      	movs	r1, #28
 8002402:	482a      	ldr	r0, [pc, #168]	; (80024ac <Screens_init+0xb70>)
 8002404:	f004 fbf2 	bl	8006bec <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[20], 800, 480);
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <Screens_init+0xb54>)
 800240a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002410:	9203      	str	r2, [sp, #12]
 8002412:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002416:	9202      	str	r2, [sp, #8]
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	2303      	movs	r3, #3
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002422:	221e      	movs	r2, #30
 8002424:	2100      	movs	r1, #0
 8002426:	2000      	movs	r0, #0
 8002428:	f005 fc3a 	bl	8007ca0 <Draw_Rectangle>


	// Экран_21 (сетевуха)
	Zaliv(BackgroundColor, Page[21], 800, 480);
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <Screens_init+0xb58>)
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	4b17      	ldr	r3, [pc, #92]	; (8002490 <Screens_init+0xb54>)
 8002432:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002434:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002438:	f44f 7248 	mov.w	r2, #800	; 0x320
 800243c:	f005 fc04 	bl	8007c48 <Zaliv>
	Short_Centred_RU_DrawString_32("настройки пульта", 16, 400, 15, BackgroundColor, BasicSymbolColor, Page[21]);
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <Screens_init+0xb58>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a15      	ldr	r2, [pc, #84]	; (800249c <Screens_init+0xb60>)
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	4911      	ldr	r1, [pc, #68]	; (8002490 <Screens_init+0xb54>)
 800244a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800244c:	9102      	str	r1, [sp, #8]
 800244e:	9201      	str	r2, [sp, #4]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	230f      	movs	r3, #15
 8002454:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002458:	2110      	movs	r1, #16
 800245a:	4815      	ldr	r0, [pc, #84]	; (80024b0 <Screens_init+0xb74>)
 800245c:	f004 fbc6 	bl	8006bec <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[21], 800, 480);
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <Screens_init+0xb54>)
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002468:	9203      	str	r2, [sp, #12]
 800246a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800246e:	9202      	str	r2, [sp, #8]
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	2303      	movs	r3, #3
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	f44f 7348 	mov.w	r3, #800	; 0x320
 800247a:	221e      	movs	r2, #30
 800247c:	2100      	movs	r1, #0
 800247e:	2000      	movs	r0, #0
 8002480:	f005 fc0e 	bl	8007ca0 <Draw_Rectangle>


}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	0800d490 	.word	0x0800d490
 8002490:	20000984 	.word	0x20000984
 8002494:	20000008 	.word	0x20000008
 8002498:	20000b2c 	.word	0x20000b2c
 800249c:	200009f8 	.word	0x200009f8
 80024a0:	0800d4c0 	.word	0x0800d4c0
 80024a4:	0800d4f4 	.word	0x0800d4f4
 80024a8:	20000000 	.word	0x20000000
 80024ac:	0800d51c 	.word	0x0800d51c
 80024b0:	0800d554 	.word	0x0800d554

080024b4 <Set_Screen>:




void Set_Screen(uint8_t screen)
{
 80024b4:	b5b0      	push	{r4, r5, r7, lr}
 80024b6:	b092      	sub	sp, #72	; 0x48
 80024b8:	af0c      	add	r7, sp, #48	; 0x30
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < 20;i++)
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e016      	b.n	80024f2 <Set_Screen+0x3e>
	{
		if(i == Control_DB.MenuPointer) {FonColor[i] = SelectionColor;}
 80024c4:	4b9d      	ldr	r3, [pc, #628]	; (800273c <Set_Screen+0x288>)
 80024c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ca:	461a      	mov	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d106      	bne.n	80024e0 <Set_Screen+0x2c>
 80024d2:	4b9b      	ldr	r3, [pc, #620]	; (8002740 <Set_Screen+0x28c>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	499b      	ldr	r1, [pc, #620]	; (8002744 <Set_Screen+0x290>)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80024de:	e005      	b.n	80024ec <Set_Screen+0x38>
		else {FonColor[i] = BackgroundColor;}
 80024e0:	4b99      	ldr	r3, [pc, #612]	; (8002748 <Set_Screen+0x294>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4997      	ldr	r1, [pc, #604]	; (8002744 <Set_Screen+0x290>)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 20;i++)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b13      	cmp	r3, #19
 80024f6:	dde5      	ble.n	80024c4 <Set_Screen+0x10>
	}

	switch(screen)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	2b14      	cmp	r3, #20
 80024fe:	f202 81da 	bhi.w	80048b6 <Set_Screen+0x2402>
 8002502:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <Set_Screen+0x54>)
 8002504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002508:	0800255d 	.word	0x0800255d
 800250c:	08002b5d 	.word	0x08002b5d
 8002510:	080030e9 	.word	0x080030e9
 8002514:	080039ed 	.word	0x080039ed
 8002518:	08003b99 	.word	0x08003b99
 800251c:	08003c95 	.word	0x08003c95
 8002520:	08004301 	.word	0x08004301
 8002524:	080048b7 	.word	0x080048b7
 8002528:	080048b7 	.word	0x080048b7
 800252c:	080048b7 	.word	0x080048b7
 8002530:	080048b7 	.word	0x080048b7
 8002534:	080048b7 	.word	0x080048b7
 8002538:	080048b7 	.word	0x080048b7
 800253c:	080048b7 	.word	0x080048b7
 8002540:	080048b7 	.word	0x080048b7
 8002544:	080048b7 	.word	0x080048b7
 8002548:	080048b7 	.word	0x080048b7
 800254c:	080048b7 	.word	0x080048b7
 8002550:	080048b7 	.word	0x080048b7
 8002554:	080048b7 	.word	0x080048b7
 8002558:	080045f9 	.word	0x080045f9

		case 1:



			for(int i = 0; i < 3; i++)
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e17f      	b.n	8002862 <Set_Screen+0x3ae>
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d04a      	beq.n	80025fe <Set_Screen+0x14a>
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b02      	cmp	r3, #2
 800256c:	dc6a      	bgt.n	8002644 <Set_Screen+0x190>
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <Set_Screen+0xc8>
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d020      	beq.n	80025bc <Set_Screen+0x108>
 800257a:	e063      	b.n	8002644 <Set_Screen+0x190>
			{
				switch(i)
				{
					case 0:
						engine_state = BUV_RT_VALS.ANN_1.Pump.State;
 800257c:	4b73      	ldr	r3, [pc, #460]	; (800274c <Set_Screen+0x298>)
 800257e:	7a1a      	ldrb	r2, [r3, #8]
 8002580:	4b73      	ldr	r3, [pc, #460]	; (8002750 <Set_Screen+0x29c>)
 8002582:	701a      	strb	r2, [r3, #0]
						unload		 = BUV_RT_VALS.ANN_1.Unload;
 8002584:	4b71      	ldr	r3, [pc, #452]	; (800274c <Set_Screen+0x298>)
 8002586:	7d9a      	ldrb	r2, [r3, #22]
 8002588:	4b72      	ldr	r3, [pc, #456]	; (8002754 <Set_Screen+0x2a0>)
 800258a:	701a      	strb	r2, [r3, #0]
						bimetal      = BUV_RT_VALS.ANN_1.Pump.Bimetal;
 800258c:	4b6f      	ldr	r3, [pc, #444]	; (800274c <Set_Screen+0x298>)
 800258e:	7a5a      	ldrb	r2, [r3, #9]
 8002590:	4b71      	ldr	r3, [pc, #452]	; (8002758 <Set_Screen+0x2a4>)
 8002592:	701a      	strb	r2, [r3, #0]
						Press_napor  = BUV_RT_VALS.ANN_1.Out_Pressure;
 8002594:	4b6d      	ldr	r3, [pc, #436]	; (800274c <Set_Screen+0x298>)
 8002596:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800259a:	4b70      	ldr	r3, [pc, #448]	; (800275c <Set_Screen+0x2a8>)
 800259c:	801a      	strh	r2, [r3, #0]
						Press_maslo  = BUV_RT_VALS.ANN_1.Oil_Pressure;
 800259e:	4b6b      	ldr	r3, [pc, #428]	; (800274c <Set_Screen+0x298>)
 80025a0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80025a4:	4b6e      	ldr	r3, [pc, #440]	; (8002760 <Set_Screen+0x2ac>)
 80025a6:	801a      	strh	r2, [r3, #0]
						Temp_maslo   = BUV_RT_VALS.ANN_1.Oil_Temperature;
 80025a8:	4b68      	ldr	r3, [pc, #416]	; (800274c <Set_Screen+0x298>)
 80025aa:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80025ae:	4b6d      	ldr	r3, [pc, #436]	; (8002764 <Set_Screen+0x2b0>)
 80025b0:	801a      	strh	r2, [r3, #0]
						motoclock    = BUV_RT_VALS.ANN_1.Pump.MotoClock;
 80025b2:	4b66      	ldr	r3, [pc, #408]	; (800274c <Set_Screen+0x298>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4a6c      	ldr	r2, [pc, #432]	; (8002768 <Set_Screen+0x2b4>)
 80025b8:	6013      	str	r3, [r2, #0]
					break;
 80025ba:	e043      	b.n	8002644 <Set_Screen+0x190>

					case 1:
						engine_state = BUV_RT_VALS.ANN_2.Pump.State;
 80025bc:	4b63      	ldr	r3, [pc, #396]	; (800274c <Set_Screen+0x298>)
 80025be:	7f1a      	ldrb	r2, [r3, #28]
 80025c0:	4b63      	ldr	r3, [pc, #396]	; (8002750 <Set_Screen+0x29c>)
 80025c2:	701a      	strb	r2, [r3, #0]
						unload		 = BUV_RT_VALS.ANN_2.Unload;
 80025c4:	4b61      	ldr	r3, [pc, #388]	; (800274c <Set_Screen+0x298>)
 80025c6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <Set_Screen+0x2a0>)
 80025cc:	701a      	strb	r2, [r3, #0]
						bimetal      = BUV_RT_VALS.ANN_2.Pump.Bimetal;
 80025ce:	4b5f      	ldr	r3, [pc, #380]	; (800274c <Set_Screen+0x298>)
 80025d0:	7f5a      	ldrb	r2, [r3, #29]
 80025d2:	4b61      	ldr	r3, [pc, #388]	; (8002758 <Set_Screen+0x2a4>)
 80025d4:	701a      	strb	r2, [r3, #0]
						Press_napor  = BUV_RT_VALS.ANN_2.Out_Pressure;
 80025d6:	4b5d      	ldr	r3, [pc, #372]	; (800274c <Set_Screen+0x298>)
 80025d8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80025dc:	4b5f      	ldr	r3, [pc, #380]	; (800275c <Set_Screen+0x2a8>)
 80025de:	801a      	strh	r2, [r3, #0]
						Press_maslo  = BUV_RT_VALS.ANN_2.Oil_Pressure;
 80025e0:	4b5a      	ldr	r3, [pc, #360]	; (800274c <Set_Screen+0x298>)
 80025e2:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80025e6:	4b5e      	ldr	r3, [pc, #376]	; (8002760 <Set_Screen+0x2ac>)
 80025e8:	801a      	strh	r2, [r3, #0]
						Temp_maslo   = BUV_RT_VALS.ANN_2.Oil_Temperature;
 80025ea:	4b58      	ldr	r3, [pc, #352]	; (800274c <Set_Screen+0x298>)
 80025ec:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80025f0:	4b5c      	ldr	r3, [pc, #368]	; (8002764 <Set_Screen+0x2b0>)
 80025f2:	801a      	strh	r2, [r3, #0]
						motoclock    = BUV_RT_VALS.ANN_2.Pump.MotoClock;
 80025f4:	4b55      	ldr	r3, [pc, #340]	; (800274c <Set_Screen+0x298>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4a5b      	ldr	r2, [pc, #364]	; (8002768 <Set_Screen+0x2b4>)
 80025fa:	6013      	str	r3, [r2, #0]
					break;
 80025fc:	e022      	b.n	8002644 <Set_Screen+0x190>

					case 2:
						engine_state = BUV_RT_VALS.ANN_3.Pump.State;
 80025fe:	4b53      	ldr	r3, [pc, #332]	; (800274c <Set_Screen+0x298>)
 8002600:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002604:	4b52      	ldr	r3, [pc, #328]	; (8002750 <Set_Screen+0x29c>)
 8002606:	701a      	strb	r2, [r3, #0]
						unload		 = BUV_RT_VALS.ANN_3.Unload;
 8002608:	4b50      	ldr	r3, [pc, #320]	; (800274c <Set_Screen+0x298>)
 800260a:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800260e:	4b51      	ldr	r3, [pc, #324]	; (8002754 <Set_Screen+0x2a0>)
 8002610:	701a      	strb	r2, [r3, #0]
						bimetal      = BUV_RT_VALS.ANN_3.Pump.Bimetal;
 8002612:	4b4e      	ldr	r3, [pc, #312]	; (800274c <Set_Screen+0x298>)
 8002614:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <Set_Screen+0x2a4>)
 800261a:	701a      	strb	r2, [r3, #0]
						Press_napor  = BUV_RT_VALS.ANN_3.Out_Pressure;
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <Set_Screen+0x298>)
 800261e:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8002622:	4b4e      	ldr	r3, [pc, #312]	; (800275c <Set_Screen+0x2a8>)
 8002624:	801a      	strh	r2, [r3, #0]
						Press_maslo  = BUV_RT_VALS.ANN_3.Oil_Pressure;
 8002626:	4b49      	ldr	r3, [pc, #292]	; (800274c <Set_Screen+0x298>)
 8002628:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 800262c:	4b4c      	ldr	r3, [pc, #304]	; (8002760 <Set_Screen+0x2ac>)
 800262e:	801a      	strh	r2, [r3, #0]
						Temp_maslo   = BUV_RT_VALS.ANN_3.Oil_Temperature;
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <Set_Screen+0x298>)
 8002632:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8002636:	4b4b      	ldr	r3, [pc, #300]	; (8002764 <Set_Screen+0x2b0>)
 8002638:	801a      	strh	r2, [r3, #0]
						motoclock    = BUV_RT_VALS.ANN_3.Pump.MotoClock;
 800263a:	4b44      	ldr	r3, [pc, #272]	; (800274c <Set_Screen+0x298>)
 800263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263e:	4a4a      	ldr	r2, [pc, #296]	; (8002768 <Set_Screen+0x2b4>)
 8002640:	6013      	str	r3, [r2, #0]
					break;
 8002642:	bf00      	nop
				}

				uint16_t shift_X = i * 260 + 7;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	0192      	lsls	r2, r2, #6
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	b29b      	uxth	r3, r3
 8002652:	3307      	adds	r3, #7
 8002654:	81fb      	strh	r3, [r7, #14]

				if(engine_state)
 8002656:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <Set_Screen+0x29c>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d012      	beq.n	8002684 <Set_Screen+0x1d0>
				{
					Short_Left_Colored_RU_DrawString_32("   Вкл   ", 		  9,  95 + shift_X,  20,      GreenColor, BasicSymbolColor, Page[1]);
 800265e:	89fb      	ldrh	r3, [r7, #14]
 8002660:	335f      	adds	r3, #95	; 0x5f
 8002662:	b298      	uxth	r0, r3
 8002664:	4b41      	ldr	r3, [pc, #260]	; (800276c <Set_Screen+0x2b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a41      	ldr	r2, [pc, #260]	; (8002770 <Set_Screen+0x2bc>)
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	4941      	ldr	r1, [pc, #260]	; (8002774 <Set_Screen+0x2c0>)
 800266e:	6849      	ldr	r1, [r1, #4]
 8002670:	9102      	str	r1, [sp, #8]
 8002672:	9201      	str	r2, [sp, #4]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2314      	movs	r3, #20
 8002678:	4602      	mov	r2, r0
 800267a:	2109      	movs	r1, #9
 800267c:	483e      	ldr	r0, [pc, #248]	; (8002778 <Set_Screen+0x2c4>)
 800267e:	f004 f997 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002682:	e011      	b.n	80026a8 <Set_Screen+0x1f4>
				}
				else
				{
					Short_Left_Colored_RU_DrawString_32("   Выкл  ", 		  9,  95 + shift_X,  20,        RedColor, BasicSymbolColor, Page[1]);
 8002684:	89fb      	ldrh	r3, [r7, #14]
 8002686:	335f      	adds	r3, #95	; 0x5f
 8002688:	b298      	uxth	r0, r3
 800268a:	4b3c      	ldr	r3, [pc, #240]	; (800277c <Set_Screen+0x2c8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a38      	ldr	r2, [pc, #224]	; (8002770 <Set_Screen+0x2bc>)
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	4938      	ldr	r1, [pc, #224]	; (8002774 <Set_Screen+0x2c0>)
 8002694:	6849      	ldr	r1, [r1, #4]
 8002696:	9102      	str	r1, [sp, #8]
 8002698:	9201      	str	r2, [sp, #4]
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2314      	movs	r3, #20
 800269e:	4602      	mov	r2, r0
 80026a0:	2109      	movs	r1, #9
 80026a2:	4837      	ldr	r0, [pc, #220]	; (8002780 <Set_Screen+0x2cc>)
 80026a4:	f004 f984 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
				}
				Short_Centred_DrawNumber_16(Press_napor, 1, 4, 0, 					 170 + shift_X,  52, 									Page[1]);
 80026a8:	4b2c      	ldr	r3, [pc, #176]	; (800275c <Set_Screen+0x2a8>)
 80026aa:	f9b3 0000 	ldrsh.w	r0, [r3]
 80026ae:	89fb      	ldrh	r3, [r7, #14]
 80026b0:	33aa      	adds	r3, #170	; 0xaa
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4a2f      	ldr	r2, [pc, #188]	; (8002774 <Set_Screen+0x2c0>)
 80026b6:	6852      	ldr	r2, [r2, #4]
 80026b8:	9202      	str	r2, [sp, #8]
 80026ba:	2234      	movs	r2, #52	; 0x34
 80026bc:	9201      	str	r2, [sp, #4]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2300      	movs	r3, #0
 80026c2:	2204      	movs	r2, #4
 80026c4:	2101      	movs	r1, #1
 80026c6:	f005 f993 	bl	80079f0 <Short_Centred_DrawNumber_16>
				Short_Centred_DrawNumber_16(Press_maslo, 2, 4, 0, 					 170 + shift_X,  82, 									Page[1]);
 80026ca:	4b25      	ldr	r3, [pc, #148]	; (8002760 <Set_Screen+0x2ac>)
 80026cc:	f9b3 0000 	ldrsh.w	r0, [r3]
 80026d0:	89fb      	ldrh	r3, [r7, #14]
 80026d2:	33aa      	adds	r3, #170	; 0xaa
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4a27      	ldr	r2, [pc, #156]	; (8002774 <Set_Screen+0x2c0>)
 80026d8:	6852      	ldr	r2, [r2, #4]
 80026da:	9202      	str	r2, [sp, #8]
 80026dc:	2252      	movs	r2, #82	; 0x52
 80026de:	9201      	str	r2, [sp, #4]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	2300      	movs	r3, #0
 80026e4:	2204      	movs	r2, #4
 80026e6:	2102      	movs	r1, #2
 80026e8:	f005 f982 	bl	80079f0 <Short_Centred_DrawNumber_16>
				Short_Centred_DrawNumber_16(Temp_maslo , 0, 4, 0, 					 170 + shift_X, 112, 									Page[1]);
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <Set_Screen+0x2b0>)
 80026ee:	f9b3 0000 	ldrsh.w	r0, [r3]
 80026f2:	89fb      	ldrh	r3, [r7, #14]
 80026f4:	33aa      	adds	r3, #170	; 0xaa
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <Set_Screen+0x2c0>)
 80026fa:	6852      	ldr	r2, [r2, #4]
 80026fc:	9202      	str	r2, [sp, #8]
 80026fe:	2270      	movs	r2, #112	; 0x70
 8002700:	9201      	str	r2, [sp, #4]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2300      	movs	r3, #0
 8002706:	2204      	movs	r2, #4
 8002708:	2100      	movs	r1, #0
 800270a:	f005 f971 	bl	80079f0 <Short_Centred_DrawNumber_16>
				if(unload)
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <Set_Screen+0x2a0>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d038      	beq.n	8002788 <Set_Screen+0x2d4>
				{
					Short_Left_Colored_RU_DrawString_32("  РАЗГРУЗКА   ", 	 14,   5 + shift_X, 140, 	  GreenColor, BasicSymbolColor, Page[1]);
 8002716:	89fb      	ldrh	r3, [r7, #14]
 8002718:	3305      	adds	r3, #5
 800271a:	b298      	uxth	r0, r3
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <Set_Screen+0x2b8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a13      	ldr	r2, [pc, #76]	; (8002770 <Set_Screen+0x2bc>)
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	4913      	ldr	r1, [pc, #76]	; (8002774 <Set_Screen+0x2c0>)
 8002726:	6849      	ldr	r1, [r1, #4]
 8002728:	9102      	str	r1, [sp, #8]
 800272a:	9201      	str	r2, [sp, #4]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	238c      	movs	r3, #140	; 0x8c
 8002730:	4602      	mov	r2, r0
 8002732:	210e      	movs	r1, #14
 8002734:	4813      	ldr	r0, [pc, #76]	; (8002784 <Set_Screen+0x2d0>)
 8002736:	f004 f93b 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 800273a:	e037      	b.n	80027ac <Set_Screen+0x2f8>
 800273c:	20000b2c 	.word	0x20000b2c
 8002740:	20000010 	.word	0x20000010
 8002744:	200000a4 	.word	0x200000a4
 8002748:	20000008 	.word	0x20000008
 800274c:	20000a64 	.word	0x20000a64
 8002750:	200000f4 	.word	0x200000f4
 8002754:	200000f5 	.word	0x200000f5
 8002758:	200000f6 	.word	0x200000f6
 800275c:	200000f8 	.word	0x200000f8
 8002760:	200000fa 	.word	0x200000fa
 8002764:	200000fc 	.word	0x200000fc
 8002768:	20000100 	.word	0x20000100
 800276c:	20000004 	.word	0x20000004
 8002770:	200009f8 	.word	0x200009f8
 8002774:	20000984 	.word	0x20000984
 8002778:	0800d1a8 	.word	0x0800d1a8
 800277c:	20000000 	.word	0x20000000
 8002780:	0800d574 	.word	0x0800d574
 8002784:	0800d1b8 	.word	0x0800d1b8
				}
				else
				{
					Short_Left_Colored_RU_DrawString_32("  РАЗГРУЗКА   ", 	 14,   5 + shift_X, 140, 		RedColor, BasicSymbolColor, Page[1]);
 8002788:	89fb      	ldrh	r3, [r7, #14]
 800278a:	3305      	adds	r3, #5
 800278c:	b298      	uxth	r0, r3
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <Set_Screen+0x328>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <Set_Screen+0x32c>)
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	4913      	ldr	r1, [pc, #76]	; (80027e4 <Set_Screen+0x330>)
 8002798:	6849      	ldr	r1, [r1, #4]
 800279a:	9102      	str	r1, [sp, #8]
 800279c:	9201      	str	r2, [sp, #4]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	238c      	movs	r3, #140	; 0x8c
 80027a2:	4602      	mov	r2, r0
 80027a4:	210e      	movs	r1, #14
 80027a6:	4810      	ldr	r0, [pc, #64]	; (80027e8 <Set_Screen+0x334>)
 80027a8:	f004 f902 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
				}
				if(bimetal)
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <Set_Screen+0x338>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01f      	beq.n	80027f4 <Set_Screen+0x340>
				{
					Short_Left_Colored_RU_DrawString_32(" тепл. защита ", 	 14,   5 + shift_X, 170, 		RedColor, BasicSymbolColor, Page[1]);
 80027b4:	89fb      	ldrh	r3, [r7, #14]
 80027b6:	3305      	adds	r3, #5
 80027b8:	b298      	uxth	r0, r3
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <Set_Screen+0x328>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a08      	ldr	r2, [pc, #32]	; (80027e0 <Set_Screen+0x32c>)
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	4908      	ldr	r1, [pc, #32]	; (80027e4 <Set_Screen+0x330>)
 80027c4:	6849      	ldr	r1, [r1, #4]
 80027c6:	9102      	str	r1, [sp, #8]
 80027c8:	9201      	str	r2, [sp, #4]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	23aa      	movs	r3, #170	; 0xaa
 80027ce:	4602      	mov	r2, r0
 80027d0:	210e      	movs	r1, #14
 80027d2:	4807      	ldr	r0, [pc, #28]	; (80027f0 <Set_Screen+0x33c>)
 80027d4:	f004 f8ec 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 80027d8:	e01e      	b.n	8002818 <Set_Screen+0x364>
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000
 80027e0:	200009f8 	.word	0x200009f8
 80027e4:	20000984 	.word	0x20000984
 80027e8:	0800d1b8 	.word	0x0800d1b8
 80027ec:	200000f6 	.word	0x200000f6
 80027f0:	0800d584 	.word	0x0800d584
				}
				else
				{
					Short_Left_Colored_RU_DrawString_32(" тепл. защита ", 	 14,   5 + shift_X, 170, 	  GreenColor, BasicSymbolColor, Page[1]);
 80027f4:	89fb      	ldrh	r3, [r7, #14]
 80027f6:	3305      	adds	r3, #5
 80027f8:	b298      	uxth	r0, r3
 80027fa:	4baa      	ldr	r3, [pc, #680]	; (8002aa4 <Set_Screen+0x5f0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4aaa      	ldr	r2, [pc, #680]	; (8002aa8 <Set_Screen+0x5f4>)
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	49aa      	ldr	r1, [pc, #680]	; (8002aac <Set_Screen+0x5f8>)
 8002804:	6849      	ldr	r1, [r1, #4]
 8002806:	9102      	str	r1, [sp, #8]
 8002808:	9201      	str	r2, [sp, #4]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	23aa      	movs	r3, #170	; 0xaa
 800280e:	4602      	mov	r2, r0
 8002810:	210e      	movs	r1, #14
 8002812:	48a7      	ldr	r0, [pc, #668]	; (8002ab0 <Set_Screen+0x5fc>)
 8002814:	f004 f8cc 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
				}

				Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 200 + shift_X, 205, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002818:	4ba6      	ldr	r3, [pc, #664]	; (8002ab4 <Set_Screen+0x600>)
 800281a:	681c      	ldr	r4, [r3, #0]
 800281c:	89fb      	ldrh	r3, [r7, #14]
 800281e:	33c8      	adds	r3, #200	; 0xc8
 8002820:	4aa2      	ldr	r2, [pc, #648]	; (8002aac <Set_Screen+0x5f8>)
 8002822:	6852      	ldr	r2, [r2, #4]
 8002824:	49a4      	ldr	r1, [pc, #656]	; (8002ab8 <Set_Screen+0x604>)
 8002826:	6809      	ldr	r1, [r1, #0]
 8002828:	489f      	ldr	r0, [pc, #636]	; (8002aa8 <Set_Screen+0x5f4>)
 800282a:	6800      	ldr	r0, [r0, #0]
 800282c:	2512      	movs	r5, #18
 800282e:	9509      	str	r5, [sp, #36]	; 0x24
 8002830:	250b      	movs	r5, #11
 8002832:	9508      	str	r5, [sp, #32]
 8002834:	4da1      	ldr	r5, [pc, #644]	; (8002abc <Set_Screen+0x608>)
 8002836:	9507      	str	r5, [sp, #28]
 8002838:	9006      	str	r0, [sp, #24]
 800283a:	9105      	str	r1, [sp, #20]
 800283c:	9204      	str	r2, [sp, #16]
 800283e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002842:	9203      	str	r2, [sp, #12]
 8002844:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002848:	9202      	str	r2, [sp, #8]
 800284a:	22cd      	movs	r2, #205	; 0xcd
 800284c:	9201      	str	r2, [sp, #4]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2300      	movs	r3, #0
 8002852:	220a      	movs	r2, #10
 8002854:	2100      	movs	r1, #0
 8002856:	4620      	mov	r0, r4
 8002858:	f004 fc18 	bl	800708c <Centred_DrawNumber_16_32bit>
			for(int i = 0; i < 3; i++)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	3301      	adds	r3, #1
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b02      	cmp	r3, #2
 8002866:	f77f ae7c 	ble.w	8002562 <Set_Screen+0xae>
			}

			Centred_DrawNumber_16(BUV_RT_VALS.Ustauka, 			0, 3, 0, 700, 270, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // Уставка
 800286a:	4b95      	ldr	r3, [pc, #596]	; (8002ac0 <Set_Screen+0x60c>)
 800286c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002870:	4b8e      	ldr	r3, [pc, #568]	; (8002aac <Set_Screen+0x5f8>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a90      	ldr	r2, [pc, #576]	; (8002ab8 <Set_Screen+0x604>)
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	498b      	ldr	r1, [pc, #556]	; (8002aa8 <Set_Screen+0x5f4>)
 800287a:	6809      	ldr	r1, [r1, #0]
 800287c:	2419      	movs	r4, #25
 800287e:	9409      	str	r4, [sp, #36]	; 0x24
 8002880:	2410      	movs	r4, #16
 8002882:	9408      	str	r4, [sp, #32]
 8002884:	4c8f      	ldr	r4, [pc, #572]	; (8002ac4 <Set_Screen+0x610>)
 8002886:	9407      	str	r4, [sp, #28]
 8002888:	9106      	str	r1, [sp, #24]
 800288a:	9205      	str	r2, [sp, #20]
 800288c:	9304      	str	r3, [sp, #16]
 800288e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002892:	9303      	str	r3, [sp, #12]
 8002894:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002898:	9302      	str	r3, [sp, #8]
 800289a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2300      	movs	r3, #0
 80028a8:	2203      	movs	r2, #3
 80028aa:	2100      	movs	r1, #0
 80028ac:	f004 f9ca 	bl	8006c44 <Centred_DrawNumber_16>
			Centred_DrawNumber_16(BUV_RT_VALS.TANK_level, 		0, 3, 0, 700, 330, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // уровень бак
 80028b0:	4b83      	ldr	r3, [pc, #524]	; (8002ac0 <Set_Screen+0x60c>)
 80028b2:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80028b6:	4b7d      	ldr	r3, [pc, #500]	; (8002aac <Set_Screen+0x5f8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a7f      	ldr	r2, [pc, #508]	; (8002ab8 <Set_Screen+0x604>)
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	497a      	ldr	r1, [pc, #488]	; (8002aa8 <Set_Screen+0x5f4>)
 80028c0:	6809      	ldr	r1, [r1, #0]
 80028c2:	2419      	movs	r4, #25
 80028c4:	9409      	str	r4, [sp, #36]	; 0x24
 80028c6:	2410      	movs	r4, #16
 80028c8:	9408      	str	r4, [sp, #32]
 80028ca:	4c7e      	ldr	r4, [pc, #504]	; (8002ac4 <Set_Screen+0x610>)
 80028cc:	9407      	str	r4, [sp, #28]
 80028ce:	9106      	str	r1, [sp, #24]
 80028d0:	9205      	str	r2, [sp, #20]
 80028d2:	9304      	str	r3, [sp, #16]
 80028d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80028d8:	9303      	str	r3, [sp, #12]
 80028da:	f44f 7348 	mov.w	r3, #800	; 0x320
 80028de:	9302      	str	r3, [sp, #8]
 80028e0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2300      	movs	r3, #0
 80028ee:	2203      	movs	r2, #3
 80028f0:	2100      	movs	r1, #0
 80028f2:	f004 f9a7 	bl	8006c44 <Centred_DrawNumber_16>
			Centred_DrawNumber_16(BUV_RT_VALS.TANK_temperature, 0, 3, 0, 700, 390, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // температура бак
 80028f6:	4b72      	ldr	r3, [pc, #456]	; (8002ac0 <Set_Screen+0x60c>)
 80028f8:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80028fc:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <Set_Screen+0x5f8>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a6d      	ldr	r2, [pc, #436]	; (8002ab8 <Set_Screen+0x604>)
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	4968      	ldr	r1, [pc, #416]	; (8002aa8 <Set_Screen+0x5f4>)
 8002906:	6809      	ldr	r1, [r1, #0]
 8002908:	2419      	movs	r4, #25
 800290a:	9409      	str	r4, [sp, #36]	; 0x24
 800290c:	2410      	movs	r4, #16
 800290e:	9408      	str	r4, [sp, #32]
 8002910:	4c6c      	ldr	r4, [pc, #432]	; (8002ac4 <Set_Screen+0x610>)
 8002912:	9407      	str	r4, [sp, #28]
 8002914:	9106      	str	r1, [sp, #24]
 8002916:	9205      	str	r2, [sp, #20]
 8002918:	9304      	str	r3, [sp, #16]
 800291a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800291e:	9303      	str	r3, [sp, #12]
 8002920:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002924:	9302      	str	r3, [sp, #8]
 8002926:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	2203      	movs	r2, #3
 8002936:	2100      	movs	r1, #0
 8002938:	f004 f984 	bl	8006c44 <Centred_DrawNumber_16>

			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Out_Pressure, 				1, 4, 0, 550, 242, 					 Page[1]); // давл в магистрали
 800293c:	4b60      	ldr	r3, [pc, #384]	; (8002ac0 <Set_Screen+0x60c>)
 800293e:	f9b3 0044 	ldrsh.w	r0, [r3, #68]	; 0x44
 8002942:	4b5a      	ldr	r3, [pc, #360]	; (8002aac <Set_Screen+0x5f8>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	23f2      	movs	r3, #242	; 0xf2
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	f240 2326 	movw	r3, #550	; 0x226
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	2204      	movs	r2, #4
 8002956:	2101      	movs	r1, #1
 8002958:	f005 f84a 	bl	80079f0 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Pressure_before_press_filter, 1, 4, 0, 550, 272, 					 Page[1]); // перед сливным напорным фильтром
 800295c:	4b58      	ldr	r3, [pc, #352]	; (8002ac0 <Set_Screen+0x60c>)
 800295e:	f9b3 0046 	ldrsh.w	r0, [r3, #70]	; 0x46
 8002962:	4b52      	ldr	r3, [pc, #328]	; (8002aac <Set_Screen+0x5f8>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	f44f 7388 	mov.w	r3, #272	; 0x110
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	f240 2326 	movw	r3, #550	; 0x226
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2300      	movs	r3, #0
 8002976:	2204      	movs	r2, #4
 8002978:	2101      	movs	r1, #1
 800297a:	f005 f839 	bl	80079f0 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Pressure_before_filter, 		1, 4, 0, 330, 302, 					 Page[1]); // перед сливным фильтром
 800297e:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <Set_Screen+0x60c>)
 8002980:	f9b3 0048 	ldrsh.w	r0, [r3, #72]	; 0x48
 8002984:	4b49      	ldr	r3, [pc, #292]	; (8002aac <Set_Screen+0x5f8>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	9302      	str	r3, [sp, #8]
 800298a:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	2204      	movs	r2, #4
 800299a:	2101      	movs	r1, #1
 800299c:	f005 f828 	bl	80079f0 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Pressure_behind_filter, 		1, 4, 0, 550, 302, 					 Page[1]); // за сливным фильтром
 80029a0:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <Set_Screen+0x60c>)
 80029a2:	f9b3 004a 	ldrsh.w	r0, [r3, #74]	; 0x4a
 80029a6:	4b41      	ldr	r3, [pc, #260]	; (8002aac <Set_Screen+0x5f8>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	9302      	str	r3, [sp, #8]
 80029ac:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	f240 2326 	movw	r3, #550	; 0x226
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2300      	movs	r3, #0
 80029ba:	2204      	movs	r2, #4
 80029bc:	2101      	movs	r1, #1
 80029be:	f005 f817 	bl	80079f0 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Flow,  1, 6, 0, 310, 334, 					 Page[1]); // расход на сливном фильтре
 80029c2:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <Set_Screen+0x60c>)
 80029c4:	f9b3 004c 	ldrsh.w	r0, [r3, #76]	; 0x4c
 80029c8:	4b38      	ldr	r3, [pc, #224]	; (8002aac <Set_Screen+0x5f8>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	f44f 739b 	mov.w	r3, #310	; 0x136
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2300      	movs	r3, #0
 80029dc:	2206      	movs	r2, #6
 80029de:	2101      	movs	r1, #1
 80029e0:	f005 f806 	bl	80079f0 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Flow, 		1, 6, 0, 530, 334, 					 Page[1]); // расход эмульсии
 80029e4:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <Set_Screen+0x60c>)
 80029e6:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 80029ea:	4b30      	ldr	r3, [pc, #192]	; (8002aac <Set_Screen+0x5f8>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	9302      	str	r3, [sp, #8]
 80029f0:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	f240 2312 	movw	r3, #530	; 0x212
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2300      	movs	r3, #0
 80029fe:	2206      	movs	r2, #6
 8002a00:	2101      	movs	r1, #1
 8002a02:	f004 fff5 	bl	80079f0 <Short_Centred_DrawNumber_16>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Volume, 0, 10, 0, 340, 364, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18); // прокачаный объём на сливном фильтре
 8002a06:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <Set_Screen+0x60c>)
 8002a08:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002a0a:	4b28      	ldr	r3, [pc, #160]	; (8002aac <Set_Screen+0x5f8>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4a2a      	ldr	r2, [pc, #168]	; (8002ab8 <Set_Screen+0x604>)
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	4925      	ldr	r1, [pc, #148]	; (8002aa8 <Set_Screen+0x5f4>)
 8002a14:	6809      	ldr	r1, [r1, #0]
 8002a16:	2412      	movs	r4, #18
 8002a18:	9409      	str	r4, [sp, #36]	; 0x24
 8002a1a:	240b      	movs	r4, #11
 8002a1c:	9408      	str	r4, [sp, #32]
 8002a1e:	4c27      	ldr	r4, [pc, #156]	; (8002abc <Set_Screen+0x608>)
 8002a20:	9407      	str	r4, [sp, #28]
 8002a22:	9106      	str	r1, [sp, #24]
 8002a24:	9205      	str	r2, [sp, #20]
 8002a26:	9304      	str	r3, [sp, #16]
 8002a28:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002a2c:	9303      	str	r3, [sp, #12]
 8002a2e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002a32:	9302      	str	r3, [sp, #8]
 8002a34:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2300      	movs	r3, #0
 8002a42:	220a      	movs	r2, #10
 8002a44:	2100      	movs	r1, #0
 8002a46:	f004 fb21 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Volume,     0, 10, 0, 560, 364, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18); // прокачаный объём эмульсии
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <Set_Screen+0x60c>)
 8002a4c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <Set_Screen+0x5f8>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4a19      	ldr	r2, [pc, #100]	; (8002ab8 <Set_Screen+0x604>)
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	4914      	ldr	r1, [pc, #80]	; (8002aa8 <Set_Screen+0x5f4>)
 8002a58:	6809      	ldr	r1, [r1, #0]
 8002a5a:	2412      	movs	r4, #18
 8002a5c:	9409      	str	r4, [sp, #36]	; 0x24
 8002a5e:	240b      	movs	r4, #11
 8002a60:	9408      	str	r4, [sp, #32]
 8002a62:	4c16      	ldr	r4, [pc, #88]	; (8002abc <Set_Screen+0x608>)
 8002a64:	9407      	str	r4, [sp, #28]
 8002a66:	9106      	str	r1, [sp, #24]
 8002a68:	9205      	str	r2, [sp, #20]
 8002a6a:	9304      	str	r3, [sp, #16]
 8002a6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002a70:	9303      	str	r3, [sp, #12]
 8002a72:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002a76:	9302      	str	r3, [sp, #8]
 8002a78:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	220a      	movs	r2, #10
 8002a88:	2100      	movs	r1, #0
 8002a8a:	f004 faff 	bl	800708c <Centred_DrawNumber_16_32bit>

			if(BUV_RT_VALS.FILT_NODE.Flush_valve_1)
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <Set_Screen+0x60c>)
 8002a90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d024      	beq.n	8002ae2 <Set_Screen+0x62e>
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.1", 	 11,  90, 400, GreenColor, BasicSymbolColor, Page[1]);
 8002a98:	4b02      	ldr	r3, [pc, #8]	; (8002aa4 <Set_Screen+0x5f0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a02      	ldr	r2, [pc, #8]	; (8002aa8 <Set_Screen+0x5f4>)
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	e012      	b.n	8002ac8 <Set_Screen+0x614>
 8002aa2:	bf00      	nop
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	200009f8 	.word	0x200009f8
 8002aac:	20000984 	.word	0x20000984
 8002ab0:	0800d584 	.word	0x0800d584
 8002ab4:	20000100 	.word	0x20000100
 8002ab8:	20000008 	.word	0x20000008
 8002abc:	0801088c 	.word	0x0801088c
 8002ac0:	20000a64 	.word	0x20000a64
 8002ac4:	080115e8 	.word	0x080115e8
 8002ac8:	4998      	ldr	r1, [pc, #608]	; (8002d2c <Set_Screen+0x878>)
 8002aca:	6849      	ldr	r1, [r1, #4]
 8002acc:	9102      	str	r1, [sp, #8]
 8002ace:	9201      	str	r2, [sp, #4]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002ad6:	225a      	movs	r2, #90	; 0x5a
 8002ad8:	210b      	movs	r1, #11
 8002ada:	4895      	ldr	r0, [pc, #596]	; (8002d30 <Set_Screen+0x87c>)
 8002adc:	f003 ff68 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002ae0:	e00f      	b.n	8002b02 <Set_Screen+0x64e>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.1", 	 11,  90, 400,   RedColor, BasicSymbolColor, Page[1]);
 8002ae2:	4b94      	ldr	r3, [pc, #592]	; (8002d34 <Set_Screen+0x880>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a94      	ldr	r2, [pc, #592]	; (8002d38 <Set_Screen+0x884>)
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	4990      	ldr	r1, [pc, #576]	; (8002d2c <Set_Screen+0x878>)
 8002aec:	6849      	ldr	r1, [r1, #4]
 8002aee:	9102      	str	r1, [sp, #8]
 8002af0:	9201      	str	r2, [sp, #4]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002af8:	225a      	movs	r2, #90	; 0x5a
 8002afa:	210b      	movs	r1, #11
 8002afc:	488c      	ldr	r0, [pc, #560]	; (8002d30 <Set_Screen+0x87c>)
 8002afe:	f003 ff57 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.FILT_NODE.Flush_valve_2)
 8002b02:	4b8e      	ldr	r3, [pc, #568]	; (8002d3c <Set_Screen+0x888>)
 8002b04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d011      	beq.n	8002b30 <Set_Screen+0x67c>
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.2", 	 11, 340, 400, GreenColor, BasicSymbolColor, Page[1]);
 8002b0c:	4b8c      	ldr	r3, [pc, #560]	; (8002d40 <Set_Screen+0x88c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a89      	ldr	r2, [pc, #548]	; (8002d38 <Set_Screen+0x884>)
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	4985      	ldr	r1, [pc, #532]	; (8002d2c <Set_Screen+0x878>)
 8002b16:	6849      	ldr	r1, [r1, #4]
 8002b18:	9102      	str	r1, [sp, #8]
 8002b1a:	9201      	str	r2, [sp, #4]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002b22:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8002b26:	210b      	movs	r1, #11
 8002b28:	4886      	ldr	r0, [pc, #536]	; (8002d44 <Set_Screen+0x890>)
 8002b2a:	f003 ff41 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002b2e:	e010      	b.n	8002b52 <Set_Screen+0x69e>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.2", 	 11, 340, 400,   RedColor, BasicSymbolColor, Page[1]);
 8002b30:	4b80      	ldr	r3, [pc, #512]	; (8002d34 <Set_Screen+0x880>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a80      	ldr	r2, [pc, #512]	; (8002d38 <Set_Screen+0x884>)
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	497c      	ldr	r1, [pc, #496]	; (8002d2c <Set_Screen+0x878>)
 8002b3a:	6849      	ldr	r1, [r1, #4]
 8002b3c:	9102      	str	r1, [sp, #8]
 8002b3e:	9201      	str	r2, [sp, #4]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002b46:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8002b4a:	210b      	movs	r1, #11
 8002b4c:	487d      	ldr	r0, [pc, #500]	; (8002d44 <Set_Screen+0x890>)
 8002b4e:	f003 ff2f 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			Control_DB.RazrPointer 		= 0;
 8002b52:	4b7d      	ldr	r3, [pc, #500]	; (8002d48 <Set_Screen+0x894>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	805a      	strh	r2, [r3, #2]

		break;
 8002b58:	f001 bead 	b.w	80048b6 <Set_Screen+0x2402>

		case 2:

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.MotoClock,			 0, 10, 0, 730,  94, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002b5c:	4b77      	ldr	r3, [pc, #476]	; (8002d3c <Set_Screen+0x888>)
 8002b5e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002b60:	4b72      	ldr	r3, [pc, #456]	; (8002d2c <Set_Screen+0x878>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a79      	ldr	r2, [pc, #484]	; (8002d4c <Set_Screen+0x898>)
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	4973      	ldr	r1, [pc, #460]	; (8002d38 <Set_Screen+0x884>)
 8002b6a:	6809      	ldr	r1, [r1, #0]
 8002b6c:	2412      	movs	r4, #18
 8002b6e:	9409      	str	r4, [sp, #36]	; 0x24
 8002b70:	240b      	movs	r4, #11
 8002b72:	9408      	str	r4, [sp, #32]
 8002b74:	4c76      	ldr	r4, [pc, #472]	; (8002d50 <Set_Screen+0x89c>)
 8002b76:	9407      	str	r4, [sp, #28]
 8002b78:	9106      	str	r1, [sp, #24]
 8002b7a:	9205      	str	r2, [sp, #20]
 8002b7c:	9304      	str	r3, [sp, #16]
 8002b7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002b82:	9303      	str	r3, [sp, #12]
 8002b84:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002b88:	9302      	str	r3, [sp, #8]
 8002b8a:	235e      	movs	r3, #94	; 0x5e
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	f240 23da 	movw	r3, #730	; 0x2da
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	220a      	movs	r2, #10
 8002b98:	2100      	movs	r1, #0
 8002b9a:	f004 fa77 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.MotoClock,			 0, 10, 0, 730, 124, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002b9e:	4b67      	ldr	r3, [pc, #412]	; (8002d3c <Set_Screen+0x888>)
 8002ba0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002ba2:	4b62      	ldr	r3, [pc, #392]	; (8002d2c <Set_Screen+0x878>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4a69      	ldr	r2, [pc, #420]	; (8002d4c <Set_Screen+0x898>)
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	4963      	ldr	r1, [pc, #396]	; (8002d38 <Set_Screen+0x884>)
 8002bac:	6809      	ldr	r1, [r1, #0]
 8002bae:	2412      	movs	r4, #18
 8002bb0:	9409      	str	r4, [sp, #36]	; 0x24
 8002bb2:	240b      	movs	r4, #11
 8002bb4:	9408      	str	r4, [sp, #32]
 8002bb6:	4c66      	ldr	r4, [pc, #408]	; (8002d50 <Set_Screen+0x89c>)
 8002bb8:	9407      	str	r4, [sp, #28]
 8002bba:	9106      	str	r1, [sp, #24]
 8002bbc:	9205      	str	r2, [sp, #20]
 8002bbe:	9304      	str	r3, [sp, #16]
 8002bc0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002bc4:	9303      	str	r3, [sp, #12]
 8002bc6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002bca:	9302      	str	r3, [sp, #8]
 8002bcc:	237c      	movs	r3, #124	; 0x7c
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	f240 23da 	movw	r3, #730	; 0x2da
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	220a      	movs	r2, #10
 8002bda:	2100      	movs	r1, #0
 8002bdc:	f004 fa56 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.MotoClock,	 0, 10, 0, 730, 154, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002be0:	4b56      	ldr	r3, [pc, #344]	; (8002d3c <Set_Screen+0x888>)
 8002be2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002be4:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <Set_Screen+0x878>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a58      	ldr	r2, [pc, #352]	; (8002d4c <Set_Screen+0x898>)
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	4952      	ldr	r1, [pc, #328]	; (8002d38 <Set_Screen+0x884>)
 8002bee:	6809      	ldr	r1, [r1, #0]
 8002bf0:	2412      	movs	r4, #18
 8002bf2:	9409      	str	r4, [sp, #36]	; 0x24
 8002bf4:	240b      	movs	r4, #11
 8002bf6:	9408      	str	r4, [sp, #32]
 8002bf8:	4c55      	ldr	r4, [pc, #340]	; (8002d50 <Set_Screen+0x89c>)
 8002bfa:	9407      	str	r4, [sp, #28]
 8002bfc:	9106      	str	r1, [sp, #24]
 8002bfe:	9205      	str	r2, [sp, #20]
 8002c00:	9304      	str	r3, [sp, #16]
 8002c02:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c06:	9303      	str	r3, [sp, #12]
 8002c08:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002c0c:	9302      	str	r3, [sp, #8]
 8002c0e:	239a      	movs	r3, #154	; 0x9a
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	f240 23da 	movw	r3, #730	; 0x2da
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	220a      	movs	r2, #10
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	f004 fa35 	bl	800708c <Centred_DrawNumber_16_32bit>

			if(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.State)
 8002c22:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <Set_Screen+0x888>)
 8002c24:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00f      	beq.n	8002c4c <Set_Screen+0x798>
			{
				Short_Left_Colored_RU_DrawString_32("Насос циркуляционный ", 				21,  10,  90,      GreenColor, BasicSymbolColor, Page[2]);
 8002c2c:	4b44      	ldr	r3, [pc, #272]	; (8002d40 <Set_Screen+0x88c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a41      	ldr	r2, [pc, #260]	; (8002d38 <Set_Screen+0x884>)
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	493d      	ldr	r1, [pc, #244]	; (8002d2c <Set_Screen+0x878>)
 8002c36:	6889      	ldr	r1, [r1, #8]
 8002c38:	9102      	str	r1, [sp, #8]
 8002c3a:	9201      	str	r2, [sp, #4]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	235a      	movs	r3, #90	; 0x5a
 8002c40:	220a      	movs	r2, #10
 8002c42:	2115      	movs	r1, #21
 8002c44:	4843      	ldr	r0, [pc, #268]	; (8002d54 <Set_Screen+0x8a0>)
 8002c46:	f003 feb3 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002c4a:	e00e      	b.n	8002c6a <Set_Screen+0x7b6>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Насос циркуляционный ", 				21,  10,  90,        RedColor, BasicSymbolColor, Page[2]);
 8002c4c:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <Set_Screen+0x880>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a39      	ldr	r2, [pc, #228]	; (8002d38 <Set_Screen+0x884>)
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	4935      	ldr	r1, [pc, #212]	; (8002d2c <Set_Screen+0x878>)
 8002c56:	6889      	ldr	r1, [r1, #8]
 8002c58:	9102      	str	r1, [sp, #8]
 8002c5a:	9201      	str	r2, [sp, #4]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	235a      	movs	r3, #90	; 0x5a
 8002c60:	220a      	movs	r2, #10
 8002c62:	2115      	movs	r1, #21
 8002c64:	483b      	ldr	r0, [pc, #236]	; (8002d54 <Set_Screen+0x8a0>)
 8002c66:	f003 fea3 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.Bimetal)
 8002c6a:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <Set_Screen+0x888>)
 8002c6c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d010      	beq.n	8002c96 <Set_Screen+0x7e2>
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400,  90,      GreenColor, BasicSymbolColor, Page[2]);
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <Set_Screen+0x88c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a2f      	ldr	r2, [pc, #188]	; (8002d38 <Set_Screen+0x884>)
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	492b      	ldr	r1, [pc, #172]	; (8002d2c <Set_Screen+0x878>)
 8002c7e:	6889      	ldr	r1, [r1, #8]
 8002c80:	9102      	str	r1, [sp, #8]
 8002c82:	9201      	str	r2, [sp, #4]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	235a      	movs	r3, #90	; 0x5a
 8002c88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	4832      	ldr	r0, [pc, #200]	; (8002d58 <Set_Screen+0x8a4>)
 8002c90:	f003 fe8e 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002c94:	e00f      	b.n	8002cb6 <Set_Screen+0x802>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400,  90,        RedColor, BasicSymbolColor, Page[2]);
 8002c96:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <Set_Screen+0x880>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <Set_Screen+0x884>)
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	4923      	ldr	r1, [pc, #140]	; (8002d2c <Set_Screen+0x878>)
 8002ca0:	6889      	ldr	r1, [r1, #8]
 8002ca2:	9102      	str	r1, [sp, #8]
 8002ca4:	9201      	str	r2, [sp, #4]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	235a      	movs	r3, #90	; 0x5a
 8002caa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002cae:	2108      	movs	r1, #8
 8002cb0:	4829      	ldr	r0, [pc, #164]	; (8002d58 <Set_Screen+0x8a4>)
 8002cb2:	f003 fe7d 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}


			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.State)
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <Set_Screen+0x888>)
 8002cb8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00f      	beq.n	8002ce0 <Set_Screen+0x82c>
			{
				Short_Left_Colored_RU_DrawString_32("Насос концентрата    ", 				21,  10, 120,      GreenColor, BasicSymbolColor, Page[2]);
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <Set_Screen+0x88c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <Set_Screen+0x884>)
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	4918      	ldr	r1, [pc, #96]	; (8002d2c <Set_Screen+0x878>)
 8002cca:	6889      	ldr	r1, [r1, #8]
 8002ccc:	9102      	str	r1, [sp, #8]
 8002cce:	9201      	str	r2, [sp, #4]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2378      	movs	r3, #120	; 0x78
 8002cd4:	220a      	movs	r2, #10
 8002cd6:	2115      	movs	r1, #21
 8002cd8:	4820      	ldr	r0, [pc, #128]	; (8002d5c <Set_Screen+0x8a8>)
 8002cda:	f003 fe69 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002cde:	e00e      	b.n	8002cfe <Set_Screen+0x84a>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Насос концентрата    ", 				21,  10, 120,        RedColor, BasicSymbolColor, Page[2]);
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <Set_Screen+0x880>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <Set_Screen+0x884>)
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	4910      	ldr	r1, [pc, #64]	; (8002d2c <Set_Screen+0x878>)
 8002cea:	6889      	ldr	r1, [r1, #8]
 8002cec:	9102      	str	r1, [sp, #8]
 8002cee:	9201      	str	r2, [sp, #4]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2378      	movs	r3, #120	; 0x78
 8002cf4:	220a      	movs	r2, #10
 8002cf6:	2115      	movs	r1, #21
 8002cf8:	4818      	ldr	r0, [pc, #96]	; (8002d5c <Set_Screen+0x8a8>)
 8002cfa:	f003 fe59 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.Bimetal)
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <Set_Screen+0x888>)
 8002d00:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d02b      	beq.n	8002d60 <Set_Screen+0x8ac>
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 120,      GreenColor, BasicSymbolColor, Page[2]);
 8002d08:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <Set_Screen+0x88c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <Set_Screen+0x884>)
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	4906      	ldr	r1, [pc, #24]	; (8002d2c <Set_Screen+0x878>)
 8002d12:	6889      	ldr	r1, [r1, #8]
 8002d14:	9102      	str	r1, [sp, #8]
 8002d16:	9201      	str	r2, [sp, #4]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2378      	movs	r3, #120	; 0x78
 8002d1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d20:	2108      	movs	r1, #8
 8002d22:	480d      	ldr	r0, [pc, #52]	; (8002d58 <Set_Screen+0x8a4>)
 8002d24:	f003 fe44 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002d28:	e02a      	b.n	8002d80 <Set_Screen+0x8cc>
 8002d2a:	bf00      	nop
 8002d2c:	20000984 	.word	0x20000984
 8002d30:	0800d5a0 	.word	0x0800d5a0
 8002d34:	20000000 	.word	0x20000000
 8002d38:	200009f8 	.word	0x200009f8
 8002d3c:	20000a64 	.word	0x20000a64
 8002d40:	20000004 	.word	0x20000004
 8002d44:	0800d5b4 	.word	0x0800d5b4
 8002d48:	20000b2c 	.word	0x20000b2c
 8002d4c:	20000008 	.word	0x20000008
 8002d50:	0801088c 	.word	0x0801088c
 8002d54:	0800d5c8 	.word	0x0800d5c8
 8002d58:	0800d5f4 	.word	0x0800d5f4
 8002d5c:	0800d604 	.word	0x0800d604
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 120,        RedColor, BasicSymbolColor, Page[2]);
 8002d60:	4ba2      	ldr	r3, [pc, #648]	; (8002fec <Set_Screen+0xb38>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4aa2      	ldr	r2, [pc, #648]	; (8002ff0 <Set_Screen+0xb3c>)
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	49a2      	ldr	r1, [pc, #648]	; (8002ff4 <Set_Screen+0xb40>)
 8002d6a:	6889      	ldr	r1, [r1, #8]
 8002d6c:	9102      	str	r1, [sp, #8]
 8002d6e:	9201      	str	r2, [sp, #4]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	2378      	movs	r3, #120	; 0x78
 8002d74:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d78:	2108      	movs	r1, #8
 8002d7a:	489f      	ldr	r0, [pc, #636]	; (8002ff8 <Set_Screen+0xb44>)
 8002d7c:	f003 fe18 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.State)
 8002d80:	4b9e      	ldr	r3, [pc, #632]	; (8002ffc <Set_Screen+0xb48>)
 8002d82:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00f      	beq.n	8002daa <Set_Screen+0x8f6>
			{
				Short_Left_Colored_RU_DrawString_32("Насос закач.концентр.", 				21,  10, 150,      GreenColor, BasicSymbolColor, Page[2]);
 8002d8a:	4b9d      	ldr	r3, [pc, #628]	; (8003000 <Set_Screen+0xb4c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a98      	ldr	r2, [pc, #608]	; (8002ff0 <Set_Screen+0xb3c>)
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	4998      	ldr	r1, [pc, #608]	; (8002ff4 <Set_Screen+0xb40>)
 8002d94:	6889      	ldr	r1, [r1, #8]
 8002d96:	9102      	str	r1, [sp, #8]
 8002d98:	9201      	str	r2, [sp, #4]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2396      	movs	r3, #150	; 0x96
 8002d9e:	220a      	movs	r2, #10
 8002da0:	2115      	movs	r1, #21
 8002da2:	4898      	ldr	r0, [pc, #608]	; (8003004 <Set_Screen+0xb50>)
 8002da4:	f003 fe04 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002da8:	e00e      	b.n	8002dc8 <Set_Screen+0x914>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Насос закач.концентр.", 				21,  10, 150,        RedColor, BasicSymbolColor, Page[2]);
 8002daa:	4b90      	ldr	r3, [pc, #576]	; (8002fec <Set_Screen+0xb38>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a90      	ldr	r2, [pc, #576]	; (8002ff0 <Set_Screen+0xb3c>)
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	4990      	ldr	r1, [pc, #576]	; (8002ff4 <Set_Screen+0xb40>)
 8002db4:	6889      	ldr	r1, [r1, #8]
 8002db6:	9102      	str	r1, [sp, #8]
 8002db8:	9201      	str	r2, [sp, #4]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2396      	movs	r3, #150	; 0x96
 8002dbe:	220a      	movs	r2, #10
 8002dc0:	2115      	movs	r1, #21
 8002dc2:	4890      	ldr	r0, [pc, #576]	; (8003004 <Set_Screen+0xb50>)
 8002dc4:	f003 fdf4 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.Bimetal)
 8002dc8:	4b8c      	ldr	r3, [pc, #560]	; (8002ffc <Set_Screen+0xb48>)
 8002dca:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d010      	beq.n	8002df4 <Set_Screen+0x940>
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 150,      GreenColor, BasicSymbolColor, Page[2]);
 8002dd2:	4b8b      	ldr	r3, [pc, #556]	; (8003000 <Set_Screen+0xb4c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a86      	ldr	r2, [pc, #536]	; (8002ff0 <Set_Screen+0xb3c>)
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	4986      	ldr	r1, [pc, #536]	; (8002ff4 <Set_Screen+0xb40>)
 8002ddc:	6889      	ldr	r1, [r1, #8]
 8002dde:	9102      	str	r1, [sp, #8]
 8002de0:	9201      	str	r2, [sp, #4]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2396      	movs	r3, #150	; 0x96
 8002de6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002dea:	2108      	movs	r1, #8
 8002dec:	4882      	ldr	r0, [pc, #520]	; (8002ff8 <Set_Screen+0xb44>)
 8002dee:	f003 fddf 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002df2:	e00f      	b.n	8002e14 <Set_Screen+0x960>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 150,        RedColor, BasicSymbolColor, Page[2]);
 8002df4:	4b7d      	ldr	r3, [pc, #500]	; (8002fec <Set_Screen+0xb38>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a7d      	ldr	r2, [pc, #500]	; (8002ff0 <Set_Screen+0xb3c>)
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	497d      	ldr	r1, [pc, #500]	; (8002ff4 <Set_Screen+0xb40>)
 8002dfe:	6889      	ldr	r1, [r1, #8]
 8002e00:	9102      	str	r1, [sp, #8]
 8002e02:	9201      	str	r2, [sp, #4]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2396      	movs	r3, #150	; 0x96
 8002e08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002e0c:	2108      	movs	r1, #8
 8002e0e:	487a      	ldr	r0, [pc, #488]	; (8002ff8 <Set_Screen+0xb44>)
 8002e10:	f003 fdce 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Flow,   	 1,  6, 0, 470, 184, Page[2]);
 8002e14:	4b79      	ldr	r3, [pc, #484]	; (8002ffc <Set_Screen+0xb48>)
 8002e16:	f9b3 0088 	ldrsh.w	r0, [r3, #136]	; 0x88
 8002e1a:	4b76      	ldr	r3, [pc, #472]	; (8002ff4 <Set_Screen+0xb40>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	9302      	str	r3, [sp, #8]
 8002e20:	23b8      	movs	r3, #184	; 0xb8
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2206      	movs	r2, #6
 8002e2e:	2101      	movs	r1, #1
 8002e30:	f004 fdde 	bl	80079f0 <Short_Centred_DrawNumber_16>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Volume, 	 0, 10, 0, 650, 184, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002e34:	4b71      	ldr	r3, [pc, #452]	; (8002ffc <Set_Screen+0xb48>)
 8002e36:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 8002e3a:	4b6e      	ldr	r3, [pc, #440]	; (8002ff4 <Set_Screen+0xb40>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	4a72      	ldr	r2, [pc, #456]	; (8003008 <Set_Screen+0xb54>)
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	496b      	ldr	r1, [pc, #428]	; (8002ff0 <Set_Screen+0xb3c>)
 8002e44:	6809      	ldr	r1, [r1, #0]
 8002e46:	2412      	movs	r4, #18
 8002e48:	9409      	str	r4, [sp, #36]	; 0x24
 8002e4a:	240b      	movs	r4, #11
 8002e4c:	9408      	str	r4, [sp, #32]
 8002e4e:	4c6f      	ldr	r4, [pc, #444]	; (800300c <Set_Screen+0xb58>)
 8002e50:	9407      	str	r4, [sp, #28]
 8002e52:	9106      	str	r1, [sp, #24]
 8002e54:	9205      	str	r2, [sp, #20]
 8002e56:	9304      	str	r3, [sp, #16]
 8002e58:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002e5c:	9303      	str	r3, [sp, #12]
 8002e5e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002e62:	9302      	str	r3, [sp, #8]
 8002e64:	23b8      	movs	r3, #184	; 0xb8
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	f240 238a 	movw	r3, #650	; 0x28a
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	220a      	movs	r2, #10
 8002e72:	2100      	movs	r1, #0
 8002e74:	f004 f90a 	bl	800708c <Centred_DrawNumber_16_32bit>

			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Flow, 		 1, 6, 0,  470, 364, Page[2]);
 8002e78:	4b60      	ldr	r3, [pc, #384]	; (8002ffc <Set_Screen+0xb48>)
 8002e7a:	f9b3 0080 	ldrsh.w	r0, [r3, #128]	; 0x80
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <Set_Screen+0xb40>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	9302      	str	r3, [sp, #8]
 8002e84:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2300      	movs	r3, #0
 8002e92:	2206      	movs	r2, #6
 8002e94:	2101      	movs	r1, #1
 8002e96:	f004 fdab 	bl	80079f0 <Short_Centred_DrawNumber_16>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Volume, 		 0, 10, 0, 650, 364, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002e9a:	4b58      	ldr	r3, [pc, #352]	; (8002ffc <Set_Screen+0xb48>)
 8002e9c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8002ea0:	4b54      	ldr	r3, [pc, #336]	; (8002ff4 <Set_Screen+0xb40>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a58      	ldr	r2, [pc, #352]	; (8003008 <Set_Screen+0xb54>)
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	4951      	ldr	r1, [pc, #324]	; (8002ff0 <Set_Screen+0xb3c>)
 8002eaa:	6809      	ldr	r1, [r1, #0]
 8002eac:	2412      	movs	r4, #18
 8002eae:	9409      	str	r4, [sp, #36]	; 0x24
 8002eb0:	240b      	movs	r4, #11
 8002eb2:	9408      	str	r4, [sp, #32]
 8002eb4:	4c55      	ldr	r4, [pc, #340]	; (800300c <Set_Screen+0xb58>)
 8002eb6:	9407      	str	r4, [sp, #28]
 8002eb8:	9106      	str	r1, [sp, #24]
 8002eba:	9205      	str	r2, [sp, #20]
 8002ebc:	9304      	str	r3, [sp, #16]
 8002ebe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002ec2:	9303      	str	r3, [sp, #12]
 8002ec4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002ec8:	9302      	str	r3, [sp, #8]
 8002eca:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	f240 238a 	movw	r3, #650	; 0x28a
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	220a      	movs	r2, #10
 8002eda:	2100      	movs	r1, #0
 8002edc:	f004 f8d6 	bl	800708c <Centred_DrawNumber_16_32bit>

			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Pressure_before_water_filters, 1, 6, 0,  673, 304, Page[2]);
 8002ee0:	4b46      	ldr	r3, [pc, #280]	; (8002ffc <Set_Screen+0xb48>)
 8002ee2:	f9b3 0090 	ldrsh.w	r0, [r3, #144]	; 0x90
 8002ee6:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <Set_Screen+0xb40>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	f240 23a1 	movw	r3, #673	; 0x2a1
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2206      	movs	r2, #6
 8002efc:	2101      	movs	r1, #1
 8002efe:	f004 fd77 	bl	80079f0 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Pressure_behind_water_filters, 1, 6, 0,  673, 334, Page[2]);
 8002f02:	4b3e      	ldr	r3, [pc, #248]	; (8002ffc <Set_Screen+0xb48>)
 8002f04:	f9b3 0092 	ldrsh.w	r0, [r3, #146]	; 0x92
 8002f08:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <Set_Screen+0xb40>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	9302      	str	r3, [sp, #8]
 8002f0e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	f240 23a1 	movw	r3, #673	; 0x2a1
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2206      	movs	r2, #6
 8002f1e:	2101      	movs	r1, #1
 8002f20:	f004 fd66 	bl	80079f0 <Short_Centred_DrawNumber_16>

			if(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_1)
 8002f24:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <Set_Screen+0xb48>)
 8002f26:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <Set_Screen+0xa9c>
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.1", 8,  20, 400,      GreenColor, BasicSymbolColor, Page[2]);
 8002f2e:	4b34      	ldr	r3, [pc, #208]	; (8003000 <Set_Screen+0xb4c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2f      	ldr	r2, [pc, #188]	; (8002ff0 <Set_Screen+0xb3c>)
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	492f      	ldr	r1, [pc, #188]	; (8002ff4 <Set_Screen+0xb40>)
 8002f38:	6889      	ldr	r1, [r1, #8]
 8002f3a:	9102      	str	r1, [sp, #8]
 8002f3c:	9201      	str	r2, [sp, #4]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f44:	2214      	movs	r2, #20
 8002f46:	2108      	movs	r1, #8
 8002f48:	4831      	ldr	r0, [pc, #196]	; (8003010 <Set_Screen+0xb5c>)
 8002f4a:	f003 fd31 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002f4e:	e00f      	b.n	8002f70 <Set_Screen+0xabc>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.1", 8,  20, 400,        RedColor, BasicSymbolColor, Page[2]);
 8002f50:	4b26      	ldr	r3, [pc, #152]	; (8002fec <Set_Screen+0xb38>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <Set_Screen+0xb3c>)
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	4926      	ldr	r1, [pc, #152]	; (8002ff4 <Set_Screen+0xb40>)
 8002f5a:	6889      	ldr	r1, [r1, #8]
 8002f5c:	9102      	str	r1, [sp, #8]
 8002f5e:	9201      	str	r2, [sp, #4]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f66:	2214      	movs	r2, #20
 8002f68:	2108      	movs	r1, #8
 8002f6a:	4829      	ldr	r0, [pc, #164]	; (8003010 <Set_Screen+0xb5c>)
 8002f6c:	f003 fd20 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}
			if(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_2)
 8002f70:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <Set_Screen+0xb48>)
 8002f72:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d010      	beq.n	8002f9c <Set_Screen+0xae8>
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.2", 8, 170, 400,      GreenColor, BasicSymbolColor, Page[2]);
 8002f7a:	4b21      	ldr	r3, [pc, #132]	; (8003000 <Set_Screen+0xb4c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <Set_Screen+0xb3c>)
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	491c      	ldr	r1, [pc, #112]	; (8002ff4 <Set_Screen+0xb40>)
 8002f84:	6889      	ldr	r1, [r1, #8]
 8002f86:	9102      	str	r1, [sp, #8]
 8002f88:	9201      	str	r2, [sp, #4]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f90:	22aa      	movs	r2, #170	; 0xaa
 8002f92:	2108      	movs	r1, #8
 8002f94:	481f      	ldr	r0, [pc, #124]	; (8003014 <Set_Screen+0xb60>)
 8002f96:	f003 fd0b 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002f9a:	e00f      	b.n	8002fbc <Set_Screen+0xb08>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.2", 8, 170, 400,        RedColor, BasicSymbolColor, Page[2]);
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <Set_Screen+0xb38>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <Set_Screen+0xb3c>)
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	4913      	ldr	r1, [pc, #76]	; (8002ff4 <Set_Screen+0xb40>)
 8002fa6:	6889      	ldr	r1, [r1, #8]
 8002fa8:	9102      	str	r1, [sp, #8]
 8002faa:	9201      	str	r2, [sp, #4]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002fb2:	22aa      	movs	r2, #170	; 0xaa
 8002fb4:	2108      	movs	r1, #8
 8002fb6:	4817      	ldr	r0, [pc, #92]	; (8003014 <Set_Screen+0xb60>)
 8002fb8:	f003 fcfa 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}
			if(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_3)
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <Set_Screen+0xb48>)
 8002fbe:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d02a      	beq.n	800301c <Set_Screen+0xb68>
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.3", 8, 320, 400,      GreenColor, BasicSymbolColor, Page[2]);
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <Set_Screen+0xb4c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <Set_Screen+0xb3c>)
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	4909      	ldr	r1, [pc, #36]	; (8002ff4 <Set_Screen+0xb40>)
 8002fd0:	6889      	ldr	r1, [r1, #8]
 8002fd2:	9102      	str	r1, [sp, #8]
 8002fd4:	9201      	str	r2, [sp, #4]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002fdc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fe0:	2108      	movs	r1, #8
 8002fe2:	480d      	ldr	r0, [pc, #52]	; (8003018 <Set_Screen+0xb64>)
 8002fe4:	f003 fce4 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8002fe8:	e029      	b.n	800303e <Set_Screen+0xb8a>
 8002fea:	bf00      	nop
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	200009f8 	.word	0x200009f8
 8002ff4:	20000984 	.word	0x20000984
 8002ff8:	0800d5f4 	.word	0x0800d5f4
 8002ffc:	20000a64 	.word	0x20000a64
 8003000:	20000004 	.word	0x20000004
 8003004:	0800d62c 	.word	0x0800d62c
 8003008:	20000008 	.word	0x20000008
 800300c:	0801088c 	.word	0x0801088c
 8003010:	0800d654 	.word	0x0800d654
 8003014:	0800d664 	.word	0x0800d664
 8003018:	0800d674 	.word	0x0800d674
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.3", 8, 320, 400,        RedColor, BasicSymbolColor, Page[2]);
 800301c:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <Set_Screen+0xc64>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a3e      	ldr	r2, [pc, #248]	; (800311c <Set_Screen+0xc68>)
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	493e      	ldr	r1, [pc, #248]	; (8003120 <Set_Screen+0xc6c>)
 8003026:	6889      	ldr	r1, [r1, #8]
 8003028:	9102      	str	r1, [sp, #8]
 800302a:	9201      	str	r2, [sp, #4]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003032:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003036:	2108      	movs	r1, #8
 8003038:	483a      	ldr	r0, [pc, #232]	; (8003124 <Set_Screen+0xc70>)
 800303a:	f003 fcb9 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Water_valve)
 800303e:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <Set_Screen+0xc74>)
 8003040:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d011      	beq.n	800306c <Set_Screen+0xbb8>
			{
				Short_Left_Colored_RU_DrawString_32("кл.воды ", 8, 470, 400,      GreenColor, BasicSymbolColor, Page[2]);
 8003048:	4b38      	ldr	r3, [pc, #224]	; (800312c <Set_Screen+0xc78>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a33      	ldr	r2, [pc, #204]	; (800311c <Set_Screen+0xc68>)
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	4933      	ldr	r1, [pc, #204]	; (8003120 <Set_Screen+0xc6c>)
 8003052:	6889      	ldr	r1, [r1, #8]
 8003054:	9102      	str	r1, [sp, #8]
 8003056:	9201      	str	r2, [sp, #4]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800305e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003062:	2108      	movs	r1, #8
 8003064:	4832      	ldr	r0, [pc, #200]	; (8003130 <Set_Screen+0xc7c>)
 8003066:	f003 fca3 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 800306a:	e010      	b.n	800308e <Set_Screen+0xbda>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.воды ", 8, 470, 400,        RedColor, BasicSymbolColor, Page[2]);
 800306c:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <Set_Screen+0xc64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2a      	ldr	r2, [pc, #168]	; (800311c <Set_Screen+0xc68>)
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	492a      	ldr	r1, [pc, #168]	; (8003120 <Set_Screen+0xc6c>)
 8003076:	6889      	ldr	r1, [r1, #8]
 8003078:	9102      	str	r1, [sp, #8]
 800307a:	9201      	str	r2, [sp, #4]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003082:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003086:	2108      	movs	r1, #8
 8003088:	4829      	ldr	r0, [pc, #164]	; (8003130 <Set_Screen+0xc7c>)
 800308a:	f003 fc91 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Concentrate_valve)
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <Set_Screen+0xc74>)
 8003090:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003094:	2b00      	cmp	r3, #0
 8003096:	d011      	beq.n	80030bc <Set_Screen+0xc08>
			{
				Short_Left_Colored_RU_DrawString_32("кл.конц ", 8, 620, 400,      GreenColor, BasicSymbolColor, Page[2]);
 8003098:	4b24      	ldr	r3, [pc, #144]	; (800312c <Set_Screen+0xc78>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1f      	ldr	r2, [pc, #124]	; (800311c <Set_Screen+0xc68>)
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	491f      	ldr	r1, [pc, #124]	; (8003120 <Set_Screen+0xc6c>)
 80030a2:	6889      	ldr	r1, [r1, #8]
 80030a4:	9102      	str	r1, [sp, #8]
 80030a6:	9201      	str	r2, [sp, #4]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80030ae:	f44f 721b 	mov.w	r2, #620	; 0x26c
 80030b2:	2108      	movs	r1, #8
 80030b4:	481f      	ldr	r0, [pc, #124]	; (8003134 <Set_Screen+0xc80>)
 80030b6:	f003 fc7b 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 80030ba:	e010      	b.n	80030de <Set_Screen+0xc2a>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.конц ", 8, 620, 400,        RedColor, BasicSymbolColor, Page[2]);
 80030bc:	4b16      	ldr	r3, [pc, #88]	; (8003118 <Set_Screen+0xc64>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a16      	ldr	r2, [pc, #88]	; (800311c <Set_Screen+0xc68>)
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	4916      	ldr	r1, [pc, #88]	; (8003120 <Set_Screen+0xc6c>)
 80030c6:	6889      	ldr	r1, [r1, #8]
 80030c8:	9102      	str	r1, [sp, #8]
 80030ca:	9201      	str	r2, [sp, #4]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80030d2:	f44f 721b 	mov.w	r2, #620	; 0x26c
 80030d6:	2108      	movs	r1, #8
 80030d8:	4816      	ldr	r0, [pc, #88]	; (8003134 <Set_Screen+0xc80>)
 80030da:	f003 fc69 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			Control_DB.RazrPointer 		= 0;
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <Set_Screen+0xc84>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	805a      	strh	r2, [r3, #2]

		break;
 80030e4:	f001 bbe7 	b.w	80048b6 <Set_Screen+0x2402>

		case 3: // Окно данные

			if(!PassW_block.DataClearingUnlock)
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <Set_Screen+0xc88>)
 80030ea:	7c1b      	ldrb	r3, [r3, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d12b      	bne.n	8003148 <Set_Screen+0xc94>
			{
				Control_DB.MenuPointerMAX 	= 0;
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <Set_Screen+0xc84>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	809a      	strh	r2, [r3, #4]
				Short_Left_Colored_RU_DrawString_32("ввод пароля для возм.обнуления:", 	31,	10,  50, FonColor[0], BasicSymbolColor, Page[3]);
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <Set_Screen+0xc8c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <Set_Screen+0xc68>)
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	4908      	ldr	r1, [pc, #32]	; (8003120 <Set_Screen+0xc6c>)
 8003100:	68c9      	ldr	r1, [r1, #12]
 8003102:	9102      	str	r1, [sp, #8]
 8003104:	9201      	str	r2, [sp, #4]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	2332      	movs	r3, #50	; 0x32
 800310a:	220a      	movs	r2, #10
 800310c:	211f      	movs	r1, #31
 800310e:	480d      	ldr	r0, [pc, #52]	; (8003144 <Set_Screen+0xc90>)
 8003110:	f003 fc4e 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8003114:	e02a      	b.n	800316c <Set_Screen+0xcb8>
 8003116:	bf00      	nop
 8003118:	20000000 	.word	0x20000000
 800311c:	200009f8 	.word	0x200009f8
 8003120:	20000984 	.word	0x20000984
 8003124:	0800d674 	.word	0x0800d674
 8003128:	20000a64 	.word	0x20000a64
 800312c:	20000004 	.word	0x20000004
 8003130:	0800d684 	.word	0x0800d684
 8003134:	0800d694 	.word	0x0800d694
 8003138:	20000b2c 	.word	0x20000b2c
 800313c:	20000a00 	.word	0x20000a00
 8003140:	200000a4 	.word	0x200000a4
 8003144:	0800d6a4 	.word	0x0800d6a4
			}
			else
			{
				Control_DB.MenuPointerMAX 	= 19;
 8003148:	4b9e      	ldr	r3, [pc, #632]	; (80033c4 <Set_Screen+0xf10>)
 800314a:	2213      	movs	r2, #19
 800314c:	809a      	strh	r2, [r3, #4]
				Short_Left_Colored_RU_DrawString_32("пароль подтвержден             ", 	31,	10,  50, FonColor[0], BasicSymbolColor, Page[3]);
 800314e:	4b9e      	ldr	r3, [pc, #632]	; (80033c8 <Set_Screen+0xf14>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a9e      	ldr	r2, [pc, #632]	; (80033cc <Set_Screen+0xf18>)
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	499e      	ldr	r1, [pc, #632]	; (80033d0 <Set_Screen+0xf1c>)
 8003158:	68c9      	ldr	r1, [r1, #12]
 800315a:	9102      	str	r1, [sp, #8]
 800315c:	9201      	str	r2, [sp, #4]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2332      	movs	r3, #50	; 0x32
 8003162:	220a      	movs	r2, #10
 8003164:	211f      	movs	r1, #31
 8003166:	489b      	ldr	r0, [pc, #620]	; (80033d4 <Set_Screen+0xf20>)
 8003168:	f003 fc22 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}
			Short_Left_Colored_RU_DrawString_32("МтЧс Агр.насосного 1", 	20,	10,  80, FonColor[1], BasicSymbolColor, Page[3]);
 800316c:	4b96      	ldr	r3, [pc, #600]	; (80033c8 <Set_Screen+0xf14>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4a96      	ldr	r2, [pc, #600]	; (80033cc <Set_Screen+0xf18>)
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	4996      	ldr	r1, [pc, #600]	; (80033d0 <Set_Screen+0xf1c>)
 8003176:	68c9      	ldr	r1, [r1, #12]
 8003178:	9102      	str	r1, [sp, #8]
 800317a:	9201      	str	r2, [sp, #4]
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	2350      	movs	r3, #80	; 0x50
 8003180:	220a      	movs	r2, #10
 8003182:	2114      	movs	r1, #20
 8003184:	4894      	ldr	r0, [pc, #592]	; (80033d8 <Set_Screen+0xf24>)
 8003186:	f003 fc13 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс Агр.насосного 2", 	20,	10, 110, FonColor[2], BasicSymbolColor, Page[3]);
 800318a:	4b8f      	ldr	r3, [pc, #572]	; (80033c8 <Set_Screen+0xf14>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	4a8f      	ldr	r2, [pc, #572]	; (80033cc <Set_Screen+0xf18>)
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	498f      	ldr	r1, [pc, #572]	; (80033d0 <Set_Screen+0xf1c>)
 8003194:	68c9      	ldr	r1, [r1, #12]
 8003196:	9102      	str	r1, [sp, #8]
 8003198:	9201      	str	r2, [sp, #4]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	236e      	movs	r3, #110	; 0x6e
 800319e:	220a      	movs	r2, #10
 80031a0:	2114      	movs	r1, #20
 80031a2:	488e      	ldr	r0, [pc, #568]	; (80033dc <Set_Screen+0xf28>)
 80031a4:	f003 fc04 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс Агр.насосного 3", 	20,	10, 140, FonColor[3], BasicSymbolColor, Page[3]);
 80031a8:	4b87      	ldr	r3, [pc, #540]	; (80033c8 <Set_Screen+0xf14>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a87      	ldr	r2, [pc, #540]	; (80033cc <Set_Screen+0xf18>)
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	4987      	ldr	r1, [pc, #540]	; (80033d0 <Set_Screen+0xf1c>)
 80031b2:	68c9      	ldr	r1, [r1, #12]
 80031b4:	9102      	str	r1, [sp, #8]
 80031b6:	9201      	str	r2, [sp, #4]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	238c      	movs	r3, #140	; 0x8c
 80031bc:	220a      	movs	r2, #10
 80031be:	2114      	movs	r1, #20
 80031c0:	4887      	ldr	r0, [pc, #540]	; (80033e0 <Set_Screen+0xf2c>)
 80031c2:	f003 fbf5 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс циркуляц насоса", 	20,	10, 170, FonColor[4], BasicSymbolColor, Page[3]);
 80031c6:	4b80      	ldr	r3, [pc, #512]	; (80033c8 <Set_Screen+0xf14>)
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	4a80      	ldr	r2, [pc, #512]	; (80033cc <Set_Screen+0xf18>)
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	4980      	ldr	r1, [pc, #512]	; (80033d0 <Set_Screen+0xf1c>)
 80031d0:	68c9      	ldr	r1, [r1, #12]
 80031d2:	9102      	str	r1, [sp, #8]
 80031d4:	9201      	str	r2, [sp, #4]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	23aa      	movs	r3, #170	; 0xaa
 80031da:	220a      	movs	r2, #10
 80031dc:	2114      	movs	r1, #20
 80031de:	4881      	ldr	r0, [pc, #516]	; (80033e4 <Set_Screen+0xf30>)
 80031e0:	f003 fbe6 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс насоса концентр", 	20,	10, 200, FonColor[5], BasicSymbolColor, Page[3]);
 80031e4:	4b78      	ldr	r3, [pc, #480]	; (80033c8 <Set_Screen+0xf14>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	4a78      	ldr	r2, [pc, #480]	; (80033cc <Set_Screen+0xf18>)
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	4978      	ldr	r1, [pc, #480]	; (80033d0 <Set_Screen+0xf1c>)
 80031ee:	68c9      	ldr	r1, [r1, #12]
 80031f0:	9102      	str	r1, [sp, #8]
 80031f2:	9201      	str	r2, [sp, #4]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	23c8      	movs	r3, #200	; 0xc8
 80031f8:	220a      	movs	r2, #10
 80031fa:	2114      	movs	r1, #20
 80031fc:	487a      	ldr	r0, [pc, #488]	; (80033e8 <Set_Screen+0xf34>)
 80031fe:	f003 fbd7 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс нас.закач.конц ", 	20,	10, 230, FonColor[6], BasicSymbolColor, Page[3]);
 8003202:	4b71      	ldr	r3, [pc, #452]	; (80033c8 <Set_Screen+0xf14>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	4a71      	ldr	r2, [pc, #452]	; (80033cc <Set_Screen+0xf18>)
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	4971      	ldr	r1, [pc, #452]	; (80033d0 <Set_Screen+0xf1c>)
 800320c:	68c9      	ldr	r1, [r1, #12]
 800320e:	9102      	str	r1, [sp, #8]
 8003210:	9201      	str	r2, [sp, #4]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	23e6      	movs	r3, #230	; 0xe6
 8003216:	220a      	movs	r2, #10
 8003218:	2114      	movs	r1, #20
 800321a:	4874      	ldr	r0, [pc, #464]	; (80033ec <Set_Screen+0xf38>)
 800321c:	f003 fbc8 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit_controled(&PassW_block.PassWord, 0,  4, Control_DB.RazrPointer, 9999, 0, 620,  50, 800,480, Page[3], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003220:	4b68      	ldr	r3, [pc, #416]	; (80033c4 <Set_Screen+0xf10>)
 8003222:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003226:	461c      	mov	r4, r3
 8003228:	4b69      	ldr	r3, [pc, #420]	; (80033d0 <Set_Screen+0xf1c>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a66      	ldr	r2, [pc, #408]	; (80033c8 <Set_Screen+0xf14>)
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	4966      	ldr	r1, [pc, #408]	; (80033cc <Set_Screen+0xf18>)
 8003232:	6809      	ldr	r1, [r1, #0]
 8003234:	2012      	movs	r0, #18
 8003236:	900b      	str	r0, [sp, #44]	; 0x2c
 8003238:	200b      	movs	r0, #11
 800323a:	900a      	str	r0, [sp, #40]	; 0x28
 800323c:	486c      	ldr	r0, [pc, #432]	; (80033f0 <Set_Screen+0xf3c>)
 800323e:	9009      	str	r0, [sp, #36]	; 0x24
 8003240:	9108      	str	r1, [sp, #32]
 8003242:	9207      	str	r2, [sp, #28]
 8003244:	9306      	str	r3, [sp, #24]
 8003246:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800324a:	9305      	str	r3, [sp, #20]
 800324c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003250:	9304      	str	r3, [sp, #16]
 8003252:	2332      	movs	r3, #50	; 0x32
 8003254:	9303      	str	r3, [sp, #12]
 8003256:	f44f 731b 	mov.w	r3, #620	; 0x26c
 800325a:	9302      	str	r3, [sp, #8]
 800325c:	2300      	movs	r3, #0
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	f242 730f 	movw	r3, #9999	; 0x270f
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	4623      	mov	r3, r4
 8003268:	2204      	movs	r2, #4
 800326a:	2100      	movs	r1, #0
 800326c:	4861      	ldr	r0, [pc, #388]	; (80033f4 <Set_Screen+0xf40>)
 800326e:	f004 f93d 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_1.Pump.MotoClock, 								0, 10, 0,  440,  83, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003272:	4b61      	ldr	r3, [pc, #388]	; (80033f8 <Set_Screen+0xf44>)
 8003274:	68d8      	ldr	r0, [r3, #12]
 8003276:	4b56      	ldr	r3, [pc, #344]	; (80033d0 <Set_Screen+0xf1c>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	4a60      	ldr	r2, [pc, #384]	; (80033fc <Set_Screen+0xf48>)
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	4953      	ldr	r1, [pc, #332]	; (80033cc <Set_Screen+0xf18>)
 8003280:	6809      	ldr	r1, [r1, #0]
 8003282:	2412      	movs	r4, #18
 8003284:	9409      	str	r4, [sp, #36]	; 0x24
 8003286:	240b      	movs	r4, #11
 8003288:	9408      	str	r4, [sp, #32]
 800328a:	4c59      	ldr	r4, [pc, #356]	; (80033f0 <Set_Screen+0xf3c>)
 800328c:	9407      	str	r4, [sp, #28]
 800328e:	9106      	str	r1, [sp, #24]
 8003290:	9205      	str	r2, [sp, #20]
 8003292:	9304      	str	r3, [sp, #16]
 8003294:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003298:	9303      	str	r3, [sp, #12]
 800329a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800329e:	9302      	str	r3, [sp, #8]
 80032a0:	2353      	movs	r3, #83	; 0x53
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	220a      	movs	r2, #10
 80032ae:	2100      	movs	r1, #0
 80032b0:	f003 feec 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_2.Pump.MotoClock, 								0, 10, 0,  440, 113, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80032b4:	4b50      	ldr	r3, [pc, #320]	; (80033f8 <Set_Screen+0xf44>)
 80032b6:	6a18      	ldr	r0, [r3, #32]
 80032b8:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <Set_Screen+0xf1c>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a4f      	ldr	r2, [pc, #316]	; (80033fc <Set_Screen+0xf48>)
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	4942      	ldr	r1, [pc, #264]	; (80033cc <Set_Screen+0xf18>)
 80032c2:	6809      	ldr	r1, [r1, #0]
 80032c4:	2412      	movs	r4, #18
 80032c6:	9409      	str	r4, [sp, #36]	; 0x24
 80032c8:	240b      	movs	r4, #11
 80032ca:	9408      	str	r4, [sp, #32]
 80032cc:	4c48      	ldr	r4, [pc, #288]	; (80033f0 <Set_Screen+0xf3c>)
 80032ce:	9407      	str	r4, [sp, #28]
 80032d0:	9106      	str	r1, [sp, #24]
 80032d2:	9205      	str	r2, [sp, #20]
 80032d4:	9304      	str	r3, [sp, #16]
 80032d6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80032da:	9303      	str	r3, [sp, #12]
 80032dc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80032e0:	9302      	str	r3, [sp, #8]
 80032e2:	2371      	movs	r3, #113	; 0x71
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	220a      	movs	r2, #10
 80032f0:	2100      	movs	r1, #0
 80032f2:	f003 fecb 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_3.Pump.MotoClock, 								0, 10, 0,  440, 143, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80032f6:	4b40      	ldr	r3, [pc, #256]	; (80033f8 <Set_Screen+0xf44>)
 80032f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80032fa:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <Set_Screen+0xf1c>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	4a3f      	ldr	r2, [pc, #252]	; (80033fc <Set_Screen+0xf48>)
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	4932      	ldr	r1, [pc, #200]	; (80033cc <Set_Screen+0xf18>)
 8003304:	6809      	ldr	r1, [r1, #0]
 8003306:	2412      	movs	r4, #18
 8003308:	9409      	str	r4, [sp, #36]	; 0x24
 800330a:	240b      	movs	r4, #11
 800330c:	9408      	str	r4, [sp, #32]
 800330e:	4c38      	ldr	r4, [pc, #224]	; (80033f0 <Set_Screen+0xf3c>)
 8003310:	9407      	str	r4, [sp, #28]
 8003312:	9106      	str	r1, [sp, #24]
 8003314:	9205      	str	r2, [sp, #20]
 8003316:	9304      	str	r3, [sp, #16]
 8003318:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800331c:	9303      	str	r3, [sp, #12]
 800331e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003322:	9302      	str	r3, [sp, #8]
 8003324:	238f      	movs	r3, #143	; 0x8f
 8003326:	9301      	str	r3, [sp, #4]
 8003328:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2300      	movs	r3, #0
 8003330:	220a      	movs	r2, #10
 8003332:	2100      	movs	r1, #0
 8003334:	f003 feaa 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.MotoClock, 			0, 10, 0,  440, 173, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <Set_Screen+0xf44>)
 800333a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <Set_Screen+0xf1c>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a2e      	ldr	r2, [pc, #184]	; (80033fc <Set_Screen+0xf48>)
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	4921      	ldr	r1, [pc, #132]	; (80033cc <Set_Screen+0xf18>)
 8003346:	6809      	ldr	r1, [r1, #0]
 8003348:	2412      	movs	r4, #18
 800334a:	9409      	str	r4, [sp, #36]	; 0x24
 800334c:	240b      	movs	r4, #11
 800334e:	9408      	str	r4, [sp, #32]
 8003350:	4c27      	ldr	r4, [pc, #156]	; (80033f0 <Set_Screen+0xf3c>)
 8003352:	9407      	str	r4, [sp, #28]
 8003354:	9106      	str	r1, [sp, #24]
 8003356:	9205      	str	r2, [sp, #20]
 8003358:	9304      	str	r3, [sp, #16]
 800335a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800335e:	9303      	str	r3, [sp, #12]
 8003360:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003364:	9302      	str	r3, [sp, #8]
 8003366:	23ad      	movs	r3, #173	; 0xad
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2300      	movs	r3, #0
 8003372:	220a      	movs	r2, #10
 8003374:	2100      	movs	r1, #0
 8003376:	f003 fe89 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.MotoClock, 			0, 10, 0,  440, 203, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <Set_Screen+0xf44>)
 800337c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <Set_Screen+0xf1c>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <Set_Screen+0xf48>)
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	4911      	ldr	r1, [pc, #68]	; (80033cc <Set_Screen+0xf18>)
 8003388:	6809      	ldr	r1, [r1, #0]
 800338a:	2412      	movs	r4, #18
 800338c:	9409      	str	r4, [sp, #36]	; 0x24
 800338e:	240b      	movs	r4, #11
 8003390:	9408      	str	r4, [sp, #32]
 8003392:	4c17      	ldr	r4, [pc, #92]	; (80033f0 <Set_Screen+0xf3c>)
 8003394:	9407      	str	r4, [sp, #28]
 8003396:	9106      	str	r1, [sp, #24]
 8003398:	9205      	str	r2, [sp, #20]
 800339a:	9304      	str	r3, [sp, #16]
 800339c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80033a0:	9303      	str	r3, [sp, #12]
 80033a2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80033a6:	9302      	str	r3, [sp, #8]
 80033a8:	23cb      	movs	r3, #203	; 0xcb
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2300      	movs	r3, #0
 80033b4:	220a      	movs	r2, #10
 80033b6:	2100      	movs	r1, #0
 80033b8:	f003 fe68 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.MotoClock, 0, 10, 0,  440, 233, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <Set_Screen+0xf44>)
 80033be:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80033c0:	e01e      	b.n	8003400 <Set_Screen+0xf4c>
 80033c2:	bf00      	nop
 80033c4:	20000b2c 	.word	0x20000b2c
 80033c8:	200000a4 	.word	0x200000a4
 80033cc:	200009f8 	.word	0x200009f8
 80033d0:	20000984 	.word	0x20000984
 80033d4:	0800d6e0 	.word	0x0800d6e0
 80033d8:	0800d714 	.word	0x0800d714
 80033dc:	0800d73c 	.word	0x0800d73c
 80033e0:	0800d764 	.word	0x0800d764
 80033e4:	0800d78c 	.word	0x0800d78c
 80033e8:	0800d7b4 	.word	0x0800d7b4
 80033ec:	0800d7dc 	.word	0x0800d7dc
 80033f0:	0801088c 	.word	0x0801088c
 80033f4:	20000a00 	.word	0x20000a00
 80033f8:	20000a64 	.word	0x20000a64
 80033fc:	20000008 	.word	0x20000008
 8003400:	4b9f      	ldr	r3, [pc, #636]	; (8003680 <Set_Screen+0x11cc>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a9f      	ldr	r2, [pc, #636]	; (8003684 <Set_Screen+0x11d0>)
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	499f      	ldr	r1, [pc, #636]	; (8003688 <Set_Screen+0x11d4>)
 800340a:	6809      	ldr	r1, [r1, #0]
 800340c:	2412      	movs	r4, #18
 800340e:	9409      	str	r4, [sp, #36]	; 0x24
 8003410:	240b      	movs	r4, #11
 8003412:	9408      	str	r4, [sp, #32]
 8003414:	4c9d      	ldr	r4, [pc, #628]	; (800368c <Set_Screen+0x11d8>)
 8003416:	9407      	str	r4, [sp, #28]
 8003418:	9106      	str	r1, [sp, #24]
 800341a:	9205      	str	r2, [sp, #20]
 800341c:	9304      	str	r3, [sp, #16]
 800341e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003422:	9303      	str	r3, [sp, #12]
 8003424:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003428:	9302      	str	r3, [sp, #8]
 800342a:	23e9      	movs	r3, #233	; 0xe9
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2300      	movs	r3, #0
 8003436:	220a      	movs	r2, #10
 8003438:	2100      	movs	r1, #0
 800343a:	f003 fe27 	bl	800708c <Centred_DrawNumber_16_32bit>

			Short_Left_Colored_RU_DrawString_32("Ср-ки авт.разгр АНН1", 	20,	10, 260, FonColor[7], BasicSymbolColor, Page[3]);
 800343e:	4b94      	ldr	r3, [pc, #592]	; (8003690 <Set_Screen+0x11dc>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4a91      	ldr	r2, [pc, #580]	; (8003688 <Set_Screen+0x11d4>)
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	498e      	ldr	r1, [pc, #568]	; (8003680 <Set_Screen+0x11cc>)
 8003448:	68c9      	ldr	r1, [r1, #12]
 800344a:	9102      	str	r1, [sp, #8]
 800344c:	9201      	str	r2, [sp, #4]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003454:	220a      	movs	r2, #10
 8003456:	2114      	movs	r1, #20
 8003458:	488e      	ldr	r0, [pc, #568]	; (8003694 <Set_Screen+0x11e0>)
 800345a:	f003 faa9 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Ср-ки авт.разгр АНН2", 	20,	10, 290, FonColor[8], BasicSymbolColor, Page[3]);
 800345e:	4b8c      	ldr	r3, [pc, #560]	; (8003690 <Set_Screen+0x11dc>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4a89      	ldr	r2, [pc, #548]	; (8003688 <Set_Screen+0x11d4>)
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	4986      	ldr	r1, [pc, #536]	; (8003680 <Set_Screen+0x11cc>)
 8003468:	68c9      	ldr	r1, [r1, #12]
 800346a:	9102      	str	r1, [sp, #8]
 800346c:	9201      	str	r2, [sp, #4]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003474:	220a      	movs	r2, #10
 8003476:	2114      	movs	r1, #20
 8003478:	4887      	ldr	r0, [pc, #540]	; (8003698 <Set_Screen+0x11e4>)
 800347a:	f003 fa99 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Ср-ки авт.разгр АНН3", 	20,	10, 320, FonColor[9], BasicSymbolColor, Page[3]);
 800347e:	4b84      	ldr	r3, [pc, #528]	; (8003690 <Set_Screen+0x11dc>)
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	4a81      	ldr	r2, [pc, #516]	; (8003688 <Set_Screen+0x11d4>)
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	497e      	ldr	r1, [pc, #504]	; (8003680 <Set_Screen+0x11cc>)
 8003488:	68c9      	ldr	r1, [r1, #12]
 800348a:	9102      	str	r1, [sp, #8]
 800348c:	9201      	str	r2, [sp, #4]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003494:	220a      	movs	r2, #10
 8003496:	2114      	movs	r1, #20
 8003498:	4880      	ldr	r0, [pc, #512]	; (800369c <Set_Screen+0x11e8>)
 800349a:	f003 fa89 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_1.Unload_counter, 	 0, 10, 0,  440, 263, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800349e:	4b80      	ldr	r3, [pc, #512]	; (80036a0 <Set_Screen+0x11ec>)
 80034a0:	6998      	ldr	r0, [r3, #24]
 80034a2:	4b77      	ldr	r3, [pc, #476]	; (8003680 <Set_Screen+0x11cc>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	4a77      	ldr	r2, [pc, #476]	; (8003684 <Set_Screen+0x11d0>)
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	4977      	ldr	r1, [pc, #476]	; (8003688 <Set_Screen+0x11d4>)
 80034ac:	6809      	ldr	r1, [r1, #0]
 80034ae:	2412      	movs	r4, #18
 80034b0:	9409      	str	r4, [sp, #36]	; 0x24
 80034b2:	240b      	movs	r4, #11
 80034b4:	9408      	str	r4, [sp, #32]
 80034b6:	4c75      	ldr	r4, [pc, #468]	; (800368c <Set_Screen+0x11d8>)
 80034b8:	9407      	str	r4, [sp, #28]
 80034ba:	9106      	str	r1, [sp, #24]
 80034bc:	9205      	str	r2, [sp, #20]
 80034be:	9304      	str	r3, [sp, #16]
 80034c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80034c4:	9303      	str	r3, [sp, #12]
 80034c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80034ca:	9302      	str	r3, [sp, #8]
 80034cc:	f240 1307 	movw	r3, #263	; 0x107
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2300      	movs	r3, #0
 80034da:	220a      	movs	r2, #10
 80034dc:	2100      	movs	r1, #0
 80034de:	f003 fdd5 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_2.Unload_counter, 	 0, 10, 0,  440, 293, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80034e2:	4b6f      	ldr	r3, [pc, #444]	; (80036a0 <Set_Screen+0x11ec>)
 80034e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80034e6:	4b66      	ldr	r3, [pc, #408]	; (8003680 <Set_Screen+0x11cc>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	4a66      	ldr	r2, [pc, #408]	; (8003684 <Set_Screen+0x11d0>)
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	4966      	ldr	r1, [pc, #408]	; (8003688 <Set_Screen+0x11d4>)
 80034f0:	6809      	ldr	r1, [r1, #0]
 80034f2:	2412      	movs	r4, #18
 80034f4:	9409      	str	r4, [sp, #36]	; 0x24
 80034f6:	240b      	movs	r4, #11
 80034f8:	9408      	str	r4, [sp, #32]
 80034fa:	4c64      	ldr	r4, [pc, #400]	; (800368c <Set_Screen+0x11d8>)
 80034fc:	9407      	str	r4, [sp, #28]
 80034fe:	9106      	str	r1, [sp, #24]
 8003500:	9205      	str	r2, [sp, #20]
 8003502:	9304      	str	r3, [sp, #16]
 8003504:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003508:	9303      	str	r3, [sp, #12]
 800350a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	f240 1325 	movw	r3, #293	; 0x125
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2300      	movs	r3, #0
 800351e:	220a      	movs	r2, #10
 8003520:	2100      	movs	r1, #0
 8003522:	f003 fdb3 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_3.Unload_counter, 	 0, 10, 0,  440, 323, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003526:	4b5e      	ldr	r3, [pc, #376]	; (80036a0 <Set_Screen+0x11ec>)
 8003528:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800352a:	4b55      	ldr	r3, [pc, #340]	; (8003680 <Set_Screen+0x11cc>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4a55      	ldr	r2, [pc, #340]	; (8003684 <Set_Screen+0x11d0>)
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	4955      	ldr	r1, [pc, #340]	; (8003688 <Set_Screen+0x11d4>)
 8003534:	6809      	ldr	r1, [r1, #0]
 8003536:	2412      	movs	r4, #18
 8003538:	9409      	str	r4, [sp, #36]	; 0x24
 800353a:	240b      	movs	r4, #11
 800353c:	9408      	str	r4, [sp, #32]
 800353e:	4c53      	ldr	r4, [pc, #332]	; (800368c <Set_Screen+0x11d8>)
 8003540:	9407      	str	r4, [sp, #28]
 8003542:	9106      	str	r1, [sp, #24]
 8003544:	9205      	str	r2, [sp, #20]
 8003546:	9304      	str	r3, [sp, #16]
 8003548:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800354c:	9303      	str	r3, [sp, #12]
 800354e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003552:	9302      	str	r3, [sp, #8]
 8003554:	f240 1343 	movw	r3, #323	; 0x143
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	220a      	movs	r2, #10
 8003564:	2100      	movs	r1, #0
 8003566:	f003 fd91 	bl	800708c <Centred_DrawNumber_16_32bit>

			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.1.эмульс", 	20,	10, 350, FonColor[10], BasicSymbolColor, Page[3]);
 800356a:	4b49      	ldr	r3, [pc, #292]	; (8003690 <Set_Screen+0x11dc>)
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	4a46      	ldr	r2, [pc, #280]	; (8003688 <Set_Screen+0x11d4>)
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	4943      	ldr	r1, [pc, #268]	; (8003680 <Set_Screen+0x11cc>)
 8003574:	68c9      	ldr	r1, [r1, #12]
 8003576:	9102      	str	r1, [sp, #8]
 8003578:	9201      	str	r2, [sp, #4]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003580:	220a      	movs	r2, #10
 8003582:	2114      	movs	r1, #20
 8003584:	4847      	ldr	r0, [pc, #284]	; (80036a4 <Set_Screen+0x11f0>)
 8003586:	f003 fa13 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.2.эмульс", 	20,	10, 380, FonColor[11], BasicSymbolColor, Page[3]);
 800358a:	4b41      	ldr	r3, [pc, #260]	; (8003690 <Set_Screen+0x11dc>)
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	4a3e      	ldr	r2, [pc, #248]	; (8003688 <Set_Screen+0x11d4>)
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	493b      	ldr	r1, [pc, #236]	; (8003680 <Set_Screen+0x11cc>)
 8003594:	68c9      	ldr	r1, [r1, #12]
 8003596:	9102      	str	r1, [sp, #8]
 8003598:	9201      	str	r2, [sp, #4]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	f44f 73be 	mov.w	r3, #380	; 0x17c
 80035a0:	220a      	movs	r2, #10
 80035a2:	2114      	movs	r1, #20
 80035a4:	4840      	ldr	r0, [pc, #256]	; (80036a8 <Set_Screen+0x11f4>)
 80035a6:	f003 fa03 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.1.воды  ", 	20,	10, 410, FonColor[12], BasicSymbolColor, Page[3]);
 80035aa:	4b39      	ldr	r3, [pc, #228]	; (8003690 <Set_Screen+0x11dc>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a36      	ldr	r2, [pc, #216]	; (8003688 <Set_Screen+0x11d4>)
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	4933      	ldr	r1, [pc, #204]	; (8003680 <Set_Screen+0x11cc>)
 80035b4:	68c9      	ldr	r1, [r1, #12]
 80035b6:	9102      	str	r1, [sp, #8]
 80035b8:	9201      	str	r2, [sp, #4]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80035c0:	220a      	movs	r2, #10
 80035c2:	2114      	movs	r1, #20
 80035c4:	4839      	ldr	r0, [pc, #228]	; (80036ac <Set_Screen+0x11f8>)
 80035c6:	f003 f9f3 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.2.воды  ", 	20,	10, 440, FonColor[13], BasicSymbolColor, Page[3]);
 80035ca:	4b31      	ldr	r3, [pc, #196]	; (8003690 <Set_Screen+0x11dc>)
 80035cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ce:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <Set_Screen+0x11d4>)
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	492b      	ldr	r1, [pc, #172]	; (8003680 <Set_Screen+0x11cc>)
 80035d4:	68c9      	ldr	r1, [r1, #12]
 80035d6:	9102      	str	r1, [sp, #8]
 80035d8:	9201      	str	r2, [sp, #4]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80035e0:	220a      	movs	r2, #10
 80035e2:	2114      	movs	r1, #20
 80035e4:	4832      	ldr	r0, [pc, #200]	; (80036b0 <Set_Screen+0x11fc>)
 80035e6:	f003 f9e3 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.3.воды  ", 	20,	10, 470, FonColor[14], BasicSymbolColor, Page[3]);
 80035ea:	4b29      	ldr	r3, [pc, #164]	; (8003690 <Set_Screen+0x11dc>)
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	4a26      	ldr	r2, [pc, #152]	; (8003688 <Set_Screen+0x11d4>)
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	4923      	ldr	r1, [pc, #140]	; (8003680 <Set_Screen+0x11cc>)
 80035f4:	68c9      	ldr	r1, [r1, #12]
 80035f6:	9102      	str	r1, [sp, #8]
 80035f8:	9201      	str	r2, [sp, #4]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003600:	220a      	movs	r2, #10
 8003602:	2114      	movs	r1, #20
 8003604:	482b      	ldr	r0, [pc, #172]	; (80036b4 <Set_Screen+0x1200>)
 8003606:	f003 f9d3 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Flush_valve_1_counter, 			0, 10, 0,  440, 353, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800360a:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <Set_Screen+0x11ec>)
 800360c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800360e:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <Set_Screen+0x11cc>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <Set_Screen+0x11d0>)
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	491c      	ldr	r1, [pc, #112]	; (8003688 <Set_Screen+0x11d4>)
 8003618:	6809      	ldr	r1, [r1, #0]
 800361a:	2412      	movs	r4, #18
 800361c:	9409      	str	r4, [sp, #36]	; 0x24
 800361e:	240b      	movs	r4, #11
 8003620:	9408      	str	r4, [sp, #32]
 8003622:	4c1a      	ldr	r4, [pc, #104]	; (800368c <Set_Screen+0x11d8>)
 8003624:	9407      	str	r4, [sp, #28]
 8003626:	9106      	str	r1, [sp, #24]
 8003628:	9205      	str	r2, [sp, #20]
 800362a:	9304      	str	r3, [sp, #16]
 800362c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003630:	9303      	str	r3, [sp, #12]
 8003632:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003636:	9302      	str	r3, [sp, #8]
 8003638:	f240 1361 	movw	r3, #353	; 0x161
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2300      	movs	r3, #0
 8003646:	220a      	movs	r2, #10
 8003648:	2100      	movs	r1, #0
 800364a:	f003 fd1f 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Flush_valve_2_counter, 			0, 10, 0,  440, 383, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <Set_Screen+0x11ec>)
 8003650:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <Set_Screen+0x11cc>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <Set_Screen+0x11d0>)
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	490b      	ldr	r1, [pc, #44]	; (8003688 <Set_Screen+0x11d4>)
 800365c:	6809      	ldr	r1, [r1, #0]
 800365e:	2412      	movs	r4, #18
 8003660:	9409      	str	r4, [sp, #36]	; 0x24
 8003662:	240b      	movs	r4, #11
 8003664:	9408      	str	r4, [sp, #32]
 8003666:	4c09      	ldr	r4, [pc, #36]	; (800368c <Set_Screen+0x11d8>)
 8003668:	9407      	str	r4, [sp, #28]
 800366a:	9106      	str	r1, [sp, #24]
 800366c:	9205      	str	r2, [sp, #20]
 800366e:	9304      	str	r3, [sp, #16]
 8003670:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003674:	9303      	str	r3, [sp, #12]
 8003676:	f44f 7348 	mov.w	r3, #800	; 0x320
 800367a:	9302      	str	r3, [sp, #8]
 800367c:	e01c      	b.n	80036b8 <Set_Screen+0x1204>
 800367e:	bf00      	nop
 8003680:	20000984 	.word	0x20000984
 8003684:	20000008 	.word	0x20000008
 8003688:	200009f8 	.word	0x200009f8
 800368c:	0801088c 	.word	0x0801088c
 8003690:	200000a4 	.word	0x200000a4
 8003694:	0800d804 	.word	0x0800d804
 8003698:	0800d828 	.word	0x0800d828
 800369c:	0800d84c 	.word	0x0800d84c
 80036a0:	20000a64 	.word	0x20000a64
 80036a4:	0800d870 	.word	0x0800d870
 80036a8:	0800d894 	.word	0x0800d894
 80036ac:	0800d8b8 	.word	0x0800d8b8
 80036b0:	0800d8dc 	.word	0x0800d8dc
 80036b4:	0800d900 	.word	0x0800d900
 80036b8:	f240 137f 	movw	r3, #383	; 0x17f
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2300      	movs	r3, #0
 80036c6:	220a      	movs	r2, #10
 80036c8:	2100      	movs	r1, #0
 80036ca:	f003 fcdf 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_1_counter, 	0, 10, 0,  440, 413, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80036ce:	4ba4      	ldr	r3, [pc, #656]	; (8003960 <Set_Screen+0x14ac>)
 80036d0:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80036d4:	4ba3      	ldr	r3, [pc, #652]	; (8003964 <Set_Screen+0x14b0>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4aa3      	ldr	r2, [pc, #652]	; (8003968 <Set_Screen+0x14b4>)
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	49a3      	ldr	r1, [pc, #652]	; (800396c <Set_Screen+0x14b8>)
 80036de:	6809      	ldr	r1, [r1, #0]
 80036e0:	2412      	movs	r4, #18
 80036e2:	9409      	str	r4, [sp, #36]	; 0x24
 80036e4:	240b      	movs	r4, #11
 80036e6:	9408      	str	r4, [sp, #32]
 80036e8:	4ca1      	ldr	r4, [pc, #644]	; (8003970 <Set_Screen+0x14bc>)
 80036ea:	9407      	str	r4, [sp, #28]
 80036ec:	9106      	str	r1, [sp, #24]
 80036ee:	9205      	str	r2, [sp, #20]
 80036f0:	9304      	str	r3, [sp, #16]
 80036f2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80036f6:	9303      	str	r3, [sp, #12]
 80036f8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80036fc:	9302      	str	r3, [sp, #8]
 80036fe:	f240 139d 	movw	r3, #413	; 0x19d
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2300      	movs	r3, #0
 800370c:	220a      	movs	r2, #10
 800370e:	2100      	movs	r1, #0
 8003710:	f003 fcbc 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_2_counter, 	0, 10, 0,  440, 443, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003714:	4b92      	ldr	r3, [pc, #584]	; (8003960 <Set_Screen+0x14ac>)
 8003716:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 800371a:	4b92      	ldr	r3, [pc, #584]	; (8003964 <Set_Screen+0x14b0>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4a92      	ldr	r2, [pc, #584]	; (8003968 <Set_Screen+0x14b4>)
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	4992      	ldr	r1, [pc, #584]	; (800396c <Set_Screen+0x14b8>)
 8003724:	6809      	ldr	r1, [r1, #0]
 8003726:	2412      	movs	r4, #18
 8003728:	9409      	str	r4, [sp, #36]	; 0x24
 800372a:	240b      	movs	r4, #11
 800372c:	9408      	str	r4, [sp, #32]
 800372e:	4c90      	ldr	r4, [pc, #576]	; (8003970 <Set_Screen+0x14bc>)
 8003730:	9407      	str	r4, [sp, #28]
 8003732:	9106      	str	r1, [sp, #24]
 8003734:	9205      	str	r2, [sp, #20]
 8003736:	9304      	str	r3, [sp, #16]
 8003738:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800373c:	9303      	str	r3, [sp, #12]
 800373e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003742:	9302      	str	r3, [sp, #8]
 8003744:	f240 13bb 	movw	r3, #443	; 0x1bb
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2300      	movs	r3, #0
 8003752:	220a      	movs	r2, #10
 8003754:	2100      	movs	r1, #0
 8003756:	f003 fc99 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_3_counter, 	0, 10, 0,  440, 473, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800375a:	4b81      	ldr	r3, [pc, #516]	; (8003960 <Set_Screen+0x14ac>)
 800375c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8003760:	4b80      	ldr	r3, [pc, #512]	; (8003964 <Set_Screen+0x14b0>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a80      	ldr	r2, [pc, #512]	; (8003968 <Set_Screen+0x14b4>)
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	4980      	ldr	r1, [pc, #512]	; (800396c <Set_Screen+0x14b8>)
 800376a:	6809      	ldr	r1, [r1, #0]
 800376c:	2412      	movs	r4, #18
 800376e:	9409      	str	r4, [sp, #36]	; 0x24
 8003770:	240b      	movs	r4, #11
 8003772:	9408      	str	r4, [sp, #32]
 8003774:	4c7e      	ldr	r4, [pc, #504]	; (8003970 <Set_Screen+0x14bc>)
 8003776:	9407      	str	r4, [sp, #28]
 8003778:	9106      	str	r1, [sp, #24]
 800377a:	9205      	str	r2, [sp, #20]
 800377c:	9304      	str	r3, [sp, #16]
 800377e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003782:	9303      	str	r3, [sp, #12]
 8003784:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003788:	9302      	str	r3, [sp, #8]
 800378a:	f240 13d9 	movw	r3, #473	; 0x1d9
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	2300      	movs	r3, #0
 8003798:	220a      	movs	r2, #10
 800379a:	2100      	movs	r1, #0
 800379c:	f003 fc76 	bl	800708c <Centred_DrawNumber_16_32bit>

			Short_Left_Colored_RU_DrawString_32("Объем сл.фильт  ",     16,	505,  80, FonColor[15], BasicSymbolColor, Page[3]);
 80037a0:	4b74      	ldr	r3, [pc, #464]	; (8003974 <Set_Screen+0x14c0>)
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	4a71      	ldr	r2, [pc, #452]	; (800396c <Set_Screen+0x14b8>)
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	496e      	ldr	r1, [pc, #440]	; (8003964 <Set_Screen+0x14b0>)
 80037aa:	68c9      	ldr	r1, [r1, #12]
 80037ac:	9102      	str	r1, [sp, #8]
 80037ae:	9201      	str	r2, [sp, #4]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	2350      	movs	r3, #80	; 0x50
 80037b4:	f240 12f9 	movw	r2, #505	; 0x1f9
 80037b8:	2110      	movs	r1, #16
 80037ba:	486f      	ldr	r0, [pc, #444]	; (8003978 <Set_Screen+0x14c4>)
 80037bc:	f003 f8f8 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Объем пр.эмульс ",     16,	505, 140, FonColor[16], BasicSymbolColor, Page[3]);
 80037c0:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <Set_Screen+0x14c0>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	4a69      	ldr	r2, [pc, #420]	; (800396c <Set_Screen+0x14b8>)
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	4966      	ldr	r1, [pc, #408]	; (8003964 <Set_Screen+0x14b0>)
 80037ca:	68c9      	ldr	r1, [r1, #12]
 80037cc:	9102      	str	r1, [sp, #8]
 80037ce:	9201      	str	r2, [sp, #4]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	238c      	movs	r3, #140	; 0x8c
 80037d4:	f240 12f9 	movw	r2, #505	; 0x1f9
 80037d8:	2110      	movs	r1, #16
 80037da:	4868      	ldr	r0, [pc, #416]	; (800397c <Set_Screen+0x14c8>)
 80037dc:	f003 f8e8 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Объем пр.концент",     16,	505, 200, FonColor[17], BasicSymbolColor, Page[3]);
 80037e0:	4b64      	ldr	r3, [pc, #400]	; (8003974 <Set_Screen+0x14c0>)
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	4a61      	ldr	r2, [pc, #388]	; (800396c <Set_Screen+0x14b8>)
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	495e      	ldr	r1, [pc, #376]	; (8003964 <Set_Screen+0x14b0>)
 80037ea:	68c9      	ldr	r1, [r1, #12]
 80037ec:	9102      	str	r1, [sp, #8]
 80037ee:	9201      	str	r2, [sp, #4]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	23c8      	movs	r3, #200	; 0xc8
 80037f4:	f240 12f9 	movw	r2, #505	; 0x1f9
 80037f8:	2110      	movs	r1, #16
 80037fa:	4861      	ldr	r0, [pc, #388]	; (8003980 <Set_Screen+0x14cc>)
 80037fc:	f003 f8d8 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Объем пр.воды   ",     16,	505, 260, FonColor[18], BasicSymbolColor, Page[3]);
 8003800:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <Set_Screen+0x14c0>)
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	4a59      	ldr	r2, [pc, #356]	; (800396c <Set_Screen+0x14b8>)
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	4956      	ldr	r1, [pc, #344]	; (8003964 <Set_Screen+0x14b0>)
 800380a:	68c9      	ldr	r1, [r1, #12]
 800380c:	9102      	str	r1, [sp, #8]
 800380e:	9201      	str	r2, [sp, #4]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003816:	f240 12f9 	movw	r2, #505	; 0x1f9
 800381a:	2110      	movs	r1, #16
 800381c:	4859      	ldr	r0, [pc, #356]	; (8003984 <Set_Screen+0x14d0>)
 800381e:	f003 f8c7 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Кол-во ср. УПЭ  ",     16,	505, 320, FonColor[19], BasicSymbolColor, Page[3]);
 8003822:	4b54      	ldr	r3, [pc, #336]	; (8003974 <Set_Screen+0x14c0>)
 8003824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003826:	4a51      	ldr	r2, [pc, #324]	; (800396c <Set_Screen+0x14b8>)
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	494e      	ldr	r1, [pc, #312]	; (8003964 <Set_Screen+0x14b0>)
 800382c:	68c9      	ldr	r1, [r1, #12]
 800382e:	9102      	str	r1, [sp, #8]
 8003830:	9201      	str	r2, [sp, #4]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003838:	f240 12f9 	movw	r2, #505	; 0x1f9
 800383c:	2110      	movs	r1, #16
 800383e:	4852      	ldr	r0, [pc, #328]	; (8003988 <Set_Screen+0x14d4>)
 8003840:	f003 f8b6 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Volume, 	0, 10, 0,  650, 113, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003844:	4b46      	ldr	r3, [pc, #280]	; (8003960 <Set_Screen+0x14ac>)
 8003846:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003848:	4b46      	ldr	r3, [pc, #280]	; (8003964 <Set_Screen+0x14b0>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a46      	ldr	r2, [pc, #280]	; (8003968 <Set_Screen+0x14b4>)
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	4946      	ldr	r1, [pc, #280]	; (800396c <Set_Screen+0x14b8>)
 8003852:	6809      	ldr	r1, [r1, #0]
 8003854:	2412      	movs	r4, #18
 8003856:	9409      	str	r4, [sp, #36]	; 0x24
 8003858:	240b      	movs	r4, #11
 800385a:	9408      	str	r4, [sp, #32]
 800385c:	4c44      	ldr	r4, [pc, #272]	; (8003970 <Set_Screen+0x14bc>)
 800385e:	9407      	str	r4, [sp, #28]
 8003860:	9106      	str	r1, [sp, #24]
 8003862:	9205      	str	r2, [sp, #20]
 8003864:	9304      	str	r3, [sp, #16]
 8003866:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800386a:	9303      	str	r3, [sp, #12]
 800386c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003870:	9302      	str	r3, [sp, #8]
 8003872:	2371      	movs	r3, #113	; 0x71
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	f240 238a 	movw	r3, #650	; 0x28a
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2300      	movs	r3, #0
 800387e:	220a      	movs	r2, #10
 8003880:	2100      	movs	r1, #0
 8003882:	f003 fc03 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Volume, 		0, 10, 0,  650, 173, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003886:	4b36      	ldr	r3, [pc, #216]	; (8003960 <Set_Screen+0x14ac>)
 8003888:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800388a:	4b36      	ldr	r3, [pc, #216]	; (8003964 <Set_Screen+0x14b0>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4a36      	ldr	r2, [pc, #216]	; (8003968 <Set_Screen+0x14b4>)
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	4936      	ldr	r1, [pc, #216]	; (800396c <Set_Screen+0x14b8>)
 8003894:	6809      	ldr	r1, [r1, #0]
 8003896:	2412      	movs	r4, #18
 8003898:	9409      	str	r4, [sp, #36]	; 0x24
 800389a:	240b      	movs	r4, #11
 800389c:	9408      	str	r4, [sp, #32]
 800389e:	4c34      	ldr	r4, [pc, #208]	; (8003970 <Set_Screen+0x14bc>)
 80038a0:	9407      	str	r4, [sp, #28]
 80038a2:	9106      	str	r1, [sp, #24]
 80038a4:	9205      	str	r2, [sp, #20]
 80038a6:	9304      	str	r3, [sp, #16]
 80038a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80038ac:	9303      	str	r3, [sp, #12]
 80038ae:	f44f 7348 	mov.w	r3, #800	; 0x320
 80038b2:	9302      	str	r3, [sp, #8]
 80038b4:	23ad      	movs	r3, #173	; 0xad
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	f240 238a 	movw	r3, #650	; 0x28a
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	220a      	movs	r2, #10
 80038c2:	2100      	movs	r1, #0
 80038c4:	f003 fbe2 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Volume, 	0, 10, 0,  650, 233, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80038c8:	4b25      	ldr	r3, [pc, #148]	; (8003960 <Set_Screen+0x14ac>)
 80038ca:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 80038ce:	4b25      	ldr	r3, [pc, #148]	; (8003964 <Set_Screen+0x14b0>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4a25      	ldr	r2, [pc, #148]	; (8003968 <Set_Screen+0x14b4>)
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	4925      	ldr	r1, [pc, #148]	; (800396c <Set_Screen+0x14b8>)
 80038d8:	6809      	ldr	r1, [r1, #0]
 80038da:	2412      	movs	r4, #18
 80038dc:	9409      	str	r4, [sp, #36]	; 0x24
 80038de:	240b      	movs	r4, #11
 80038e0:	9408      	str	r4, [sp, #32]
 80038e2:	4c23      	ldr	r4, [pc, #140]	; (8003970 <Set_Screen+0x14bc>)
 80038e4:	9407      	str	r4, [sp, #28]
 80038e6:	9106      	str	r1, [sp, #24]
 80038e8:	9205      	str	r2, [sp, #20]
 80038ea:	9304      	str	r3, [sp, #16]
 80038ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80038f0:	9303      	str	r3, [sp, #12]
 80038f2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80038f6:	9302      	str	r3, [sp, #8]
 80038f8:	23e9      	movs	r3, #233	; 0xe9
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	f240 238a 	movw	r3, #650	; 0x28a
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	2300      	movs	r3, #0
 8003904:	220a      	movs	r2, #10
 8003906:	2100      	movs	r1, #0
 8003908:	f003 fbc0 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Volume, 		0, 10, 0,  650, 293, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <Set_Screen+0x14ac>)
 800390e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <Set_Screen+0x14b0>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	4a14      	ldr	r2, [pc, #80]	; (8003968 <Set_Screen+0x14b4>)
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	4914      	ldr	r1, [pc, #80]	; (800396c <Set_Screen+0x14b8>)
 800391c:	6809      	ldr	r1, [r1, #0]
 800391e:	2412      	movs	r4, #18
 8003920:	9409      	str	r4, [sp, #36]	; 0x24
 8003922:	240b      	movs	r4, #11
 8003924:	9408      	str	r4, [sp, #32]
 8003926:	4c12      	ldr	r4, [pc, #72]	; (8003970 <Set_Screen+0x14bc>)
 8003928:	9407      	str	r4, [sp, #28]
 800392a:	9106      	str	r1, [sp, #24]
 800392c:	9205      	str	r2, [sp, #20]
 800392e:	9304      	str	r3, [sp, #16]
 8003930:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003934:	9303      	str	r3, [sp, #12]
 8003936:	f44f 7348 	mov.w	r3, #800	; 0x320
 800393a:	9302      	str	r3, [sp, #8]
 800393c:	f240 1325 	movw	r3, #293	; 0x125
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	f240 238a 	movw	r3, #650	; 0x28a
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2300      	movs	r3, #0
 800394a:	220a      	movs	r2, #10
 800394c:	2100      	movs	r1, #0
 800394e:	f003 fb9d 	bl	800708c <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Node_work_counter, 			0, 10, 0,  650, 353, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003952:	4b03      	ldr	r3, [pc, #12]	; (8003960 <Set_Screen+0x14ac>)
 8003954:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8003958:	4b02      	ldr	r3, [pc, #8]	; (8003964 <Set_Screen+0x14b0>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	e016      	b.n	800398c <Set_Screen+0x14d8>
 800395e:	bf00      	nop
 8003960:	20000a64 	.word	0x20000a64
 8003964:	20000984 	.word	0x20000984
 8003968:	20000008 	.word	0x20000008
 800396c:	200009f8 	.word	0x200009f8
 8003970:	0801088c 	.word	0x0801088c
 8003974:	200000a4 	.word	0x200000a4
 8003978:	0800d924 	.word	0x0800d924
 800397c:	0800d944 	.word	0x0800d944
 8003980:	0800d964 	.word	0x0800d964
 8003984:	0800d984 	.word	0x0800d984
 8003988:	0800d9a0 	.word	0x0800d9a0
 800398c:	4a73      	ldr	r2, [pc, #460]	; (8003b5c <Set_Screen+0x16a8>)
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	4973      	ldr	r1, [pc, #460]	; (8003b60 <Set_Screen+0x16ac>)
 8003992:	6809      	ldr	r1, [r1, #0]
 8003994:	2412      	movs	r4, #18
 8003996:	9409      	str	r4, [sp, #36]	; 0x24
 8003998:	240b      	movs	r4, #11
 800399a:	9408      	str	r4, [sp, #32]
 800399c:	4c71      	ldr	r4, [pc, #452]	; (8003b64 <Set_Screen+0x16b0>)
 800399e:	9407      	str	r4, [sp, #28]
 80039a0:	9106      	str	r1, [sp, #24]
 80039a2:	9205      	str	r2, [sp, #20]
 80039a4:	9304      	str	r3, [sp, #16]
 80039a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80039aa:	9303      	str	r3, [sp, #12]
 80039ac:	f44f 7348 	mov.w	r3, #800	; 0x320
 80039b0:	9302      	str	r3, [sp, #8]
 80039b2:	f240 1361 	movw	r3, #353	; 0x161
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	f240 238a 	movw	r3, #650	; 0x28a
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	220a      	movs	r2, #10
 80039c2:	2100      	movs	r1, #0
 80039c4:	f003 fb62 	bl	800708c <Centred_DrawNumber_16_32bit>

			if(Control_DB.MenuPointer == 0)
 80039c8:	4b67      	ldr	r3, [pc, #412]	; (8003b68 <Set_Screen+0x16b4>)
 80039ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d104      	bne.n	80039dc <Set_Screen+0x1528>
			{
				Control_DB.RazrPointerMAX   = 4;
 80039d2:	4b65      	ldr	r3, [pc, #404]	; (8003b68 <Set_Screen+0x16b4>)
 80039d4:	2204      	movs	r2, #4
 80039d6:	80da      	strh	r2, [r3, #6]
				Control_DB.RazrPointer 		= 0;
				Control_DB.RazrPointerMAX   = 0;
			}


		break;
 80039d8:	f000 bf6d 	b.w	80048b6 <Set_Screen+0x2402>
				Control_DB.RazrPointer 		= 0;
 80039dc:	4b62      	ldr	r3, [pc, #392]	; (8003b68 <Set_Screen+0x16b4>)
 80039de:	2200      	movs	r2, #0
 80039e0:	805a      	strh	r2, [r3, #2]
				Control_DB.RazrPointerMAX   = 0;
 80039e2:	4b61      	ldr	r3, [pc, #388]	; (8003b68 <Set_Screen+0x16b4>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	80da      	strh	r2, [r3, #6]
		break;
 80039e8:	f000 bf65 	b.w	80048b6 <Set_Screen+0x2402>

		case 4: // Ручное управление

			if(!ALG_DB.clearing_pressure_filter_1.state)
 80039ec:	4b5f      	ldr	r3, [pc, #380]	; (8003b6c <Set_Screen+0x16b8>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10f      	bne.n	8003a14 <Set_Screen+0x1560>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть напорный фильтр 1 ", 27,	100,  70, FonColor[0], BasicSymbolColor, Page[4]);
 80039f4:	4b5e      	ldr	r3, [pc, #376]	; (8003b70 <Set_Screen+0x16bc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a59      	ldr	r2, [pc, #356]	; (8003b60 <Set_Screen+0x16ac>)
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	495d      	ldr	r1, [pc, #372]	; (8003b74 <Set_Screen+0x16c0>)
 80039fe:	6909      	ldr	r1, [r1, #16]
 8003a00:	9102      	str	r1, [sp, #8]
 8003a02:	9201      	str	r2, [sp, #4]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2346      	movs	r3, #70	; 0x46
 8003a08:	2264      	movs	r2, #100	; 0x64
 8003a0a:	211b      	movs	r1, #27
 8003a0c:	485a      	ldr	r0, [pc, #360]	; (8003b78 <Set_Screen+0x16c4>)
 8003a0e:	f002 ffcf 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8003a12:	e00e      	b.n	8003a32 <Set_Screen+0x157e>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  1 ", 27,	100,  70, FonColor[0], BasicSymbolColor, Page[4]);
 8003a14:	4b56      	ldr	r3, [pc, #344]	; (8003b70 <Set_Screen+0x16bc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a51      	ldr	r2, [pc, #324]	; (8003b60 <Set_Screen+0x16ac>)
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	4955      	ldr	r1, [pc, #340]	; (8003b74 <Set_Screen+0x16c0>)
 8003a1e:	6909      	ldr	r1, [r1, #16]
 8003a20:	9102      	str	r1, [sp, #8]
 8003a22:	9201      	str	r2, [sp, #4]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2346      	movs	r3, #70	; 0x46
 8003a28:	2264      	movs	r2, #100	; 0x64
 8003a2a:	211b      	movs	r1, #27
 8003a2c:	4853      	ldr	r0, [pc, #332]	; (8003b7c <Set_Screen+0x16c8>)
 8003a2e:	f002 ffbf 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_pressure_filter_2.state)
 8003a32:	4b4e      	ldr	r3, [pc, #312]	; (8003b6c <Set_Screen+0x16b8>)
 8003a34:	799b      	ldrb	r3, [r3, #6]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <Set_Screen+0x15a6>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть напорный фильтр 2 ", 27,	100, 110, FonColor[1], BasicSymbolColor, Page[4]);
 8003a3a:	4b4d      	ldr	r3, [pc, #308]	; (8003b70 <Set_Screen+0x16bc>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4a48      	ldr	r2, [pc, #288]	; (8003b60 <Set_Screen+0x16ac>)
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	494c      	ldr	r1, [pc, #304]	; (8003b74 <Set_Screen+0x16c0>)
 8003a44:	6909      	ldr	r1, [r1, #16]
 8003a46:	9102      	str	r1, [sp, #8]
 8003a48:	9201      	str	r2, [sp, #4]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	236e      	movs	r3, #110	; 0x6e
 8003a4e:	2264      	movs	r2, #100	; 0x64
 8003a50:	211b      	movs	r1, #27
 8003a52:	484b      	ldr	r0, [pc, #300]	; (8003b80 <Set_Screen+0x16cc>)
 8003a54:	f002 ffac 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8003a58:	e00e      	b.n	8003a78 <Set_Screen+0x15c4>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  2 ", 27,	100, 110, FonColor[1], BasicSymbolColor, Page[4]);
 8003a5a:	4b45      	ldr	r3, [pc, #276]	; (8003b70 <Set_Screen+0x16bc>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4a40      	ldr	r2, [pc, #256]	; (8003b60 <Set_Screen+0x16ac>)
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	4944      	ldr	r1, [pc, #272]	; (8003b74 <Set_Screen+0x16c0>)
 8003a64:	6909      	ldr	r1, [r1, #16]
 8003a66:	9102      	str	r1, [sp, #8]
 8003a68:	9201      	str	r2, [sp, #4]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	236e      	movs	r3, #110	; 0x6e
 8003a6e:	2264      	movs	r2, #100	; 0x64
 8003a70:	211b      	movs	r1, #27
 8003a72:	4844      	ldr	r0, [pc, #272]	; (8003b84 <Set_Screen+0x16d0>)
 8003a74:	f002 ff9c 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_water_filter_1.state)
 8003a78:	4b3c      	ldr	r3, [pc, #240]	; (8003b6c <Set_Screen+0x16b8>)
 8003a7a:	7b1b      	ldrb	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10f      	bne.n	8003aa0 <Set_Screen+0x15ec>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть фильтр воды     1 ", 27,	100, 150, FonColor[2], BasicSymbolColor, Page[4]);
 8003a80:	4b3b      	ldr	r3, [pc, #236]	; (8003b70 <Set_Screen+0x16bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a36      	ldr	r2, [pc, #216]	; (8003b60 <Set_Screen+0x16ac>)
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	493a      	ldr	r1, [pc, #232]	; (8003b74 <Set_Screen+0x16c0>)
 8003a8a:	6909      	ldr	r1, [r1, #16]
 8003a8c:	9102      	str	r1, [sp, #8]
 8003a8e:	9201      	str	r2, [sp, #4]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2396      	movs	r3, #150	; 0x96
 8003a94:	2264      	movs	r2, #100	; 0x64
 8003a96:	211b      	movs	r1, #27
 8003a98:	483b      	ldr	r0, [pc, #236]	; (8003b88 <Set_Screen+0x16d4>)
 8003a9a:	f002 ff89 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8003a9e:	e00e      	b.n	8003abe <Set_Screen+0x160a>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  1 ", 27,	100, 150, FonColor[2], BasicSymbolColor, Page[4]);
 8003aa0:	4b33      	ldr	r3, [pc, #204]	; (8003b70 <Set_Screen+0x16bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a2e      	ldr	r2, [pc, #184]	; (8003b60 <Set_Screen+0x16ac>)
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	4932      	ldr	r1, [pc, #200]	; (8003b74 <Set_Screen+0x16c0>)
 8003aaa:	6909      	ldr	r1, [r1, #16]
 8003aac:	9102      	str	r1, [sp, #8]
 8003aae:	9201      	str	r2, [sp, #4]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2396      	movs	r3, #150	; 0x96
 8003ab4:	2264      	movs	r2, #100	; 0x64
 8003ab6:	211b      	movs	r1, #27
 8003ab8:	4830      	ldr	r0, [pc, #192]	; (8003b7c <Set_Screen+0x16c8>)
 8003aba:	f002 ff79 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_water_filter_2.state)
 8003abe:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <Set_Screen+0x16b8>)
 8003ac0:	7c9b      	ldrb	r3, [r3, #18]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10f      	bne.n	8003ae6 <Set_Screen+0x1632>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть фильтр воды     2 ", 27,	100, 190, FonColor[3], BasicSymbolColor, Page[4]);
 8003ac6:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <Set_Screen+0x16bc>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	4a25      	ldr	r2, [pc, #148]	; (8003b60 <Set_Screen+0x16ac>)
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	4929      	ldr	r1, [pc, #164]	; (8003b74 <Set_Screen+0x16c0>)
 8003ad0:	6909      	ldr	r1, [r1, #16]
 8003ad2:	9102      	str	r1, [sp, #8]
 8003ad4:	9201      	str	r2, [sp, #4]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	23be      	movs	r3, #190	; 0xbe
 8003ada:	2264      	movs	r2, #100	; 0x64
 8003adc:	211b      	movs	r1, #27
 8003ade:	482b      	ldr	r0, [pc, #172]	; (8003b8c <Set_Screen+0x16d8>)
 8003ae0:	f002 ff66 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8003ae4:	e00e      	b.n	8003b04 <Set_Screen+0x1650>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  2 ", 27,	100, 190, FonColor[3], BasicSymbolColor, Page[4]);
 8003ae6:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <Set_Screen+0x16bc>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <Set_Screen+0x16ac>)
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	4921      	ldr	r1, [pc, #132]	; (8003b74 <Set_Screen+0x16c0>)
 8003af0:	6909      	ldr	r1, [r1, #16]
 8003af2:	9102      	str	r1, [sp, #8]
 8003af4:	9201      	str	r2, [sp, #4]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	23be      	movs	r3, #190	; 0xbe
 8003afa:	2264      	movs	r2, #100	; 0x64
 8003afc:	211b      	movs	r1, #27
 8003afe:	4821      	ldr	r0, [pc, #132]	; (8003b84 <Set_Screen+0x16d0>)
 8003b00:	f002 ff56 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_water_filter_3.state)
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <Set_Screen+0x16b8>)
 8003b06:	7e1b      	ldrb	r3, [r3, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10f      	bne.n	8003b2c <Set_Screen+0x1678>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть фильтр воды     3 ", 27,	100, 230, FonColor[4], BasicSymbolColor, Page[4]);
 8003b0c:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <Set_Screen+0x16bc>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <Set_Screen+0x16ac>)
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	4917      	ldr	r1, [pc, #92]	; (8003b74 <Set_Screen+0x16c0>)
 8003b16:	6909      	ldr	r1, [r1, #16]
 8003b18:	9102      	str	r1, [sp, #8]
 8003b1a:	9201      	str	r2, [sp, #4]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	23e6      	movs	r3, #230	; 0xe6
 8003b20:	2264      	movs	r2, #100	; 0x64
 8003b22:	211b      	movs	r1, #27
 8003b24:	481a      	ldr	r0, [pc, #104]	; (8003b90 <Set_Screen+0x16dc>)
 8003b26:	f002 ff43 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 8003b2a:	e00e      	b.n	8003b4a <Set_Screen+0x1696>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  3 ", 27,	100, 230, FonColor[4], BasicSymbolColor, Page[4]);
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <Set_Screen+0x16bc>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	4a0b      	ldr	r2, [pc, #44]	; (8003b60 <Set_Screen+0x16ac>)
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	490f      	ldr	r1, [pc, #60]	; (8003b74 <Set_Screen+0x16c0>)
 8003b36:	6909      	ldr	r1, [r1, #16]
 8003b38:	9102      	str	r1, [sp, #8]
 8003b3a:	9201      	str	r2, [sp, #4]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	23e6      	movs	r3, #230	; 0xe6
 8003b40:	2264      	movs	r2, #100	; 0x64
 8003b42:	211b      	movs	r1, #27
 8003b44:	4813      	ldr	r0, [pc, #76]	; (8003b94 <Set_Screen+0x16e0>)
 8003b46:	f002 ff33 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			Control_DB.MenuPointerMAX 	= 4;
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <Set_Screen+0x16b4>)
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	809a      	strh	r2, [r3, #4]
			Control_DB.RazrPointer 		= 0;
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <Set_Screen+0x16b4>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	805a      	strh	r2, [r3, #2]

		break;
 8003b56:	f000 beae 	b.w	80048b6 <Set_Screen+0x2402>
 8003b5a:	bf00      	nop
 8003b5c:	20000008 	.word	0x20000008
 8003b60:	200009f8 	.word	0x200009f8
 8003b64:	0801088c 	.word	0x0801088c
 8003b68:	20000b2c 	.word	0x20000b2c
 8003b6c:	20000a14 	.word	0x20000a14
 8003b70:	200000a4 	.word	0x200000a4
 8003b74:	20000984 	.word	0x20000984
 8003b78:	0800d9bc 	.word	0x0800d9bc
 8003b7c:	0800d9f0 	.word	0x0800d9f0
 8003b80:	0800da1c 	.word	0x0800da1c
 8003b84:	0800da50 	.word	0x0800da50
 8003b88:	0800da7c 	.word	0x0800da7c
 8003b8c:	0800daac 	.word	0x0800daac
 8003b90:	0800dadc 	.word	0x0800dadc
 8003b94:	0800db0c 	.word	0x0800db0c



		case 5:

			Short_Centred_RU_DrawString_32("Введите пароль", 14, 	  		400, 190, BackgroundColor, BasicSymbolColor, Page[5]);
 8003b98:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <Set_Screen+0x17b4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a33      	ldr	r2, [pc, #204]	; (8003c6c <Set_Screen+0x17b8>)
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	4933      	ldr	r1, [pc, #204]	; (8003c70 <Set_Screen+0x17bc>)
 8003ba2:	6949      	ldr	r1, [r1, #20]
 8003ba4:	9102      	str	r1, [sp, #8]
 8003ba6:	9201      	str	r2, [sp, #4]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	23be      	movs	r3, #190	; 0xbe
 8003bac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003bb0:	210e      	movs	r1, #14
 8003bb2:	4830      	ldr	r0, [pc, #192]	; (8003c74 <Set_Screen+0x17c0>)
 8003bb4:	f003 f81a 	bl	8006bec <Short_Centred_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&PassW_block.PassWord, 0,   4, Control_DB.RazrPointer, 9999, 0, 400,  240, 800,480, Page[5], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003bb8:	4b2f      	ldr	r3, [pc, #188]	; (8003c78 <Set_Screen+0x17c4>)
 8003bba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bbe:	461c      	mov	r4, r3
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <Set_Screen+0x17bc>)
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	4a2d      	ldr	r2, [pc, #180]	; (8003c7c <Set_Screen+0x17c8>)
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	4928      	ldr	r1, [pc, #160]	; (8003c6c <Set_Screen+0x17b8>)
 8003bca:	6809      	ldr	r1, [r1, #0]
 8003bcc:	2012      	movs	r0, #18
 8003bce:	900b      	str	r0, [sp, #44]	; 0x2c
 8003bd0:	200b      	movs	r0, #11
 8003bd2:	900a      	str	r0, [sp, #40]	; 0x28
 8003bd4:	482a      	ldr	r0, [pc, #168]	; (8003c80 <Set_Screen+0x17cc>)
 8003bd6:	9009      	str	r0, [sp, #36]	; 0x24
 8003bd8:	9108      	str	r1, [sp, #32]
 8003bda:	9207      	str	r2, [sp, #28]
 8003bdc:	9306      	str	r3, [sp, #24]
 8003bde:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003be2:	9305      	str	r3, [sp, #20]
 8003be4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003be8:	9304      	str	r3, [sp, #16]
 8003bea:	23f0      	movs	r3, #240	; 0xf0
 8003bec:	9303      	str	r3, [sp, #12]
 8003bee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003bf2:	9302      	str	r3, [sp, #8]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	f242 730f 	movw	r3, #9999	; 0x270f
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	4623      	mov	r3, r4
 8003c00:	2204      	movs	r2, #4
 8003c02:	2100      	movs	r1, #0
 8003c04:	481f      	ldr	r0, [pc, #124]	; (8003c84 <Set_Screen+0x17d0>)
 8003c06:	f003 fc71 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
			if(PassW_block.PassFalseTimer)
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <Set_Screen+0x17d0>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d011      	beq.n	8003c36 <Set_Screen+0x1782>
			{
				Short_Centred_RU_DrawString_32("Пароль неверный", 15, 		400, 290,        RedColor, BasicSymbolColor, Page[5]);
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <Set_Screen+0x17d4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <Set_Screen+0x17b8>)
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	4915      	ldr	r1, [pc, #84]	; (8003c70 <Set_Screen+0x17bc>)
 8003c1c:	6949      	ldr	r1, [r1, #20]
 8003c1e:	9102      	str	r1, [sp, #8]
 8003c20:	9201      	str	r2, [sp, #4]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003c28:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003c2c:	210f      	movs	r1, #15
 8003c2e:	4817      	ldr	r0, [pc, #92]	; (8003c8c <Set_Screen+0x17d8>)
 8003c30:	f002 ffdc 	bl	8006bec <Short_Centred_RU_DrawString_32>
 8003c34:	e010      	b.n	8003c58 <Set_Screen+0x17a4>
			}
			else
			{
				Short_Centred_RU_DrawString_32("               ", 15, 		400, 290, BackgroundColor, BasicSymbolColor, Page[5]);
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <Set_Screen+0x17b4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <Set_Screen+0x17b8>)
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	490c      	ldr	r1, [pc, #48]	; (8003c70 <Set_Screen+0x17bc>)
 8003c40:	6949      	ldr	r1, [r1, #20]
 8003c42:	9102      	str	r1, [sp, #8]
 8003c44:	9201      	str	r2, [sp, #4]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003c4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003c50:	210f      	movs	r1, #15
 8003c52:	480f      	ldr	r0, [pc, #60]	; (8003c90 <Set_Screen+0x17dc>)
 8003c54:	f002 ffca 	bl	8006bec <Short_Centred_RU_DrawString_32>
			}

			Control_DB.RazrPointerMAX 	= 4;
 8003c58:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <Set_Screen+0x17c4>)
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	80da      	strh	r2, [r3, #6]
			Control_DB.MenuPointerMAX 	= 0;
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <Set_Screen+0x17c4>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	809a      	strh	r2, [r3, #4]

		break;
 8003c64:	f000 be27 	b.w	80048b6 <Set_Screen+0x2402>
 8003c68:	20000008 	.word	0x20000008
 8003c6c:	200009f8 	.word	0x200009f8
 8003c70:	20000984 	.word	0x20000984
 8003c74:	0800db38 	.word	0x0800db38
 8003c78:	20000b2c 	.word	0x20000b2c
 8003c7c:	2000000c 	.word	0x2000000c
 8003c80:	0801088c 	.word	0x0801088c
 8003c84:	20000a00 	.word	0x20000a00
 8003c88:	20000000 	.word	0x20000000
 8003c8c:	0800db54 	.word	0x0800db54
 8003c90:	0800db74 	.word	0x0800db74

		case 6:
			Work_regim_zaliv_1.trigger = BUV_settings.pump_mode;
 8003c94:	4b9f      	ldr	r3, [pc, #636]	; (8003f14 <Set_Screen+0x1a60>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4b9f      	ldr	r3, [pc, #636]	; (8003f18 <Set_Screen+0x1a64>)
 8003c9c:	701a      	strb	r2, [r3, #0]
			if(Work_regim_zaliv_1.trigger != Work_regim_zaliv_1.trigger_mirror)
 8003c9e:	4b9e      	ldr	r3, [pc, #632]	; (8003f18 <Set_Screen+0x1a64>)
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	4b9d      	ldr	r3, [pc, #628]	; (8003f18 <Set_Screen+0x1a64>)
 8003ca4:	785b      	ldrb	r3, [r3, #1]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d002      	beq.n	8003cb0 <Set_Screen+0x17fc>
			{
				Work_regim_zaliv_1.execute = 1;
 8003caa:	4b9b      	ldr	r3, [pc, #620]	; (8003f18 <Set_Screen+0x1a64>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	709a      	strb	r2, [r3, #2]
			}
			Work_regim_zaliv_1.trigger_mirror = Work_regim_zaliv_1.trigger;
 8003cb0:	4b99      	ldr	r3, [pc, #612]	; (8003f18 <Set_Screen+0x1a64>)
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	4b98      	ldr	r3, [pc, #608]	; (8003f18 <Set_Screen+0x1a64>)
 8003cb6:	705a      	strb	r2, [r3, #1]
			Short_Left_Colored_RU_DrawString_32("Режим работы    ", 16,	30,  50, FonColor[0], BasicSymbolColor, Page[6]);
 8003cb8:	4b98      	ldr	r3, [pc, #608]	; (8003f1c <Set_Screen+0x1a68>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a98      	ldr	r2, [pc, #608]	; (8003f20 <Set_Screen+0x1a6c>)
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	4998      	ldr	r1, [pc, #608]	; (8003f24 <Set_Screen+0x1a70>)
 8003cc2:	6989      	ldr	r1, [r1, #24]
 8003cc4:	9102      	str	r1, [sp, #8]
 8003cc6:	9201      	str	r2, [sp, #4]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	2332      	movs	r3, #50	; 0x32
 8003ccc:	221e      	movs	r2, #30
 8003cce:	2110      	movs	r1, #16
 8003cd0:	4895      	ldr	r0, [pc, #596]	; (8003f28 <Set_Screen+0x1a74>)
 8003cd2:	f002 fe6d 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings.pump_mode,0, 1, Control_DB.RazrPointer, 1,   0, 470, 50, 800,480, Page[6], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003cd6:	4b95      	ldr	r3, [pc, #596]	; (8003f2c <Set_Screen+0x1a78>)
 8003cd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cdc:	461c      	mov	r4, r3
 8003cde:	4b91      	ldr	r3, [pc, #580]	; (8003f24 <Set_Screen+0x1a70>)
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	4a8e      	ldr	r2, [pc, #568]	; (8003f1c <Set_Screen+0x1a68>)
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	498e      	ldr	r1, [pc, #568]	; (8003f20 <Set_Screen+0x1a6c>)
 8003ce8:	6809      	ldr	r1, [r1, #0]
 8003cea:	2012      	movs	r0, #18
 8003cec:	900b      	str	r0, [sp, #44]	; 0x2c
 8003cee:	200b      	movs	r0, #11
 8003cf0:	900a      	str	r0, [sp, #40]	; 0x28
 8003cf2:	488f      	ldr	r0, [pc, #572]	; (8003f30 <Set_Screen+0x1a7c>)
 8003cf4:	9009      	str	r0, [sp, #36]	; 0x24
 8003cf6:	9108      	str	r1, [sp, #32]
 8003cf8:	9207      	str	r2, [sp, #28]
 8003cfa:	9306      	str	r3, [sp, #24]
 8003cfc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003d00:	9305      	str	r3, [sp, #20]
 8003d02:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003d06:	9304      	str	r3, [sp, #16]
 8003d08:	2332      	movs	r3, #50	; 0x32
 8003d0a:	9303      	str	r3, [sp, #12]
 8003d0c:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003d10:	9302      	str	r3, [sp, #8]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	2301      	movs	r3, #1
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4884      	ldr	r0, [pc, #528]	; (8003f34 <Set_Screen+0x1a80>)
 8003d22:	f003 fbe3 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>

			if(BUV_settings.pump_mode)
 8003d26:	4b7b      	ldr	r3, [pc, #492]	; (8003f14 <Set_Screen+0x1a60>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 816a 	beq.w	8004004 <Set_Screen+0x1b50>
			{

				Short_Left_Colored_RU_DrawString_32("Авто", 4,600,  50, BackgroundColor, BasicSymbolColor, Page[6]);
 8003d30:	4b81      	ldr	r3, [pc, #516]	; (8003f38 <Set_Screen+0x1a84>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7a      	ldr	r2, [pc, #488]	; (8003f20 <Set_Screen+0x1a6c>)
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	497a      	ldr	r1, [pc, #488]	; (8003f24 <Set_Screen+0x1a70>)
 8003d3a:	6989      	ldr	r1, [r1, #24]
 8003d3c:	9102      	str	r1, [sp, #8]
 8003d3e:	9201      	str	r2, [sp, #4]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2332      	movs	r3, #50	; 0x32
 8003d44:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003d48:	2104      	movs	r1, #4
 8003d4a:	487c      	ldr	r0, [pc, #496]	; (8003f3c <Set_Screen+0x1a88>)
 8003d4c:	f002 fe30 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
				
				if(Work_regim_zaliv_1.execute)
 8003d50:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <Set_Screen+0x1a64>)
 8003d52:	789b      	ldrb	r3, [r3, #2]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d016      	beq.n	8003d86 <Set_Screen+0x18d2>
				{
					Work_regim_zaliv_1.execute = 0;
 8003d58:	4b6f      	ldr	r3, [pc, #444]	; (8003f18 <Set_Screen+0x1a64>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	709a      	strb	r2, [r3, #2]
					Draw_Rectangle(BackgroundColor, 30,   68,  770, 600, Page[6], 800, 480);
 8003d5e:	4b76      	ldr	r3, [pc, #472]	; (8003f38 <Set_Screen+0x1a84>)
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	4b70      	ldr	r3, [pc, #448]	; (8003f24 <Set_Screen+0x1a70>)
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003d6a:	9203      	str	r2, [sp, #12]
 8003d6c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003d70:	9202      	str	r2, [sp, #8]
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	f240 3302 	movw	r3, #770	; 0x302
 8003d7e:	2244      	movs	r2, #68	; 0x44
 8003d80:	211e      	movs	r1, #30
 8003d82:	f003 ff8d 	bl	8007ca0 <Draw_Rectangle>
				}
				
				Short_Left_Colored_RU_DrawString_32("Насос АНН1", 10,30,  80, FonColor[1], BasicSymbolColor, Page[6]);
 8003d86:	4b65      	ldr	r3, [pc, #404]	; (8003f1c <Set_Screen+0x1a68>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4a65      	ldr	r2, [pc, #404]	; (8003f20 <Set_Screen+0x1a6c>)
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	4965      	ldr	r1, [pc, #404]	; (8003f24 <Set_Screen+0x1a70>)
 8003d90:	6989      	ldr	r1, [r1, #24]
 8003d92:	9102      	str	r1, [sp, #8]
 8003d94:	9201      	str	r2, [sp, #4]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	2350      	movs	r3, #80	; 0x50
 8003d9a:	221e      	movs	r2, #30
 8003d9c:	210a      	movs	r1, #10
 8003d9e:	4868      	ldr	r0, [pc, #416]	; (8003f40 <Set_Screen+0x1a8c>)
 8003da0:	f002 fe06 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Время рабАНН1", 13,30,  110, FonColor[2], BasicSymbolColor, Page[6]);
 8003da4:	4b5d      	ldr	r3, [pc, #372]	; (8003f1c <Set_Screen+0x1a68>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a5d      	ldr	r2, [pc, #372]	; (8003f20 <Set_Screen+0x1a6c>)
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	495d      	ldr	r1, [pc, #372]	; (8003f24 <Set_Screen+0x1a70>)
 8003dae:	6989      	ldr	r1, [r1, #24]
 8003db0:	9102      	str	r1, [sp, #8]
 8003db2:	9201      	str	r2, [sp, #4]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	236e      	movs	r3, #110	; 0x6e
 8003db8:	221e      	movs	r2, #30
 8003dba:	210d      	movs	r1, #13
 8003dbc:	4861      	ldr	r0, [pc, #388]	; (8003f44 <Set_Screen+0x1a90>)
 8003dbe:	f002 fdf7 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.time_of_work_pump1,0, 3, Control_DB.RazrPointer, 120,  5, 470, 110, 800,480, Page[6], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003dc2:	4b5a      	ldr	r3, [pc, #360]	; (8003f2c <Set_Screen+0x1a78>)
 8003dc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dc8:	461c      	mov	r4, r3
 8003dca:	4b56      	ldr	r3, [pc, #344]	; (8003f24 <Set_Screen+0x1a70>)
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	4a53      	ldr	r2, [pc, #332]	; (8003f1c <Set_Screen+0x1a68>)
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	4953      	ldr	r1, [pc, #332]	; (8003f20 <Set_Screen+0x1a6c>)
 8003dd4:	6809      	ldr	r1, [r1, #0]
 8003dd6:	2012      	movs	r0, #18
 8003dd8:	900b      	str	r0, [sp, #44]	; 0x2c
 8003dda:	200b      	movs	r0, #11
 8003ddc:	900a      	str	r0, [sp, #40]	; 0x28
 8003dde:	4854      	ldr	r0, [pc, #336]	; (8003f30 <Set_Screen+0x1a7c>)
 8003de0:	9009      	str	r0, [sp, #36]	; 0x24
 8003de2:	9108      	str	r1, [sp, #32]
 8003de4:	9207      	str	r2, [sp, #28]
 8003de6:	9306      	str	r3, [sp, #24]
 8003de8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003dec:	9305      	str	r3, [sp, #20]
 8003dee:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	236e      	movs	r3, #110	; 0x6e
 8003df6:	9303      	str	r3, [sp, #12]
 8003df8:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003dfc:	9302      	str	r3, [sp, #8]
 8003dfe:	2305      	movs	r3, #5
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	2378      	movs	r3, #120	; 0x78
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	4623      	mov	r3, r4
 8003e08:	2203      	movs	r2, #3
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4841      	ldr	r0, [pc, #260]	; (8003f14 <Set_Screen+0x1a60>)
 8003e0e:	f003 fb6d 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
				Short_Left_Colored_RU_DrawString_32("Ч", 1,585,  110, BackgroundColor, BasicSymbolColor, Page[6]);
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <Set_Screen+0x1a84>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a42      	ldr	r2, [pc, #264]	; (8003f20 <Set_Screen+0x1a6c>)
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	4942      	ldr	r1, [pc, #264]	; (8003f24 <Set_Screen+0x1a70>)
 8003e1c:	6989      	ldr	r1, [r1, #24]
 8003e1e:	9102      	str	r1, [sp, #8]
 8003e20:	9201      	str	r2, [sp, #4]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	236e      	movs	r3, #110	; 0x6e
 8003e26:	f240 2249 	movw	r2, #585	; 0x249
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4846      	ldr	r0, [pc, #280]	; (8003f48 <Set_Screen+0x1a94>)
 8003e2e:	f002 fdbf 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

				Short_Left_Colored_RU_DrawString_32("Насос АНН2", 10,30,  140,FonColor[3], BasicSymbolColor, Page[6]);
 8003e32:	4b3a      	ldr	r3, [pc, #232]	; (8003f1c <Set_Screen+0x1a68>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	4a3a      	ldr	r2, [pc, #232]	; (8003f20 <Set_Screen+0x1a6c>)
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	493a      	ldr	r1, [pc, #232]	; (8003f24 <Set_Screen+0x1a70>)
 8003e3c:	6989      	ldr	r1, [r1, #24]
 8003e3e:	9102      	str	r1, [sp, #8]
 8003e40:	9201      	str	r2, [sp, #4]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	238c      	movs	r3, #140	; 0x8c
 8003e46:	221e      	movs	r2, #30
 8003e48:	210a      	movs	r1, #10
 8003e4a:	4840      	ldr	r0, [pc, #256]	; (8003f4c <Set_Screen+0x1a98>)
 8003e4c:	f002 fdb0 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Время рабАНН2", 13,30,  170, FonColor[4], BasicSymbolColor, Page[6]);
 8003e50:	4b32      	ldr	r3, [pc, #200]	; (8003f1c <Set_Screen+0x1a68>)
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	4a32      	ldr	r2, [pc, #200]	; (8003f20 <Set_Screen+0x1a6c>)
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	4932      	ldr	r1, [pc, #200]	; (8003f24 <Set_Screen+0x1a70>)
 8003e5a:	6989      	ldr	r1, [r1, #24]
 8003e5c:	9102      	str	r1, [sp, #8]
 8003e5e:	9201      	str	r2, [sp, #4]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	23aa      	movs	r3, #170	; 0xaa
 8003e64:	221e      	movs	r2, #30
 8003e66:	210d      	movs	r1, #13
 8003e68:	4839      	ldr	r0, [pc, #228]	; (8003f50 <Set_Screen+0x1a9c>)
 8003e6a:	f002 fda1 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.time_of_work_pump2,0, 3, Control_DB.RazrPointer, 120,  5, 470, 170, 800,480, Page[6], FonColor[4], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <Set_Screen+0x1a78>)
 8003e70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e74:	461c      	mov	r4, r3
 8003e76:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <Set_Screen+0x1a70>)
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	4a28      	ldr	r2, [pc, #160]	; (8003f1c <Set_Screen+0x1a68>)
 8003e7c:	6912      	ldr	r2, [r2, #16]
 8003e7e:	4928      	ldr	r1, [pc, #160]	; (8003f20 <Set_Screen+0x1a6c>)
 8003e80:	6809      	ldr	r1, [r1, #0]
 8003e82:	2012      	movs	r0, #18
 8003e84:	900b      	str	r0, [sp, #44]	; 0x2c
 8003e86:	200b      	movs	r0, #11
 8003e88:	900a      	str	r0, [sp, #40]	; 0x28
 8003e8a:	4829      	ldr	r0, [pc, #164]	; (8003f30 <Set_Screen+0x1a7c>)
 8003e8c:	9009      	str	r0, [sp, #36]	; 0x24
 8003e8e:	9108      	str	r1, [sp, #32]
 8003e90:	9207      	str	r2, [sp, #28]
 8003e92:	9306      	str	r3, [sp, #24]
 8003e94:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003e98:	9305      	str	r3, [sp, #20]
 8003e9a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003e9e:	9304      	str	r3, [sp, #16]
 8003ea0:	23aa      	movs	r3, #170	; 0xaa
 8003ea2:	9303      	str	r3, [sp, #12]
 8003ea4:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003ea8:	9302      	str	r3, [sp, #8]
 8003eaa:	2305      	movs	r3, #5
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	2378      	movs	r3, #120	; 0x78
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4826      	ldr	r0, [pc, #152]	; (8003f54 <Set_Screen+0x1aa0>)
 8003eba:	f003 fb17 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
				Short_Left_Colored_RU_DrawString_32("Ч", 1,585,  170, BackgroundColor, BasicSymbolColor, Page[6]);
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <Set_Screen+0x1a84>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a17      	ldr	r2, [pc, #92]	; (8003f20 <Set_Screen+0x1a6c>)
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	4917      	ldr	r1, [pc, #92]	; (8003f24 <Set_Screen+0x1a70>)
 8003ec8:	6989      	ldr	r1, [r1, #24]
 8003eca:	9102      	str	r1, [sp, #8]
 8003ecc:	9201      	str	r2, [sp, #4]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	23aa      	movs	r3, #170	; 0xaa
 8003ed2:	f240 2249 	movw	r2, #585	; 0x249
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	481b      	ldr	r0, [pc, #108]	; (8003f48 <Set_Screen+0x1a94>)
 8003eda:	f002 fd69 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

				Short_Left_Colored_RU_DrawString_32("Насос АНН3", 10,30,  200, FonColor[5], BasicSymbolColor, Page[6]);
 8003ede:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <Set_Screen+0x1a68>)
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4a0f      	ldr	r2, [pc, #60]	; (8003f20 <Set_Screen+0x1a6c>)
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	490f      	ldr	r1, [pc, #60]	; (8003f24 <Set_Screen+0x1a70>)
 8003ee8:	6989      	ldr	r1, [r1, #24]
 8003eea:	9102      	str	r1, [sp, #8]
 8003eec:	9201      	str	r2, [sp, #4]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	23c8      	movs	r3, #200	; 0xc8
 8003ef2:	221e      	movs	r2, #30
 8003ef4:	210a      	movs	r1, #10
 8003ef6:	4818      	ldr	r0, [pc, #96]	; (8003f58 <Set_Screen+0x1aa4>)
 8003ef8:	f002 fd5a 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.time_of_work_pump3,0, 3, Control_DB.RazrPointer, 120,  5, 470, 230, 800,480, Page[6], FonColor[6], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <Set_Screen+0x1a78>)
 8003efe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f02:	461c      	mov	r4, r3
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <Set_Screen+0x1a70>)
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <Set_Screen+0x1a68>)
 8003f0a:	6992      	ldr	r2, [r2, #24]
 8003f0c:	4904      	ldr	r1, [pc, #16]	; (8003f20 <Set_Screen+0x1a6c>)
 8003f0e:	6809      	ldr	r1, [r1, #0]
 8003f10:	e024      	b.n	8003f5c <Set_Screen+0x1aa8>
 8003f12:	bf00      	nop
 8003f14:	20000b40 	.word	0x20000b40
 8003f18:	20000104 	.word	0x20000104
 8003f1c:	200000a4 	.word	0x200000a4
 8003f20:	200009f8 	.word	0x200009f8
 8003f24:	20000984 	.word	0x20000984
 8003f28:	0800db84 	.word	0x0800db84
 8003f2c:	20000b2c 	.word	0x20000b2c
 8003f30:	0801088c 	.word	0x0801088c
 8003f34:	20000b4c 	.word	0x20000b4c
 8003f38:	20000008 	.word	0x20000008
 8003f3c:	0800dba0 	.word	0x0800dba0
 8003f40:	0800dbac 	.word	0x0800dbac
 8003f44:	0800dbc0 	.word	0x0800dbc0
 8003f48:	0800dbdc 	.word	0x0800dbdc
 8003f4c:	0800dbe0 	.word	0x0800dbe0
 8003f50:	0800dbf4 	.word	0x0800dbf4
 8003f54:	20000b44 	.word	0x20000b44
 8003f58:	0800dc10 	.word	0x0800dc10
 8003f5c:	2012      	movs	r0, #18
 8003f5e:	900b      	str	r0, [sp, #44]	; 0x2c
 8003f60:	200b      	movs	r0, #11
 8003f62:	900a      	str	r0, [sp, #40]	; 0x28
 8003f64:	481e      	ldr	r0, [pc, #120]	; (8003fe0 <Set_Screen+0x1b2c>)
 8003f66:	9009      	str	r0, [sp, #36]	; 0x24
 8003f68:	9108      	str	r1, [sp, #32]
 8003f6a:	9207      	str	r2, [sp, #28]
 8003f6c:	9306      	str	r3, [sp, #24]
 8003f6e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f72:	9305      	str	r3, [sp, #20]
 8003f74:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003f78:	9304      	str	r3, [sp, #16]
 8003f7a:	23e6      	movs	r3, #230	; 0xe6
 8003f7c:	9303      	str	r3, [sp, #12]
 8003f7e:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003f82:	9302      	str	r3, [sp, #8]
 8003f84:	2305      	movs	r3, #5
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	2378      	movs	r3, #120	; 0x78
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	4623      	mov	r3, r4
 8003f8e:	2203      	movs	r2, #3
 8003f90:	2100      	movs	r1, #0
 8003f92:	4814      	ldr	r0, [pc, #80]	; (8003fe4 <Set_Screen+0x1b30>)
 8003f94:	f003 faaa 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
				Short_Left_Colored_RU_DrawString_32("Время рабАНН3", 13,30,  230, FonColor[6], BasicSymbolColor, Page[6]);
 8003f98:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <Set_Screen+0x1b34>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	4a13      	ldr	r2, [pc, #76]	; (8003fec <Set_Screen+0x1b38>)
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	4913      	ldr	r1, [pc, #76]	; (8003ff0 <Set_Screen+0x1b3c>)
 8003fa2:	6989      	ldr	r1, [r1, #24]
 8003fa4:	9102      	str	r1, [sp, #8]
 8003fa6:	9201      	str	r2, [sp, #4]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	23e6      	movs	r3, #230	; 0xe6
 8003fac:	221e      	movs	r2, #30
 8003fae:	210d      	movs	r1, #13
 8003fb0:	4810      	ldr	r0, [pc, #64]	; (8003ff4 <Set_Screen+0x1b40>)
 8003fb2:	f002 fcfd 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Ч", 1,585,  230, BackgroundColor, BasicSymbolColor, Page[6]);
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <Set_Screen+0x1b44>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a0c      	ldr	r2, [pc, #48]	; (8003fec <Set_Screen+0x1b38>)
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	490c      	ldr	r1, [pc, #48]	; (8003ff0 <Set_Screen+0x1b3c>)
 8003fc0:	6989      	ldr	r1, [r1, #24]
 8003fc2:	9102      	str	r1, [sp, #8]
 8003fc4:	9201      	str	r2, [sp, #4]
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	23e6      	movs	r3, #230	; 0xe6
 8003fca:	f240 2249 	movw	r2, #585	; 0x249
 8003fce:	2101      	movs	r1, #1
 8003fd0:	480a      	ldr	r0, [pc, #40]	; (8003ffc <Set_Screen+0x1b48>)
 8003fd2:	f002 fced 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

				Control_DB.MenuPointerMAX = 6;
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <Set_Screen+0x1b4c>)
 8003fd8:	2206      	movs	r2, #6
 8003fda:	809a      	strh	r2, [r3, #4]
 				Control_DB.MenuPointerMAX = 6;
			}
	


		break;
 8003fdc:	f000 bc6b 	b.w	80048b6 <Set_Screen+0x2402>
 8003fe0:	0801088c 	.word	0x0801088c
 8003fe4:	20000b48 	.word	0x20000b48
 8003fe8:	200000a4 	.word	0x200000a4
 8003fec:	200009f8 	.word	0x200009f8
 8003ff0:	20000984 	.word	0x20000984
 8003ff4:	0800dc24 	.word	0x0800dc24
 8003ff8:	20000008 	.word	0x20000008
 8003ffc:	0800dbdc 	.word	0x0800dbdc
 8004000:	20000b2c 	.word	0x20000b2c
				Short_Left_Colored_RU_DrawString_32("Ручн", 4,600,  50, BackgroundColor, BasicSymbolColor, Page[6]);
 8004004:	4ba1      	ldr	r3, [pc, #644]	; (800428c <Set_Screen+0x1dd8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4aa1      	ldr	r2, [pc, #644]	; (8004290 <Set_Screen+0x1ddc>)
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	49a1      	ldr	r1, [pc, #644]	; (8004294 <Set_Screen+0x1de0>)
 800400e:	6989      	ldr	r1, [r1, #24]
 8004010:	9102      	str	r1, [sp, #8]
 8004012:	9201      	str	r2, [sp, #4]
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2332      	movs	r3, #50	; 0x32
 8004018:	f44f 7216 	mov.w	r2, #600	; 0x258
 800401c:	2104      	movs	r1, #4
 800401e:	489e      	ldr	r0, [pc, #632]	; (8004298 <Set_Screen+0x1de4>)
 8004020:	f002 fcc6 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
				if(Work_regim_zaliv_1.execute)
 8004024:	4b9d      	ldr	r3, [pc, #628]	; (800429c <Set_Screen+0x1de8>)
 8004026:	789b      	ldrb	r3, [r3, #2]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d016      	beq.n	800405a <Set_Screen+0x1ba6>
							Work_regim_zaliv_1.execute = 0;
 800402c:	4b9b      	ldr	r3, [pc, #620]	; (800429c <Set_Screen+0x1de8>)
 800402e:	2200      	movs	r2, #0
 8004030:	709a      	strb	r2, [r3, #2]
							Draw_Rectangle(BackgroundColor, 30,   68,  770, 600, Page[6], 800, 480);
 8004032:	4b96      	ldr	r3, [pc, #600]	; (800428c <Set_Screen+0x1dd8>)
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	4b97      	ldr	r3, [pc, #604]	; (8004294 <Set_Screen+0x1de0>)
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800403e:	9203      	str	r2, [sp, #12]
 8004040:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004044:	9202      	str	r2, [sp, #8]
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	f44f 7316 	mov.w	r3, #600	; 0x258
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	f240 3302 	movw	r3, #770	; 0x302
 8004052:	2244      	movs	r2, #68	; 0x44
 8004054:	211e      	movs	r1, #30
 8004056:	f003 fe23 	bl	8007ca0 <Draw_Rectangle>
 				Short_Left_Colored_RU_DrawString_32("Конц эмульсии    ", 17,30,  80, FonColor[1], BasicSymbolColor, Page[6]);
 800405a:	4b91      	ldr	r3, [pc, #580]	; (80042a0 <Set_Screen+0x1dec>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4a8c      	ldr	r2, [pc, #560]	; (8004290 <Set_Screen+0x1ddc>)
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	498c      	ldr	r1, [pc, #560]	; (8004294 <Set_Screen+0x1de0>)
 8004064:	6989      	ldr	r1, [r1, #24]
 8004066:	9102      	str	r1, [sp, #8]
 8004068:	9201      	str	r2, [sp, #4]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2350      	movs	r3, #80	; 0x50
 800406e:	221e      	movs	r2, #30
 8004070:	2111      	movs	r1, #17
 8004072:	488c      	ldr	r0, [pc, #560]	; (80042a4 <Set_Screen+0x1df0>)
 8004074:	f002 fc9c 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 				Centred_DrawNumber_16_32bit_controled(&BUV_settings.conc_emul,0, 2, Control_DB.RazrPointer, 50,   10, 470, 80, 800,480, Page[6], FonColor[1], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004078:	4b8b      	ldr	r3, [pc, #556]	; (80042a8 <Set_Screen+0x1df4>)
 800407a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800407e:	461c      	mov	r4, r3
 8004080:	4b84      	ldr	r3, [pc, #528]	; (8004294 <Set_Screen+0x1de0>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	4a86      	ldr	r2, [pc, #536]	; (80042a0 <Set_Screen+0x1dec>)
 8004086:	6852      	ldr	r2, [r2, #4]
 8004088:	4981      	ldr	r1, [pc, #516]	; (8004290 <Set_Screen+0x1ddc>)
 800408a:	6809      	ldr	r1, [r1, #0]
 800408c:	2012      	movs	r0, #18
 800408e:	900b      	str	r0, [sp, #44]	; 0x2c
 8004090:	200b      	movs	r0, #11
 8004092:	900a      	str	r0, [sp, #40]	; 0x28
 8004094:	4885      	ldr	r0, [pc, #532]	; (80042ac <Set_Screen+0x1df8>)
 8004096:	9009      	str	r0, [sp, #36]	; 0x24
 8004098:	9108      	str	r1, [sp, #32]
 800409a:	9207      	str	r2, [sp, #28]
 800409c:	9306      	str	r3, [sp, #24]
 800409e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80040a2:	9305      	str	r3, [sp, #20]
 80040a4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80040a8:	9304      	str	r3, [sp, #16]
 80040aa:	2350      	movs	r3, #80	; 0x50
 80040ac:	9303      	str	r3, [sp, #12]
 80040ae:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80040b2:	9302      	str	r3, [sp, #8]
 80040b4:	230a      	movs	r3, #10
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	2332      	movs	r3, #50	; 0x32
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	4623      	mov	r3, r4
 80040be:	2202      	movs	r2, #2
 80040c0:	2100      	movs	r1, #0
 80040c2:	487b      	ldr	r0, [pc, #492]	; (80042b0 <Set_Screen+0x1dfc>)
 80040c4:	f003 fa12 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
 				Short_Left_Colored_RU_DrawString_32("Настр промыв фильт", 18, 30, 110, FonColor[2], BasicSymbolColor, Page[6]);
 80040c8:	4b75      	ldr	r3, [pc, #468]	; (80042a0 <Set_Screen+0x1dec>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a70      	ldr	r2, [pc, #448]	; (8004290 <Set_Screen+0x1ddc>)
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	4970      	ldr	r1, [pc, #448]	; (8004294 <Set_Screen+0x1de0>)
 80040d2:	6989      	ldr	r1, [r1, #24]
 80040d4:	9102      	str	r1, [sp, #8]
 80040d6:	9201      	str	r2, [sp, #4]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	236e      	movs	r3, #110	; 0x6e
 80040dc:	221e      	movs	r2, #30
 80040de:	2112      	movs	r1, #18
 80040e0:	4874      	ldr	r0, [pc, #464]	; (80042b4 <Set_Screen+0x1e00>)
 80040e2:	f002 fc65 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 				Centred_DrawNumber_16_32bit_controled(&BUV_settings.flushing_filter,0, 1, Control_DB.RazrPointer, 1,   0, 470, 110, 800,480, Page[6], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80040e6:	4b70      	ldr	r3, [pc, #448]	; (80042a8 <Set_Screen+0x1df4>)
 80040e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80040ec:	461c      	mov	r4, r3
 80040ee:	4b69      	ldr	r3, [pc, #420]	; (8004294 <Set_Screen+0x1de0>)
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	4a6b      	ldr	r2, [pc, #428]	; (80042a0 <Set_Screen+0x1dec>)
 80040f4:	6892      	ldr	r2, [r2, #8]
 80040f6:	4966      	ldr	r1, [pc, #408]	; (8004290 <Set_Screen+0x1ddc>)
 80040f8:	6809      	ldr	r1, [r1, #0]
 80040fa:	2012      	movs	r0, #18
 80040fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80040fe:	200b      	movs	r0, #11
 8004100:	900a      	str	r0, [sp, #40]	; 0x28
 8004102:	486a      	ldr	r0, [pc, #424]	; (80042ac <Set_Screen+0x1df8>)
 8004104:	9009      	str	r0, [sp, #36]	; 0x24
 8004106:	9108      	str	r1, [sp, #32]
 8004108:	9207      	str	r2, [sp, #28]
 800410a:	9306      	str	r3, [sp, #24]
 800410c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004116:	9304      	str	r3, [sp, #16]
 8004118:	236e      	movs	r3, #110	; 0x6e
 800411a:	9303      	str	r3, [sp, #12]
 800411c:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004120:	9302      	str	r3, [sp, #8]
 8004122:	2300      	movs	r3, #0
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	2301      	movs	r3, #1
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	4623      	mov	r3, r4
 800412c:	2201      	movs	r2, #1
 800412e:	2100      	movs	r1, #0
 8004130:	4861      	ldr	r0, [pc, #388]	; (80042b8 <Set_Screen+0x1e04>)
 8004132:	f003 f9db 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
 				Short_Left_Colored_RU_DrawString_32("По переп дав", 12,585,  110, BackgroundColor, BasicSymbolColor, Page[6]);
 8004136:	4b55      	ldr	r3, [pc, #340]	; (800428c <Set_Screen+0x1dd8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a55      	ldr	r2, [pc, #340]	; (8004290 <Set_Screen+0x1ddc>)
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	4955      	ldr	r1, [pc, #340]	; (8004294 <Set_Screen+0x1de0>)
 8004140:	6989      	ldr	r1, [r1, #24]
 8004142:	9102      	str	r1, [sp, #8]
 8004144:	9201      	str	r2, [sp, #4]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	236e      	movs	r3, #110	; 0x6e
 800414a:	f240 2249 	movw	r2, #585	; 0x249
 800414e:	210c      	movs	r1, #12
 8004150:	485a      	ldr	r0, [pc, #360]	; (80042bc <Set_Screen+0x1e08>)
 8004152:	f002 fc2d 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 				Short_Left_Colored_RU_DrawString_32("Время промыв", 	12,	30, 140, FonColor[3], BasicSymbolColor, Page[6]);
 8004156:	4b52      	ldr	r3, [pc, #328]	; (80042a0 <Set_Screen+0x1dec>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4a4d      	ldr	r2, [pc, #308]	; (8004290 <Set_Screen+0x1ddc>)
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	494d      	ldr	r1, [pc, #308]	; (8004294 <Set_Screen+0x1de0>)
 8004160:	6989      	ldr	r1, [r1, #24]
 8004162:	9102      	str	r1, [sp, #8]
 8004164:	9201      	str	r2, [sp, #4]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	238c      	movs	r3, #140	; 0x8c
 800416a:	221e      	movs	r2, #30
 800416c:	210c      	movs	r1, #12
 800416e:	4854      	ldr	r0, [pc, #336]	; (80042c0 <Set_Screen+0x1e0c>)
 8004170:	f002 fc1e 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 				Short_Left_Colored_RU_DrawString_32("Настр мин уровн конц", 20, 30, 170, FonColor[4], BasicSymbolColor, Page[6]);
 8004174:	4b4a      	ldr	r3, [pc, #296]	; (80042a0 <Set_Screen+0x1dec>)
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	4a45      	ldr	r2, [pc, #276]	; (8004290 <Set_Screen+0x1ddc>)
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	4945      	ldr	r1, [pc, #276]	; (8004294 <Set_Screen+0x1de0>)
 800417e:	6989      	ldr	r1, [r1, #24]
 8004180:	9102      	str	r1, [sp, #8]
 8004182:	9201      	str	r2, [sp, #4]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	23aa      	movs	r3, #170	; 0xaa
 8004188:	221e      	movs	r2, #30
 800418a:	2114      	movs	r1, #20
 800418c:	484d      	ldr	r0, [pc, #308]	; (80042c4 <Set_Screen+0x1e10>)
 800418e:	f002 fc0f 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 				Centred_DrawNumber_16_32bit_controled(1,0, 1, Control_DB.RazrPointer, 1,   0, 470, 170, 800,480, Page[6], FonColor[4], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004192:	4b45      	ldr	r3, [pc, #276]	; (80042a8 <Set_Screen+0x1df4>)
 8004194:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004198:	461c      	mov	r4, r3
 800419a:	4b3e      	ldr	r3, [pc, #248]	; (8004294 <Set_Screen+0x1de0>)
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	4a40      	ldr	r2, [pc, #256]	; (80042a0 <Set_Screen+0x1dec>)
 80041a0:	6912      	ldr	r2, [r2, #16]
 80041a2:	493b      	ldr	r1, [pc, #236]	; (8004290 <Set_Screen+0x1ddc>)
 80041a4:	6809      	ldr	r1, [r1, #0]
 80041a6:	2012      	movs	r0, #18
 80041a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80041aa:	200b      	movs	r0, #11
 80041ac:	900a      	str	r0, [sp, #40]	; 0x28
 80041ae:	483f      	ldr	r0, [pc, #252]	; (80042ac <Set_Screen+0x1df8>)
 80041b0:	9009      	str	r0, [sp, #36]	; 0x24
 80041b2:	9108      	str	r1, [sp, #32]
 80041b4:	9207      	str	r2, [sp, #28]
 80041b6:	9306      	str	r3, [sp, #24]
 80041b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80041bc:	9305      	str	r3, [sp, #20]
 80041be:	f44f 7348 	mov.w	r3, #800	; 0x320
 80041c2:	9304      	str	r3, [sp, #16]
 80041c4:	23aa      	movs	r3, #170	; 0xaa
 80041c6:	9303      	str	r3, [sp, #12]
 80041c8:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80041cc:	9302      	str	r3, [sp, #8]
 80041ce:	2300      	movs	r3, #0
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	2301      	movs	r3, #1
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	4623      	mov	r3, r4
 80041d8:	2201      	movs	r2, #1
 80041da:	2100      	movs	r1, #0
 80041dc:	2001      	movs	r0, #1
 80041de:	f003 f985 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
 				Short_Left_Colored_RU_DrawString_32("моль/л", 6,600,  170, BackgroundColor, BasicSymbolColor, Page[6]);
 80041e2:	4b2a      	ldr	r3, [pc, #168]	; (800428c <Set_Screen+0x1dd8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2a      	ldr	r2, [pc, #168]	; (8004290 <Set_Screen+0x1ddc>)
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	492a      	ldr	r1, [pc, #168]	; (8004294 <Set_Screen+0x1de0>)
 80041ec:	6989      	ldr	r1, [r1, #24]
 80041ee:	9102      	str	r1, [sp, #8]
 80041f0:	9201      	str	r2, [sp, #4]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	23aa      	movs	r3, #170	; 0xaa
 80041f6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80041fa:	2106      	movs	r1, #6
 80041fc:	4832      	ldr	r0, [pc, #200]	; (80042c8 <Set_Screen+0x1e14>)
 80041fe:	f002 fbd7 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 				Short_Left_Colored_RU_DrawString_32("Настр уровн авт разгр", 21, 30, 200, FonColor[5], BasicSymbolColor, Page[6]);
 8004202:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <Set_Screen+0x1dec>)
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	4a22      	ldr	r2, [pc, #136]	; (8004290 <Set_Screen+0x1ddc>)
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	4922      	ldr	r1, [pc, #136]	; (8004294 <Set_Screen+0x1de0>)
 800420c:	6989      	ldr	r1, [r1, #24]
 800420e:	9102      	str	r1, [sp, #8]
 8004210:	9201      	str	r2, [sp, #4]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	23c8      	movs	r3, #200	; 0xc8
 8004216:	221e      	movs	r2, #30
 8004218:	2115      	movs	r1, #21
 800421a:	482c      	ldr	r0, [pc, #176]	; (80042cc <Set_Screen+0x1e18>)
 800421c:	f002 fbc8 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 				Short_Left_Colored_RU_DrawString_32("Сброс настр по умол", 19, 	30, 230, FonColor[6], BasicSymbolColor, Page[6]);
 8004220:	4b1f      	ldr	r3, [pc, #124]	; (80042a0 <Set_Screen+0x1dec>)
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	4a1a      	ldr	r2, [pc, #104]	; (8004290 <Set_Screen+0x1ddc>)
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	491a      	ldr	r1, [pc, #104]	; (8004294 <Set_Screen+0x1de0>)
 800422a:	6989      	ldr	r1, [r1, #24]
 800422c:	9102      	str	r1, [sp, #8]
 800422e:	9201      	str	r2, [sp, #4]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	23e6      	movs	r3, #230	; 0xe6
 8004234:	221e      	movs	r2, #30
 8004236:	2113      	movs	r1, #19
 8004238:	4825      	ldr	r0, [pc, #148]	; (80042d0 <Set_Screen+0x1e1c>)
 800423a:	f002 fbb9 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 				Centred_DrawNumber_16_32bit_controled(1,0, 1, Control_DB.RazrPointer, 1,   0, 470, 200, 800,480, Page[6], FonColor[3], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800423e:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <Set_Screen+0x1df4>)
 8004240:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004244:	461c      	mov	r4, r3
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <Set_Screen+0x1de0>)
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <Set_Screen+0x1dec>)
 800424c:	68d2      	ldr	r2, [r2, #12]
 800424e:	4910      	ldr	r1, [pc, #64]	; (8004290 <Set_Screen+0x1ddc>)
 8004250:	6809      	ldr	r1, [r1, #0]
 8004252:	2012      	movs	r0, #18
 8004254:	900b      	str	r0, [sp, #44]	; 0x2c
 8004256:	200b      	movs	r0, #11
 8004258:	900a      	str	r0, [sp, #40]	; 0x28
 800425a:	4814      	ldr	r0, [pc, #80]	; (80042ac <Set_Screen+0x1df8>)
 800425c:	9009      	str	r0, [sp, #36]	; 0x24
 800425e:	9108      	str	r1, [sp, #32]
 8004260:	9207      	str	r2, [sp, #28]
 8004262:	9306      	str	r3, [sp, #24]
 8004264:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004268:	9305      	str	r3, [sp, #20]
 800426a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800426e:	9304      	str	r3, [sp, #16]
 8004270:	23c8      	movs	r3, #200	; 0xc8
 8004272:	9303      	str	r3, [sp, #12]
 8004274:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004278:	9302      	str	r3, [sp, #8]
 800427a:	2300      	movs	r3, #0
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	2301      	movs	r3, #1
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	4623      	mov	r3, r4
 8004284:	2201      	movs	r2, #1
 8004286:	2100      	movs	r1, #0
 8004288:	2001      	movs	r0, #1
 800428a:	e023      	b.n	80042d4 <Set_Screen+0x1e20>
 800428c:	20000008 	.word	0x20000008
 8004290:	200009f8 	.word	0x200009f8
 8004294:	20000984 	.word	0x20000984
 8004298:	0800dc40 	.word	0x0800dc40
 800429c:	20000104 	.word	0x20000104
 80042a0:	200000a4 	.word	0x200000a4
 80042a4:	0800dc4c 	.word	0x0800dc4c
 80042a8:	20000b2c 	.word	0x20000b2c
 80042ac:	0801088c 	.word	0x0801088c
 80042b0:	20000b54 	.word	0x20000b54
 80042b4:	0800dc6c 	.word	0x0800dc6c
 80042b8:	20000b50 	.word	0x20000b50
 80042bc:	0800dc90 	.word	0x0800dc90
 80042c0:	0800dca8 	.word	0x0800dca8
 80042c4:	0800dcc0 	.word	0x0800dcc0
 80042c8:	0800dce8 	.word	0x0800dce8
 80042cc:	0800dcf4 	.word	0x0800dcf4
 80042d0:	0800dd1c 	.word	0x0800dd1c
 80042d4:	f003 f90a 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
 				Short_Left_Colored_RU_DrawString_32("эл.магн", 7,600,  200, BackgroundColor, BasicSymbolColor, Page[6]);
 80042d8:	4b83      	ldr	r3, [pc, #524]	; (80044e8 <Set_Screen+0x2034>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a83      	ldr	r2, [pc, #524]	; (80044ec <Set_Screen+0x2038>)
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	4983      	ldr	r1, [pc, #524]	; (80044f0 <Set_Screen+0x203c>)
 80042e2:	6989      	ldr	r1, [r1, #24]
 80042e4:	9102      	str	r1, [sp, #8]
 80042e6:	9201      	str	r2, [sp, #4]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	23c8      	movs	r3, #200	; 0xc8
 80042ec:	f44f 7216 	mov.w	r2, #600	; 0x258
 80042f0:	2107      	movs	r1, #7
 80042f2:	4880      	ldr	r0, [pc, #512]	; (80044f4 <Set_Screen+0x2040>)
 80042f4:	f002 fb5c 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 				Control_DB.MenuPointerMAX = 6;
 80042f8:	4b7f      	ldr	r3, [pc, #508]	; (80044f8 <Set_Screen+0x2044>)
 80042fa:	2206      	movs	r2, #6
 80042fc:	809a      	strh	r2, [r3, #4]
		break;
 80042fe:	e2da      	b.n	80048b6 <Set_Screen+0x2402>
		case 7: // Заводские настройки

			Short_Left_Colored_RU_DrawString_32("Макс кол-во одновр. раб. АНН :", 30,	20,  70, FonColor[0], BasicSymbolColor, Page[7]);
 8004300:	4b7e      	ldr	r3, [pc, #504]	; (80044fc <Set_Screen+0x2048>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a79      	ldr	r2, [pc, #484]	; (80044ec <Set_Screen+0x2038>)
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	4979      	ldr	r1, [pc, #484]	; (80044f0 <Set_Screen+0x203c>)
 800430a:	69c9      	ldr	r1, [r1, #28]
 800430c:	9102      	str	r1, [sp, #8]
 800430e:	9201      	str	r2, [sp, #4]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2346      	movs	r3, #70	; 0x46
 8004314:	2214      	movs	r2, #20
 8004316:	211e      	movs	r1, #30
 8004318:	4879      	ldr	r0, [pc, #484]	; (8004500 <Set_Screen+0x204c>)
 800431a:	f002 fb49 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.Max_ANN_operation,   0, 1, Control_DB.RazrPointer,     3,      1, 700,  70, 800,480, Page[7], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800431e:	4b76      	ldr	r3, [pc, #472]	; (80044f8 <Set_Screen+0x2044>)
 8004320:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004324:	461c      	mov	r4, r3
 8004326:	4b72      	ldr	r3, [pc, #456]	; (80044f0 <Set_Screen+0x203c>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4a74      	ldr	r2, [pc, #464]	; (80044fc <Set_Screen+0x2048>)
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	496f      	ldr	r1, [pc, #444]	; (80044ec <Set_Screen+0x2038>)
 8004330:	6809      	ldr	r1, [r1, #0]
 8004332:	2012      	movs	r0, #18
 8004334:	900b      	str	r0, [sp, #44]	; 0x2c
 8004336:	200b      	movs	r0, #11
 8004338:	900a      	str	r0, [sp, #40]	; 0x28
 800433a:	4872      	ldr	r0, [pc, #456]	; (8004504 <Set_Screen+0x2050>)
 800433c:	9009      	str	r0, [sp, #36]	; 0x24
 800433e:	9108      	str	r1, [sp, #32]
 8004340:	9207      	str	r2, [sp, #28]
 8004342:	9306      	str	r3, [sp, #24]
 8004344:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004348:	9305      	str	r3, [sp, #20]
 800434a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800434e:	9304      	str	r3, [sp, #16]
 8004350:	2346      	movs	r3, #70	; 0x46
 8004352:	9303      	str	r3, [sp, #12]
 8004354:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8004358:	9302      	str	r3, [sp, #8]
 800435a:	2301      	movs	r3, #1
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	2303      	movs	r3, #3
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	4623      	mov	r3, r4
 8004364:	2201      	movs	r2, #1
 8004366:	2100      	movs	r1, #0
 8004368:	4867      	ldr	r0, [pc, #412]	; (8004508 <Set_Screen+0x2054>)
 800436a:	f003 f8bf 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Макс выставляемое давление   :", 30,	20, 110, FonColor[1], BasicSymbolColor, Page[7]);
 800436e:	4b63      	ldr	r3, [pc, #396]	; (80044fc <Set_Screen+0x2048>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4a5e      	ldr	r2, [pc, #376]	; (80044ec <Set_Screen+0x2038>)
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	495e      	ldr	r1, [pc, #376]	; (80044f0 <Set_Screen+0x203c>)
 8004378:	69c9      	ldr	r1, [r1, #28]
 800437a:	9102      	str	r1, [sp, #8]
 800437c:	9201      	str	r2, [sp, #4]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	236e      	movs	r3, #110	; 0x6e
 8004382:	2214      	movs	r2, #20
 8004384:	211e      	movs	r1, #30
 8004386:	4861      	ldr	r0, [pc, #388]	; (800450c <Set_Screen+0x2058>)
 8004388:	f002 fb12 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.Max_Pressure, 	    0, 2, Control_DB.RazrPointer,    60,     10, 700, 110, 800,480, Page[7], FonColor[1], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800438c:	4b5a      	ldr	r3, [pc, #360]	; (80044f8 <Set_Screen+0x2044>)
 800438e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004392:	461c      	mov	r4, r3
 8004394:	4b56      	ldr	r3, [pc, #344]	; (80044f0 <Set_Screen+0x203c>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	4a58      	ldr	r2, [pc, #352]	; (80044fc <Set_Screen+0x2048>)
 800439a:	6852      	ldr	r2, [r2, #4]
 800439c:	4953      	ldr	r1, [pc, #332]	; (80044ec <Set_Screen+0x2038>)
 800439e:	6809      	ldr	r1, [r1, #0]
 80043a0:	2012      	movs	r0, #18
 80043a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80043a4:	200b      	movs	r0, #11
 80043a6:	900a      	str	r0, [sp, #40]	; 0x28
 80043a8:	4856      	ldr	r0, [pc, #344]	; (8004504 <Set_Screen+0x2050>)
 80043aa:	9009      	str	r0, [sp, #36]	; 0x24
 80043ac:	9108      	str	r1, [sp, #32]
 80043ae:	9207      	str	r2, [sp, #28]
 80043b0:	9306      	str	r3, [sp, #24]
 80043b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80043b6:	9305      	str	r3, [sp, #20]
 80043b8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80043bc:	9304      	str	r3, [sp, #16]
 80043be:	236e      	movs	r3, #110	; 0x6e
 80043c0:	9303      	str	r3, [sp, #12]
 80043c2:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80043c6:	9302      	str	r3, [sp, #8]
 80043c8:	230a      	movs	r3, #10
 80043ca:	9301      	str	r3, [sp, #4]
 80043cc:	233c      	movs	r3, #60	; 0x3c
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	4623      	mov	r3, r4
 80043d2:	2202      	movs	r2, #2
 80043d4:	2100      	movs	r1, #0
 80043d6:	484e      	ldr	r0, [pc, #312]	; (8004510 <Set_Screen+0x205c>)
 80043d8:	f003 f888 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Срок кап ремонта АНН (ч)     :", 30,	20, 150, FonColor[2], BasicSymbolColor, Page[7]);
 80043dc:	4b47      	ldr	r3, [pc, #284]	; (80044fc <Set_Screen+0x2048>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a42      	ldr	r2, [pc, #264]	; (80044ec <Set_Screen+0x2038>)
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	4942      	ldr	r1, [pc, #264]	; (80044f0 <Set_Screen+0x203c>)
 80043e6:	69c9      	ldr	r1, [r1, #28]
 80043e8:	9102      	str	r1, [sp, #8]
 80043ea:	9201      	str	r2, [sp, #4]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	2396      	movs	r3, #150	; 0x96
 80043f0:	2214      	movs	r2, #20
 80043f2:	211e      	movs	r1, #30
 80043f4:	4847      	ldr	r0, [pc, #284]	; (8004514 <Set_Screen+0x2060>)
 80043f6:	f002 fadb 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.Major_repear_period, 0, 5, Control_DB.RazrPointer, 50000,   5000, 700, 150, 800,480, Page[7], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80043fa:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <Set_Screen+0x2044>)
 80043fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004400:	461c      	mov	r4, r3
 8004402:	4b3b      	ldr	r3, [pc, #236]	; (80044f0 <Set_Screen+0x203c>)
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	4a3d      	ldr	r2, [pc, #244]	; (80044fc <Set_Screen+0x2048>)
 8004408:	6892      	ldr	r2, [r2, #8]
 800440a:	4938      	ldr	r1, [pc, #224]	; (80044ec <Set_Screen+0x2038>)
 800440c:	6809      	ldr	r1, [r1, #0]
 800440e:	2012      	movs	r0, #18
 8004410:	900b      	str	r0, [sp, #44]	; 0x2c
 8004412:	200b      	movs	r0, #11
 8004414:	900a      	str	r0, [sp, #40]	; 0x28
 8004416:	483b      	ldr	r0, [pc, #236]	; (8004504 <Set_Screen+0x2050>)
 8004418:	9009      	str	r0, [sp, #36]	; 0x24
 800441a:	9108      	str	r1, [sp, #32]
 800441c:	9207      	str	r2, [sp, #28]
 800441e:	9306      	str	r3, [sp, #24]
 8004420:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004424:	9305      	str	r3, [sp, #20]
 8004426:	f44f 7348 	mov.w	r3, #800	; 0x320
 800442a:	9304      	str	r3, [sp, #16]
 800442c:	2396      	movs	r3, #150	; 0x96
 800442e:	9303      	str	r3, [sp, #12]
 8004430:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8004434:	9302      	str	r3, [sp, #8]
 8004436:	f241 3388 	movw	r3, #5000	; 0x1388
 800443a:	9301      	str	r3, [sp, #4]
 800443c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	4623      	mov	r3, r4
 8004444:	2205      	movs	r2, #5
 8004446:	2100      	movs	r1, #0
 8004448:	4833      	ldr	r0, [pc, #204]	; (8004518 <Set_Screen+0x2064>)
 800444a:	f003 f84f 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Ур.эмульсии при котором откл :", 30,	20, 190, FonColor[3], BasicSymbolColor, Page[7]);
 800444e:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <Set_Screen+0x2048>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4a26      	ldr	r2, [pc, #152]	; (80044ec <Set_Screen+0x2038>)
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	4926      	ldr	r1, [pc, #152]	; (80044f0 <Set_Screen+0x203c>)
 8004458:	69c9      	ldr	r1, [r1, #28]
 800445a:	9102      	str	r1, [sp, #8]
 800445c:	9201      	str	r2, [sp, #4]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	23be      	movs	r3, #190	; 0xbe
 8004462:	2214      	movs	r2, #20
 8004464:	211e      	movs	r1, #30
 8004466:	482d      	ldr	r0, [pc, #180]	; (800451c <Set_Screen+0x2068>)
 8004468:	f002 faa2 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.emulsion_off_level, 0, 3, Control_DB.RazrPointer,    900,    100, 700, 190, 800,480, Page[7], FonColor[3], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800446c:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <Set_Screen+0x2044>)
 800446e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004472:	461c      	mov	r4, r3
 8004474:	4b1e      	ldr	r3, [pc, #120]	; (80044f0 <Set_Screen+0x203c>)
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	4a20      	ldr	r2, [pc, #128]	; (80044fc <Set_Screen+0x2048>)
 800447a:	68d2      	ldr	r2, [r2, #12]
 800447c:	491b      	ldr	r1, [pc, #108]	; (80044ec <Set_Screen+0x2038>)
 800447e:	6809      	ldr	r1, [r1, #0]
 8004480:	2012      	movs	r0, #18
 8004482:	900b      	str	r0, [sp, #44]	; 0x2c
 8004484:	200b      	movs	r0, #11
 8004486:	900a      	str	r0, [sp, #40]	; 0x28
 8004488:	481e      	ldr	r0, [pc, #120]	; (8004504 <Set_Screen+0x2050>)
 800448a:	9009      	str	r0, [sp, #36]	; 0x24
 800448c:	9108      	str	r1, [sp, #32]
 800448e:	9207      	str	r2, [sp, #28]
 8004490:	9306      	str	r3, [sp, #24]
 8004492:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004496:	9305      	str	r3, [sp, #20]
 8004498:	f44f 7348 	mov.w	r3, #800	; 0x320
 800449c:	9304      	str	r3, [sp, #16]
 800449e:	23be      	movs	r3, #190	; 0xbe
 80044a0:	9303      	str	r3, [sp, #12]
 80044a2:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80044a6:	9302      	str	r3, [sp, #8]
 80044a8:	2364      	movs	r3, #100	; 0x64
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	f44f 7361 	mov.w	r3, #900	; 0x384
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4623      	mov	r3, r4
 80044b4:	2203      	movs	r2, #3
 80044b6:	2100      	movs	r1, #0
 80044b8:	4819      	ldr	r0, [pc, #100]	; (8004520 <Set_Screen+0x206c>)
 80044ba:	f003 f817 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>

			if(!BUV_settings_global.work_on_water_enable)
 80044be:	4b19      	ldr	r3, [pc, #100]	; (8004524 <Set_Screen+0x2070>)
 80044c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d131      	bne.n	800452c <Set_Screen+0x2078>
			{
				Short_Left_Colored_RU_DrawString_32("Работа на воде запрещена      ", 30,	20, 230, FonColor[4], BasicSymbolColor, Page[7]);
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <Set_Screen+0x2048>)
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	4a07      	ldr	r2, [pc, #28]	; (80044ec <Set_Screen+0x2038>)
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	4907      	ldr	r1, [pc, #28]	; (80044f0 <Set_Screen+0x203c>)
 80044d2:	69c9      	ldr	r1, [r1, #28]
 80044d4:	9102      	str	r1, [sp, #8]
 80044d6:	9201      	str	r2, [sp, #4]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	23e6      	movs	r3, #230	; 0xe6
 80044dc:	2214      	movs	r2, #20
 80044de:	211e      	movs	r1, #30
 80044e0:	4811      	ldr	r0, [pc, #68]	; (8004528 <Set_Screen+0x2074>)
 80044e2:	f002 fa65 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
 80044e6:	e030      	b.n	800454a <Set_Screen+0x2096>
 80044e8:	20000008 	.word	0x20000008
 80044ec:	200009f8 	.word	0x200009f8
 80044f0:	20000984 	.word	0x20000984
 80044f4:	0800dd40 	.word	0x0800dd40
 80044f8:	20000b2c 	.word	0x20000b2c
 80044fc:	200000a4 	.word	0x200000a4
 8004500:	0800dd50 	.word	0x0800dd50
 8004504:	0801088c 	.word	0x0801088c
 8004508:	20000a4c 	.word	0x20000a4c
 800450c:	0800dd84 	.word	0x0800dd84
 8004510:	20000a50 	.word	0x20000a50
 8004514:	0800ddbc 	.word	0x0800ddbc
 8004518:	20000a54 	.word	0x20000a54
 800451c:	0800ddf0 	.word	0x0800ddf0
 8004520:	20000a58 	.word	0x20000a58
 8004524:	20000a34 	.word	0x20000a34
 8004528:	0800de28 	.word	0x0800de28
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Работа на воде разрешена      ", 30,	20, 230, FonColor[4], BasicSymbolColor, Page[7]);
 800452c:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <Set_Screen+0x2124>)
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <Set_Screen+0x2128>)
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	492a      	ldr	r1, [pc, #168]	; (80045e0 <Set_Screen+0x212c>)
 8004536:	69c9      	ldr	r1, [r1, #28]
 8004538:	9102      	str	r1, [sp, #8]
 800453a:	9201      	str	r2, [sp, #4]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	23e6      	movs	r3, #230	; 0xe6
 8004540:	2214      	movs	r2, #20
 8004542:	211e      	movs	r1, #30
 8004544:	4827      	ldr	r0, [pc, #156]	; (80045e4 <Set_Screen+0x2130>)
 8004546:	f002 fa33 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			}

			Short_Left_Colored_RU_DrawString_32("Ур.конц-та при котором предупр",    30,	20, 270, FonColor[5], BasicSymbolColor, Page[7]);
 800454a:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <Set_Screen+0x2124>)
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	4a23      	ldr	r2, [pc, #140]	; (80045dc <Set_Screen+0x2128>)
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	4923      	ldr	r1, [pc, #140]	; (80045e0 <Set_Screen+0x212c>)
 8004554:	69c9      	ldr	r1, [r1, #28]
 8004556:	9102      	str	r1, [sp, #8]
 8004558:	9201      	str	r2, [sp, #4]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8004560:	2214      	movs	r2, #20
 8004562:	211e      	movs	r1, #30
 8004564:	4820      	ldr	r0, [pc, #128]	; (80045e8 <Set_Screen+0x2134>)
 8004566:	f002 fa23 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.water_work_conconcentrate_level, 0, 3, Control_DB.RazrPointer,    900,    100, 700, 270, 800,480, Page[7], FonColor[5], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <Set_Screen+0x2138>)
 800456c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004570:	461c      	mov	r4, r3
 8004572:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <Set_Screen+0x212c>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <Set_Screen+0x2124>)
 8004578:	6952      	ldr	r2, [r2, #20]
 800457a:	4918      	ldr	r1, [pc, #96]	; (80045dc <Set_Screen+0x2128>)
 800457c:	6809      	ldr	r1, [r1, #0]
 800457e:	2012      	movs	r0, #18
 8004580:	900b      	str	r0, [sp, #44]	; 0x2c
 8004582:	200b      	movs	r0, #11
 8004584:	900a      	str	r0, [sp, #40]	; 0x28
 8004586:	481a      	ldr	r0, [pc, #104]	; (80045f0 <Set_Screen+0x213c>)
 8004588:	9009      	str	r0, [sp, #36]	; 0x24
 800458a:	9108      	str	r1, [sp, #32]
 800458c:	9207      	str	r2, [sp, #28]
 800458e:	9306      	str	r3, [sp, #24]
 8004590:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004594:	9305      	str	r3, [sp, #20]
 8004596:	f44f 7348 	mov.w	r3, #800	; 0x320
 800459a:	9304      	str	r3, [sp, #16]
 800459c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80045a0:	9303      	str	r3, [sp, #12]
 80045a2:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80045a6:	9302      	str	r3, [sp, #8]
 80045a8:	2364      	movs	r3, #100	; 0x64
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	f44f 7361 	mov.w	r3, #900	; 0x384
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	4623      	mov	r3, r4
 80045b4:	2203      	movs	r2, #3
 80045b6:	2100      	movs	r1, #0
 80045b8:	480e      	ldr	r0, [pc, #56]	; (80045f4 <Set_Screen+0x2140>)
 80045ba:	f002 ff97 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>


			Control_DB.MenuPointerMAX 	= 5;
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <Set_Screen+0x2138>)
 80045c0:	2205      	movs	r2, #5
 80045c2:	809a      	strh	r2, [r3, #4]
			if(Control_DB.MenuPointer == 4)
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <Set_Screen+0x2138>)
 80045c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	f040 8172 	bne.w	80048b4 <Set_Screen+0x2400>
			{
				Control_DB.RazrPointer = 0;
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <Set_Screen+0x2138>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	805a      	strh	r2, [r3, #2]
			}

		break;
 80045d6:	e16d      	b.n	80048b4 <Set_Screen+0x2400>
 80045d8:	200000a4 	.word	0x200000a4
 80045dc:	200009f8 	.word	0x200009f8
 80045e0:	20000984 	.word	0x20000984
 80045e4:	0800de5c 	.word	0x0800de5c
 80045e8:	0800de90 	.word	0x0800de90
 80045ec:	20000b2c 	.word	0x20000b2c
 80045f0:	0801088c 	.word	0x0801088c
 80045f4:	20000a60 	.word	0x20000a60

		case 21:

			Short_Left_Colored_RU_DrawString_32("Адрес            ", 17,	100,  70, FonColor[0], BasicSymbolColor, Page[21]);
 80045f8:	4b9c      	ldr	r3, [pc, #624]	; (800486c <Set_Screen+0x23b8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a9c      	ldr	r2, [pc, #624]	; (8004870 <Set_Screen+0x23bc>)
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	499c      	ldr	r1, [pc, #624]	; (8004874 <Set_Screen+0x23c0>)
 8004602:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004604:	9102      	str	r1, [sp, #8]
 8004606:	9201      	str	r2, [sp, #4]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	2346      	movs	r3, #70	; 0x46
 800460c:	2264      	movs	r2, #100	; 0x64
 800460e:	2111      	movs	r1, #17
 8004610:	4899      	ldr	r0, [pc, #612]	; (8004878 <Set_Screen+0x23c4>)
 8004612:	f002 f9cd 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Скорость         ", 17, 	100, 110, FonColor[1], BasicSymbolColor, Page[21]);
 8004616:	4b95      	ldr	r3, [pc, #596]	; (800486c <Set_Screen+0x23b8>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4a95      	ldr	r2, [pc, #596]	; (8004870 <Set_Screen+0x23bc>)
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	4995      	ldr	r1, [pc, #596]	; (8004874 <Set_Screen+0x23c0>)
 8004620:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004622:	9102      	str	r1, [sp, #8]
 8004624:	9201      	str	r2, [sp, #4]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	236e      	movs	r3, #110	; 0x6e
 800462a:	2264      	movs	r2, #100	; 0x64
 800462c:	2111      	movs	r1, #17
 800462e:	4893      	ldr	r0, [pc, #588]	; (800487c <Set_Screen+0x23c8>)
 8004630:	f002 f9be 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Стоп биты        ", 17, 	100, 150, FonColor[2], BasicSymbolColor, Page[21]);
 8004634:	4b8d      	ldr	r3, [pc, #564]	; (800486c <Set_Screen+0x23b8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a8d      	ldr	r2, [pc, #564]	; (8004870 <Set_Screen+0x23bc>)
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	498d      	ldr	r1, [pc, #564]	; (8004874 <Set_Screen+0x23c0>)
 800463e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004640:	9102      	str	r1, [sp, #8]
 8004642:	9201      	str	r2, [sp, #4]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	2396      	movs	r3, #150	; 0x96
 8004648:	2264      	movs	r2, #100	; 0x64
 800464a:	2111      	movs	r1, #17
 800464c:	488c      	ldr	r0, [pc, #560]	; (8004880 <Set_Screen+0x23cc>)
 800464e:	f002 f9af 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Яркость дисплея  ", 17, 	100, 190, FonColor[3], BasicSymbolColor, Page[21]);
 8004652:	4b86      	ldr	r3, [pc, #536]	; (800486c <Set_Screen+0x23b8>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	4a86      	ldr	r2, [pc, #536]	; (8004870 <Set_Screen+0x23bc>)
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	4986      	ldr	r1, [pc, #536]	; (8004874 <Set_Screen+0x23c0>)
 800465c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800465e:	9102      	str	r1, [sp, #8]
 8004660:	9201      	str	r2, [sp, #4]
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	23be      	movs	r3, #190	; 0xbe
 8004666:	2264      	movs	r2, #100	; 0x64
 8004668:	2111      	movs	r1, #17
 800466a:	4886      	ldr	r0, [pc, #536]	; (8004884 <Set_Screen+0x23d0>)
 800466c:	f002 f9a0 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Яркость клав-ры  ", 17, 	100, 230, FonColor[4], BasicSymbolColor, Page[21]);
 8004670:	4b7e      	ldr	r3, [pc, #504]	; (800486c <Set_Screen+0x23b8>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	4a7e      	ldr	r2, [pc, #504]	; (8004870 <Set_Screen+0x23bc>)
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	497e      	ldr	r1, [pc, #504]	; (8004874 <Set_Screen+0x23c0>)
 800467a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800467c:	9102      	str	r1, [sp, #8]
 800467e:	9201      	str	r2, [sp, #4]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	23e6      	movs	r3, #230	; 0xe6
 8004684:	2264      	movs	r2, #100	; 0x64
 8004686:	2111      	movs	r1, #17
 8004688:	487f      	ldr	r0, [pc, #508]	; (8004888 <Set_Screen+0x23d4>)
 800468a:	f002 f991 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Сохранить во флеш", 17, 	100, 270, FonColor[5], BasicSymbolColor, Page[21]);
 800468e:	4b77      	ldr	r3, [pc, #476]	; (800486c <Set_Screen+0x23b8>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	4a77      	ldr	r2, [pc, #476]	; (8004870 <Set_Screen+0x23bc>)
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	4977      	ldr	r1, [pc, #476]	; (8004874 <Set_Screen+0x23c0>)
 8004698:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800469a:	9102      	str	r1, [sp, #8]
 800469c:	9201      	str	r2, [sp, #4]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80046a4:	2264      	movs	r2, #100	; 0x64
 80046a6:	2111      	movs	r1, #17
 80046a8:	4878      	ldr	r0, [pc, #480]	; (800488c <Set_Screen+0x23d8>)
 80046aa:	f002 f981 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_ADDR, 			0, 3, Control_DB.RazrPointer,    255,      0, 470,  70, 800,480, Page[21], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80046ae:	4b78      	ldr	r3, [pc, #480]	; (8004890 <Set_Screen+0x23dc>)
 80046b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80046b4:	461c      	mov	r4, r3
 80046b6:	4b6f      	ldr	r3, [pc, #444]	; (8004874 <Set_Screen+0x23c0>)
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	4a6c      	ldr	r2, [pc, #432]	; (800486c <Set_Screen+0x23b8>)
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	496c      	ldr	r1, [pc, #432]	; (8004870 <Set_Screen+0x23bc>)
 80046c0:	6809      	ldr	r1, [r1, #0]
 80046c2:	2012      	movs	r0, #18
 80046c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80046c6:	200b      	movs	r0, #11
 80046c8:	900a      	str	r0, [sp, #40]	; 0x28
 80046ca:	4872      	ldr	r0, [pc, #456]	; (8004894 <Set_Screen+0x23e0>)
 80046cc:	9009      	str	r0, [sp, #36]	; 0x24
 80046ce:	9108      	str	r1, [sp, #32]
 80046d0:	9207      	str	r2, [sp, #28]
 80046d2:	9306      	str	r3, [sp, #24]
 80046d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80046d8:	9305      	str	r3, [sp, #20]
 80046da:	f44f 7348 	mov.w	r3, #800	; 0x320
 80046de:	9304      	str	r3, [sp, #16]
 80046e0:	2346      	movs	r3, #70	; 0x46
 80046e2:	9303      	str	r3, [sp, #12]
 80046e4:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80046e8:	9302      	str	r3, [sp, #8]
 80046ea:	2300      	movs	r3, #0
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	23ff      	movs	r3, #255	; 0xff
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	4623      	mov	r3, r4
 80046f4:	2203      	movs	r2, #3
 80046f6:	2100      	movs	r1, #0
 80046f8:	4867      	ldr	r0, [pc, #412]	; (8004898 <Set_Screen+0x23e4>)
 80046fa:	f002 fef7 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_Speed, 		0, 6, Control_DB.RazrPointer, 115200,   9600, 470, 110, 800,480, Page[21], FonColor[1], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80046fe:	4b64      	ldr	r3, [pc, #400]	; (8004890 <Set_Screen+0x23dc>)
 8004700:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004704:	461c      	mov	r4, r3
 8004706:	4b5b      	ldr	r3, [pc, #364]	; (8004874 <Set_Screen+0x23c0>)
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	4a58      	ldr	r2, [pc, #352]	; (800486c <Set_Screen+0x23b8>)
 800470c:	6852      	ldr	r2, [r2, #4]
 800470e:	4958      	ldr	r1, [pc, #352]	; (8004870 <Set_Screen+0x23bc>)
 8004710:	6809      	ldr	r1, [r1, #0]
 8004712:	2012      	movs	r0, #18
 8004714:	900b      	str	r0, [sp, #44]	; 0x2c
 8004716:	200b      	movs	r0, #11
 8004718:	900a      	str	r0, [sp, #40]	; 0x28
 800471a:	485e      	ldr	r0, [pc, #376]	; (8004894 <Set_Screen+0x23e0>)
 800471c:	9009      	str	r0, [sp, #36]	; 0x24
 800471e:	9108      	str	r1, [sp, #32]
 8004720:	9207      	str	r2, [sp, #28]
 8004722:	9306      	str	r3, [sp, #24]
 8004724:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004728:	9305      	str	r3, [sp, #20]
 800472a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800472e:	9304      	str	r3, [sp, #16]
 8004730:	236e      	movs	r3, #110	; 0x6e
 8004732:	9303      	str	r3, [sp, #12]
 8004734:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004738:	9302      	str	r3, [sp, #8]
 800473a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	4623      	mov	r3, r4
 8004748:	2206      	movs	r2, #6
 800474a:	2100      	movs	r1, #0
 800474c:	4853      	ldr	r0, [pc, #332]	; (800489c <Set_Screen+0x23e8>)
 800474e:	f002 fecd 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_Stops, 		0, 1, Control_DB.RazrPointer,      2,      1, 470, 150, 800,480, Page[21], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004752:	4b4f      	ldr	r3, [pc, #316]	; (8004890 <Set_Screen+0x23dc>)
 8004754:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004758:	461c      	mov	r4, r3
 800475a:	4b46      	ldr	r3, [pc, #280]	; (8004874 <Set_Screen+0x23c0>)
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	4a43      	ldr	r2, [pc, #268]	; (800486c <Set_Screen+0x23b8>)
 8004760:	6892      	ldr	r2, [r2, #8]
 8004762:	4943      	ldr	r1, [pc, #268]	; (8004870 <Set_Screen+0x23bc>)
 8004764:	6809      	ldr	r1, [r1, #0]
 8004766:	2012      	movs	r0, #18
 8004768:	900b      	str	r0, [sp, #44]	; 0x2c
 800476a:	200b      	movs	r0, #11
 800476c:	900a      	str	r0, [sp, #40]	; 0x28
 800476e:	4849      	ldr	r0, [pc, #292]	; (8004894 <Set_Screen+0x23e0>)
 8004770:	9009      	str	r0, [sp, #36]	; 0x24
 8004772:	9108      	str	r1, [sp, #32]
 8004774:	9207      	str	r2, [sp, #28]
 8004776:	9306      	str	r3, [sp, #24]
 8004778:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800477c:	9305      	str	r3, [sp, #20]
 800477e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004782:	9304      	str	r3, [sp, #16]
 8004784:	2396      	movs	r3, #150	; 0x96
 8004786:	9303      	str	r3, [sp, #12]
 8004788:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800478c:	9302      	str	r3, [sp, #8]
 800478e:	2301      	movs	r3, #1
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	2302      	movs	r3, #2
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	4623      	mov	r3, r4
 8004798:	2201      	movs	r2, #1
 800479a:	2100      	movs	r1, #0
 800479c:	4840      	ldr	r0, [pc, #256]	; (80048a0 <Set_Screen+0x23ec>)
 800479e:	f002 fea5 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.brightness_disp, 	0, 3, Control_DB.RazrPointer,    100,     10, 470, 190, 800,480, Page[21], FonColor[3], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80047a2:	4b3b      	ldr	r3, [pc, #236]	; (8004890 <Set_Screen+0x23dc>)
 80047a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047a8:	461c      	mov	r4, r3
 80047aa:	4b32      	ldr	r3, [pc, #200]	; (8004874 <Set_Screen+0x23c0>)
 80047ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ae:	4a2f      	ldr	r2, [pc, #188]	; (800486c <Set_Screen+0x23b8>)
 80047b0:	68d2      	ldr	r2, [r2, #12]
 80047b2:	492f      	ldr	r1, [pc, #188]	; (8004870 <Set_Screen+0x23bc>)
 80047b4:	6809      	ldr	r1, [r1, #0]
 80047b6:	2012      	movs	r0, #18
 80047b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80047ba:	200b      	movs	r0, #11
 80047bc:	900a      	str	r0, [sp, #40]	; 0x28
 80047be:	4835      	ldr	r0, [pc, #212]	; (8004894 <Set_Screen+0x23e0>)
 80047c0:	9009      	str	r0, [sp, #36]	; 0x24
 80047c2:	9108      	str	r1, [sp, #32]
 80047c4:	9207      	str	r2, [sp, #28]
 80047c6:	9306      	str	r3, [sp, #24]
 80047c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80047cc:	9305      	str	r3, [sp, #20]
 80047ce:	f44f 7348 	mov.w	r3, #800	; 0x320
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	23be      	movs	r3, #190	; 0xbe
 80047d6:	9303      	str	r3, [sp, #12]
 80047d8:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80047dc:	9302      	str	r3, [sp, #8]
 80047de:	230a      	movs	r3, #10
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	2364      	movs	r3, #100	; 0x64
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	4623      	mov	r3, r4
 80047e8:	2203      	movs	r2, #3
 80047ea:	2100      	movs	r1, #0
 80047ec:	482d      	ldr	r0, [pc, #180]	; (80048a4 <Set_Screen+0x23f0>)
 80047ee:	f002 fe7d 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.brightness_clav, 	0, 3, Control_DB.RazrPointer,    100,     10, 470, 230, 800,480, Page[21], FonColor[4], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80047f2:	4b27      	ldr	r3, [pc, #156]	; (8004890 <Set_Screen+0x23dc>)
 80047f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047f8:	461c      	mov	r4, r3
 80047fa:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <Set_Screen+0x23c0>)
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	4a1b      	ldr	r2, [pc, #108]	; (800486c <Set_Screen+0x23b8>)
 8004800:	6912      	ldr	r2, [r2, #16]
 8004802:	491b      	ldr	r1, [pc, #108]	; (8004870 <Set_Screen+0x23bc>)
 8004804:	6809      	ldr	r1, [r1, #0]
 8004806:	2012      	movs	r0, #18
 8004808:	900b      	str	r0, [sp, #44]	; 0x2c
 800480a:	200b      	movs	r0, #11
 800480c:	900a      	str	r0, [sp, #40]	; 0x28
 800480e:	4821      	ldr	r0, [pc, #132]	; (8004894 <Set_Screen+0x23e0>)
 8004810:	9009      	str	r0, [sp, #36]	; 0x24
 8004812:	9108      	str	r1, [sp, #32]
 8004814:	9207      	str	r2, [sp, #28]
 8004816:	9306      	str	r3, [sp, #24]
 8004818:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800481c:	9305      	str	r3, [sp, #20]
 800481e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004822:	9304      	str	r3, [sp, #16]
 8004824:	23e6      	movs	r3, #230	; 0xe6
 8004826:	9303      	str	r3, [sp, #12]
 8004828:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800482c:	9302      	str	r3, [sp, #8]
 800482e:	230a      	movs	r3, #10
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	2364      	movs	r3, #100	; 0x64
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	4623      	mov	r3, r4
 8004838:	2203      	movs	r2, #3
 800483a:	2100      	movs	r1, #0
 800483c:	481a      	ldr	r0, [pc, #104]	; (80048a8 <Set_Screen+0x23f4>)
 800483e:	f002 fe55 	bl	80074ec <Centred_DrawNumber_16_32bit_controled>

			Control_DB.MenuPointerMAX = 5;
 8004842:	4b13      	ldr	r3, [pc, #76]	; (8004890 <Set_Screen+0x23dc>)
 8004844:	2205      	movs	r2, #5
 8004846:	809a      	strh	r2, [r3, #4]

			Short_Left_Colored_RU_DrawString_32("бод/с", 5,					585, 110, BackgroundColor, BasicSymbolColor, Page[21]);
 8004848:	4b18      	ldr	r3, [pc, #96]	; (80048ac <Set_Screen+0x23f8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a08      	ldr	r2, [pc, #32]	; (8004870 <Set_Screen+0x23bc>)
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	4908      	ldr	r1, [pc, #32]	; (8004874 <Set_Screen+0x23c0>)
 8004852:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004854:	9102      	str	r1, [sp, #8]
 8004856:	9201      	str	r2, [sp, #4]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	236e      	movs	r3, #110	; 0x6e
 800485c:	f240 2249 	movw	r2, #585	; 0x249
 8004860:	2105      	movs	r1, #5
 8004862:	4813      	ldr	r0, [pc, #76]	; (80048b0 <Set_Screen+0x23fc>)
 8004864:	f002 f8a4 	bl	80069b0 <Short_Left_Colored_RU_DrawString_32>

		break;
 8004868:	e025      	b.n	80048b6 <Set_Screen+0x2402>
 800486a:	bf00      	nop
 800486c:	200000a4 	.word	0x200000a4
 8004870:	200009f8 	.word	0x200009f8
 8004874:	20000984 	.word	0x20000984
 8004878:	0800dec8 	.word	0x0800dec8
 800487c:	0800dee0 	.word	0x0800dee0
 8004880:	0800defc 	.word	0x0800defc
 8004884:	0800df18 	.word	0x0800df18
 8004888:	0800df38 	.word	0x0800df38
 800488c:	0800df58 	.word	0x0800df58
 8004890:	20000b2c 	.word	0x20000b2c
 8004894:	0801088c 	.word	0x0801088c
 8004898:	20000b10 	.word	0x20000b10
 800489c:	20000b14 	.word	0x20000b14
 80048a0:	20000b18 	.word	0x20000b18
 80048a4:	20000b24 	.word	0x20000b24
 80048a8:	20000b28 	.word	0x20000b28
 80048ac:	20000008 	.word	0x20000008
 80048b0:	0800df7c 	.word	0x0800df7c
		break;
 80048b4:	bf00      	nop

	}


	if(screen_event)
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <Set_Screen+0x2444>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00e      	beq.n	80048dc <Set_Screen+0x2428>
	{

		Control_DB.MenuPointer  		= 0;
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <Set_Screen+0x2448>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	801a      	strh	r2, [r3, #0]
		Control_DB.RazrPointer 			= 0;
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <Set_Screen+0x2448>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	805a      	strh	r2, [r3, #2]
		PassW_block.PassWord   			= 0;
 80048ca:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <Set_Screen+0x244c>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
		PassW_block.DataClearingUnlock	= 0;
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <Set_Screen+0x244c>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	741a      	strb	r2, [r3, #16]
		screen_event 					= 0;
 80048d6:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <Set_Screen+0x2444>)
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]

	}

	HAL_LTDC_SetAddress(&hltdc, Page[screen], 0);
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <Set_Screen+0x2450>)
 80048e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e4:	2200      	movs	r2, #0
 80048e6:	4619      	mov	r1, r3
 80048e8:	4807      	ldr	r0, [pc, #28]	; (8004908 <Set_Screen+0x2454>)
 80048ea:	f004 fa87 	bl	8008dfc <HAL_LTDC_SetAddress>
}
 80048ee:	bf00      	nop
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bdb0      	pop	{r4, r5, r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200009fc 	.word	0x200009fc
 80048fc:	20000b2c 	.word	0x20000b2c
 8004900:	20000a00 	.word	0x20000a00
 8004904:	20000984 	.word	0x20000984
 8004908:	20000148 	.word	0x20000148

0800490c <TimedBitValue_handler>:




void TimedBitValue_handler(TimedBitValue *Var)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	if(Var->state & !Var->state_mirror)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	785b      	ldrb	r3, [r3, #1]
 800491e:	2b00      	cmp	r3, #0
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <TimedBitValue_handler+0x2a>
	{
		Var->timer = Var->default_timer; // Запуск таймера при переходе 0 -> 1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	889a      	ldrh	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	805a      	strh	r2, [r3, #2]
	}
	Var->state_mirror = Var->state;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	781a      	ldrb	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	705a      	strb	r2, [r3, #1]

	if(!Var->state)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <TimedBitValue_handler+0x42>
	{
		Var->timer = 0; // Обнуление таймера при принудительном сбросе
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	805a      	strh	r2, [r3, #2]
		{
			Var->state = 0;
		}
		Var->timer--;
	}
}
 800494c:	e00c      	b.n	8004968 <TimedBitValue_handler+0x5c>
		if(!Var->timer)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	885b      	ldrh	r3, [r3, #2]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <TimedBitValue_handler+0x50>
			Var->state = 0;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
		Var->timer--;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	885b      	ldrh	r3, [r3, #2]
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	805a      	strh	r2, [r3, #2]
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004974:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004978:	b08a      	sub	sp, #40	; 0x28
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	PassW_block.PassWord 		=    0;
 800497c:	4bb5      	ldr	r3, [pc, #724]	; (8004c54 <main+0x2e0>)
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
	PassW_block.PassWord_true 	= 1234;
 8004982:	4bb4      	ldr	r3, [pc, #720]	; (8004c54 <main+0x2e0>)
 8004984:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8004988:	605a      	str	r2, [r3, #4]
	PassW_block.PassWord_DATA   = 3850;
 800498a:	4bb2      	ldr	r3, [pc, #712]	; (8004c54 <main+0x2e0>)
 800498c:	f640 720a 	movw	r2, #3850	; 0xf0a
 8004990:	60da      	str	r2, [r3, #12]

  BUV_settings.time_of_work_pump1 = 5;
 8004992:	4bb1      	ldr	r3, [pc, #708]	; (8004c58 <main+0x2e4>)
 8004994:	2205      	movs	r2, #5
 8004996:	601a      	str	r2, [r3, #0]
  BUV_settings.time_of_work_pump2 = 5;
 8004998:	4baf      	ldr	r3, [pc, #700]	; (8004c58 <main+0x2e4>)
 800499a:	2205      	movs	r2, #5
 800499c:	605a      	str	r2, [r3, #4]
  BUV_settings.time_of_work_pump3 = 5;
 800499e:	4bae      	ldr	r3, [pc, #696]	; (8004c58 <main+0x2e4>)
 80049a0:	2205      	movs	r2, #5
 80049a2:	609a      	str	r2, [r3, #8]
  BUV_settings.flushing_filter = 1;
 80049a4:	4bac      	ldr	r3, [pc, #688]	; (8004c58 <main+0x2e4>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	611a      	str	r2, [r3, #16]
  BUV_settings.conc_emul = 15;
 80049aa:	4bab      	ldr	r3, [pc, #684]	; (8004c58 <main+0x2e4>)
 80049ac:	220f      	movs	r2, #15
 80049ae:	615a      	str	r2, [r3, #20]
  BUV_settings.pump_mode = 1;
 80049b0:	4ba9      	ldr	r3, [pc, #676]	; (8004c58 <main+0x2e4>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	60da      	str	r2, [r3, #12]

	memcpy(&Settings_DB, 0x08060000, sizeof(Settings_DB)); // чтение настроек с флеш
 80049b6:	4aa9      	ldr	r2, [pc, #676]	; (8004c5c <main+0x2e8>)
 80049b8:	4ba9      	ldr	r3, [pc, #676]	; (8004c60 <main+0x2ec>)
 80049ba:	4614      	mov	r4, r2
 80049bc:	461d      	mov	r5, r3
 80049be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Settings_DB.FlashWriteFlag	 = 0;
 80049ca:	4ba4      	ldr	r3, [pc, #656]	; (8004c5c <main+0x2e8>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	741a      	strb	r2, [r3, #16]
	Settings_DB.RS485_Parity	 = 0;
 80049d0:	4ba2      	ldr	r3, [pc, #648]	; (8004c5c <main+0x2e8>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	60da      	str	r2, [r3, #12]

	if(Settings_DB.RS485_ADDR == -1)
 80049d6:	4ba1      	ldr	r3, [pc, #644]	; (8004c5c <main+0x2e8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	d10f      	bne.n	8004a00 <main+0x8c>
	{
		Settings_DB.RS485_ADDR  = 1;
 80049e0:	4b9e      	ldr	r3, [pc, #632]	; (8004c5c <main+0x2e8>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
		Settings_DB.RS485_Speed = 115200;
 80049e6:	4b9d      	ldr	r3, [pc, #628]	; (8004c5c <main+0x2e8>)
 80049e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049ec:	605a      	str	r2, [r3, #4]
		Settings_DB.RS485_Stops = 1;
 80049ee:	4b9b      	ldr	r3, [pc, #620]	; (8004c5c <main+0x2e8>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	609a      	str	r2, [r3, #8]
		Settings_DB.brightness_disp = 100;
 80049f4:	4b99      	ldr	r3, [pc, #612]	; (8004c5c <main+0x2e8>)
 80049f6:	2264      	movs	r2, #100	; 0x64
 80049f8:	615a      	str	r2, [r3, #20]
		Settings_DB.brightness_clav = 100;
 80049fa:	4b98      	ldr	r3, [pc, #608]	; (8004c5c <main+0x2e8>)
 80049fc:	2264      	movs	r2, #100	; 0x64
 80049fe:	619a      	str	r2, [r3, #24]
	}

	Slave_1.PORT    		= UART7_BASE;
 8004a00:	4b98      	ldr	r3, [pc, #608]	; (8004c64 <main+0x2f0>)
 8004a02:	4a99      	ldr	r2, [pc, #612]	; (8004c68 <main+0x2f4>)
 8004a04:	601a      	str	r2, [r3, #0]
	Slave_1.MB_Addr 		= Settings_DB.RS485_ADDR;
 8004a06:	4b95      	ldr	r3, [pc, #596]	; (8004c5c <main+0x2e8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	4b95      	ldr	r3, [pc, #596]	; (8004c64 <main+0x2f0>)
 8004a0e:	711a      	strb	r2, [r3, #4]
	Slave_1.Roll_max 		= 0;
 8004a10:	4b94      	ldr	r3, [pc, #592]	; (8004c64 <main+0x2f0>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	81da      	strh	r2, [r3, #14]
	Slave_1.Transmit_delay 	= 2;
 8004a16:	4b93      	ldr	r3, [pc, #588]	; (8004c64 <main+0x2f0>)
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f8a3 2616 	strh.w	r2, [r3, #1558]	; 0x616
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a1e:	f003 f97f 	bl	8007d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a22:	f000 f945 	bl	8004cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a26:	f000 fc19 	bl	800525c <MX_GPIO_Init>
  MX_DMA2D_Init();
 8004a2a:	f000 f9b1 	bl	8004d90 <MX_DMA2D_Init>
  MX_FMC_Init();
 8004a2e:	f000 fbc3 	bl	80051b8 <MX_FMC_Init>
  MX_LTDC_Init();
 8004a32:	f000 f9df 	bl	8004df4 <MX_LTDC_Init>
  MX_SPI1_Init();
 8004a36:	f000 fa5f 	bl	8004ef8 <MX_SPI1_Init>
  MX_UART7_Init();
 8004a3a:	f000 fb63 	bl	8005104 <MX_UART7_Init>
  MX_TIM4_Init();
 8004a3e:	f000 fa91 	bl	8004f64 <MX_TIM4_Init>
  MX_TIM5_Init();
 8004a42:	f000 fb11 	bl	8005068 <MX_TIM5_Init>





	TIM4->CCR3 = 0;
 8004a46:	4b89      	ldr	r3, [pc, #548]	; (8004c6c <main+0x2f8>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 0;
 8004a4c:	4b87      	ldr	r3, [pc, #540]	; (8004c6c <main+0x2f8>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004a52:	2108      	movs	r1, #8
 8004a54:	4886      	ldr	r0, [pc, #536]	; (8004c70 <main+0x2fc>)
 8004a56:	f005 fc53 	bl	800a300 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004a5a:	210c      	movs	r1, #12
 8004a5c:	4884      	ldr	r0, [pc, #528]	; (8004c70 <main+0x2fc>)
 8004a5e:	f005 fc4f 	bl	800a300 <HAL_TIM_PWM_Start>


	BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 8004a62:	4984      	ldr	r1, [pc, #528]	; (8004c74 <main+0x300>)
 8004a64:	4884      	ldr	r0, [pc, #528]	; (8004c78 <main+0x304>)
 8004a66:	f000 fd1f 	bl	80054a8 <BSP_SDRAM_Initialization_Sequence>

	HAL_DMA2D_ConfigDeadTime(&hdma2d, 100);
 8004a6a:	2164      	movs	r1, #100	; 0x64
 8004a6c:	4883      	ldr	r0, [pc, #524]	; (8004c7c <main+0x308>)
 8004a6e:	f003 fc95 	bl	800839c <HAL_DMA2D_ConfigDeadTime>
	HAL_DMA2D_EnableDeadTime(&hdma2d);
 8004a72:	4882      	ldr	r0, [pc, #520]	; (8004c7c <main+0x308>)
 8004a74:	f003 fc68 	bl	8008348 <HAL_DMA2D_EnableDeadTime>

	Page[0] = SDRAM_BANK_ADDR;
 8004a78:	4b81      	ldr	r3, [pc, #516]	; (8004c80 <main+0x30c>)
 8004a7a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8004a7e:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 29; i++)
 8004a80:	2301      	movs	r3, #1
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
 8004a84:	e00f      	b.n	8004aa6 <main+0x132>
	{
		Page[i] = Page[i-1] + (800*480*3);
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	4a7d      	ldr	r2, [pc, #500]	; (8004c80 <main+0x30c>)
 8004a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a90:	f503 138c 	add.w	r3, r3, #1146880	; 0x118000
 8004a94:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8004a98:	4979      	ldr	r1, [pc, #484]	; (8004c80 <main+0x30c>)
 8004a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for(int i = 1; i < 29; i++)
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	2b1c      	cmp	r3, #28
 8004aaa:	ddec      	ble.n	8004a86 <main+0x112>
	}

	Screens_init();
 8004aac:	f7fc ff46 	bl	800193c <Screens_init>
	HAL_GPIO_WritePin(LTDC_DISP_GPIO_Port, LTDC_DISP_Pin, GPIO_PIN_SET);
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	2108      	movs	r1, #8
 8004ab4:	4873      	ldr	r0, [pc, #460]	; (8004c84 <main+0x310>)
 8004ab6:	f004 f879 	bl	8008bac <HAL_GPIO_WritePin>
	PWM_launch = 1;
 8004aba:	4b73      	ldr	r3, [pc, #460]	; (8004c88 <main+0x314>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	701a      	strb	r2, [r3, #0]


	screen = 1;
 8004ac0:	4b72      	ldr	r3, [pc, #456]	; (8004c8c <main+0x318>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]


	HAL_TIM_Base_Start_IT(&htim5);
 8004ac6:	4872      	ldr	r0, [pc, #456]	; (8004c90 <main+0x31c>)
 8004ac8:	f005 fb50 	bl	800a16c <HAL_TIM_Base_Start_IT>





	ALG_DB.clearing_pressure_filter_1.default_timer = 1000;
 8004acc:	4b71      	ldr	r3, [pc, #452]	; (8004c94 <main+0x320>)
 8004ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ad2:	809a      	strh	r2, [r3, #4]
	ALG_DB.clearing_pressure_filter_2.default_timer = 1000;
 8004ad4:	4b6f      	ldr	r3, [pc, #444]	; (8004c94 <main+0x320>)
 8004ad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ada:	815a      	strh	r2, [r3, #10]
	ALG_DB.clearing_water_filter_1.default_timer	= 1000;
 8004adc:	4b6d      	ldr	r3, [pc, #436]	; (8004c94 <main+0x320>)
 8004ade:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ae2:	821a      	strh	r2, [r3, #16]
	ALG_DB.clearing_water_filter_2.default_timer	= 1000;
 8004ae4:	4b6b      	ldr	r3, [pc, #428]	; (8004c94 <main+0x320>)
 8004ae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004aea:	82da      	strh	r2, [r3, #22]
	ALG_DB.clearing_water_filter_3.default_timer	= 1000;
 8004aec:	4b69      	ldr	r3, [pc, #420]	; (8004c94 <main+0x320>)
 8004aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004af2:	839a      	strh	r2, [r3, #28]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(PWM_launch)
 8004af4:	4b64      	ldr	r3, [pc, #400]	; (8004c88 <main+0x314>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d04f      	beq.n	8004b9c <main+0x228>
	{
		float temp  = brightness_disp;
 8004afc:	4b66      	ldr	r3, [pc, #408]	; (8004c98 <main+0x324>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b08:	edc7 7a08 	vstr	s15, [r7, #32]
		float temp2 = Settings_DB.brightness_disp;
 8004b0c:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <main+0x2e8>)
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b18:	edc7 7a07 	vstr	s15, [r7, #28]
		temp2 /= 100;
 8004b1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b20:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004c9c <main+0x328>
 8004b24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b28:	edc7 7a07 	vstr	s15, [r7, #28]
		temp *= temp2;
 8004b2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004b30:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b38:	edc7 7a08 	vstr	s15, [r7, #32]
		TIM4->CCR3 = temp;
 8004b3c:	4b4b      	ldr	r3, [pc, #300]	; (8004c6c <main+0x2f8>)
 8004b3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b46:	ee17 2a90 	vmov	r2, s15
 8004b4a:	63da      	str	r2, [r3, #60]	; 0x3c

		temp  = brightness_clav;
 8004b4c:	4b54      	ldr	r3, [pc, #336]	; (8004ca0 <main+0x32c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	ee07 3a90 	vmov	s15, r3
 8004b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b58:	edc7 7a08 	vstr	s15, [r7, #32]
		temp2 = Settings_DB.brightness_clav;
 8004b5c:	4b3f      	ldr	r3, [pc, #252]	; (8004c5c <main+0x2e8>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b68:	edc7 7a07 	vstr	s15, [r7, #28]
		temp2 /= 100;
 8004b6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b70:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8004c9c <main+0x328>
 8004b74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b78:	edc7 7a07 	vstr	s15, [r7, #28]
		temp *= temp2;
 8004b7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004b80:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b88:	edc7 7a08 	vstr	s15, [r7, #32]
		TIM4->CCR4 = temp;
 8004b8c:	4b37      	ldr	r3, [pc, #220]	; (8004c6c <main+0x2f8>)
 8004b8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b96:	ee17 2a90 	vmov	r2, s15
 8004b9a:	641a      	str	r2, [r3, #64]	; 0x40
	} // работа с подсветкой

	if(Settings_DB.FlashWriteFlag)
 8004b9c:	4b2f      	ldr	r3, [pc, #188]	; (8004c5c <main+0x2e8>)
 8004b9e:	7c1b      	ldrb	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d051      	beq.n	8004c48 <main+0x2d4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ba4:	b672      	cpsid	i
}
 8004ba6:	bf00      	nop
	{

		__disable_irq (); // запретить прерывания

		HAL_FLASH_Unlock();
 8004ba8:	f003 fc7c 	bl	80084a4 <HAL_FLASH_Unlock>

		FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_1); // стирание сектора 7 (0x08060000)
 8004bac:	2100      	movs	r1, #0
 8004bae:	2007      	movs	r0, #7
 8004bb0:	f003 fdea 	bl	8008788 <FLASH_Erase_Sector>

		while(FLASH->SR & 0x01){;} // Ждем пока снимется флаг BSY=
 8004bb4:	bf00      	nop
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	; (8004ca4 <main+0x330>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f9      	bne.n	8004bb6 <main+0x242>

		uint8_t massive[sizeof(Settings_DB)];
		memcpy(&massive, &Settings_DB, sizeof(Settings_DB));
 8004bc2:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <main+0x2e8>)
 8004bc4:	463c      	mov	r4, r7
 8004bc6:	461d      	mov	r5, r3
 8004bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		for(flash_i = 0; flash_i < sizeof(Settings_DB); flash_i++)
 8004bd4:	4b34      	ldr	r3, [pc, #208]	; (8004ca8 <main+0x334>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	e01a      	b.n	8004c12 <main+0x29e>
		{
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x08060000 + flash_i, massive[flash_i]);
 8004bdc:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <main+0x334>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004be4:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 8004be8:	4619      	mov	r1, r3
 8004bea:	4b2f      	ldr	r3, [pc, #188]	; (8004ca8 <main+0x334>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3328      	adds	r3, #40	; 0x28
 8004bf0:	443b      	add	r3, r7
 8004bf2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4698      	mov	r8, r3
 8004bfc:	4691      	mov	r9, r2
 8004bfe:	4642      	mov	r2, r8
 8004c00:	464b      	mov	r3, r9
 8004c02:	2000      	movs	r0, #0
 8004c04:	f003 fbfa 	bl	80083fc <HAL_FLASH_Program>
		for(flash_i = 0; flash_i < sizeof(Settings_DB); flash_i++)
 8004c08:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <main+0x334>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <main+0x334>)
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	4b25      	ldr	r3, [pc, #148]	; (8004ca8 <main+0x334>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b1b      	cmp	r3, #27
 8004c18:	d9e0      	bls.n	8004bdc <main+0x268>
		}

		HAL_FLASH_Lock();
 8004c1a:	f003 fc65 	bl	80084e8 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8004c1e:	b662      	cpsie	i
}
 8004c20:	bf00      	nop
		__enable_irq ();  // разрешить прерывания

		MX_UART7_Init();
 8004c22:	f000 fa6f 	bl	8005104 <MX_UART7_Init>

		screen 						= 1;
 8004c26:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <main+0x318>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
		Control_DB.MenuPointer 		= 0;
 8004c2c:	4b1f      	ldr	r3, [pc, #124]	; (8004cac <main+0x338>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	801a      	strh	r2, [r3, #0]
		Settings_DB.FlashWriteFlag 	= 0;
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <main+0x2e8>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	741a      	strb	r2, [r3, #16]
		Control_DB.RazrPointer      = 0;
 8004c38:	4b1c      	ldr	r3, [pc, #112]	; (8004cac <main+0x338>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	805a      	strh	r2, [r3, #2]
		Slave_1.MB_Addr 			= Settings_DB.RS485_ADDR;
 8004c3e:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <main+0x2e8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <main+0x2f0>)
 8004c46:	711a      	strb	r2, [r3, #4]

	} // перепись настроек flash

	Set_Screen(screen);
 8004c48:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <main+0x318>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fd fc31 	bl	80024b4 <Set_Screen>
  {
 8004c52:	e74f      	b.n	8004af4 <main+0x180>
 8004c54:	20000a00 	.word	0x20000a00
 8004c58:	20000b40 	.word	0x20000b40
 8004c5c:	20000b10 	.word	0x20000b10
 8004c60:	08060000 	.word	0x08060000
 8004c64:	20000358 	.word	0x20000358
 8004c68:	40007800 	.word	0x40007800
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	20000248 	.word	0x20000248
 8004c74:	20000970 	.word	0x20000970
 8004c78:	2000031c 	.word	0x2000031c
 8004c7c:	20000108 	.word	0x20000108
 8004c80:	20000984 	.word	0x20000984
 8004c84:	40021000 	.word	0x40021000
 8004c88:	200009fd 	.word	0x200009fd
 8004c8c:	20000018 	.word	0x20000018
 8004c90:	20000290 	.word	0x20000290
 8004c94:	20000a14 	.word	0x20000a14
 8004c98:	20000350 	.word	0x20000350
 8004c9c:	42c80000 	.word	0x42c80000
 8004ca0:	20000354 	.word	0x20000354
 8004ca4:	40023c00 	.word	0x40023c00
 8004ca8:	20000980 	.word	0x20000980
 8004cac:	20000b2c 	.word	0x20000b2c

08004cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b094      	sub	sp, #80	; 0x50
 8004cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cb6:	f107 0320 	add.w	r3, r7, #32
 8004cba:	2230      	movs	r2, #48	; 0x30
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f007 fabe 	bl	800c240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cc4:	f107 030c 	add.w	r3, r7, #12
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	; (8004d88 <SystemClock_Config+0xd8>)
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <SystemClock_Config+0xd8>)
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce4:	4b28      	ldr	r3, [pc, #160]	; (8004d88 <SystemClock_Config+0xd8>)
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <SystemClock_Config+0xdc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a24      	ldr	r2, [pc, #144]	; (8004d8c <SystemClock_Config+0xdc>)
 8004cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4b22      	ldr	r3, [pc, #136]	; (8004d8c <SystemClock_Config+0xdc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d16:	2302      	movs	r3, #2
 8004d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004d20:	2304      	movs	r3, #4
 8004d22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004d24:	23b4      	movs	r3, #180	; 0xb4
 8004d26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d30:	f107 0320 	add.w	r3, r7, #32
 8004d34:	4618      	mov	r0, r3
 8004d36:	f004 fa7f 	bl	8009238 <HAL_RCC_OscConfig>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004d40:	f000 fc10 	bl	8005564 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004d44:	f004 fa28 	bl	8009198 <HAL_PWREx_EnableOverDrive>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8004d4e:	f000 fc09 	bl	8005564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d52:	230f      	movs	r3, #15
 8004d54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d56:	2302      	movs	r3, #2
 8004d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004d5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004d62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004d6a:	f107 030c 	add.w	r3, r7, #12
 8004d6e:	2105      	movs	r1, #5
 8004d70:	4618      	mov	r0, r3
 8004d72:	f004 fcd9 	bl	8009728 <HAL_RCC_ClockConfig>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004d7c:	f000 fbf2 	bl	8005564 <Error_Handler>
  }
}
 8004d80:	bf00      	nop
 8004d82:	3750      	adds	r7, #80	; 0x50
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40007000 	.word	0x40007000

08004d90 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8004d94:	4b15      	ldr	r3, [pc, #84]	; (8004dec <MX_DMA2D_Init+0x5c>)
 8004d96:	4a16      	ldr	r2, [pc, #88]	; (8004df0 <MX_DMA2D_Init+0x60>)
 8004d98:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8004d9a:	4b14      	ldr	r3, [pc, #80]	; (8004dec <MX_DMA2D_Init+0x5c>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8004da0:	4b12      	ldr	r3, [pc, #72]	; (8004dec <MX_DMA2D_Init+0x5c>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8004da6:	4b11      	ldr	r3, [pc, #68]	; (8004dec <MX_DMA2D_Init+0x5c>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8004dac:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <MX_DMA2D_Init+0x5c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8004db2:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <MX_DMA2D_Init+0x5c>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <MX_DMA2D_Init+0x5c>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <MX_DMA2D_Init+0x5c>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8004dc4:	4809      	ldr	r0, [pc, #36]	; (8004dec <MX_DMA2D_Init+0x5c>)
 8004dc6:	f003 f9e4 	bl	8008192 <HAL_DMA2D_Init>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8004dd0:	f000 fbc8 	bl	8005564 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	4805      	ldr	r0, [pc, #20]	; (8004dec <MX_DMA2D_Init+0x5c>)
 8004dd8:	f003 fa24 	bl	8008224 <HAL_DMA2D_ConfigLayer>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8004de2:	f000 fbbf 	bl	8005564 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000108 	.word	0x20000108
 8004df0:	4002b000 	.word	0x4002b000

08004df4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08e      	sub	sp, #56	; 0x38
 8004df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8004dfa:	1d3b      	adds	r3, r7, #4
 8004dfc:	2234      	movs	r2, #52	; 0x34
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f007 fa1d 	bl	800c240 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8004e06:	4b3a      	ldr	r3, [pc, #232]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e08:	4a3a      	ldr	r2, [pc, #232]	; (8004ef4 <MX_LTDC_Init+0x100>)
 8004e0a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004e0c:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004e12:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004e18:	4b35      	ldr	r3, [pc, #212]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004e1e:	4b34      	ldr	r3, [pc, #208]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 47;
 8004e24:	4b32      	ldr	r3, [pc, #200]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e26:	222f      	movs	r2, #47	; 0x2f
 8004e28:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8004e2a:	4b31      	ldr	r3, [pc, #196]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 87;
 8004e30:	4b2f      	ldr	r3, [pc, #188]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e32:	2257      	movs	r2, #87	; 0x57
 8004e34:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 8004e36:	4b2e      	ldr	r3, [pc, #184]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e38:	221f      	movs	r2, #31
 8004e3a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 887;
 8004e3c:	4b2c      	ldr	r3, [pc, #176]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e3e:	f240 3277 	movw	r2, #887	; 0x377
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 511;
 8004e44:	4b2a      	ldr	r3, [pc, #168]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 927;
 8004e4c:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e4e:	f240 329f 	movw	r2, #927	; 0x39f
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 524;
 8004e54:	4b26      	ldr	r3, [pc, #152]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e56:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8004e5c:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8004e64:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8004e6c:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8004e74:	481e      	ldr	r0, [pc, #120]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004e76:	f003 feb3 	bl	8008be0 <HAL_LTDC_Init>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8004e80:	f000 fb70 	bl	8005564 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8004e88:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004e8c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8004e92:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004e96:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8004e9c:	23ff      	movs	r3, #255	; 0xff
 8004e9e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004ea4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004ea8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004eaa:	2307      	movs	r3, #7
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8004eae:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8004eb4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8004eba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004ed2:	1d3b      	adds	r3, r7, #4
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4805      	ldr	r0, [pc, #20]	; (8004ef0 <MX_LTDC_Init+0xfc>)
 8004eda:	f003 ff51 	bl	8008d80 <HAL_LTDC_ConfigLayer>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8004ee4:	f000 fb3e 	bl	8005564 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8004ee8:	bf00      	nop
 8004eea:	3738      	adds	r7, #56	; 0x38
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20000148 	.word	0x20000148
 8004ef4:	40016800 	.word	0x40016800

08004ef8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004efc:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004efe:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <MX_SPI1_Init+0x68>)
 8004f00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f02:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f0a:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f10:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f16:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f22:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004f2a:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f2c:	2218      	movs	r2, #24
 8004f2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f36:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f3c:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f44:	220a      	movs	r2, #10
 8004f46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f48:	4804      	ldr	r0, [pc, #16]	; (8004f5c <MX_SPI1_Init+0x64>)
 8004f4a:	f005 f836 	bl	8009fba <HAL_SPI_Init>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004f54:	f000 fb06 	bl	8005564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f58:	bf00      	nop
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	200001f0 	.word	0x200001f0
 8004f60:	40013000 	.word	0x40013000

08004f64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08e      	sub	sp, #56	; 0x38
 8004f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	605a      	str	r2, [r3, #4]
 8004f74:	609a      	str	r2, [r3, #8]
 8004f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f78:	f107 0320 	add.w	r3, r7, #32
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f82:	1d3b      	adds	r3, r7, #4
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	60da      	str	r2, [r3, #12]
 8004f8e:	611a      	str	r2, [r3, #16]
 8004f90:	615a      	str	r2, [r3, #20]
 8004f92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f94:	4b32      	ldr	r3, [pc, #200]	; (8005060 <MX_TIM4_Init+0xfc>)
 8004f96:	4a33      	ldr	r2, [pc, #204]	; (8005064 <MX_TIM4_Init+0x100>)
 8004f98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004f9a:	4b31      	ldr	r3, [pc, #196]	; (8005060 <MX_TIM4_Init+0xfc>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fa0:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <MX_TIM4_Init+0xfc>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8004fa6:	4b2e      	ldr	r3, [pc, #184]	; (8005060 <MX_TIM4_Init+0xfc>)
 8004fa8:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fae:	4b2c      	ldr	r3, [pc, #176]	; (8005060 <MX_TIM4_Init+0xfc>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fb4:	4b2a      	ldr	r3, [pc, #168]	; (8005060 <MX_TIM4_Init+0xfc>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004fba:	4829      	ldr	r0, [pc, #164]	; (8005060 <MX_TIM4_Init+0xfc>)
 8004fbc:	f005 f886 	bl	800a0cc <HAL_TIM_Base_Init>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8004fc6:	f000 facd 	bl	8005564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4822      	ldr	r0, [pc, #136]	; (8005060 <MX_TIM4_Init+0xfc>)
 8004fd8:	f005 fc24 	bl	800a824 <HAL_TIM_ConfigClockSource>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004fe2:	f000 fabf 	bl	8005564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004fe6:	481e      	ldr	r0, [pc, #120]	; (8005060 <MX_TIM4_Init+0xfc>)
 8004fe8:	f005 f930 	bl	800a24c <HAL_TIM_PWM_Init>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004ff2:	f000 fab7 	bl	8005564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ffe:	f107 0320 	add.w	r3, r7, #32
 8005002:	4619      	mov	r1, r3
 8005004:	4816      	ldr	r0, [pc, #88]	; (8005060 <MX_TIM4_Init+0xfc>)
 8005006:	f006 f817 	bl	800b038 <HAL_TIMEx_MasterConfigSynchronization>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005010:	f000 faa8 	bl	8005564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005014:	2360      	movs	r3, #96	; 0x60
 8005016:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005024:	1d3b      	adds	r3, r7, #4
 8005026:	2208      	movs	r2, #8
 8005028:	4619      	mov	r1, r3
 800502a:	480d      	ldr	r0, [pc, #52]	; (8005060 <MX_TIM4_Init+0xfc>)
 800502c:	f005 fb38 	bl	800a6a0 <HAL_TIM_PWM_ConfigChannel>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005036:	f000 fa95 	bl	8005564 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800503a:	1d3b      	adds	r3, r7, #4
 800503c:	220c      	movs	r2, #12
 800503e:	4619      	mov	r1, r3
 8005040:	4807      	ldr	r0, [pc, #28]	; (8005060 <MX_TIM4_Init+0xfc>)
 8005042:	f005 fb2d 	bl	800a6a0 <HAL_TIM_PWM_ConfigChannel>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800504c:	f000 fa8a 	bl	8005564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005050:	4803      	ldr	r0, [pc, #12]	; (8005060 <MX_TIM4_Init+0xfc>)
 8005052:	f000 fc53 	bl	80058fc <HAL_TIM_MspPostInit>

}
 8005056:	bf00      	nop
 8005058:	3738      	adds	r7, #56	; 0x38
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000248 	.word	0x20000248
 8005064:	40000800 	.word	0x40000800

08005068 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800506e:	f107 0308 	add.w	r3, r7, #8
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	605a      	str	r2, [r3, #4]
 8005078:	609a      	str	r2, [r3, #8]
 800507a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800507c:	463b      	mov	r3, r7
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005084:	4b1c      	ldr	r3, [pc, #112]	; (80050f8 <MX_TIM5_Init+0x90>)
 8005086:	4a1d      	ldr	r2, [pc, #116]	; (80050fc <MX_TIM5_Init+0x94>)
 8005088:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <MX_TIM5_Init+0x90>)
 800508c:	2200      	movs	r2, #0
 800508e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <MX_TIM5_Init+0x90>)
 8005092:	2200      	movs	r2, #0
 8005094:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90000;
 8005096:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <MX_TIM5_Init+0x90>)
 8005098:	4a19      	ldr	r2, [pc, #100]	; (8005100 <MX_TIM5_Init+0x98>)
 800509a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800509c:	4b16      	ldr	r3, [pc, #88]	; (80050f8 <MX_TIM5_Init+0x90>)
 800509e:	2200      	movs	r2, #0
 80050a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <MX_TIM5_Init+0x90>)
 80050a4:	2280      	movs	r2, #128	; 0x80
 80050a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80050a8:	4813      	ldr	r0, [pc, #76]	; (80050f8 <MX_TIM5_Init+0x90>)
 80050aa:	f005 f80f 	bl	800a0cc <HAL_TIM_Base_Init>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80050b4:	f000 fa56 	bl	8005564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80050be:	f107 0308 	add.w	r3, r7, #8
 80050c2:	4619      	mov	r1, r3
 80050c4:	480c      	ldr	r0, [pc, #48]	; (80050f8 <MX_TIM5_Init+0x90>)
 80050c6:	f005 fbad 	bl	800a824 <HAL_TIM_ConfigClockSource>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80050d0:	f000 fa48 	bl	8005564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050d8:	2300      	movs	r3, #0
 80050da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050dc:	463b      	mov	r3, r7
 80050de:	4619      	mov	r1, r3
 80050e0:	4805      	ldr	r0, [pc, #20]	; (80050f8 <MX_TIM5_Init+0x90>)
 80050e2:	f005 ffa9 	bl	800b038 <HAL_TIMEx_MasterConfigSynchronization>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80050ec:	f000 fa3a 	bl	8005564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80050f0:	bf00      	nop
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	20000290 	.word	0x20000290
 80050fc:	40000c00 	.word	0x40000c00
 8005100:	00015f90 	.word	0x00015f90

08005104 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */

	  huart7.Instance = UART7;
 8005108:	4b28      	ldr	r3, [pc, #160]	; (80051ac <MX_UART7_Init+0xa8>)
 800510a:	4a29      	ldr	r2, [pc, #164]	; (80051b0 <MX_UART7_Init+0xac>)
 800510c:	601a      	str	r2, [r3, #0]

	  huart7.Init.BaudRate = Settings_DB.RS485_Speed;
 800510e:	4b29      	ldr	r3, [pc, #164]	; (80051b4 <MX_UART7_Init+0xb0>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	461a      	mov	r2, r3
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <MX_UART7_Init+0xa8>)
 8005116:	605a      	str	r2, [r3, #4]

	  if(Settings_DB.RS485_Parity)
 8005118:	4b26      	ldr	r3, [pc, #152]	; (80051b4 <MX_UART7_Init+0xb0>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <MX_UART7_Init+0x26>
	  {
		  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8005120:	4b22      	ldr	r3, [pc, #136]	; (80051ac <MX_UART7_Init+0xa8>)
 8005122:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005126:	609a      	str	r2, [r3, #8]
 8005128:	e002      	b.n	8005130 <MX_UART7_Init+0x2c>
	  }
	  else
	  {
		  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <MX_UART7_Init+0xa8>)
 800512c:	2200      	movs	r2, #0
 800512e:	609a      	str	r2, [r3, #8]
	  }

	  if(Settings_DB.RS485_Stops == 1)
 8005130:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <MX_UART7_Init+0xb0>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d103      	bne.n	8005140 <MX_UART7_Init+0x3c>
	  {
		  huart7.Init.StopBits = UART_STOPBITS_1;
 8005138:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <MX_UART7_Init+0xa8>)
 800513a:	2200      	movs	r2, #0
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	e003      	b.n	8005148 <MX_UART7_Init+0x44>
	  }
	  else
	  {
		  huart7.Init.StopBits = UART_STOPBITS_2;
 8005140:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <MX_UART7_Init+0xa8>)
 8005142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005146:	60da      	str	r2, [r3, #12]
	  }

	  switch(Settings_DB.RS485_Parity)
 8005148:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <MX_UART7_Init+0xb0>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d00f      	beq.n	8005170 <MX_UART7_Init+0x6c>
 8005150:	2b02      	cmp	r3, #2
 8005152:	dc12      	bgt.n	800517a <MX_UART7_Init+0x76>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <MX_UART7_Init+0x5a>
 8005158:	2b01      	cmp	r3, #1
 800515a:	d004      	beq.n	8005166 <MX_UART7_Init+0x62>
 800515c:	e00d      	b.n	800517a <MX_UART7_Init+0x76>
	  {
	  	  case 0:
	  		  huart7.Init.Parity = UART_PARITY_NONE;
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <MX_UART7_Init+0xa8>)
 8005160:	2200      	movs	r2, #0
 8005162:	611a      	str	r2, [r3, #16]
	      break;
 8005164:	e009      	b.n	800517a <MX_UART7_Init+0x76>
	  	  case 1:
	  		  huart7.Init.Parity = UART_PARITY_EVEN;
 8005166:	4b11      	ldr	r3, [pc, #68]	; (80051ac <MX_UART7_Init+0xa8>)
 8005168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800516c:	611a      	str	r2, [r3, #16]
	      break;
 800516e:	e004      	b.n	800517a <MX_UART7_Init+0x76>
	  	  case 2:
	  		  huart7.Init.Parity = UART_PARITY_ODD;
 8005170:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <MX_UART7_Init+0xa8>)
 8005172:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005176:	611a      	str	r2, [r3, #16]
	      break;
 8005178:	bf00      	nop
	  }

	  huart7.Init.Mode = UART_MODE_TX_RX;
 800517a:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <MX_UART7_Init+0xa8>)
 800517c:	220c      	movs	r2, #12
 800517e:	615a      	str	r2, [r3, #20]
	  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <MX_UART7_Init+0xa8>)
 8005182:	2200      	movs	r2, #0
 8005184:	619a      	str	r2, [r3, #24]
	  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005186:	4b09      	ldr	r3, [pc, #36]	; (80051ac <MX_UART7_Init+0xa8>)
 8005188:	2200      	movs	r2, #0
 800518a:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart7) != HAL_OK)
 800518c:	4807      	ldr	r0, [pc, #28]	; (80051ac <MX_UART7_Init+0xa8>)
 800518e:	f005 ffe3 	bl	800b158 <HAL_UART_Init>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <MX_UART7_Init+0x98>
	  {
	    Error_Handler();
 8005198:	f000 f9e4 	bl	8005564 <Error_Handler>
	  }

  /* USER CODE BEGIN UART7_Init 2 */
  UART7->CR1 |= 0x20;
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <MX_UART7_Init+0xac>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a03      	ldr	r2, [pc, #12]	; (80051b0 <MX_UART7_Init+0xac>)
 80051a2:	f043 0320 	orr.w	r3, r3, #32
 80051a6:	60d3      	str	r3, [r2, #12]
  /* USER CODE END UART7_Init 2 */

}
 80051a8:	bf00      	nop
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	200002d8 	.word	0x200002d8
 80051b0:	40007800 	.word	0x40007800
 80051b4:	20000b10 	.word	0x20000b10

080051b8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80051be:	1d3b      	adds	r3, r7, #4
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	605a      	str	r2, [r3, #4]
 80051c6:	609a      	str	r2, [r3, #8]
 80051c8:	60da      	str	r2, [r3, #12]
 80051ca:	611a      	str	r2, [r3, #16]
 80051cc:	615a      	str	r2, [r3, #20]
 80051ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80051d0:	4b20      	ldr	r3, [pc, #128]	; (8005254 <MX_FMC_Init+0x9c>)
 80051d2:	4a21      	ldr	r2, [pc, #132]	; (8005258 <MX_FMC_Init+0xa0>)
 80051d4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80051d6:	4b1f      	ldr	r3, [pc, #124]	; (8005254 <MX_FMC_Init+0x9c>)
 80051d8:	2200      	movs	r2, #0
 80051da:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80051dc:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <MX_FMC_Init+0x9c>)
 80051de:	2201      	movs	r2, #1
 80051e0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80051e2:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <MX_FMC_Init+0x9c>)
 80051e4:	2208      	movs	r2, #8
 80051e6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80051e8:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <MX_FMC_Init+0x9c>)
 80051ea:	2210      	movs	r2, #16
 80051ec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80051ee:	4b19      	ldr	r3, [pc, #100]	; (8005254 <MX_FMC_Init+0x9c>)
 80051f0:	2240      	movs	r2, #64	; 0x40
 80051f2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80051f4:	4b17      	ldr	r3, [pc, #92]	; (8005254 <MX_FMC_Init+0x9c>)
 80051f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051fa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80051fc:	4b15      	ldr	r3, [pc, #84]	; (8005254 <MX_FMC_Init+0x9c>)
 80051fe:	2200      	movs	r2, #0
 8005200:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8005202:	4b14      	ldr	r3, [pc, #80]	; (8005254 <MX_FMC_Init+0x9c>)
 8005204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005208:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <MX_FMC_Init+0x9c>)
 800520c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005210:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <MX_FMC_Init+0x9c>)
 8005214:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800521a:	2302      	movs	r3, #2
 800521c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 800521e:	2308      	movs	r3, #8
 8005220:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 5;
 8005222:	2305      	movs	r3, #5
 8005224:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 8;
 8005226:	2308      	movs	r3, #8
 8005228:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 800522a:	2304      	movs	r3, #4
 800522c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800522e:	2302      	movs	r3, #2
 8005230:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8005232:	2302      	movs	r3, #2
 8005234:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	4619      	mov	r1, r3
 800523a:	4806      	ldr	r0, [pc, #24]	; (8005254 <MX_FMC_Init+0x9c>)
 800523c:	f004 fe54 	bl	8009ee8 <HAL_SDRAM_Init>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8005246:	f000 f98d 	bl	8005564 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800524a:	bf00      	nop
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	2000031c 	.word	0x2000031c
 8005258:	a0000140 	.word	0xa0000140

0800525c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b090      	sub	sp, #64	; 0x40
 8005260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	605a      	str	r2, [r3, #4]
 800526c:	609a      	str	r2, [r3, #8]
 800526e:	60da      	str	r2, [r3, #12]
 8005270:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005272:	2300      	movs	r3, #0
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	4b84      	ldr	r3, [pc, #528]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	4a83      	ldr	r2, [pc, #524]	; (8005488 <MX_GPIO_Init+0x22c>)
 800527c:	f043 0310 	orr.w	r3, r3, #16
 8005280:	6313      	str	r3, [r2, #48]	; 0x30
 8005282:	4b81      	ldr	r3, [pc, #516]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	4b7d      	ldr	r3, [pc, #500]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	4a7c      	ldr	r2, [pc, #496]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529c:	6313      	str	r3, [r2, #48]	; 0x30
 800529e:	4b7a      	ldr	r3, [pc, #488]	; (8005488 <MX_GPIO_Init+0x22c>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80052aa:	2300      	movs	r3, #0
 80052ac:	623b      	str	r3, [r7, #32]
 80052ae:	4b76      	ldr	r3, [pc, #472]	; (8005488 <MX_GPIO_Init+0x22c>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	4a75      	ldr	r2, [pc, #468]	; (8005488 <MX_GPIO_Init+0x22c>)
 80052b4:	f043 0320 	orr.w	r3, r3, #32
 80052b8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ba:	4b73      	ldr	r3, [pc, #460]	; (8005488 <MX_GPIO_Init+0x22c>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	623b      	str	r3, [r7, #32]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	4b6f      	ldr	r3, [pc, #444]	; (8005488 <MX_GPIO_Init+0x22c>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	4a6e      	ldr	r2, [pc, #440]	; (8005488 <MX_GPIO_Init+0x22c>)
 80052d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d4:	6313      	str	r3, [r2, #48]	; 0x30
 80052d6:	4b6c      	ldr	r3, [pc, #432]	; (8005488 <MX_GPIO_Init+0x22c>)
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052e2:	2300      	movs	r3, #0
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	4b68      	ldr	r3, [pc, #416]	; (8005488 <MX_GPIO_Init+0x22c>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	4a67      	ldr	r2, [pc, #412]	; (8005488 <MX_GPIO_Init+0x22c>)
 80052ec:	f043 0304 	orr.w	r3, r3, #4
 80052f0:	6313      	str	r3, [r2, #48]	; 0x30
 80052f2:	4b65      	ldr	r3, [pc, #404]	; (8005488 <MX_GPIO_Init+0x22c>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	61bb      	str	r3, [r7, #24]
 80052fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	4b61      	ldr	r3, [pc, #388]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	4a60      	ldr	r2, [pc, #384]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	6313      	str	r3, [r2, #48]	; 0x30
 800530e:	4b5e      	ldr	r3, [pc, #376]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	4b5a      	ldr	r3, [pc, #360]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	4a59      	ldr	r2, [pc, #356]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005324:	f043 0302 	orr.w	r3, r3, #2
 8005328:	6313      	str	r3, [r2, #48]	; 0x30
 800532a:	4b57      	ldr	r3, [pc, #348]	; (8005488 <MX_GPIO_Init+0x22c>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	4b53      	ldr	r3, [pc, #332]	; (8005488 <MX_GPIO_Init+0x22c>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	4a52      	ldr	r2, [pc, #328]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005344:	6313      	str	r3, [r2, #48]	; 0x30
 8005346:	4b50      	ldr	r3, [pc, #320]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005352:	2300      	movs	r3, #0
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	4b4c      	ldr	r3, [pc, #304]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	4a4b      	ldr	r2, [pc, #300]	; (8005488 <MX_GPIO_Init+0x22c>)
 800535c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005360:	6313      	str	r3, [r2, #48]	; 0x30
 8005362:	4b49      	ldr	r3, [pc, #292]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	4b45      	ldr	r3, [pc, #276]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	4a44      	ldr	r2, [pc, #272]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005378:	f043 0308 	orr.w	r3, r3, #8
 800537c:	6313      	str	r3, [r2, #48]	; 0x30
 800537e:	4b42      	ldr	r3, [pc, #264]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	4b3e      	ldr	r3, [pc, #248]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	4a3d      	ldr	r2, [pc, #244]	; (8005488 <MX_GPIO_Init+0x22c>)
 8005394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005398:	6313      	str	r3, [r2, #48]	; 0x30
 800539a:	4b3b      	ldr	r3, [pc, #236]	; (8005488 <MX_GPIO_Init+0x22c>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_DISP_GPIO_Port, LTDC_DISP_Pin, GPIO_PIN_RESET);
 80053a6:	2200      	movs	r2, #0
 80053a8:	2108      	movs	r1, #8
 80053aa:	4838      	ldr	r0, [pc, #224]	; (800548c <MX_GPIO_Init+0x230>)
 80053ac:	f003 fbfe 	bl	8008bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485DE_GPIO_Port, RS485DE_Pin, GPIO_PIN_RESET);
 80053b0:	2200      	movs	r2, #0
 80053b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053b6:	4836      	ldr	r0, [pc, #216]	; (8005490 <MX_GPIO_Init+0x234>)
 80053b8:	f003 fbf8 	bl	8008bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80053bc:	2201      	movs	r2, #1
 80053be:	2110      	movs	r1, #16
 80053c0:	4834      	ldr	r0, [pc, #208]	; (8005494 <MX_GPIO_Init+0x238>)
 80053c2:	f003 fbf3 	bl	8008bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_DISP_Pin */
  GPIO_InitStruct.Pin = LTDC_DISP_Pin;
 80053c6:	2308      	movs	r3, #8
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ca:	2301      	movs	r3, #1
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053d2:	2300      	movs	r3, #0
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LTDC_DISP_GPIO_Port, &GPIO_InitStruct);
 80053d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053da:	4619      	mov	r1, r3
 80053dc:	482b      	ldr	r0, [pc, #172]	; (800548c <MX_GPIO_Init+0x230>)
 80053de:	f003 fa21 	bl	8008824 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485DE_Pin */
  GPIO_InitStruct.Pin = RS485DE_Pin;
 80053e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053e8:	2301      	movs	r3, #1
 80053ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f0:	2303      	movs	r3, #3
 80053f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(RS485DE_GPIO_Port, &GPIO_InitStruct);
 80053f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053f8:	4619      	mov	r1, r3
 80053fa:	4825      	ldr	r0, [pc, #148]	; (8005490 <MX_GPIO_Init+0x234>)
 80053fc:	f003 fa12 	bl	8008824 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8005400:	2310      	movs	r3, #16
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005404:	2301      	movs	r3, #1
 8005406:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005408:	2301      	movs	r3, #1
 800540a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800540c:	2303      	movs	r3, #3
 800540e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8005410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005414:	4619      	mov	r1, r3
 8005416:	481f      	ldr	r0, [pc, #124]	; (8005494 <MX_GPIO_Init+0x238>)
 8005418:	f003 fa04 	bl	8008824 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 800541c:	2320      	movs	r3, #32
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005420:	2300      	movs	r3, #0
 8005422:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005424:	2301      	movs	r3, #1
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8005428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800542c:	4619      	mov	r1, r3
 800542e:	481a      	ldr	r0, [pc, #104]	; (8005498 <MX_GPIO_Init+0x23c>)
 8005430:	f003 f9f8 	bl	8008824 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin BUTTON_4_Pin BUTTON_5_Pin
                           BUTTON_6_Pin BUTTON_7_Pin BUTTON_8_Pin BUTTON_16_Pin
                           BUTTON_15_Pin BUTTON_14_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_4_Pin|BUTTON_5_Pin
 8005434:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BUTTON_6_Pin|BUTTON_7_Pin|BUTTON_8_Pin|BUTTON_16_Pin
                          |BUTTON_15_Pin|BUTTON_14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800543a:	2300      	movs	r3, #0
 800543c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800543e:	2301      	movs	r3, #1
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005446:	4619      	mov	r1, r3
 8005448:	4814      	ldr	r0, [pc, #80]	; (800549c <MX_GPIO_Init+0x240>)
 800544a:	f003 f9eb 	bl	8008824 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_12_Pin BUTTON_11_Pin BUTTON_10_Pin BUTTON_9_Pin */
  GPIO_InitStruct.Pin = BUTTON_12_Pin|BUTTON_11_Pin|BUTTON_10_Pin|BUTTON_9_Pin;
 800544e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005454:	2300      	movs	r3, #0
 8005456:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005458:	2301      	movs	r3, #1
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800545c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005460:	4619      	mov	r1, r3
 8005462:	480f      	ldr	r0, [pc, #60]	; (80054a0 <MX_GPIO_Init+0x244>)
 8005464:	f003 f9de 	bl	8008824 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_13_Pin */
  GPIO_InitStruct.Pin = BUTTON_13_Pin;
 8005468:	2301      	movs	r3, #1
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800546c:	2300      	movs	r3, #0
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005470:	2301      	movs	r3, #1
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_13_GPIO_Port, &GPIO_InitStruct);
 8005474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005478:	4619      	mov	r1, r3
 800547a:	480a      	ldr	r0, [pc, #40]	; (80054a4 <MX_GPIO_Init+0x248>)
 800547c:	f003 f9d2 	bl	8008824 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005480:	bf00      	nop
 8005482:	3740      	adds	r7, #64	; 0x40
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40023800 	.word	0x40023800
 800548c:	40021000 	.word	0x40021000
 8005490:	40021400 	.word	0x40021400
 8005494:	40020000 	.word	0x40020000
 8005498:	40022400 	.word	0x40022400
 800549c:	40021c00 	.word	0x40021c00
 80054a0:	40020800 	.word	0x40020800
 80054a4:	40022000 	.word	0x40022000

080054a8 <BSP_SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */

void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command){
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2201      	movs	r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2210      	movs	r2, #16
 80054c0:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2201      	movs	r2, #1
 80054c6:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2200      	movs	r2, #0
 80054cc:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80054ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054d2:	6839      	ldr	r1, [r7, #0]
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f004 fd3b 	bl	8009f50 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80054da:	2001      	movs	r0, #1
 80054dc:	f002 fc92 	bl	8007e04 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2202      	movs	r2, #2
 80054e4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2210      	movs	r2, #16
 80054ea:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2201      	movs	r2, #1
 80054f0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2200      	movs	r2, #0
 80054f6:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80054f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f004 fd26 	bl	8009f50 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2203      	movs	r2, #3
 8005508:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2210      	movs	r2, #16
 800550e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2208      	movs	r2, #8
 8005514:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2200      	movs	r2, #0
 800551a:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800551c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f004 fd14 	bl	8009f50 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8005528:	f44f 7308 	mov.w	r3, #544	; 0x220
 800552c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2204      	movs	r2, #4
 8005532:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2210      	movs	r2, #16
 8005538:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2201      	movs	r2, #1
 800553e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8005546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f004 fcff 	bl	8009f50 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  //hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
  hsdram->Instance->SDRTR = ((uint32_t)(64000*65/4096-20) << 1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800555a:	615a      	str	r2, [r3, #20]
};
 800555c:	bf00      	nop
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005568:	b672      	cpsid	i
}
 800556a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800556c:	e7fe      	b.n	800556c <Error_Handler+0x8>
	...

08005570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005576:	2300      	movs	r3, #0
 8005578:	607b      	str	r3, [r7, #4]
 800557a:	4b10      	ldr	r3, [pc, #64]	; (80055bc <HAL_MspInit+0x4c>)
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	4a0f      	ldr	r2, [pc, #60]	; (80055bc <HAL_MspInit+0x4c>)
 8005580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005584:	6453      	str	r3, [r2, #68]	; 0x44
 8005586:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <HAL_MspInit+0x4c>)
 8005588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800558e:	607b      	str	r3, [r7, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005592:	2300      	movs	r3, #0
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <HAL_MspInit+0x4c>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	4a08      	ldr	r2, [pc, #32]	; (80055bc <HAL_MspInit+0x4c>)
 800559c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a0:	6413      	str	r3, [r2, #64]	; 0x40
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <HAL_MspInit+0x4c>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800

080055c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a0b      	ldr	r2, [pc, #44]	; (80055fc <HAL_DMA2D_MspInit+0x3c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10d      	bne.n	80055ee <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <HAL_DMA2D_MspInit+0x40>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	4a09      	ldr	r2, [pc, #36]	; (8005600 <HAL_DMA2D_MspInit+0x40>)
 80055dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055e0:	6313      	str	r3, [r2, #48]	; 0x30
 80055e2:	4b07      	ldr	r3, [pc, #28]	; (8005600 <HAL_DMA2D_MspInit+0x40>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80055ee:	bf00      	nop
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	4002b000 	.word	0x4002b000
 8005600:	40023800 	.word	0x40023800

08005604 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b09a      	sub	sp, #104	; 0x68
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	605a      	str	r2, [r3, #4]
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800561c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005620:	2230      	movs	r2, #48	; 0x30
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f006 fe0b 	bl	800c240 <memset>
  if(hltdc->Instance==LTDC)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a69      	ldr	r2, [pc, #420]	; (80057d4 <HAL_LTDC_MspInit+0x1d0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	f040 80ca 	bne.w	80057ca <HAL_LTDC_MspInit+0x1c6>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005636:	2308      	movs	r3, #8
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800563a:	2332      	movs	r3, #50	; 0x32
 800563c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800563e:	2302      	movs	r3, #2
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8005642:	2300      	movs	r3, #0
 8005644:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800564a:	4618      	mov	r0, r3
 800564c:	f004 fa8c 	bl	8009b68 <HAL_RCCEx_PeriphCLKConfig>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8005656:	f7ff ff85 	bl	8005564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800565a:	2300      	movs	r3, #0
 800565c:	623b      	str	r3, [r7, #32]
 800565e:	4b5e      	ldr	r3, [pc, #376]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 8005660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005662:	4a5d      	ldr	r2, [pc, #372]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 8005664:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005668:	6453      	str	r3, [r2, #68]	; 0x44
 800566a:	4b5b      	ldr	r3, [pc, #364]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005672:	623b      	str	r3, [r7, #32]
 8005674:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	4b57      	ldr	r3, [pc, #348]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	4a56      	ldr	r2, [pc, #344]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 8005680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005684:	6313      	str	r3, [r2, #48]	; 0x30
 8005686:	4b54      	ldr	r3, [pc, #336]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	4b50      	ldr	r3, [pc, #320]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	4a4f      	ldr	r2, [pc, #316]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 800569c:	f043 0320 	orr.w	r3, r3, #32
 80056a0:	6313      	str	r3, [r2, #48]	; 0x30
 80056a2:	4b4d      	ldr	r3, [pc, #308]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	4b49      	ldr	r3, [pc, #292]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	4a48      	ldr	r2, [pc, #288]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 80056b8:	f043 0302 	orr.w	r3, r3, #2
 80056bc:	6313      	str	r3, [r2, #48]	; 0x30
 80056be:	4b46      	ldr	r3, [pc, #280]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80056ca:	2300      	movs	r3, #0
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	4b42      	ldr	r3, [pc, #264]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	4a41      	ldr	r2, [pc, #260]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 80056d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056d8:	6313      	str	r3, [r2, #48]	; 0x30
 80056da:	4b3f      	ldr	r3, [pc, #252]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	4b3b      	ldr	r3, [pc, #236]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	4a3a      	ldr	r2, [pc, #232]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 80056f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056f4:	6313      	str	r3, [r2, #48]	; 0x30
 80056f6:	4b38      	ldr	r3, [pc, #224]	; (80057d8 <HAL_LTDC_MspInit+0x1d4>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
    PK3     ------> LTDC_B4
    PK4     ------> LTDC_B5
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8005702:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8005706:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005708:	2302      	movs	r3, #2
 800570a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800570c:	2300      	movs	r3, #0
 800570e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005710:	2303      	movs	r3, #3
 8005712:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005714:	230e      	movs	r3, #14
 8005716:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005718:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800571c:	4619      	mov	r1, r3
 800571e:	482f      	ldr	r0, [pc, #188]	; (80057dc <HAL_LTDC_MspInit+0x1d8>)
 8005720:	f003 f880 	bl	8008824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005728:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800572a:	2302      	movs	r3, #2
 800572c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572e:	2300      	movs	r3, #0
 8005730:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005732:	2303      	movs	r3, #3
 8005734:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005736:	230e      	movs	r3, #14
 8005738:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800573a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800573e:	4619      	mov	r1, r3
 8005740:	4827      	ldr	r0, [pc, #156]	; (80057e0 <HAL_LTDC_MspInit+0x1dc>)
 8005742:	f003 f86f 	bl	8008824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005746:	2302      	movs	r3, #2
 8005748:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800574a:	2302      	movs	r3, #2
 800574c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574e:	2300      	movs	r3, #0
 8005750:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005752:	2303      	movs	r3, #3
 8005754:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005756:	2309      	movs	r3, #9
 8005758:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800575a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800575e:	4619      	mov	r1, r3
 8005760:	4820      	ldr	r0, [pc, #128]	; (80057e4 <HAL_LTDC_MspInit+0x1e0>)
 8005762:	f003 f85f 	bl	8008824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005766:	f24f 73df 	movw	r3, #63455	; 0xf7df
 800576a:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576c:	2302      	movs	r3, #2
 800576e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005770:	2300      	movs	r3, #0
 8005772:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005774:	2303      	movs	r3, #3
 8005776:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005778:	230e      	movs	r3, #14
 800577a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800577c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005780:	4619      	mov	r1, r3
 8005782:	4819      	ldr	r0, [pc, #100]	; (80057e8 <HAL_LTDC_MspInit+0x1e4>)
 8005784:	f003 f84e 	bl	8008824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800578c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578e:	2302      	movs	r3, #2
 8005790:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005792:	2300      	movs	r3, #0
 8005794:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005796:	2303      	movs	r3, #3
 8005798:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800579a:	230e      	movs	r3, #14
 800579c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800579e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80057a2:	4619      	mov	r1, r3
 80057a4:	480f      	ldr	r0, [pc, #60]	; (80057e4 <HAL_LTDC_MspInit+0x1e0>)
 80057a6:	f003 f83d 	bl	8008824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80057aa:	237f      	movs	r3, #127	; 0x7f
 80057ac:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ae:	2302      	movs	r3, #2
 80057b0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b6:	2303      	movs	r3, #3
 80057b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80057ba:	230e      	movs	r3, #14
 80057bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80057be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80057c2:	4619      	mov	r1, r3
 80057c4:	4809      	ldr	r0, [pc, #36]	; (80057ec <HAL_LTDC_MspInit+0x1e8>)
 80057c6:	f003 f82d 	bl	8008824 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80057ca:	bf00      	nop
 80057cc:	3768      	adds	r7, #104	; 0x68
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40016800 	.word	0x40016800
 80057d8:	40023800 	.word	0x40023800
 80057dc:	40022000 	.word	0x40022000
 80057e0:	40021400 	.word	0x40021400
 80057e4:	40020400 	.word	0x40020400
 80057e8:	40022400 	.word	0x40022400
 80057ec:	40022800 	.word	0x40022800

080057f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057f8:	f107 0314 	add.w	r3, r7, #20
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	60da      	str	r2, [r3, #12]
 8005806:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a19      	ldr	r2, [pc, #100]	; (8005874 <HAL_SPI_MspInit+0x84>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d12b      	bne.n	800586a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005812:	2300      	movs	r3, #0
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <HAL_SPI_MspInit+0x88>)
 8005818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581a:	4a17      	ldr	r2, [pc, #92]	; (8005878 <HAL_SPI_MspInit+0x88>)
 800581c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005820:	6453      	str	r3, [r2, #68]	; 0x44
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <HAL_SPI_MspInit+0x88>)
 8005824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	4b11      	ldr	r3, [pc, #68]	; (8005878 <HAL_SPI_MspInit+0x88>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	4a10      	ldr	r2, [pc, #64]	; (8005878 <HAL_SPI_MspInit+0x88>)
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	6313      	str	r3, [r2, #48]	; 0x30
 800583e:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <HAL_SPI_MspInit+0x88>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800584a:	23e0      	movs	r3, #224	; 0xe0
 800584c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584e:	2302      	movs	r3, #2
 8005850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005856:	2303      	movs	r3, #3
 8005858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800585a:	2305      	movs	r3, #5
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800585e:	f107 0314 	add.w	r3, r7, #20
 8005862:	4619      	mov	r1, r3
 8005864:	4805      	ldr	r0, [pc, #20]	; (800587c <HAL_SPI_MspInit+0x8c>)
 8005866:	f002 ffdd 	bl	8008824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800586a:	bf00      	nop
 800586c:	3728      	adds	r7, #40	; 0x28
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40013000 	.word	0x40013000
 8005878:	40023800 	.word	0x40023800
 800587c:	40020000 	.word	0x40020000

08005880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a18      	ldr	r2, [pc, #96]	; (80058f0 <HAL_TIM_Base_MspInit+0x70>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d10e      	bne.n	80058b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <HAL_TIM_Base_MspInit+0x74>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <HAL_TIM_Base_MspInit+0x74>)
 800589c:	f043 0304 	orr.w	r3, r3, #4
 80058a0:	6413      	str	r3, [r2, #64]	; 0x40
 80058a2:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <HAL_TIM_Base_MspInit+0x74>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80058ae:	e01a      	b.n	80058e6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a10      	ldr	r2, [pc, #64]	; (80058f8 <HAL_TIM_Base_MspInit+0x78>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d115      	bne.n	80058e6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80058ba:	2300      	movs	r3, #0
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <HAL_TIM_Base_MspInit+0x74>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	4a0c      	ldr	r2, [pc, #48]	; (80058f4 <HAL_TIM_Base_MspInit+0x74>)
 80058c4:	f043 0308 	orr.w	r3, r3, #8
 80058c8:	6413      	str	r3, [r2, #64]	; 0x40
 80058ca:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <HAL_TIM_Base_MspInit+0x74>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	60bb      	str	r3, [r7, #8]
 80058d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80058d6:	2200      	movs	r2, #0
 80058d8:	2101      	movs	r1, #1
 80058da:	2032      	movs	r0, #50	; 0x32
 80058dc:	f002 fb91 	bl	8008002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80058e0:	2032      	movs	r0, #50	; 0x32
 80058e2:	f002 fbaa 	bl	800803a <HAL_NVIC_EnableIRQ>
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40023800 	.word	0x40023800
 80058f8:	40000c00 	.word	0x40000c00

080058fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005904:	f107 030c 	add.w	r3, r7, #12
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a12      	ldr	r2, [pc, #72]	; (8005964 <HAL_TIM_MspPostInit+0x68>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d11e      	bne.n	800595c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	4b11      	ldr	r3, [pc, #68]	; (8005968 <HAL_TIM_MspPostInit+0x6c>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	4a10      	ldr	r2, [pc, #64]	; (8005968 <HAL_TIM_MspPostInit+0x6c>)
 8005928:	f043 0302 	orr.w	r3, r3, #2
 800592c:	6313      	str	r3, [r2, #48]	; 0x30
 800592e:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <HAL_TIM_MspPostInit+0x6c>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800593a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800593e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005940:	2302      	movs	r3, #2
 8005942:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005948:	2300      	movs	r3, #0
 800594a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800594c:	2302      	movs	r3, #2
 800594e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005950:	f107 030c 	add.w	r3, r7, #12
 8005954:	4619      	mov	r1, r3
 8005956:	4805      	ldr	r0, [pc, #20]	; (800596c <HAL_TIM_MspPostInit+0x70>)
 8005958:	f002 ff64 	bl	8008824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800595c:	bf00      	nop
 800595e:	3720      	adds	r7, #32
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40000800 	.word	0x40000800
 8005968:	40023800 	.word	0x40023800
 800596c:	40020400 	.word	0x40020400

08005970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	; 0x28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005978:	f107 0314 	add.w	r3, r7, #20
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	605a      	str	r2, [r3, #4]
 8005982:	609a      	str	r2, [r3, #8]
 8005984:	60da      	str	r2, [r3, #12]
 8005986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <HAL_UART_MspInit+0x94>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d133      	bne.n	80059fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <HAL_UART_MspInit+0x98>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	4a1b      	ldr	r2, [pc, #108]	; (8005a08 <HAL_UART_MspInit+0x98>)
 800599c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059a0:	6413      	str	r3, [r2, #64]	; 0x40
 80059a2:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <HAL_UART_MspInit+0x98>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <HAL_UART_MspInit+0x98>)
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	4a14      	ldr	r2, [pc, #80]	; (8005a08 <HAL_UART_MspInit+0x98>)
 80059b8:	f043 0320 	orr.w	r3, r3, #32
 80059bc:	6313      	str	r3, [r2, #48]	; 0x30
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <HAL_UART_MspInit+0x98>)
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059ca:	23c0      	movs	r3, #192	; 0xc0
 80059cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ce:	2302      	movs	r3, #2
 80059d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059d6:	2303      	movs	r3, #3
 80059d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80059da:	2308      	movs	r3, #8
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80059de:	f107 0314 	add.w	r3, r7, #20
 80059e2:	4619      	mov	r1, r3
 80059e4:	4809      	ldr	r0, [pc, #36]	; (8005a0c <HAL_UART_MspInit+0x9c>)
 80059e6:	f002 ff1d 	bl	8008824 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80059ea:	2200      	movs	r2, #0
 80059ec:	2100      	movs	r1, #0
 80059ee:	2052      	movs	r0, #82	; 0x52
 80059f0:	f002 fb07 	bl	8008002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80059f4:	2052      	movs	r0, #82	; 0x52
 80059f6:	f002 fb20 	bl	800803a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80059fa:	bf00      	nop
 80059fc:	3728      	adds	r7, #40	; 0x28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40007800 	.word	0x40007800
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40021400 	.word	0x40021400

08005a10 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005a16:	1d3b      	adds	r3, r7, #4
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	609a      	str	r2, [r3, #8]
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005a24:	4b34      	ldr	r3, [pc, #208]	; (8005af8 <HAL_FMC_MspInit+0xe8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d160      	bne.n	8005aee <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 8005a2c:	4b32      	ldr	r3, [pc, #200]	; (8005af8 <HAL_FMC_MspInit+0xe8>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005a32:	2300      	movs	r3, #0
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	4b31      	ldr	r3, [pc, #196]	; (8005afc <HAL_FMC_MspInit+0xec>)
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	4a30      	ldr	r2, [pc, #192]	; (8005afc <HAL_FMC_MspInit+0xec>)
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	6393      	str	r3, [r2, #56]	; 0x38
 8005a42:	4b2e      	ldr	r3, [pc, #184]	; (8005afc <HAL_FMC_MspInit+0xec>)
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005a4e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005a52:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a54:	2302      	movs	r3, #2
 8005a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005a60:	230c      	movs	r3, #12
 8005a62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	4825      	ldr	r0, [pc, #148]	; (8005b00 <HAL_FMC_MspInit+0xf0>)
 8005a6a:	f002 fedb 	bl	8008824 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8005a6e:	230d      	movs	r3, #13
 8005a70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a72:	2302      	movs	r3, #2
 8005a74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005a7e:	230c      	movs	r3, #12
 8005a80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a82:	1d3b      	adds	r3, r7, #4
 8005a84:	4619      	mov	r1, r3
 8005a86:	481f      	ldr	r0, [pc, #124]	; (8005b04 <HAL_FMC_MspInit+0xf4>)
 8005a88:	f002 fecc 	bl	8008824 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8005a8c:	f248 1337 	movw	r3, #33079	; 0x8137
 8005a90:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a92:	2302      	movs	r3, #2
 8005a94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005a9e:	230c      	movs	r3, #12
 8005aa0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4818      	ldr	r0, [pc, #96]	; (8005b08 <HAL_FMC_MspInit+0xf8>)
 8005aa8:	f002 febc 	bl	8008824 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005aac:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005ab0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aba:	2303      	movs	r3, #3
 8005abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005abe:	230c      	movs	r3, #12
 8005ac0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ac2:	1d3b      	adds	r3, r7, #4
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4811      	ldr	r0, [pc, #68]	; (8005b0c <HAL_FMC_MspInit+0xfc>)
 8005ac8:	f002 feac 	bl	8008824 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005acc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005ad0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ada:	2303      	movs	r3, #3
 8005adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005ade:	230c      	movs	r3, #12
 8005ae0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	480a      	ldr	r0, [pc, #40]	; (8005b10 <HAL_FMC_MspInit+0x100>)
 8005ae8:	f002 fe9c 	bl	8008824 <HAL_GPIO_Init>
 8005aec:	e000      	b.n	8005af0 <HAL_FMC_MspInit+0xe0>
    return;
 8005aee:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000b70 	.word	0x20000b70
 8005afc:	40023800 	.word	0x40023800
 8005b00:	40021400 	.word	0x40021400
 8005b04:	40020800 	.word	0x40020800
 8005b08:	40021800 	.word	0x40021800
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40020c00 	.word	0x40020c00

08005b14 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005b1c:	f7ff ff78 	bl	8005a10 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005b20:	bf00      	nop
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b2c:	e7fe      	b.n	8005b2c <NMI_Handler+0x4>

08005b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b32:	e7fe      	b.n	8005b32 <HardFault_Handler+0x4>

08005b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b38:	e7fe      	b.n	8005b38 <MemManage_Handler+0x4>

08005b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b3e:	e7fe      	b.n	8005b3e <BusFault_Handler+0x4>

08005b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b44:	e7fe      	b.n	8005b44 <UsageFault_Handler+0x4>

08005b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b46:	b480      	push	{r7}
 8005b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b4a:	bf00      	nop
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b58:	bf00      	nop
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b62:	b480      	push	{r7}
 8005b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b66:	bf00      	nop
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	timer_1++;
 8005b74:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <SysTick_Handler+0x84>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <SysTick_Handler+0x84>)
 8005b7c:	6013      	str	r3, [r2, #0]

	if(PassW_block.PassFalseTimer){PassW_block.PassFalseTimer--;}
 8005b7e:	4b1e      	ldr	r3, [pc, #120]	; (8005bf8 <SysTick_Handler+0x88>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <SysTick_Handler+0x20>
 8005b86:	4b1c      	ldr	r3, [pc, #112]	; (8005bf8 <SysTick_Handler+0x88>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	4a1a      	ldr	r2, [pc, #104]	; (8005bf8 <SysTick_Handler+0x88>)
 8005b8e:	6093      	str	r3, [r2, #8]

	if(PWM_launch)
 8005b90:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <SysTick_Handler+0x8c>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <SysTick_Handler+0x54>
	{
		if(brightness_disp < 10000){brightness_disp += 1;}
 8005b98:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <SysTick_Handler+0x90>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d804      	bhi.n	8005bae <SysTick_Handler+0x3e>
 8005ba4:	4b16      	ldr	r3, [pc, #88]	; (8005c00 <SysTick_Handler+0x90>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <SysTick_Handler+0x90>)
 8005bac:	6013      	str	r3, [r2, #0]
		if(brightness_clav < 10000){brightness_clav += 1;}
 8005bae:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <SysTick_Handler+0x94>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d804      	bhi.n	8005bc4 <SysTick_Handler+0x54>
 8005bba:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <SysTick_Handler+0x94>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	4a10      	ldr	r2, [pc, #64]	; (8005c04 <SysTick_Handler+0x94>)
 8005bc2:	6013      	str	r3, [r2, #0]
	}

	TimedBitValue_handler(&ALG_DB.clearing_pressure_filter_1);
 8005bc4:	4810      	ldr	r0, [pc, #64]	; (8005c08 <SysTick_Handler+0x98>)
 8005bc6:	f7fe fea1 	bl	800490c <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_pressure_filter_2);
 8005bca:	4810      	ldr	r0, [pc, #64]	; (8005c0c <SysTick_Handler+0x9c>)
 8005bcc:	f7fe fe9e 	bl	800490c <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_water_filter_1);
 8005bd0:	480f      	ldr	r0, [pc, #60]	; (8005c10 <SysTick_Handler+0xa0>)
 8005bd2:	f7fe fe9b 	bl	800490c <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_water_filter_2);
 8005bd6:	480f      	ldr	r0, [pc, #60]	; (8005c14 <SysTick_Handler+0xa4>)
 8005bd8:	f7fe fe98 	bl	800490c <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_water_filter_3);
 8005bdc:	480e      	ldr	r0, [pc, #56]	; (8005c18 <SysTick_Handler+0xa8>)
 8005bde:	f7fe fe95 	bl	800490c <TimedBitValue_handler>

	KeyboardCheck();
 8005be2:	f000 faeb 	bl	80061bc <KeyboardCheck>

	KeyboardWork();
 8005be6:	f000 f841 	bl	8005c6c <KeyboardWork>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005bea:	f002 f8eb 	bl	8007dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000ba4 	.word	0x20000ba4
 8005bf8:	20000a00 	.word	0x20000a00
 8005bfc:	200009fd 	.word	0x200009fd
 8005c00:	20000350 	.word	0x20000350
 8005c04:	20000354 	.word	0x20000354
 8005c08:	20000a14 	.word	0x20000a14
 8005c0c:	20000a1a 	.word	0x20000a1a
 8005c10:	20000a20 	.word	0x20000a20
 8005c14:	20000a26 	.word	0x20000a26
 8005c18:	20000a2c 	.word	0x20000a2c

08005c1c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

	timer_2++;
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <TIM5_IRQHandler+0x20>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <TIM5_IRQHandler+0x20>)
 8005c28:	6013      	str	r3, [r2, #0]
	Slave_Clock_1ms(&Slave_1);
 8005c2a:	4805      	ldr	r0, [pc, #20]	; (8005c40 <TIM5_IRQHandler+0x24>)
 8005c2c:	f7fb fe60 	bl	80018f0 <Slave_Clock_1ms>

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005c30:	4804      	ldr	r0, [pc, #16]	; (8005c44 <TIM5_IRQHandler+0x28>)
 8005c32:	f004 fc2d 	bl	800a490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000ba8 	.word	0x20000ba8
 8005c40:	20000358 	.word	0x20000358
 8005c44:	20000290 	.word	0x20000290

08005c48 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

	  Slave_PORT_Processor(&Slave_1);
 8005c4c:	4805      	ldr	r0, [pc, #20]	; (8005c64 <UART7_IRQHandler+0x1c>)
 8005c4e:	f7fb f95b 	bl	8000f08 <Slave_PORT_Processor>

	  Slave_Processor(&Slave_1);
 8005c52:	4804      	ldr	r0, [pc, #16]	; (8005c64 <UART7_IRQHandler+0x1c>)
 8005c54:	f7fb f9d2 	bl	8000ffc <Slave_Processor>

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005c58:	4803      	ldr	r0, [pc, #12]	; (8005c68 <UART7_IRQHandler+0x20>)
 8005c5a:	f005 facb 	bl	800b1f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000358 	.word	0x20000358
 8005c68:	200002d8 	.word	0x200002d8

08005c6c <KeyboardWork>:

/* USER CODE BEGIN 1 */

void KeyboardWork(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af02      	add	r7, sp, #8

	uint8_t scr_plus  = 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	71fb      	strb	r3, [r7, #7]
	uint8_t scr_minus = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	71bb      	strb	r3, [r7, #6]


	if(KeysRetain.Up & KeysRetain.Down)
 8005c7a:	4b9e      	ldr	r3, [pc, #632]	; (8005ef4 <KeyboardWork+0x288>)
 8005c7c:	795a      	ldrb	r2, [r3, #5]
 8005c7e:	4b9d      	ldr	r3, [pc, #628]	; (8005ef4 <KeyboardWork+0x288>)
 8005c80:	791b      	ldrb	r3, [r3, #4]
 8005c82:	4013      	ands	r3, r2
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <KeyboardWork+0x30>
	{
		screen 					= 21;
 8005c8a:	4b9b      	ldr	r3, [pc, #620]	; (8005ef8 <KeyboardWork+0x28c>)
 8005c8c:	2215      	movs	r2, #21
 8005c8e:	701a      	strb	r2, [r3, #0]
		Control_DB.MenuPointer  = 0;
 8005c90:	4b9a      	ldr	r3, [pc, #616]	; (8005efc <KeyboardWork+0x290>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	801a      	strh	r2, [r3, #0]
		Control_DB.RazrPointer 	= 0;
 8005c96:	4b99      	ldr	r3, [pc, #612]	; (8005efc <KeyboardWork+0x290>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	805a      	strh	r2, [r3, #2]
	}
	if(KeysFlash.ESC & (screen < 5))
 8005c9c:	4b98      	ldr	r3, [pc, #608]	; (8005f00 <KeyboardWork+0x294>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4b95      	ldr	r3, [pc, #596]	; (8005ef8 <KeyboardWork+0x28c>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	bf94      	ite	ls
 8005caa:	2301      	movls	r3, #1
 8005cac:	2300      	movhi	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <KeyboardWork+0x5e>
	{
		screen_save 	= screen;
 8005cb6:	4b90      	ldr	r3, [pc, #576]	; (8005ef8 <KeyboardWork+0x28c>)
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	4b92      	ldr	r3, [pc, #584]	; (8005f04 <KeyboardWork+0x298>)
 8005cbc:	701a      	strb	r2, [r3, #0]
		screen 			= 20;
 8005cbe:	4b8e      	ldr	r3, [pc, #568]	; (8005ef8 <KeyboardWork+0x28c>)
 8005cc0:	2214      	movs	r2, #20
 8005cc2:	701a      	strb	r2, [r3, #0]
		KeysFlash.ESC 	= 0;
 8005cc4:	4b8e      	ldr	r3, [pc, #568]	; (8005f00 <KeyboardWork+0x294>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
	}
	if(KeysFlash.ESC & (screen == 20))
 8005cca:	4b8d      	ldr	r3, [pc, #564]	; (8005f00 <KeyboardWork+0x294>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	4b89      	ldr	r3, [pc, #548]	; (8005ef8 <KeyboardWork+0x28c>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b14      	cmp	r3, #20
 8005cd6:	bf0c      	ite	eq
 8005cd8:	2301      	moveq	r3, #1
 8005cda:	2300      	movne	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	4013      	ands	r3, r2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d006      	beq.n	8005cf2 <KeyboardWork+0x86>
	{
		screen = screen_save;
 8005ce4:	4b87      	ldr	r3, [pc, #540]	; (8005f04 <KeyboardWork+0x298>)
 8005ce6:	781a      	ldrb	r2, [r3, #0]
 8005ce8:	4b83      	ldr	r3, [pc, #524]	; (8005ef8 <KeyboardWork+0x28c>)
 8005cea:	701a      	strb	r2, [r3, #0]
		KeysFlash.ESC 	= 0;
 8005cec:	4b84      	ldr	r3, [pc, #528]	; (8005f00 <KeyboardWork+0x294>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
	}
	if(KeysFlash.ESC & (((screen >= 5) & (screen <= 7)) | (screen == 21)))
 8005cf2:	4b83      	ldr	r3, [pc, #524]	; (8005f00 <KeyboardWork+0x294>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4b7f      	ldr	r3, [pc, #508]	; (8005ef8 <KeyboardWork+0x28c>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	bf8c      	ite	hi
 8005d00:	2301      	movhi	r3, #1
 8005d02:	2300      	movls	r3, #0
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	4b7c      	ldr	r3, [pc, #496]	; (8005ef8 <KeyboardWork+0x28c>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b07      	cmp	r3, #7
 8005d0c:	bf94      	ite	ls
 8005d0e:	2301      	movls	r3, #1
 8005d10:	2300      	movhi	r3, #0
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	4013      	ands	r3, r2
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4b77      	ldr	r3, [pc, #476]	; (8005ef8 <KeyboardWork+0x28c>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b15      	cmp	r3, #21
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	400b      	ands	r3, r1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <KeyboardWork+0xd6>
	{
		screen 			= 1;
 8005d30:	4b71      	ldr	r3, [pc, #452]	; (8005ef8 <KeyboardWork+0x28c>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
		screen_save 	= 1;
 8005d36:	4b73      	ldr	r3, [pc, #460]	; (8005f04 <KeyboardWork+0x298>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	701a      	strb	r2, [r3, #0]
		Control_DB.RazrPointer 	= 0;
 8005d3c:	4b6f      	ldr	r3, [pc, #444]	; (8005efc <KeyboardWork+0x290>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	805a      	strh	r2, [r3, #2]
	}

	if(KeysFlash.Right)
 8005d42:	4b6f      	ldr	r3, [pc, #444]	; (8005f00 <KeyboardWork+0x294>)
 8005d44:	789b      	ldrb	r3, [r3, #2]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01a      	beq.n	8005d80 <KeyboardWork+0x114>
	{
		if(Control_DB.RazrPointer)
 8005d4a:	4b6c      	ldr	r3, [pc, #432]	; (8005efc <KeyboardWork+0x290>)
 8005d4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d013      	beq.n	8005d7c <KeyboardWork+0x110>
		{
			Control_DB.RazrPointer--;
 8005d54:	4b69      	ldr	r3, [pc, #420]	; (8005efc <KeyboardWork+0x290>)
 8005d56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	b21a      	sxth	r2, r3
 8005d62:	4b66      	ldr	r3, [pc, #408]	; (8005efc <KeyboardWork+0x290>)
 8005d64:	805a      	strh	r2, [r3, #2]
			if(Control_DB.RazrPointer == 0)
 8005d66:	4b65      	ldr	r3, [pc, #404]	; (8005efc <KeyboardWork+0x290>)
 8005d68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d107      	bne.n	8005d80 <KeyboardWork+0x114>
			{
				Control_DB.RazrPointer = Control_DB.RazrPointerMAX;
 8005d70:	4b62      	ldr	r3, [pc, #392]	; (8005efc <KeyboardWork+0x290>)
 8005d72:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8005d76:	4b61      	ldr	r3, [pc, #388]	; (8005efc <KeyboardWork+0x290>)
 8005d78:	805a      	strh	r2, [r3, #2]
 8005d7a:	e001      	b.n	8005d80 <KeyboardWork+0x114>
			}
		}
		else
		{
			scr_plus = 1;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	71fb      	strb	r3, [r7, #7]
		}
	}
	if(KeysFlash.Left)
 8005d80:	4b5f      	ldr	r3, [pc, #380]	; (8005f00 <KeyboardWork+0x294>)
 8005d82:	78db      	ldrb	r3, [r3, #3]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <KeyboardWork+0x154>
	{
		if(Control_DB.RazrPointer)
 8005d88:	4b5c      	ldr	r3, [pc, #368]	; (8005efc <KeyboardWork+0x290>)
 8005d8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d014      	beq.n	8005dbc <KeyboardWork+0x150>
		{
			Control_DB.RazrPointer++;
 8005d92:	4b5a      	ldr	r3, [pc, #360]	; (8005efc <KeyboardWork+0x290>)
 8005d94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	b21a      	sxth	r2, r3
 8005da0:	4b56      	ldr	r3, [pc, #344]	; (8005efc <KeyboardWork+0x290>)
 8005da2:	805a      	strh	r2, [r3, #2]
			if(Control_DB.RazrPointer > Control_DB.RazrPointerMAX)
 8005da4:	4b55      	ldr	r3, [pc, #340]	; (8005efc <KeyboardWork+0x290>)
 8005da6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005daa:	4b54      	ldr	r3, [pc, #336]	; (8005efc <KeyboardWork+0x290>)
 8005dac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	dd05      	ble.n	8005dc0 <KeyboardWork+0x154>
			{
				Control_DB.RazrPointer = 1;
 8005db4:	4b51      	ldr	r3, [pc, #324]	; (8005efc <KeyboardWork+0x290>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	805a      	strh	r2, [r3, #2]
 8005dba:	e001      	b.n	8005dc0 <KeyboardWork+0x154>
			}
		}
		else
		{
			scr_minus = 1;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	71bb      	strb	r3, [r7, #6]
		}
	}

	if(KeysFlash.ENT)
 8005dc0:	4b4f      	ldr	r3, [pc, #316]	; (8005f00 <KeyboardWork+0x294>)
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8149 	beq.w	800605c <KeyboardWork+0x3f0>
	{



		if(screen == 3)
 8005dca:	4b4b      	ldr	r3, [pc, #300]	; (8005ef8 <KeyboardWork+0x28c>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	f040 80a4 	bne.w	8005f1c <KeyboardWork+0x2b0>
		{

			if(PassW_block.DataClearingUnlock)
 8005dd4:	4b4c      	ldr	r3, [pc, #304]	; (8005f08 <KeyboardWork+0x29c>)
 8005dd6:	7c1b      	ldrb	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8081 	beq.w	8005ee0 <KeyboardWork+0x274>
			{
				switch(Control_DB.MenuPointer)
 8005dde:	4b47      	ldr	r3, [pc, #284]	; (8005efc <KeyboardWork+0x290>)
 8005de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	2b12      	cmp	r3, #18
 8005de8:	d87a      	bhi.n	8005ee0 <KeyboardWork+0x274>
 8005dea:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <KeyboardWork+0x184>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e3d 	.word	0x08005e3d
 8005df4:	08005e45 	.word	0x08005e45
 8005df8:	08005e4d 	.word	0x08005e4d
 8005dfc:	08005e55 	.word	0x08005e55
 8005e00:	08005e5d 	.word	0x08005e5d
 8005e04:	08005e65 	.word	0x08005e65
 8005e08:	08005e6d 	.word	0x08005e6d
 8005e0c:	08005e75 	.word	0x08005e75
 8005e10:	08005e7d 	.word	0x08005e7d
 8005e14:	08005e85 	.word	0x08005e85
 8005e18:	08005e8d 	.word	0x08005e8d
 8005e1c:	08005e95 	.word	0x08005e95
 8005e20:	08005e9f 	.word	0x08005e9f
 8005e24:	08005ea9 	.word	0x08005ea9
 8005e28:	08005eb3 	.word	0x08005eb3
 8005e2c:	08005ebb 	.word	0x08005ebb
 8005e30:	08005ec3 	.word	0x08005ec3
 8005e34:	08005ecd 	.word	0x08005ecd
 8005e38:	08005ed7 	.word	0x08005ed7
				{
					case 1:
						BUV_RT_VALS.ANN_1.Pump.MotoClock = 0;
 8005e3c:	4b33      	ldr	r3, [pc, #204]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	60da      	str	r2, [r3, #12]
					break;
 8005e42:	e04d      	b.n	8005ee0 <KeyboardWork+0x274>
					case 2:
						BUV_RT_VALS.ANN_2.Pump.MotoClock = 0;
 8005e44:	4b31      	ldr	r3, [pc, #196]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	621a      	str	r2, [r3, #32]
					break;
 8005e4a:	e049      	b.n	8005ee0 <KeyboardWork+0x274>
					case 3:
						BUV_RT_VALS.ANN_3.Pump.MotoClock = 0;
 8005e4c:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8005e52:	e045      	b.n	8005ee0 <KeyboardWork+0x274>
					case 4:
						BUV_RT_VALS.EMULSION_NODE.Pump_circulation.MotoClock = 0;
 8005e54:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	66da      	str	r2, [r3, #108]	; 0x6c
					break;
 8005e5a:	e041      	b.n	8005ee0 <KeyboardWork+0x274>
					case 5:
						BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.MotoClock = 0;
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	675a      	str	r2, [r3, #116]	; 0x74
					break;
 8005e62:	e03d      	b.n	8005ee0 <KeyboardWork+0x274>
					case 6:
						BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.MotoClock = 0;
 8005e64:	4b29      	ldr	r3, [pc, #164]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	67da      	str	r2, [r3, #124]	; 0x7c
					break;
 8005e6a:	e039      	b.n	8005ee0 <KeyboardWork+0x274>
					case 7:
						BUV_RT_VALS.ANN_1.Unload_counter = 0;
 8005e6c:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	619a      	str	r2, [r3, #24]
					break;
 8005e72:	e035      	b.n	8005ee0 <KeyboardWork+0x274>
					case 8:
						BUV_RT_VALS.ANN_2.Unload_counter = 0;
 8005e74:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8005e7a:	e031      	b.n	8005ee0 <KeyboardWork+0x274>
					case 9:
						BUV_RT_VALS.ANN_3.Unload_counter = 0;
 8005e7c:	4b23      	ldr	r3, [pc, #140]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
					break;
 8005e82:	e02d      	b.n	8005ee0 <KeyboardWork+0x274>
					case 10:
						BUV_RT_VALS.FILT_NODE.Flush_valve_1_counter = 0;
 8005e84:	4b21      	ldr	r3, [pc, #132]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	661a      	str	r2, [r3, #96]	; 0x60
					break;
 8005e8a:	e029      	b.n	8005ee0 <KeyboardWork+0x274>
					case 11:
						BUV_RT_VALS.FILT_NODE.Flush_valve_2_counter = 0;
 8005e8c:	4b1f      	ldr	r3, [pc, #124]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 8005e92:	e025      	b.n	8005ee0 <KeyboardWork+0x274>
					case 12:
						BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_1_counter = 0;
 8005e94:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <KeyboardWork+0x2a0>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8005e9c:	e020      	b.n	8005ee0 <KeyboardWork+0x274>
					case 13:
						BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_2_counter = 0;
 8005e9e:	4b1b      	ldr	r3, [pc, #108]	; (8005f0c <KeyboardWork+0x2a0>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					break;
 8005ea6:	e01b      	b.n	8005ee0 <KeyboardWork+0x274>
					case 14:
						BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_3_counter = 0;
 8005ea8:	4b18      	ldr	r3, [pc, #96]	; (8005f0c <KeyboardWork+0x2a0>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8005eb0:	e016      	b.n	8005ee0 <KeyboardWork+0x274>
					case 15:
						BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Volume = 0;
 8005eb2:	4b16      	ldr	r3, [pc, #88]	; (8005f0c <KeyboardWork+0x2a0>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8005eb8:	e012      	b.n	8005ee0 <KeyboardWork+0x274>
					case 16:
						BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Volume = 0;
 8005eba:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <KeyboardWork+0x2a0>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8005ec0:	e00e      	b.n	8005ee0 <KeyboardWork+0x274>
					case 17:
						BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Volume = 0;
 8005ec2:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <KeyboardWork+0x2a0>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					break;
 8005eca:	e009      	b.n	8005ee0 <KeyboardWork+0x274>
					case 18:
						BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Volume = 0;
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <KeyboardWork+0x2a0>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					break;
 8005ed4:	e004      	b.n	8005ee0 <KeyboardWork+0x274>
					case 19:
						BUV_RT_VALS.EMULSION_NODE.Node_work_counter = 0;
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <KeyboardWork+0x2a0>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8005ede:	bf00      	nop
				}
			}

			if(PassW_block.PassWord != PassW_block.PassWord_DATA)
 8005ee0:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <KeyboardWork+0x29c>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <KeyboardWork+0x29c>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d011      	beq.n	8005f10 <KeyboardWork+0x2a4>
			{
				PassW_block.PassWord = 0;
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <KeyboardWork+0x29c>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	e013      	b.n	8005f1c <KeyboardWork+0x2b0>
 8005ef4:	20000b74 	.word	0x20000b74
 8005ef8:	20000018 	.word	0x20000018
 8005efc:	20000b2c 	.word	0x20000b2c
 8005f00:	20000b84 	.word	0x20000b84
 8005f04:	2000001a 	.word	0x2000001a
 8005f08:	20000a00 	.word	0x20000a00
 8005f0c:	20000a64 	.word	0x20000a64
			}
			else
			{
				PassW_block.PassWord = 0;
 8005f10:	4b77      	ldr	r3, [pc, #476]	; (80060f0 <KeyboardWork+0x484>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
				PassW_block.DataClearingUnlock = 1;
 8005f16:	4b76      	ldr	r3, [pc, #472]	; (80060f0 <KeyboardWork+0x484>)
 8005f18:	2201      	movs	r2, #1
 8005f1a:	741a      	strb	r2, [r3, #16]
			}
		}

		if(screen == 4)
 8005f1c:	4b75      	ldr	r3, [pc, #468]	; (80060f4 <KeyboardWork+0x488>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d125      	bne.n	8005f70 <KeyboardWork+0x304>
		{
			switch(Control_DB.MenuPointer)
 8005f24:	4b74      	ldr	r3, [pc, #464]	; (80060f8 <KeyboardWork+0x48c>)
 8005f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d820      	bhi.n	8005f70 <KeyboardWork+0x304>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <KeyboardWork+0x2c8>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f49 	.word	0x08005f49
 8005f38:	08005f51 	.word	0x08005f51
 8005f3c:	08005f59 	.word	0x08005f59
 8005f40:	08005f61 	.word	0x08005f61
 8005f44:	08005f69 	.word	0x08005f69
			{
				case 0:
					ALG_DB.clearing_pressure_filter_1.state = 1;
 8005f48:	4b6c      	ldr	r3, [pc, #432]	; (80060fc <KeyboardWork+0x490>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
				break;
 8005f4e:	e00f      	b.n	8005f70 <KeyboardWork+0x304>
				case 1:
					ALG_DB.clearing_pressure_filter_2.state = 1;
 8005f50:	4b6a      	ldr	r3, [pc, #424]	; (80060fc <KeyboardWork+0x490>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	719a      	strb	r2, [r3, #6]
				break;
 8005f56:	e00b      	b.n	8005f70 <KeyboardWork+0x304>
				case 2:
					ALG_DB.clearing_water_filter_1.state = 1;
 8005f58:	4b68      	ldr	r3, [pc, #416]	; (80060fc <KeyboardWork+0x490>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	731a      	strb	r2, [r3, #12]
				break;
 8005f5e:	e007      	b.n	8005f70 <KeyboardWork+0x304>
				case 3:
					ALG_DB.clearing_water_filter_2.state = 1;
 8005f60:	4b66      	ldr	r3, [pc, #408]	; (80060fc <KeyboardWork+0x490>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	749a      	strb	r2, [r3, #18]
				break;
 8005f66:	e003      	b.n	8005f70 <KeyboardWork+0x304>
				case 4:
					ALG_DB.clearing_water_filter_3.state = 1;
 8005f68:	4b64      	ldr	r3, [pc, #400]	; (80060fc <KeyboardWork+0x490>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	761a      	strb	r2, [r3, #24]
				break;
 8005f6e:	bf00      	nop
			}
		}

		if(screen == 5)
 8005f70:	4b60      	ldr	r3, [pc, #384]	; (80060f4 <KeyboardWork+0x488>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b05      	cmp	r3, #5
 8005f76:	d115      	bne.n	8005fa4 <KeyboardWork+0x338>
		{
			if(PassW_block.PassWord != PassW_block.PassWord_true)
 8005f78:	4b5d      	ldr	r3, [pc, #372]	; (80060f0 <KeyboardWork+0x484>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b5c      	ldr	r3, [pc, #368]	; (80060f0 <KeyboardWork+0x484>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d00c      	beq.n	8005f9e <KeyboardWork+0x332>
			{
				if(Control_DB.RazrPointer)
 8005f84:	4b5c      	ldr	r3, [pc, #368]	; (80060f8 <KeyboardWork+0x48c>)
 8005f86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <KeyboardWork+0x338>
				{
					PassW_block.PassFalseTimer = 1000;
 8005f8e:	4b58      	ldr	r3, [pc, #352]	; (80060f0 <KeyboardWork+0x484>)
 8005f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f94:	609a      	str	r2, [r3, #8]
					PassW_block.PassWord       =    0;
 8005f96:	4b56      	ldr	r3, [pc, #344]	; (80060f0 <KeyboardWork+0x484>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	e002      	b.n	8005fa4 <KeyboardWork+0x338>
				}
			}
			else
			{
				screen = 6; // переход после ввода правильного пароля
 8005f9e:	4b55      	ldr	r3, [pc, #340]	; (80060f4 <KeyboardWork+0x488>)
 8005fa0:	2206      	movs	r2, #6
 8005fa2:	701a      	strb	r2, [r3, #0]
			}
		}

		if((screen == 7) & (Control_DB.MenuPointer == 4))
 8005fa4:	4b53      	ldr	r3, [pc, #332]	; (80060f4 <KeyboardWork+0x488>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b07      	cmp	r3, #7
 8005faa:	bf0c      	ite	eq
 8005fac:	2301      	moveq	r3, #1
 8005fae:	2300      	movne	r3, #0
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4b51      	ldr	r3, [pc, #324]	; (80060f8 <KeyboardWork+0x48c>)
 8005fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00b      	beq.n	8005fe2 <KeyboardWork+0x376>
		{
			BUV_settings_global.work_on_water_enable = !BUV_settings_global.work_on_water_enable;
 8005fca:	4b4d      	ldr	r3, [pc, #308]	; (8006100 <KeyboardWork+0x494>)
 8005fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4b48      	ldr	r3, [pc, #288]	; (8006100 <KeyboardWork+0x494>)
 8005fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}



		if(Control_DB.RazrPointerMAX)
 8005fe2:	4b45      	ldr	r3, [pc, #276]	; (80060f8 <KeyboardWork+0x48c>)
 8005fe4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d021      	beq.n	8006030 <KeyboardWork+0x3c4>
		{
			if(Control_DB.RazrPointer)
 8005fec:	4b42      	ldr	r3, [pc, #264]	; (80060f8 <KeyboardWork+0x48c>)
 8005fee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <KeyboardWork+0x392>
			{
				Control_DB.RazrPointer = 0;
 8005ff6:	4b40      	ldr	r3, [pc, #256]	; (80060f8 <KeyboardWork+0x48c>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	805a      	strh	r2, [r3, #2]
 8005ffc:	e018      	b.n	8006030 <KeyboardWork+0x3c4>
			}
			else
			{
				if((screen == 3) | (screen == 5))
 8005ffe:	4b3d      	ldr	r3, [pc, #244]	; (80060f4 <KeyboardWork+0x488>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b03      	cmp	r3, #3
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2da      	uxtb	r2, r3
 800600c:	4b39      	ldr	r3, [pc, #228]	; (80060f4 <KeyboardWork+0x488>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b05      	cmp	r3, #5
 8006012:	bf0c      	ite	eq
 8006014:	2301      	moveq	r3, #1
 8006016:	2300      	movne	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	4313      	orrs	r3, r2
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <KeyboardWork+0x3be>
				{
					Control_DB.RazrPointer = 4;
 8006022:	4b35      	ldr	r3, [pc, #212]	; (80060f8 <KeyboardWork+0x48c>)
 8006024:	2204      	movs	r2, #4
 8006026:	805a      	strh	r2, [r3, #2]
 8006028:	e002      	b.n	8006030 <KeyboardWork+0x3c4>
				}
				else
				{
					Control_DB.RazrPointer = 1;
 800602a:	4b33      	ldr	r3, [pc, #204]	; (80060f8 <KeyboardWork+0x48c>)
 800602c:	2201      	movs	r2, #1
 800602e:	805a      	strh	r2, [r3, #2]
				}
			}
		}

		if((screen == 21) & (Control_DB.MenuPointer == 5))
 8006030:	4b30      	ldr	r3, [pc, #192]	; (80060f4 <KeyboardWork+0x488>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b15      	cmp	r3, #21
 8006036:	bf0c      	ite	eq
 8006038:	2301      	moveq	r3, #1
 800603a:	2300      	movne	r3, #0
 800603c:	b2da      	uxtb	r2, r3
 800603e:	4b2e      	ldr	r3, [pc, #184]	; (80060f8 <KeyboardWork+0x48c>)
 8006040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006044:	2b05      	cmp	r3, #5
 8006046:	bf0c      	ite	eq
 8006048:	2301      	moveq	r3, #1
 800604a:	2300      	movne	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	4013      	ands	r3, r2
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <KeyboardWork+0x3f0>
		{
			Settings_DB.FlashWriteFlag = 1;
 8006056:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <KeyboardWork+0x498>)
 8006058:	2201      	movs	r2, #1
 800605a:	741a      	strb	r2, [r3, #16]



	}

	if(KeysFlash.Down)
 800605c:	4b2a      	ldr	r3, [pc, #168]	; (8006108 <KeyboardWork+0x49c>)
 800605e:	791b      	ldrb	r3, [r3, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d028      	beq.n	80060b6 <KeyboardWork+0x44a>
	{
		if(Control_DB.RazrPointer == 0)
 8006064:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <KeyboardWork+0x48c>)
 8006066:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d114      	bne.n	8006098 <KeyboardWork+0x42c>
		{
			Control_DB.MenuPointer++;
 800606e:	4b22      	ldr	r3, [pc, #136]	; (80060f8 <KeyboardWork+0x48c>)
 8006070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006074:	b29b      	uxth	r3, r3
 8006076:	3301      	adds	r3, #1
 8006078:	b29b      	uxth	r3, r3
 800607a:	b21a      	sxth	r2, r3
 800607c:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <KeyboardWork+0x48c>)
 800607e:	801a      	strh	r2, [r3, #0]
			if(Control_DB.MenuPointer > Control_DB.MenuPointerMAX){Control_DB.MenuPointer = 0;}
 8006080:	4b1d      	ldr	r3, [pc, #116]	; (80060f8 <KeyboardWork+0x48c>)
 8006082:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006086:	4b1c      	ldr	r3, [pc, #112]	; (80060f8 <KeyboardWork+0x48c>)
 8006088:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800608c:	429a      	cmp	r2, r3
 800608e:	dd12      	ble.n	80060b6 <KeyboardWork+0x44a>
 8006090:	4b19      	ldr	r3, [pc, #100]	; (80060f8 <KeyboardWork+0x48c>)
 8006092:	2200      	movs	r2, #0
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	e00e      	b.n	80060b6 <KeyboardWork+0x44a>
		}
		else
		{
			NumberChange(Control_DB.VauePointer, Control_DB.RazrPointer, Control_DB.RazrPointerMAX, 0, 1);
 8006098:	4b17      	ldr	r3, [pc, #92]	; (80060f8 <KeyboardWork+0x48c>)
 800609a:	6898      	ldr	r0, [r3, #8]
 800609c:	4b16      	ldr	r3, [pc, #88]	; (80060f8 <KeyboardWork+0x48c>)
 800609e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80060a2:	4619      	mov	r1, r3
 80060a4:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <KeyboardWork+0x48c>)
 80060a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80060aa:	461a      	mov	r2, r3
 80060ac:	2301      	movs	r3, #1
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2300      	movs	r3, #0
 80060b2:	f001 fcd9 	bl	8007a68 <NumberChange>
		}
	}
	if(KeysFlash.Up)
 80060b6:	4b14      	ldr	r3, [pc, #80]	; (8006108 <KeyboardWork+0x49c>)
 80060b8:	795b      	ldrb	r3, [r3, #5]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d035      	beq.n	800612a <KeyboardWork+0x4be>
	{
		if(Control_DB.RazrPointer == 0)
 80060be:	4b0e      	ldr	r3, [pc, #56]	; (80060f8 <KeyboardWork+0x48c>)
 80060c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d121      	bne.n	800610c <KeyboardWork+0x4a0>
		{
			Control_DB.MenuPointer--;
 80060c8:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <KeyboardWork+0x48c>)
 80060ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	b21a      	sxth	r2, r3
 80060d6:	4b08      	ldr	r3, [pc, #32]	; (80060f8 <KeyboardWork+0x48c>)
 80060d8:	801a      	strh	r2, [r3, #0]
			if(Control_DB.MenuPointer < 0){Control_DB.MenuPointer = Control_DB.MenuPointerMAX;}
 80060da:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <KeyboardWork+0x48c>)
 80060dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	da22      	bge.n	800612a <KeyboardWork+0x4be>
 80060e4:	4b04      	ldr	r3, [pc, #16]	; (80060f8 <KeyboardWork+0x48c>)
 80060e6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80060ea:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <KeyboardWork+0x48c>)
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	e01c      	b.n	800612a <KeyboardWork+0x4be>
 80060f0:	20000a00 	.word	0x20000a00
 80060f4:	20000018 	.word	0x20000018
 80060f8:	20000b2c 	.word	0x20000b2c
 80060fc:	20000a14 	.word	0x20000a14
 8006100:	20000a34 	.word	0x20000a34
 8006104:	20000b10 	.word	0x20000b10
 8006108:	20000b84 	.word	0x20000b84
		}
		else
		{
			NumberChange(Control_DB.VauePointer, Control_DB.RazrPointer, Control_DB.RazrPointerMAX, 1, 0);
 800610c:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <KeyboardWork+0x53c>)
 800610e:	6898      	ldr	r0, [r3, #8]
 8006110:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <KeyboardWork+0x53c>)
 8006112:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006116:	4619      	mov	r1, r3
 8006118:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <KeyboardWork+0x53c>)
 800611a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800611e:	461a      	mov	r2, r3
 8006120:	2300      	movs	r3, #0
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	2301      	movs	r3, #1
 8006126:	f001 fc9f 	bl	8007a68 <NumberChange>
		}
	}


	if(screen <= 5)
 800612a:	4b20      	ldr	r3, [pc, #128]	; (80061ac <KeyboardWork+0x540>)
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b05      	cmp	r3, #5
 8006130:	d827      	bhi.n	8006182 <KeyboardWork+0x516>
	{
		if(scr_plus) {screen++;}
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <KeyboardWork+0x4d8>
 8006138:	4b1c      	ldr	r3, [pc, #112]	; (80061ac <KeyboardWork+0x540>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	3301      	adds	r3, #1
 800613e:	b2da      	uxtb	r2, r3
 8006140:	4b1a      	ldr	r3, [pc, #104]	; (80061ac <KeyboardWork+0x540>)
 8006142:	701a      	strb	r2, [r3, #0]
		if(scr_minus){screen--;}
 8006144:	79bb      	ldrb	r3, [r7, #6]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d005      	beq.n	8006156 <KeyboardWork+0x4ea>
 800614a:	4b18      	ldr	r3, [pc, #96]	; (80061ac <KeyboardWork+0x540>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	3b01      	subs	r3, #1
 8006150:	b2da      	uxtb	r2, r3
 8006152:	4b16      	ldr	r3, [pc, #88]	; (80061ac <KeyboardWork+0x540>)
 8006154:	701a      	strb	r2, [r3, #0]

		if(KeysFlash.Right | KeysFlash.Left)
 8006156:	4b16      	ldr	r3, [pc, #88]	; (80061b0 <KeyboardWork+0x544>)
 8006158:	789a      	ldrb	r2, [r3, #2]
 800615a:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <KeyboardWork+0x544>)
 800615c:	78db      	ldrb	r3, [r3, #3]
 800615e:	4313      	orrs	r3, r2
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <KeyboardWork+0x516>
		{
			if(screen > 5){screen = 1;}
 8006166:	4b11      	ldr	r3, [pc, #68]	; (80061ac <KeyboardWork+0x540>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b05      	cmp	r3, #5
 800616c:	d902      	bls.n	8006174 <KeyboardWork+0x508>
 800616e:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <KeyboardWork+0x540>)
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
			if(screen < 1){screen = 5;}
 8006174:	4b0d      	ldr	r3, [pc, #52]	; (80061ac <KeyboardWork+0x540>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <KeyboardWork+0x516>
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <KeyboardWork+0x540>)
 800617e:	2205      	movs	r2, #5
 8006180:	701a      	strb	r2, [r3, #0]
		}
	}

	if(screen != screen_mirror)
 8006182:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <KeyboardWork+0x540>)
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <KeyboardWork+0x548>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d006      	beq.n	800619c <KeyboardWork+0x530>
	{
		screen_mirror = screen;
 800618e:	4b07      	ldr	r3, [pc, #28]	; (80061ac <KeyboardWork+0x540>)
 8006190:	781a      	ldrb	r2, [r3, #0]
 8006192:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <KeyboardWork+0x548>)
 8006194:	701a      	strb	r2, [r3, #0]
		screen_event  = 1;
 8006196:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <KeyboardWork+0x54c>)
 8006198:	2201      	movs	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
	}

	KeyboardClear();
 800619c:	f000 fa42 	bl	8006624 <KeyboardClear>
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20000b2c 	.word	0x20000b2c
 80061ac:	20000018 	.word	0x20000018
 80061b0:	20000b84 	.word	0x20000b84
 80061b4:	20000019 	.word	0x20000019
 80061b8:	200009fc 	.word	0x200009fc

080061bc <KeyboardCheck>:

void KeyboardCheck(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0

	KeysRetain.ESC 			= !HAL_GPIO_ReadPin( BUTTON_1_GPIO_Port,  BUTTON_1_Pin);
 80061c0:	2120      	movs	r1, #32
 80061c2:	48a6      	ldr	r0, [pc, #664]	; (800645c <KeyboardCheck+0x2a0>)
 80061c4:	f002 fcda 	bl	8008b7c <HAL_GPIO_ReadPin>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	bf0c      	ite	eq
 80061ce:	2301      	moveq	r3, #1
 80061d0:	2300      	movne	r3, #0
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	461a      	mov	r2, r3
 80061d6:	4ba2      	ldr	r3, [pc, #648]	; (8006460 <KeyboardCheck+0x2a4>)
 80061d8:	701a      	strb	r2, [r3, #0]
	KeysRetain.ENT 			= !HAL_GPIO_ReadPin( BUTTON_2_GPIO_Port,  BUTTON_2_Pin);
 80061da:	2140      	movs	r1, #64	; 0x40
 80061dc:	48a1      	ldr	r0, [pc, #644]	; (8006464 <KeyboardCheck+0x2a8>)
 80061de:	f002 fccd 	bl	8008b7c <HAL_GPIO_ReadPin>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	bf0c      	ite	eq
 80061e8:	2301      	moveq	r3, #1
 80061ea:	2300      	movne	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	4b9b      	ldr	r3, [pc, #620]	; (8006460 <KeyboardCheck+0x2a4>)
 80061f2:	705a      	strb	r2, [r3, #1]
	KeysRetain.Right 		= !HAL_GPIO_ReadPin( BUTTON_3_GPIO_Port,  BUTTON_3_Pin);
 80061f4:	2180      	movs	r1, #128	; 0x80
 80061f6:	489b      	ldr	r0, [pc, #620]	; (8006464 <KeyboardCheck+0x2a8>)
 80061f8:	f002 fcc0 	bl	8008b7c <HAL_GPIO_ReadPin>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bf0c      	ite	eq
 8006202:	2301      	moveq	r3, #1
 8006204:	2300      	movne	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	4b95      	ldr	r3, [pc, #596]	; (8006460 <KeyboardCheck+0x2a4>)
 800620c:	709a      	strb	r2, [r3, #2]
	KeysRetain.Left 		= !HAL_GPIO_ReadPin( BUTTON_4_GPIO_Port,  BUTTON_4_Pin);
 800620e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006212:	4894      	ldr	r0, [pc, #592]	; (8006464 <KeyboardCheck+0x2a8>)
 8006214:	f002 fcb2 	bl	8008b7c <HAL_GPIO_ReadPin>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	bf0c      	ite	eq
 800621e:	2301      	moveq	r3, #1
 8006220:	2300      	movne	r3, #0
 8006222:	b2db      	uxtb	r3, r3
 8006224:	461a      	mov	r2, r3
 8006226:	4b8e      	ldr	r3, [pc, #568]	; (8006460 <KeyboardCheck+0x2a4>)
 8006228:	70da      	strb	r2, [r3, #3]
	KeysRetain.Down 		= !HAL_GPIO_ReadPin( BUTTON_5_GPIO_Port,  BUTTON_5_Pin);
 800622a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800622e:	488d      	ldr	r0, [pc, #564]	; (8006464 <KeyboardCheck+0x2a8>)
 8006230:	f002 fca4 	bl	8008b7c <HAL_GPIO_ReadPin>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	4b87      	ldr	r3, [pc, #540]	; (8006460 <KeyboardCheck+0x2a4>)
 8006244:	711a      	strb	r2, [r3, #4]
	KeysRetain.Up 			= !HAL_GPIO_ReadPin( BUTTON_6_GPIO_Port,  BUTTON_6_Pin);
 8006246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800624a:	4886      	ldr	r0, [pc, #536]	; (8006464 <KeyboardCheck+0x2a8>)
 800624c:	f002 fc96 	bl	8008b7c <HAL_GPIO_ReadPin>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	bf0c      	ite	eq
 8006256:	2301      	moveq	r3, #1
 8006258:	2300      	movne	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	4b80      	ldr	r3, [pc, #512]	; (8006460 <KeyboardCheck+0x2a4>)
 8006260:	715a      	strb	r2, [r3, #5]
	KeysRetain.PressDown 	= !HAL_GPIO_ReadPin( BUTTON_7_GPIO_Port,  BUTTON_7_Pin);
 8006262:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006266:	487f      	ldr	r0, [pc, #508]	; (8006464 <KeyboardCheck+0x2a8>)
 8006268:	f002 fc88 	bl	8008b7c <HAL_GPIO_ReadPin>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	bf0c      	ite	eq
 8006272:	2301      	moveq	r3, #1
 8006274:	2300      	movne	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	4b79      	ldr	r3, [pc, #484]	; (8006460 <KeyboardCheck+0x2a4>)
 800627c:	719a      	strb	r2, [r3, #6]
	KeysRetain.AHH3_Stop 	= !HAL_GPIO_ReadPin( BUTTON_8_GPIO_Port,  BUTTON_8_Pin);
 800627e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006282:	4878      	ldr	r0, [pc, #480]	; (8006464 <KeyboardCheck+0x2a8>)
 8006284:	f002 fc7a 	bl	8008b7c <HAL_GPIO_ReadPin>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	bf0c      	ite	eq
 800628e:	2301      	moveq	r3, #1
 8006290:	2300      	movne	r3, #0
 8006292:	b2db      	uxtb	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	4b72      	ldr	r3, [pc, #456]	; (8006460 <KeyboardCheck+0x2a4>)
 8006298:	71da      	strb	r2, [r3, #7]
	KeysRetain.AutoPusk 	= !HAL_GPIO_ReadPin( BUTTON_9_GPIO_Port,  BUTTON_9_Pin);
 800629a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800629e:	4872      	ldr	r0, [pc, #456]	; (8006468 <KeyboardCheck+0x2ac>)
 80062a0:	f002 fc6c 	bl	8008b7c <HAL_GPIO_ReadPin>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bf0c      	ite	eq
 80062aa:	2301      	moveq	r3, #1
 80062ac:	2300      	movne	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b6b      	ldr	r3, [pc, #428]	; (8006460 <KeyboardCheck+0x2a4>)
 80062b4:	721a      	strb	r2, [r3, #8]
	KeysRetain.AutoStop 	= !HAL_GPIO_ReadPin(BUTTON_10_GPIO_Port, BUTTON_10_Pin);
 80062b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062ba:	486b      	ldr	r0, [pc, #428]	; (8006468 <KeyboardCheck+0x2ac>)
 80062bc:	f002 fc5e 	bl	8008b7c <HAL_GPIO_ReadPin>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bf0c      	ite	eq
 80062c6:	2301      	moveq	r3, #1
 80062c8:	2300      	movne	r3, #0
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	4b64      	ldr	r3, [pc, #400]	; (8006460 <KeyboardCheck+0x2a4>)
 80062d0:	725a      	strb	r2, [r3, #9]
	KeysRetain.AHH1_Stop 	= !HAL_GPIO_ReadPin(BUTTON_11_GPIO_Port, BUTTON_11_Pin);
 80062d2:	2180      	movs	r1, #128	; 0x80
 80062d4:	4864      	ldr	r0, [pc, #400]	; (8006468 <KeyboardCheck+0x2ac>)
 80062d6:	f002 fc51 	bl	8008b7c <HAL_GPIO_ReadPin>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bf0c      	ite	eq
 80062e0:	2301      	moveq	r3, #1
 80062e2:	2300      	movne	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	4b5d      	ldr	r3, [pc, #372]	; (8006460 <KeyboardCheck+0x2a4>)
 80062ea:	729a      	strb	r2, [r3, #10]
	KeysRetain.AHH2_Stop 	= !HAL_GPIO_ReadPin(BUTTON_12_GPIO_Port, BUTTON_12_Pin);
 80062ec:	2140      	movs	r1, #64	; 0x40
 80062ee:	485e      	ldr	r0, [pc, #376]	; (8006468 <KeyboardCheck+0x2ac>)
 80062f0:	f002 fc44 	bl	8008b7c <HAL_GPIO_ReadPin>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bf0c      	ite	eq
 80062fa:	2301      	moveq	r3, #1
 80062fc:	2300      	movne	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	4b57      	ldr	r3, [pc, #348]	; (8006460 <KeyboardCheck+0x2a4>)
 8006304:	72da      	strb	r2, [r3, #11]
	KeysRetain.PressUp 		= !HAL_GPIO_ReadPin(BUTTON_13_GPIO_Port, BUTTON_13_Pin);
 8006306:	2101      	movs	r1, #1
 8006308:	4858      	ldr	r0, [pc, #352]	; (800646c <KeyboardCheck+0x2b0>)
 800630a:	f002 fc37 	bl	8008b7c <HAL_GPIO_ReadPin>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	4b50      	ldr	r3, [pc, #320]	; (8006460 <KeyboardCheck+0x2a4>)
 800631e:	731a      	strb	r2, [r3, #12]
	KeysRetain.AHH3_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_14_GPIO_Port, BUTTON_14_Pin);
 8006320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006324:	484f      	ldr	r0, [pc, #316]	; (8006464 <KeyboardCheck+0x2a8>)
 8006326:	f002 fc29 	bl	8008b7c <HAL_GPIO_ReadPin>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	bf0c      	ite	eq
 8006330:	2301      	moveq	r3, #1
 8006332:	2300      	movne	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	4b49      	ldr	r3, [pc, #292]	; (8006460 <KeyboardCheck+0x2a4>)
 800633a:	735a      	strb	r2, [r3, #13]
	KeysRetain.AHH2_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_15_GPIO_Port, BUTTON_15_Pin);
 800633c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006340:	4848      	ldr	r0, [pc, #288]	; (8006464 <KeyboardCheck+0x2a8>)
 8006342:	f002 fc1b 	bl	8008b7c <HAL_GPIO_ReadPin>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	bf0c      	ite	eq
 800634c:	2301      	moveq	r3, #1
 800634e:	2300      	movne	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	4b42      	ldr	r3, [pc, #264]	; (8006460 <KeyboardCheck+0x2a4>)
 8006356:	739a      	strb	r2, [r3, #14]
	KeysRetain.AHH1_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_16_GPIO_Port, BUTTON_16_Pin);
 8006358:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800635c:	4841      	ldr	r0, [pc, #260]	; (8006464 <KeyboardCheck+0x2a8>)
 800635e:	f002 fc0d 	bl	8008b7c <HAL_GPIO_ReadPin>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	4b3b      	ldr	r3, [pc, #236]	; (8006460 <KeyboardCheck+0x2a4>)
 8006372:	73da      	strb	r2, [r3, #15]

	if(KeysRetain.ESC 		& !KeysMirror.ESC)			{KeysFlash.ESC 			= 1;}
 8006374:	4b3a      	ldr	r3, [pc, #232]	; (8006460 <KeyboardCheck+0x2a4>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	4b3d      	ldr	r3, [pc, #244]	; (8006470 <KeyboardCheck+0x2b4>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	bf0c      	ite	eq
 8006382:	2301      	moveq	r3, #1
 8006384:	2300      	movne	r3, #0
 8006386:	b2db      	uxtb	r3, r3
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <KeyboardCheck+0x1d8>
 800638e:	4b39      	ldr	r3, [pc, #228]	; (8006474 <KeyboardCheck+0x2b8>)
 8006390:	2201      	movs	r2, #1
 8006392:	701a      	strb	r2, [r3, #0]
	if(KeysRetain.ENT 		& !KeysMirror.ENT)			{KeysFlash.ENT 			= 1;}
 8006394:	4b32      	ldr	r3, [pc, #200]	; (8006460 <KeyboardCheck+0x2a4>)
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	461a      	mov	r2, r3
 800639a:	4b35      	ldr	r3, [pc, #212]	; (8006470 <KeyboardCheck+0x2b4>)
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bf0c      	ite	eq
 80063a2:	2301      	moveq	r3, #1
 80063a4:	2300      	movne	r3, #0
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <KeyboardCheck+0x1f8>
 80063ae:	4b31      	ldr	r3, [pc, #196]	; (8006474 <KeyboardCheck+0x2b8>)
 80063b0:	2201      	movs	r2, #1
 80063b2:	705a      	strb	r2, [r3, #1]
	if(KeysRetain.Right 	& !KeysMirror.Right)		{KeysFlash.Right 		= 1;}
 80063b4:	4b2a      	ldr	r3, [pc, #168]	; (8006460 <KeyboardCheck+0x2a4>)
 80063b6:	789b      	ldrb	r3, [r3, #2]
 80063b8:	461a      	mov	r2, r3
 80063ba:	4b2d      	ldr	r3, [pc, #180]	; (8006470 <KeyboardCheck+0x2b4>)
 80063bc:	789b      	ldrb	r3, [r3, #2]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	bf0c      	ite	eq
 80063c2:	2301      	moveq	r3, #1
 80063c4:	2300      	movne	r3, #0
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	4013      	ands	r3, r2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <KeyboardCheck+0x218>
 80063ce:	4b29      	ldr	r3, [pc, #164]	; (8006474 <KeyboardCheck+0x2b8>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	709a      	strb	r2, [r3, #2]
	if(KeysRetain.Left 		& !KeysMirror.Left)			{KeysFlash.Left 		= 1;}
 80063d4:	4b22      	ldr	r3, [pc, #136]	; (8006460 <KeyboardCheck+0x2a4>)
 80063d6:	78db      	ldrb	r3, [r3, #3]
 80063d8:	461a      	mov	r2, r3
 80063da:	4b25      	ldr	r3, [pc, #148]	; (8006470 <KeyboardCheck+0x2b4>)
 80063dc:	78db      	ldrb	r3, [r3, #3]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bf0c      	ite	eq
 80063e2:	2301      	moveq	r3, #1
 80063e4:	2300      	movne	r3, #0
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	4013      	ands	r3, r2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <KeyboardCheck+0x238>
 80063ee:	4b21      	ldr	r3, [pc, #132]	; (8006474 <KeyboardCheck+0x2b8>)
 80063f0:	2201      	movs	r2, #1
 80063f2:	70da      	strb	r2, [r3, #3]
	if(KeysRetain.Down 		& !KeysMirror.Down)			{KeysFlash.Down 		= 1;}
 80063f4:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <KeyboardCheck+0x2a4>)
 80063f6:	791b      	ldrb	r3, [r3, #4]
 80063f8:	461a      	mov	r2, r3
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <KeyboardCheck+0x2b4>)
 80063fc:	791b      	ldrb	r3, [r3, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bf0c      	ite	eq
 8006402:	2301      	moveq	r3, #1
 8006404:	2300      	movne	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <KeyboardCheck+0x258>
 800640e:	4b19      	ldr	r3, [pc, #100]	; (8006474 <KeyboardCheck+0x2b8>)
 8006410:	2201      	movs	r2, #1
 8006412:	711a      	strb	r2, [r3, #4]
	if(KeysRetain.Up 		& !KeysMirror.Up)			{KeysFlash.Up 			= 1;}
 8006414:	4b12      	ldr	r3, [pc, #72]	; (8006460 <KeyboardCheck+0x2a4>)
 8006416:	795b      	ldrb	r3, [r3, #5]
 8006418:	461a      	mov	r2, r3
 800641a:	4b15      	ldr	r3, [pc, #84]	; (8006470 <KeyboardCheck+0x2b4>)
 800641c:	795b      	ldrb	r3, [r3, #5]
 800641e:	2b00      	cmp	r3, #0
 8006420:	bf0c      	ite	eq
 8006422:	2301      	moveq	r3, #1
 8006424:	2300      	movne	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <KeyboardCheck+0x278>
 800642e:	4b11      	ldr	r3, [pc, #68]	; (8006474 <KeyboardCheck+0x2b8>)
 8006430:	2201      	movs	r2, #1
 8006432:	715a      	strb	r2, [r3, #5]
	if(KeysRetain.PressDown & !KeysMirror.PressDown)	{KeysFlash.PressDown 	= 1;}
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <KeyboardCheck+0x2a4>)
 8006436:	799b      	ldrb	r3, [r3, #6]
 8006438:	461a      	mov	r2, r3
 800643a:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <KeyboardCheck+0x2b4>)
 800643c:	799b      	ldrb	r3, [r3, #6]
 800643e:	2b00      	cmp	r3, #0
 8006440:	bf0c      	ite	eq
 8006442:	2301      	moveq	r3, #1
 8006444:	2300      	movne	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	4013      	ands	r3, r2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <KeyboardCheck+0x298>
 800644e:	4b09      	ldr	r3, [pc, #36]	; (8006474 <KeyboardCheck+0x2b8>)
 8006450:	2201      	movs	r2, #1
 8006452:	719a      	strb	r2, [r3, #6]
	if(KeysRetain.AHH3_Stop & !KeysMirror.AHH3_Stop)	{KeysFlash.AHH3_Stop 	= 1;}
 8006454:	4b02      	ldr	r3, [pc, #8]	; (8006460 <KeyboardCheck+0x2a4>)
 8006456:	79db      	ldrb	r3, [r3, #7]
 8006458:	461a      	mov	r2, r3
 800645a:	e00d      	b.n	8006478 <KeyboardCheck+0x2bc>
 800645c:	40022400 	.word	0x40022400
 8006460:	20000b74 	.word	0x20000b74
 8006464:	40021c00 	.word	0x40021c00
 8006468:	40020800 	.word	0x40020800
 800646c:	40022000 	.word	0x40022000
 8006470:	20000b94 	.word	0x20000b94
 8006474:	20000b84 	.word	0x20000b84
 8006478:	4b67      	ldr	r3, [pc, #412]	; (8006618 <KeyboardCheck+0x45c>)
 800647a:	79db      	ldrb	r3, [r3, #7]
 800647c:	2b00      	cmp	r3, #0
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	4013      	ands	r3, r2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <KeyboardCheck+0x2d6>
 800648c:	4b63      	ldr	r3, [pc, #396]	; (800661c <KeyboardCheck+0x460>)
 800648e:	2201      	movs	r2, #1
 8006490:	71da      	strb	r2, [r3, #7]
	if(KeysRetain.AutoPusk 	& !KeysMirror.AutoPusk)		{KeysFlash.AutoPusk 	= 1;}
 8006492:	4b63      	ldr	r3, [pc, #396]	; (8006620 <KeyboardCheck+0x464>)
 8006494:	7a1b      	ldrb	r3, [r3, #8]
 8006496:	461a      	mov	r2, r3
 8006498:	4b5f      	ldr	r3, [pc, #380]	; (8006618 <KeyboardCheck+0x45c>)
 800649a:	7a1b      	ldrb	r3, [r3, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	bf0c      	ite	eq
 80064a0:	2301      	moveq	r3, #1
 80064a2:	2300      	movne	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <KeyboardCheck+0x2f6>
 80064ac:	4b5b      	ldr	r3, [pc, #364]	; (800661c <KeyboardCheck+0x460>)
 80064ae:	2201      	movs	r2, #1
 80064b0:	721a      	strb	r2, [r3, #8]
	if(KeysRetain.AutoStop 	& !KeysMirror.AutoStop)		{KeysFlash.AutoStop 	= 1;}
 80064b2:	4b5b      	ldr	r3, [pc, #364]	; (8006620 <KeyboardCheck+0x464>)
 80064b4:	7a5b      	ldrb	r3, [r3, #9]
 80064b6:	461a      	mov	r2, r3
 80064b8:	4b57      	ldr	r3, [pc, #348]	; (8006618 <KeyboardCheck+0x45c>)
 80064ba:	7a5b      	ldrb	r3, [r3, #9]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf0c      	ite	eq
 80064c0:	2301      	moveq	r3, #1
 80064c2:	2300      	movne	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <KeyboardCheck+0x316>
 80064cc:	4b53      	ldr	r3, [pc, #332]	; (800661c <KeyboardCheck+0x460>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	725a      	strb	r2, [r3, #9]
	if(KeysRetain.AHH1_Stop & !KeysMirror.AHH1_Stop)	{KeysFlash.AHH1_Stop 	= 1;}
 80064d2:	4b53      	ldr	r3, [pc, #332]	; (8006620 <KeyboardCheck+0x464>)
 80064d4:	7a9b      	ldrb	r3, [r3, #10]
 80064d6:	461a      	mov	r2, r3
 80064d8:	4b4f      	ldr	r3, [pc, #316]	; (8006618 <KeyboardCheck+0x45c>)
 80064da:	7a9b      	ldrb	r3, [r3, #10]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bf0c      	ite	eq
 80064e0:	2301      	moveq	r3, #1
 80064e2:	2300      	movne	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <KeyboardCheck+0x336>
 80064ec:	4b4b      	ldr	r3, [pc, #300]	; (800661c <KeyboardCheck+0x460>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	729a      	strb	r2, [r3, #10]
	if(KeysRetain.AHH2_Stop & !KeysMirror.AHH2_Stop)	{KeysFlash.AHH2_Stop 	= 1;}
 80064f2:	4b4b      	ldr	r3, [pc, #300]	; (8006620 <KeyboardCheck+0x464>)
 80064f4:	7adb      	ldrb	r3, [r3, #11]
 80064f6:	461a      	mov	r2, r3
 80064f8:	4b47      	ldr	r3, [pc, #284]	; (8006618 <KeyboardCheck+0x45c>)
 80064fa:	7adb      	ldrb	r3, [r3, #11]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf0c      	ite	eq
 8006500:	2301      	moveq	r3, #1
 8006502:	2300      	movne	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	4013      	ands	r3, r2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <KeyboardCheck+0x356>
 800650c:	4b43      	ldr	r3, [pc, #268]	; (800661c <KeyboardCheck+0x460>)
 800650e:	2201      	movs	r2, #1
 8006510:	72da      	strb	r2, [r3, #11]
	if(KeysRetain.PressUp 	& !KeysMirror.PressUp)		{KeysFlash.PressUp 		= 1;}
 8006512:	4b43      	ldr	r3, [pc, #268]	; (8006620 <KeyboardCheck+0x464>)
 8006514:	7b1b      	ldrb	r3, [r3, #12]
 8006516:	461a      	mov	r2, r3
 8006518:	4b3f      	ldr	r3, [pc, #252]	; (8006618 <KeyboardCheck+0x45c>)
 800651a:	7b1b      	ldrb	r3, [r3, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	bf0c      	ite	eq
 8006520:	2301      	moveq	r3, #1
 8006522:	2300      	movne	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	4013      	ands	r3, r2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <KeyboardCheck+0x376>
 800652c:	4b3b      	ldr	r3, [pc, #236]	; (800661c <KeyboardCheck+0x460>)
 800652e:	2201      	movs	r2, #1
 8006530:	731a      	strb	r2, [r3, #12]
	if(KeysRetain.AHH3_Pusk & !KeysMirror.AHH3_Pusk)	{KeysFlash.AHH3_Pusk 	= 1;}
 8006532:	4b3b      	ldr	r3, [pc, #236]	; (8006620 <KeyboardCheck+0x464>)
 8006534:	7b5b      	ldrb	r3, [r3, #13]
 8006536:	461a      	mov	r2, r3
 8006538:	4b37      	ldr	r3, [pc, #220]	; (8006618 <KeyboardCheck+0x45c>)
 800653a:	7b5b      	ldrb	r3, [r3, #13]
 800653c:	2b00      	cmp	r3, #0
 800653e:	bf0c      	ite	eq
 8006540:	2301      	moveq	r3, #1
 8006542:	2300      	movne	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	4013      	ands	r3, r2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <KeyboardCheck+0x396>
 800654c:	4b33      	ldr	r3, [pc, #204]	; (800661c <KeyboardCheck+0x460>)
 800654e:	2201      	movs	r2, #1
 8006550:	735a      	strb	r2, [r3, #13]
	if(KeysRetain.AHH2_Pusk & !KeysMirror.AHH2_Pusk)	{KeysFlash.AHH2_Pusk 	= 1;}
 8006552:	4b33      	ldr	r3, [pc, #204]	; (8006620 <KeyboardCheck+0x464>)
 8006554:	7b9b      	ldrb	r3, [r3, #14]
 8006556:	461a      	mov	r2, r3
 8006558:	4b2f      	ldr	r3, [pc, #188]	; (8006618 <KeyboardCheck+0x45c>)
 800655a:	7b9b      	ldrb	r3, [r3, #14]
 800655c:	2b00      	cmp	r3, #0
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	4013      	ands	r3, r2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <KeyboardCheck+0x3b6>
 800656c:	4b2b      	ldr	r3, [pc, #172]	; (800661c <KeyboardCheck+0x460>)
 800656e:	2201      	movs	r2, #1
 8006570:	739a      	strb	r2, [r3, #14]
	if(KeysRetain.AHH1_Pusk & !KeysMirror.AHH1_Pusk)	{KeysFlash.AHH1_Pusk 	= 1;}
 8006572:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <KeyboardCheck+0x464>)
 8006574:	7bdb      	ldrb	r3, [r3, #15]
 8006576:	461a      	mov	r2, r3
 8006578:	4b27      	ldr	r3, [pc, #156]	; (8006618 <KeyboardCheck+0x45c>)
 800657a:	7bdb      	ldrb	r3, [r3, #15]
 800657c:	2b00      	cmp	r3, #0
 800657e:	bf0c      	ite	eq
 8006580:	2301      	moveq	r3, #1
 8006582:	2300      	movne	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	4013      	ands	r3, r2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <KeyboardCheck+0x3d6>
 800658c:	4b23      	ldr	r3, [pc, #140]	; (800661c <KeyboardCheck+0x460>)
 800658e:	2201      	movs	r2, #1
 8006590:	73da      	strb	r2, [r3, #15]

	KeysMirror.ESC 			= KeysRetain.ESC;
 8006592:	4b23      	ldr	r3, [pc, #140]	; (8006620 <KeyboardCheck+0x464>)
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	4b20      	ldr	r3, [pc, #128]	; (8006618 <KeyboardCheck+0x45c>)
 8006598:	701a      	strb	r2, [r3, #0]
	KeysMirror.ENT 			= KeysRetain.ENT;
 800659a:	4b21      	ldr	r3, [pc, #132]	; (8006620 <KeyboardCheck+0x464>)
 800659c:	785a      	ldrb	r2, [r3, #1]
 800659e:	4b1e      	ldr	r3, [pc, #120]	; (8006618 <KeyboardCheck+0x45c>)
 80065a0:	705a      	strb	r2, [r3, #1]
	KeysMirror.Right 		= KeysRetain.Right;
 80065a2:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <KeyboardCheck+0x464>)
 80065a4:	789a      	ldrb	r2, [r3, #2]
 80065a6:	4b1c      	ldr	r3, [pc, #112]	; (8006618 <KeyboardCheck+0x45c>)
 80065a8:	709a      	strb	r2, [r3, #2]
	KeysMirror.Left 		= KeysRetain.Left;
 80065aa:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <KeyboardCheck+0x464>)
 80065ac:	78da      	ldrb	r2, [r3, #3]
 80065ae:	4b1a      	ldr	r3, [pc, #104]	; (8006618 <KeyboardCheck+0x45c>)
 80065b0:	70da      	strb	r2, [r3, #3]
	KeysMirror.Down 		= KeysRetain.Down;
 80065b2:	4b1b      	ldr	r3, [pc, #108]	; (8006620 <KeyboardCheck+0x464>)
 80065b4:	791a      	ldrb	r2, [r3, #4]
 80065b6:	4b18      	ldr	r3, [pc, #96]	; (8006618 <KeyboardCheck+0x45c>)
 80065b8:	711a      	strb	r2, [r3, #4]
	KeysMirror.Up 			= KeysRetain.Up;
 80065ba:	4b19      	ldr	r3, [pc, #100]	; (8006620 <KeyboardCheck+0x464>)
 80065bc:	795a      	ldrb	r2, [r3, #5]
 80065be:	4b16      	ldr	r3, [pc, #88]	; (8006618 <KeyboardCheck+0x45c>)
 80065c0:	715a      	strb	r2, [r3, #5]
	KeysMirror.PressDown 	= KeysRetain.PressDown;
 80065c2:	4b17      	ldr	r3, [pc, #92]	; (8006620 <KeyboardCheck+0x464>)
 80065c4:	799a      	ldrb	r2, [r3, #6]
 80065c6:	4b14      	ldr	r3, [pc, #80]	; (8006618 <KeyboardCheck+0x45c>)
 80065c8:	719a      	strb	r2, [r3, #6]
	KeysMirror.AHH3_Stop 	= KeysRetain.AHH3_Stop;
 80065ca:	4b15      	ldr	r3, [pc, #84]	; (8006620 <KeyboardCheck+0x464>)
 80065cc:	79da      	ldrb	r2, [r3, #7]
 80065ce:	4b12      	ldr	r3, [pc, #72]	; (8006618 <KeyboardCheck+0x45c>)
 80065d0:	71da      	strb	r2, [r3, #7]
	KeysMirror.AutoPusk 	= KeysRetain.AutoPusk;
 80065d2:	4b13      	ldr	r3, [pc, #76]	; (8006620 <KeyboardCheck+0x464>)
 80065d4:	7a1a      	ldrb	r2, [r3, #8]
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <KeyboardCheck+0x45c>)
 80065d8:	721a      	strb	r2, [r3, #8]
	KeysMirror.AutoStop 	= KeysRetain.AutoStop;
 80065da:	4b11      	ldr	r3, [pc, #68]	; (8006620 <KeyboardCheck+0x464>)
 80065dc:	7a5a      	ldrb	r2, [r3, #9]
 80065de:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <KeyboardCheck+0x45c>)
 80065e0:	725a      	strb	r2, [r3, #9]
	KeysMirror.AHH1_Stop 	= KeysRetain.AHH1_Stop;
 80065e2:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <KeyboardCheck+0x464>)
 80065e4:	7a9a      	ldrb	r2, [r3, #10]
 80065e6:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <KeyboardCheck+0x45c>)
 80065e8:	729a      	strb	r2, [r3, #10]
	KeysMirror.AHH2_Stop 	= KeysRetain.AHH2_Stop;
 80065ea:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <KeyboardCheck+0x464>)
 80065ec:	7ada      	ldrb	r2, [r3, #11]
 80065ee:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <KeyboardCheck+0x45c>)
 80065f0:	72da      	strb	r2, [r3, #11]
	KeysMirror.PressUp 		= KeysRetain.PressUp;
 80065f2:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <KeyboardCheck+0x464>)
 80065f4:	7b1a      	ldrb	r2, [r3, #12]
 80065f6:	4b08      	ldr	r3, [pc, #32]	; (8006618 <KeyboardCheck+0x45c>)
 80065f8:	731a      	strb	r2, [r3, #12]
	KeysMirror.AHH3_Pusk 	= KeysRetain.AHH3_Pusk;
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <KeyboardCheck+0x464>)
 80065fc:	7b5a      	ldrb	r2, [r3, #13]
 80065fe:	4b06      	ldr	r3, [pc, #24]	; (8006618 <KeyboardCheck+0x45c>)
 8006600:	735a      	strb	r2, [r3, #13]
	KeysMirror.AHH2_Pusk 	= KeysRetain.AHH2_Pusk;
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <KeyboardCheck+0x464>)
 8006604:	7b9a      	ldrb	r2, [r3, #14]
 8006606:	4b04      	ldr	r3, [pc, #16]	; (8006618 <KeyboardCheck+0x45c>)
 8006608:	739a      	strb	r2, [r3, #14]
	KeysMirror.AHH1_Pusk 	= KeysRetain.AHH1_Pusk;
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <KeyboardCheck+0x464>)
 800660c:	7bda      	ldrb	r2, [r3, #15]
 800660e:	4b02      	ldr	r3, [pc, #8]	; (8006618 <KeyboardCheck+0x45c>)
 8006610:	73da      	strb	r2, [r3, #15]

}
 8006612:	bf00      	nop
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000b94 	.word	0x20000b94
 800661c:	20000b84 	.word	0x20000b84
 8006620:	20000b74 	.word	0x20000b74

08006624 <KeyboardClear>:

void KeyboardClear(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
	KeysFlash.ESC 			= 0;
 8006628:	4b1a      	ldr	r3, [pc, #104]	; (8006694 <KeyboardClear+0x70>)
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
	KeysFlash.ENT 			= 0;
 800662e:	4b19      	ldr	r3, [pc, #100]	; (8006694 <KeyboardClear+0x70>)
 8006630:	2200      	movs	r2, #0
 8006632:	705a      	strb	r2, [r3, #1]
	KeysFlash.Right 		= 0;
 8006634:	4b17      	ldr	r3, [pc, #92]	; (8006694 <KeyboardClear+0x70>)
 8006636:	2200      	movs	r2, #0
 8006638:	709a      	strb	r2, [r3, #2]
	KeysFlash.Left 			= 0;
 800663a:	4b16      	ldr	r3, [pc, #88]	; (8006694 <KeyboardClear+0x70>)
 800663c:	2200      	movs	r2, #0
 800663e:	70da      	strb	r2, [r3, #3]
	KeysFlash.Down 			= 0;
 8006640:	4b14      	ldr	r3, [pc, #80]	; (8006694 <KeyboardClear+0x70>)
 8006642:	2200      	movs	r2, #0
 8006644:	711a      	strb	r2, [r3, #4]
	KeysFlash.Up 			= 0;
 8006646:	4b13      	ldr	r3, [pc, #76]	; (8006694 <KeyboardClear+0x70>)
 8006648:	2200      	movs	r2, #0
 800664a:	715a      	strb	r2, [r3, #5]
	KeysFlash.PressDown 	= 0;
 800664c:	4b11      	ldr	r3, [pc, #68]	; (8006694 <KeyboardClear+0x70>)
 800664e:	2200      	movs	r2, #0
 8006650:	719a      	strb	r2, [r3, #6]
	KeysFlash.AHH3_Stop 	= 0;
 8006652:	4b10      	ldr	r3, [pc, #64]	; (8006694 <KeyboardClear+0x70>)
 8006654:	2200      	movs	r2, #0
 8006656:	71da      	strb	r2, [r3, #7]
	KeysFlash.AutoPusk 		= 0;
 8006658:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <KeyboardClear+0x70>)
 800665a:	2200      	movs	r2, #0
 800665c:	721a      	strb	r2, [r3, #8]
	KeysFlash.AutoStop 		= 0;
 800665e:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <KeyboardClear+0x70>)
 8006660:	2200      	movs	r2, #0
 8006662:	725a      	strb	r2, [r3, #9]
	KeysFlash.AHH1_Stop 	= 0;
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <KeyboardClear+0x70>)
 8006666:	2200      	movs	r2, #0
 8006668:	729a      	strb	r2, [r3, #10]
	KeysFlash.AHH2_Stop 	= 0;
 800666a:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <KeyboardClear+0x70>)
 800666c:	2200      	movs	r2, #0
 800666e:	72da      	strb	r2, [r3, #11]
	KeysFlash.PressUp 		= 0;
 8006670:	4b08      	ldr	r3, [pc, #32]	; (8006694 <KeyboardClear+0x70>)
 8006672:	2200      	movs	r2, #0
 8006674:	731a      	strb	r2, [r3, #12]
	KeysFlash.AHH3_Pusk 	= 0;
 8006676:	4b07      	ldr	r3, [pc, #28]	; (8006694 <KeyboardClear+0x70>)
 8006678:	2200      	movs	r2, #0
 800667a:	735a      	strb	r2, [r3, #13]
	KeysFlash.AHH2_Pusk 	= 0;
 800667c:	4b05      	ldr	r3, [pc, #20]	; (8006694 <KeyboardClear+0x70>)
 800667e:	2200      	movs	r2, #0
 8006680:	739a      	strb	r2, [r3, #14]
	KeysFlash.AHH1_Pusk 	= 0;
 8006682:	4b04      	ldr	r3, [pc, #16]	; (8006694 <KeyboardClear+0x70>)
 8006684:	2200      	movs	r2, #0
 8006686:	73da      	strb	r2, [r3, #15]
}
 8006688:	bf00      	nop
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000b84 	.word	0x20000b84

08006698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800669c:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <SystemInit+0x20>)
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a2:	4a05      	ldr	r2, [pc, #20]	; (80066b8 <SystemInit+0x20>)
 80066a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80066ac:	bf00      	nop
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	e000ed00 	.word	0xe000ed00

080066bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80066bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80066c0:	480d      	ldr	r0, [pc, #52]	; (80066f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80066c2:	490e      	ldr	r1, [pc, #56]	; (80066fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80066c4:	4a0e      	ldr	r2, [pc, #56]	; (8006700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80066c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066c8:	e002      	b.n	80066d0 <LoopCopyDataInit>

080066ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066ce:	3304      	adds	r3, #4

080066d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066d4:	d3f9      	bcc.n	80066ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066d6:	4a0b      	ldr	r2, [pc, #44]	; (8006704 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80066d8:	4c0b      	ldr	r4, [pc, #44]	; (8006708 <LoopFillZerobss+0x26>)
  movs r3, #0
 80066da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066dc:	e001      	b.n	80066e2 <LoopFillZerobss>

080066de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066e0:	3204      	adds	r2, #4

080066e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066e4:	d3fb      	bcc.n	80066de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80066e6:	f7ff ffd7 	bl	8006698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066ea:	f005 fdb7 	bl	800c25c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066ee:	f7fe f941 	bl	8004974 <main>
  bx  lr    
 80066f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80066f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80066f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066fc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8006700:	080128e0 	.word	0x080128e0
  ldr r2, =_sbss
 8006704:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8006708:	20000d08 	.word	0x20000d08

0800670c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800670c:	e7fe      	b.n	800670c <ADC_IRQHandler>

0800670e <DrawChar_16>:
//extern Settings Settings_DB;
extern InterfaceControlDB Control_DB;


void DrawChar_16(uint8_t Char, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint16_t Table[], uint16_t width_char, uint16_t height_char)
{
 800670e:	b590      	push	{r4, r7, lr}
 8006710:	b089      	sub	sp, #36	; 0x24
 8006712:	af00      	add	r7, sp, #0
 8006714:	4604      	mov	r4, r0
 8006716:	4608      	mov	r0, r1
 8006718:	4611      	mov	r1, r2
 800671a:	461a      	mov	r2, r3
 800671c:	4623      	mov	r3, r4
 800671e:	71fb      	strb	r3, [r7, #7]
 8006720:	4603      	mov	r3, r0
 8006722:	80bb      	strh	r3, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	807b      	strh	r3, [r7, #2]
 8006728:	4613      	mov	r3, r2
 800672a:	803b      	strh	r3, [r7, #0]
	uint32_t Color_RGB;
	uint16_t Horizontal_line;
	struct {uint8_t b,g,r;} *vbuf=Video_buffer_pointer;
 800672c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672e:	613b      	str	r3, [r7, #16]

	for(int j=0;j<height_char;j++)
 8006730:	2300      	movs	r3, #0
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	e044      	b.n	80067c0 <DrawChar_16+0xb2>
	{
		Horizontal_line = Table[(Char * height_char) + j];
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800673c:	fb03 f202 	mul.w	r2, r3, r2
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	4413      	add	r3, r2
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006748:	4413      	add	r3, r2
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	83fb      	strh	r3, [r7, #30]
		Horizontal_line = Horizontal_line >> (16 - width_char);
 800674e:	8bfa      	ldrh	r2, [r7, #30]
 8006750:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006754:	f1c3 0310 	rsb	r3, r3, #16
 8006758:	fa42 f303 	asr.w	r3, r2, r3
 800675c:	83fb      	strh	r3, [r7, #30]

		for(int i=width_char;i>0;i--)
 800675e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	e026      	b.n	80067b4 <DrawChar_16+0xa6>
		{

			if(Horizontal_line & 0x1)
 8006766:	8bfb      	ldrh	r3, [r7, #30]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <DrawChar_16+0x68>
			{
				Color_RGB = Symbol_Color;
 8006770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e001      	b.n	800677a <DrawChar_16+0x6c>
			}
			else
			{
				Color_RGB = Font_Color;
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	60fb      	str	r3, [r7, #12]
			}

			memcpy(&vbuf[Coord_X + ((Coord_Y+j) * Resolution_X) + i].b, &Color_RGB, 3);
 800677a:	88ba      	ldrh	r2, [r7, #4]
 800677c:	8879      	ldrh	r1, [r7, #2]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	440b      	add	r3, r1
 8006782:	8839      	ldrh	r1, [r7, #0]
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	441a      	add	r2, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	4413      	add	r3, r2
 800678e:	461a      	mov	r2, r3
 8006790:	4613      	mov	r3, r2
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	4413      	add	r3, r2
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	4618      	mov	r0, r3
 800679c:	f107 030c 	add.w	r3, r7, #12
 80067a0:	2203      	movs	r2, #3
 80067a2:	4619      	mov	r1, r3
 80067a4:	f005 fd7e 	bl	800c2a4 <memcpy>
			Horizontal_line = Horizontal_line >> 1;
 80067a8:	8bfb      	ldrh	r3, [r7, #30]
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	83fb      	strh	r3, [r7, #30]
		for(int i=width_char;i>0;i--)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	dcd5      	bgt.n	8006766 <DrawChar_16+0x58>
	for(int j=0;j<height_char;j++)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	3301      	adds	r3, #1
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	dbb5      	blt.n	8006736 <DrawChar_16+0x28>
		}

	}

}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	3724      	adds	r7, #36	; 0x24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd90      	pop	{r4, r7, pc}

080067d4 <DrawChar_32>:


void DrawChar_32(uint8_t Char, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80067d4:	b590      	push	{r4, r7, lr}
 80067d6:	b089      	sub	sp, #36	; 0x24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4604      	mov	r4, r0
 80067dc:	4608      	mov	r0, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	461a      	mov	r2, r3
 80067e2:	4623      	mov	r3, r4
 80067e4:	71fb      	strb	r3, [r7, #7]
 80067e6:	4603      	mov	r3, r0
 80067e8:	80bb      	strh	r3, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	807b      	strh	r3, [r7, #2]
 80067ee:	4613      	mov	r3, r2
 80067f0:	803b      	strh	r3, [r7, #0]
	uint32_t Color_RGB;
	uint32_t Horizontal_line;
	struct {uint8_t b,g,r;} *vbuf=Video_buffer_pointer;
 80067f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f4:	613b      	str	r3, [r7, #16]
	Char = Char - 32;
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	3b20      	subs	r3, #32
 80067fa:	71fb      	strb	r3, [r7, #7]

	for(int j=0;j<height_char;j++)
 80067fc:	2300      	movs	r3, #0
 80067fe:	61bb      	str	r3, [r7, #24]
 8006800:	e044      	b.n	800688c <DrawChar_32+0xb8>
	{
		Horizontal_line = Table[(Char * height_char) + j];
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006808:	fb03 f202 	mul.w	r2, r3, r2
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006814:	4413      	add	r3, r2
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	61fb      	str	r3, [r7, #28]
		Horizontal_line = Horizontal_line >> (32 - width_char);
 800681a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800681e:	f1c3 0320 	rsb	r3, r3, #32
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
 8006828:	61fb      	str	r3, [r7, #28]

		for(int i=width_char;i>0;i--)
 800682a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	e026      	b.n	8006880 <DrawChar_32+0xac>
		{

			if(Horizontal_line & 0x1)
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <DrawChar_32+0x6e>
			{
				Color_RGB = Symbol_Color;
 800683c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e001      	b.n	8006846 <DrawChar_32+0x72>
			}
			else
			{
				Color_RGB = Font_Color;
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	60fb      	str	r3, [r7, #12]
			}

			memcpy(&vbuf[Coord_X + ((Coord_Y+j) * Resolution_X) + i].b, &Color_RGB, 3);
 8006846:	88ba      	ldrh	r2, [r7, #4]
 8006848:	8879      	ldrh	r1, [r7, #2]
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	440b      	add	r3, r1
 800684e:	8839      	ldrh	r1, [r7, #0]
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	441a      	add	r2, r3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	4413      	add	r3, r2
 800685a:	461a      	mov	r2, r3
 800685c:	4613      	mov	r3, r2
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	4413      	add	r3, r2
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4413      	add	r3, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f107 030c 	add.w	r3, r7, #12
 800686c:	2203      	movs	r2, #3
 800686e:	4619      	mov	r1, r3
 8006870:	f005 fd18 	bl	800c2a4 <memcpy>
			Horizontal_line = Horizontal_line >> 1;
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	61fb      	str	r3, [r7, #28]
		for(int i=width_char;i>0;i--)
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	3b01      	subs	r3, #1
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	dcd5      	bgt.n	8006832 <DrawChar_32+0x5e>
	for(int j=0;j<height_char;j++)
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	3301      	adds	r3, #1
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	429a      	cmp	r2, r3
 8006894:	dbb5      	blt.n	8006802 <DrawChar_32+0x2e>
		}
	}
}
 8006896:	bf00      	nop
 8006898:	bf00      	nop
 800689a:	3724      	adds	r7, #36	; 0x24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd90      	pop	{r4, r7, pc}

080068a0 <DrawString_16>:


void DrawString_16(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80068a0:	b590      	push	{r4, r7, lr}
 80068a2:	b09b      	sub	sp, #108	; 0x6c
 80068a4:	af08      	add	r7, sp, #32
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	4608      	mov	r0, r1
 80068aa:	4611      	mov	r1, r2
 80068ac:	461a      	mov	r2, r3
 80068ae:	4603      	mov	r3, r0
 80068b0:	817b      	strh	r3, [r7, #10]
 80068b2:	460b      	mov	r3, r1
 80068b4:	813b      	strh	r3, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
	char String2[50];
	for(int i=0;i<Len;i++)
 80068ba:	2300      	movs	r3, #0
 80068bc:	647b      	str	r3, [r7, #68]	; 0x44
 80068be:	e034      	b.n	800692a <DrawString_16+0x8a>
	{
	String2[i] = String[i] - 32;
 80068c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	3b20      	subs	r3, #32
 80068ca:	b2d9      	uxtb	r1, r3
 80068cc:	f107 0210 	add.w	r2, r7, #16
 80068d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068d2:	4413      	add	r3, r2
 80068d4:	460a      	mov	r2, r1
 80068d6:	701a      	strb	r2, [r3, #0]
	DrawChar_16(String2[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 80068d8:	f107 0210 	add.w	r2, r7, #16
 80068dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068de:	4413      	add	r3, r2
 80068e0:	7818      	ldrb	r0, [r3, #0]
 80068e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80068ea:	fb12 f303 	smulbb	r3, r2, r3
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	893b      	ldrh	r3, [r7, #8]
 80068f2:	4413      	add	r3, r2
 80068f4:	b299      	uxth	r1, r3
 80068f6:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006900:	9306      	str	r3, [sp, #24]
 8006902:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8006906:	9305      	str	r3, [sp, #20]
 8006908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800690e:	9303      	str	r3, [sp, #12]
 8006910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006912:	9302      	str	r3, [sp, #8]
 8006914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	4623      	mov	r3, r4
 8006920:	f7ff fef5 	bl	800670e <DrawChar_16>
	for(int i=0;i<Len;i++)
 8006924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006926:	3301      	adds	r3, #1
 8006928:	647b      	str	r3, [r7, #68]	; 0x44
 800692a:	897b      	ldrh	r3, [r7, #10]
 800692c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800692e:	429a      	cmp	r2, r3
 8006930:	dbc6      	blt.n	80068c0 <DrawString_16+0x20>
	}
}
 8006932:	bf00      	nop
 8006934:	bf00      	nop
 8006936:	374c      	adds	r7, #76	; 0x4c
 8006938:	46bd      	mov	sp, r7
 800693a:	bd90      	pop	{r4, r7, pc}

0800693c <Centred_DrawString_16>:

void Centred_DrawString_16(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08c      	sub	sp, #48	; 0x30
 8006940:	af08      	add	r7, sp, #32
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	4608      	mov	r0, r1
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	4603      	mov	r3, r0
 800694c:	817b      	strh	r3, [r7, #10]
 800694e:	460b      	mov	r3, r1
 8006950:	813b      	strh	r3, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (height_char / 2);
 8006956:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006958:	085b      	lsrs	r3, r3, #1
 800695a:	b29b      	uxth	r3, r3
 800695c:	88fa      	ldrh	r2, [r7, #6]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	80fb      	strh	r3, [r7, #6]
	Coord_X = Coord_X - ((width_char * Len) / 2);
 8006962:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006964:	897a      	ldrh	r2, [r7, #10]
 8006966:	fb02 f303 	mul.w	r3, r2, r3
 800696a:	0fda      	lsrs	r2, r3, #31
 800696c:	4413      	add	r3, r2
 800696e:	105b      	asrs	r3, r3, #1
 8006970:	425b      	negs	r3, r3
 8006972:	b29a      	uxth	r2, r3
 8006974:	893b      	ldrh	r3, [r7, #8]
 8006976:	4413      	add	r3, r2
 8006978:	813b      	strh	r3, [r7, #8]
	DrawString_16(String, Len, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 800697a:	88f8      	ldrh	r0, [r7, #6]
 800697c:	893a      	ldrh	r2, [r7, #8]
 800697e:	8979      	ldrh	r1, [r7, #10]
 8006980:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006982:	9307      	str	r3, [sp, #28]
 8006984:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006986:	9306      	str	r3, [sp, #24]
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	9305      	str	r3, [sp, #20]
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	9304      	str	r3, [sp, #16]
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	9303      	str	r3, [sp, #12]
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	9302      	str	r3, [sp, #8]
 8006998:	8bbb      	ldrh	r3, [r7, #28]
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	8b3b      	ldrh	r3, [r7, #24]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	4603      	mov	r3, r0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f7ff ff7c 	bl	80068a0 <DrawString_16>
}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <Short_Left_Colored_RU_DrawString_32>:
	Coord_Y = Coord_Y - (27 / 2);
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, BackgroundColor, BasicSymbolColor, RU_18x27_Table, 18, 27);
}

void Short_Left_Colored_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t PageNumber)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08c      	sub	sp, #48	; 0x30
 80069b4:	af08      	add	r7, sp, #32
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	4608      	mov	r0, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	461a      	mov	r2, r3
 80069be:	4603      	mov	r3, r0
 80069c0:	817b      	strh	r3, [r7, #10]
 80069c2:	460b      	mov	r3, r1
 80069c4:	813b      	strh	r3, [r7, #8]
 80069c6:	4613      	mov	r3, r2
 80069c8:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (27 / 2);
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	3b0d      	subs	r3, #13
 80069ce:	80fb      	strh	r3, [r7, #6]
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
 80069d0:	88f8      	ldrh	r0, [r7, #6]
 80069d2:	893a      	ldrh	r2, [r7, #8]
 80069d4:	8979      	ldrh	r1, [r7, #10]
 80069d6:	231b      	movs	r3, #27
 80069d8:	9307      	str	r3, [sp, #28]
 80069da:	2312      	movs	r3, #18
 80069dc:	9306      	str	r3, [sp, #24]
 80069de:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <Short_Left_Colored_RU_DrawString_32+0x5c>)
 80069e0:	9305      	str	r3, [sp, #20]
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	9303      	str	r3, [sp, #12]
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	9302      	str	r3, [sp, #8]
 80069ee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	4603      	mov	r3, r0
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 f807 	bl	8006a10 <RU_DrawString_32>
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	0800dfa0 	.word	0x0800dfa0

08006a10 <RU_DrawString_32>:
	DrawChar_32(String[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
	}
}

void RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8006a10:	b590      	push	{r4, r7, lr}
 8006a12:	b0ab      	sub	sp, #172	; 0xac
 8006a14:	af08      	add	r7, sp, #32
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	4608      	mov	r0, r1
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	817b      	strh	r3, [r7, #10]
 8006a22:	460b      	mov	r3, r1
 8006a24:	813b      	strh	r3, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]

	uint8_t String_OUT[100];
	uint16_t num = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint16_t limit = Len*2;
 8006a30:	897b      	ldrh	r3, [r7, #10]
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	for(int i=0;i<limit;i++)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a3e:	e04a      	b.n	8006ad6 <RU_DrawString_32+0xc6>
	{
		if(String[i]>=208)
 8006a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2bcf      	cmp	r3, #207	; 0xcf
 8006a4c:	d929      	bls.n	8006aa2 <RU_DrawString_32+0x92>
		{
			if(String[i]==208){String_OUT[num] = (String[i+1] - 79);}
 8006a4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2bd0      	cmp	r3, #208	; 0xd0
 8006a5a:	d10e      	bne.n	8006a7a <RU_DrawString_32+0x6a>
 8006a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a60:	3301      	adds	r3, #1
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4413      	add	r3, r2
 8006a66:	781a      	ldrb	r2, [r3, #0]
 8006a68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006a6c:	3a4f      	subs	r2, #79	; 0x4f
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	3388      	adds	r3, #136	; 0x88
 8006a72:	443b      	add	r3, r7
 8006a74:	f803 2c74 	strb.w	r2, [r3, #-116]
 8006a78:	e00d      	b.n	8006a96 <RU_DrawString_32+0x86>
			else{String_OUT[num] = (String[i+1] - 15);}
 8006a7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a7e:	3301      	adds	r3, #1
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	781a      	ldrb	r2, [r3, #0]
 8006a86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006a8a:	3a0f      	subs	r2, #15
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	3388      	adds	r3, #136	; 0x88
 8006a90:	443b      	add	r3, r7
 8006a92:	f803 2c74 	strb.w	r2, [r3, #-116]
			i++;
 8006a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006aa0:	e00f      	b.n	8006ac2 <RU_DrawString_32+0xb2>
		}
		else
		{
			String_OUT[num] = (String[i]);
 8006aa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	441a      	add	r2, r3
 8006aaa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006aae:	7812      	ldrb	r2, [r2, #0]
 8006ab0:	3388      	adds	r3, #136	; 0x88
 8006ab2:	443b      	add	r3, r7
 8006ab4:	f803 2c74 	strb.w	r2, [r3, #-116]
			limit--;
 8006ab8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006abc:	3b01      	subs	r3, #1
 8006abe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		}
		num++;
 8006ac2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	for(int i=0;i<limit;i++)
 8006acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ad6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006ada:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	dbae      	blt.n	8006a40 <RU_DrawString_32+0x30>
	}

	for(int i=num;i<(Len*2);i++){String_OUT[i]=0;}
 8006ae2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ae8:	e008      	b.n	8006afc <RU_DrawString_32+0xec>
 8006aea:	f107 0214 	add.w	r2, r7, #20
 8006aee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006af0:	4413      	add	r3, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006af8:	3301      	adds	r3, #1
 8006afa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006afc:	897b      	ldrh	r3, [r7, #10]
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006b02:	429a      	cmp	r2, r3
 8006b04:	dbf1      	blt.n	8006aea <RU_DrawString_32+0xda>


	for(int i=0;i<Len;i++)
 8006b06:	2300      	movs	r3, #0
 8006b08:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b0a:	e02c      	b.n	8006b66 <RU_DrawString_32+0x156>
	{
		DrawChar_32(String_OUT[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color,
 8006b0c:	f107 0214 	add.w	r2, r7, #20
 8006b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b12:	4413      	add	r3, r2
 8006b14:	7818      	ldrb	r0, [r3, #0]
 8006b16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006b1e:	fb12 f303 	smulbb	r3, r2, r3
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	893b      	ldrh	r3, [r7, #8]
 8006b26:	4413      	add	r3, r2
 8006b28:	b299      	uxth	r1, r3
 8006b2a:	f8b7 4098 	ldrh.w	r4, [r7, #152]	; 0x98
 8006b2e:	88fa      	ldrh	r2, [r7, #6]
 8006b30:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b34:	9306      	str	r3, [sp, #24]
 8006b36:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006b3a:	9305      	str	r3, [sp, #20]
 8006b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b40:	9304      	str	r3, [sp, #16]
 8006b42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b46:	9303      	str	r3, [sp, #12]
 8006b48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b4c:	9302      	str	r3, [sp, #8]
 8006b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	4623      	mov	r3, r4
 8006b5c:	f7ff fe3a 	bl	80067d4 <DrawChar_32>
	for(int i=0;i<Len;i++)
 8006b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b62:	3301      	adds	r3, #1
 8006b64:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b66:	897b      	ldrh	r3, [r7, #10]
 8006b68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	dbce      	blt.n	8006b0c <RU_DrawString_32+0xfc>
				Table, width_char, height_char);
	}
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	378c      	adds	r7, #140	; 0x8c
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd90      	pop	{r4, r7, pc}

08006b78 <Centred_RU_DrawString_32>:

void Centred_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08c      	sub	sp, #48	; 0x30
 8006b7c:	af08      	add	r7, sp, #32
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	4608      	mov	r0, r1
 8006b82:	4611      	mov	r1, r2
 8006b84:	461a      	mov	r2, r3
 8006b86:	4603      	mov	r3, r0
 8006b88:	817b      	strh	r3, [r7, #10]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	813b      	strh	r3, [r7, #8]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (height_char / 2);
 8006b92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	88fa      	ldrh	r2, [r7, #6]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	80fb      	strh	r3, [r7, #6]
	Coord_X = Coord_X - ((width_char * Len) / 2);
 8006b9e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006ba0:	897a      	ldrh	r2, [r7, #10]
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	0fda      	lsrs	r2, r3, #31
 8006ba8:	4413      	add	r3, r2
 8006baa:	105b      	asrs	r3, r3, #1
 8006bac:	425b      	negs	r3, r3
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	893b      	ldrh	r3, [r7, #8]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	813b      	strh	r3, [r7, #8]
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8006bb6:	88f8      	ldrh	r0, [r7, #6]
 8006bb8:	893a      	ldrh	r2, [r7, #8]
 8006bba:	8979      	ldrh	r1, [r7, #10]
 8006bbc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006bbe:	9307      	str	r3, [sp, #28]
 8006bc0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006bc2:	9306      	str	r3, [sp, #24]
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	9305      	str	r3, [sp, #20]
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	9304      	str	r3, [sp, #16]
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	9303      	str	r3, [sp, #12]
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	9302      	str	r3, [sp, #8]
 8006bd4:	8bbb      	ldrh	r3, [r7, #28]
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	8b3b      	ldrh	r3, [r7, #24]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4603      	mov	r3, r0
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f7ff ff16 	bl	8006a10 <RU_DrawString_32>
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <Short_Centred_RU_DrawString_32>:

void Short_Centred_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X,
		uint16_t Coord_Y, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t PageNumber)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08c      	sub	sp, #48	; 0x30
 8006bf0:	af08      	add	r7, sp, #32
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	817b      	strh	r3, [r7, #10]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	813b      	strh	r3, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
	Centred_RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
 8006c06:	88f8      	ldrh	r0, [r7, #6]
 8006c08:	893a      	ldrh	r2, [r7, #8]
 8006c0a:	8979      	ldrh	r1, [r7, #10]
 8006c0c:	231b      	movs	r3, #27
 8006c0e:	9307      	str	r3, [sp, #28]
 8006c10:	2312      	movs	r3, #18
 8006c12:	9306      	str	r3, [sp, #24]
 8006c14:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <Short_Centred_RU_DrawString_32+0x54>)
 8006c16:	9305      	str	r3, [sp, #20]
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	9303      	str	r3, [sp, #12]
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	9302      	str	r3, [sp, #8]
 8006c24:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4603      	mov	r3, r0
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff ffa0 	bl	8006b78 <Centred_RU_DrawString_32>
}
 8006c38:	bf00      	nop
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	0800dfa0 	.word	0x0800dfa0

08006c44 <Centred_DrawNumber_16>:
{
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, VideoBuffer, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
}

void Centred_DrawNumber_16(int16_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8006c44:	b590      	push	{r4, r7, lr}
 8006c46:	b09d      	sub	sp, #116	; 0x74
 8006c48:	af08      	add	r7, sp, #32
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	4611      	mov	r1, r2
 8006c50:	461a      	mov	r2, r3
 8006c52:	4623      	mov	r3, r4
 8006c54:	80fb      	strh	r3, [r7, #6]
 8006c56:	4603      	mov	r3, r0
 8006c58:	80bb      	strh	r3, [r7, #4]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	807b      	strh	r3, [r7, #2]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	803b      	strh	r3, [r7, #0]
	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 8006c62:	2300      	movs	r3, #0
 8006c64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c66:	e008      	b.n	8006c7a <Centred_DrawNumber_16+0x36>
 8006c68:	f107 0208 	add.w	r2, r7, #8
 8006c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6e:	4413      	add	r3, r2
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c76:	3301      	adds	r3, #1
 8006c78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7c:	2b09      	cmp	r3, #9
 8006c7e:	ddf3      	ble.n	8006c68 <Centred_DrawNumber_16+0x24>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	  if(Register < 0)
 8006c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	da06      	bge.n	8006ca2 <Centred_DrawNumber_16+0x5e>
	  {
		  BelowZero = 1;
 8006c94:	2301      	movs	r3, #1
 8006c96:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		  Register = 0 - Register;
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	425b      	negs	r3, r3
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	80fb      	strh	r3, [r7, #6]
	  }

	  if(Comma>5){Comma=5;}
 8006ca2:	88bb      	ldrh	r3, [r7, #4]
 8006ca4:	2b05      	cmp	r3, #5
 8006ca6:	d901      	bls.n	8006cac <Centred_DrawNumber_16+0x68>
 8006ca8:	2305      	movs	r3, #5
 8006caa:	80bb      	strh	r3, [r7, #4]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 8006cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cb0:	f107 0114 	add.w	r1, r7, #20
 8006cb4:	220a      	movs	r2, #10
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f005 fa7d 	bl	800c1b6 <itoa>

	  Cycle_Pointer = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8006cc2:	e004      	b.n	8006cce <Centred_DrawNumber_16+0x8a>
	  {
		  Cycle_Pointer++;
 8006cc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006cc8:	3301      	adds	r3, #1
 8006cca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8006cce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006cd2:	3350      	adds	r3, #80	; 0x50
 8006cd4:	443b      	add	r3, r7
 8006cd6:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f2      	bne.n	8006cc4 <Centred_DrawNumber_16+0x80>
	  }

	  TemporaryLenPointer = Numbers;
 8006cde:	887b      	ldrh	r3, [r7, #2]
 8006ce0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  for(int i=TemporaryLenPointer;i;i--)
 8006ce4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cea:	e00f      	b.n	8006d0c <Centred_DrawNumber_16+0xc8>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 8006cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	3350      	adds	r3, #80	; 0x50
 8006cf2:	443b      	add	r3, r7
 8006cf4:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8006cf8:	f803 2c48 	strb.w	r2, [r3, #-72]
		  TemporaryLenPointer--;
 8006cfc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006d00:	3b01      	subs	r3, #1
 8006d02:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  for(int i=TemporaryLenPointer;i;i--)
 8006d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1ec      	bne.n	8006cec <Centred_DrawNumber_16+0xa8>
	  }


	  if(Comma>0)
 8006d12:	88bb      	ldrh	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d06b      	beq.n	8006df0 <Centred_DrawNumber_16+0x1ac>
	  {
		  if(Comma>=Cycle_Pointer)
 8006d18:	88ba      	ldrh	r2, [r7, #4]
 8006d1a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d338      	bcc.n	8006d94 <Centred_DrawNumber_16+0x150>
		  {
			  Final_Len = Comma + 2;
 8006d22:	88bb      	ldrh	r3, [r7, #4]
 8006d24:	3302      	adds	r3, #2
 8006d26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			  int8_t temp = Cycle_Pointer;
 8006d2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  for(int i=(Final_Len-1);i>=0;i--)
 8006d32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d36:	3b01      	subs	r3, #1
 8006d38:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d3a:	e020      	b.n	8006d7e <Centred_DrawNumber_16+0x13a>
			  {
				  if(temp)
 8006d3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d013      	beq.n	8006d6c <Centred_DrawNumber_16+0x128>
				  {
					  temp--;
 8006d44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					  String[i] = String[temp];
 8006d52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d56:	3350      	adds	r3, #80	; 0x50
 8006d58:	443b      	add	r3, r7
 8006d5a:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8006d5e:	f107 0214 	add.w	r2, r7, #20
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	4413      	add	r3, r2
 8006d66:	460a      	mov	r2, r1
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	e005      	b.n	8006d78 <Centred_DrawNumber_16+0x134>
				  }
				  else
				  {
					  String[i] = '0';
 8006d6c:	f107 0214 	add.w	r2, r7, #20
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	4413      	add	r3, r2
 8006d74:	2230      	movs	r2, #48	; 0x30
 8006d76:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	dadb      	bge.n	8006d3c <Centred_DrawNumber_16+0xf8>
				  }
			  }
			  String[1] = ',';
 8006d84:	232c      	movs	r3, #44	; 0x2c
 8006d86:	757b      	strb	r3, [r7, #21]
			  Cycle_Pointer--;
 8006d88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006d92:	e031      	b.n	8006df8 <Centred_DrawNumber_16+0x1b4>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 8006d94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d98:	3301      	adds	r3, #1
 8006d9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			  for(int i=(Final_Len-1);i>=0;i--)
 8006d9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006da2:	3b01      	subs	r3, #1
 8006da4:	637b      	str	r3, [r7, #52]	; 0x34
 8006da6:	e015      	b.n	8006dd4 <Centred_DrawNumber_16+0x190>
			  {
				  if( i > (Final_Len - Comma - 1))
 8006da8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006dac:	88bb      	ldrh	r3, [r7, #4]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006db2:	429a      	cmp	r2, r3
 8006db4:	db0b      	blt.n	8006dce <Centred_DrawNumber_16+0x18a>
				  {
					  String[i] = String[i-1];
 8006db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db8:	3b01      	subs	r3, #1
 8006dba:	3350      	adds	r3, #80	; 0x50
 8006dbc:	443b      	add	r3, r7
 8006dbe:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8006dc2:	f107 0214 	add.w	r2, r7, #20
 8006dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc8:	4413      	add	r3, r2
 8006dca:	460a      	mov	r2, r1
 8006dcc:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8006dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dae6      	bge.n	8006da8 <Centred_DrawNumber_16+0x164>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 8006dda:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006dde:	88bb      	ldrh	r3, [r7, #4]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	3350      	adds	r3, #80	; 0x50
 8006de6:	443b      	add	r3, r7
 8006de8:	222c      	movs	r2, #44	; 0x2c
 8006dea:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8006dee:	e003      	b.n	8006df8 <Centred_DrawNumber_16+0x1b4>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 8006df0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006df4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46


	  if(BelowZero)
 8006df8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01c      	beq.n	8006e3a <Centred_DrawNumber_16+0x1f6>
	  {
		  for(int i=Final_Len;i>=0;i--)
 8006e00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
 8006e06:	e00e      	b.n	8006e26 <Centred_DrawNumber_16+0x1e2>
		  {
			  String[i] = String[i - 1];
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	3350      	adds	r3, #80	; 0x50
 8006e0e:	443b      	add	r3, r7
 8006e10:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8006e14:	f107 0214 	add.w	r2, r7, #20
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	4413      	add	r3, r2
 8006e1c:	460a      	mov	r2, r1
 8006e1e:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	3b01      	subs	r3, #1
 8006e24:	633b      	str	r3, [r7, #48]	; 0x30
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	daed      	bge.n	8006e08 <Centred_DrawNumber_16+0x1c4>
		  }
		  String[0] = '-';
 8006e2c:	232d      	movs	r3, #45	; 0x2d
 8006e2e:	753b      	strb	r3, [r7, #20]
		  Final_Len++;
 8006e30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e34:	3301      	adds	r3, #1
 8006e36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  }

		uint8_t StandartLen = Numbers;
 8006e3a:	887b      	ldrh	r3, [r7, #2]
 8006e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t IschLen = Final_Len - 1;
 8006e40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(Final_Len < StandartLen)
 8006e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d236      	bcs.n	8006ec8 <Centred_DrawNumber_16+0x284>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 8006e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e62:	e02e      	b.n	8006ec2 <Centred_DrawNumber_16+0x27e>
			{
				if(IschLen)
 8006e64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d011      	beq.n	8006e90 <Centred_DrawNumber_16+0x24c>
				{
					String[i] = String[IschLen];
 8006e6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e70:	3350      	adds	r3, #80	; 0x50
 8006e72:	443b      	add	r3, r7
 8006e74:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8006e78:	f107 0214 	add.w	r2, r7, #20
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	4413      	add	r3, r2
 8006e80:	460a      	mov	r2, r1
 8006e82:	701a      	strb	r2, [r3, #0]
					IschLen--;
 8006e84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006e8e:	e015      	b.n	8006ebc <Centred_DrawNumber_16+0x278>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 8006e90:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006e94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d107      	bne.n	8006eb0 <Centred_DrawNumber_16+0x26c>
					{
						String[i] = String[0];
 8006ea0:	7d39      	ldrb	r1, [r7, #20]
 8006ea2:	f107 0214 	add.w	r2, r7, #20
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	4413      	add	r3, r2
 8006eaa:	460a      	mov	r2, r1
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	e005      	b.n	8006ebc <Centred_DrawNumber_16+0x278>
					}
					else
					{
						String[i] = ' ';
 8006eb0:	f107 0214 	add.w	r2, r7, #20
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	4413      	add	r3, r2
 8006eb8:	2220      	movs	r2, #32
 8006eba:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dacd      	bge.n	8006e64 <Centred_DrawNumber_16+0x220>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 8006ec8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006ecc:	085b      	lsrs	r3, r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ed4:	4413      	add	r3, r2
 8006ed6:	843b      	strh	r3, [r7, #32]
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 8006ed8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8006edc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006ee0:	fb02 f303 	mul.w	r3, r2, r3
 8006ee4:	0fda      	lsrs	r2, r3, #31
 8006ee6:	4413      	add	r3, r2
 8006ee8:	105b      	asrs	r3, r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8006ef0:	4413      	add	r3, r2
 8006ef2:	83fb      	strh	r3, [r7, #30]

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 8006ef4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	da01      	bge.n	8006f00 <Centred_DrawNumber_16+0x2bc>
 8006efc:	2300      	movs	r3, #0
 8006efe:	803b      	strh	r3, [r7, #0]

		for(int i=0;i<Numbers;i++)
 8006f00:	2300      	movs	r3, #0
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
 8006f04:	e095      	b.n	8007032 <Centred_DrawNumber_16+0x3ee>
		{
			if(Pointer_Razr == RazrPointerArray[i])
 8006f06:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f0a:	f107 0108 	add.w	r1, r7, #8
 8006f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f10:	440a      	add	r2, r1
 8006f12:	7812      	ldrb	r2, [r2, #0]
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d147      	bne.n	8006fa8 <Centred_DrawNumber_16+0x364>
			{
				if(Pointer_Razr)
 8006f18:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8085 	beq.w	800702c <Centred_DrawNumber_16+0x3e8>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8006f22:	4b58      	ldr	r3, [pc, #352]	; (8007084 <Centred_DrawNumber_16+0x440>)
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	3301      	adds	r3, #1
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8006f30:	fb12 f303 	smulbb	r3, r2, r3
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	8bfa      	ldrh	r2, [r7, #30]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	b299      	uxth	r1, r3
 8006f3c:	8c3b      	ldrh	r3, [r7, #32]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8006f46:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006f4a:	9303      	str	r3, [sp, #12]
 8006f4c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006f50:	9302      	str	r3, [sp, #8]
 8006f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	2304      	movs	r3, #4
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	4623      	mov	r3, r4
 8006f5c:	f000 fea0 	bl	8007ca0 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8006f60:	4b48      	ldr	r3, [pc, #288]	; (8007084 <Centred_DrawNumber_16+0x440>)
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	3301      	adds	r3, #1
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8006f6e:	fb12 f303 	smulbb	r3, r2, r3
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	8bfa      	ldrh	r2, [r7, #30]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	b299      	uxth	r1, r3
 8006f7a:	8c3a      	ldrh	r2, [r7, #32]
 8006f7c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b04      	subs	r3, #4
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8006f8c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006f90:	9303      	str	r3, [sp, #12]
 8006f92:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006f96:	9302      	str	r3, [sp, #8]
 8006f98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	2304      	movs	r3, #4
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	4623      	mov	r3, r4
 8006fa2:	f000 fe7d 	bl	8007ca0 <Draw_Rectangle>
 8006fa6:	e041      	b.n	800702c <Centred_DrawNumber_16+0x3e8>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8006fa8:	4b37      	ldr	r3, [pc, #220]	; (8007088 <Centred_DrawNumber_16+0x444>)
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	3301      	adds	r3, #1
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8006fb6:	fb12 f303 	smulbb	r3, r2, r3
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8bfa      	ldrh	r2, [r7, #30]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	b299      	uxth	r1, r3
 8006fc2:	8c3b      	ldrh	r3, [r7, #32]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8006fcc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006fd0:	9303      	str	r3, [sp, #12]
 8006fd2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006fd6:	9302      	str	r3, [sp, #8]
 8006fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	2304      	movs	r3, #4
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	f000 fe5d 	bl	8007ca0 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8006fe6:	4b28      	ldr	r3, [pc, #160]	; (8007088 <Centred_DrawNumber_16+0x444>)
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	3301      	adds	r3, #1
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8006ff4:	fb12 f303 	smulbb	r3, r2, r3
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	8bfa      	ldrh	r2, [r7, #30]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	b299      	uxth	r1, r3
 8007000:	8c3a      	ldrh	r2, [r7, #32]
 8007002:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b04      	subs	r3, #4
 800700c:	b29a      	uxth	r2, r3
 800700e:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8007012:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007016:	9303      	str	r3, [sp, #12]
 8007018:	f44f 7348 	mov.w	r3, #800	; 0x320
 800701c:	9302      	str	r3, [sp, #8]
 800701e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007020:	9301      	str	r3, [sp, #4]
 8007022:	2304      	movs	r3, #4
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	4623      	mov	r3, r4
 8007028:	f000 fe3a 	bl	8007ca0 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	3301      	adds	r3, #1
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
 8007032:	887b      	ldrh	r3, [r7, #2]
 8007034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007036:	429a      	cmp	r2, r3
 8007038:	f6ff af65 	blt.w	8006f06 <Centred_DrawNumber_16+0x2c2>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 800703c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007040:	b299      	uxth	r1, r3
 8007042:	f8b7 4064 	ldrh.w	r4, [r7, #100]	; 0x64
 8007046:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 800704a:	f107 0014 	add.w	r0, r7, #20
 800704e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007052:	9307      	str	r3, [sp, #28]
 8007054:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8007058:	9306      	str	r3, [sp, #24]
 800705a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800705c:	9305      	str	r3, [sp, #20]
 800705e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007060:	9304      	str	r3, [sp, #16]
 8007062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007064:	9303      	str	r3, [sp, #12]
 8007066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007068:	9302      	str	r3, [sp, #8]
 800706a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	4623      	mov	r3, r4
 8007078:	f7ff fc60 	bl	800693c <Centred_DrawString_16>
}
 800707c:	bf00      	nop
 800707e:	3754      	adds	r7, #84	; 0x54
 8007080:	46bd      	mov	sp, r7
 8007082:	bd90      	pop	{r4, r7, pc}
 8007084:	20000014 	.word	0x20000014
 8007088:	20000008 	.word	0x20000008

0800708c <Centred_DrawNumber_16_32bit>:

void Centred_DrawNumber_16_32bit(int32_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b09f      	sub	sp, #124	; 0x7c
 8007090:	af08      	add	r7, sp, #32
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	4608      	mov	r0, r1
 8007096:	4611      	mov	r1, r2
 8007098:	461a      	mov	r2, r3
 800709a:	4603      	mov	r3, r0
 800709c:	817b      	strh	r3, [r7, #10]
 800709e:	460b      	mov	r3, r1
 80070a0:	813b      	strh	r3, [r7, #8]
 80070a2:	4613      	mov	r3, r2
 80070a4:	80fb      	strh	r3, [r7, #6]

	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 80070a6:	2300      	movs	r3, #0
 80070a8:	657b      	str	r3, [r7, #84]	; 0x54
 80070aa:	e008      	b.n	80070be <Centred_DrawNumber_16_32bit+0x32>
 80070ac:	f107 0210 	add.w	r2, r7, #16
 80070b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070b2:	4413      	add	r3, r2
 80070b4:	2200      	movs	r2, #0
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ba:	3301      	adds	r3, #1
 80070bc:	657b      	str	r3, [r7, #84]	; 0x54
 80070be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070c0:	2b09      	cmp	r3, #9
 80070c2:	ddf3      	ble.n	80070ac <Centred_DrawNumber_16_32bit+0x20>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d




	  if(Register < 0)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da05      	bge.n	80070e2 <Centred_DrawNumber_16_32bit+0x56>
	  {
		  BelowZero = 1;
 80070d6:	2301      	movs	r3, #1
 80070d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		  Register = 0 - Register;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	425b      	negs	r3, r3
 80070e0:	60fb      	str	r3, [r7, #12]
	  }

	  if(Comma>5){Comma=5;}
 80070e2:	897b      	ldrh	r3, [r7, #10]
 80070e4:	2b05      	cmp	r3, #5
 80070e6:	d901      	bls.n	80070ec <Centred_DrawNumber_16_32bit+0x60>
 80070e8:	2305      	movs	r3, #5
 80070ea:	817b      	strh	r3, [r7, #10]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 80070ec:	f107 031c 	add.w	r3, r7, #28
 80070f0:	220a      	movs	r2, #10
 80070f2:	4619      	mov	r1, r3
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f005 f85e 	bl	800c1b6 <itoa>

	  Cycle_Pointer = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8007100:	e004      	b.n	800710c <Centred_DrawNumber_16_32bit+0x80>
	  {
		  Cycle_Pointer++;
 8007102:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007106:	3301      	adds	r3, #1
 8007108:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 800710c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007110:	3358      	adds	r3, #88	; 0x58
 8007112:	443b      	add	r3, r7
 8007114:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1f2      	bne.n	8007102 <Centred_DrawNumber_16_32bit+0x76>
	  }

	  TemporaryLenPointer = Numbers;
 800711c:	893b      	ldrh	r3, [r7, #8]
 800711e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  for(int i=TemporaryLenPointer;i;i--)
 8007122:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007126:	64bb      	str	r3, [r7, #72]	; 0x48
 8007128:	e00f      	b.n	800714a <Centred_DrawNumber_16_32bit+0xbe>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 800712a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800712c:	3b01      	subs	r3, #1
 800712e:	3358      	adds	r3, #88	; 0x58
 8007130:	443b      	add	r3, r7
 8007132:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8007136:	f803 2c48 	strb.w	r2, [r3, #-72]
		  TemporaryLenPointer--;
 800713a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800713e:	3b01      	subs	r3, #1
 8007140:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  for(int i=TemporaryLenPointer;i;i--)
 8007144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007146:	3b01      	subs	r3, #1
 8007148:	64bb      	str	r3, [r7, #72]	; 0x48
 800714a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1ec      	bne.n	800712a <Centred_DrawNumber_16_32bit+0x9e>
	  }


	  if(Comma>0)
 8007150:	897b      	ldrh	r3, [r7, #10]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d06b      	beq.n	800722e <Centred_DrawNumber_16_32bit+0x1a2>
	  {
		  if(Comma>=Cycle_Pointer)
 8007156:	897a      	ldrh	r2, [r7, #10]
 8007158:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800715c:	429a      	cmp	r2, r3
 800715e:	d338      	bcc.n	80071d2 <Centred_DrawNumber_16_32bit+0x146>
		  {
			  Final_Len = Comma + 2;
 8007160:	897b      	ldrh	r3, [r7, #10]
 8007162:	3302      	adds	r3, #2
 8007164:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			  int8_t temp = Cycle_Pointer;
 8007168:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800716c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  for(int i=(Final_Len-1);i>=0;i--)
 8007170:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007174:	3b01      	subs	r3, #1
 8007176:	643b      	str	r3, [r7, #64]	; 0x40
 8007178:	e020      	b.n	80071bc <Centred_DrawNumber_16_32bit+0x130>
			  {
				  if(temp)
 800717a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800717e:	2b00      	cmp	r3, #0
 8007180:	d013      	beq.n	80071aa <Centred_DrawNumber_16_32bit+0x11e>
				  {
					  temp--;
 8007182:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007186:	b2db      	uxtb	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  String[i] = String[temp];
 8007190:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007194:	3358      	adds	r3, #88	; 0x58
 8007196:	443b      	add	r3, r7
 8007198:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 800719c:	f107 021c 	add.w	r2, r7, #28
 80071a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a2:	4413      	add	r3, r2
 80071a4:	460a      	mov	r2, r1
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	e005      	b.n	80071b6 <Centred_DrawNumber_16_32bit+0x12a>
				  }
				  else
				  {
					  String[i] = '0';
 80071aa:	f107 021c 	add.w	r2, r7, #28
 80071ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b0:	4413      	add	r3, r2
 80071b2:	2230      	movs	r2, #48	; 0x30
 80071b4:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 80071b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b8:	3b01      	subs	r3, #1
 80071ba:	643b      	str	r3, [r7, #64]	; 0x40
 80071bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	dadb      	bge.n	800717a <Centred_DrawNumber_16_32bit+0xee>
				  }
			  }
			  String[1] = ',';
 80071c2:	232c      	movs	r3, #44	; 0x2c
 80071c4:	777b      	strb	r3, [r7, #29]
			  Cycle_Pointer--;
 80071c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80071ca:	3b01      	subs	r3, #1
 80071cc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80071d0:	e031      	b.n	8007236 <Centred_DrawNumber_16_32bit+0x1aa>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 80071d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80071d6:	3301      	adds	r3, #1
 80071d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			  for(int i=(Final_Len-1);i>=0;i--)
 80071dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071e0:	3b01      	subs	r3, #1
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e4:	e015      	b.n	8007212 <Centred_DrawNumber_16_32bit+0x186>
			  {
				  if( i > (Final_Len - Comma - 1))
 80071e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80071ea:	897b      	ldrh	r3, [r7, #10]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071f0:	429a      	cmp	r2, r3
 80071f2:	db0b      	blt.n	800720c <Centred_DrawNumber_16_32bit+0x180>
				  {
					  String[i] = String[i-1];
 80071f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f6:	3b01      	subs	r3, #1
 80071f8:	3358      	adds	r3, #88	; 0x58
 80071fa:	443b      	add	r3, r7
 80071fc:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8007200:	f107 021c 	add.w	r2, r7, #28
 8007204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007206:	4413      	add	r3, r2
 8007208:	460a      	mov	r2, r1
 800720a:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 800720c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720e:	3b01      	subs	r3, #1
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007214:	2b00      	cmp	r3, #0
 8007216:	dae6      	bge.n	80071e6 <Centred_DrawNumber_16_32bit+0x15a>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 8007218:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800721c:	897b      	ldrh	r3, [r7, #10]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	3358      	adds	r3, #88	; 0x58
 8007224:	443b      	add	r3, r7
 8007226:	222c      	movs	r2, #44	; 0x2c
 8007228:	f803 2c3c 	strb.w	r2, [r3, #-60]
 800722c:	e003      	b.n	8007236 <Centred_DrawNumber_16_32bit+0x1aa>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 800722e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007232:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e


	  if(BelowZero)
 8007236:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800723a:	2b00      	cmp	r3, #0
 800723c:	d01c      	beq.n	8007278 <Centred_DrawNumber_16_32bit+0x1ec>
	  {
		  for(int i=Final_Len;i>=0;i--)
 800723e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007242:	63bb      	str	r3, [r7, #56]	; 0x38
 8007244:	e00e      	b.n	8007264 <Centred_DrawNumber_16_32bit+0x1d8>
		  {
			  String[i] = String[i - 1];
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	3b01      	subs	r3, #1
 800724a:	3358      	adds	r3, #88	; 0x58
 800724c:	443b      	add	r3, r7
 800724e:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8007252:	f107 021c 	add.w	r2, r7, #28
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	4413      	add	r3, r2
 800725a:	460a      	mov	r2, r1
 800725c:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	3b01      	subs	r3, #1
 8007262:	63bb      	str	r3, [r7, #56]	; 0x38
 8007264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007266:	2b00      	cmp	r3, #0
 8007268:	daed      	bge.n	8007246 <Centred_DrawNumber_16_32bit+0x1ba>
		  }
		  String[0] = '-';
 800726a:	232d      	movs	r3, #45	; 0x2d
 800726c:	773b      	strb	r3, [r7, #28]
		  Final_Len++;
 800726e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007272:	3301      	adds	r3, #1
 8007274:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  }

		uint8_t StandartLen = Numbers;
 8007278:	893b      	ldrh	r3, [r7, #8]
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		uint8_t IschLen = Final_Len - 1;
 800727e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007282:	b2db      	uxtb	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(Final_Len < StandartLen)
 800728a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800728e:	b29b      	uxth	r3, r3
 8007290:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007294:	429a      	cmp	r2, r3
 8007296:	d236      	bcs.n	8007306 <Centred_DrawNumber_16_32bit+0x27a>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 8007298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800729c:	3b01      	subs	r3, #1
 800729e:	633b      	str	r3, [r7, #48]	; 0x30
 80072a0:	e02e      	b.n	8007300 <Centred_DrawNumber_16_32bit+0x274>
			{
				if(IschLen)
 80072a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d011      	beq.n	80072ce <Centred_DrawNumber_16_32bit+0x242>
				{
					String[i] = String[IschLen];
 80072aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072ae:	3358      	adds	r3, #88	; 0x58
 80072b0:	443b      	add	r3, r7
 80072b2:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 80072b6:	f107 021c 	add.w	r2, r7, #28
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	4413      	add	r3, r2
 80072be:	460a      	mov	r2, r1
 80072c0:	701a      	strb	r2, [r3, #0]
					IschLen--;
 80072c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072c6:	3b01      	subs	r3, #1
 80072c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80072cc:	e015      	b.n	80072fa <Centred_DrawNumber_16_32bit+0x26e>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 80072ce:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80072d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072da:	429a      	cmp	r2, r3
 80072dc:	d107      	bne.n	80072ee <Centred_DrawNumber_16_32bit+0x262>
					{
						String[i] = String[0];
 80072de:	7f39      	ldrb	r1, [r7, #28]
 80072e0:	f107 021c 	add.w	r2, r7, #28
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	4413      	add	r3, r2
 80072e8:	460a      	mov	r2, r1
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e005      	b.n	80072fa <Centred_DrawNumber_16_32bit+0x26e>
					}
					else
					{
						String[i] = ' ';
 80072ee:	f107 021c 	add.w	r2, r7, #28
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	4413      	add	r3, r2
 80072f6:	2220      	movs	r2, #32
 80072f8:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	3b01      	subs	r3, #1
 80072fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	2b00      	cmp	r3, #0
 8007304:	dacd      	bge.n	80072a2 <Centred_DrawNumber_16_32bit+0x216>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 8007306:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800730a:	085b      	lsrs	r3, r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007312:	4413      	add	r3, r2
 8007314:	853b      	strh	r3, [r7, #40]	; 0x28
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 8007316:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800731a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800731e:	fb02 f303 	mul.w	r3, r2, r3
 8007322:	0fda      	lsrs	r2, r3, #31
 8007324:	4413      	add	r3, r2
 8007326:	105b      	asrs	r3, r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800732e:	4413      	add	r3, r2
 8007330:	84fb      	strh	r3, [r7, #38]	; 0x26

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 8007332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007336:	2b00      	cmp	r3, #0
 8007338:	da01      	bge.n	800733e <Centred_DrawNumber_16_32bit+0x2b2>
 800733a:	2300      	movs	r3, #0
 800733c:	80fb      	strh	r3, [r7, #6]

		for(int i=0;i<Numbers;i++)
 800733e:	2300      	movs	r3, #0
 8007340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007342:	e0a4      	b.n	800748e <Centred_DrawNumber_16_32bit+0x402>
		{
			if((Pointer_Razr == RazrPointerArray[i]) & (Font_Color != BackgroundColor))
 8007344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007348:	f107 0110 	add.w	r1, r7, #16
 800734c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800734e:	440a      	add	r2, r1
 8007350:	7812      	ldrb	r2, [r2, #0]
 8007352:	4293      	cmp	r3, r2
 8007354:	bf0c      	ite	eq
 8007356:	2301      	moveq	r3, #1
 8007358:	2300      	movne	r3, #0
 800735a:	b2da      	uxtb	r2, r3
 800735c:	4b61      	ldr	r3, [pc, #388]	; (80074e4 <Centred_DrawNumber_16_32bit+0x458>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007362:	4299      	cmp	r1, r3
 8007364:	bf14      	ite	ne
 8007366:	2301      	movne	r3, #1
 8007368:	2300      	moveq	r3, #0
 800736a:	b2db      	uxtb	r3, r3
 800736c:	4013      	ands	r3, r2
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d047      	beq.n	8007404 <Centred_DrawNumber_16_32bit+0x378>
			{
				if(Pointer_Razr)
 8007374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8085 	beq.w	8007488 <Centred_DrawNumber_16_32bit+0x3fc>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 800737e:	4b5a      	ldr	r3, [pc, #360]	; (80074e8 <Centred_DrawNumber_16_32bit+0x45c>)
 8007380:	6818      	ldr	r0, [r3, #0]
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	3301      	adds	r3, #1
 8007386:	b29b      	uxth	r3, r3
 8007388:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800738c:	fb12 f303 	smulbb	r3, r2, r3
 8007390:	b29b      	uxth	r3, r3
 8007392:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	b299      	uxth	r1, r3
 8007398:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800739a:	3301      	adds	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 80073a2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80073a6:	9303      	str	r3, [sp, #12]
 80073a8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80073ac:	9302      	str	r3, [sp, #8]
 80073ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	2304      	movs	r3, #4
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4623      	mov	r3, r4
 80073b8:	f000 fc72 	bl	8007ca0 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 80073bc:	4b4a      	ldr	r3, [pc, #296]	; (80074e8 <Centred_DrawNumber_16_32bit+0x45c>)
 80073be:	6818      	ldr	r0, [r3, #0]
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	3301      	adds	r3, #1
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80073ca:	fb12 f303 	smulbb	r3, r2, r3
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	b299      	uxth	r1, r3
 80073d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80073d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b04      	subs	r3, #4
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 80073e8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80073ec:	9303      	str	r3, [sp, #12]
 80073ee:	f44f 7348 	mov.w	r3, #800	; 0x320
 80073f2:	9302      	str	r3, [sp, #8]
 80073f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	2304      	movs	r3, #4
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	4623      	mov	r3, r4
 80073fe:	f000 fc4f 	bl	8007ca0 <Draw_Rectangle>
 8007402:	e041      	b.n	8007488 <Centred_DrawNumber_16_32bit+0x3fc>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8007404:	4b37      	ldr	r3, [pc, #220]	; (80074e4 <Centred_DrawNumber_16_32bit+0x458>)
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	3301      	adds	r3, #1
 800740c:	b29b      	uxth	r3, r3
 800740e:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8007412:	fb12 f303 	smulbb	r3, r2, r3
 8007416:	b29b      	uxth	r3, r3
 8007418:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	b299      	uxth	r1, r3
 800741e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007420:	3301      	adds	r3, #1
 8007422:	b29a      	uxth	r2, r3
 8007424:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 8007428:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800742c:	9303      	str	r3, [sp, #12]
 800742e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007432:	9302      	str	r3, [sp, #8]
 8007434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	2304      	movs	r3, #4
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	4623      	mov	r3, r4
 800743e:	f000 fc2f 	bl	8007ca0 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8007442:	4b28      	ldr	r3, [pc, #160]	; (80074e4 <Centred_DrawNumber_16_32bit+0x458>)
 8007444:	6818      	ldr	r0, [r3, #0]
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	3301      	adds	r3, #1
 800744a:	b29b      	uxth	r3, r3
 800744c:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8007450:	fb12 f303 	smulbb	r3, r2, r3
 8007454:	b29b      	uxth	r3, r3
 8007456:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	b299      	uxth	r1, r3
 800745c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800745e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b04      	subs	r3, #4
 8007468:	b29a      	uxth	r2, r3
 800746a:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 800746e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007472:	9303      	str	r3, [sp, #12]
 8007474:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007478:	9302      	str	r3, [sp, #8]
 800747a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	2304      	movs	r3, #4
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	4623      	mov	r3, r4
 8007484:	f000 fc0c 	bl	8007ca0 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	3301      	adds	r3, #1
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800748e:	893b      	ldrh	r3, [r7, #8]
 8007490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007492:	429a      	cmp	r2, r3
 8007494:	f6ff af56 	blt.w	8007344 <Centred_DrawNumber_16_32bit+0x2b8>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8007498:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800749c:	b299      	uxth	r1, r3
 800749e:	f8b7 406c 	ldrh.w	r4, [r7, #108]	; 0x6c
 80074a2:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80074a6:	f107 001c 	add.w	r0, r7, #28
 80074aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80074ae:	9307      	str	r3, [sp, #28]
 80074b0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80074b4:	9306      	str	r3, [sp, #24]
 80074b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074ba:	9305      	str	r3, [sp, #20]
 80074bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074c0:	9304      	str	r3, [sp, #16]
 80074c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074c4:	9303      	str	r3, [sp, #12]
 80074c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c8:	9302      	str	r3, [sp, #8]
 80074ca:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	4623      	mov	r3, r4
 80074d8:	f7ff fa30 	bl	800693c <Centred_DrawString_16>
}
 80074dc:	bf00      	nop
 80074de:	375c      	adds	r7, #92	; 0x5c
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd90      	pop	{r4, r7, pc}
 80074e4:	20000008 	.word	0x20000008
 80074e8:	20000014 	.word	0x20000014

080074ec <Centred_DrawNumber_16_32bit_controled>:


void Centred_DrawNumber_16_32bit_controled(uint32_t ValPointer, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, int32_t Max, int32_t Min, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80074ec:	b590      	push	{r4, r7, lr}
 80074ee:	b0a3      	sub	sp, #140	; 0x8c
 80074f0:	af08      	add	r7, sp, #32
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	4608      	mov	r0, r1
 80074f6:	4611      	mov	r1, r2
 80074f8:	461a      	mov	r2, r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	817b      	strh	r3, [r7, #10]
 80074fe:	460b      	mov	r3, r1
 8007500:	813b      	strh	r3, [r7, #8]
 8007502:	4613      	mov	r3, r2
 8007504:	80fb      	strh	r3, [r7, #6]


	  int32_t Register;
	  memcpy(&Register, ValPointer, 4);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if((Pointer_Razr > 0) & (Font_Color != BackgroundColor))
 800750c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007510:	2b00      	cmp	r3, #0
 8007512:	bfcc      	ite	gt
 8007514:	2301      	movgt	r3, #1
 8007516:	2300      	movle	r3, #0
 8007518:	b2da      	uxtb	r2, r3
 800751a:	4bb0      	ldr	r3, [pc, #704]	; (80077dc <Centred_DrawNumber_16_32bit_controled+0x2f0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007522:	4299      	cmp	r1, r3
 8007524:	bf14      	ite	ne
 8007526:	2301      	movne	r3, #1
 8007528:	2300      	moveq	r3, #0
 800752a:	b2db      	uxtb	r3, r3
 800752c:	4013      	ands	r3, r2
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d02c      	beq.n	800758e <Centred_DrawNumber_16_32bit_controled+0xa2>
	  {
		  Control_DB.VauePointer    = ValPointer;
 8007534:	4aaa      	ldr	r2, [pc, #680]	; (80077e0 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6093      	str	r3, [r2, #8]
		  Control_DB.RazrPointerMAX = Numbers;
 800753a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800753e:	4ba8      	ldr	r3, [pc, #672]	; (80077e0 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8007540:	80da      	strh	r2, [r3, #6]
		  Control_DB.ValueMax		= Max;
 8007542:	4aa7      	ldr	r2, [pc, #668]	; (80077e0 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8007544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007546:	60d3      	str	r3, [r2, #12]
		  Control_DB.ValueMin		= Min;
 8007548:	4aa5      	ldr	r2, [pc, #660]	; (80077e0 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 800754a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800754c:	6113      	str	r3, [r2, #16]

		  uint8_t BackWriteFlag = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  if(Register > Control_DB.ValueMax)
 8007554:	4ba2      	ldr	r3, [pc, #648]	; (80077e0 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	429a      	cmp	r2, r3
 800755c:	da05      	bge.n	800756a <Centred_DrawNumber_16_32bit_controled+0x7e>
		  {
			  BackWriteFlag = 1;
 800755e:	2301      	movs	r3, #1
 8007560:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  Register = Control_DB.ValueMax;
 8007564:	4b9e      	ldr	r3, [pc, #632]	; (80077e0 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
		  if(Register < Control_DB.ValueMin)
 800756a:	4b9d      	ldr	r3, [pc, #628]	; (80077e0 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	429a      	cmp	r2, r3
 8007572:	dd05      	ble.n	8007580 <Centred_DrawNumber_16_32bit_controled+0x94>
		  {
			  BackWriteFlag = 1;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  Register = Control_DB.ValueMin;
 800757a:	4b99      	ldr	r3, [pc, #612]	; (80077e0 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
		  if(BackWriteFlag)
 8007580:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <Centred_DrawNumber_16_32bit_controled+0xa2>
		  {
			  memcpy(ValPointer, &Register, 4);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800758c:	601a      	str	r2, [r3, #0]


	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 800758e:	2300      	movs	r3, #0
 8007590:	663b      	str	r3, [r7, #96]	; 0x60
 8007592:	e008      	b.n	80075a6 <Centred_DrawNumber_16_32bit_controled+0xba>
 8007594:	f107 0214 	add.w	r2, r7, #20
 8007598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800759a:	4413      	add	r3, r2
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075a2:	3301      	adds	r3, #1
 80075a4:	663b      	str	r3, [r7, #96]	; 0x60
 80075a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075a8:	2b09      	cmp	r3, #9
 80075aa:	ddf3      	ble.n	8007594 <Centred_DrawNumber_16_32bit_controled+0xa8>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59



	  if(Register < 0)
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	da05      	bge.n	80075ca <Centred_DrawNumber_16_32bit_controled+0xde>
	  {
		  BelowZero = 1;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		  Register = 0 - Register;
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	425b      	negs	r3, r3
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }

	  if(Comma>5){Comma=5;}
 80075ca:	897b      	ldrh	r3, [r7, #10]
 80075cc:	2b05      	cmp	r3, #5
 80075ce:	d901      	bls.n	80075d4 <Centred_DrawNumber_16_32bit_controled+0xe8>
 80075d0:	2305      	movs	r3, #5
 80075d2:	817b      	strh	r3, [r7, #10]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	f107 0120 	add.w	r1, r7, #32
 80075da:	220a      	movs	r2, #10
 80075dc:	4618      	mov	r0, r3
 80075de:	f004 fdea 	bl	800c1b6 <itoa>

	  Cycle_Pointer = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 80075e8:	e004      	b.n	80075f4 <Centred_DrawNumber_16_32bit_controled+0x108>
	  {
		  Cycle_Pointer++;
 80075ea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80075ee:	3301      	adds	r3, #1
 80075f0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 80075f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80075f8:	3368      	adds	r3, #104	; 0x68
 80075fa:	443b      	add	r3, r7
 80075fc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1f2      	bne.n	80075ea <Centred_DrawNumber_16_32bit_controled+0xfe>
	  }

	  TemporaryLenPointer = Numbers;
 8007604:	893b      	ldrh	r3, [r7, #8]
 8007606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  for(int i=TemporaryLenPointer;i;i--)
 800760a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800760e:	657b      	str	r3, [r7, #84]	; 0x54
 8007610:	e00f      	b.n	8007632 <Centred_DrawNumber_16_32bit_controled+0x146>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 8007612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007614:	3b01      	subs	r3, #1
 8007616:	3368      	adds	r3, #104	; 0x68
 8007618:	443b      	add	r3, r7
 800761a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800761e:	f803 2c54 	strb.w	r2, [r3, #-84]
		  TemporaryLenPointer--;
 8007622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007626:	3b01      	subs	r3, #1
 8007628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  for(int i=TemporaryLenPointer;i;i--)
 800762c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800762e:	3b01      	subs	r3, #1
 8007630:	657b      	str	r3, [r7, #84]	; 0x54
 8007632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1ec      	bne.n	8007612 <Centred_DrawNumber_16_32bit_controled+0x126>
	  }


	  if(Comma>0)
 8007638:	897b      	ldrh	r3, [r7, #10]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d06c      	beq.n	8007718 <Centred_DrawNumber_16_32bit_controled+0x22c>
	  {
		  if(Comma>=Cycle_Pointer)
 800763e:	897a      	ldrh	r2, [r7, #10]
 8007640:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007644:	429a      	cmp	r2, r3
 8007646:	d339      	bcc.n	80076bc <Centred_DrawNumber_16_32bit_controled+0x1d0>
		  {
			  Final_Len = Comma + 2;
 8007648:	897b      	ldrh	r3, [r7, #10]
 800764a:	3302      	adds	r3, #2
 800764c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

			  int8_t temp = Cycle_Pointer;
 8007650:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007654:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			  for(int i=(Final_Len-1);i>=0;i--)
 8007658:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800765c:	3b01      	subs	r3, #1
 800765e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007660:	e020      	b.n	80076a4 <Centred_DrawNumber_16_32bit_controled+0x1b8>
			  {
				  if(temp)
 8007662:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8007666:	2b00      	cmp	r3, #0
 8007668:	d013      	beq.n	8007692 <Centred_DrawNumber_16_32bit_controled+0x1a6>
				  {
					  temp--;
 800766a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800766e:	b2db      	uxtb	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					  String[i] = String[temp];
 8007678:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800767c:	3368      	adds	r3, #104	; 0x68
 800767e:	443b      	add	r3, r7
 8007680:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 8007684:	f107 0220 	add.w	r2, r7, #32
 8007688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800768a:	4413      	add	r3, r2
 800768c:	460a      	mov	r2, r1
 800768e:	701a      	strb	r2, [r3, #0]
 8007690:	e005      	b.n	800769e <Centred_DrawNumber_16_32bit_controled+0x1b2>
				  }
				  else
				  {
					  String[i] = '0';
 8007692:	f107 0220 	add.w	r2, r7, #32
 8007696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007698:	4413      	add	r3, r2
 800769a:	2230      	movs	r2, #48	; 0x30
 800769c:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 800769e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a0:	3b01      	subs	r3, #1
 80076a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dadb      	bge.n	8007662 <Centred_DrawNumber_16_32bit_controled+0x176>
				  }
			  }
			  String[1] = ',';
 80076aa:	232c      	movs	r3, #44	; 0x2c
 80076ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			  Cycle_Pointer--;
 80076b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80076b4:	3b01      	subs	r3, #1
 80076b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80076ba:	e031      	b.n	8007720 <Centred_DrawNumber_16_32bit_controled+0x234>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 80076bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80076c0:	3301      	adds	r3, #1
 80076c2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

			  for(int i=(Final_Len-1);i>=0;i--)
 80076c6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80076ca:	3b01      	subs	r3, #1
 80076cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ce:	e015      	b.n	80076fc <Centred_DrawNumber_16_32bit_controled+0x210>
			  {
				  if( i > (Final_Len - Comma - 1))
 80076d0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80076d4:	897b      	ldrh	r3, [r7, #10]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076da:	429a      	cmp	r2, r3
 80076dc:	db0b      	blt.n	80076f6 <Centred_DrawNumber_16_32bit_controled+0x20a>
				  {
					  String[i] = String[i-1];
 80076de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e0:	3b01      	subs	r3, #1
 80076e2:	3368      	adds	r3, #104	; 0x68
 80076e4:	443b      	add	r3, r7
 80076e6:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 80076ea:	f107 0220 	add.w	r2, r7, #32
 80076ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076f0:	4413      	add	r3, r2
 80076f2:	460a      	mov	r2, r1
 80076f4:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 80076f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076f8:	3b01      	subs	r3, #1
 80076fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80076fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076fe:	2b00      	cmp	r3, #0
 8007700:	dae6      	bge.n	80076d0 <Centred_DrawNumber_16_32bit_controled+0x1e4>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 8007702:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8007706:	897b      	ldrh	r3, [r7, #10]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	3368      	adds	r3, #104	; 0x68
 800770e:	443b      	add	r3, r7
 8007710:	222c      	movs	r2, #44	; 0x2c
 8007712:	f803 2c48 	strb.w	r2, [r3, #-72]
 8007716:	e003      	b.n	8007720 <Centred_DrawNumber_16_32bit_controled+0x234>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 8007718:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800771c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a


	  if(BelowZero)
 8007720:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01d      	beq.n	8007764 <Centred_DrawNumber_16_32bit_controled+0x278>
	  {
		  for(int i=Final_Len;i>=0;i--)
 8007728:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800772c:	647b      	str	r3, [r7, #68]	; 0x44
 800772e:	e00e      	b.n	800774e <Centred_DrawNumber_16_32bit_controled+0x262>
		  {
			  String[i] = String[i - 1];
 8007730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007732:	3b01      	subs	r3, #1
 8007734:	3368      	adds	r3, #104	; 0x68
 8007736:	443b      	add	r3, r7
 8007738:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 800773c:	f107 0220 	add.w	r2, r7, #32
 8007740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007742:	4413      	add	r3, r2
 8007744:	460a      	mov	r2, r1
 8007746:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 8007748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774a:	3b01      	subs	r3, #1
 800774c:	647b      	str	r3, [r7, #68]	; 0x44
 800774e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007750:	2b00      	cmp	r3, #0
 8007752:	daed      	bge.n	8007730 <Centred_DrawNumber_16_32bit_controled+0x244>
		  }
		  String[0] = '-';
 8007754:	232d      	movs	r3, #45	; 0x2d
 8007756:	f887 3020 	strb.w	r3, [r7, #32]
		  Final_Len++;
 800775a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800775e:	3301      	adds	r3, #1
 8007760:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  }

		uint8_t StandartLen = Numbers;
 8007764:	893b      	ldrh	r3, [r7, #8]
 8007766:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint8_t IschLen = Final_Len - 1;
 800776a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800776e:	b2db      	uxtb	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if(Final_Len < StandartLen)
 8007776:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800777a:	b29b      	uxth	r3, r3
 800777c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8007780:	429a      	cmp	r2, r3
 8007782:	d23b      	bcs.n	80077fc <Centred_DrawNumber_16_32bit_controled+0x310>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 8007784:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007788:	3b01      	subs	r3, #1
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800778c:	e033      	b.n	80077f6 <Centred_DrawNumber_16_32bit_controled+0x30a>
			{
				if(IschLen)
 800778e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007792:	2b00      	cmp	r3, #0
 8007794:	d011      	beq.n	80077ba <Centred_DrawNumber_16_32bit_controled+0x2ce>
				{
					String[i] = String[IschLen];
 8007796:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800779a:	3368      	adds	r3, #104	; 0x68
 800779c:	443b      	add	r3, r7
 800779e:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 80077a2:	f107 0220 	add.w	r2, r7, #32
 80077a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a8:	4413      	add	r3, r2
 80077aa:	460a      	mov	r2, r1
 80077ac:	701a      	strb	r2, [r3, #0]
					IschLen--;
 80077ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077b2:	3b01      	subs	r3, #1
 80077b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b8:	e01a      	b.n	80077f0 <Centred_DrawNumber_16_32bit_controled+0x304>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 80077ba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80077be:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d10c      	bne.n	80077e4 <Centred_DrawNumber_16_32bit_controled+0x2f8>
					{
						String[i] = String[0];
 80077ca:	f897 1020 	ldrb.w	r1, [r7, #32]
 80077ce:	f107 0220 	add.w	r2, r7, #32
 80077d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d4:	4413      	add	r3, r2
 80077d6:	460a      	mov	r2, r1
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	e009      	b.n	80077f0 <Centred_DrawNumber_16_32bit_controled+0x304>
 80077dc:	20000008 	.word	0x20000008
 80077e0:	20000b2c 	.word	0x20000b2c
					}
					else
					{
						String[i] = ' ';
 80077e4:	f107 0220 	add.w	r2, r7, #32
 80077e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ea:	4413      	add	r3, r2
 80077ec:	2220      	movs	r2, #32
 80077ee:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 80077f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f2:	3b01      	subs	r3, #1
 80077f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	dac8      	bge.n	800778e <Centred_DrawNumber_16_32bit_controled+0x2a2>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 80077fc:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007808:	4413      	add	r3, r2
 800780a:	86bb      	strh	r3, [r7, #52]	; 0x34
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 800780c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8007810:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007814:	fb02 f303 	mul.w	r3, r2, r3
 8007818:	0fda      	lsrs	r2, r3, #31
 800781a:	4413      	add	r3, r2
 800781c:	105b      	asrs	r3, r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8007824:	4413      	add	r3, r2
 8007826:	867b      	strh	r3, [r7, #50]	; 0x32

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 8007828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800782c:	2b00      	cmp	r3, #0
 800782e:	da01      	bge.n	8007834 <Centred_DrawNumber_16_32bit_controled+0x348>
 8007830:	2300      	movs	r3, #0
 8007832:	80fb      	strh	r3, [r7, #6]

		for(int i=0;i<Numbers;i++)
 8007834:	2300      	movs	r3, #0
 8007836:	63bb      	str	r3, [r7, #56]	; 0x38
 8007838:	e0a9      	b.n	800798e <Centred_DrawNumber_16_32bit_controled+0x4a2>
		{
			if((Pointer_Razr == RazrPointerArray[i]) & (Font_Color != BackgroundColor))
 800783a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800783e:	f107 0114 	add.w	r1, r7, #20
 8007842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007844:	440a      	add	r2, r1
 8007846:	7812      	ldrb	r2, [r2, #0]
 8007848:	4293      	cmp	r3, r2
 800784a:	bf0c      	ite	eq
 800784c:	2301      	moveq	r3, #1
 800784e:	2300      	movne	r3, #0
 8007850:	b2da      	uxtb	r2, r3
 8007852:	4b65      	ldr	r3, [pc, #404]	; (80079e8 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800785a:	4299      	cmp	r1, r3
 800785c:	bf14      	ite	ne
 800785e:	2301      	movne	r3, #1
 8007860:	2300      	moveq	r3, #0
 8007862:	b2db      	uxtb	r3, r3
 8007864:	4013      	ands	r3, r2
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d049      	beq.n	8007900 <Centred_DrawNumber_16_32bit_controled+0x414>
			{
				if(Pointer_Razr)
 800786c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 8089 	beq.w	8007988 <Centred_DrawNumber_16_32bit_controled+0x49c>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8007876:	4b5d      	ldr	r3, [pc, #372]	; (80079ec <Centred_DrawNumber_16_32bit_controled+0x500>)
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	3301      	adds	r3, #1
 800787e:	b29b      	uxth	r3, r3
 8007880:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8007884:	fb12 f303 	smulbb	r3, r2, r3
 8007888:	b29b      	uxth	r3, r3
 800788a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	b299      	uxth	r1, r3
 8007890:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007892:	3301      	adds	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 800789a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800789e:	9303      	str	r3, [sp, #12]
 80078a0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80078a4:	9302      	str	r3, [sp, #8]
 80078a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078aa:	9301      	str	r3, [sp, #4]
 80078ac:	2304      	movs	r3, #4
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	4623      	mov	r3, r4
 80078b2:	f000 f9f5 	bl	8007ca0 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 80078b6:	4b4d      	ldr	r3, [pc, #308]	; (80079ec <Centred_DrawNumber_16_32bit_controled+0x500>)
 80078b8:	6818      	ldr	r0, [r3, #0]
 80078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078bc:	3301      	adds	r3, #1
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80078c4:	fb12 f303 	smulbb	r3, r2, r3
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	b299      	uxth	r1, r3
 80078d0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80078d2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b04      	subs	r3, #4
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 80078e2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80078e6:	9303      	str	r3, [sp, #12]
 80078e8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80078ec:	9302      	str	r3, [sp, #8]
 80078ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	2304      	movs	r3, #4
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	4623      	mov	r3, r4
 80078fa:	f000 f9d1 	bl	8007ca0 <Draw_Rectangle>
 80078fe:	e043      	b.n	8007988 <Centred_DrawNumber_16_32bit_controled+0x49c>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8007900:	4b39      	ldr	r3, [pc, #228]	; (80079e8 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	3301      	adds	r3, #1
 8007908:	b29b      	uxth	r3, r3
 800790a:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800790e:	fb12 f303 	smulbb	r3, r2, r3
 8007912:	b29b      	uxth	r3, r3
 8007914:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	b299      	uxth	r1, r3
 800791a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800791c:	3301      	adds	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 8007924:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007928:	9303      	str	r3, [sp, #12]
 800792a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800792e:	9302      	str	r3, [sp, #8]
 8007930:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	2304      	movs	r3, #4
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	4623      	mov	r3, r4
 800793c:	f000 f9b0 	bl	8007ca0 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8007940:	4b29      	ldr	r3, [pc, #164]	; (80079e8 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007946:	3301      	adds	r3, #1
 8007948:	b29b      	uxth	r3, r3
 800794a:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800794e:	fb12 f303 	smulbb	r3, r2, r3
 8007952:	b29b      	uxth	r3, r3
 8007954:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	b299      	uxth	r1, r3
 800795a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800795c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b04      	subs	r3, #4
 8007966:	b29a      	uxth	r2, r3
 8007968:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 800796c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007970:	9303      	str	r3, [sp, #12]
 8007972:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007976:	9302      	str	r3, [sp, #8]
 8007978:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	2304      	movs	r3, #4
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	4623      	mov	r3, r4
 8007984:	f000 f98c 	bl	8007ca0 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	3301      	adds	r3, #1
 800798c:	63bb      	str	r3, [r7, #56]	; 0x38
 800798e:	893b      	ldrh	r3, [r7, #8]
 8007990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007992:	429a      	cmp	r2, r3
 8007994:	f6ff af51 	blt.w	800783a <Centred_DrawNumber_16_32bit_controled+0x34e>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8007998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800799c:	b299      	uxth	r1, r3
 800799e:	f8b7 4084 	ldrh.w	r4, [r7, #132]	; 0x84
 80079a2:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80079a6:	f107 0020 	add.w	r0, r7, #32
 80079aa:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80079ae:	9307      	str	r3, [sp, #28]
 80079b0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80079b4:	9306      	str	r3, [sp, #24]
 80079b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079c0:	9304      	str	r3, [sp, #16]
 80079c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079c6:	9303      	str	r3, [sp, #12]
 80079c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079cc:	9302      	str	r3, [sp, #8]
 80079ce:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	4623      	mov	r3, r4
 80079dc:	f7fe ffae 	bl	800693c <Centred_DrawString_16>
}
 80079e0:	bf00      	nop
 80079e2:	376c      	adds	r7, #108	; 0x6c
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd90      	pop	{r4, r7, pc}
 80079e8:	20000008 	.word	0x20000008
 80079ec:	20000014 	.word	0x20000014

080079f0 <Short_Centred_DrawNumber_16>:


void Short_Centred_DrawNumber_16(int16_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr,
		uint16_t Coord_X, uint16_t Coord_Y,  uint32_t PageNumber)
{
 80079f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079f2:	b08d      	sub	sp, #52	; 0x34
 80079f4:	af0a      	add	r7, sp, #40	; 0x28
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	461a      	mov	r2, r3
 80079fe:	4623      	mov	r3, r4
 8007a00:	80fb      	strh	r3, [r7, #6]
 8007a02:	4603      	mov	r3, r0
 8007a04:	80bb      	strh	r3, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	807b      	strh	r3, [r7, #2]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	803b      	strh	r3, [r7, #0]
	Centred_DrawNumber_16(Register, Comma, Numbers, Pointer_Razr, Coord_X, Coord_Y, 800, 480, PageNumber, BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8007a0e:	4b13      	ldr	r3, [pc, #76]	; (8007a5c <Short_Centred_DrawNumber_16+0x6c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <Short_Centred_DrawNumber_16+0x70>)
 8007a14:	6812      	ldr	r2, [r2, #0]
 8007a16:	f9b7 5000 	ldrsh.w	r5, [r7]
 8007a1a:	887c      	ldrh	r4, [r7, #2]
 8007a1c:	88b9      	ldrh	r1, [r7, #4]
 8007a1e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007a22:	2612      	movs	r6, #18
 8007a24:	9609      	str	r6, [sp, #36]	; 0x24
 8007a26:	260b      	movs	r6, #11
 8007a28:	9608      	str	r6, [sp, #32]
 8007a2a:	4e0e      	ldr	r6, [pc, #56]	; (8007a64 <Short_Centred_DrawNumber_16+0x74>)
 8007a2c:	9607      	str	r6, [sp, #28]
 8007a2e:	9206      	str	r2, [sp, #24]
 8007a30:	9305      	str	r3, [sp, #20]
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	9304      	str	r3, [sp, #16]
 8007a36:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007a3a:	9303      	str	r3, [sp, #12]
 8007a3c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007a40:	9302      	str	r3, [sp, #8]
 8007a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	8c3b      	ldrh	r3, [r7, #32]
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	462b      	mov	r3, r5
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	f7ff f8f9 	bl	8006c44 <Centred_DrawNumber_16>
}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000008 	.word	0x20000008
 8007a60:	200009f8 	.word	0x200009f8
 8007a64:	0801088c 	.word	0x0801088c

08007a68 <NumberChange>:




void NumberChange(uint32_t pointer, uint8_t razr, uint8_t len, uint8_t Up, uint8_t Down)
{
 8007a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007a6c:	b08c      	sub	sp, #48	; 0x30
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	4608      	mov	r0, r1
 8007a74:	4611      	mov	r1, r2
 8007a76:	461a      	mov	r2, r3
 8007a78:	4603      	mov	r3, r0
 8007a7a:	70fb      	strb	r3, [r7, #3]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70bb      	strb	r3, [r7, #2]
 8007a80:	4613      	mov	r3, r2
 8007a82:	707b      	strb	r3, [r7, #1]
	struct {int32_t a;} *Number = pointer;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t temp2;
	int16_t Tpoint = razr - 1;
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	847b      	strh	r3, [r7, #34]	; 0x22

	int16_t Symbols[10];

	for(int i= (len-1);i>=0;i--)
 8007a92:	78bb      	ldrb	r3, [r7, #2]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a98:	e03d      	b.n	8007b16 <NumberChange+0xae>
	{
		temp2 = pow(10,i);
 8007a9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a9c:	f7f8 fcfa 	bl	8000494 <__aeabi_i2d>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	ec43 2b11 	vmov	d1, r2, r3
 8007aa8:	ed9f 0b65 	vldr	d0, [pc, #404]	; 8007c40 <NumberChange+0x1d8>
 8007aac:	f004 fc08 	bl	800c2c0 <pow>
 8007ab0:	ec53 2b10 	vmov	r2, r3, d0
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	f7f9 f806 	bl	8000ac8 <__aeabi_d2iz>
 8007abc:	4603      	mov	r3, r0
 8007abe:	61fb      	str	r3, [r7, #28]
		if(Number->a >= temp2)
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69fa      	ldr	r2, [r7, #28]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	dc1b      	bgt.n	8007b02 <NumberChange+0x9a>
		{
			Symbols[i] = Number->a / temp2;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	fb92 f3f3 	sdiv	r3, r2, r3
 8007ad4:	b21a      	sxth	r2, r3
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	3330      	adds	r3, #48	; 0x30
 8007adc:	443b      	add	r3, r7
 8007ade:	f823 2c28 	strh.w	r2, [r3, #-40]
			Number->a = Number->a - (temp2 * Symbols[i]);
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	3330      	adds	r3, #48	; 0x30
 8007aec:	443b      	add	r3, r7
 8007aee:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8007af2:	4619      	mov	r1, r3
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	fb01 f303 	mul.w	r3, r1, r3
 8007afa:	1ad2      	subs	r2, r2, r3
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	e006      	b.n	8007b10 <NumberChange+0xa8>
		}
		else
		{
			Symbols[i] = 0;
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	3330      	adds	r3, #48	; 0x30
 8007b08:	443b      	add	r3, r7
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f823 2c28 	strh.w	r2, [r3, #-40]
	for(int i= (len-1);i>=0;i--)
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	3b01      	subs	r3, #1
 8007b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	dabe      	bge.n	8007a9a <NumberChange+0x32>
		}
	}	// Разделение числа на разряды



	if(Up)
 8007b1c:	787b      	ldrb	r3, [r7, #1]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d021      	beq.n	8007b66 <NumberChange+0xfe>
	{
		Symbols[Tpoint]++;
 8007b22:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8007b26:	0053      	lsls	r3, r2, #1
 8007b28:	3330      	adds	r3, #48	; 0x30
 8007b2a:	443b      	add	r3, r7
 8007b2c:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3301      	adds	r3, #1
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	b219      	sxth	r1, r3
 8007b38:	0053      	lsls	r3, r2, #1
 8007b3a:	3330      	adds	r3, #48	; 0x30
 8007b3c:	443b      	add	r3, r7
 8007b3e:	460a      	mov	r2, r1
 8007b40:	f823 2c28 	strh.w	r2, [r3, #-40]
		if(Symbols[Tpoint] > 9){Symbols[Tpoint] = 0;}
 8007b44:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	3330      	adds	r3, #48	; 0x30
 8007b4c:	443b      	add	r3, r7
 8007b4e:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8007b52:	2b09      	cmp	r3, #9
 8007b54:	dd07      	ble.n	8007b66 <NumberChange+0xfe>
 8007b56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	3330      	adds	r3, #48	; 0x30
 8007b5e:	443b      	add	r3, r7
 8007b60:	2200      	movs	r2, #0
 8007b62:	f823 2c28 	strh.w	r2, [r3, #-40]
	}

	if(Down)
 8007b66:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d021      	beq.n	8007bb2 <NumberChange+0x14a>
	{
		Symbols[Tpoint]--;
 8007b6e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8007b72:	0053      	lsls	r3, r2, #1
 8007b74:	3330      	adds	r3, #48	; 0x30
 8007b76:	443b      	add	r3, r7
 8007b78:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	b219      	sxth	r1, r3
 8007b84:	0053      	lsls	r3, r2, #1
 8007b86:	3330      	adds	r3, #48	; 0x30
 8007b88:	443b      	add	r3, r7
 8007b8a:	460a      	mov	r2, r1
 8007b8c:	f823 2c28 	strh.w	r2, [r3, #-40]
		if(Symbols[Tpoint] < 0){Symbols[Tpoint] = 9;}
 8007b90:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	3330      	adds	r3, #48	; 0x30
 8007b98:	443b      	add	r3, r7
 8007b9a:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	da07      	bge.n	8007bb2 <NumberChange+0x14a>
 8007ba2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	3330      	adds	r3, #48	; 0x30
 8007baa:	443b      	add	r3, r7
 8007bac:	2209      	movs	r2, #9
 8007bae:	f823 2c28 	strh.w	r2, [r3, #-40]
	}



	Number->a = 0;
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
	for(int i=(len-1);i>=0;i--)
 8007bb8:	78bb      	ldrb	r3, [r7, #2]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bbe:	e034      	b.n	8007c2a <NumberChange+0x1c2>
	{
		Number->a = Number->a + Symbols[i] * pow(10,i);
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7f8 fc65 	bl	8000494 <__aeabi_i2d>
 8007bca:	4604      	mov	r4, r0
 8007bcc:	460d      	mov	r5, r1
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	3330      	adds	r3, #48	; 0x30
 8007bd4:	443b      	add	r3, r7
 8007bd6:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7f8 fc5a 	bl	8000494 <__aeabi_i2d>
 8007be0:	4680      	mov	r8, r0
 8007be2:	4689      	mov	r9, r1
 8007be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be6:	f7f8 fc55 	bl	8000494 <__aeabi_i2d>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	ec43 2b11 	vmov	d1, r2, r3
 8007bf2:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8007c40 <NumberChange+0x1d8>
 8007bf6:	f004 fb63 	bl	800c2c0 <pow>
 8007bfa:	ec53 2b10 	vmov	r2, r3, d0
 8007bfe:	4640      	mov	r0, r8
 8007c00:	4649      	mov	r1, r9
 8007c02:	f7f8 fcb1 	bl	8000568 <__aeabi_dmul>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	f7f8 faf5 	bl	80001fc <__adddf3>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4610      	mov	r0, r2
 8007c18:	4619      	mov	r1, r3
 8007c1a:	f7f8 ff55 	bl	8000ac8 <__aeabi_d2iz>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	601a      	str	r2, [r3, #0]
	for(int i=(len-1);i>=0;i--)
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	3b01      	subs	r3, #1
 8007c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	dac7      	bge.n	8007bc0 <NumberChange+0x158>
	}	// Сборка числа обратно
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	3730      	adds	r7, #48	; 0x30
 8007c36:	46bd      	mov	sp, r7
 8007c38:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007c3c:	f3af 8000 	nop.w
 8007c40:	00000000 	.word	0x00000000
 8007c44:	40240000 	.word	0x40240000

08007c48 <Zaliv>:
extern uint32_t VideoBuffer;
extern __IO uint32_t BasicFon;
extern __IO uint8_t  temporary_line_buffer;

void Zaliv(uint32_t Color, uint32_t Bufer_Pointer, uint16_t Resolution_X, uint16_t Resolution_Y)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	4611      	mov	r1, r2
 8007c54:	461a      	mov	r2, r3
 8007c56:	460b      	mov	r3, r1
 8007c58:	80fb      	strh	r3, [r7, #6]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	80bb      	strh	r3, [r7, #4]
	struct {uint8_t b,g,r;} *TempBuf=Bufer_Pointer;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	613b      	str	r3, [r7, #16]
	for(int i=0;i<(Resolution_X*Resolution_Y);i++){memcpy(&TempBuf[i].b, &Color, 3);} //Заливка всего экрана
 8007c62:	2300      	movs	r3, #0
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	e00f      	b.n	8007c88 <Zaliv+0x40>
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	4413      	add	r3, r2
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4413      	add	r3, r2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f107 030c 	add.w	r3, r7, #12
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	f004 fb11 	bl	800c2a4 <memcpy>
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	3301      	adds	r3, #1
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	88fb      	ldrh	r3, [r7, #6]
 8007c8a:	88ba      	ldrh	r2, [r7, #4]
 8007c8c:	fb02 f303 	mul.w	r3, r2, r3
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	dbe8      	blt.n	8007c68 <Zaliv+0x20>
} // Заливка экрана
 8007c96:	bf00      	nop
 8007c98:	bf00      	nop
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <Draw_Rectangle>:
	struct {uint8_t a,b,g,r;} *TempBuf=Bufer_Pointer;
	for(int i=0;i<(Resolution_X*Resolution_Y);i++){memcpy(&TempBuf[i].b, &Color, 4);} //Заливка всего экрана
} // Заливка экрана

void Draw_Rectangle(uint32_t Color, uint16_t Start_X, uint16_t Start_Y, uint16_t Size_X, uint16_t Size_Y, uint32_t Bufer_Pointer, uint16_t Resolution_X, uint16_t Resolution_Y)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	461a      	mov	r2, r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	817b      	strh	r3, [r7, #10]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	813b      	strh	r3, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	80fb      	strh	r3, [r7, #6]
	struct {uint8_t b,g,r;} *TempBuf=Bufer_Pointer;
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	617b      	str	r3, [r7, #20]
	for(int i=Start_Y;i<(Start_Y + Size_Y);i++)
 8007cbe:	893b      	ldrh	r3, [r7, #8]
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	e021      	b.n	8007d08 <Draw_Rectangle+0x68>
	{
		for(int j=Start_X;j<(Start_X + Size_X);j++)
 8007cc4:	897b      	ldrh	r3, [r7, #10]
 8007cc6:	61bb      	str	r3, [r7, #24]
 8007cc8:	e015      	b.n	8007cf6 <Draw_Rectangle+0x56>
		{
			memcpy(&TempBuf[(i * Resolution_X) + j].b, &Color, 3);
 8007cca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	fb03 f202 	mul.w	r2, r3, r2
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	4613      	mov	r3, r2
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	4413      	add	r3, r2
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f107 030c 	add.w	r3, r7, #12
 8007ce8:	2203      	movs	r2, #3
 8007cea:	4619      	mov	r1, r3
 8007cec:	f004 fada 	bl	800c2a4 <memcpy>
		for(int j=Start_X;j<(Start_X + Size_X);j++)
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	61bb      	str	r3, [r7, #24]
 8007cf6:	897a      	ldrh	r2, [r7, #10]
 8007cf8:	88fb      	ldrh	r3, [r7, #6]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	dbe3      	blt.n	8007cca <Draw_Rectangle+0x2a>
	for(int i=Start_Y;i<(Start_Y + Size_Y);i++)
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	3301      	adds	r3, #1
 8007d06:	61fb      	str	r3, [r7, #28]
 8007d08:	893a      	ldrh	r2, [r7, #8]
 8007d0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d0c:	4413      	add	r3, r2
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	dbd7      	blt.n	8007cc4 <Draw_Rectangle+0x24>
		}
	}
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d24:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <HAL_Init+0x40>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a0d      	ldr	r2, [pc, #52]	; (8007d60 <HAL_Init+0x40>)
 8007d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <HAL_Init+0x40>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a0a      	ldr	r2, [pc, #40]	; (8007d60 <HAL_Init+0x40>)
 8007d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d3c:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <HAL_Init+0x40>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a07      	ldr	r2, [pc, #28]	; (8007d60 <HAL_Init+0x40>)
 8007d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d48:	2003      	movs	r0, #3
 8007d4a:	f000 f94f 	bl	8007fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d4e:	200f      	movs	r0, #15
 8007d50:	f000 f808 	bl	8007d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007d54:	f7fd fc0c 	bl	8005570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	40023c00 	.word	0x40023c00

08007d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007d6c:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <HAL_InitTick+0x54>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	4b12      	ldr	r3, [pc, #72]	; (8007dbc <HAL_InitTick+0x58>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	4619      	mov	r1, r3
 8007d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f967 	bl	8008056 <HAL_SYSTICK_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e00e      	b.n	8007db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b0f      	cmp	r3, #15
 8007d96:	d80a      	bhi.n	8007dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d98:	2200      	movs	r2, #0
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007da0:	f000 f92f 	bl	8008002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007da4:	4a06      	ldr	r2, [pc, #24]	; (8007dc0 <HAL_InitTick+0x5c>)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	e000      	b.n	8007db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	2000001c 	.word	0x2000001c
 8007dbc:	20000024 	.word	0x20000024
 8007dc0:	20000020 	.word	0x20000020

08007dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007dc8:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <HAL_IncTick+0x20>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <HAL_IncTick+0x24>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	4a04      	ldr	r2, [pc, #16]	; (8007de8 <HAL_IncTick+0x24>)
 8007dd6:	6013      	str	r3, [r2, #0]
}
 8007dd8:	bf00      	nop
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000024 	.word	0x20000024
 8007de8:	20000bac 	.word	0x20000bac

08007dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
  return uwTick;
 8007df0:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <HAL_GetTick+0x14>)
 8007df2:	681b      	ldr	r3, [r3, #0]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	20000bac 	.word	0x20000bac

08007e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e0c:	f7ff ffee 	bl	8007dec <HAL_GetTick>
 8007e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1c:	d005      	beq.n	8007e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e1e:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <HAL_Delay+0x44>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007e2a:	bf00      	nop
 8007e2c:	f7ff ffde 	bl	8007dec <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d8f7      	bhi.n	8007e2c <HAL_Delay+0x28>
  {
  }
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000024 	.word	0x20000024

08007e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e5c:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <__NVIC_SetPriorityGrouping+0x44>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e68:	4013      	ands	r3, r2
 8007e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e7e:	4a04      	ldr	r2, [pc, #16]	; (8007e90 <__NVIC_SetPriorityGrouping+0x44>)
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	60d3      	str	r3, [r2, #12]
}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	e000ed00 	.word	0xe000ed00

08007e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e98:	4b04      	ldr	r3, [pc, #16]	; (8007eac <__NVIC_GetPriorityGrouping+0x18>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	0a1b      	lsrs	r3, r3, #8
 8007e9e:	f003 0307 	and.w	r3, r3, #7
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	e000ed00 	.word	0xe000ed00

08007eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	db0b      	blt.n	8007eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	f003 021f 	and.w	r2, r3, #31
 8007ec8:	4907      	ldr	r1, [pc, #28]	; (8007ee8 <__NVIC_EnableIRQ+0x38>)
 8007eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ece:	095b      	lsrs	r3, r3, #5
 8007ed0:	2001      	movs	r0, #1
 8007ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	e000e100 	.word	0xe000e100

08007eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	6039      	str	r1, [r7, #0]
 8007ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	db0a      	blt.n	8007f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	490c      	ldr	r1, [pc, #48]	; (8007f38 <__NVIC_SetPriority+0x4c>)
 8007f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f0a:	0112      	lsls	r2, r2, #4
 8007f0c:	b2d2      	uxtb	r2, r2
 8007f0e:	440b      	add	r3, r1
 8007f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f14:	e00a      	b.n	8007f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	4908      	ldr	r1, [pc, #32]	; (8007f3c <__NVIC_SetPriority+0x50>)
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	3b04      	subs	r3, #4
 8007f24:	0112      	lsls	r2, r2, #4
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	440b      	add	r3, r1
 8007f2a:	761a      	strb	r2, [r3, #24]
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	e000e100 	.word	0xe000e100
 8007f3c:	e000ed00 	.word	0xe000ed00

08007f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b089      	sub	sp, #36	; 0x24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f003 0307 	and.w	r3, r3, #7
 8007f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	f1c3 0307 	rsb	r3, r3, #7
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	bf28      	it	cs
 8007f5e:	2304      	movcs	r3, #4
 8007f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	3304      	adds	r3, #4
 8007f66:	2b06      	cmp	r3, #6
 8007f68:	d902      	bls.n	8007f70 <NVIC_EncodePriority+0x30>
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	3b03      	subs	r3, #3
 8007f6e:	e000      	b.n	8007f72 <NVIC_EncodePriority+0x32>
 8007f70:	2300      	movs	r3, #0
 8007f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f74:	f04f 32ff 	mov.w	r2, #4294967295
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7e:	43da      	mvns	r2, r3
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	401a      	ands	r2, r3
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f88:	f04f 31ff 	mov.w	r1, #4294967295
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f92:	43d9      	mvns	r1, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f98:	4313      	orrs	r3, r2
         );
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3724      	adds	r7, #36	; 0x24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
	...

08007fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fb8:	d301      	bcc.n	8007fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e00f      	b.n	8007fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fbe:	4a0a      	ldr	r2, [pc, #40]	; (8007fe8 <SysTick_Config+0x40>)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fc6:	210f      	movs	r1, #15
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	f7ff ff8e 	bl	8007eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fd0:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <SysTick_Config+0x40>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fd6:	4b04      	ldr	r3, [pc, #16]	; (8007fe8 <SysTick_Config+0x40>)
 8007fd8:	2207      	movs	r2, #7
 8007fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	e000e010 	.word	0xe000e010

08007fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff ff29 	bl	8007e4c <__NVIC_SetPriorityGrouping>
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008002:	b580      	push	{r7, lr}
 8008004:	b086      	sub	sp, #24
 8008006:	af00      	add	r7, sp, #0
 8008008:	4603      	mov	r3, r0
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008010:	2300      	movs	r3, #0
 8008012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008014:	f7ff ff3e 	bl	8007e94 <__NVIC_GetPriorityGrouping>
 8008018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	6978      	ldr	r0, [r7, #20]
 8008020:	f7ff ff8e 	bl	8007f40 <NVIC_EncodePriority>
 8008024:	4602      	mov	r2, r0
 8008026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800802a:	4611      	mov	r1, r2
 800802c:	4618      	mov	r0, r3
 800802e:	f7ff ff5d 	bl	8007eec <__NVIC_SetPriority>
}
 8008032:	bf00      	nop
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	4603      	mov	r3, r0
 8008042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff ff31 	bl	8007eb0 <__NVIC_EnableIRQ>
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7ff ffa2 	bl	8007fa8 <SysTick_Config>
 8008064:	4603      	mov	r3, r0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800807a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800807c:	f7ff feb6 	bl	8007dec <HAL_GetTick>
 8008080:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b02      	cmp	r3, #2
 800808c:	d008      	beq.n	80080a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2280      	movs	r2, #128	; 0x80
 8008092:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e052      	b.n	8008146 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0216 	bic.w	r2, r2, #22
 80080ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	695a      	ldr	r2, [r3, #20]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d103      	bne.n	80080d0 <HAL_DMA_Abort+0x62>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d007      	beq.n	80080e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0208 	bic.w	r2, r2, #8
 80080de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0201 	bic.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080f0:	e013      	b.n	800811a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80080f2:	f7ff fe7b 	bl	8007dec <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b05      	cmp	r3, #5
 80080fe:	d90c      	bls.n	800811a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2220      	movs	r2, #32
 8008104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2203      	movs	r2, #3
 800810a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e015      	b.n	8008146 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e4      	bne.n	80080f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812c:	223f      	movs	r2, #63	; 0x3f
 800812e:	409a      	lsls	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d004      	beq.n	800816c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2280      	movs	r2, #128	; 0x80
 8008166:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e00c      	b.n	8008186 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2205      	movs	r2, #5
 8008170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 0201 	bic.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e03b      	b.n	800821c <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7fd fa01 	bl	80055c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2202      	movs	r2, #2
 80081c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e2:	f023 0107 	bic.w	r1, r3, #7
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80081fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	68d1      	ldr	r1, [r2, #12]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6812      	ldr	r2, [r2, #0]
 8008208:	430b      	orrs	r3, r1
 800820a:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800823c:	2b01      	cmp	r3, #1
 800823e:	d101      	bne.n	8008244 <HAL_DMA2D_ConfigLayer+0x20>
 8008240:	2302      	movs	r3, #2
 8008242:	e079      	b.n	8008338 <HAL_DMA2D_ConfigLayer+0x114>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	3318      	adds	r3, #24
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	4413      	add	r3, r2
 800825e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	041b      	lsls	r3, r3, #16
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800826e:	4b35      	ldr	r3, [pc, #212]	; (8008344 <HAL_DMA2D_ConfigLayer+0x120>)
 8008270:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b0a      	cmp	r3, #10
 8008278:	d003      	beq.n	8008282 <HAL_DMA2D_ConfigLayer+0x5e>
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2b09      	cmp	r3, #9
 8008280:	d107      	bne.n	8008292 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	4313      	orrs	r3, r2
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	e005      	b.n	800829e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	061b      	lsls	r3, r3, #24
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	4313      	orrs	r3, r2
 800829c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d120      	bne.n	80082e6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	43db      	mvns	r3, r3
 80082ae:	ea02 0103 	and.w	r1, r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	6812      	ldr	r2, [r2, #0]
 80082c4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	2b0a      	cmp	r3, #10
 80082cc:	d003      	beq.n	80082d6 <HAL_DMA2D_ConfigLayer+0xb2>
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	2b09      	cmp	r3, #9
 80082d4:	d127      	bne.n	8008326 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80082e2:	629a      	str	r2, [r3, #40]	; 0x28
 80082e4:	e01f      	b.n	8008326 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69da      	ldr	r2, [r3, #28]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	43db      	mvns	r3, r3
 80082f0:	ea02 0103 	and.w	r1, r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	6812      	ldr	r2, [r2, #0]
 8008306:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	2b0a      	cmp	r3, #10
 800830e:	d003      	beq.n	8008318 <HAL_DMA2D_ConfigLayer+0xf4>
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	2b09      	cmp	r3, #9
 8008316:	d106      	bne.n	8008326 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	68da      	ldr	r2, [r3, #12]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008324:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	ff03000f 	.word	0xff03000f

08008348 <HAL_DMA2D_EnableDeadTime>:
  * @brief Enable DMA2D dead time feature.
  * @param hdma2d DMA2D handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_EnableDeadTime(DMA2D_HandleTypeDef *hdma2d)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdma2d);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008356:	2b01      	cmp	r3, #1
 8008358:	d101      	bne.n	800835e <HAL_DMA2D_EnableDeadTime+0x16>
 800835a:	2302      	movs	r3, #2
 800835c:	e018      	b.n	8008390 <HAL_DMA2D_EnableDeadTime+0x48>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2202      	movs	r2, #2
 800836a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set DMA2D_AMTCR EN bit */
  SET_BIT(hdma2d->Instance->AMTCR, DMA2D_AMTCR_EN);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f042 0201 	orr.w	r2, r2, #1
 800837c:	64da      	str	r2, [r3, #76]	; 0x4c

  hdma2d->State = HAL_DMA2D_STATE_READY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_DMA2D_ConfigDeadTime>:
  * @param hdma2d DMA2D handle.
  * @param DeadTime dead time value.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigDeadTime(DMA2D_HandleTypeDef *hdma2d, uint8_t DeadTime)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  /* Process Locked */
  __HAL_LOCK(hdma2d);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_DMA2D_ConfigDeadTime+0x1a>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e01b      	b.n	80083ee <HAL_DMA2D_ConfigDeadTime+0x52>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2202      	movs	r2, #2
 80083c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set DMA2D_AMTCR DT field */
  MODIFY_REG(hdma2d->Instance->AMTCR, DMA2D_AMTCR_DT, (((uint32_t) DeadTime) << DMA2D_AMTCR_DT_Pos));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083cc:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	021a      	lsls	r2, r3, #8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	64da      	str	r2, [r3, #76]	; 0x4c

  hdma2d->State = HAL_DMA2D_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
	...

080083fc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800840e:	4b23      	ldr	r3, [pc, #140]	; (800849c <HAL_FLASH_Program+0xa0>)
 8008410:	7e1b      	ldrb	r3, [r3, #24]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d101      	bne.n	800841a <HAL_FLASH_Program+0x1e>
 8008416:	2302      	movs	r3, #2
 8008418:	e03b      	b.n	8008492 <HAL_FLASH_Program+0x96>
 800841a:	4b20      	ldr	r3, [pc, #128]	; (800849c <HAL_FLASH_Program+0xa0>)
 800841c:	2201      	movs	r2, #1
 800841e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008420:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008424:	f000 f870 	bl	8008508 <FLASH_WaitForLastOperation>
 8008428:	4603      	mov	r3, r0
 800842a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d12b      	bne.n	800848a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d105      	bne.n	8008444 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8008438:	783b      	ldrb	r3, [r7, #0]
 800843a:	4619      	mov	r1, r3
 800843c:	68b8      	ldr	r0, [r7, #8]
 800843e:	f000 f91b 	bl	8008678 <FLASH_Program_Byte>
 8008442:	e016      	b.n	8008472 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d105      	bne.n	8008456 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800844a:	883b      	ldrh	r3, [r7, #0]
 800844c:	4619      	mov	r1, r3
 800844e:	68b8      	ldr	r0, [r7, #8]
 8008450:	f000 f8ee 	bl	8008630 <FLASH_Program_HalfWord>
 8008454:	e00d      	b.n	8008472 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b02      	cmp	r3, #2
 800845a:	d105      	bne.n	8008468 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	4619      	mov	r1, r3
 8008460:	68b8      	ldr	r0, [r7, #8]
 8008462:	f000 f8c3 	bl	80085ec <FLASH_Program_Word>
 8008466:	e004      	b.n	8008472 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8008468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800846c:	68b8      	ldr	r0, [r7, #8]
 800846e:	f000 f88b 	bl	8008588 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008472:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008476:	f000 f847 	bl	8008508 <FLASH_WaitForLastOperation>
 800847a:	4603      	mov	r3, r0
 800847c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800847e:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <HAL_FLASH_Program+0xa4>)
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	4a07      	ldr	r2, [pc, #28]	; (80084a0 <HAL_FLASH_Program+0xa4>)
 8008484:	f023 0301 	bic.w	r3, r3, #1
 8008488:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800848a:	4b04      	ldr	r3, [pc, #16]	; (800849c <HAL_FLASH_Program+0xa0>)
 800848c:	2200      	movs	r2, #0
 800848e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20000bb0 	.word	0x20000bb0
 80084a0:	40023c00 	.word	0x40023c00

080084a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80084ae:	4b0b      	ldr	r3, [pc, #44]	; (80084dc <HAL_FLASH_Unlock+0x38>)
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	da0b      	bge.n	80084ce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80084b6:	4b09      	ldr	r3, [pc, #36]	; (80084dc <HAL_FLASH_Unlock+0x38>)
 80084b8:	4a09      	ldr	r2, [pc, #36]	; (80084e0 <HAL_FLASH_Unlock+0x3c>)
 80084ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80084bc:	4b07      	ldr	r3, [pc, #28]	; (80084dc <HAL_FLASH_Unlock+0x38>)
 80084be:	4a09      	ldr	r2, [pc, #36]	; (80084e4 <HAL_FLASH_Unlock+0x40>)
 80084c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80084c2:	4b06      	ldr	r3, [pc, #24]	; (80084dc <HAL_FLASH_Unlock+0x38>)
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da01      	bge.n	80084ce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80084ce:	79fb      	ldrb	r3, [r7, #7]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	40023c00 	.word	0x40023c00
 80084e0:	45670123 	.word	0x45670123
 80084e4:	cdef89ab 	.word	0xcdef89ab

080084e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80084ec:	4b05      	ldr	r3, [pc, #20]	; (8008504 <HAL_FLASH_Lock+0x1c>)
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	4a04      	ldr	r2, [pc, #16]	; (8008504 <HAL_FLASH_Lock+0x1c>)
 80084f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084f6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	40023c00 	.word	0x40023c00

08008508 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008510:	2300      	movs	r3, #0
 8008512:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008514:	4b1a      	ldr	r3, [pc, #104]	; (8008580 <FLASH_WaitForLastOperation+0x78>)
 8008516:	2200      	movs	r2, #0
 8008518:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800851a:	f7ff fc67 	bl	8007dec <HAL_GetTick>
 800851e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008520:	e010      	b.n	8008544 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008528:	d00c      	beq.n	8008544 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d007      	beq.n	8008540 <FLASH_WaitForLastOperation+0x38>
 8008530:	f7ff fc5c 	bl	8007dec <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	429a      	cmp	r2, r3
 800853e:	d201      	bcs.n	8008544 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e019      	b.n	8008578 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008544:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <FLASH_WaitForLastOperation+0x7c>)
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e8      	bne.n	8008522 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008550:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <FLASH_WaitForLastOperation+0x7c>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <FLASH_WaitForLastOperation+0x7c>)
 800855e:	2201      	movs	r2, #1
 8008560:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <FLASH_WaitForLastOperation+0x7c>)
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800856e:	f000 f8a5 	bl	80086bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
  
}  
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20000bb0 	.word	0x20000bb0
 8008584:	40023c00 	.word	0x40023c00

08008588 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008594:	4b14      	ldr	r3, [pc, #80]	; (80085e8 <FLASH_Program_DoubleWord+0x60>)
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	4a13      	ldr	r2, [pc, #76]	; (80085e8 <FLASH_Program_DoubleWord+0x60>)
 800859a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800859e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80085a0:	4b11      	ldr	r3, [pc, #68]	; (80085e8 <FLASH_Program_DoubleWord+0x60>)
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	4a10      	ldr	r2, [pc, #64]	; (80085e8 <FLASH_Program_DoubleWord+0x60>)
 80085a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80085aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80085ac:	4b0e      	ldr	r3, [pc, #56]	; (80085e8 <FLASH_Program_DoubleWord+0x60>)
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	4a0d      	ldr	r2, [pc, #52]	; (80085e8 <FLASH_Program_DoubleWord+0x60>)
 80085b2:	f043 0301 	orr.w	r3, r3, #1
 80085b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80085be:	f3bf 8f6f 	isb	sy
}
 80085c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80085c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	000a      	movs	r2, r1
 80085d2:	2300      	movs	r3, #0
 80085d4:	68f9      	ldr	r1, [r7, #12]
 80085d6:	3104      	adds	r1, #4
 80085d8:	4613      	mov	r3, r2
 80085da:	600b      	str	r3, [r1, #0]
}
 80085dc:	bf00      	nop
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	40023c00 	.word	0x40023c00

080085ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80085f6:	4b0d      	ldr	r3, [pc, #52]	; (800862c <FLASH_Program_Word+0x40>)
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	4a0c      	ldr	r2, [pc, #48]	; (800862c <FLASH_Program_Word+0x40>)
 80085fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008600:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8008602:	4b0a      	ldr	r3, [pc, #40]	; (800862c <FLASH_Program_Word+0x40>)
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	4a09      	ldr	r2, [pc, #36]	; (800862c <FLASH_Program_Word+0x40>)
 8008608:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800860c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800860e:	4b07      	ldr	r3, [pc, #28]	; (800862c <FLASH_Program_Word+0x40>)
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	4a06      	ldr	r2, [pc, #24]	; (800862c <FLASH_Program_Word+0x40>)
 8008614:	f043 0301 	orr.w	r3, r3, #1
 8008618:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	601a      	str	r2, [r3, #0]
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	40023c00 	.word	0x40023c00

08008630 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800863c:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <FLASH_Program_HalfWord+0x44>)
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	4a0c      	ldr	r2, [pc, #48]	; (8008674 <FLASH_Program_HalfWord+0x44>)
 8008642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008646:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8008648:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <FLASH_Program_HalfWord+0x44>)
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	4a09      	ldr	r2, [pc, #36]	; (8008674 <FLASH_Program_HalfWord+0x44>)
 800864e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008654:	4b07      	ldr	r3, [pc, #28]	; (8008674 <FLASH_Program_HalfWord+0x44>)
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	4a06      	ldr	r2, [pc, #24]	; (8008674 <FLASH_Program_HalfWord+0x44>)
 800865a:	f043 0301 	orr.w	r3, r3, #1
 800865e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	887a      	ldrh	r2, [r7, #2]
 8008664:	801a      	strh	r2, [r3, #0]
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	40023c00 	.word	0x40023c00

08008678 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008684:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <FLASH_Program_Byte+0x40>)
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	4a0b      	ldr	r2, [pc, #44]	; (80086b8 <FLASH_Program_Byte+0x40>)
 800868a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800868e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8008690:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <FLASH_Program_Byte+0x40>)
 8008692:	4a09      	ldr	r2, [pc, #36]	; (80086b8 <FLASH_Program_Byte+0x40>)
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008698:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <FLASH_Program_Byte+0x40>)
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	4a06      	ldr	r2, [pc, #24]	; (80086b8 <FLASH_Program_Byte+0x40>)
 800869e:	f043 0301 	orr.w	r3, r3, #1
 80086a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	78fa      	ldrb	r2, [r7, #3]
 80086a8:	701a      	strb	r2, [r3, #0]
}
 80086aa:	bf00      	nop
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	40023c00 	.word	0x40023c00

080086bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80086c0:	4b2f      	ldr	r3, [pc, #188]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f003 0310 	and.w	r3, r3, #16
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d008      	beq.n	80086de <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80086cc:	4b2d      	ldr	r3, [pc, #180]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	f043 0310 	orr.w	r3, r3, #16
 80086d4:	4a2b      	ldr	r2, [pc, #172]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 80086d6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80086d8:	4b29      	ldr	r3, [pc, #164]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 80086da:	2210      	movs	r2, #16
 80086dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80086de:	4b28      	ldr	r3, [pc, #160]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d008      	beq.n	80086fc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80086ea:	4b26      	ldr	r3, [pc, #152]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	f043 0308 	orr.w	r3, r3, #8
 80086f2:	4a24      	ldr	r2, [pc, #144]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 80086f4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80086f6:	4b22      	ldr	r3, [pc, #136]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 80086f8:	2220      	movs	r2, #32
 80086fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80086fc:	4b20      	ldr	r3, [pc, #128]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008704:	2b00      	cmp	r3, #0
 8008706:	d008      	beq.n	800871a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8008708:	4b1e      	ldr	r3, [pc, #120]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	f043 0304 	orr.w	r3, r3, #4
 8008710:	4a1c      	ldr	r2, [pc, #112]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 8008712:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008714:	4b1a      	ldr	r3, [pc, #104]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 8008716:	2240      	movs	r2, #64	; 0x40
 8008718:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800871a:	4b19      	ldr	r3, [pc, #100]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008722:	2b00      	cmp	r3, #0
 8008724:	d008      	beq.n	8008738 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008726:	4b17      	ldr	r3, [pc, #92]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	f043 0302 	orr.w	r3, r3, #2
 800872e:	4a15      	ldr	r2, [pc, #84]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 8008730:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008732:	4b13      	ldr	r3, [pc, #76]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 8008734:	2280      	movs	r2, #128	; 0x80
 8008736:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8008738:	4b11      	ldr	r3, [pc, #68]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008740:	2b00      	cmp	r3, #0
 8008742:	d009      	beq.n	8008758 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8008744:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	f043 0301 	orr.w	r3, r3, #1
 800874c:	4a0d      	ldr	r2, [pc, #52]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 800874e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8008750:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 8008752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008756:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008758:	4b09      	ldr	r3, [pc, #36]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d008      	beq.n	8008776 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8008764:	4b07      	ldr	r3, [pc, #28]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	f043 0320 	orr.w	r3, r3, #32
 800876c:	4a05      	ldr	r2, [pc, #20]	; (8008784 <FLASH_SetErrorCode+0xc8>)
 800876e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8008770:	4b03      	ldr	r3, [pc, #12]	; (8008780 <FLASH_SetErrorCode+0xc4>)
 8008772:	2202      	movs	r2, #2
 8008774:	60da      	str	r2, [r3, #12]
  }
}
 8008776:	bf00      	nop
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	40023c00 	.word	0x40023c00
 8008784:	20000bb0 	.word	0x20000bb0

08008788 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d102      	bne.n	80087a4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	e010      	b.n	80087c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d103      	bne.n	80087b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80087aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	e009      	b.n	80087c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d103      	bne.n	80087c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80087b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	e002      	b.n	80087c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80087c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80087c4:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b0b      	cmp	r3, #11
 80087ca:	d902      	bls.n	80087d2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3304      	adds	r3, #4
 80087d0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80087d2:	4b13      	ldr	r3, [pc, #76]	; (8008820 <FLASH_Erase_Sector+0x98>)
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	4a12      	ldr	r2, [pc, #72]	; (8008820 <FLASH_Erase_Sector+0x98>)
 80087d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80087de:	4b10      	ldr	r3, [pc, #64]	; (8008820 <FLASH_Erase_Sector+0x98>)
 80087e0:	691a      	ldr	r2, [r3, #16]
 80087e2:	490f      	ldr	r1, [pc, #60]	; (8008820 <FLASH_Erase_Sector+0x98>)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80087ea:	4b0d      	ldr	r3, [pc, #52]	; (8008820 <FLASH_Erase_Sector+0x98>)
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	4a0c      	ldr	r2, [pc, #48]	; (8008820 <FLASH_Erase_Sector+0x98>)
 80087f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80087f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80087f6:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <FLASH_Erase_Sector+0x98>)
 80087f8:	691a      	ldr	r2, [r3, #16]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	00db      	lsls	r3, r3, #3
 80087fe:	4313      	orrs	r3, r2
 8008800:	4a07      	ldr	r2, [pc, #28]	; (8008820 <FLASH_Erase_Sector+0x98>)
 8008802:	f043 0302 	orr.w	r3, r3, #2
 8008806:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008808:	4b05      	ldr	r3, [pc, #20]	; (8008820 <FLASH_Erase_Sector+0x98>)
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	4a04      	ldr	r2, [pc, #16]	; (8008820 <FLASH_Erase_Sector+0x98>)
 800880e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008812:	6113      	str	r3, [r2, #16]
}
 8008814:	bf00      	nop
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	40023c00 	.word	0x40023c00

08008824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008824:	b480      	push	{r7}
 8008826:	b089      	sub	sp, #36	; 0x24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800882e:	2300      	movs	r3, #0
 8008830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008832:	2300      	movs	r3, #0
 8008834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008836:	2300      	movs	r3, #0
 8008838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800883a:	2300      	movs	r3, #0
 800883c:	61fb      	str	r3, [r7, #28]
 800883e:	e177      	b.n	8008b30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008840:	2201      	movs	r2, #1
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	fa02 f303 	lsl.w	r3, r2, r3
 8008848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	4013      	ands	r3, r2
 8008852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	429a      	cmp	r2, r3
 800885a:	f040 8166 	bne.w	8008b2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	2b01      	cmp	r3, #1
 8008868:	d005      	beq.n	8008876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008872:	2b02      	cmp	r3, #2
 8008874:	d130      	bne.n	80088d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	2203      	movs	r2, #3
 8008882:	fa02 f303 	lsl.w	r3, r2, r3
 8008886:	43db      	mvns	r3, r3
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	4013      	ands	r3, r2
 800888c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	fa02 f303 	lsl.w	r3, r2, r3
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	4313      	orrs	r3, r2
 800889e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	69ba      	ldr	r2, [r7, #24]
 80088a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80088ac:	2201      	movs	r2, #1
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	fa02 f303 	lsl.w	r3, r2, r3
 80088b4:	43db      	mvns	r3, r3
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	4013      	ands	r3, r2
 80088ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	091b      	lsrs	r3, r3, #4
 80088c2:	f003 0201 	and.w	r2, r3, #1
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	fa02 f303 	lsl.w	r3, r2, r3
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f003 0303 	and.w	r3, r3, #3
 80088e0:	2b03      	cmp	r3, #3
 80088e2:	d017      	beq.n	8008914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	2203      	movs	r2, #3
 80088f0:	fa02 f303 	lsl.w	r3, r2, r3
 80088f4:	43db      	mvns	r3, r3
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	4013      	ands	r3, r2
 80088fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	fa02 f303 	lsl.w	r3, r2, r3
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	4313      	orrs	r3, r2
 800890c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	69ba      	ldr	r2, [r7, #24]
 8008912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f003 0303 	and.w	r3, r3, #3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d123      	bne.n	8008968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	08da      	lsrs	r2, r3, #3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3208      	adds	r2, #8
 8008928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	220f      	movs	r2, #15
 8008938:	fa02 f303 	lsl.w	r3, r2, r3
 800893c:	43db      	mvns	r3, r3
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	4013      	ands	r3, r2
 8008942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	691a      	ldr	r2, [r3, #16]
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	f003 0307 	and.w	r3, r3, #7
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	fa02 f303 	lsl.w	r3, r2, r3
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	4313      	orrs	r3, r2
 8008958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	08da      	lsrs	r2, r3, #3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	3208      	adds	r2, #8
 8008962:	69b9      	ldr	r1, [r7, #24]
 8008964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	2203      	movs	r2, #3
 8008974:	fa02 f303 	lsl.w	r3, r2, r3
 8008978:	43db      	mvns	r3, r3
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	4013      	ands	r3, r2
 800897e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f003 0203 	and.w	r2, r3, #3
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	fa02 f303 	lsl.w	r3, r2, r3
 8008990:	69ba      	ldr	r2, [r7, #24]
 8008992:	4313      	orrs	r3, r2
 8008994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 80c0 	beq.w	8008b2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	4b66      	ldr	r3, [pc, #408]	; (8008b48 <HAL_GPIO_Init+0x324>)
 80089b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b2:	4a65      	ldr	r2, [pc, #404]	; (8008b48 <HAL_GPIO_Init+0x324>)
 80089b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089b8:	6453      	str	r3, [r2, #68]	; 0x44
 80089ba:	4b63      	ldr	r3, [pc, #396]	; (8008b48 <HAL_GPIO_Init+0x324>)
 80089bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089c6:	4a61      	ldr	r2, [pc, #388]	; (8008b4c <HAL_GPIO_Init+0x328>)
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	089b      	lsrs	r3, r3, #2
 80089cc:	3302      	adds	r3, #2
 80089ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	f003 0303 	and.w	r3, r3, #3
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	220f      	movs	r2, #15
 80089de:	fa02 f303 	lsl.w	r3, r2, r3
 80089e2:	43db      	mvns	r3, r3
 80089e4:	69ba      	ldr	r2, [r7, #24]
 80089e6:	4013      	ands	r3, r2
 80089e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a58      	ldr	r2, [pc, #352]	; (8008b50 <HAL_GPIO_Init+0x32c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d037      	beq.n	8008a62 <HAL_GPIO_Init+0x23e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a57      	ldr	r2, [pc, #348]	; (8008b54 <HAL_GPIO_Init+0x330>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d031      	beq.n	8008a5e <HAL_GPIO_Init+0x23a>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a56      	ldr	r2, [pc, #344]	; (8008b58 <HAL_GPIO_Init+0x334>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d02b      	beq.n	8008a5a <HAL_GPIO_Init+0x236>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a55      	ldr	r2, [pc, #340]	; (8008b5c <HAL_GPIO_Init+0x338>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d025      	beq.n	8008a56 <HAL_GPIO_Init+0x232>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a54      	ldr	r2, [pc, #336]	; (8008b60 <HAL_GPIO_Init+0x33c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d01f      	beq.n	8008a52 <HAL_GPIO_Init+0x22e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a53      	ldr	r2, [pc, #332]	; (8008b64 <HAL_GPIO_Init+0x340>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d019      	beq.n	8008a4e <HAL_GPIO_Init+0x22a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a52      	ldr	r2, [pc, #328]	; (8008b68 <HAL_GPIO_Init+0x344>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d013      	beq.n	8008a4a <HAL_GPIO_Init+0x226>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a51      	ldr	r2, [pc, #324]	; (8008b6c <HAL_GPIO_Init+0x348>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d00d      	beq.n	8008a46 <HAL_GPIO_Init+0x222>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a50      	ldr	r2, [pc, #320]	; (8008b70 <HAL_GPIO_Init+0x34c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d007      	beq.n	8008a42 <HAL_GPIO_Init+0x21e>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a4f      	ldr	r2, [pc, #316]	; (8008b74 <HAL_GPIO_Init+0x350>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d101      	bne.n	8008a3e <HAL_GPIO_Init+0x21a>
 8008a3a:	2309      	movs	r3, #9
 8008a3c:	e012      	b.n	8008a64 <HAL_GPIO_Init+0x240>
 8008a3e:	230a      	movs	r3, #10
 8008a40:	e010      	b.n	8008a64 <HAL_GPIO_Init+0x240>
 8008a42:	2308      	movs	r3, #8
 8008a44:	e00e      	b.n	8008a64 <HAL_GPIO_Init+0x240>
 8008a46:	2307      	movs	r3, #7
 8008a48:	e00c      	b.n	8008a64 <HAL_GPIO_Init+0x240>
 8008a4a:	2306      	movs	r3, #6
 8008a4c:	e00a      	b.n	8008a64 <HAL_GPIO_Init+0x240>
 8008a4e:	2305      	movs	r3, #5
 8008a50:	e008      	b.n	8008a64 <HAL_GPIO_Init+0x240>
 8008a52:	2304      	movs	r3, #4
 8008a54:	e006      	b.n	8008a64 <HAL_GPIO_Init+0x240>
 8008a56:	2303      	movs	r3, #3
 8008a58:	e004      	b.n	8008a64 <HAL_GPIO_Init+0x240>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e002      	b.n	8008a64 <HAL_GPIO_Init+0x240>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e000      	b.n	8008a64 <HAL_GPIO_Init+0x240>
 8008a62:	2300      	movs	r3, #0
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	f002 0203 	and.w	r2, r2, #3
 8008a6a:	0092      	lsls	r2, r2, #2
 8008a6c:	4093      	lsls	r3, r2
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a74:	4935      	ldr	r1, [pc, #212]	; (8008b4c <HAL_GPIO_Init+0x328>)
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	089b      	lsrs	r3, r3, #2
 8008a7a:	3302      	adds	r3, #2
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a82:	4b3d      	ldr	r3, [pc, #244]	; (8008b78 <HAL_GPIO_Init+0x354>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	43db      	mvns	r3, r3
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008aa6:	4a34      	ldr	r2, [pc, #208]	; (8008b78 <HAL_GPIO_Init+0x354>)
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008aac:	4b32      	ldr	r3, [pc, #200]	; (8008b78 <HAL_GPIO_Init+0x354>)
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	43db      	mvns	r3, r3
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ad0:	4a29      	ldr	r2, [pc, #164]	; (8008b78 <HAL_GPIO_Init+0x354>)
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008ad6:	4b28      	ldr	r3, [pc, #160]	; (8008b78 <HAL_GPIO_Init+0x354>)
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	43db      	mvns	r3, r3
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008afa:	4a1f      	ldr	r2, [pc, #124]	; (8008b78 <HAL_GPIO_Init+0x354>)
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b00:	4b1d      	ldr	r3, [pc, #116]	; (8008b78 <HAL_GPIO_Init+0x354>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b24:	4a14      	ldr	r2, [pc, #80]	; (8008b78 <HAL_GPIO_Init+0x354>)
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	61fb      	str	r3, [r7, #28]
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	2b0f      	cmp	r3, #15
 8008b34:	f67f ae84 	bls.w	8008840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b38:	bf00      	nop
 8008b3a:	bf00      	nop
 8008b3c:	3724      	adds	r7, #36	; 0x24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	40023800 	.word	0x40023800
 8008b4c:	40013800 	.word	0x40013800
 8008b50:	40020000 	.word	0x40020000
 8008b54:	40020400 	.word	0x40020400
 8008b58:	40020800 	.word	0x40020800
 8008b5c:	40020c00 	.word	0x40020c00
 8008b60:	40021000 	.word	0x40021000
 8008b64:	40021400 	.word	0x40021400
 8008b68:	40021800 	.word	0x40021800
 8008b6c:	40021c00 	.word	0x40021c00
 8008b70:	40022000 	.word	0x40022000
 8008b74:	40022400 	.word	0x40022400
 8008b78:	40013c00 	.word	0x40013c00

08008b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	691a      	ldr	r2, [r3, #16]
 8008b8c:	887b      	ldrh	r3, [r7, #2]
 8008b8e:	4013      	ands	r3, r2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008b94:	2301      	movs	r3, #1
 8008b96:	73fb      	strb	r3, [r7, #15]
 8008b98:	e001      	b.n	8008b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	807b      	strh	r3, [r7, #2]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008bbc:	787b      	ldrb	r3, [r7, #1]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bc2:	887a      	ldrh	r2, [r7, #2]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008bc8:	e003      	b.n	8008bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008bca:	887b      	ldrh	r3, [r7, #2]
 8008bcc:	041a      	lsls	r2, r3, #16
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	619a      	str	r2, [r3, #24]
}
 8008bd2:	bf00      	nop
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
	...

08008be0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e0bf      	b.n	8008d72 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7fc fcfc 	bl	8005604 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	699a      	ldr	r2, [r3, #24]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008c22:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6999      	ldr	r1, [r3, #24]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008c38:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6899      	ldr	r1, [r3, #8]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b4a      	ldr	r3, [pc, #296]	; (8008d7c <HAL_LTDC_Init+0x19c>)
 8008c54:	400b      	ands	r3, r1
 8008c56:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	695b      	ldr	r3, [r3, #20]
 8008c5c:	041b      	lsls	r3, r3, #16
 8008c5e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6899      	ldr	r1, [r3, #8]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	699a      	ldr	r2, [r3, #24]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68d9      	ldr	r1, [r3, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	4b3e      	ldr	r3, [pc, #248]	; (8008d7c <HAL_LTDC_Init+0x19c>)
 8008c82:	400b      	ands	r3, r1
 8008c84:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	041b      	lsls	r3, r3, #16
 8008c8c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68d9      	ldr	r1, [r3, #12]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a1a      	ldr	r2, [r3, #32]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6919      	ldr	r1, [r3, #16]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	4b33      	ldr	r3, [pc, #204]	; (8008d7c <HAL_LTDC_Init+0x19c>)
 8008cb0:	400b      	ands	r3, r1
 8008cb2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb8:	041b      	lsls	r3, r3, #16
 8008cba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6919      	ldr	r1, [r3, #16]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6959      	ldr	r1, [r3, #20]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	4b27      	ldr	r3, [pc, #156]	; (8008d7c <HAL_LTDC_Init+0x19c>)
 8008cde:	400b      	ands	r3, r1
 8008ce0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	041b      	lsls	r3, r3, #16
 8008ce8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	6959      	ldr	r1, [r3, #20]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d06:	021b      	lsls	r3, r3, #8
 8008d08:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008d10:	041b      	lsls	r3, r3, #16
 8008d12:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008d36:	431a      	orrs	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f042 0206 	orr.w	r2, r2, #6
 8008d4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699a      	ldr	r2, [r3, #24]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	f000f800 	.word	0xf000f800

08008d80 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008d80:	b5b0      	push	{r4, r5, r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d101      	bne.n	8008d9a <HAL_LTDC_ConfigLayer+0x1a>
 8008d96:	2302      	movs	r3, #2
 8008d98:	e02c      	b.n	8008df4 <HAL_LTDC_ConfigLayer+0x74>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2202      	movs	r2, #2
 8008da6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2134      	movs	r1, #52	; 0x34
 8008db0:	fb01 f303 	mul.w	r3, r1, r3
 8008db4:	4413      	add	r3, r2
 8008db6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	461d      	mov	r5, r3
 8008dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	68b9      	ldr	r1, [r7, #8]
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 f847 	bl	8008e68 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2201      	movs	r2, #1
 8008de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bdb0      	pop	{r4, r5, r7, pc}

08008dfc <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d101      	bne.n	8008e16 <HAL_LTDC_SetAddress+0x1a>
 8008e12:	2302      	movs	r3, #2
 8008e14:	e024      	b.n	8008e60 <HAL_LTDC_SetAddress+0x64>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2202      	movs	r2, #2
 8008e22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2234      	movs	r2, #52	; 0x34
 8008e2a:	fb02 f303 	mul.w	r3, r2, r3
 8008e2e:	3338      	adds	r3, #56	; 0x38
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	6979      	ldr	r1, [r7, #20]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f811 	bl	8008e68 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b089      	sub	sp, #36	; 0x24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	0c1b      	lsrs	r3, r3, #16
 8008e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e84:	4413      	add	r3, r2
 8008e86:	041b      	lsls	r3, r3, #16
 8008e88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	01db      	lsls	r3, r3, #7
 8008e94:	4413      	add	r3, r2
 8008e96:	3384      	adds	r3, #132	; 0x84
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	6812      	ldr	r2, [r2, #0]
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	01d2      	lsls	r2, r2, #7
 8008ea4:	440a      	add	r2, r1
 8008ea6:	3284      	adds	r2, #132	; 0x84
 8008ea8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008eac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	0c1b      	lsrs	r3, r3, #16
 8008eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008ebe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008ec0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	01db      	lsls	r3, r3, #7
 8008ecc:	440b      	add	r3, r1
 8008ece:	3384      	adds	r3, #132	; 0x84
 8008ed0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008ed6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	68da      	ldr	r2, [r3, #12]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ee6:	4413      	add	r3, r2
 8008ee8:	041b      	lsls	r3, r3, #16
 8008eea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	01db      	lsls	r3, r3, #7
 8008ef6:	4413      	add	r3, r2
 8008ef8:	3384      	adds	r3, #132	; 0x84
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	6812      	ldr	r2, [r2, #0]
 8008f00:	4611      	mov	r1, r2
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	01d2      	lsls	r2, r2, #7
 8008f06:	440a      	add	r2, r1
 8008f08:	3284      	adds	r2, #132	; 0x84
 8008f0a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008f0e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f1e:	4413      	add	r3, r2
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4619      	mov	r1, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	01db      	lsls	r3, r3, #7
 8008f2c:	440b      	add	r3, r1
 8008f2e:	3384      	adds	r3, #132	; 0x84
 8008f30:	4619      	mov	r1, r3
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	01db      	lsls	r3, r3, #7
 8008f42:	4413      	add	r3, r2
 8008f44:	3384      	adds	r3, #132	; 0x84
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	01d2      	lsls	r2, r2, #7
 8008f52:	440a      	add	r2, r1
 8008f54:	3284      	adds	r2, #132	; 0x84
 8008f56:	f023 0307 	bic.w	r3, r3, #7
 8008f5a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	461a      	mov	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	01db      	lsls	r3, r3, #7
 8008f66:	4413      	add	r3, r2
 8008f68:	3384      	adds	r3, #132	; 0x84
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f78:	021b      	lsls	r3, r3, #8
 8008f7a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008f82:	041b      	lsls	r3, r3, #16
 8008f84:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	061b      	lsls	r3, r3, #24
 8008f8c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	01db      	lsls	r3, r3, #7
 8008f98:	4413      	add	r3, r2
 8008f9a:	3384      	adds	r3, #132	; 0x84
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	01db      	lsls	r3, r3, #7
 8008fa8:	4413      	add	r3, r2
 8008faa:	3384      	adds	r3, #132	; 0x84
 8008fac:	461a      	mov	r2, r3
 8008fae:	2300      	movs	r3, #0
 8008fb0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fb8:	461a      	mov	r2, r3
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	431a      	orrs	r2, r3
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	431a      	orrs	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	01db      	lsls	r3, r3, #7
 8008fcc:	440b      	add	r3, r1
 8008fce:	3384      	adds	r3, #132	; 0x84
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	01db      	lsls	r3, r3, #7
 8008fe2:	4413      	add	r3, r2
 8008fe4:	3384      	adds	r3, #132	; 0x84
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	6812      	ldr	r2, [r2, #0]
 8008fec:	4611      	mov	r1, r2
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	01d2      	lsls	r2, r2, #7
 8008ff2:	440a      	add	r2, r1
 8008ff4:	3284      	adds	r2, #132	; 0x84
 8008ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ffa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	01db      	lsls	r3, r3, #7
 8009006:	4413      	add	r3, r2
 8009008:	3384      	adds	r3, #132	; 0x84
 800900a:	461a      	mov	r2, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	01db      	lsls	r3, r3, #7
 800901c:	4413      	add	r3, r2
 800901e:	3384      	adds	r3, #132	; 0x84
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	6812      	ldr	r2, [r2, #0]
 8009026:	4611      	mov	r1, r2
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	01d2      	lsls	r2, r2, #7
 800902c:	440a      	add	r2, r1
 800902e:	3284      	adds	r2, #132	; 0x84
 8009030:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009034:	f023 0307 	bic.w	r3, r3, #7
 8009038:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	69da      	ldr	r2, [r3, #28]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	68f9      	ldr	r1, [r7, #12]
 8009044:	6809      	ldr	r1, [r1, #0]
 8009046:	4608      	mov	r0, r1
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	01c9      	lsls	r1, r1, #7
 800904c:	4401      	add	r1, r0
 800904e:	3184      	adds	r1, #132	; 0x84
 8009050:	4313      	orrs	r3, r2
 8009052:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	461a      	mov	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	01db      	lsls	r3, r3, #7
 800905e:	4413      	add	r3, r2
 8009060:	3384      	adds	r3, #132	; 0x84
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	461a      	mov	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	01db      	lsls	r3, r3, #7
 800906e:	4413      	add	r3, r2
 8009070:	3384      	adds	r3, #132	; 0x84
 8009072:	461a      	mov	r2, r3
 8009074:	2300      	movs	r3, #0
 8009076:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	01db      	lsls	r3, r3, #7
 8009082:	4413      	add	r3, r2
 8009084:	3384      	adds	r3, #132	; 0x84
 8009086:	461a      	mov	r2, r3
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d102      	bne.n	800909c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8009096:	2304      	movs	r3, #4
 8009098:	61fb      	str	r3, [r7, #28]
 800909a:	e01b      	b.n	80090d4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d102      	bne.n	80090aa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80090a4:	2303      	movs	r3, #3
 80090a6:	61fb      	str	r3, [r7, #28]
 80090a8:	e014      	b.n	80090d4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	d00b      	beq.n	80090ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d007      	beq.n	80090ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80090be:	2b03      	cmp	r3, #3
 80090c0:	d003      	beq.n	80090ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80090c6:	2b07      	cmp	r3, #7
 80090c8:	d102      	bne.n	80090d0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80090ca:	2302      	movs	r3, #2
 80090cc:	61fb      	str	r3, [r7, #28]
 80090ce:	e001      	b.n	80090d4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80090d0:	2301      	movs	r3, #1
 80090d2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	461a      	mov	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	01db      	lsls	r3, r3, #7
 80090de:	4413      	add	r3, r2
 80090e0:	3384      	adds	r3, #132	; 0x84
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	6812      	ldr	r2, [r2, #0]
 80090e8:	4611      	mov	r1, r2
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	01d2      	lsls	r2, r2, #7
 80090ee:	440a      	add	r2, r1
 80090f0:	3284      	adds	r2, #132	; 0x84
 80090f2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80090f6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	fb02 f303 	mul.w	r3, r2, r3
 8009102:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	6859      	ldr	r1, [r3, #4]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	1acb      	subs	r3, r1, r3
 800910e:	69f9      	ldr	r1, [r7, #28]
 8009110:	fb01 f303 	mul.w	r3, r1, r3
 8009114:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009116:	68f9      	ldr	r1, [r7, #12]
 8009118:	6809      	ldr	r1, [r1, #0]
 800911a:	4608      	mov	r0, r1
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	01c9      	lsls	r1, r1, #7
 8009120:	4401      	add	r1, r0
 8009122:	3184      	adds	r1, #132	; 0x84
 8009124:	4313      	orrs	r3, r2
 8009126:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	01db      	lsls	r3, r3, #7
 8009132:	4413      	add	r3, r2
 8009134:	3384      	adds	r3, #132	; 0x84
 8009136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	4611      	mov	r1, r2
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	01d2      	lsls	r2, r2, #7
 8009142:	440a      	add	r2, r1
 8009144:	3284      	adds	r2, #132	; 0x84
 8009146:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800914a:	f023 0307 	bic.w	r3, r3, #7
 800914e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	461a      	mov	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	01db      	lsls	r3, r3, #7
 800915a:	4413      	add	r3, r2
 800915c:	3384      	adds	r3, #132	; 0x84
 800915e:	461a      	mov	r2, r3
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	01db      	lsls	r3, r3, #7
 8009170:	4413      	add	r3, r2
 8009172:	3384      	adds	r3, #132	; 0x84
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	6812      	ldr	r2, [r2, #0]
 800917a:	4611      	mov	r1, r2
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	01d2      	lsls	r2, r2, #7
 8009180:	440a      	add	r2, r1
 8009182:	3284      	adds	r2, #132	; 0x84
 8009184:	f043 0301 	orr.w	r3, r3, #1
 8009188:	6013      	str	r3, [r2, #0]
}
 800918a:	bf00      	nop
 800918c:	3724      	adds	r7, #36	; 0x24
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
	...

08009198 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80091a2:	2300      	movs	r3, #0
 80091a4:	603b      	str	r3, [r7, #0]
 80091a6:	4b20      	ldr	r3, [pc, #128]	; (8009228 <HAL_PWREx_EnableOverDrive+0x90>)
 80091a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091aa:	4a1f      	ldr	r2, [pc, #124]	; (8009228 <HAL_PWREx_EnableOverDrive+0x90>)
 80091ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091b0:	6413      	str	r3, [r2, #64]	; 0x40
 80091b2:	4b1d      	ldr	r3, [pc, #116]	; (8009228 <HAL_PWREx_EnableOverDrive+0x90>)
 80091b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80091be:	4b1b      	ldr	r3, [pc, #108]	; (800922c <HAL_PWREx_EnableOverDrive+0x94>)
 80091c0:	2201      	movs	r2, #1
 80091c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091c4:	f7fe fe12 	bl	8007dec <HAL_GetTick>
 80091c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80091ca:	e009      	b.n	80091e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80091cc:	f7fe fe0e 	bl	8007dec <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091da:	d901      	bls.n	80091e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e01f      	b.n	8009220 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80091e0:	4b13      	ldr	r3, [pc, #76]	; (8009230 <HAL_PWREx_EnableOverDrive+0x98>)
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091ec:	d1ee      	bne.n	80091cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80091ee:	4b11      	ldr	r3, [pc, #68]	; (8009234 <HAL_PWREx_EnableOverDrive+0x9c>)
 80091f0:	2201      	movs	r2, #1
 80091f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091f4:	f7fe fdfa 	bl	8007dec <HAL_GetTick>
 80091f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80091fa:	e009      	b.n	8009210 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80091fc:	f7fe fdf6 	bl	8007dec <HAL_GetTick>
 8009200:	4602      	mov	r2, r0
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800920a:	d901      	bls.n	8009210 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e007      	b.n	8009220 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009210:	4b07      	ldr	r3, [pc, #28]	; (8009230 <HAL_PWREx_EnableOverDrive+0x98>)
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800921c:	d1ee      	bne.n	80091fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	40023800 	.word	0x40023800
 800922c:	420e0040 	.word	0x420e0040
 8009230:	40007000 	.word	0x40007000
 8009234:	420e0044 	.word	0x420e0044

08009238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e267      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d075      	beq.n	8009342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009256:	4b88      	ldr	r3, [pc, #544]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f003 030c 	and.w	r3, r3, #12
 800925e:	2b04      	cmp	r3, #4
 8009260:	d00c      	beq.n	800927c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009262:	4b85      	ldr	r3, [pc, #532]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800926a:	2b08      	cmp	r3, #8
 800926c:	d112      	bne.n	8009294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800926e:	4b82      	ldr	r3, [pc, #520]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800927a:	d10b      	bne.n	8009294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800927c:	4b7e      	ldr	r3, [pc, #504]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d05b      	beq.n	8009340 <HAL_RCC_OscConfig+0x108>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d157      	bne.n	8009340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e242      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800929c:	d106      	bne.n	80092ac <HAL_RCC_OscConfig+0x74>
 800929e:	4b76      	ldr	r3, [pc, #472]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a75      	ldr	r2, [pc, #468]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80092a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	e01d      	b.n	80092e8 <HAL_RCC_OscConfig+0xb0>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092b4:	d10c      	bne.n	80092d0 <HAL_RCC_OscConfig+0x98>
 80092b6:	4b70      	ldr	r3, [pc, #448]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a6f      	ldr	r2, [pc, #444]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80092bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	4b6d      	ldr	r3, [pc, #436]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a6c      	ldr	r2, [pc, #432]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80092c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	e00b      	b.n	80092e8 <HAL_RCC_OscConfig+0xb0>
 80092d0:	4b69      	ldr	r3, [pc, #420]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a68      	ldr	r2, [pc, #416]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80092d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092da:	6013      	str	r3, [r2, #0]
 80092dc:	4b66      	ldr	r3, [pc, #408]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a65      	ldr	r2, [pc, #404]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80092e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d013      	beq.n	8009318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092f0:	f7fe fd7c 	bl	8007dec <HAL_GetTick>
 80092f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092f6:	e008      	b.n	800930a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092f8:	f7fe fd78 	bl	8007dec <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b64      	cmp	r3, #100	; 0x64
 8009304:	d901      	bls.n	800930a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e207      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800930a:	4b5b      	ldr	r3, [pc, #364]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0f0      	beq.n	80092f8 <HAL_RCC_OscConfig+0xc0>
 8009316:	e014      	b.n	8009342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009318:	f7fe fd68 	bl	8007dec <HAL_GetTick>
 800931c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800931e:	e008      	b.n	8009332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009320:	f7fe fd64 	bl	8007dec <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	2b64      	cmp	r3, #100	; 0x64
 800932c:	d901      	bls.n	8009332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e1f3      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009332:	4b51      	ldr	r3, [pc, #324]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1f0      	bne.n	8009320 <HAL_RCC_OscConfig+0xe8>
 800933e:	e000      	b.n	8009342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d063      	beq.n	8009416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800934e:	4b4a      	ldr	r3, [pc, #296]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f003 030c 	and.w	r3, r3, #12
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00b      	beq.n	8009372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800935a:	4b47      	ldr	r3, [pc, #284]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009362:	2b08      	cmp	r3, #8
 8009364:	d11c      	bne.n	80093a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009366:	4b44      	ldr	r3, [pc, #272]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d116      	bne.n	80093a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009372:	4b41      	ldr	r3, [pc, #260]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	2b00      	cmp	r3, #0
 800937c:	d005      	beq.n	800938a <HAL_RCC_OscConfig+0x152>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d001      	beq.n	800938a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e1c7      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800938a:	4b3b      	ldr	r3, [pc, #236]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	4937      	ldr	r1, [pc, #220]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 800939a:	4313      	orrs	r3, r2
 800939c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800939e:	e03a      	b.n	8009416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d020      	beq.n	80093ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093a8:	4b34      	ldr	r3, [pc, #208]	; (800947c <HAL_RCC_OscConfig+0x244>)
 80093aa:	2201      	movs	r2, #1
 80093ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ae:	f7fe fd1d 	bl	8007dec <HAL_GetTick>
 80093b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093b4:	e008      	b.n	80093c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093b6:	f7fe fd19 	bl	8007dec <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d901      	bls.n	80093c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e1a8      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093c8:	4b2b      	ldr	r3, [pc, #172]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0f0      	beq.n	80093b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093d4:	4b28      	ldr	r3, [pc, #160]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	4925      	ldr	r1, [pc, #148]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	600b      	str	r3, [r1, #0]
 80093e8:	e015      	b.n	8009416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093ea:	4b24      	ldr	r3, [pc, #144]	; (800947c <HAL_RCC_OscConfig+0x244>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f0:	f7fe fcfc 	bl	8007dec <HAL_GetTick>
 80093f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093f6:	e008      	b.n	800940a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093f8:	f7fe fcf8 	bl	8007dec <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	2b02      	cmp	r3, #2
 8009404:	d901      	bls.n	800940a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e187      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800940a:	4b1b      	ldr	r3, [pc, #108]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1f0      	bne.n	80093f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0308 	and.w	r3, r3, #8
 800941e:	2b00      	cmp	r3, #0
 8009420:	d036      	beq.n	8009490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d016      	beq.n	8009458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800942a:	4b15      	ldr	r3, [pc, #84]	; (8009480 <HAL_RCC_OscConfig+0x248>)
 800942c:	2201      	movs	r2, #1
 800942e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009430:	f7fe fcdc 	bl	8007dec <HAL_GetTick>
 8009434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009436:	e008      	b.n	800944a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009438:	f7fe fcd8 	bl	8007dec <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b02      	cmp	r3, #2
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e167      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800944a:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <HAL_RCC_OscConfig+0x240>)
 800944c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0f0      	beq.n	8009438 <HAL_RCC_OscConfig+0x200>
 8009456:	e01b      	b.n	8009490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009458:	4b09      	ldr	r3, [pc, #36]	; (8009480 <HAL_RCC_OscConfig+0x248>)
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800945e:	f7fe fcc5 	bl	8007dec <HAL_GetTick>
 8009462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009464:	e00e      	b.n	8009484 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009466:	f7fe fcc1 	bl	8007dec <HAL_GetTick>
 800946a:	4602      	mov	r2, r0
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	2b02      	cmp	r3, #2
 8009472:	d907      	bls.n	8009484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e150      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
 8009478:	40023800 	.word	0x40023800
 800947c:	42470000 	.word	0x42470000
 8009480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009484:	4b88      	ldr	r3, [pc, #544]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 8009486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1ea      	bne.n	8009466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 8097 	beq.w	80095cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800949e:	2300      	movs	r3, #0
 80094a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094a2:	4b81      	ldr	r3, [pc, #516]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 80094a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10f      	bne.n	80094ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094ae:	2300      	movs	r3, #0
 80094b0:	60bb      	str	r3, [r7, #8]
 80094b2:	4b7d      	ldr	r3, [pc, #500]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	4a7c      	ldr	r2, [pc, #496]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 80094b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094bc:	6413      	str	r3, [r2, #64]	; 0x40
 80094be:	4b7a      	ldr	r3, [pc, #488]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 80094c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094c6:	60bb      	str	r3, [r7, #8]
 80094c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094ca:	2301      	movs	r3, #1
 80094cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094ce:	4b77      	ldr	r3, [pc, #476]	; (80096ac <HAL_RCC_OscConfig+0x474>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d118      	bne.n	800950c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094da:	4b74      	ldr	r3, [pc, #464]	; (80096ac <HAL_RCC_OscConfig+0x474>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a73      	ldr	r2, [pc, #460]	; (80096ac <HAL_RCC_OscConfig+0x474>)
 80094e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094e6:	f7fe fc81 	bl	8007dec <HAL_GetTick>
 80094ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094ec:	e008      	b.n	8009500 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094ee:	f7fe fc7d 	bl	8007dec <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d901      	bls.n	8009500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e10c      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009500:	4b6a      	ldr	r3, [pc, #424]	; (80096ac <HAL_RCC_OscConfig+0x474>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009508:	2b00      	cmp	r3, #0
 800950a:	d0f0      	beq.n	80094ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d106      	bne.n	8009522 <HAL_RCC_OscConfig+0x2ea>
 8009514:	4b64      	ldr	r3, [pc, #400]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 8009516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009518:	4a63      	ldr	r2, [pc, #396]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 800951a:	f043 0301 	orr.w	r3, r3, #1
 800951e:	6713      	str	r3, [r2, #112]	; 0x70
 8009520:	e01c      	b.n	800955c <HAL_RCC_OscConfig+0x324>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	2b05      	cmp	r3, #5
 8009528:	d10c      	bne.n	8009544 <HAL_RCC_OscConfig+0x30c>
 800952a:	4b5f      	ldr	r3, [pc, #380]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 800952c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952e:	4a5e      	ldr	r2, [pc, #376]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 8009530:	f043 0304 	orr.w	r3, r3, #4
 8009534:	6713      	str	r3, [r2, #112]	; 0x70
 8009536:	4b5c      	ldr	r3, [pc, #368]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 8009538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953a:	4a5b      	ldr	r2, [pc, #364]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 800953c:	f043 0301 	orr.w	r3, r3, #1
 8009540:	6713      	str	r3, [r2, #112]	; 0x70
 8009542:	e00b      	b.n	800955c <HAL_RCC_OscConfig+0x324>
 8009544:	4b58      	ldr	r3, [pc, #352]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 8009546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009548:	4a57      	ldr	r2, [pc, #348]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 800954a:	f023 0301 	bic.w	r3, r3, #1
 800954e:	6713      	str	r3, [r2, #112]	; 0x70
 8009550:	4b55      	ldr	r3, [pc, #340]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 8009552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009554:	4a54      	ldr	r2, [pc, #336]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 8009556:	f023 0304 	bic.w	r3, r3, #4
 800955a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d015      	beq.n	8009590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009564:	f7fe fc42 	bl	8007dec <HAL_GetTick>
 8009568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800956a:	e00a      	b.n	8009582 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800956c:	f7fe fc3e 	bl	8007dec <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	f241 3288 	movw	r2, #5000	; 0x1388
 800957a:	4293      	cmp	r3, r2
 800957c:	d901      	bls.n	8009582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e0cb      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009582:	4b49      	ldr	r3, [pc, #292]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 8009584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009586:	f003 0302 	and.w	r3, r3, #2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0ee      	beq.n	800956c <HAL_RCC_OscConfig+0x334>
 800958e:	e014      	b.n	80095ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009590:	f7fe fc2c 	bl	8007dec <HAL_GetTick>
 8009594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009596:	e00a      	b.n	80095ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009598:	f7fe fc28 	bl	8007dec <HAL_GetTick>
 800959c:	4602      	mov	r2, r0
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d901      	bls.n	80095ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e0b5      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095ae:	4b3e      	ldr	r3, [pc, #248]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 80095b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b2:	f003 0302 	and.w	r3, r3, #2
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1ee      	bne.n	8009598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d105      	bne.n	80095cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095c0:	4b39      	ldr	r3, [pc, #228]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 80095c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c4:	4a38      	ldr	r2, [pc, #224]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 80095c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 80a1 	beq.w	8009718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80095d6:	4b34      	ldr	r3, [pc, #208]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f003 030c 	and.w	r3, r3, #12
 80095de:	2b08      	cmp	r3, #8
 80095e0:	d05c      	beq.n	800969c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d141      	bne.n	800966e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095ea:	4b31      	ldr	r3, [pc, #196]	; (80096b0 <HAL_RCC_OscConfig+0x478>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095f0:	f7fe fbfc 	bl	8007dec <HAL_GetTick>
 80095f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095f6:	e008      	b.n	800960a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095f8:	f7fe fbf8 	bl	8007dec <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b02      	cmp	r3, #2
 8009604:	d901      	bls.n	800960a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e087      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800960a:	4b27      	ldr	r3, [pc, #156]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1f0      	bne.n	80095f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69da      	ldr	r2, [r3, #28]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	431a      	orrs	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	019b      	lsls	r3, r3, #6
 8009626:	431a      	orrs	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962c:	085b      	lsrs	r3, r3, #1
 800962e:	3b01      	subs	r3, #1
 8009630:	041b      	lsls	r3, r3, #16
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009638:	061b      	lsls	r3, r3, #24
 800963a:	491b      	ldr	r1, [pc, #108]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 800963c:	4313      	orrs	r3, r2
 800963e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009640:	4b1b      	ldr	r3, [pc, #108]	; (80096b0 <HAL_RCC_OscConfig+0x478>)
 8009642:	2201      	movs	r2, #1
 8009644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009646:	f7fe fbd1 	bl	8007dec <HAL_GetTick>
 800964a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800964c:	e008      	b.n	8009660 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800964e:	f7fe fbcd 	bl	8007dec <HAL_GetTick>
 8009652:	4602      	mov	r2, r0
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	2b02      	cmp	r3, #2
 800965a:	d901      	bls.n	8009660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800965c:	2303      	movs	r3, #3
 800965e:	e05c      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009660:	4b11      	ldr	r3, [pc, #68]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d0f0      	beq.n	800964e <HAL_RCC_OscConfig+0x416>
 800966c:	e054      	b.n	8009718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800966e:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <HAL_RCC_OscConfig+0x478>)
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009674:	f7fe fbba 	bl	8007dec <HAL_GetTick>
 8009678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800967a:	e008      	b.n	800968e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800967c:	f7fe fbb6 	bl	8007dec <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	2b02      	cmp	r3, #2
 8009688:	d901      	bls.n	800968e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e045      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800968e:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <HAL_RCC_OscConfig+0x470>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1f0      	bne.n	800967c <HAL_RCC_OscConfig+0x444>
 800969a:	e03d      	b.n	8009718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d107      	bne.n	80096b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e038      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
 80096a8:	40023800 	.word	0x40023800
 80096ac:	40007000 	.word	0x40007000
 80096b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80096b4:	4b1b      	ldr	r3, [pc, #108]	; (8009724 <HAL_RCC_OscConfig+0x4ec>)
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d028      	beq.n	8009714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d121      	bne.n	8009714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096da:	429a      	cmp	r2, r3
 80096dc:	d11a      	bne.n	8009714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80096e4:	4013      	ands	r3, r2
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80096ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d111      	bne.n	8009714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	3b01      	subs	r3, #1
 80096fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009700:	429a      	cmp	r2, r3
 8009702:	d107      	bne.n	8009714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009710:	429a      	cmp	r2, r3
 8009712:	d001      	beq.n	8009718 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e000      	b.n	800971a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	40023800 	.word	0x40023800

08009728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e0cc      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800973c:	4b68      	ldr	r3, [pc, #416]	; (80098e0 <HAL_RCC_ClockConfig+0x1b8>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d90c      	bls.n	8009764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800974a:	4b65      	ldr	r3, [pc, #404]	; (80098e0 <HAL_RCC_ClockConfig+0x1b8>)
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009752:	4b63      	ldr	r3, [pc, #396]	; (80098e0 <HAL_RCC_ClockConfig+0x1b8>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 030f 	and.w	r3, r3, #15
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d001      	beq.n	8009764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e0b8      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0302 	and.w	r3, r3, #2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d020      	beq.n	80097b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800977c:	4b59      	ldr	r3, [pc, #356]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	4a58      	ldr	r2, [pc, #352]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0308 	and.w	r3, r3, #8
 8009790:	2b00      	cmp	r3, #0
 8009792:	d005      	beq.n	80097a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009794:	4b53      	ldr	r3, [pc, #332]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	4a52      	ldr	r2, [pc, #328]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 800979a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800979e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097a0:	4b50      	ldr	r3, [pc, #320]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	494d      	ldr	r1, [pc, #308]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d044      	beq.n	8009848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d107      	bne.n	80097d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097c6:	4b47      	ldr	r3, [pc, #284]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d119      	bne.n	8009806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e07f      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d003      	beq.n	80097e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d107      	bne.n	80097f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097e6:	4b3f      	ldr	r3, [pc, #252]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d109      	bne.n	8009806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e06f      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097f6:	4b3b      	ldr	r3, [pc, #236]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d101      	bne.n	8009806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e067      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009806:	4b37      	ldr	r3, [pc, #220]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	f023 0203 	bic.w	r2, r3, #3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	4934      	ldr	r1, [pc, #208]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009814:	4313      	orrs	r3, r2
 8009816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009818:	f7fe fae8 	bl	8007dec <HAL_GetTick>
 800981c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800981e:	e00a      	b.n	8009836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009820:	f7fe fae4 	bl	8007dec <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	f241 3288 	movw	r2, #5000	; 0x1388
 800982e:	4293      	cmp	r3, r2
 8009830:	d901      	bls.n	8009836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e04f      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009836:	4b2b      	ldr	r3, [pc, #172]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f003 020c 	and.w	r2, r3, #12
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	429a      	cmp	r2, r3
 8009846:	d1eb      	bne.n	8009820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009848:	4b25      	ldr	r3, [pc, #148]	; (80098e0 <HAL_RCC_ClockConfig+0x1b8>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 030f 	and.w	r3, r3, #15
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	429a      	cmp	r2, r3
 8009854:	d20c      	bcs.n	8009870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009856:	4b22      	ldr	r3, [pc, #136]	; (80098e0 <HAL_RCC_ClockConfig+0x1b8>)
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	b2d2      	uxtb	r2, r2
 800985c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800985e:	4b20      	ldr	r3, [pc, #128]	; (80098e0 <HAL_RCC_ClockConfig+0x1b8>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 030f 	and.w	r3, r3, #15
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	429a      	cmp	r2, r3
 800986a:	d001      	beq.n	8009870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e032      	b.n	80098d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b00      	cmp	r3, #0
 800987a:	d008      	beq.n	800988e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800987c:	4b19      	ldr	r3, [pc, #100]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	4916      	ldr	r1, [pc, #88]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 800988a:	4313      	orrs	r3, r2
 800988c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 0308 	and.w	r3, r3, #8
 8009896:	2b00      	cmp	r3, #0
 8009898:	d009      	beq.n	80098ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800989a:	4b12      	ldr	r3, [pc, #72]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	490e      	ldr	r1, [pc, #56]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80098ae:	f000 f821 	bl	80098f4 <HAL_RCC_GetSysClockFreq>
 80098b2:	4602      	mov	r2, r0
 80098b4:	4b0b      	ldr	r3, [pc, #44]	; (80098e4 <HAL_RCC_ClockConfig+0x1bc>)
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	091b      	lsrs	r3, r3, #4
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	490a      	ldr	r1, [pc, #40]	; (80098e8 <HAL_RCC_ClockConfig+0x1c0>)
 80098c0:	5ccb      	ldrb	r3, [r1, r3]
 80098c2:	fa22 f303 	lsr.w	r3, r2, r3
 80098c6:	4a09      	ldr	r2, [pc, #36]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 80098c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80098ca:	4b09      	ldr	r3, [pc, #36]	; (80098f0 <HAL_RCC_ClockConfig+0x1c8>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fa48 	bl	8007d64 <HAL_InitTick>

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	40023c00 	.word	0x40023c00
 80098e4:	40023800 	.word	0x40023800
 80098e8:	0800df88 	.word	0x0800df88
 80098ec:	2000001c 	.word	0x2000001c
 80098f0:	20000020 	.word	0x20000020

080098f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098f8:	b094      	sub	sp, #80	; 0x50
 80098fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009900:	2300      	movs	r3, #0
 8009902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009904:	2300      	movs	r3, #0
 8009906:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009908:	2300      	movs	r3, #0
 800990a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800990c:	4b79      	ldr	r3, [pc, #484]	; (8009af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f003 030c 	and.w	r3, r3, #12
 8009914:	2b08      	cmp	r3, #8
 8009916:	d00d      	beq.n	8009934 <HAL_RCC_GetSysClockFreq+0x40>
 8009918:	2b08      	cmp	r3, #8
 800991a:	f200 80e1 	bhi.w	8009ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <HAL_RCC_GetSysClockFreq+0x34>
 8009922:	2b04      	cmp	r3, #4
 8009924:	d003      	beq.n	800992e <HAL_RCC_GetSysClockFreq+0x3a>
 8009926:	e0db      	b.n	8009ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009928:	4b73      	ldr	r3, [pc, #460]	; (8009af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800992a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800992c:	e0db      	b.n	8009ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800992e:	4b73      	ldr	r3, [pc, #460]	; (8009afc <HAL_RCC_GetSysClockFreq+0x208>)
 8009930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009932:	e0d8      	b.n	8009ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009934:	4b6f      	ldr	r3, [pc, #444]	; (8009af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800993c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800993e:	4b6d      	ldr	r3, [pc, #436]	; (8009af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009946:	2b00      	cmp	r3, #0
 8009948:	d063      	beq.n	8009a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800994a:	4b6a      	ldr	r3, [pc, #424]	; (8009af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	099b      	lsrs	r3, r3, #6
 8009950:	2200      	movs	r2, #0
 8009952:	63bb      	str	r3, [r7, #56]	; 0x38
 8009954:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995c:	633b      	str	r3, [r7, #48]	; 0x30
 800995e:	2300      	movs	r3, #0
 8009960:	637b      	str	r3, [r7, #52]	; 0x34
 8009962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009966:	4622      	mov	r2, r4
 8009968:	462b      	mov	r3, r5
 800996a:	f04f 0000 	mov.w	r0, #0
 800996e:	f04f 0100 	mov.w	r1, #0
 8009972:	0159      	lsls	r1, r3, #5
 8009974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009978:	0150      	lsls	r0, r2, #5
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	4621      	mov	r1, r4
 8009980:	1a51      	subs	r1, r2, r1
 8009982:	6139      	str	r1, [r7, #16]
 8009984:	4629      	mov	r1, r5
 8009986:	eb63 0301 	sbc.w	r3, r3, r1
 800998a:	617b      	str	r3, [r7, #20]
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	f04f 0300 	mov.w	r3, #0
 8009994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009998:	4659      	mov	r1, fp
 800999a:	018b      	lsls	r3, r1, #6
 800999c:	4651      	mov	r1, sl
 800999e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80099a2:	4651      	mov	r1, sl
 80099a4:	018a      	lsls	r2, r1, #6
 80099a6:	4651      	mov	r1, sl
 80099a8:	ebb2 0801 	subs.w	r8, r2, r1
 80099ac:	4659      	mov	r1, fp
 80099ae:	eb63 0901 	sbc.w	r9, r3, r1
 80099b2:	f04f 0200 	mov.w	r2, #0
 80099b6:	f04f 0300 	mov.w	r3, #0
 80099ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099c6:	4690      	mov	r8, r2
 80099c8:	4699      	mov	r9, r3
 80099ca:	4623      	mov	r3, r4
 80099cc:	eb18 0303 	adds.w	r3, r8, r3
 80099d0:	60bb      	str	r3, [r7, #8]
 80099d2:	462b      	mov	r3, r5
 80099d4:	eb49 0303 	adc.w	r3, r9, r3
 80099d8:	60fb      	str	r3, [r7, #12]
 80099da:	f04f 0200 	mov.w	r2, #0
 80099de:	f04f 0300 	mov.w	r3, #0
 80099e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80099e6:	4629      	mov	r1, r5
 80099e8:	024b      	lsls	r3, r1, #9
 80099ea:	4621      	mov	r1, r4
 80099ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80099f0:	4621      	mov	r1, r4
 80099f2:	024a      	lsls	r2, r1, #9
 80099f4:	4610      	mov	r0, r2
 80099f6:	4619      	mov	r1, r3
 80099f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099fa:	2200      	movs	r2, #0
 80099fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80099fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a04:	f7f7 f888 	bl	8000b18 <__aeabi_uldivmod>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a10:	e058      	b.n	8009ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a12:	4b38      	ldr	r3, [pc, #224]	; (8009af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	099b      	lsrs	r3, r3, #6
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009a22:	623b      	str	r3, [r7, #32]
 8009a24:	2300      	movs	r3, #0
 8009a26:	627b      	str	r3, [r7, #36]	; 0x24
 8009a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009a2c:	4642      	mov	r2, r8
 8009a2e:	464b      	mov	r3, r9
 8009a30:	f04f 0000 	mov.w	r0, #0
 8009a34:	f04f 0100 	mov.w	r1, #0
 8009a38:	0159      	lsls	r1, r3, #5
 8009a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a3e:	0150      	lsls	r0, r2, #5
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4641      	mov	r1, r8
 8009a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009a50:	f04f 0200 	mov.w	r2, #0
 8009a54:	f04f 0300 	mov.w	r3, #0
 8009a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009a64:	ebb2 040a 	subs.w	r4, r2, sl
 8009a68:	eb63 050b 	sbc.w	r5, r3, fp
 8009a6c:	f04f 0200 	mov.w	r2, #0
 8009a70:	f04f 0300 	mov.w	r3, #0
 8009a74:	00eb      	lsls	r3, r5, #3
 8009a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a7a:	00e2      	lsls	r2, r4, #3
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	461d      	mov	r5, r3
 8009a80:	4643      	mov	r3, r8
 8009a82:	18e3      	adds	r3, r4, r3
 8009a84:	603b      	str	r3, [r7, #0]
 8009a86:	464b      	mov	r3, r9
 8009a88:	eb45 0303 	adc.w	r3, r5, r3
 8009a8c:	607b      	str	r3, [r7, #4]
 8009a8e:	f04f 0200 	mov.w	r2, #0
 8009a92:	f04f 0300 	mov.w	r3, #0
 8009a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009a9a:	4629      	mov	r1, r5
 8009a9c:	028b      	lsls	r3, r1, #10
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	028a      	lsls	r2, r1, #10
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aae:	2200      	movs	r2, #0
 8009ab0:	61bb      	str	r3, [r7, #24]
 8009ab2:	61fa      	str	r2, [r7, #28]
 8009ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ab8:	f7f7 f82e 	bl	8000b18 <__aeabi_uldivmod>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009ac4:	4b0b      	ldr	r3, [pc, #44]	; (8009af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	0c1b      	lsrs	r3, r3, #16
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	3301      	adds	r3, #1
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009ade:	e002      	b.n	8009ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009ae0:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8009ae2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3750      	adds	r7, #80	; 0x50
 8009aec:	46bd      	mov	sp, r7
 8009aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009af2:	bf00      	nop
 8009af4:	40023800 	.word	0x40023800
 8009af8:	00f42400 	.word	0x00f42400
 8009afc:	007a1200 	.word	0x007a1200

08009b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b00:	b480      	push	{r7}
 8009b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b04:	4b03      	ldr	r3, [pc, #12]	; (8009b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8009b06:	681b      	ldr	r3, [r3, #0]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	2000001c 	.word	0x2000001c

08009b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009b1c:	f7ff fff0 	bl	8009b00 <HAL_RCC_GetHCLKFreq>
 8009b20:	4602      	mov	r2, r0
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	0a9b      	lsrs	r3, r3, #10
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	4903      	ldr	r1, [pc, #12]	; (8009b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b2e:	5ccb      	ldrb	r3, [r1, r3]
 8009b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	40023800 	.word	0x40023800
 8009b3c:	0800df98 	.word	0x0800df98

08009b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009b44:	f7ff ffdc 	bl	8009b00 <HAL_RCC_GetHCLKFreq>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	0b5b      	lsrs	r3, r3, #13
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	4903      	ldr	r1, [pc, #12]	; (8009b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b56:	5ccb      	ldrb	r3, [r1, r3]
 8009b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	40023800 	.word	0x40023800
 8009b64:	0800df98 	.word	0x0800df98

08009b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10b      	bne.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d105      	bne.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d075      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009b9c:	4b91      	ldr	r3, [pc, #580]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009ba2:	f7fe f923 	bl	8007dec <HAL_GetTick>
 8009ba6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ba8:	e008      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009baa:	f7fe f91f 	bl	8007dec <HAL_GetTick>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d901      	bls.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e189      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009bbc:	4b8a      	ldr	r3, [pc, #552]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1f0      	bne.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d009      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	019a      	lsls	r2, r3, #6
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	071b      	lsls	r3, r3, #28
 8009be0:	4981      	ldr	r1, [pc, #516]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 0302 	and.w	r3, r3, #2
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d01f      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009bf4:	4b7c      	ldr	r3, [pc, #496]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bfa:	0f1b      	lsrs	r3, r3, #28
 8009bfc:	f003 0307 	and.w	r3, r3, #7
 8009c00:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	019a      	lsls	r2, r3, #6
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	061b      	lsls	r3, r3, #24
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	071b      	lsls	r3, r3, #28
 8009c14:	4974      	ldr	r1, [pc, #464]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c16:	4313      	orrs	r3, r2
 8009c18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009c1c:	4b72      	ldr	r3, [pc, #456]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c22:	f023 021f 	bic.w	r2, r3, #31
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	69db      	ldr	r3, [r3, #28]
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	496e      	ldr	r1, [pc, #440]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00d      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	019a      	lsls	r2, r3, #6
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	061b      	lsls	r3, r3, #24
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	071b      	lsls	r3, r3, #28
 8009c54:	4964      	ldr	r1, [pc, #400]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009c5c:	4b61      	ldr	r3, [pc, #388]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009c5e:	2201      	movs	r2, #1
 8009c60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009c62:	f7fe f8c3 	bl	8007dec <HAL_GetTick>
 8009c66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009c68:	e008      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009c6a:	f7fe f8bf 	bl	8007dec <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d901      	bls.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e129      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009c7c:	4b5a      	ldr	r3, [pc, #360]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0f0      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0304 	and.w	r3, r3, #4
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d105      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d079      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009ca0:	4b52      	ldr	r3, [pc, #328]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009ca6:	f7fe f8a1 	bl	8007dec <HAL_GetTick>
 8009caa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009cac:	e008      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009cae:	f7fe f89d 	bl	8007dec <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d901      	bls.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e107      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009cc0:	4b49      	ldr	r3, [pc, #292]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ccc:	d0ef      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0304 	and.w	r3, r3, #4
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d020      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009cda:	4b43      	ldr	r3, [pc, #268]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce0:	0f1b      	lsrs	r3, r3, #28
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	019a      	lsls	r2, r3, #6
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	061b      	lsls	r3, r3, #24
 8009cf4:	431a      	orrs	r2, r3
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	071b      	lsls	r3, r3, #28
 8009cfa:	493b      	ldr	r1, [pc, #236]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009d02:	4b39      	ldr	r3, [pc, #228]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	021b      	lsls	r3, r3, #8
 8009d14:	4934      	ldr	r1, [pc, #208]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0308 	and.w	r3, r3, #8
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d01e      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009d28:	4b2f      	ldr	r3, [pc, #188]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d2e:	0e1b      	lsrs	r3, r3, #24
 8009d30:	f003 030f 	and.w	r3, r3, #15
 8009d34:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	019a      	lsls	r2, r3, #6
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	061b      	lsls	r3, r3, #24
 8009d40:	431a      	orrs	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	071b      	lsls	r3, r3, #28
 8009d48:	4927      	ldr	r1, [pc, #156]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009d50:	4b25      	ldr	r3, [pc, #148]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	4922      	ldr	r1, [pc, #136]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009d66:	4b21      	ldr	r3, [pc, #132]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d6c:	f7fe f83e 	bl	8007dec <HAL_GetTick>
 8009d70:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d72:	e008      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009d74:	f7fe f83a 	bl	8007dec <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d901      	bls.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e0a4      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d86:	4b18      	ldr	r3, [pc, #96]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d92:	d1ef      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 0320 	and.w	r3, r3, #32
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 808b 	beq.w	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009da2:	2300      	movs	r3, #0
 8009da4:	60fb      	str	r3, [r7, #12]
 8009da6:	4b10      	ldr	r3, [pc, #64]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009daa:	4a0f      	ldr	r2, [pc, #60]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009db0:	6413      	str	r3, [r2, #64]	; 0x40
 8009db2:	4b0d      	ldr	r3, [pc, #52]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009dbe:	4b0c      	ldr	r3, [pc, #48]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a0b      	ldr	r2, [pc, #44]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009dca:	f7fe f80f 	bl	8007dec <HAL_GetTick>
 8009dce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009dd0:	e010      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009dd2:	f7fe f80b 	bl	8007dec <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d909      	bls.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8009de0:	2303      	movs	r3, #3
 8009de2:	e075      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009de4:	42470068 	.word	0x42470068
 8009de8:	40023800 	.word	0x40023800
 8009dec:	42470070 	.word	0x42470070
 8009df0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009df4:	4b38      	ldr	r3, [pc, #224]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0e8      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009e00:	4b36      	ldr	r3, [pc, #216]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d02f      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d028      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e1e:	4b2f      	ldr	r3, [pc, #188]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009e28:	4b2d      	ldr	r3, [pc, #180]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009e2e:	4b2c      	ldr	r3, [pc, #176]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009e34:	4a29      	ldr	r2, [pc, #164]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009e3a:	4b28      	ldr	r3, [pc, #160]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d114      	bne.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009e46:	f7fd ffd1 	bl	8007dec <HAL_GetTick>
 8009e4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e4c:	e00a      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e4e:	f7fd ffcd 	bl	8007dec <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d901      	bls.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e035      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e64:	4b1d      	ldr	r3, [pc, #116]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e68:	f003 0302 	and.w	r3, r3, #2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d0ee      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e7c:	d10d      	bne.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009e7e:	4b17      	ldr	r3, [pc, #92]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e92:	4912      	ldr	r1, [pc, #72]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	608b      	str	r3, [r1, #8]
 8009e98:	e005      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8009e9a:	4b10      	ldr	r3, [pc, #64]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	4a0f      	ldr	r2, [pc, #60]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009ea0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009ea4:	6093      	str	r3, [r2, #8]
 8009ea6:	4b0d      	ldr	r3, [pc, #52]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009ea8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb2:	490a      	ldr	r1, [pc, #40]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0310 	and.w	r3, r3, #16
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d004      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009eca:	4b06      	ldr	r3, [pc, #24]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009ecc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	40007000 	.word	0x40007000
 8009edc:	40023800 	.word	0x40023800
 8009ee0:	42470e40 	.word	0x42470e40
 8009ee4:	424711e0 	.word	0x424711e0

08009ee8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e025      	b.n	8009f48 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d106      	bne.n	8009f16 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7fb fdff 	bl	8005b14 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2202      	movs	r2, #2
 8009f1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f002 f829 	bl	800bf80 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6818      	ldr	r0, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	f002 f87e 	bl	800c03a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f62:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009f64:	7dfb      	ldrb	r3, [r7, #23]
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d101      	bne.n	8009f6e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	e021      	b.n	8009fb2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d002      	beq.n	8009f7a <HAL_SDRAM_SendCommand+0x2a>
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	2b05      	cmp	r3, #5
 8009f78:	d118      	bne.n	8009fac <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	68b9      	ldr	r1, [r7, #8]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f002 f8be 	bl	800c10c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d104      	bne.n	8009fa2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2205      	movs	r2, #5
 8009f9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009fa0:	e006      	b.n	8009fb0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009faa:	e001      	b.n	8009fb0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e000      	b.n	8009fb2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e07b      	b.n	800a0c4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d108      	bne.n	8009fe6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fdc:	d009      	beq.n	8009ff2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	61da      	str	r2, [r3, #28]
 8009fe4:	e005      	b.n	8009ff2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d106      	bne.n	800a012 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7fb fbef 	bl	80057f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2202      	movs	r2, #2
 800a016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a028:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a03a:	431a      	orrs	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a044:	431a      	orrs	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	f003 0302 	and.w	r3, r3, #2
 800a04e:	431a      	orrs	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	695b      	ldr	r3, [r3, #20]
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	431a      	orrs	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a062:	431a      	orrs	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	69db      	ldr	r3, [r3, #28]
 800a068:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a06c:	431a      	orrs	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a076:	ea42 0103 	orr.w	r1, r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	0c1b      	lsrs	r3, r3, #16
 800a090:	f003 0104 	and.w	r1, r3, #4
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	f003 0210 	and.w	r2, r3, #16
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	69da      	ldr	r2, [r3, #28]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e041      	b.n	800a162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7fb fbc4 	bl	8005880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	3304      	adds	r3, #4
 800a108:	4619      	mov	r1, r3
 800a10a:	4610      	mov	r0, r2
 800a10c:	f000 fc84 	bl	800aa18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
	...

0800a16c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d001      	beq.n	800a184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e04e      	b.n	800a222 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0201 	orr.w	r2, r2, #1
 800a19a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a23      	ldr	r2, [pc, #140]	; (800a230 <HAL_TIM_Base_Start_IT+0xc4>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d022      	beq.n	800a1ec <HAL_TIM_Base_Start_IT+0x80>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ae:	d01d      	beq.n	800a1ec <HAL_TIM_Base_Start_IT+0x80>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a1f      	ldr	r2, [pc, #124]	; (800a234 <HAL_TIM_Base_Start_IT+0xc8>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d018      	beq.n	800a1ec <HAL_TIM_Base_Start_IT+0x80>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a1e      	ldr	r2, [pc, #120]	; (800a238 <HAL_TIM_Base_Start_IT+0xcc>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d013      	beq.n	800a1ec <HAL_TIM_Base_Start_IT+0x80>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a1c      	ldr	r2, [pc, #112]	; (800a23c <HAL_TIM_Base_Start_IT+0xd0>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d00e      	beq.n	800a1ec <HAL_TIM_Base_Start_IT+0x80>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a1b      	ldr	r2, [pc, #108]	; (800a240 <HAL_TIM_Base_Start_IT+0xd4>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d009      	beq.n	800a1ec <HAL_TIM_Base_Start_IT+0x80>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a19      	ldr	r2, [pc, #100]	; (800a244 <HAL_TIM_Base_Start_IT+0xd8>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d004      	beq.n	800a1ec <HAL_TIM_Base_Start_IT+0x80>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a18      	ldr	r2, [pc, #96]	; (800a248 <HAL_TIM_Base_Start_IT+0xdc>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d111      	bne.n	800a210 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b06      	cmp	r3, #6
 800a1fc:	d010      	beq.n	800a220 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f042 0201 	orr.w	r2, r2, #1
 800a20c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a20e:	e007      	b.n	800a220 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f042 0201 	orr.w	r2, r2, #1
 800a21e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	40010000 	.word	0x40010000
 800a234:	40000400 	.word	0x40000400
 800a238:	40000800 	.word	0x40000800
 800a23c:	40000c00 	.word	0x40000c00
 800a240:	40010400 	.word	0x40010400
 800a244:	40014000 	.word	0x40014000
 800a248:	40001800 	.word	0x40001800

0800a24c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e041      	b.n	800a2e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b00      	cmp	r3, #0
 800a268:	d106      	bne.n	800a278 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f839 	bl	800a2ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2202      	movs	r2, #2
 800a27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3304      	adds	r3, #4
 800a288:	4619      	mov	r1, r3
 800a28a:	4610      	mov	r0, r2
 800a28c:	f000 fbc4 	bl	800aa18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b083      	sub	sp, #12
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a2f2:	bf00      	nop
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
	...

0800a300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d109      	bne.n	800a324 <HAL_TIM_PWM_Start+0x24>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a316:	b2db      	uxtb	r3, r3
 800a318:	2b01      	cmp	r3, #1
 800a31a:	bf14      	ite	ne
 800a31c:	2301      	movne	r3, #1
 800a31e:	2300      	moveq	r3, #0
 800a320:	b2db      	uxtb	r3, r3
 800a322:	e022      	b.n	800a36a <HAL_TIM_PWM_Start+0x6a>
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	2b04      	cmp	r3, #4
 800a328:	d109      	bne.n	800a33e <HAL_TIM_PWM_Start+0x3e>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b01      	cmp	r3, #1
 800a334:	bf14      	ite	ne
 800a336:	2301      	movne	r3, #1
 800a338:	2300      	moveq	r3, #0
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	e015      	b.n	800a36a <HAL_TIM_PWM_Start+0x6a>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b08      	cmp	r3, #8
 800a342:	d109      	bne.n	800a358 <HAL_TIM_PWM_Start+0x58>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	bf14      	ite	ne
 800a350:	2301      	movne	r3, #1
 800a352:	2300      	moveq	r3, #0
 800a354:	b2db      	uxtb	r3, r3
 800a356:	e008      	b.n	800a36a <HAL_TIM_PWM_Start+0x6a>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b01      	cmp	r3, #1
 800a362:	bf14      	ite	ne
 800a364:	2301      	movne	r3, #1
 800a366:	2300      	moveq	r3, #0
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e07c      	b.n	800a46c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d104      	bne.n	800a382 <HAL_TIM_PWM_Start+0x82>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a380:	e013      	b.n	800a3aa <HAL_TIM_PWM_Start+0xaa>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b04      	cmp	r3, #4
 800a386:	d104      	bne.n	800a392 <HAL_TIM_PWM_Start+0x92>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2202      	movs	r2, #2
 800a38c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a390:	e00b      	b.n	800a3aa <HAL_TIM_PWM_Start+0xaa>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b08      	cmp	r3, #8
 800a396:	d104      	bne.n	800a3a2 <HAL_TIM_PWM_Start+0xa2>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3a0:	e003      	b.n	800a3aa <HAL_TIM_PWM_Start+0xaa>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2202      	movs	r2, #2
 800a3a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 fe1a 	bl	800afec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a2d      	ldr	r2, [pc, #180]	; (800a474 <HAL_TIM_PWM_Start+0x174>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d004      	beq.n	800a3cc <HAL_TIM_PWM_Start+0xcc>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a2c      	ldr	r2, [pc, #176]	; (800a478 <HAL_TIM_PWM_Start+0x178>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d101      	bne.n	800a3d0 <HAL_TIM_PWM_Start+0xd0>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e000      	b.n	800a3d2 <HAL_TIM_PWM_Start+0xd2>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d007      	beq.n	800a3e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a22      	ldr	r2, [pc, #136]	; (800a474 <HAL_TIM_PWM_Start+0x174>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d022      	beq.n	800a436 <HAL_TIM_PWM_Start+0x136>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3f8:	d01d      	beq.n	800a436 <HAL_TIM_PWM_Start+0x136>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a1f      	ldr	r2, [pc, #124]	; (800a47c <HAL_TIM_PWM_Start+0x17c>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d018      	beq.n	800a436 <HAL_TIM_PWM_Start+0x136>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a1d      	ldr	r2, [pc, #116]	; (800a480 <HAL_TIM_PWM_Start+0x180>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d013      	beq.n	800a436 <HAL_TIM_PWM_Start+0x136>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a1c      	ldr	r2, [pc, #112]	; (800a484 <HAL_TIM_PWM_Start+0x184>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d00e      	beq.n	800a436 <HAL_TIM_PWM_Start+0x136>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a16      	ldr	r2, [pc, #88]	; (800a478 <HAL_TIM_PWM_Start+0x178>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d009      	beq.n	800a436 <HAL_TIM_PWM_Start+0x136>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a18      	ldr	r2, [pc, #96]	; (800a488 <HAL_TIM_PWM_Start+0x188>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d004      	beq.n	800a436 <HAL_TIM_PWM_Start+0x136>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a16      	ldr	r2, [pc, #88]	; (800a48c <HAL_TIM_PWM_Start+0x18c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d111      	bne.n	800a45a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f003 0307 	and.w	r3, r3, #7
 800a440:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b06      	cmp	r3, #6
 800a446:	d010      	beq.n	800a46a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f042 0201 	orr.w	r2, r2, #1
 800a456:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a458:	e007      	b.n	800a46a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f042 0201 	orr.w	r2, r2, #1
 800a468:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	40010000 	.word	0x40010000
 800a478:	40010400 	.word	0x40010400
 800a47c:	40000400 	.word	0x40000400
 800a480:	40000800 	.word	0x40000800
 800a484:	40000c00 	.word	0x40000c00
 800a488:	40014000 	.word	0x40014000
 800a48c:	40001800 	.word	0x40001800

0800a490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d122      	bne.n	800a4ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f003 0302 	and.w	r3, r3, #2
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d11b      	bne.n	800a4ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f06f 0202 	mvn.w	r2, #2
 800a4bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	f003 0303 	and.w	r3, r3, #3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d003      	beq.n	800a4da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fa81 	bl	800a9da <HAL_TIM_IC_CaptureCallback>
 800a4d8:	e005      	b.n	800a4e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fa73 	bl	800a9c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fa84 	bl	800a9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	f003 0304 	and.w	r3, r3, #4
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	d122      	bne.n	800a540 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	f003 0304 	and.w	r3, r3, #4
 800a504:	2b04      	cmp	r3, #4
 800a506:	d11b      	bne.n	800a540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f06f 0204 	mvn.w	r2, #4
 800a510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2202      	movs	r2, #2
 800a516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a522:	2b00      	cmp	r3, #0
 800a524:	d003      	beq.n	800a52e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa57 	bl	800a9da <HAL_TIM_IC_CaptureCallback>
 800a52c:	e005      	b.n	800a53a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fa49 	bl	800a9c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fa5a 	bl	800a9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	f003 0308 	and.w	r3, r3, #8
 800a54a:	2b08      	cmp	r3, #8
 800a54c:	d122      	bne.n	800a594 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	f003 0308 	and.w	r3, r3, #8
 800a558:	2b08      	cmp	r3, #8
 800a55a:	d11b      	bne.n	800a594 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f06f 0208 	mvn.w	r2, #8
 800a564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2204      	movs	r2, #4
 800a56a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	69db      	ldr	r3, [r3, #28]
 800a572:	f003 0303 	and.w	r3, r3, #3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fa2d 	bl	800a9da <HAL_TIM_IC_CaptureCallback>
 800a580:	e005      	b.n	800a58e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fa1f 	bl	800a9c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fa30 	bl	800a9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	f003 0310 	and.w	r3, r3, #16
 800a59e:	2b10      	cmp	r3, #16
 800a5a0:	d122      	bne.n	800a5e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	2b10      	cmp	r3, #16
 800a5ae:	d11b      	bne.n	800a5e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f06f 0210 	mvn.w	r2, #16
 800a5b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2208      	movs	r2, #8
 800a5be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fa03 	bl	800a9da <HAL_TIM_IC_CaptureCallback>
 800a5d4:	e005      	b.n	800a5e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f9f5 	bl	800a9c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 fa06 	bl	800a9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d10e      	bne.n	800a614 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b01      	cmp	r3, #1
 800a602:	d107      	bne.n	800a614 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f06f 0201 	mvn.w	r2, #1
 800a60c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f9cf 	bl	800a9b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a61e:	2b80      	cmp	r3, #128	; 0x80
 800a620:	d10e      	bne.n	800a640 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a62c:	2b80      	cmp	r3, #128	; 0x80
 800a62e:	d107      	bne.n	800a640 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fd82 	bl	800b144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a64a:	2b40      	cmp	r3, #64	; 0x40
 800a64c:	d10e      	bne.n	800a66c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a658:	2b40      	cmp	r3, #64	; 0x40
 800a65a:	d107      	bne.n	800a66c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f9cb 	bl	800aa02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	f003 0320 	and.w	r3, r3, #32
 800a676:	2b20      	cmp	r3, #32
 800a678:	d10e      	bne.n	800a698 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f003 0320 	and.w	r3, r3, #32
 800a684:	2b20      	cmp	r3, #32
 800a686:	d107      	bne.n	800a698 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f06f 0220 	mvn.w	r2, #32
 800a690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fd4c 	bl	800b130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d101      	bne.n	800a6be <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a6ba:	2302      	movs	r3, #2
 800a6bc:	e0ae      	b.n	800a81c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b0c      	cmp	r3, #12
 800a6ca:	f200 809f 	bhi.w	800a80c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a6ce:	a201      	add	r2, pc, #4	; (adr r2, 800a6d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d4:	0800a709 	.word	0x0800a709
 800a6d8:	0800a80d 	.word	0x0800a80d
 800a6dc:	0800a80d 	.word	0x0800a80d
 800a6e0:	0800a80d 	.word	0x0800a80d
 800a6e4:	0800a749 	.word	0x0800a749
 800a6e8:	0800a80d 	.word	0x0800a80d
 800a6ec:	0800a80d 	.word	0x0800a80d
 800a6f0:	0800a80d 	.word	0x0800a80d
 800a6f4:	0800a78b 	.word	0x0800a78b
 800a6f8:	0800a80d 	.word	0x0800a80d
 800a6fc:	0800a80d 	.word	0x0800a80d
 800a700:	0800a80d 	.word	0x0800a80d
 800a704:	0800a7cb 	.word	0x0800a7cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fa22 	bl	800ab58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	699a      	ldr	r2, [r3, #24]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0208 	orr.w	r2, r2, #8
 800a722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	699a      	ldr	r2, [r3, #24]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f022 0204 	bic.w	r2, r2, #4
 800a732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6999      	ldr	r1, [r3, #24]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	691a      	ldr	r2, [r3, #16]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	430a      	orrs	r2, r1
 800a744:	619a      	str	r2, [r3, #24]
      break;
 800a746:	e064      	b.n	800a812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68b9      	ldr	r1, [r7, #8]
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 fa72 	bl	800ac38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	699a      	ldr	r2, [r3, #24]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	6999      	ldr	r1, [r3, #24]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	021a      	lsls	r2, r3, #8
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	619a      	str	r2, [r3, #24]
      break;
 800a788:	e043      	b.n	800a812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68b9      	ldr	r1, [r7, #8]
 800a790:	4618      	mov	r0, r3
 800a792:	f000 fac7 	bl	800ad24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	69da      	ldr	r2, [r3, #28]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f042 0208 	orr.w	r2, r2, #8
 800a7a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	69da      	ldr	r2, [r3, #28]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 0204 	bic.w	r2, r2, #4
 800a7b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	69d9      	ldr	r1, [r3, #28]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	691a      	ldr	r2, [r3, #16]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	61da      	str	r2, [r3, #28]
      break;
 800a7c8:	e023      	b.n	800a812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68b9      	ldr	r1, [r7, #8]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fb1b 	bl	800ae0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	69da      	ldr	r2, [r3, #28]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	69da      	ldr	r2, [r3, #28]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	69d9      	ldr	r1, [r3, #28]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	021a      	lsls	r2, r3, #8
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	430a      	orrs	r2, r1
 800a808:	61da      	str	r2, [r3, #28]
      break;
 800a80a:	e002      	b.n	800a812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	75fb      	strb	r3, [r7, #23]
      break;
 800a810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d101      	bne.n	800a840 <HAL_TIM_ConfigClockSource+0x1c>
 800a83c:	2302      	movs	r3, #2
 800a83e:	e0b4      	b.n	800a9aa <HAL_TIM_ConfigClockSource+0x186>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2202      	movs	r2, #2
 800a84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a85e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a878:	d03e      	beq.n	800a8f8 <HAL_TIM_ConfigClockSource+0xd4>
 800a87a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a87e:	f200 8087 	bhi.w	800a990 <HAL_TIM_ConfigClockSource+0x16c>
 800a882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a886:	f000 8086 	beq.w	800a996 <HAL_TIM_ConfigClockSource+0x172>
 800a88a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a88e:	d87f      	bhi.n	800a990 <HAL_TIM_ConfigClockSource+0x16c>
 800a890:	2b70      	cmp	r3, #112	; 0x70
 800a892:	d01a      	beq.n	800a8ca <HAL_TIM_ConfigClockSource+0xa6>
 800a894:	2b70      	cmp	r3, #112	; 0x70
 800a896:	d87b      	bhi.n	800a990 <HAL_TIM_ConfigClockSource+0x16c>
 800a898:	2b60      	cmp	r3, #96	; 0x60
 800a89a:	d050      	beq.n	800a93e <HAL_TIM_ConfigClockSource+0x11a>
 800a89c:	2b60      	cmp	r3, #96	; 0x60
 800a89e:	d877      	bhi.n	800a990 <HAL_TIM_ConfigClockSource+0x16c>
 800a8a0:	2b50      	cmp	r3, #80	; 0x50
 800a8a2:	d03c      	beq.n	800a91e <HAL_TIM_ConfigClockSource+0xfa>
 800a8a4:	2b50      	cmp	r3, #80	; 0x50
 800a8a6:	d873      	bhi.n	800a990 <HAL_TIM_ConfigClockSource+0x16c>
 800a8a8:	2b40      	cmp	r3, #64	; 0x40
 800a8aa:	d058      	beq.n	800a95e <HAL_TIM_ConfigClockSource+0x13a>
 800a8ac:	2b40      	cmp	r3, #64	; 0x40
 800a8ae:	d86f      	bhi.n	800a990 <HAL_TIM_ConfigClockSource+0x16c>
 800a8b0:	2b30      	cmp	r3, #48	; 0x30
 800a8b2:	d064      	beq.n	800a97e <HAL_TIM_ConfigClockSource+0x15a>
 800a8b4:	2b30      	cmp	r3, #48	; 0x30
 800a8b6:	d86b      	bhi.n	800a990 <HAL_TIM_ConfigClockSource+0x16c>
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	d060      	beq.n	800a97e <HAL_TIM_ConfigClockSource+0x15a>
 800a8bc:	2b20      	cmp	r3, #32
 800a8be:	d867      	bhi.n	800a990 <HAL_TIM_ConfigClockSource+0x16c>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d05c      	beq.n	800a97e <HAL_TIM_ConfigClockSource+0x15a>
 800a8c4:	2b10      	cmp	r3, #16
 800a8c6:	d05a      	beq.n	800a97e <HAL_TIM_ConfigClockSource+0x15a>
 800a8c8:	e062      	b.n	800a990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6818      	ldr	r0, [r3, #0]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	6899      	ldr	r1, [r3, #8]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	f000 fb67 	bl	800afac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a8ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	609a      	str	r2, [r3, #8]
      break;
 800a8f6:	e04f      	b.n	800a998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6818      	ldr	r0, [r3, #0]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	6899      	ldr	r1, [r3, #8]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	685a      	ldr	r2, [r3, #4]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	f000 fb50 	bl	800afac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	689a      	ldr	r2, [r3, #8]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a91a:	609a      	str	r2, [r3, #8]
      break;
 800a91c:	e03c      	b.n	800a998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6818      	ldr	r0, [r3, #0]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	6859      	ldr	r1, [r3, #4]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	461a      	mov	r2, r3
 800a92c:	f000 fac4 	bl	800aeb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2150      	movs	r1, #80	; 0x50
 800a936:	4618      	mov	r0, r3
 800a938:	f000 fb1d 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a93c:	e02c      	b.n	800a998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6818      	ldr	r0, [r3, #0]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	6859      	ldr	r1, [r3, #4]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	461a      	mov	r2, r3
 800a94c:	f000 fae3 	bl	800af16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2160      	movs	r1, #96	; 0x60
 800a956:	4618      	mov	r0, r3
 800a958:	f000 fb0d 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a95c:	e01c      	b.n	800a998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6818      	ldr	r0, [r3, #0]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	6859      	ldr	r1, [r3, #4]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	461a      	mov	r2, r3
 800a96c:	f000 faa4 	bl	800aeb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2140      	movs	r1, #64	; 0x40
 800a976:	4618      	mov	r0, r3
 800a978:	f000 fafd 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a97c:	e00c      	b.n	800a998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4619      	mov	r1, r3
 800a988:	4610      	mov	r0, r2
 800a98a:	f000 faf4 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a98e:	e003      	b.n	800a998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	73fb      	strb	r3, [r7, #15]
      break;
 800a994:	e000      	b.n	800a998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b083      	sub	sp, #12
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9ce:	bf00      	nop
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9e2:	bf00      	nop
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b083      	sub	sp, #12
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9f6:	bf00      	nop
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b083      	sub	sp, #12
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa0a:	bf00      	nop
 800aa0c:	370c      	adds	r7, #12
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
	...

0800aa18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a40      	ldr	r2, [pc, #256]	; (800ab2c <TIM_Base_SetConfig+0x114>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d013      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa36:	d00f      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a3d      	ldr	r2, [pc, #244]	; (800ab30 <TIM_Base_SetConfig+0x118>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d00b      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a3c      	ldr	r2, [pc, #240]	; (800ab34 <TIM_Base_SetConfig+0x11c>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d007      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a3b      	ldr	r2, [pc, #236]	; (800ab38 <TIM_Base_SetConfig+0x120>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d003      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a3a      	ldr	r2, [pc, #232]	; (800ab3c <TIM_Base_SetConfig+0x124>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d108      	bne.n	800aa6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a2f      	ldr	r2, [pc, #188]	; (800ab2c <TIM_Base_SetConfig+0x114>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d02b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa78:	d027      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a2c      	ldr	r2, [pc, #176]	; (800ab30 <TIM_Base_SetConfig+0x118>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d023      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a2b      	ldr	r2, [pc, #172]	; (800ab34 <TIM_Base_SetConfig+0x11c>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d01f      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a2a      	ldr	r2, [pc, #168]	; (800ab38 <TIM_Base_SetConfig+0x120>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d01b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a29      	ldr	r2, [pc, #164]	; (800ab3c <TIM_Base_SetConfig+0x124>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d017      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a28      	ldr	r2, [pc, #160]	; (800ab40 <TIM_Base_SetConfig+0x128>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d013      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a27      	ldr	r2, [pc, #156]	; (800ab44 <TIM_Base_SetConfig+0x12c>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00f      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a26      	ldr	r2, [pc, #152]	; (800ab48 <TIM_Base_SetConfig+0x130>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d00b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a25      	ldr	r2, [pc, #148]	; (800ab4c <TIM_Base_SetConfig+0x134>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d007      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a24      	ldr	r2, [pc, #144]	; (800ab50 <TIM_Base_SetConfig+0x138>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d003      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a23      	ldr	r2, [pc, #140]	; (800ab54 <TIM_Base_SetConfig+0x13c>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d108      	bne.n	800aadc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	4313      	orrs	r3, r2
 800aada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	689a      	ldr	r2, [r3, #8]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a0a      	ldr	r2, [pc, #40]	; (800ab2c <TIM_Base_SetConfig+0x114>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d003      	beq.n	800ab10 <TIM_Base_SetConfig+0xf8>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a0c      	ldr	r2, [pc, #48]	; (800ab3c <TIM_Base_SetConfig+0x124>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d103      	bne.n	800ab18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	691a      	ldr	r2, [r3, #16]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	615a      	str	r2, [r3, #20]
}
 800ab1e:	bf00      	nop
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	40010000 	.word	0x40010000
 800ab30:	40000400 	.word	0x40000400
 800ab34:	40000800 	.word	0x40000800
 800ab38:	40000c00 	.word	0x40000c00
 800ab3c:	40010400 	.word	0x40010400
 800ab40:	40014000 	.word	0x40014000
 800ab44:	40014400 	.word	0x40014400
 800ab48:	40014800 	.word	0x40014800
 800ab4c:	40001800 	.word	0x40001800
 800ab50:	40001c00 	.word	0x40001c00
 800ab54:	40002000 	.word	0x40002000

0800ab58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	f023 0201 	bic.w	r2, r3, #1
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	699b      	ldr	r3, [r3, #24]
 800ab7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f023 0303 	bic.w	r3, r3, #3
 800ab8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f023 0302 	bic.w	r3, r3, #2
 800aba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a20      	ldr	r2, [pc, #128]	; (800ac30 <TIM_OC1_SetConfig+0xd8>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d003      	beq.n	800abbc <TIM_OC1_SetConfig+0x64>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a1f      	ldr	r2, [pc, #124]	; (800ac34 <TIM_OC1_SetConfig+0xdc>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d10c      	bne.n	800abd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	f023 0308 	bic.w	r3, r3, #8
 800abc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	4313      	orrs	r3, r2
 800abcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	f023 0304 	bic.w	r3, r3, #4
 800abd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a15      	ldr	r2, [pc, #84]	; (800ac30 <TIM_OC1_SetConfig+0xd8>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d003      	beq.n	800abe6 <TIM_OC1_SetConfig+0x8e>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a14      	ldr	r2, [pc, #80]	; (800ac34 <TIM_OC1_SetConfig+0xdc>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d111      	bne.n	800ac0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	695b      	ldr	r3, [r3, #20]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	621a      	str	r2, [r3, #32]
}
 800ac24:	bf00      	nop
 800ac26:	371c      	adds	r7, #28
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	40010000 	.word	0x40010000
 800ac34:	40010400 	.word	0x40010400

0800ac38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	f023 0210 	bic.w	r2, r3, #16
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f023 0320 	bic.w	r3, r3, #32
 800ac82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	011b      	lsls	r3, r3, #4
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a22      	ldr	r2, [pc, #136]	; (800ad1c <TIM_OC2_SetConfig+0xe4>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d003      	beq.n	800aca0 <TIM_OC2_SetConfig+0x68>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a21      	ldr	r2, [pc, #132]	; (800ad20 <TIM_OC2_SetConfig+0xe8>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d10d      	bne.n	800acbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	011b      	lsls	r3, r3, #4
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a17      	ldr	r2, [pc, #92]	; (800ad1c <TIM_OC2_SetConfig+0xe4>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d003      	beq.n	800accc <TIM_OC2_SetConfig+0x94>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a16      	ldr	r2, [pc, #88]	; (800ad20 <TIM_OC2_SetConfig+0xe8>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d113      	bne.n	800acf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	693a      	ldr	r2, [r7, #16]
 800acf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	621a      	str	r2, [r3, #32]
}
 800ad0e:	bf00      	nop
 800ad10:	371c      	adds	r7, #28
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	40010000 	.word	0x40010000
 800ad20:	40010400 	.word	0x40010400

0800ad24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	69db      	ldr	r3, [r3, #28]
 800ad4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f023 0303 	bic.w	r3, r3, #3
 800ad5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	021b      	lsls	r3, r3, #8
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a21      	ldr	r2, [pc, #132]	; (800ae04 <TIM_OC3_SetConfig+0xe0>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d003      	beq.n	800ad8a <TIM_OC3_SetConfig+0x66>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a20      	ldr	r2, [pc, #128]	; (800ae08 <TIM_OC3_SetConfig+0xe4>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d10d      	bne.n	800ada6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ada4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a16      	ldr	r2, [pc, #88]	; (800ae04 <TIM_OC3_SetConfig+0xe0>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d003      	beq.n	800adb6 <TIM_OC3_SetConfig+0x92>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a15      	ldr	r2, [pc, #84]	; (800ae08 <TIM_OC3_SetConfig+0xe4>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d113      	bne.n	800adde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800adc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	4313      	orrs	r3, r2
 800add0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	011b      	lsls	r3, r3, #4
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	4313      	orrs	r3, r2
 800addc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	685a      	ldr	r2, [r3, #4]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	621a      	str	r2, [r3, #32]
}
 800adf8:	bf00      	nop
 800adfa:	371c      	adds	r7, #28
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	40010000 	.word	0x40010000
 800ae08:	40010400 	.word	0x40010400

0800ae0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	021b      	lsls	r3, r3, #8
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	031b      	lsls	r3, r3, #12
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a12      	ldr	r2, [pc, #72]	; (800aeb0 <TIM_OC4_SetConfig+0xa4>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d003      	beq.n	800ae74 <TIM_OC4_SetConfig+0x68>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a11      	ldr	r2, [pc, #68]	; (800aeb4 <TIM_OC4_SetConfig+0xa8>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d109      	bne.n	800ae88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	019b      	lsls	r3, r3, #6
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	621a      	str	r2, [r3, #32]
}
 800aea2:	bf00      	nop
 800aea4:	371c      	adds	r7, #28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	40010000 	.word	0x40010000
 800aeb4:	40010400 	.word	0x40010400

0800aeb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b087      	sub	sp, #28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a1b      	ldr	r3, [r3, #32]
 800aec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	f023 0201 	bic.w	r2, r3, #1
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	011b      	lsls	r3, r3, #4
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f023 030a 	bic.w	r3, r3, #10
 800aef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	621a      	str	r2, [r3, #32]
}
 800af0a:	bf00      	nop
 800af0c:	371c      	adds	r7, #28
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af16:	b480      	push	{r7}
 800af18:	b087      	sub	sp, #28
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	f023 0210 	bic.w	r2, r3, #16
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	031b      	lsls	r3, r3, #12
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	4313      	orrs	r3, r2
 800af4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	621a      	str	r2, [r3, #32]
}
 800af6a:	bf00      	nop
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af76:	b480      	push	{r7}
 800af78:	b085      	sub	sp, #20
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4313      	orrs	r3, r2
 800af94:	f043 0307 	orr.w	r3, r3, #7
 800af98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	609a      	str	r2, [r3, #8]
}
 800afa0:	bf00      	nop
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
 800afb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	021a      	lsls	r2, r3, #8
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	431a      	orrs	r2, r3
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	609a      	str	r2, [r3, #8]
}
 800afe0:	bf00      	nop
 800afe2:	371c      	adds	r7, #28
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	f003 031f 	and.w	r3, r3, #31
 800affe:	2201      	movs	r2, #1
 800b000:	fa02 f303 	lsl.w	r3, r2, r3
 800b004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6a1a      	ldr	r2, [r3, #32]
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	43db      	mvns	r3, r3
 800b00e:	401a      	ands	r2, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6a1a      	ldr	r2, [r3, #32]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f003 031f 	and.w	r3, r3, #31
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	fa01 f303 	lsl.w	r3, r1, r3
 800b024:	431a      	orrs	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	621a      	str	r2, [r3, #32]
}
 800b02a:	bf00      	nop
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
	...

0800b038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d101      	bne.n	800b050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b04c:	2302      	movs	r3, #2
 800b04e:	e05a      	b.n	800b106 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2202      	movs	r2, #2
 800b05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	4313      	orrs	r3, r2
 800b080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a21      	ldr	r2, [pc, #132]	; (800b114 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d022      	beq.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b09c:	d01d      	beq.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a1d      	ldr	r2, [pc, #116]	; (800b118 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d018      	beq.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a1b      	ldr	r2, [pc, #108]	; (800b11c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d013      	beq.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a1a      	ldr	r2, [pc, #104]	; (800b120 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d00e      	beq.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a18      	ldr	r2, [pc, #96]	; (800b124 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d009      	beq.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a17      	ldr	r2, [pc, #92]	; (800b128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d004      	beq.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a15      	ldr	r2, [pc, #84]	; (800b12c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d10c      	bne.n	800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	68ba      	ldr	r2, [r7, #8]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	40010000 	.word	0x40010000
 800b118:	40000400 	.word	0x40000400
 800b11c:	40000800 	.word	0x40000800
 800b120:	40000c00 	.word	0x40000c00
 800b124:	40010400 	.word	0x40010400
 800b128:	40014000 	.word	0x40014000
 800b12c:	40001800 	.word	0x40001800

0800b130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b138:	bf00      	nop
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d101      	bne.n	800b16a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e03f      	b.n	800b1ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d106      	bne.n	800b184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7fa fbf6 	bl	8005970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2224      	movs	r2, #36	; 0x24
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b19a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fc7b 	bl	800ba98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	691a      	ldr	r2, [r3, #16]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	695a      	ldr	r2, [r3, #20]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68da      	ldr	r2, [r3, #12]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b1d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2220      	movs	r2, #32
 800b1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2220      	movs	r2, #32
 800b1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
	...

0800b1f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b0ba      	sub	sp, #232	; 0xe8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b21a:	2300      	movs	r3, #0
 800b21c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b220:	2300      	movs	r3, #0
 800b222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22a:	f003 030f 	and.w	r3, r3, #15
 800b22e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10f      	bne.n	800b25a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b23e:	f003 0320 	and.w	r3, r3, #32
 800b242:	2b00      	cmp	r3, #0
 800b244:	d009      	beq.n	800b25a <HAL_UART_IRQHandler+0x66>
 800b246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b24a:	f003 0320 	and.w	r3, r3, #32
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fb65 	bl	800b922 <UART_Receive_IT>
      return;
 800b258:	e256      	b.n	800b708 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b25a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f000 80de 	beq.w	800b420 <HAL_UART_IRQHandler+0x22c>
 800b264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d106      	bne.n	800b27e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b274:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 80d1 	beq.w	800b420 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00b      	beq.n	800b2a2 <HAL_UART_IRQHandler+0xae>
 800b28a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b28e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29a:	f043 0201 	orr.w	r2, r3, #1
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2a6:	f003 0304 	and.w	r3, r3, #4
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00b      	beq.n	800b2c6 <HAL_UART_IRQHandler+0xd2>
 800b2ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d005      	beq.n	800b2c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	f043 0202 	orr.w	r2, r3, #2
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ca:	f003 0302 	and.w	r3, r3, #2
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00b      	beq.n	800b2ea <HAL_UART_IRQHandler+0xf6>
 800b2d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d005      	beq.n	800b2ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e2:	f043 0204 	orr.w	r2, r3, #4
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b2ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ee:	f003 0308 	and.w	r3, r3, #8
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d011      	beq.n	800b31a <HAL_UART_IRQHandler+0x126>
 800b2f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2fa:	f003 0320 	and.w	r3, r3, #32
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d105      	bne.n	800b30e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d005      	beq.n	800b31a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b312:	f043 0208 	orr.w	r2, r3, #8
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f000 81ed 	beq.w	800b6fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b328:	f003 0320 	and.w	r3, r3, #32
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d008      	beq.n	800b342 <HAL_UART_IRQHandler+0x14e>
 800b330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b334:	f003 0320 	and.w	r3, r3, #32
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d002      	beq.n	800b342 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 faf0 	bl	800b922 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	695b      	ldr	r3, [r3, #20]
 800b348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34c:	2b40      	cmp	r3, #64	; 0x40
 800b34e:	bf0c      	ite	eq
 800b350:	2301      	moveq	r3, #1
 800b352:	2300      	movne	r3, #0
 800b354:	b2db      	uxtb	r3, r3
 800b356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35e:	f003 0308 	and.w	r3, r3, #8
 800b362:	2b00      	cmp	r3, #0
 800b364:	d103      	bne.n	800b36e <HAL_UART_IRQHandler+0x17a>
 800b366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d04f      	beq.n	800b40e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f9f8 	bl	800b764 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b37e:	2b40      	cmp	r3, #64	; 0x40
 800b380:	d141      	bne.n	800b406 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	3314      	adds	r3, #20
 800b388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b390:	e853 3f00 	ldrex	r3, [r3]
 800b394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b39c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	3314      	adds	r3, #20
 800b3aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b3ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b3b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b3ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b3be:	e841 2300 	strex	r3, r2, [r1]
 800b3c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b3c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1d9      	bne.n	800b382 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d013      	beq.n	800b3fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3da:	4a7d      	ldr	r2, [pc, #500]	; (800b5d0 <HAL_UART_IRQHandler+0x3dc>)
 800b3dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fc feb3 	bl	800814e <HAL_DMA_Abort_IT>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d016      	beq.n	800b41c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3fc:	e00e      	b.n	800b41c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f99a 	bl	800b738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b404:	e00a      	b.n	800b41c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f996 	bl	800b738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b40c:	e006      	b.n	800b41c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f992 	bl	800b738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b41a:	e170      	b.n	800b6fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b41c:	bf00      	nop
    return;
 800b41e:	e16e      	b.n	800b6fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b424:	2b01      	cmp	r3, #1
 800b426:	f040 814a 	bne.w	800b6be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b42a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b42e:	f003 0310 	and.w	r3, r3, #16
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 8143 	beq.w	800b6be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b43c:	f003 0310 	and.w	r3, r3, #16
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 813c 	beq.w	800b6be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b446:	2300      	movs	r3, #0
 800b448:	60bb      	str	r3, [r7, #8]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	60bb      	str	r3, [r7, #8]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	60bb      	str	r3, [r7, #8]
 800b45a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	695b      	ldr	r3, [r3, #20]
 800b462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b466:	2b40      	cmp	r3, #64	; 0x40
 800b468:	f040 80b4 	bne.w	800b5d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b478:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f000 8140 	beq.w	800b702 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b48a:	429a      	cmp	r2, r3
 800b48c:	f080 8139 	bcs.w	800b702 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b496:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4a2:	f000 8088 	beq.w	800b5b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	330c      	adds	r3, #12
 800b4ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b4b4:	e853 3f00 	ldrex	r3, [r3]
 800b4b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b4bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	330c      	adds	r3, #12
 800b4ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b4d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b4d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b4de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b4e2:	e841 2300 	strex	r3, r2, [r1]
 800b4e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b4ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1d9      	bne.n	800b4a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3314      	adds	r3, #20
 800b4f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4fc:	e853 3f00 	ldrex	r3, [r3]
 800b500:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b504:	f023 0301 	bic.w	r3, r3, #1
 800b508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	3314      	adds	r3, #20
 800b512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b516:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b51a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b51e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b522:	e841 2300 	strex	r3, r2, [r1]
 800b526:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1e1      	bne.n	800b4f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3314      	adds	r3, #20
 800b534:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b538:	e853 3f00 	ldrex	r3, [r3]
 800b53c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b53e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3314      	adds	r3, #20
 800b54e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b552:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b554:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b556:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b558:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e3      	bne.n	800b52e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2220      	movs	r2, #32
 800b56a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	330c      	adds	r3, #12
 800b57a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b57e:	e853 3f00 	ldrex	r3, [r3]
 800b582:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b586:	f023 0310 	bic.w	r3, r3, #16
 800b58a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	330c      	adds	r3, #12
 800b594:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b598:	65ba      	str	r2, [r7, #88]	; 0x58
 800b59a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b59e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5a0:	e841 2300 	strex	r3, r2, [r1]
 800b5a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1e3      	bne.n	800b574 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fc fd5c 	bl	800806e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f8c0 	bl	800b74c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b5cc:	e099      	b.n	800b702 <HAL_UART_IRQHandler+0x50e>
 800b5ce:	bf00      	nop
 800b5d0:	0800b82b 	.word	0x0800b82b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f000 808b 	beq.w	800b706 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b5f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 8086 	beq.w	800b706 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	330c      	adds	r3, #12
 800b600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b604:	e853 3f00 	ldrex	r3, [r3]
 800b608:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b610:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	330c      	adds	r3, #12
 800b61a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b61e:	647a      	str	r2, [r7, #68]	; 0x44
 800b620:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b622:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b626:	e841 2300 	strex	r3, r2, [r1]
 800b62a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1e3      	bne.n	800b5fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	3314      	adds	r3, #20
 800b638:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	e853 3f00 	ldrex	r3, [r3]
 800b640:	623b      	str	r3, [r7, #32]
   return(result);
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	f023 0301 	bic.w	r3, r3, #1
 800b648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	3314      	adds	r3, #20
 800b652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b656:	633a      	str	r2, [r7, #48]	; 0x30
 800b658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b65e:	e841 2300 	strex	r3, r2, [r1]
 800b662:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1e3      	bne.n	800b632 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2220      	movs	r2, #32
 800b66e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	330c      	adds	r3, #12
 800b67e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	e853 3f00 	ldrex	r3, [r3]
 800b686:	60fb      	str	r3, [r7, #12]
   return(result);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f023 0310 	bic.w	r3, r3, #16
 800b68e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	330c      	adds	r3, #12
 800b698:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b69c:	61fa      	str	r2, [r7, #28]
 800b69e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a0:	69b9      	ldr	r1, [r7, #24]
 800b6a2:	69fa      	ldr	r2, [r7, #28]
 800b6a4:	e841 2300 	strex	r3, r2, [r1]
 800b6a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e3      	bne.n	800b678 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f848 	bl	800b74c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b6bc:	e023      	b.n	800b706 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d009      	beq.n	800b6de <HAL_UART_IRQHandler+0x4ea>
 800b6ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d003      	beq.n	800b6de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f8bb 	bl	800b852 <UART_Transmit_IT>
    return;
 800b6dc:	e014      	b.n	800b708 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00e      	beq.n	800b708 <HAL_UART_IRQHandler+0x514>
 800b6ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d008      	beq.n	800b708 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f8fb 	bl	800b8f2 <UART_EndTransmit_IT>
    return;
 800b6fc:	e004      	b.n	800b708 <HAL_UART_IRQHandler+0x514>
    return;
 800b6fe:	bf00      	nop
 800b700:	e002      	b.n	800b708 <HAL_UART_IRQHandler+0x514>
      return;
 800b702:	bf00      	nop
 800b704:	e000      	b.n	800b708 <HAL_UART_IRQHandler+0x514>
      return;
 800b706:	bf00      	nop
  }
}
 800b708:	37e8      	adds	r7, #232	; 0xe8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop

0800b710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	460b      	mov	r3, r1
 800b756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b764:	b480      	push	{r7}
 800b766:	b095      	sub	sp, #84	; 0x54
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	330c      	adds	r3, #12
 800b772:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b776:	e853 3f00 	ldrex	r3, [r3]
 800b77a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b782:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	330c      	adds	r3, #12
 800b78a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b78c:	643a      	str	r2, [r7, #64]	; 0x40
 800b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b790:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b794:	e841 2300 	strex	r3, r2, [r1]
 800b798:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1e5      	bne.n	800b76c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	3314      	adds	r3, #20
 800b7a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a8:	6a3b      	ldr	r3, [r7, #32]
 800b7aa:	e853 3f00 	ldrex	r3, [r3]
 800b7ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	f023 0301 	bic.w	r3, r3, #1
 800b7b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3314      	adds	r3, #20
 800b7be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b7c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7c8:	e841 2300 	strex	r3, r2, [r1]
 800b7cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1e5      	bne.n	800b7a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d119      	bne.n	800b810 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	330c      	adds	r3, #12
 800b7e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	e853 3f00 	ldrex	r3, [r3]
 800b7ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	f023 0310 	bic.w	r3, r3, #16
 800b7f2:	647b      	str	r3, [r7, #68]	; 0x44
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	330c      	adds	r3, #12
 800b7fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7fc:	61ba      	str	r2, [r7, #24]
 800b7fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b800:	6979      	ldr	r1, [r7, #20]
 800b802:	69ba      	ldr	r2, [r7, #24]
 800b804:	e841 2300 	strex	r3, r2, [r1]
 800b808:	613b      	str	r3, [r7, #16]
   return(result);
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1e5      	bne.n	800b7dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2220      	movs	r2, #32
 800b814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b81e:	bf00      	nop
 800b820:	3754      	adds	r7, #84	; 0x54
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b084      	sub	sp, #16
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b836:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7ff ff77 	bl	800b738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b84a:	bf00      	nop
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b852:	b480      	push	{r7}
 800b854:	b085      	sub	sp, #20
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b21      	cmp	r3, #33	; 0x21
 800b864:	d13e      	bne.n	800b8e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b86e:	d114      	bne.n	800b89a <UART_Transmit_IT+0x48>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d110      	bne.n	800b89a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a1b      	ldr	r3, [r3, #32]
 800b87c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b88c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a1b      	ldr	r3, [r3, #32]
 800b892:	1c9a      	adds	r2, r3, #2
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	621a      	str	r2, [r3, #32]
 800b898:	e008      	b.n	800b8ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	1c59      	adds	r1, r3, #1
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	6211      	str	r1, [r2, #32]
 800b8a4:	781a      	ldrb	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10f      	bne.n	800b8e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68da      	ldr	r2, [r3, #12]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68da      	ldr	r2, [r3, #12]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	e000      	b.n	800b8e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b8e4:	2302      	movs	r3, #2
  }
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b082      	sub	sp, #8
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68da      	ldr	r2, [r3, #12]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b908:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2220      	movs	r2, #32
 800b90e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7ff fefc 	bl	800b710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b08c      	sub	sp, #48	; 0x30
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b22      	cmp	r3, #34	; 0x22
 800b934:	f040 80ab 	bne.w	800ba8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b940:	d117      	bne.n	800b972 <UART_Receive_IT+0x50>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d113      	bne.n	800b972 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b94a:	2300      	movs	r3, #0
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b952:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b960:	b29a      	uxth	r2, r3
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96a:	1c9a      	adds	r2, r3, #2
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	629a      	str	r2, [r3, #40]	; 0x28
 800b970:	e026      	b.n	800b9c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b976:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b978:	2300      	movs	r3, #0
 800b97a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b984:	d007      	beq.n	800b996 <UART_Receive_IT+0x74>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10a      	bne.n	800b9a4 <UART_Receive_IT+0x82>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d106      	bne.n	800b9a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a0:	701a      	strb	r2, [r3, #0]
 800b9a2:	e008      	b.n	800b9b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9b0:	b2da      	uxtb	r2, r3
 800b9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ba:	1c5a      	adds	r2, r3, #1
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d15a      	bne.n	800ba8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68da      	ldr	r2, [r3, #12]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f022 0220 	bic.w	r2, r2, #32
 800b9e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68da      	ldr	r2, [r3, #12]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	695a      	ldr	r2, [r3, #20]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f022 0201 	bic.w	r2, r2, #1
 800ba02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2220      	movs	r2, #32
 800ba08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d135      	bne.n	800ba80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	330c      	adds	r3, #12
 800ba20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	e853 3f00 	ldrex	r3, [r3]
 800ba28:	613b      	str	r3, [r7, #16]
   return(result);
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	f023 0310 	bic.w	r3, r3, #16
 800ba30:	627b      	str	r3, [r7, #36]	; 0x24
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	330c      	adds	r3, #12
 800ba38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba3a:	623a      	str	r2, [r7, #32]
 800ba3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3e:	69f9      	ldr	r1, [r7, #28]
 800ba40:	6a3a      	ldr	r2, [r7, #32]
 800ba42:	e841 2300 	strex	r3, r2, [r1]
 800ba46:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1e5      	bne.n	800ba1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0310 	and.w	r3, r3, #16
 800ba58:	2b10      	cmp	r3, #16
 800ba5a:	d10a      	bne.n	800ba72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	60fb      	str	r3, [r7, #12]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	60fb      	str	r3, [r7, #12]
 800ba70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba76:	4619      	mov	r1, r3
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f7ff fe67 	bl	800b74c <HAL_UARTEx_RxEventCallback>
 800ba7e:	e002      	b.n	800ba86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7ff fe4f 	bl	800b724 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	e002      	b.n	800ba90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	e000      	b.n	800ba90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ba8e:	2302      	movs	r3, #2
  }
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3730      	adds	r7, #48	; 0x30
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba9c:	b0c0      	sub	sp, #256	; 0x100
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800baa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bab4:	68d9      	ldr	r1, [r3, #12]
 800bab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	ea40 0301 	orr.w	r3, r0, r1
 800bac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac6:	689a      	ldr	r2, [r3, #8]
 800bac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	431a      	orrs	r2, r3
 800bad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bad4:	695b      	ldr	r3, [r3, #20]
 800bad6:	431a      	orrs	r2, r3
 800bad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	4313      	orrs	r3, r2
 800bae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800baf0:	f021 010c 	bic.w	r1, r1, #12
 800baf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bafe:	430b      	orrs	r3, r1
 800bb00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	695b      	ldr	r3, [r3, #20]
 800bb0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bb0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb12:	6999      	ldr	r1, [r3, #24]
 800bb14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	ea40 0301 	orr.w	r3, r0, r1
 800bb1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4b8f      	ldr	r3, [pc, #572]	; (800bd64 <UART_SetConfig+0x2cc>)
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d005      	beq.n	800bb38 <UART_SetConfig+0xa0>
 800bb2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	4b8d      	ldr	r3, [pc, #564]	; (800bd68 <UART_SetConfig+0x2d0>)
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d104      	bne.n	800bb42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bb38:	f7fe f802 	bl	8009b40 <HAL_RCC_GetPCLK2Freq>
 800bb3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bb40:	e003      	b.n	800bb4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb42:	f7fd ffe9 	bl	8009b18 <HAL_RCC_GetPCLK1Freq>
 800bb46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb4e:	69db      	ldr	r3, [r3, #28]
 800bb50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb54:	f040 810c 	bne.w	800bd70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bb66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bb6a:	4622      	mov	r2, r4
 800bb6c:	462b      	mov	r3, r5
 800bb6e:	1891      	adds	r1, r2, r2
 800bb70:	65b9      	str	r1, [r7, #88]	; 0x58
 800bb72:	415b      	adcs	r3, r3
 800bb74:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	eb12 0801 	adds.w	r8, r2, r1
 800bb80:	4629      	mov	r1, r5
 800bb82:	eb43 0901 	adc.w	r9, r3, r1
 800bb86:	f04f 0200 	mov.w	r2, #0
 800bb8a:	f04f 0300 	mov.w	r3, #0
 800bb8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bb92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bb96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bb9a:	4690      	mov	r8, r2
 800bb9c:	4699      	mov	r9, r3
 800bb9e:	4623      	mov	r3, r4
 800bba0:	eb18 0303 	adds.w	r3, r8, r3
 800bba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bba8:	462b      	mov	r3, r5
 800bbaa:	eb49 0303 	adc.w	r3, r9, r3
 800bbae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bbb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bbbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bbc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	18db      	adds	r3, r3, r3
 800bbca:	653b      	str	r3, [r7, #80]	; 0x50
 800bbcc:	4613      	mov	r3, r2
 800bbce:	eb42 0303 	adc.w	r3, r2, r3
 800bbd2:	657b      	str	r3, [r7, #84]	; 0x54
 800bbd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bbd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bbdc:	f7f4 ff9c 	bl	8000b18 <__aeabi_uldivmod>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4b61      	ldr	r3, [pc, #388]	; (800bd6c <UART_SetConfig+0x2d4>)
 800bbe6:	fba3 2302 	umull	r2, r3, r3, r2
 800bbea:	095b      	lsrs	r3, r3, #5
 800bbec:	011c      	lsls	r4, r3, #4
 800bbee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bbfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bc00:	4642      	mov	r2, r8
 800bc02:	464b      	mov	r3, r9
 800bc04:	1891      	adds	r1, r2, r2
 800bc06:	64b9      	str	r1, [r7, #72]	; 0x48
 800bc08:	415b      	adcs	r3, r3
 800bc0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bc10:	4641      	mov	r1, r8
 800bc12:	eb12 0a01 	adds.w	sl, r2, r1
 800bc16:	4649      	mov	r1, r9
 800bc18:	eb43 0b01 	adc.w	fp, r3, r1
 800bc1c:	f04f 0200 	mov.w	r2, #0
 800bc20:	f04f 0300 	mov.w	r3, #0
 800bc24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bc28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bc2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc30:	4692      	mov	sl, r2
 800bc32:	469b      	mov	fp, r3
 800bc34:	4643      	mov	r3, r8
 800bc36:	eb1a 0303 	adds.w	r3, sl, r3
 800bc3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc3e:	464b      	mov	r3, r9
 800bc40:	eb4b 0303 	adc.w	r3, fp, r3
 800bc44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bc58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	18db      	adds	r3, r3, r3
 800bc60:	643b      	str	r3, [r7, #64]	; 0x40
 800bc62:	4613      	mov	r3, r2
 800bc64:	eb42 0303 	adc.w	r3, r2, r3
 800bc68:	647b      	str	r3, [r7, #68]	; 0x44
 800bc6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bc6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bc72:	f7f4 ff51 	bl	8000b18 <__aeabi_uldivmod>
 800bc76:	4602      	mov	r2, r0
 800bc78:	460b      	mov	r3, r1
 800bc7a:	4611      	mov	r1, r2
 800bc7c:	4b3b      	ldr	r3, [pc, #236]	; (800bd6c <UART_SetConfig+0x2d4>)
 800bc7e:	fba3 2301 	umull	r2, r3, r3, r1
 800bc82:	095b      	lsrs	r3, r3, #5
 800bc84:	2264      	movs	r2, #100	; 0x64
 800bc86:	fb02 f303 	mul.w	r3, r2, r3
 800bc8a:	1acb      	subs	r3, r1, r3
 800bc8c:	00db      	lsls	r3, r3, #3
 800bc8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bc92:	4b36      	ldr	r3, [pc, #216]	; (800bd6c <UART_SetConfig+0x2d4>)
 800bc94:	fba3 2302 	umull	r2, r3, r3, r2
 800bc98:	095b      	lsrs	r3, r3, #5
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bca0:	441c      	add	r4, r3
 800bca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bca6:	2200      	movs	r2, #0
 800bca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bcac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bcb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bcb4:	4642      	mov	r2, r8
 800bcb6:	464b      	mov	r3, r9
 800bcb8:	1891      	adds	r1, r2, r2
 800bcba:	63b9      	str	r1, [r7, #56]	; 0x38
 800bcbc:	415b      	adcs	r3, r3
 800bcbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bcc4:	4641      	mov	r1, r8
 800bcc6:	1851      	adds	r1, r2, r1
 800bcc8:	6339      	str	r1, [r7, #48]	; 0x30
 800bcca:	4649      	mov	r1, r9
 800bccc:	414b      	adcs	r3, r1
 800bcce:	637b      	str	r3, [r7, #52]	; 0x34
 800bcd0:	f04f 0200 	mov.w	r2, #0
 800bcd4:	f04f 0300 	mov.w	r3, #0
 800bcd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bcdc:	4659      	mov	r1, fp
 800bcde:	00cb      	lsls	r3, r1, #3
 800bce0:	4651      	mov	r1, sl
 800bce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bce6:	4651      	mov	r1, sl
 800bce8:	00ca      	lsls	r2, r1, #3
 800bcea:	4610      	mov	r0, r2
 800bcec:	4619      	mov	r1, r3
 800bcee:	4603      	mov	r3, r0
 800bcf0:	4642      	mov	r2, r8
 800bcf2:	189b      	adds	r3, r3, r2
 800bcf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcf8:	464b      	mov	r3, r9
 800bcfa:	460a      	mov	r2, r1
 800bcfc:	eb42 0303 	adc.w	r3, r2, r3
 800bd00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bd14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bd18:	460b      	mov	r3, r1
 800bd1a:	18db      	adds	r3, r3, r3
 800bd1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd1e:	4613      	mov	r3, r2
 800bd20:	eb42 0303 	adc.w	r3, r2, r3
 800bd24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bd2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bd2e:	f7f4 fef3 	bl	8000b18 <__aeabi_uldivmod>
 800bd32:	4602      	mov	r2, r0
 800bd34:	460b      	mov	r3, r1
 800bd36:	4b0d      	ldr	r3, [pc, #52]	; (800bd6c <UART_SetConfig+0x2d4>)
 800bd38:	fba3 1302 	umull	r1, r3, r3, r2
 800bd3c:	095b      	lsrs	r3, r3, #5
 800bd3e:	2164      	movs	r1, #100	; 0x64
 800bd40:	fb01 f303 	mul.w	r3, r1, r3
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	3332      	adds	r3, #50	; 0x32
 800bd4a:	4a08      	ldr	r2, [pc, #32]	; (800bd6c <UART_SetConfig+0x2d4>)
 800bd4c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd50:	095b      	lsrs	r3, r3, #5
 800bd52:	f003 0207 	and.w	r2, r3, #7
 800bd56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4422      	add	r2, r4
 800bd5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd60:	e106      	b.n	800bf70 <UART_SetConfig+0x4d8>
 800bd62:	bf00      	nop
 800bd64:	40011000 	.word	0x40011000
 800bd68:	40011400 	.word	0x40011400
 800bd6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd74:	2200      	movs	r2, #0
 800bd76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bd7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bd82:	4642      	mov	r2, r8
 800bd84:	464b      	mov	r3, r9
 800bd86:	1891      	adds	r1, r2, r2
 800bd88:	6239      	str	r1, [r7, #32]
 800bd8a:	415b      	adcs	r3, r3
 800bd8c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bd92:	4641      	mov	r1, r8
 800bd94:	1854      	adds	r4, r2, r1
 800bd96:	4649      	mov	r1, r9
 800bd98:	eb43 0501 	adc.w	r5, r3, r1
 800bd9c:	f04f 0200 	mov.w	r2, #0
 800bda0:	f04f 0300 	mov.w	r3, #0
 800bda4:	00eb      	lsls	r3, r5, #3
 800bda6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bdaa:	00e2      	lsls	r2, r4, #3
 800bdac:	4614      	mov	r4, r2
 800bdae:	461d      	mov	r5, r3
 800bdb0:	4643      	mov	r3, r8
 800bdb2:	18e3      	adds	r3, r4, r3
 800bdb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bdb8:	464b      	mov	r3, r9
 800bdba:	eb45 0303 	adc.w	r3, r5, r3
 800bdbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bdc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bdd2:	f04f 0200 	mov.w	r2, #0
 800bdd6:	f04f 0300 	mov.w	r3, #0
 800bdda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bdde:	4629      	mov	r1, r5
 800bde0:	008b      	lsls	r3, r1, #2
 800bde2:	4621      	mov	r1, r4
 800bde4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bde8:	4621      	mov	r1, r4
 800bdea:	008a      	lsls	r2, r1, #2
 800bdec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bdf0:	f7f4 fe92 	bl	8000b18 <__aeabi_uldivmod>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4b60      	ldr	r3, [pc, #384]	; (800bf7c <UART_SetConfig+0x4e4>)
 800bdfa:	fba3 2302 	umull	r2, r3, r3, r2
 800bdfe:	095b      	lsrs	r3, r3, #5
 800be00:	011c      	lsls	r4, r3, #4
 800be02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be06:	2200      	movs	r2, #0
 800be08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800be14:	4642      	mov	r2, r8
 800be16:	464b      	mov	r3, r9
 800be18:	1891      	adds	r1, r2, r2
 800be1a:	61b9      	str	r1, [r7, #24]
 800be1c:	415b      	adcs	r3, r3
 800be1e:	61fb      	str	r3, [r7, #28]
 800be20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be24:	4641      	mov	r1, r8
 800be26:	1851      	adds	r1, r2, r1
 800be28:	6139      	str	r1, [r7, #16]
 800be2a:	4649      	mov	r1, r9
 800be2c:	414b      	adcs	r3, r1
 800be2e:	617b      	str	r3, [r7, #20]
 800be30:	f04f 0200 	mov.w	r2, #0
 800be34:	f04f 0300 	mov.w	r3, #0
 800be38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800be3c:	4659      	mov	r1, fp
 800be3e:	00cb      	lsls	r3, r1, #3
 800be40:	4651      	mov	r1, sl
 800be42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be46:	4651      	mov	r1, sl
 800be48:	00ca      	lsls	r2, r1, #3
 800be4a:	4610      	mov	r0, r2
 800be4c:	4619      	mov	r1, r3
 800be4e:	4603      	mov	r3, r0
 800be50:	4642      	mov	r2, r8
 800be52:	189b      	adds	r3, r3, r2
 800be54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be58:	464b      	mov	r3, r9
 800be5a:	460a      	mov	r2, r1
 800be5c:	eb42 0303 	adc.w	r3, r2, r3
 800be60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	67bb      	str	r3, [r7, #120]	; 0x78
 800be6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800be70:	f04f 0200 	mov.w	r2, #0
 800be74:	f04f 0300 	mov.w	r3, #0
 800be78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800be7c:	4649      	mov	r1, r9
 800be7e:	008b      	lsls	r3, r1, #2
 800be80:	4641      	mov	r1, r8
 800be82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be86:	4641      	mov	r1, r8
 800be88:	008a      	lsls	r2, r1, #2
 800be8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800be8e:	f7f4 fe43 	bl	8000b18 <__aeabi_uldivmod>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4611      	mov	r1, r2
 800be98:	4b38      	ldr	r3, [pc, #224]	; (800bf7c <UART_SetConfig+0x4e4>)
 800be9a:	fba3 2301 	umull	r2, r3, r3, r1
 800be9e:	095b      	lsrs	r3, r3, #5
 800bea0:	2264      	movs	r2, #100	; 0x64
 800bea2:	fb02 f303 	mul.w	r3, r2, r3
 800bea6:	1acb      	subs	r3, r1, r3
 800bea8:	011b      	lsls	r3, r3, #4
 800beaa:	3332      	adds	r3, #50	; 0x32
 800beac:	4a33      	ldr	r2, [pc, #204]	; (800bf7c <UART_SetConfig+0x4e4>)
 800beae:	fba2 2303 	umull	r2, r3, r2, r3
 800beb2:	095b      	lsrs	r3, r3, #5
 800beb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800beb8:	441c      	add	r4, r3
 800beba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bebe:	2200      	movs	r2, #0
 800bec0:	673b      	str	r3, [r7, #112]	; 0x70
 800bec2:	677a      	str	r2, [r7, #116]	; 0x74
 800bec4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bec8:	4642      	mov	r2, r8
 800beca:	464b      	mov	r3, r9
 800becc:	1891      	adds	r1, r2, r2
 800bece:	60b9      	str	r1, [r7, #8]
 800bed0:	415b      	adcs	r3, r3
 800bed2:	60fb      	str	r3, [r7, #12]
 800bed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bed8:	4641      	mov	r1, r8
 800beda:	1851      	adds	r1, r2, r1
 800bedc:	6039      	str	r1, [r7, #0]
 800bede:	4649      	mov	r1, r9
 800bee0:	414b      	adcs	r3, r1
 800bee2:	607b      	str	r3, [r7, #4]
 800bee4:	f04f 0200 	mov.w	r2, #0
 800bee8:	f04f 0300 	mov.w	r3, #0
 800beec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bef0:	4659      	mov	r1, fp
 800bef2:	00cb      	lsls	r3, r1, #3
 800bef4:	4651      	mov	r1, sl
 800bef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800befa:	4651      	mov	r1, sl
 800befc:	00ca      	lsls	r2, r1, #3
 800befe:	4610      	mov	r0, r2
 800bf00:	4619      	mov	r1, r3
 800bf02:	4603      	mov	r3, r0
 800bf04:	4642      	mov	r2, r8
 800bf06:	189b      	adds	r3, r3, r2
 800bf08:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf0a:	464b      	mov	r3, r9
 800bf0c:	460a      	mov	r2, r1
 800bf0e:	eb42 0303 	adc.w	r3, r2, r3
 800bf12:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	663b      	str	r3, [r7, #96]	; 0x60
 800bf1e:	667a      	str	r2, [r7, #100]	; 0x64
 800bf20:	f04f 0200 	mov.w	r2, #0
 800bf24:	f04f 0300 	mov.w	r3, #0
 800bf28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	008b      	lsls	r3, r1, #2
 800bf30:	4641      	mov	r1, r8
 800bf32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf36:	4641      	mov	r1, r8
 800bf38:	008a      	lsls	r2, r1, #2
 800bf3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bf3e:	f7f4 fdeb 	bl	8000b18 <__aeabi_uldivmod>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4b0d      	ldr	r3, [pc, #52]	; (800bf7c <UART_SetConfig+0x4e4>)
 800bf48:	fba3 1302 	umull	r1, r3, r3, r2
 800bf4c:	095b      	lsrs	r3, r3, #5
 800bf4e:	2164      	movs	r1, #100	; 0x64
 800bf50:	fb01 f303 	mul.w	r3, r1, r3
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	011b      	lsls	r3, r3, #4
 800bf58:	3332      	adds	r3, #50	; 0x32
 800bf5a:	4a08      	ldr	r2, [pc, #32]	; (800bf7c <UART_SetConfig+0x4e4>)
 800bf5c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf60:	095b      	lsrs	r3, r3, #5
 800bf62:	f003 020f 	and.w	r2, r3, #15
 800bf66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4422      	add	r2, r4
 800bf6e:	609a      	str	r2, [r3, #8]
}
 800bf70:	bf00      	nop
 800bf72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bf76:	46bd      	mov	sp, r7
 800bf78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf7c:	51eb851f 	.word	0x51eb851f

0800bf80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d123      	bne.n	800bfda <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800bf9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	6851      	ldr	r1, [r2, #4]
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	6892      	ldr	r2, [r2, #8]
 800bfa6:	4311      	orrs	r1, r2
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	68d2      	ldr	r2, [r2, #12]
 800bfac:	4311      	orrs	r1, r2
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	6912      	ldr	r2, [r2, #16]
 800bfb2:	4311      	orrs	r1, r2
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	6952      	ldr	r2, [r2, #20]
 800bfb8:	4311      	orrs	r1, r2
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	6992      	ldr	r2, [r2, #24]
 800bfbe:	4311      	orrs	r1, r2
 800bfc0:	683a      	ldr	r2, [r7, #0]
 800bfc2:	69d2      	ldr	r2, [r2, #28]
 800bfc4:	4311      	orrs	r1, r2
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	6a12      	ldr	r2, [r2, #32]
 800bfca:	4311      	orrs	r1, r2
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	431a      	orrs	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	e028      	b.n	800c02c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	69d9      	ldr	r1, [r3, #28]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	4319      	orrs	r1, r3
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff0:	430b      	orrs	r3, r1
 800bff2:	431a      	orrs	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c000:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	6851      	ldr	r1, [r2, #4]
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	6892      	ldr	r2, [r2, #8]
 800c00c:	4311      	orrs	r1, r2
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	68d2      	ldr	r2, [r2, #12]
 800c012:	4311      	orrs	r1, r2
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	6912      	ldr	r2, [r2, #16]
 800c018:	4311      	orrs	r1, r2
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	6952      	ldr	r2, [r2, #20]
 800c01e:	4311      	orrs	r1, r2
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	6992      	ldr	r2, [r2, #24]
 800c024:	430a      	orrs	r2, r1
 800c026:	431a      	orrs	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b085      	sub	sp, #20
 800c03e:	af00      	add	r7, sp, #0
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	60b9      	str	r1, [r7, #8]
 800c044:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d128      	bne.n	800c09e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	1e59      	subs	r1, r3, #1
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	3b01      	subs	r3, #1
 800c060:	011b      	lsls	r3, r3, #4
 800c062:	4319      	orrs	r1, r3
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	3b01      	subs	r3, #1
 800c06a:	021b      	lsls	r3, r3, #8
 800c06c:	4319      	orrs	r1, r3
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	3b01      	subs	r3, #1
 800c074:	031b      	lsls	r3, r3, #12
 800c076:	4319      	orrs	r1, r3
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	3b01      	subs	r3, #1
 800c07e:	041b      	lsls	r3, r3, #16
 800c080:	4319      	orrs	r1, r3
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	695b      	ldr	r3, [r3, #20]
 800c086:	3b01      	subs	r3, #1
 800c088:	051b      	lsls	r3, r3, #20
 800c08a:	4319      	orrs	r1, r3
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	3b01      	subs	r3, #1
 800c092:	061b      	lsls	r3, r3, #24
 800c094:	430b      	orrs	r3, r1
 800c096:	431a      	orrs	r2, r3
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	609a      	str	r2, [r3, #8]
 800c09c:	e02f      	b.n	800c0fe <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c0a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	68d2      	ldr	r2, [r2, #12]
 800c0ae:	3a01      	subs	r2, #1
 800c0b0:	0311      	lsls	r1, r2, #12
 800c0b2:	68ba      	ldr	r2, [r7, #8]
 800c0b4:	6952      	ldr	r2, [r2, #20]
 800c0b6:	3a01      	subs	r2, #1
 800c0b8:	0512      	lsls	r2, r2, #20
 800c0ba:	430a      	orrs	r2, r1
 800c0bc:	431a      	orrs	r2, r3
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	1e59      	subs	r1, r3, #1
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	011b      	lsls	r3, r3, #4
 800c0d8:	4319      	orrs	r1, r3
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	021b      	lsls	r3, r3, #8
 800c0e2:	4319      	orrs	r1, r3
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	041b      	lsls	r3, r3, #16
 800c0ec:	4319      	orrs	r1, r3
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	699b      	ldr	r3, [r3, #24]
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	061b      	lsls	r3, r3, #24
 800c0f6:	430b      	orrs	r3, r1
 800c0f8:	431a      	orrs	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3714      	adds	r7, #20
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b086      	sub	sp, #24
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c118:	2300      	movs	r3, #0
 800c11a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	0d9b      	lsrs	r3, r3, #22
 800c122:	059b      	lsls	r3, r3, #22
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	6811      	ldr	r1, [r2, #0]
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	6852      	ldr	r2, [r2, #4]
 800c12c:	4311      	orrs	r1, r2
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	6892      	ldr	r2, [r2, #8]
 800c132:	3a01      	subs	r2, #1
 800c134:	0152      	lsls	r2, r2, #5
 800c136:	4311      	orrs	r1, r2
 800c138:	68ba      	ldr	r2, [r7, #8]
 800c13a:	68d2      	ldr	r2, [r2, #12]
 800c13c:	0252      	lsls	r2, r2, #9
 800c13e:	430a      	orrs	r2, r1
 800c140:	431a      	orrs	r2, r3
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800c146:	f7fb fe51 	bl	8007dec <HAL_GetTick>
 800c14a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c14c:	e010      	b.n	800c170 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c154:	d00c      	beq.n	800c170 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d007      	beq.n	800c16c <FMC_SDRAM_SendCommand+0x60>
 800c15c:	f7fb fe46 	bl	8007dec <HAL_GetTick>
 800c160:	4602      	mov	r2, r0
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d201      	bcs.n	800c170 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800c16c:	2303      	movs	r3, #3
 800c16e:	e006      	b.n	800c17e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	f003 0320 	and.w	r3, r3, #32
 800c178:	2b20      	cmp	r3, #32
 800c17a:	d0e8      	beq.n	800c14e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <__itoa>:
 800c186:	1e93      	subs	r3, r2, #2
 800c188:	2b22      	cmp	r3, #34	; 0x22
 800c18a:	b510      	push	{r4, lr}
 800c18c:	460c      	mov	r4, r1
 800c18e:	d904      	bls.n	800c19a <__itoa+0x14>
 800c190:	2300      	movs	r3, #0
 800c192:	700b      	strb	r3, [r1, #0]
 800c194:	461c      	mov	r4, r3
 800c196:	4620      	mov	r0, r4
 800c198:	bd10      	pop	{r4, pc}
 800c19a:	2a0a      	cmp	r2, #10
 800c19c:	d109      	bne.n	800c1b2 <__itoa+0x2c>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	da07      	bge.n	800c1b2 <__itoa+0x2c>
 800c1a2:	232d      	movs	r3, #45	; 0x2d
 800c1a4:	700b      	strb	r3, [r1, #0]
 800c1a6:	4240      	negs	r0, r0
 800c1a8:	2101      	movs	r1, #1
 800c1aa:	4421      	add	r1, r4
 800c1ac:	f000 f806 	bl	800c1bc <__utoa>
 800c1b0:	e7f1      	b.n	800c196 <__itoa+0x10>
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	e7f9      	b.n	800c1aa <__itoa+0x24>

0800c1b6 <itoa>:
 800c1b6:	f7ff bfe6 	b.w	800c186 <__itoa>
	...

0800c1bc <__utoa>:
 800c1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1be:	4c1f      	ldr	r4, [pc, #124]	; (800c23c <__utoa+0x80>)
 800c1c0:	b08b      	sub	sp, #44	; 0x2c
 800c1c2:	4605      	mov	r5, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	466e      	mov	r6, sp
 800c1c8:	f104 0c20 	add.w	ip, r4, #32
 800c1cc:	6820      	ldr	r0, [r4, #0]
 800c1ce:	6861      	ldr	r1, [r4, #4]
 800c1d0:	4637      	mov	r7, r6
 800c1d2:	c703      	stmia	r7!, {r0, r1}
 800c1d4:	3408      	adds	r4, #8
 800c1d6:	4564      	cmp	r4, ip
 800c1d8:	463e      	mov	r6, r7
 800c1da:	d1f7      	bne.n	800c1cc <__utoa+0x10>
 800c1dc:	7921      	ldrb	r1, [r4, #4]
 800c1de:	7139      	strb	r1, [r7, #4]
 800c1e0:	1e91      	subs	r1, r2, #2
 800c1e2:	6820      	ldr	r0, [r4, #0]
 800c1e4:	6038      	str	r0, [r7, #0]
 800c1e6:	2922      	cmp	r1, #34	; 0x22
 800c1e8:	f04f 0100 	mov.w	r1, #0
 800c1ec:	d904      	bls.n	800c1f8 <__utoa+0x3c>
 800c1ee:	7019      	strb	r1, [r3, #0]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	b00b      	add	sp, #44	; 0x2c
 800c1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1f8:	1e58      	subs	r0, r3, #1
 800c1fa:	4684      	mov	ip, r0
 800c1fc:	fbb5 f7f2 	udiv	r7, r5, r2
 800c200:	fb02 5617 	mls	r6, r2, r7, r5
 800c204:	3628      	adds	r6, #40	; 0x28
 800c206:	446e      	add	r6, sp
 800c208:	460c      	mov	r4, r1
 800c20a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c20e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c212:	462e      	mov	r6, r5
 800c214:	42b2      	cmp	r2, r6
 800c216:	f101 0101 	add.w	r1, r1, #1
 800c21a:	463d      	mov	r5, r7
 800c21c:	d9ee      	bls.n	800c1fc <__utoa+0x40>
 800c21e:	2200      	movs	r2, #0
 800c220:	545a      	strb	r2, [r3, r1]
 800c222:	1919      	adds	r1, r3, r4
 800c224:	1aa5      	subs	r5, r4, r2
 800c226:	42aa      	cmp	r2, r5
 800c228:	dae3      	bge.n	800c1f2 <__utoa+0x36>
 800c22a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c22e:	780e      	ldrb	r6, [r1, #0]
 800c230:	7006      	strb	r6, [r0, #0]
 800c232:	3201      	adds	r2, #1
 800c234:	f801 5901 	strb.w	r5, [r1], #-1
 800c238:	e7f4      	b.n	800c224 <__utoa+0x68>
 800c23a:	bf00      	nop
 800c23c:	08012876 	.word	0x08012876

0800c240 <memset>:
 800c240:	4402      	add	r2, r0
 800c242:	4603      	mov	r3, r0
 800c244:	4293      	cmp	r3, r2
 800c246:	d100      	bne.n	800c24a <memset+0xa>
 800c248:	4770      	bx	lr
 800c24a:	f803 1b01 	strb.w	r1, [r3], #1
 800c24e:	e7f9      	b.n	800c244 <memset+0x4>

0800c250 <__errno>:
 800c250:	4b01      	ldr	r3, [pc, #4]	; (800c258 <__errno+0x8>)
 800c252:	6818      	ldr	r0, [r3, #0]
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	20000074 	.word	0x20000074

0800c25c <__libc_init_array>:
 800c25c:	b570      	push	{r4, r5, r6, lr}
 800c25e:	4d0d      	ldr	r5, [pc, #52]	; (800c294 <__libc_init_array+0x38>)
 800c260:	4c0d      	ldr	r4, [pc, #52]	; (800c298 <__libc_init_array+0x3c>)
 800c262:	1b64      	subs	r4, r4, r5
 800c264:	10a4      	asrs	r4, r4, #2
 800c266:	2600      	movs	r6, #0
 800c268:	42a6      	cmp	r6, r4
 800c26a:	d109      	bne.n	800c280 <__libc_init_array+0x24>
 800c26c:	4d0b      	ldr	r5, [pc, #44]	; (800c29c <__libc_init_array+0x40>)
 800c26e:	4c0c      	ldr	r4, [pc, #48]	; (800c2a0 <__libc_init_array+0x44>)
 800c270:	f000 ff5e 	bl	800d130 <_init>
 800c274:	1b64      	subs	r4, r4, r5
 800c276:	10a4      	asrs	r4, r4, #2
 800c278:	2600      	movs	r6, #0
 800c27a:	42a6      	cmp	r6, r4
 800c27c:	d105      	bne.n	800c28a <__libc_init_array+0x2e>
 800c27e:	bd70      	pop	{r4, r5, r6, pc}
 800c280:	f855 3b04 	ldr.w	r3, [r5], #4
 800c284:	4798      	blx	r3
 800c286:	3601      	adds	r6, #1
 800c288:	e7ee      	b.n	800c268 <__libc_init_array+0xc>
 800c28a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c28e:	4798      	blx	r3
 800c290:	3601      	adds	r6, #1
 800c292:	e7f2      	b.n	800c27a <__libc_init_array+0x1e>
 800c294:	080128d8 	.word	0x080128d8
 800c298:	080128d8 	.word	0x080128d8
 800c29c:	080128d8 	.word	0x080128d8
 800c2a0:	080128dc 	.word	0x080128dc

0800c2a4 <memcpy>:
 800c2a4:	440a      	add	r2, r1
 800c2a6:	4291      	cmp	r1, r2
 800c2a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2ac:	d100      	bne.n	800c2b0 <memcpy+0xc>
 800c2ae:	4770      	bx	lr
 800c2b0:	b510      	push	{r4, lr}
 800c2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2ba:	4291      	cmp	r1, r2
 800c2bc:	d1f9      	bne.n	800c2b2 <memcpy+0xe>
 800c2be:	bd10      	pop	{r4, pc}

0800c2c0 <pow>:
 800c2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c2:	ed2d 8b02 	vpush	{d8}
 800c2c6:	eeb0 8a40 	vmov.f32	s16, s0
 800c2ca:	eef0 8a60 	vmov.f32	s17, s1
 800c2ce:	ec55 4b11 	vmov	r4, r5, d1
 800c2d2:	f000 f871 	bl	800c3b8 <__ieee754_pow>
 800c2d6:	4622      	mov	r2, r4
 800c2d8:	462b      	mov	r3, r5
 800c2da:	4620      	mov	r0, r4
 800c2dc:	4629      	mov	r1, r5
 800c2de:	ec57 6b10 	vmov	r6, r7, d0
 800c2e2:	f7f4 fbdb 	bl	8000a9c <__aeabi_dcmpun>
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d13b      	bne.n	800c362 <pow+0xa2>
 800c2ea:	ec51 0b18 	vmov	r0, r1, d8
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f7f4 fba1 	bl	8000a38 <__aeabi_dcmpeq>
 800c2f6:	b1b8      	cbz	r0, 800c328 <pow+0x68>
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	4629      	mov	r1, r5
 800c300:	f7f4 fb9a 	bl	8000a38 <__aeabi_dcmpeq>
 800c304:	2800      	cmp	r0, #0
 800c306:	d146      	bne.n	800c396 <pow+0xd6>
 800c308:	ec45 4b10 	vmov	d0, r4, r5
 800c30c:	f000 f848 	bl	800c3a0 <finite>
 800c310:	b338      	cbz	r0, 800c362 <pow+0xa2>
 800c312:	2200      	movs	r2, #0
 800c314:	2300      	movs	r3, #0
 800c316:	4620      	mov	r0, r4
 800c318:	4629      	mov	r1, r5
 800c31a:	f7f4 fb97 	bl	8000a4c <__aeabi_dcmplt>
 800c31e:	b300      	cbz	r0, 800c362 <pow+0xa2>
 800c320:	f7ff ff96 	bl	800c250 <__errno>
 800c324:	2322      	movs	r3, #34	; 0x22
 800c326:	e01b      	b.n	800c360 <pow+0xa0>
 800c328:	ec47 6b10 	vmov	d0, r6, r7
 800c32c:	f000 f838 	bl	800c3a0 <finite>
 800c330:	b9e0      	cbnz	r0, 800c36c <pow+0xac>
 800c332:	eeb0 0a48 	vmov.f32	s0, s16
 800c336:	eef0 0a68 	vmov.f32	s1, s17
 800c33a:	f000 f831 	bl	800c3a0 <finite>
 800c33e:	b1a8      	cbz	r0, 800c36c <pow+0xac>
 800c340:	ec45 4b10 	vmov	d0, r4, r5
 800c344:	f000 f82c 	bl	800c3a0 <finite>
 800c348:	b180      	cbz	r0, 800c36c <pow+0xac>
 800c34a:	4632      	mov	r2, r6
 800c34c:	463b      	mov	r3, r7
 800c34e:	4630      	mov	r0, r6
 800c350:	4639      	mov	r1, r7
 800c352:	f7f4 fba3 	bl	8000a9c <__aeabi_dcmpun>
 800c356:	2800      	cmp	r0, #0
 800c358:	d0e2      	beq.n	800c320 <pow+0x60>
 800c35a:	f7ff ff79 	bl	800c250 <__errno>
 800c35e:	2321      	movs	r3, #33	; 0x21
 800c360:	6003      	str	r3, [r0, #0]
 800c362:	ecbd 8b02 	vpop	{d8}
 800c366:	ec47 6b10 	vmov	d0, r6, r7
 800c36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c36c:	2200      	movs	r2, #0
 800c36e:	2300      	movs	r3, #0
 800c370:	4630      	mov	r0, r6
 800c372:	4639      	mov	r1, r7
 800c374:	f7f4 fb60 	bl	8000a38 <__aeabi_dcmpeq>
 800c378:	2800      	cmp	r0, #0
 800c37a:	d0f2      	beq.n	800c362 <pow+0xa2>
 800c37c:	eeb0 0a48 	vmov.f32	s0, s16
 800c380:	eef0 0a68 	vmov.f32	s1, s17
 800c384:	f000 f80c 	bl	800c3a0 <finite>
 800c388:	2800      	cmp	r0, #0
 800c38a:	d0ea      	beq.n	800c362 <pow+0xa2>
 800c38c:	ec45 4b10 	vmov	d0, r4, r5
 800c390:	f000 f806 	bl	800c3a0 <finite>
 800c394:	e7c3      	b.n	800c31e <pow+0x5e>
 800c396:	4f01      	ldr	r7, [pc, #4]	; (800c39c <pow+0xdc>)
 800c398:	2600      	movs	r6, #0
 800c39a:	e7e2      	b.n	800c362 <pow+0xa2>
 800c39c:	3ff00000 	.word	0x3ff00000

0800c3a0 <finite>:
 800c3a0:	b082      	sub	sp, #8
 800c3a2:	ed8d 0b00 	vstr	d0, [sp]
 800c3a6:	9801      	ldr	r0, [sp, #4]
 800c3a8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c3ac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c3b0:	0fc0      	lsrs	r0, r0, #31
 800c3b2:	b002      	add	sp, #8
 800c3b4:	4770      	bx	lr
	...

0800c3b8 <__ieee754_pow>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	ed2d 8b06 	vpush	{d8-d10}
 800c3c0:	b089      	sub	sp, #36	; 0x24
 800c3c2:	ed8d 1b00 	vstr	d1, [sp]
 800c3c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c3ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c3ce:	ea58 0102 	orrs.w	r1, r8, r2
 800c3d2:	ec57 6b10 	vmov	r6, r7, d0
 800c3d6:	d115      	bne.n	800c404 <__ieee754_pow+0x4c>
 800c3d8:	19b3      	adds	r3, r6, r6
 800c3da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c3de:	4152      	adcs	r2, r2
 800c3e0:	4299      	cmp	r1, r3
 800c3e2:	4b89      	ldr	r3, [pc, #548]	; (800c608 <__ieee754_pow+0x250>)
 800c3e4:	4193      	sbcs	r3, r2
 800c3e6:	f080 84d1 	bcs.w	800cd8c <__ieee754_pow+0x9d4>
 800c3ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	4639      	mov	r1, r7
 800c3f2:	f7f3 ff03 	bl	80001fc <__adddf3>
 800c3f6:	ec41 0b10 	vmov	d0, r0, r1
 800c3fa:	b009      	add	sp, #36	; 0x24
 800c3fc:	ecbd 8b06 	vpop	{d8-d10}
 800c400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c404:	4b81      	ldr	r3, [pc, #516]	; (800c60c <__ieee754_pow+0x254>)
 800c406:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c40a:	429c      	cmp	r4, r3
 800c40c:	ee10 aa10 	vmov	sl, s0
 800c410:	463d      	mov	r5, r7
 800c412:	dc06      	bgt.n	800c422 <__ieee754_pow+0x6a>
 800c414:	d101      	bne.n	800c41a <__ieee754_pow+0x62>
 800c416:	2e00      	cmp	r6, #0
 800c418:	d1e7      	bne.n	800c3ea <__ieee754_pow+0x32>
 800c41a:	4598      	cmp	r8, r3
 800c41c:	dc01      	bgt.n	800c422 <__ieee754_pow+0x6a>
 800c41e:	d10f      	bne.n	800c440 <__ieee754_pow+0x88>
 800c420:	b172      	cbz	r2, 800c440 <__ieee754_pow+0x88>
 800c422:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c426:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c42a:	ea55 050a 	orrs.w	r5, r5, sl
 800c42e:	d1dc      	bne.n	800c3ea <__ieee754_pow+0x32>
 800c430:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c434:	18db      	adds	r3, r3, r3
 800c436:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c43a:	4152      	adcs	r2, r2
 800c43c:	429d      	cmp	r5, r3
 800c43e:	e7d0      	b.n	800c3e2 <__ieee754_pow+0x2a>
 800c440:	2d00      	cmp	r5, #0
 800c442:	da3b      	bge.n	800c4bc <__ieee754_pow+0x104>
 800c444:	4b72      	ldr	r3, [pc, #456]	; (800c610 <__ieee754_pow+0x258>)
 800c446:	4598      	cmp	r8, r3
 800c448:	dc51      	bgt.n	800c4ee <__ieee754_pow+0x136>
 800c44a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c44e:	4598      	cmp	r8, r3
 800c450:	f340 84ab 	ble.w	800cdaa <__ieee754_pow+0x9f2>
 800c454:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c458:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c45c:	2b14      	cmp	r3, #20
 800c45e:	dd0f      	ble.n	800c480 <__ieee754_pow+0xc8>
 800c460:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c464:	fa22 f103 	lsr.w	r1, r2, r3
 800c468:	fa01 f303 	lsl.w	r3, r1, r3
 800c46c:	4293      	cmp	r3, r2
 800c46e:	f040 849c 	bne.w	800cdaa <__ieee754_pow+0x9f2>
 800c472:	f001 0101 	and.w	r1, r1, #1
 800c476:	f1c1 0302 	rsb	r3, r1, #2
 800c47a:	9304      	str	r3, [sp, #16]
 800c47c:	b182      	cbz	r2, 800c4a0 <__ieee754_pow+0xe8>
 800c47e:	e05f      	b.n	800c540 <__ieee754_pow+0x188>
 800c480:	2a00      	cmp	r2, #0
 800c482:	d15b      	bne.n	800c53c <__ieee754_pow+0x184>
 800c484:	f1c3 0314 	rsb	r3, r3, #20
 800c488:	fa48 f103 	asr.w	r1, r8, r3
 800c48c:	fa01 f303 	lsl.w	r3, r1, r3
 800c490:	4543      	cmp	r3, r8
 800c492:	f040 8487 	bne.w	800cda4 <__ieee754_pow+0x9ec>
 800c496:	f001 0101 	and.w	r1, r1, #1
 800c49a:	f1c1 0302 	rsb	r3, r1, #2
 800c49e:	9304      	str	r3, [sp, #16]
 800c4a0:	4b5c      	ldr	r3, [pc, #368]	; (800c614 <__ieee754_pow+0x25c>)
 800c4a2:	4598      	cmp	r8, r3
 800c4a4:	d132      	bne.n	800c50c <__ieee754_pow+0x154>
 800c4a6:	f1b9 0f00 	cmp.w	r9, #0
 800c4aa:	f280 8477 	bge.w	800cd9c <__ieee754_pow+0x9e4>
 800c4ae:	4959      	ldr	r1, [pc, #356]	; (800c614 <__ieee754_pow+0x25c>)
 800c4b0:	4632      	mov	r2, r6
 800c4b2:	463b      	mov	r3, r7
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	f7f4 f981 	bl	80007bc <__aeabi_ddiv>
 800c4ba:	e79c      	b.n	800c3f6 <__ieee754_pow+0x3e>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	9304      	str	r3, [sp, #16]
 800c4c0:	2a00      	cmp	r2, #0
 800c4c2:	d13d      	bne.n	800c540 <__ieee754_pow+0x188>
 800c4c4:	4b51      	ldr	r3, [pc, #324]	; (800c60c <__ieee754_pow+0x254>)
 800c4c6:	4598      	cmp	r8, r3
 800c4c8:	d1ea      	bne.n	800c4a0 <__ieee754_pow+0xe8>
 800c4ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c4ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c4d2:	ea53 030a 	orrs.w	r3, r3, sl
 800c4d6:	f000 8459 	beq.w	800cd8c <__ieee754_pow+0x9d4>
 800c4da:	4b4f      	ldr	r3, [pc, #316]	; (800c618 <__ieee754_pow+0x260>)
 800c4dc:	429c      	cmp	r4, r3
 800c4de:	dd08      	ble.n	800c4f2 <__ieee754_pow+0x13a>
 800c4e0:	f1b9 0f00 	cmp.w	r9, #0
 800c4e4:	f2c0 8456 	blt.w	800cd94 <__ieee754_pow+0x9dc>
 800c4e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4ec:	e783      	b.n	800c3f6 <__ieee754_pow+0x3e>
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	e7e5      	b.n	800c4be <__ieee754_pow+0x106>
 800c4f2:	f1b9 0f00 	cmp.w	r9, #0
 800c4f6:	f04f 0000 	mov.w	r0, #0
 800c4fa:	f04f 0100 	mov.w	r1, #0
 800c4fe:	f6bf af7a 	bge.w	800c3f6 <__ieee754_pow+0x3e>
 800c502:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c506:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c50a:	e774      	b.n	800c3f6 <__ieee754_pow+0x3e>
 800c50c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c510:	d106      	bne.n	800c520 <__ieee754_pow+0x168>
 800c512:	4632      	mov	r2, r6
 800c514:	463b      	mov	r3, r7
 800c516:	4630      	mov	r0, r6
 800c518:	4639      	mov	r1, r7
 800c51a:	f7f4 f825 	bl	8000568 <__aeabi_dmul>
 800c51e:	e76a      	b.n	800c3f6 <__ieee754_pow+0x3e>
 800c520:	4b3e      	ldr	r3, [pc, #248]	; (800c61c <__ieee754_pow+0x264>)
 800c522:	4599      	cmp	r9, r3
 800c524:	d10c      	bne.n	800c540 <__ieee754_pow+0x188>
 800c526:	2d00      	cmp	r5, #0
 800c528:	db0a      	blt.n	800c540 <__ieee754_pow+0x188>
 800c52a:	ec47 6b10 	vmov	d0, r6, r7
 800c52e:	b009      	add	sp, #36	; 0x24
 800c530:	ecbd 8b06 	vpop	{d8-d10}
 800c534:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c538:	f000 bd20 	b.w	800cf7c <__ieee754_sqrt>
 800c53c:	2300      	movs	r3, #0
 800c53e:	9304      	str	r3, [sp, #16]
 800c540:	ec47 6b10 	vmov	d0, r6, r7
 800c544:	f000 fc62 	bl	800ce0c <fabs>
 800c548:	ec51 0b10 	vmov	r0, r1, d0
 800c54c:	f1ba 0f00 	cmp.w	sl, #0
 800c550:	d129      	bne.n	800c5a6 <__ieee754_pow+0x1ee>
 800c552:	b124      	cbz	r4, 800c55e <__ieee754_pow+0x1a6>
 800c554:	4b2f      	ldr	r3, [pc, #188]	; (800c614 <__ieee754_pow+0x25c>)
 800c556:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d123      	bne.n	800c5a6 <__ieee754_pow+0x1ee>
 800c55e:	f1b9 0f00 	cmp.w	r9, #0
 800c562:	da05      	bge.n	800c570 <__ieee754_pow+0x1b8>
 800c564:	4602      	mov	r2, r0
 800c566:	460b      	mov	r3, r1
 800c568:	2000      	movs	r0, #0
 800c56a:	492a      	ldr	r1, [pc, #168]	; (800c614 <__ieee754_pow+0x25c>)
 800c56c:	f7f4 f926 	bl	80007bc <__aeabi_ddiv>
 800c570:	2d00      	cmp	r5, #0
 800c572:	f6bf af40 	bge.w	800c3f6 <__ieee754_pow+0x3e>
 800c576:	9b04      	ldr	r3, [sp, #16]
 800c578:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c57c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c580:	431c      	orrs	r4, r3
 800c582:	d108      	bne.n	800c596 <__ieee754_pow+0x1de>
 800c584:	4602      	mov	r2, r0
 800c586:	460b      	mov	r3, r1
 800c588:	4610      	mov	r0, r2
 800c58a:	4619      	mov	r1, r3
 800c58c:	f7f3 fe34 	bl	80001f8 <__aeabi_dsub>
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	e78f      	b.n	800c4b6 <__ieee754_pow+0xfe>
 800c596:	9b04      	ldr	r3, [sp, #16]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	f47f af2c 	bne.w	800c3f6 <__ieee754_pow+0x3e>
 800c59e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	e727      	b.n	800c3f6 <__ieee754_pow+0x3e>
 800c5a6:	0feb      	lsrs	r3, r5, #31
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	9306      	str	r3, [sp, #24]
 800c5ac:	9a06      	ldr	r2, [sp, #24]
 800c5ae:	9b04      	ldr	r3, [sp, #16]
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	d102      	bne.n	800c5ba <__ieee754_pow+0x202>
 800c5b4:	4632      	mov	r2, r6
 800c5b6:	463b      	mov	r3, r7
 800c5b8:	e7e6      	b.n	800c588 <__ieee754_pow+0x1d0>
 800c5ba:	4b19      	ldr	r3, [pc, #100]	; (800c620 <__ieee754_pow+0x268>)
 800c5bc:	4598      	cmp	r8, r3
 800c5be:	f340 80fb 	ble.w	800c7b8 <__ieee754_pow+0x400>
 800c5c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c5c6:	4598      	cmp	r8, r3
 800c5c8:	4b13      	ldr	r3, [pc, #76]	; (800c618 <__ieee754_pow+0x260>)
 800c5ca:	dd0c      	ble.n	800c5e6 <__ieee754_pow+0x22e>
 800c5cc:	429c      	cmp	r4, r3
 800c5ce:	dc0f      	bgt.n	800c5f0 <__ieee754_pow+0x238>
 800c5d0:	f1b9 0f00 	cmp.w	r9, #0
 800c5d4:	da0f      	bge.n	800c5f6 <__ieee754_pow+0x23e>
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	b009      	add	sp, #36	; 0x24
 800c5da:	ecbd 8b06 	vpop	{d8-d10}
 800c5de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e2:	f000 bcc2 	b.w	800cf6a <__math_oflow>
 800c5e6:	429c      	cmp	r4, r3
 800c5e8:	dbf2      	blt.n	800c5d0 <__ieee754_pow+0x218>
 800c5ea:	4b0a      	ldr	r3, [pc, #40]	; (800c614 <__ieee754_pow+0x25c>)
 800c5ec:	429c      	cmp	r4, r3
 800c5ee:	dd19      	ble.n	800c624 <__ieee754_pow+0x26c>
 800c5f0:	f1b9 0f00 	cmp.w	r9, #0
 800c5f4:	dcef      	bgt.n	800c5d6 <__ieee754_pow+0x21e>
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	b009      	add	sp, #36	; 0x24
 800c5fa:	ecbd 8b06 	vpop	{d8-d10}
 800c5fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c602:	f000 bca9 	b.w	800cf58 <__math_uflow>
 800c606:	bf00      	nop
 800c608:	fff00000 	.word	0xfff00000
 800c60c:	7ff00000 	.word	0x7ff00000
 800c610:	433fffff 	.word	0x433fffff
 800c614:	3ff00000 	.word	0x3ff00000
 800c618:	3fefffff 	.word	0x3fefffff
 800c61c:	3fe00000 	.word	0x3fe00000
 800c620:	41e00000 	.word	0x41e00000
 800c624:	4b60      	ldr	r3, [pc, #384]	; (800c7a8 <__ieee754_pow+0x3f0>)
 800c626:	2200      	movs	r2, #0
 800c628:	f7f3 fde6 	bl	80001f8 <__aeabi_dsub>
 800c62c:	a354      	add	r3, pc, #336	; (adr r3, 800c780 <__ieee754_pow+0x3c8>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	4604      	mov	r4, r0
 800c634:	460d      	mov	r5, r1
 800c636:	f7f3 ff97 	bl	8000568 <__aeabi_dmul>
 800c63a:	a353      	add	r3, pc, #332	; (adr r3, 800c788 <__ieee754_pow+0x3d0>)
 800c63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c640:	4606      	mov	r6, r0
 800c642:	460f      	mov	r7, r1
 800c644:	4620      	mov	r0, r4
 800c646:	4629      	mov	r1, r5
 800c648:	f7f3 ff8e 	bl	8000568 <__aeabi_dmul>
 800c64c:	4b57      	ldr	r3, [pc, #348]	; (800c7ac <__ieee754_pow+0x3f4>)
 800c64e:	4682      	mov	sl, r0
 800c650:	468b      	mov	fp, r1
 800c652:	2200      	movs	r2, #0
 800c654:	4620      	mov	r0, r4
 800c656:	4629      	mov	r1, r5
 800c658:	f7f3 ff86 	bl	8000568 <__aeabi_dmul>
 800c65c:	4602      	mov	r2, r0
 800c65e:	460b      	mov	r3, r1
 800c660:	a14b      	add	r1, pc, #300	; (adr r1, 800c790 <__ieee754_pow+0x3d8>)
 800c662:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c666:	f7f3 fdc7 	bl	80001f8 <__aeabi_dsub>
 800c66a:	4622      	mov	r2, r4
 800c66c:	462b      	mov	r3, r5
 800c66e:	f7f3 ff7b 	bl	8000568 <__aeabi_dmul>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	2000      	movs	r0, #0
 800c678:	494d      	ldr	r1, [pc, #308]	; (800c7b0 <__ieee754_pow+0x3f8>)
 800c67a:	f7f3 fdbd 	bl	80001f8 <__aeabi_dsub>
 800c67e:	4622      	mov	r2, r4
 800c680:	4680      	mov	r8, r0
 800c682:	4689      	mov	r9, r1
 800c684:	462b      	mov	r3, r5
 800c686:	4620      	mov	r0, r4
 800c688:	4629      	mov	r1, r5
 800c68a:	f7f3 ff6d 	bl	8000568 <__aeabi_dmul>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4640      	mov	r0, r8
 800c694:	4649      	mov	r1, r9
 800c696:	f7f3 ff67 	bl	8000568 <__aeabi_dmul>
 800c69a:	a33f      	add	r3, pc, #252	; (adr r3, 800c798 <__ieee754_pow+0x3e0>)
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	f7f3 ff62 	bl	8000568 <__aeabi_dmul>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	4650      	mov	r0, sl
 800c6aa:	4659      	mov	r1, fp
 800c6ac:	f7f3 fda4 	bl	80001f8 <__aeabi_dsub>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4680      	mov	r8, r0
 800c6b6:	4689      	mov	r9, r1
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	4639      	mov	r1, r7
 800c6bc:	f7f3 fd9e 	bl	80001fc <__adddf3>
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	4632      	mov	r2, r6
 800c6c4:	463b      	mov	r3, r7
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	460d      	mov	r5, r1
 800c6ca:	f7f3 fd95 	bl	80001f8 <__aeabi_dsub>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	4640      	mov	r0, r8
 800c6d4:	4649      	mov	r1, r9
 800c6d6:	f7f3 fd8f 	bl	80001f8 <__aeabi_dsub>
 800c6da:	9b04      	ldr	r3, [sp, #16]
 800c6dc:	9a06      	ldr	r2, [sp, #24]
 800c6de:	3b01      	subs	r3, #1
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	4682      	mov	sl, r0
 800c6e4:	468b      	mov	fp, r1
 800c6e6:	f040 81e7 	bne.w	800cab8 <__ieee754_pow+0x700>
 800c6ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c7a0 <__ieee754_pow+0x3e8>
 800c6ee:	eeb0 8a47 	vmov.f32	s16, s14
 800c6f2:	eef0 8a67 	vmov.f32	s17, s15
 800c6f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c6fa:	2600      	movs	r6, #0
 800c6fc:	4632      	mov	r2, r6
 800c6fe:	463b      	mov	r3, r7
 800c700:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c704:	f7f3 fd78 	bl	80001f8 <__aeabi_dsub>
 800c708:	4622      	mov	r2, r4
 800c70a:	462b      	mov	r3, r5
 800c70c:	f7f3 ff2c 	bl	8000568 <__aeabi_dmul>
 800c710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c714:	4680      	mov	r8, r0
 800c716:	4689      	mov	r9, r1
 800c718:	4650      	mov	r0, sl
 800c71a:	4659      	mov	r1, fp
 800c71c:	f7f3 ff24 	bl	8000568 <__aeabi_dmul>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4640      	mov	r0, r8
 800c726:	4649      	mov	r1, r9
 800c728:	f7f3 fd68 	bl	80001fc <__adddf3>
 800c72c:	4632      	mov	r2, r6
 800c72e:	463b      	mov	r3, r7
 800c730:	4680      	mov	r8, r0
 800c732:	4689      	mov	r9, r1
 800c734:	4620      	mov	r0, r4
 800c736:	4629      	mov	r1, r5
 800c738:	f7f3 ff16 	bl	8000568 <__aeabi_dmul>
 800c73c:	460b      	mov	r3, r1
 800c73e:	4604      	mov	r4, r0
 800c740:	460d      	mov	r5, r1
 800c742:	4602      	mov	r2, r0
 800c744:	4649      	mov	r1, r9
 800c746:	4640      	mov	r0, r8
 800c748:	f7f3 fd58 	bl	80001fc <__adddf3>
 800c74c:	4b19      	ldr	r3, [pc, #100]	; (800c7b4 <__ieee754_pow+0x3fc>)
 800c74e:	4299      	cmp	r1, r3
 800c750:	ec45 4b19 	vmov	d9, r4, r5
 800c754:	4606      	mov	r6, r0
 800c756:	460f      	mov	r7, r1
 800c758:	468b      	mov	fp, r1
 800c75a:	f340 82f0 	ble.w	800cd3e <__ieee754_pow+0x986>
 800c75e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c762:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c766:	4303      	orrs	r3, r0
 800c768:	f000 81e4 	beq.w	800cb34 <__ieee754_pow+0x77c>
 800c76c:	ec51 0b18 	vmov	r0, r1, d8
 800c770:	2200      	movs	r2, #0
 800c772:	2300      	movs	r3, #0
 800c774:	f7f4 f96a 	bl	8000a4c <__aeabi_dcmplt>
 800c778:	3800      	subs	r0, #0
 800c77a:	bf18      	it	ne
 800c77c:	2001      	movne	r0, #1
 800c77e:	e72b      	b.n	800c5d8 <__ieee754_pow+0x220>
 800c780:	60000000 	.word	0x60000000
 800c784:	3ff71547 	.word	0x3ff71547
 800c788:	f85ddf44 	.word	0xf85ddf44
 800c78c:	3e54ae0b 	.word	0x3e54ae0b
 800c790:	55555555 	.word	0x55555555
 800c794:	3fd55555 	.word	0x3fd55555
 800c798:	652b82fe 	.word	0x652b82fe
 800c79c:	3ff71547 	.word	0x3ff71547
 800c7a0:	00000000 	.word	0x00000000
 800c7a4:	bff00000 	.word	0xbff00000
 800c7a8:	3ff00000 	.word	0x3ff00000
 800c7ac:	3fd00000 	.word	0x3fd00000
 800c7b0:	3fe00000 	.word	0x3fe00000
 800c7b4:	408fffff 	.word	0x408fffff
 800c7b8:	4bd5      	ldr	r3, [pc, #852]	; (800cb10 <__ieee754_pow+0x758>)
 800c7ba:	402b      	ands	r3, r5
 800c7bc:	2200      	movs	r2, #0
 800c7be:	b92b      	cbnz	r3, 800c7cc <__ieee754_pow+0x414>
 800c7c0:	4bd4      	ldr	r3, [pc, #848]	; (800cb14 <__ieee754_pow+0x75c>)
 800c7c2:	f7f3 fed1 	bl	8000568 <__aeabi_dmul>
 800c7c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	1523      	asrs	r3, r4, #20
 800c7ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c7d2:	4413      	add	r3, r2
 800c7d4:	9305      	str	r3, [sp, #20]
 800c7d6:	4bd0      	ldr	r3, [pc, #832]	; (800cb18 <__ieee754_pow+0x760>)
 800c7d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c7dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c7e0:	429c      	cmp	r4, r3
 800c7e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c7e6:	dd08      	ble.n	800c7fa <__ieee754_pow+0x442>
 800c7e8:	4bcc      	ldr	r3, [pc, #816]	; (800cb1c <__ieee754_pow+0x764>)
 800c7ea:	429c      	cmp	r4, r3
 800c7ec:	f340 8162 	ble.w	800cab4 <__ieee754_pow+0x6fc>
 800c7f0:	9b05      	ldr	r3, [sp, #20]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	9305      	str	r3, [sp, #20]
 800c7f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c7fa:	2400      	movs	r4, #0
 800c7fc:	00e3      	lsls	r3, r4, #3
 800c7fe:	9307      	str	r3, [sp, #28]
 800c800:	4bc7      	ldr	r3, [pc, #796]	; (800cb20 <__ieee754_pow+0x768>)
 800c802:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c806:	ed93 7b00 	vldr	d7, [r3]
 800c80a:	4629      	mov	r1, r5
 800c80c:	ec53 2b17 	vmov	r2, r3, d7
 800c810:	eeb0 9a47 	vmov.f32	s18, s14
 800c814:	eef0 9a67 	vmov.f32	s19, s15
 800c818:	4682      	mov	sl, r0
 800c81a:	f7f3 fced 	bl	80001f8 <__aeabi_dsub>
 800c81e:	4652      	mov	r2, sl
 800c820:	4606      	mov	r6, r0
 800c822:	460f      	mov	r7, r1
 800c824:	462b      	mov	r3, r5
 800c826:	ec51 0b19 	vmov	r0, r1, d9
 800c82a:	f7f3 fce7 	bl	80001fc <__adddf3>
 800c82e:	4602      	mov	r2, r0
 800c830:	460b      	mov	r3, r1
 800c832:	2000      	movs	r0, #0
 800c834:	49bb      	ldr	r1, [pc, #748]	; (800cb24 <__ieee754_pow+0x76c>)
 800c836:	f7f3 ffc1 	bl	80007bc <__aeabi_ddiv>
 800c83a:	ec41 0b1a 	vmov	d10, r0, r1
 800c83e:	4602      	mov	r2, r0
 800c840:	460b      	mov	r3, r1
 800c842:	4630      	mov	r0, r6
 800c844:	4639      	mov	r1, r7
 800c846:	f7f3 fe8f 	bl	8000568 <__aeabi_dmul>
 800c84a:	2300      	movs	r3, #0
 800c84c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c850:	9302      	str	r3, [sp, #8]
 800c852:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c856:	46ab      	mov	fp, r5
 800c858:	106d      	asrs	r5, r5, #1
 800c85a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c85e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c862:	ec41 0b18 	vmov	d8, r0, r1
 800c866:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c86a:	2200      	movs	r2, #0
 800c86c:	4640      	mov	r0, r8
 800c86e:	4649      	mov	r1, r9
 800c870:	4614      	mov	r4, r2
 800c872:	461d      	mov	r5, r3
 800c874:	f7f3 fe78 	bl	8000568 <__aeabi_dmul>
 800c878:	4602      	mov	r2, r0
 800c87a:	460b      	mov	r3, r1
 800c87c:	4630      	mov	r0, r6
 800c87e:	4639      	mov	r1, r7
 800c880:	f7f3 fcba 	bl	80001f8 <__aeabi_dsub>
 800c884:	ec53 2b19 	vmov	r2, r3, d9
 800c888:	4606      	mov	r6, r0
 800c88a:	460f      	mov	r7, r1
 800c88c:	4620      	mov	r0, r4
 800c88e:	4629      	mov	r1, r5
 800c890:	f7f3 fcb2 	bl	80001f8 <__aeabi_dsub>
 800c894:	4602      	mov	r2, r0
 800c896:	460b      	mov	r3, r1
 800c898:	4650      	mov	r0, sl
 800c89a:	4659      	mov	r1, fp
 800c89c:	f7f3 fcac 	bl	80001f8 <__aeabi_dsub>
 800c8a0:	4642      	mov	r2, r8
 800c8a2:	464b      	mov	r3, r9
 800c8a4:	f7f3 fe60 	bl	8000568 <__aeabi_dmul>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	f7f3 fca2 	bl	80001f8 <__aeabi_dsub>
 800c8b4:	ec53 2b1a 	vmov	r2, r3, d10
 800c8b8:	f7f3 fe56 	bl	8000568 <__aeabi_dmul>
 800c8bc:	ec53 2b18 	vmov	r2, r3, d8
 800c8c0:	ec41 0b19 	vmov	d9, r0, r1
 800c8c4:	ec51 0b18 	vmov	r0, r1, d8
 800c8c8:	f7f3 fe4e 	bl	8000568 <__aeabi_dmul>
 800c8cc:	a37c      	add	r3, pc, #496	; (adr r3, 800cac0 <__ieee754_pow+0x708>)
 800c8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	f7f3 fe47 	bl	8000568 <__aeabi_dmul>
 800c8da:	a37b      	add	r3, pc, #492	; (adr r3, 800cac8 <__ieee754_pow+0x710>)
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	f7f3 fc8c 	bl	80001fc <__adddf3>
 800c8e4:	4622      	mov	r2, r4
 800c8e6:	462b      	mov	r3, r5
 800c8e8:	f7f3 fe3e 	bl	8000568 <__aeabi_dmul>
 800c8ec:	a378      	add	r3, pc, #480	; (adr r3, 800cad0 <__ieee754_pow+0x718>)
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	f7f3 fc83 	bl	80001fc <__adddf3>
 800c8f6:	4622      	mov	r2, r4
 800c8f8:	462b      	mov	r3, r5
 800c8fa:	f7f3 fe35 	bl	8000568 <__aeabi_dmul>
 800c8fe:	a376      	add	r3, pc, #472	; (adr r3, 800cad8 <__ieee754_pow+0x720>)
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	f7f3 fc7a 	bl	80001fc <__adddf3>
 800c908:	4622      	mov	r2, r4
 800c90a:	462b      	mov	r3, r5
 800c90c:	f7f3 fe2c 	bl	8000568 <__aeabi_dmul>
 800c910:	a373      	add	r3, pc, #460	; (adr r3, 800cae0 <__ieee754_pow+0x728>)
 800c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c916:	f7f3 fc71 	bl	80001fc <__adddf3>
 800c91a:	4622      	mov	r2, r4
 800c91c:	462b      	mov	r3, r5
 800c91e:	f7f3 fe23 	bl	8000568 <__aeabi_dmul>
 800c922:	a371      	add	r3, pc, #452	; (adr r3, 800cae8 <__ieee754_pow+0x730>)
 800c924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c928:	f7f3 fc68 	bl	80001fc <__adddf3>
 800c92c:	4622      	mov	r2, r4
 800c92e:	4606      	mov	r6, r0
 800c930:	460f      	mov	r7, r1
 800c932:	462b      	mov	r3, r5
 800c934:	4620      	mov	r0, r4
 800c936:	4629      	mov	r1, r5
 800c938:	f7f3 fe16 	bl	8000568 <__aeabi_dmul>
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	4630      	mov	r0, r6
 800c942:	4639      	mov	r1, r7
 800c944:	f7f3 fe10 	bl	8000568 <__aeabi_dmul>
 800c948:	4642      	mov	r2, r8
 800c94a:	4604      	mov	r4, r0
 800c94c:	460d      	mov	r5, r1
 800c94e:	464b      	mov	r3, r9
 800c950:	ec51 0b18 	vmov	r0, r1, d8
 800c954:	f7f3 fc52 	bl	80001fc <__adddf3>
 800c958:	ec53 2b19 	vmov	r2, r3, d9
 800c95c:	f7f3 fe04 	bl	8000568 <__aeabi_dmul>
 800c960:	4622      	mov	r2, r4
 800c962:	462b      	mov	r3, r5
 800c964:	f7f3 fc4a 	bl	80001fc <__adddf3>
 800c968:	4642      	mov	r2, r8
 800c96a:	4682      	mov	sl, r0
 800c96c:	468b      	mov	fp, r1
 800c96e:	464b      	mov	r3, r9
 800c970:	4640      	mov	r0, r8
 800c972:	4649      	mov	r1, r9
 800c974:	f7f3 fdf8 	bl	8000568 <__aeabi_dmul>
 800c978:	4b6b      	ldr	r3, [pc, #428]	; (800cb28 <__ieee754_pow+0x770>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	4606      	mov	r6, r0
 800c97e:	460f      	mov	r7, r1
 800c980:	f7f3 fc3c 	bl	80001fc <__adddf3>
 800c984:	4652      	mov	r2, sl
 800c986:	465b      	mov	r3, fp
 800c988:	f7f3 fc38 	bl	80001fc <__adddf3>
 800c98c:	2000      	movs	r0, #0
 800c98e:	4604      	mov	r4, r0
 800c990:	460d      	mov	r5, r1
 800c992:	4602      	mov	r2, r0
 800c994:	460b      	mov	r3, r1
 800c996:	4640      	mov	r0, r8
 800c998:	4649      	mov	r1, r9
 800c99a:	f7f3 fde5 	bl	8000568 <__aeabi_dmul>
 800c99e:	4b62      	ldr	r3, [pc, #392]	; (800cb28 <__ieee754_pow+0x770>)
 800c9a0:	4680      	mov	r8, r0
 800c9a2:	4689      	mov	r9, r1
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	f7f3 fc25 	bl	80001f8 <__aeabi_dsub>
 800c9ae:	4632      	mov	r2, r6
 800c9b0:	463b      	mov	r3, r7
 800c9b2:	f7f3 fc21 	bl	80001f8 <__aeabi_dsub>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4650      	mov	r0, sl
 800c9bc:	4659      	mov	r1, fp
 800c9be:	f7f3 fc1b 	bl	80001f8 <__aeabi_dsub>
 800c9c2:	ec53 2b18 	vmov	r2, r3, d8
 800c9c6:	f7f3 fdcf 	bl	8000568 <__aeabi_dmul>
 800c9ca:	4622      	mov	r2, r4
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460f      	mov	r7, r1
 800c9d0:	462b      	mov	r3, r5
 800c9d2:	ec51 0b19 	vmov	r0, r1, d9
 800c9d6:	f7f3 fdc7 	bl	8000568 <__aeabi_dmul>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	460b      	mov	r3, r1
 800c9de:	4630      	mov	r0, r6
 800c9e0:	4639      	mov	r1, r7
 800c9e2:	f7f3 fc0b 	bl	80001fc <__adddf3>
 800c9e6:	4606      	mov	r6, r0
 800c9e8:	460f      	mov	r7, r1
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4640      	mov	r0, r8
 800c9f0:	4649      	mov	r1, r9
 800c9f2:	f7f3 fc03 	bl	80001fc <__adddf3>
 800c9f6:	a33e      	add	r3, pc, #248	; (adr r3, 800caf0 <__ieee754_pow+0x738>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	4604      	mov	r4, r0
 800ca00:	460d      	mov	r5, r1
 800ca02:	f7f3 fdb1 	bl	8000568 <__aeabi_dmul>
 800ca06:	4642      	mov	r2, r8
 800ca08:	ec41 0b18 	vmov	d8, r0, r1
 800ca0c:	464b      	mov	r3, r9
 800ca0e:	4620      	mov	r0, r4
 800ca10:	4629      	mov	r1, r5
 800ca12:	f7f3 fbf1 	bl	80001f8 <__aeabi_dsub>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	4639      	mov	r1, r7
 800ca1e:	f7f3 fbeb 	bl	80001f8 <__aeabi_dsub>
 800ca22:	a335      	add	r3, pc, #212	; (adr r3, 800caf8 <__ieee754_pow+0x740>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	f7f3 fd9e 	bl	8000568 <__aeabi_dmul>
 800ca2c:	a334      	add	r3, pc, #208	; (adr r3, 800cb00 <__ieee754_pow+0x748>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	4606      	mov	r6, r0
 800ca34:	460f      	mov	r7, r1
 800ca36:	4620      	mov	r0, r4
 800ca38:	4629      	mov	r1, r5
 800ca3a:	f7f3 fd95 	bl	8000568 <__aeabi_dmul>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	4630      	mov	r0, r6
 800ca44:	4639      	mov	r1, r7
 800ca46:	f7f3 fbd9 	bl	80001fc <__adddf3>
 800ca4a:	9a07      	ldr	r2, [sp, #28]
 800ca4c:	4b37      	ldr	r3, [pc, #220]	; (800cb2c <__ieee754_pow+0x774>)
 800ca4e:	4413      	add	r3, r2
 800ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca54:	f7f3 fbd2 	bl	80001fc <__adddf3>
 800ca58:	4682      	mov	sl, r0
 800ca5a:	9805      	ldr	r0, [sp, #20]
 800ca5c:	468b      	mov	fp, r1
 800ca5e:	f7f3 fd19 	bl	8000494 <__aeabi_i2d>
 800ca62:	9a07      	ldr	r2, [sp, #28]
 800ca64:	4b32      	ldr	r3, [pc, #200]	; (800cb30 <__ieee754_pow+0x778>)
 800ca66:	4413      	add	r3, r2
 800ca68:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	460f      	mov	r7, r1
 800ca70:	4652      	mov	r2, sl
 800ca72:	465b      	mov	r3, fp
 800ca74:	ec51 0b18 	vmov	r0, r1, d8
 800ca78:	f7f3 fbc0 	bl	80001fc <__adddf3>
 800ca7c:	4642      	mov	r2, r8
 800ca7e:	464b      	mov	r3, r9
 800ca80:	f7f3 fbbc 	bl	80001fc <__adddf3>
 800ca84:	4632      	mov	r2, r6
 800ca86:	463b      	mov	r3, r7
 800ca88:	f7f3 fbb8 	bl	80001fc <__adddf3>
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	4632      	mov	r2, r6
 800ca90:	463b      	mov	r3, r7
 800ca92:	4604      	mov	r4, r0
 800ca94:	460d      	mov	r5, r1
 800ca96:	f7f3 fbaf 	bl	80001f8 <__aeabi_dsub>
 800ca9a:	4642      	mov	r2, r8
 800ca9c:	464b      	mov	r3, r9
 800ca9e:	f7f3 fbab 	bl	80001f8 <__aeabi_dsub>
 800caa2:	ec53 2b18 	vmov	r2, r3, d8
 800caa6:	f7f3 fba7 	bl	80001f8 <__aeabi_dsub>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	4650      	mov	r0, sl
 800cab0:	4659      	mov	r1, fp
 800cab2:	e610      	b.n	800c6d6 <__ieee754_pow+0x31e>
 800cab4:	2401      	movs	r4, #1
 800cab6:	e6a1      	b.n	800c7fc <__ieee754_pow+0x444>
 800cab8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cb08 <__ieee754_pow+0x750>
 800cabc:	e617      	b.n	800c6ee <__ieee754_pow+0x336>
 800cabe:	bf00      	nop
 800cac0:	4a454eef 	.word	0x4a454eef
 800cac4:	3fca7e28 	.word	0x3fca7e28
 800cac8:	93c9db65 	.word	0x93c9db65
 800cacc:	3fcd864a 	.word	0x3fcd864a
 800cad0:	a91d4101 	.word	0xa91d4101
 800cad4:	3fd17460 	.word	0x3fd17460
 800cad8:	518f264d 	.word	0x518f264d
 800cadc:	3fd55555 	.word	0x3fd55555
 800cae0:	db6fabff 	.word	0xdb6fabff
 800cae4:	3fdb6db6 	.word	0x3fdb6db6
 800cae8:	33333303 	.word	0x33333303
 800caec:	3fe33333 	.word	0x3fe33333
 800caf0:	e0000000 	.word	0xe0000000
 800caf4:	3feec709 	.word	0x3feec709
 800caf8:	dc3a03fd 	.word	0xdc3a03fd
 800cafc:	3feec709 	.word	0x3feec709
 800cb00:	145b01f5 	.word	0x145b01f5
 800cb04:	be3e2fe0 	.word	0xbe3e2fe0
 800cb08:	00000000 	.word	0x00000000
 800cb0c:	3ff00000 	.word	0x3ff00000
 800cb10:	7ff00000 	.word	0x7ff00000
 800cb14:	43400000 	.word	0x43400000
 800cb18:	0003988e 	.word	0x0003988e
 800cb1c:	000bb679 	.word	0x000bb679
 800cb20:	080128a0 	.word	0x080128a0
 800cb24:	3ff00000 	.word	0x3ff00000
 800cb28:	40080000 	.word	0x40080000
 800cb2c:	080128c0 	.word	0x080128c0
 800cb30:	080128b0 	.word	0x080128b0
 800cb34:	a3b3      	add	r3, pc, #716	; (adr r3, 800ce04 <__ieee754_pow+0xa4c>)
 800cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	4649      	mov	r1, r9
 800cb3e:	f7f3 fb5d 	bl	80001fc <__adddf3>
 800cb42:	4622      	mov	r2, r4
 800cb44:	ec41 0b1a 	vmov	d10, r0, r1
 800cb48:	462b      	mov	r3, r5
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	4639      	mov	r1, r7
 800cb4e:	f7f3 fb53 	bl	80001f8 <__aeabi_dsub>
 800cb52:	4602      	mov	r2, r0
 800cb54:	460b      	mov	r3, r1
 800cb56:	ec51 0b1a 	vmov	r0, r1, d10
 800cb5a:	f7f3 ff95 	bl	8000a88 <__aeabi_dcmpgt>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	f47f ae04 	bne.w	800c76c <__ieee754_pow+0x3b4>
 800cb64:	4aa2      	ldr	r2, [pc, #648]	; (800cdf0 <__ieee754_pow+0xa38>)
 800cb66:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	f340 8107 	ble.w	800cd7e <__ieee754_pow+0x9c6>
 800cb70:	151b      	asrs	r3, r3, #20
 800cb72:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cb76:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cb7a:	fa4a fa03 	asr.w	sl, sl, r3
 800cb7e:	44da      	add	sl, fp
 800cb80:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cb84:	489b      	ldr	r0, [pc, #620]	; (800cdf4 <__ieee754_pow+0xa3c>)
 800cb86:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cb8a:	4108      	asrs	r0, r1
 800cb8c:	ea00 030a 	and.w	r3, r0, sl
 800cb90:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cb94:	f1c1 0114 	rsb	r1, r1, #20
 800cb98:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cb9c:	fa4a fa01 	asr.w	sl, sl, r1
 800cba0:	f1bb 0f00 	cmp.w	fp, #0
 800cba4:	f04f 0200 	mov.w	r2, #0
 800cba8:	4620      	mov	r0, r4
 800cbaa:	4629      	mov	r1, r5
 800cbac:	bfb8      	it	lt
 800cbae:	f1ca 0a00 	rsblt	sl, sl, #0
 800cbb2:	f7f3 fb21 	bl	80001f8 <__aeabi_dsub>
 800cbb6:	ec41 0b19 	vmov	d9, r0, r1
 800cbba:	4642      	mov	r2, r8
 800cbbc:	464b      	mov	r3, r9
 800cbbe:	ec51 0b19 	vmov	r0, r1, d9
 800cbc2:	f7f3 fb1b 	bl	80001fc <__adddf3>
 800cbc6:	a37a      	add	r3, pc, #488	; (adr r3, 800cdb0 <__ieee754_pow+0x9f8>)
 800cbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbcc:	2000      	movs	r0, #0
 800cbce:	4604      	mov	r4, r0
 800cbd0:	460d      	mov	r5, r1
 800cbd2:	f7f3 fcc9 	bl	8000568 <__aeabi_dmul>
 800cbd6:	ec53 2b19 	vmov	r2, r3, d9
 800cbda:	4606      	mov	r6, r0
 800cbdc:	460f      	mov	r7, r1
 800cbde:	4620      	mov	r0, r4
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	f7f3 fb09 	bl	80001f8 <__aeabi_dsub>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4640      	mov	r0, r8
 800cbec:	4649      	mov	r1, r9
 800cbee:	f7f3 fb03 	bl	80001f8 <__aeabi_dsub>
 800cbf2:	a371      	add	r3, pc, #452	; (adr r3, 800cdb8 <__ieee754_pow+0xa00>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7f3 fcb6 	bl	8000568 <__aeabi_dmul>
 800cbfc:	a370      	add	r3, pc, #448	; (adr r3, 800cdc0 <__ieee754_pow+0xa08>)
 800cbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc02:	4680      	mov	r8, r0
 800cc04:	4689      	mov	r9, r1
 800cc06:	4620      	mov	r0, r4
 800cc08:	4629      	mov	r1, r5
 800cc0a:	f7f3 fcad 	bl	8000568 <__aeabi_dmul>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	4640      	mov	r0, r8
 800cc14:	4649      	mov	r1, r9
 800cc16:	f7f3 faf1 	bl	80001fc <__adddf3>
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	4602      	mov	r2, r0
 800cc20:	460b      	mov	r3, r1
 800cc22:	4630      	mov	r0, r6
 800cc24:	4639      	mov	r1, r7
 800cc26:	f7f3 fae9 	bl	80001fc <__adddf3>
 800cc2a:	4632      	mov	r2, r6
 800cc2c:	463b      	mov	r3, r7
 800cc2e:	4680      	mov	r8, r0
 800cc30:	4689      	mov	r9, r1
 800cc32:	f7f3 fae1 	bl	80001f8 <__aeabi_dsub>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	f7f3 fadb 	bl	80001f8 <__aeabi_dsub>
 800cc42:	4642      	mov	r2, r8
 800cc44:	4606      	mov	r6, r0
 800cc46:	460f      	mov	r7, r1
 800cc48:	464b      	mov	r3, r9
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	4649      	mov	r1, r9
 800cc4e:	f7f3 fc8b 	bl	8000568 <__aeabi_dmul>
 800cc52:	a35d      	add	r3, pc, #372	; (adr r3, 800cdc8 <__ieee754_pow+0xa10>)
 800cc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc58:	4604      	mov	r4, r0
 800cc5a:	460d      	mov	r5, r1
 800cc5c:	f7f3 fc84 	bl	8000568 <__aeabi_dmul>
 800cc60:	a35b      	add	r3, pc, #364	; (adr r3, 800cdd0 <__ieee754_pow+0xa18>)
 800cc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc66:	f7f3 fac7 	bl	80001f8 <__aeabi_dsub>
 800cc6a:	4622      	mov	r2, r4
 800cc6c:	462b      	mov	r3, r5
 800cc6e:	f7f3 fc7b 	bl	8000568 <__aeabi_dmul>
 800cc72:	a359      	add	r3, pc, #356	; (adr r3, 800cdd8 <__ieee754_pow+0xa20>)
 800cc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc78:	f7f3 fac0 	bl	80001fc <__adddf3>
 800cc7c:	4622      	mov	r2, r4
 800cc7e:	462b      	mov	r3, r5
 800cc80:	f7f3 fc72 	bl	8000568 <__aeabi_dmul>
 800cc84:	a356      	add	r3, pc, #344	; (adr r3, 800cde0 <__ieee754_pow+0xa28>)
 800cc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8a:	f7f3 fab5 	bl	80001f8 <__aeabi_dsub>
 800cc8e:	4622      	mov	r2, r4
 800cc90:	462b      	mov	r3, r5
 800cc92:	f7f3 fc69 	bl	8000568 <__aeabi_dmul>
 800cc96:	a354      	add	r3, pc, #336	; (adr r3, 800cde8 <__ieee754_pow+0xa30>)
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	f7f3 faae 	bl	80001fc <__adddf3>
 800cca0:	4622      	mov	r2, r4
 800cca2:	462b      	mov	r3, r5
 800cca4:	f7f3 fc60 	bl	8000568 <__aeabi_dmul>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	4640      	mov	r0, r8
 800ccae:	4649      	mov	r1, r9
 800ccb0:	f7f3 faa2 	bl	80001f8 <__aeabi_dsub>
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	460d      	mov	r5, r1
 800ccb8:	4602      	mov	r2, r0
 800ccba:	460b      	mov	r3, r1
 800ccbc:	4640      	mov	r0, r8
 800ccbe:	4649      	mov	r1, r9
 800ccc0:	f7f3 fc52 	bl	8000568 <__aeabi_dmul>
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	ec41 0b19 	vmov	d9, r0, r1
 800ccca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ccce:	4620      	mov	r0, r4
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	f7f3 fa91 	bl	80001f8 <__aeabi_dsub>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	ec51 0b19 	vmov	r0, r1, d9
 800ccde:	f7f3 fd6d 	bl	80007bc <__aeabi_ddiv>
 800cce2:	4632      	mov	r2, r6
 800cce4:	4604      	mov	r4, r0
 800cce6:	460d      	mov	r5, r1
 800cce8:	463b      	mov	r3, r7
 800ccea:	4640      	mov	r0, r8
 800ccec:	4649      	mov	r1, r9
 800ccee:	f7f3 fc3b 	bl	8000568 <__aeabi_dmul>
 800ccf2:	4632      	mov	r2, r6
 800ccf4:	463b      	mov	r3, r7
 800ccf6:	f7f3 fa81 	bl	80001fc <__adddf3>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	4620      	mov	r0, r4
 800cd00:	4629      	mov	r1, r5
 800cd02:	f7f3 fa79 	bl	80001f8 <__aeabi_dsub>
 800cd06:	4642      	mov	r2, r8
 800cd08:	464b      	mov	r3, r9
 800cd0a:	f7f3 fa75 	bl	80001f8 <__aeabi_dsub>
 800cd0e:	460b      	mov	r3, r1
 800cd10:	4602      	mov	r2, r0
 800cd12:	4939      	ldr	r1, [pc, #228]	; (800cdf8 <__ieee754_pow+0xa40>)
 800cd14:	2000      	movs	r0, #0
 800cd16:	f7f3 fa6f 	bl	80001f8 <__aeabi_dsub>
 800cd1a:	ec41 0b10 	vmov	d0, r0, r1
 800cd1e:	ee10 3a90 	vmov	r3, s1
 800cd22:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cd26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd2a:	da2b      	bge.n	800cd84 <__ieee754_pow+0x9cc>
 800cd2c:	4650      	mov	r0, sl
 800cd2e:	f000 f877 	bl	800ce20 <scalbn>
 800cd32:	ec51 0b10 	vmov	r0, r1, d0
 800cd36:	ec53 2b18 	vmov	r2, r3, d8
 800cd3a:	f7ff bbee 	b.w	800c51a <__ieee754_pow+0x162>
 800cd3e:	4b2f      	ldr	r3, [pc, #188]	; (800cdfc <__ieee754_pow+0xa44>)
 800cd40:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cd44:	429e      	cmp	r6, r3
 800cd46:	f77f af0d 	ble.w	800cb64 <__ieee754_pow+0x7ac>
 800cd4a:	4b2d      	ldr	r3, [pc, #180]	; (800ce00 <__ieee754_pow+0xa48>)
 800cd4c:	440b      	add	r3, r1
 800cd4e:	4303      	orrs	r3, r0
 800cd50:	d009      	beq.n	800cd66 <__ieee754_pow+0x9ae>
 800cd52:	ec51 0b18 	vmov	r0, r1, d8
 800cd56:	2200      	movs	r2, #0
 800cd58:	2300      	movs	r3, #0
 800cd5a:	f7f3 fe77 	bl	8000a4c <__aeabi_dcmplt>
 800cd5e:	3800      	subs	r0, #0
 800cd60:	bf18      	it	ne
 800cd62:	2001      	movne	r0, #1
 800cd64:	e448      	b.n	800c5f8 <__ieee754_pow+0x240>
 800cd66:	4622      	mov	r2, r4
 800cd68:	462b      	mov	r3, r5
 800cd6a:	f7f3 fa45 	bl	80001f8 <__aeabi_dsub>
 800cd6e:	4642      	mov	r2, r8
 800cd70:	464b      	mov	r3, r9
 800cd72:	f7f3 fe7f 	bl	8000a74 <__aeabi_dcmpge>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	f43f aef4 	beq.w	800cb64 <__ieee754_pow+0x7ac>
 800cd7c:	e7e9      	b.n	800cd52 <__ieee754_pow+0x99a>
 800cd7e:	f04f 0a00 	mov.w	sl, #0
 800cd82:	e71a      	b.n	800cbba <__ieee754_pow+0x802>
 800cd84:	ec51 0b10 	vmov	r0, r1, d0
 800cd88:	4619      	mov	r1, r3
 800cd8a:	e7d4      	b.n	800cd36 <__ieee754_pow+0x97e>
 800cd8c:	491a      	ldr	r1, [pc, #104]	; (800cdf8 <__ieee754_pow+0xa40>)
 800cd8e:	2000      	movs	r0, #0
 800cd90:	f7ff bb31 	b.w	800c3f6 <__ieee754_pow+0x3e>
 800cd94:	2000      	movs	r0, #0
 800cd96:	2100      	movs	r1, #0
 800cd98:	f7ff bb2d 	b.w	800c3f6 <__ieee754_pow+0x3e>
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	4639      	mov	r1, r7
 800cda0:	f7ff bb29 	b.w	800c3f6 <__ieee754_pow+0x3e>
 800cda4:	9204      	str	r2, [sp, #16]
 800cda6:	f7ff bb7b 	b.w	800c4a0 <__ieee754_pow+0xe8>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	f7ff bb65 	b.w	800c47a <__ieee754_pow+0xc2>
 800cdb0:	00000000 	.word	0x00000000
 800cdb4:	3fe62e43 	.word	0x3fe62e43
 800cdb8:	fefa39ef 	.word	0xfefa39ef
 800cdbc:	3fe62e42 	.word	0x3fe62e42
 800cdc0:	0ca86c39 	.word	0x0ca86c39
 800cdc4:	be205c61 	.word	0xbe205c61
 800cdc8:	72bea4d0 	.word	0x72bea4d0
 800cdcc:	3e663769 	.word	0x3e663769
 800cdd0:	c5d26bf1 	.word	0xc5d26bf1
 800cdd4:	3ebbbd41 	.word	0x3ebbbd41
 800cdd8:	af25de2c 	.word	0xaf25de2c
 800cddc:	3f11566a 	.word	0x3f11566a
 800cde0:	16bebd93 	.word	0x16bebd93
 800cde4:	3f66c16c 	.word	0x3f66c16c
 800cde8:	5555553e 	.word	0x5555553e
 800cdec:	3fc55555 	.word	0x3fc55555
 800cdf0:	3fe00000 	.word	0x3fe00000
 800cdf4:	fff00000 	.word	0xfff00000
 800cdf8:	3ff00000 	.word	0x3ff00000
 800cdfc:	4090cbff 	.word	0x4090cbff
 800ce00:	3f6f3400 	.word	0x3f6f3400
 800ce04:	652b82fe 	.word	0x652b82fe
 800ce08:	3c971547 	.word	0x3c971547

0800ce0c <fabs>:
 800ce0c:	ec51 0b10 	vmov	r0, r1, d0
 800ce10:	ee10 2a10 	vmov	r2, s0
 800ce14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce18:	ec43 2b10 	vmov	d0, r2, r3
 800ce1c:	4770      	bx	lr
	...

0800ce20 <scalbn>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	ec55 4b10 	vmov	r4, r5, d0
 800ce26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	462b      	mov	r3, r5
 800ce2e:	b999      	cbnz	r1, 800ce58 <scalbn+0x38>
 800ce30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ce34:	4323      	orrs	r3, r4
 800ce36:	d03f      	beq.n	800ceb8 <scalbn+0x98>
 800ce38:	4b35      	ldr	r3, [pc, #212]	; (800cf10 <scalbn+0xf0>)
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	ee10 0a10 	vmov	r0, s0
 800ce40:	2200      	movs	r2, #0
 800ce42:	f7f3 fb91 	bl	8000568 <__aeabi_dmul>
 800ce46:	4b33      	ldr	r3, [pc, #204]	; (800cf14 <scalbn+0xf4>)
 800ce48:	429e      	cmp	r6, r3
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	460d      	mov	r5, r1
 800ce4e:	da10      	bge.n	800ce72 <scalbn+0x52>
 800ce50:	a327      	add	r3, pc, #156	; (adr r3, 800cef0 <scalbn+0xd0>)
 800ce52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce56:	e01f      	b.n	800ce98 <scalbn+0x78>
 800ce58:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ce5c:	4291      	cmp	r1, r2
 800ce5e:	d10c      	bne.n	800ce7a <scalbn+0x5a>
 800ce60:	ee10 2a10 	vmov	r2, s0
 800ce64:	4620      	mov	r0, r4
 800ce66:	4629      	mov	r1, r5
 800ce68:	f7f3 f9c8 	bl	80001fc <__adddf3>
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	460d      	mov	r5, r1
 800ce70:	e022      	b.n	800ceb8 <scalbn+0x98>
 800ce72:	460b      	mov	r3, r1
 800ce74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ce78:	3936      	subs	r1, #54	; 0x36
 800ce7a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ce7e:	4296      	cmp	r6, r2
 800ce80:	dd0d      	ble.n	800ce9e <scalbn+0x7e>
 800ce82:	2d00      	cmp	r5, #0
 800ce84:	a11c      	add	r1, pc, #112	; (adr r1, 800cef8 <scalbn+0xd8>)
 800ce86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce8a:	da02      	bge.n	800ce92 <scalbn+0x72>
 800ce8c:	a11c      	add	r1, pc, #112	; (adr r1, 800cf00 <scalbn+0xe0>)
 800ce8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce92:	a319      	add	r3, pc, #100	; (adr r3, 800cef8 <scalbn+0xd8>)
 800ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce98:	f7f3 fb66 	bl	8000568 <__aeabi_dmul>
 800ce9c:	e7e6      	b.n	800ce6c <scalbn+0x4c>
 800ce9e:	1872      	adds	r2, r6, r1
 800cea0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cea4:	428a      	cmp	r2, r1
 800cea6:	dcec      	bgt.n	800ce82 <scalbn+0x62>
 800cea8:	2a00      	cmp	r2, #0
 800ceaa:	dd08      	ble.n	800cebe <scalbn+0x9e>
 800ceac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ceb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ceb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ceb8:	ec45 4b10 	vmov	d0, r4, r5
 800cebc:	bd70      	pop	{r4, r5, r6, pc}
 800cebe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cec2:	da08      	bge.n	800ced6 <scalbn+0xb6>
 800cec4:	2d00      	cmp	r5, #0
 800cec6:	a10a      	add	r1, pc, #40	; (adr r1, 800cef0 <scalbn+0xd0>)
 800cec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cecc:	dac0      	bge.n	800ce50 <scalbn+0x30>
 800cece:	a10e      	add	r1, pc, #56	; (adr r1, 800cf08 <scalbn+0xe8>)
 800ced0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ced4:	e7bc      	b.n	800ce50 <scalbn+0x30>
 800ced6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ceda:	3236      	adds	r2, #54	; 0x36
 800cedc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cee0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cee4:	4620      	mov	r0, r4
 800cee6:	4b0c      	ldr	r3, [pc, #48]	; (800cf18 <scalbn+0xf8>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	e7d5      	b.n	800ce98 <scalbn+0x78>
 800ceec:	f3af 8000 	nop.w
 800cef0:	c2f8f359 	.word	0xc2f8f359
 800cef4:	01a56e1f 	.word	0x01a56e1f
 800cef8:	8800759c 	.word	0x8800759c
 800cefc:	7e37e43c 	.word	0x7e37e43c
 800cf00:	8800759c 	.word	0x8800759c
 800cf04:	fe37e43c 	.word	0xfe37e43c
 800cf08:	c2f8f359 	.word	0xc2f8f359
 800cf0c:	81a56e1f 	.word	0x81a56e1f
 800cf10:	43500000 	.word	0x43500000
 800cf14:	ffff3cb0 	.word	0xffff3cb0
 800cf18:	3c900000 	.word	0x3c900000

0800cf1c <with_errno>:
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	4604      	mov	r4, r0
 800cf20:	460d      	mov	r5, r1
 800cf22:	4616      	mov	r6, r2
 800cf24:	f7ff f994 	bl	800c250 <__errno>
 800cf28:	4629      	mov	r1, r5
 800cf2a:	6006      	str	r6, [r0, #0]
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	bd70      	pop	{r4, r5, r6, pc}

0800cf30 <xflow>:
 800cf30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf32:	4614      	mov	r4, r2
 800cf34:	461d      	mov	r5, r3
 800cf36:	b108      	cbz	r0, 800cf3c <xflow+0xc>
 800cf38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf3c:	e9cd 2300 	strd	r2, r3, [sp]
 800cf40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf44:	4620      	mov	r0, r4
 800cf46:	4629      	mov	r1, r5
 800cf48:	f7f3 fb0e 	bl	8000568 <__aeabi_dmul>
 800cf4c:	2222      	movs	r2, #34	; 0x22
 800cf4e:	b003      	add	sp, #12
 800cf50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf54:	f7ff bfe2 	b.w	800cf1c <with_errno>

0800cf58 <__math_uflow>:
 800cf58:	b508      	push	{r3, lr}
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cf60:	f7ff ffe6 	bl	800cf30 <xflow>
 800cf64:	ec41 0b10 	vmov	d0, r0, r1
 800cf68:	bd08      	pop	{r3, pc}

0800cf6a <__math_oflow>:
 800cf6a:	b508      	push	{r3, lr}
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cf72:	f7ff ffdd 	bl	800cf30 <xflow>
 800cf76:	ec41 0b10 	vmov	d0, r0, r1
 800cf7a:	bd08      	pop	{r3, pc}

0800cf7c <__ieee754_sqrt>:
 800cf7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	ec55 4b10 	vmov	r4, r5, d0
 800cf84:	4e67      	ldr	r6, [pc, #412]	; (800d124 <__ieee754_sqrt+0x1a8>)
 800cf86:	43ae      	bics	r6, r5
 800cf88:	ee10 0a10 	vmov	r0, s0
 800cf8c:	ee10 2a10 	vmov	r2, s0
 800cf90:	4629      	mov	r1, r5
 800cf92:	462b      	mov	r3, r5
 800cf94:	d10d      	bne.n	800cfb2 <__ieee754_sqrt+0x36>
 800cf96:	f7f3 fae7 	bl	8000568 <__aeabi_dmul>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	f7f3 f92b 	bl	80001fc <__adddf3>
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	460d      	mov	r5, r1
 800cfaa:	ec45 4b10 	vmov	d0, r4, r5
 800cfae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb2:	2d00      	cmp	r5, #0
 800cfb4:	dc0b      	bgt.n	800cfce <__ieee754_sqrt+0x52>
 800cfb6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cfba:	4326      	orrs	r6, r4
 800cfbc:	d0f5      	beq.n	800cfaa <__ieee754_sqrt+0x2e>
 800cfbe:	b135      	cbz	r5, 800cfce <__ieee754_sqrt+0x52>
 800cfc0:	f7f3 f91a 	bl	80001f8 <__aeabi_dsub>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	f7f3 fbf8 	bl	80007bc <__aeabi_ddiv>
 800cfcc:	e7eb      	b.n	800cfa6 <__ieee754_sqrt+0x2a>
 800cfce:	1509      	asrs	r1, r1, #20
 800cfd0:	f000 808d 	beq.w	800d0ee <__ieee754_sqrt+0x172>
 800cfd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfd8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cfdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfe0:	07c9      	lsls	r1, r1, #31
 800cfe2:	bf5c      	itt	pl
 800cfe4:	005b      	lslpl	r3, r3, #1
 800cfe6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cfea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cfee:	bf58      	it	pl
 800cff0:	0052      	lslpl	r2, r2, #1
 800cff2:	2500      	movs	r5, #0
 800cff4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cff8:	1076      	asrs	r6, r6, #1
 800cffa:	0052      	lsls	r2, r2, #1
 800cffc:	f04f 0e16 	mov.w	lr, #22
 800d000:	46ac      	mov	ip, r5
 800d002:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d006:	eb0c 0001 	add.w	r0, ip, r1
 800d00a:	4298      	cmp	r0, r3
 800d00c:	bfde      	ittt	le
 800d00e:	1a1b      	suble	r3, r3, r0
 800d010:	eb00 0c01 	addle.w	ip, r0, r1
 800d014:	186d      	addle	r5, r5, r1
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	f1be 0e01 	subs.w	lr, lr, #1
 800d01c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d020:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d024:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d028:	d1ed      	bne.n	800d006 <__ieee754_sqrt+0x8a>
 800d02a:	4674      	mov	r4, lr
 800d02c:	2720      	movs	r7, #32
 800d02e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d032:	4563      	cmp	r3, ip
 800d034:	eb01 000e 	add.w	r0, r1, lr
 800d038:	dc02      	bgt.n	800d040 <__ieee754_sqrt+0xc4>
 800d03a:	d113      	bne.n	800d064 <__ieee754_sqrt+0xe8>
 800d03c:	4290      	cmp	r0, r2
 800d03e:	d811      	bhi.n	800d064 <__ieee754_sqrt+0xe8>
 800d040:	2800      	cmp	r0, #0
 800d042:	eb00 0e01 	add.w	lr, r0, r1
 800d046:	da57      	bge.n	800d0f8 <__ieee754_sqrt+0x17c>
 800d048:	f1be 0f00 	cmp.w	lr, #0
 800d04c:	db54      	blt.n	800d0f8 <__ieee754_sqrt+0x17c>
 800d04e:	f10c 0801 	add.w	r8, ip, #1
 800d052:	eba3 030c 	sub.w	r3, r3, ip
 800d056:	4290      	cmp	r0, r2
 800d058:	bf88      	it	hi
 800d05a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d05e:	1a12      	subs	r2, r2, r0
 800d060:	440c      	add	r4, r1
 800d062:	46c4      	mov	ip, r8
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	3f01      	subs	r7, #1
 800d068:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d06c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d070:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d074:	d1dd      	bne.n	800d032 <__ieee754_sqrt+0xb6>
 800d076:	4313      	orrs	r3, r2
 800d078:	d01b      	beq.n	800d0b2 <__ieee754_sqrt+0x136>
 800d07a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d128 <__ieee754_sqrt+0x1ac>
 800d07e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d12c <__ieee754_sqrt+0x1b0>
 800d082:	e9da 0100 	ldrd	r0, r1, [sl]
 800d086:	e9db 2300 	ldrd	r2, r3, [fp]
 800d08a:	f7f3 f8b5 	bl	80001f8 <__aeabi_dsub>
 800d08e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d092:	4602      	mov	r2, r0
 800d094:	460b      	mov	r3, r1
 800d096:	4640      	mov	r0, r8
 800d098:	4649      	mov	r1, r9
 800d09a:	f7f3 fce1 	bl	8000a60 <__aeabi_dcmple>
 800d09e:	b140      	cbz	r0, 800d0b2 <__ieee754_sqrt+0x136>
 800d0a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d0a4:	e9da 0100 	ldrd	r0, r1, [sl]
 800d0a8:	e9db 2300 	ldrd	r2, r3, [fp]
 800d0ac:	d126      	bne.n	800d0fc <__ieee754_sqrt+0x180>
 800d0ae:	3501      	adds	r5, #1
 800d0b0:	463c      	mov	r4, r7
 800d0b2:	106a      	asrs	r2, r5, #1
 800d0b4:	0863      	lsrs	r3, r4, #1
 800d0b6:	07e9      	lsls	r1, r5, #31
 800d0b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d0bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d0c0:	bf48      	it	mi
 800d0c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d0c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d0ca:	461c      	mov	r4, r3
 800d0cc:	e76d      	b.n	800cfaa <__ieee754_sqrt+0x2e>
 800d0ce:	0ad3      	lsrs	r3, r2, #11
 800d0d0:	3815      	subs	r0, #21
 800d0d2:	0552      	lsls	r2, r2, #21
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d0fa      	beq.n	800d0ce <__ieee754_sqrt+0x152>
 800d0d8:	02dc      	lsls	r4, r3, #11
 800d0da:	d50a      	bpl.n	800d0f2 <__ieee754_sqrt+0x176>
 800d0dc:	f1c1 0420 	rsb	r4, r1, #32
 800d0e0:	fa22 f404 	lsr.w	r4, r2, r4
 800d0e4:	1e4d      	subs	r5, r1, #1
 800d0e6:	408a      	lsls	r2, r1
 800d0e8:	4323      	orrs	r3, r4
 800d0ea:	1b41      	subs	r1, r0, r5
 800d0ec:	e772      	b.n	800cfd4 <__ieee754_sqrt+0x58>
 800d0ee:	4608      	mov	r0, r1
 800d0f0:	e7f0      	b.n	800d0d4 <__ieee754_sqrt+0x158>
 800d0f2:	005b      	lsls	r3, r3, #1
 800d0f4:	3101      	adds	r1, #1
 800d0f6:	e7ef      	b.n	800d0d8 <__ieee754_sqrt+0x15c>
 800d0f8:	46e0      	mov	r8, ip
 800d0fa:	e7aa      	b.n	800d052 <__ieee754_sqrt+0xd6>
 800d0fc:	f7f3 f87e 	bl	80001fc <__adddf3>
 800d100:	e9da 8900 	ldrd	r8, r9, [sl]
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	4640      	mov	r0, r8
 800d10a:	4649      	mov	r1, r9
 800d10c:	f7f3 fc9e 	bl	8000a4c <__aeabi_dcmplt>
 800d110:	b120      	cbz	r0, 800d11c <__ieee754_sqrt+0x1a0>
 800d112:	1ca0      	adds	r0, r4, #2
 800d114:	bf08      	it	eq
 800d116:	3501      	addeq	r5, #1
 800d118:	3402      	adds	r4, #2
 800d11a:	e7ca      	b.n	800d0b2 <__ieee754_sqrt+0x136>
 800d11c:	3401      	adds	r4, #1
 800d11e:	f024 0401 	bic.w	r4, r4, #1
 800d122:	e7c6      	b.n	800d0b2 <__ieee754_sqrt+0x136>
 800d124:	7ff00000 	.word	0x7ff00000
 800d128:	20000078 	.word	0x20000078
 800d12c:	20000080 	.word	0x20000080

0800d130 <_init>:
 800d130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d132:	bf00      	nop
 800d134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d136:	bc08      	pop	{r3}
 800d138:	469e      	mov	lr, r3
 800d13a:	4770      	bx	lr

0800d13c <_fini>:
 800d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13e:	bf00      	nop
 800d140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d142:	bc08      	pop	{r3}
 800d144:	469e      	mov	lr, r3
 800d146:	4770      	bx	lr
