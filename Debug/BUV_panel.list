
BUV_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b714  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005040  0800b8c8  0800b8c8  0001b8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010908  08010908  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08010908  08010908  00020908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010910  08010910  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010910  08010910  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010914  08010914  00020914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08010918  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          00000a04  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab70  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039f7  00000000  00000000  0004ac34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  0004e630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001510  00000000  00000000  0004fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c62  00000000  00000000  00051200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c9b3  00000000  00000000  00054e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0ee5  00000000  00000000  00071815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001526fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064f0  00000000  00000000  0015274c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b8ac 	.word	0x0800b8ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800b8ac 	.word	0x0800b8ac

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_uldivmod>:
 8000b18:	b953      	cbnz	r3, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1a:	b94a      	cbnz	r2, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bf08      	it	eq
 8000b20:	2800      	cmpeq	r0, #0
 8000b22:	bf1c      	itt	ne
 8000b24:	f04f 31ff 	movne.w	r1, #4294967295
 8000b28:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2c:	f000 b974 	b.w	8000e18 <__aeabi_idiv0>
 8000b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b38:	f000 f806 	bl	8000b48 <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <__udivmoddi4>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	9d08      	ldr	r5, [sp, #32]
 8000b4e:	4604      	mov	r4, r0
 8000b50:	468e      	mov	lr, r1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d14d      	bne.n	8000bf2 <__udivmoddi4+0xaa>
 8000b56:	428a      	cmp	r2, r1
 8000b58:	4694      	mov	ip, r2
 8000b5a:	d969      	bls.n	8000c30 <__udivmoddi4+0xe8>
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	b152      	cbz	r2, 8000b78 <__udivmoddi4+0x30>
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	f1c2 0120 	rsb	r1, r2, #32
 8000b6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b72:	ea41 0e03 	orr.w	lr, r1, r3
 8000b76:	4094      	lsls	r4, r2
 8000b78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b7c:	0c21      	lsrs	r1, r4, #16
 8000b7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b82:	fa1f f78c 	uxth.w	r7, ip
 8000b86:	fb08 e316 	mls	r3, r8, r6, lr
 8000b8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b8e:	fb06 f107 	mul.w	r1, r6, r7
 8000b92:	4299      	cmp	r1, r3
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x64>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9e:	f080 811f 	bcs.w	8000de0 <__udivmoddi4+0x298>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 811c 	bls.w	8000de0 <__udivmoddi4+0x298>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	4463      	add	r3, ip
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 f707 	mul.w	r7, r0, r7
 8000bc0:	42a7      	cmp	r7, r4
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x92>
 8000bc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bcc:	f080 810a 	bcs.w	8000de4 <__udivmoddi4+0x29c>
 8000bd0:	42a7      	cmp	r7, r4
 8000bd2:	f240 8107 	bls.w	8000de4 <__udivmoddi4+0x29c>
 8000bd6:	4464      	add	r4, ip
 8000bd8:	3802      	subs	r0, #2
 8000bda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bde:	1be4      	subs	r4, r4, r7
 8000be0:	2600      	movs	r6, #0
 8000be2:	b11d      	cbz	r5, 8000bec <__udivmoddi4+0xa4>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0xc2>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80ef 	beq.w	8000dda <__udivmoddi4+0x292>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x160>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0xd4>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80f9 	bhi.w	8000e0e <__udivmoddi4+0x2c6>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	469e      	mov	lr, r3
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e0      	beq.n	8000bec <__udivmoddi4+0xa4>
 8000c2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c2e:	e7dd      	b.n	8000bec <__udivmoddi4+0xa4>
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xec>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f282 	clz	r2, r2
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	f040 8092 	bne.w	8000d62 <__udivmoddi4+0x21a>
 8000c3e:	eba1 010c 	sub.w	r1, r1, ip
 8000c42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c46:	fa1f fe8c 	uxth.w	lr, ip
 8000c4a:	2601      	movs	r6, #1
 8000c4c:	0c20      	lsrs	r0, r4, #16
 8000c4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c52:	fb07 1113 	mls	r1, r7, r3, r1
 8000c56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c5a:	fb0e f003 	mul.w	r0, lr, r3
 8000c5e:	4288      	cmp	r0, r1
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x12c>
 8000c62:	eb1c 0101 	adds.w	r1, ip, r1
 8000c66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x12a>
 8000c6c:	4288      	cmp	r0, r1
 8000c6e:	f200 80cb 	bhi.w	8000e08 <__udivmoddi4+0x2c0>
 8000c72:	4643      	mov	r3, r8
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c84:	fb0e fe00 	mul.w	lr, lr, r0
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x156>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c94:	d202      	bcs.n	8000c9c <__udivmoddi4+0x154>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	f200 80bb 	bhi.w	8000e12 <__udivmoddi4+0x2ca>
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ca6:	e79c      	b.n	8000be2 <__udivmoddi4+0x9a>
 8000ca8:	f1c6 0720 	rsb	r7, r6, #32
 8000cac:	40b3      	lsls	r3, r6
 8000cae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	431c      	orrs	r4, r3
 8000cc0:	40f9      	lsrs	r1, r7
 8000cc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000cca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cce:	0c20      	lsrs	r0, r4, #16
 8000cd0:	fa1f fe8c 	uxth.w	lr, ip
 8000cd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000cd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cdc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce6:	d90b      	bls.n	8000d00 <__udivmoddi4+0x1b8>
 8000ce8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cf0:	f080 8088 	bcs.w	8000e04 <__udivmoddi4+0x2bc>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f240 8085 	bls.w	8000e04 <__udivmoddi4+0x2bc>
 8000cfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	1a09      	subs	r1, r1, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d08:	fb09 1110 	mls	r1, r9, r0, r1
 8000d0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d14:	458e      	cmp	lr, r1
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x1e2>
 8000d18:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d20:	d26c      	bcs.n	8000dfc <__udivmoddi4+0x2b4>
 8000d22:	458e      	cmp	lr, r1
 8000d24:	d96a      	bls.n	8000dfc <__udivmoddi4+0x2b4>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4461      	add	r1, ip
 8000d2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d32:	eba1 010e 	sub.w	r1, r1, lr
 8000d36:	42a1      	cmp	r1, r4
 8000d38:	46c8      	mov	r8, r9
 8000d3a:	46a6      	mov	lr, r4
 8000d3c:	d356      	bcc.n	8000dec <__udivmoddi4+0x2a4>
 8000d3e:	d053      	beq.n	8000de8 <__udivmoddi4+0x2a0>
 8000d40:	b15d      	cbz	r5, 8000d5a <__udivmoddi4+0x212>
 8000d42:	ebb3 0208 	subs.w	r2, r3, r8
 8000d46:	eb61 010e 	sbc.w	r1, r1, lr
 8000d4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d52:	40f1      	lsrs	r1, r6
 8000d54:	431f      	orrs	r7, r3
 8000d56:	e9c5 7100 	strd	r7, r1, [r5]
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	f1c2 0320 	rsb	r3, r2, #32
 8000d66:	40d8      	lsrs	r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000d70:	4091      	lsls	r1, r2
 8000d72:	4301      	orrs	r1, r0
 8000d74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d78:	fa1f fe8c 	uxth.w	lr, ip
 8000d7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d80:	fb07 3610 	mls	r6, r7, r0, r3
 8000d84:	0c0b      	lsrs	r3, r1, #16
 8000d86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d8e:	429e      	cmp	r6, r3
 8000d90:	fa04 f402 	lsl.w	r4, r4, r2
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x260>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9e:	d22f      	bcs.n	8000e00 <__udivmoddi4+0x2b8>
 8000da0:	429e      	cmp	r6, r3
 8000da2:	d92d      	bls.n	8000e00 <__udivmoddi4+0x2b8>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1b9b      	subs	r3, r3, r6
 8000daa:	b289      	uxth	r1, r1
 8000dac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000db0:	fb07 3316 	mls	r3, r7, r6, r3
 8000db4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x28a>
 8000dc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dc8:	d216      	bcs.n	8000df8 <__udivmoddi4+0x2b0>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d914      	bls.n	8000df8 <__udivmoddi4+0x2b0>
 8000dce:	3e02      	subs	r6, #2
 8000dd0:	4461      	add	r1, ip
 8000dd2:	1ac9      	subs	r1, r1, r3
 8000dd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dd8:	e738      	b.n	8000c4c <__udivmoddi4+0x104>
 8000dda:	462e      	mov	r6, r5
 8000ddc:	4628      	mov	r0, r5
 8000dde:	e705      	b.n	8000bec <__udivmoddi4+0xa4>
 8000de0:	4606      	mov	r6, r0
 8000de2:	e6e3      	b.n	8000bac <__udivmoddi4+0x64>
 8000de4:	4618      	mov	r0, r3
 8000de6:	e6f8      	b.n	8000bda <__udivmoddi4+0x92>
 8000de8:	454b      	cmp	r3, r9
 8000dea:	d2a9      	bcs.n	8000d40 <__udivmoddi4+0x1f8>
 8000dec:	ebb9 0802 	subs.w	r8, r9, r2
 8000df0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df4:	3801      	subs	r0, #1
 8000df6:	e7a3      	b.n	8000d40 <__udivmoddi4+0x1f8>
 8000df8:	4646      	mov	r6, r8
 8000dfa:	e7ea      	b.n	8000dd2 <__udivmoddi4+0x28a>
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	e794      	b.n	8000d2a <__udivmoddi4+0x1e2>
 8000e00:	4640      	mov	r0, r8
 8000e02:	e7d1      	b.n	8000da8 <__udivmoddi4+0x260>
 8000e04:	46d0      	mov	r8, sl
 8000e06:	e77b      	b.n	8000d00 <__udivmoddi4+0x1b8>
 8000e08:	3b02      	subs	r3, #2
 8000e0a:	4461      	add	r1, ip
 8000e0c:	e732      	b.n	8000c74 <__udivmoddi4+0x12c>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e709      	b.n	8000c26 <__udivmoddi4+0xde>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	e742      	b.n	8000c9e <__udivmoddi4+0x156>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <CRC_16_Modbus>:

// Поддерживаются функции 0x03, 0x04, 0x06, 0x10, 0x17


CRC_16_Modbus(uint8_t Buffer[], uint8_t Len, uint32_t pointer_out) //Рассчёт CRC
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	460b      	mov	r3, r1
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	72fb      	strb	r3, [r7, #11]
	uint8_t OutTable[3];

	uint16_t  i;
	uint8_t  j;
	uint16_t TempByte, CurrentCRC = 0xFFFF;
 8000e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2e:	833b      	strh	r3, [r7, #24]

	uint8_t HiByte;
	uint8_t LoByte;
	//make byte 16 bit format

	for ( i = 0; i < Len; i++ )
 8000e30:	2300      	movs	r3, #0
 8000e32:	83fb      	strh	r3, [r7, #30]
 8000e34:	e02c      	b.n	8000e90 <CRC_16_Modbus+0x74>
	{
	  TempByte = Buffer[i];
 8000e36:	8bfb      	ldrh	r3, [r7, #30]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	837b      	strh	r3, [r7, #26]

	  for ( j = 0; j < 8; j++ )
 8000e40:	2300      	movs	r3, #0
 8000e42:	777b      	strb	r3, [r7, #29]
 8000e44:	e01e      	b.n	8000e84 <CRC_16_Modbus+0x68>
	  {
		  if ( (CurrentCRC & 0x0001) == (TempByte & 0x0001) )
 8000e46:	8b3a      	ldrh	r2, [r7, #24]
 8000e48:	8b7b      	ldrh	r3, [r7, #26]
 8000e4a:	4053      	eors	r3, r2
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d106      	bne.n	8000e64 <CRC_16_Modbus+0x48>
		  {
			  //right shift crc
			  CurrentCRC >>= 1;
 8000e56:	8b3b      	ldrh	r3, [r7, #24]
 8000e58:	085b      	lsrs	r3, r3, #1
 8000e5a:	833b      	strh	r3, [r7, #24]
			  //right shift data
			  TempByte >>= 1;
 8000e5c:	8b7b      	ldrh	r3, [r7, #26]
 8000e5e:	085b      	lsrs	r3, r3, #1
 8000e60:	837b      	strh	r3, [r7, #26]
 8000e62:	e00c      	b.n	8000e7e <CRC_16_Modbus+0x62>
		  }
		  else
		  {
			  CurrentCRC >>= 1;
 8000e64:	8b3b      	ldrh	r3, [r7, #24]
 8000e66:	085b      	lsrs	r3, r3, #1
 8000e68:	833b      	strh	r3, [r7, #24]
			  TempByte >>= 1;
 8000e6a:	8b7b      	ldrh	r3, [r7, #26]
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	837b      	strh	r3, [r7, #26]
			  CurrentCRC = CurrentCRC ^ 0xA001; /* 1000 0100 0000 1000 = x^16 + x^12 + x^5 + 1 */
 8000e70:	8b3b      	ldrh	r3, [r7, #24]
 8000e72:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000e76:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	833b      	strh	r3, [r7, #24]
	  for ( j = 0; j < 8; j++ )
 8000e7e:	7f7b      	ldrb	r3, [r7, #29]
 8000e80:	3301      	adds	r3, #1
 8000e82:	777b      	strb	r3, [r7, #29]
 8000e84:	7f7b      	ldrb	r3, [r7, #29]
 8000e86:	2b07      	cmp	r3, #7
 8000e88:	d9dd      	bls.n	8000e46 <CRC_16_Modbus+0x2a>
	for ( i = 0; i < Len; i++ )
 8000e8a:	8bfb      	ldrh	r3, [r7, #30]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	83fb      	strh	r3, [r7, #30]
 8000e90:	7afb      	ldrb	r3, [r7, #11]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	8bfa      	ldrh	r2, [r7, #30]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3cd      	bcc.n	8000e36 <CRC_16_Modbus+0x1a>
		  }
	  }
	}

	HiByte = 0x00FF & CurrentCRC;
 8000e9a:	8b3b      	ldrh	r3, [r7, #24]
 8000e9c:	75fb      	strb	r3, [r7, #23]
	CurrentCRC = 0xFF00 & CurrentCRC;
 8000e9e:	8b3b      	ldrh	r3, [r7, #24]
 8000ea0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ea4:	833b      	strh	r3, [r7, #24]
	CurrentCRC = CurrentCRC >> 8;
 8000ea6:	8b3b      	ldrh	r3, [r7, #24]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	833b      	strh	r3, [r7, #24]
	LoByte = 0x00FF & CurrentCRC;
 8000eac:	8b3b      	ldrh	r3, [r7, #24]
 8000eae:	75bb      	strb	r3, [r7, #22]

	OutTable[0] = HiByte;
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	743b      	strb	r3, [r7, #16]
	OutTable[1] = LoByte;
 8000eb4:	7dbb      	ldrb	r3, [r7, #22]
 8000eb6:	747b      	strb	r3, [r7, #17]
	OutTable[2] = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	74bb      	strb	r3, [r7, #18]


	if( (Buffer[Len] == HiByte) & (Buffer[Len+1] == LoByte) )
 8000ebc:	7afb      	ldrb	r3, [r7, #11]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	7dfa      	ldrb	r2, [r7, #23]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	bf0c      	ite	eq
 8000eca:	2301      	moveq	r3, #1
 8000ecc:	2300      	movne	r3, #0
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	7afb      	ldrb	r3, [r7, #11]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	440b      	add	r3, r1
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	7db9      	ldrb	r1, [r7, #22]
 8000edc:	4299      	cmp	r1, r3
 8000ede:	bf0c      	ite	eq
 8000ee0:	2301      	moveq	r3, #1
 8000ee2:	2300      	movne	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <CRC_16_Modbus+0xd6>
	{
		OutTable[2] = 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	74bb      	strb	r3, [r7, #18]
	}

	memcpy(pointer_out, &OutTable, 3);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	8819      	ldrh	r1, [r3, #0]
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	8011      	strh	r1, [r2, #0]
 8000f00:	7093      	strb	r3, [r2, #2]
}
 8000f02:	bf00      	nop
 8000f04:	4618      	mov	r0, r3
 8000f06:	3724      	adds	r7, #36	; 0x24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <Slave_PORT_Processor>:

void Slave_PORT_Processor(uint32_t pointer_DB)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	60fb      	str	r3, [r7, #12]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60bb      	str	r3, [r7, #8]

	if(USART_port->a.SR & 0x80) // если прерывание по передаче
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d038      	beq.n	8000fa0 <Slave_PORT_Processor+0x90>
	{
		if(Slave_DB->a.TX_count)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	895b      	ldrh	r3, [r3, #10]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d034      	beq.n	8000fa0 <Slave_PORT_Processor+0x90>
		{
			GPIOF->BSRR = GPIO_PIN_8;		//Tx On
 8000f36:	4b32      	ldr	r3, [pc, #200]	; (8001000 <Slave_PORT_Processor+0xf0>)
 8000f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3c:	619a      	str	r2, [r3, #24]

			Slave_DB->a.Roll++;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	899b      	ldrh	r3, [r3, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	819a      	strh	r2, [r3, #12]
			if(Slave_DB->a.Roll > Slave_DB->a.Roll_max)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	899a      	ldrh	r2, [r3, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	89db      	ldrh	r3, [r3, #14]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d924      	bls.n	8000fa0 <Slave_PORT_Processor+0x90>
			{

				Slave_DB->a.Roll= 0;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	819a      	strh	r2, [r3, #12]

				if(Slave_DB->a.TX_count < Slave_DB->a.TX_incr)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	895a      	ldrh	r2, [r3, #10]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	891b      	ldrh	r3, [r3, #8]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d20b      	bcs.n	8000f80 <Slave_PORT_Processor+0x70>
				{
					Slave_DB->a.TX_count = 0;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	815a      	strh	r2, [r3, #10]
					USART_port->a.CR1 = 0x202c;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	f242 022c 	movw	r2, #8236	; 0x202c
 8000f74:	60da      	str	r2, [r3, #12]
					GPIOF->BSRR = GPIO_PIN_8 << 16;	//Tx Off
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <Slave_PORT_Processor+0xf0>)
 8000f78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f7c:	619a      	str	r2, [r3, #24]
 8000f7e:	e00f      	b.n	8000fa0 <Slave_PORT_Processor+0x90>
				}
				else
				{
					USART_port->a.DR = Slave_DB->a.TX_buff[Slave_DB->a.TX_incr];
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	891b      	ldrh	r3, [r3, #8]
 8000f84:	461a      	mov	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4413      	add	r3, r2
 8000f8a:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	605a      	str	r2, [r3, #4]
					Slave_DB->a.TX_incr++;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	891b      	ldrh	r3, [r3, #8]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	811a      	strh	r2, [r3, #8]
			}

		}
	}

	if(!Slave_DB->a.TX_count)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	895b      	ldrh	r3, [r3, #10]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d125      	bne.n	8000ff4 <Slave_PORT_Processor+0xe4>
	{
		if( (USART_port->a.SR & 0x20) ) // если прерывание по приёму
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d019      	beq.n	8000fe8 <Slave_PORT_Processor+0xd8>
		{

			if(Slave_DB->a.schet > 3){Slave_DB->a.RX_buff_pointer = 0;}
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8a1b      	ldrh	r3, [r3, #16]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d902      	bls.n	8000fc2 <Slave_PORT_Processor+0xb2>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	715a      	strb	r2, [r3, #5]
			Slave_DB->a.RX_buff[Slave_DB->a.RX_buff_pointer] = 0x000000FF & (USART_port->a.DR);
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	795b      	ldrb	r3, [r3, #5]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	440b      	add	r3, r1
 8000fd2:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			Slave_DB->a.RX_buff_pointer++;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	795b      	ldrb	r3, [r3, #5]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	715a      	strb	r2, [r3, #5]
			Slave_DB->a.schet=0;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	821a      	strh	r2, [r3, #16]
		}

		USART_port->a.CR1 |= 0x20;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f043 0220 	orr.w	r2, r3, #32
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
	}

}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40021400 	.word	0x40021400

08001004 <Slave_Processor>:

void Slave_Processor(uint32_t pointer_DB)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b08d      	sub	sp, #52	; 0x34
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	613b      	str	r3, [r7, #16]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]

	if( Slave_DB->a.RX_buff[0] == Slave_DB->a.MB_Addr )
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8465 	bne.w	80018f0 <Slave_Processor+0x8ec>
	{
		if( Slave_DB->a.RX_buff_pointer == 8 )
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	795b      	ldrb	r3, [r3, #5]
 800102a:	2b08      	cmp	r3, #8
 800102c:	f040 81f1 	bne.w	8001412 <Slave_Processor+0x40e>
		{

				if ((Slave_DB->a.RX_buff[1] == 3) | (Slave_DB->a.RX_buff[1] == 4) | (Slave_DB->a.RX_buff[1] == 6))
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001036:	2b03      	cmp	r3, #3
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2da      	uxtb	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf0c      	ite	eq
 800104a:	2301      	moveq	r3, #1
 800104c:	2300      	movne	r3, #0
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800105c:	2b06      	cmp	r3, #6
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 81be 	beq.w	80013ea <Slave_Processor+0x3e6>
					{
						Slave_DB->a.CRC_Calc_out_table[2] = 0;
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
						if(Slave_DB->a.RX_buff[1] <= 6) {CRC_16_Modbus(Slave_DB->a.RX_buff, 6, &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800107c:	2b06      	cmp	r3, #6
 800107e:	d809      	bhi.n	8001094 <Slave_Processor+0x90>
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 800108c:	461a      	mov	r2, r3
 800108e:	2106      	movs	r1, #6
 8001090:	f7ff fec4 	bl	8000e1c <CRC_16_Modbus>

						if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 81a5 	beq.w	80013ea <Slave_Processor+0x3e6>
						{

							if(Slave_DB->a.RX_buff[1] == 6) // обработка функции 0x06
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d174      	bne.n	8001194 <Slave_Processor+0x190>
							{

								Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b29a      	uxth	r2, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.RX_buff[4];
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	f893 2511 	ldrb.w	r2, [r3, #1297]	; 0x511
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80010ec:	b211      	sxth	r1, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	3308      	adds	r3, #8
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	460a      	mov	r2, r1
 80010f8:	805a      	strh	r2, [r3, #2]
								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.Registers[Slave_DB->a.StartAddr] << 8;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	3308      	adds	r3, #8
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800110c:	021a      	lsls	r2, r3, #8
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001114:	b211      	sxth	r1, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	3308      	adds	r3, #8
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	460a      	mov	r2, r1
 8001120:	805a      	strh	r2, [r3, #2]
								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.Registers[Slave_DB->a.StartAddr] | Slave_DB->a.RX_buff[5];
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	3308      	adds	r3, #8
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 800113a:	b21b      	sxth	r3, r3
 800113c:	6939      	ldr	r1, [r7, #16]
 800113e:	f8b1 1610 	ldrh.w	r1, [r1, #1552]	; 0x610
 8001142:	4608      	mov	r0, r1
 8001144:	4313      	orrs	r3, r2
 8001146:	b219      	sxth	r1, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	f100 0308 	add.w	r3, r0, #8
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	460a      	mov	r2, r1
 8001154:	805a      	strh	r2, [r3, #2]

								for(int i=0;i<8;i++)
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800115a:	e00f      	b.n	800117c <Slave_Processor+0x178>
								{
									Slave_DB->a.TX_buff[i] = Slave_DB->a.RX_buff[i];
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	4413      	add	r3, r2
 8001162:	f203 530d 	addw	r3, r3, #1293	; 0x50d
 8001166:	7819      	ldrb	r1, [r3, #0]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116c:	4413      	add	r3, r2
 800116e:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001172:	460a      	mov	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]
								for(int i=0;i<8;i++)
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	3301      	adds	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117e:	2b07      	cmp	r3, #7
 8001180:	ddec      	ble.n	800115c <Slave_Processor+0x158>
								}

								Slave_DB->a.TX_count = 8;
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	2208      	movs	r2, #8
 8001186:	815a      	strh	r2, [r3, #10]
								Slave_DB->a.TX_incr = 0;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	2200      	movs	r2, #0
 800118c:	811a      	strh	r2, [r3, #8]
								Slave_DB->a.RX_buff_pointer = 0;
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	2200      	movs	r2, #0
 8001192:	715a      	strb	r2, [r3, #5]

							}

							if((Slave_DB->a.RX_buff[1] == 3) | (Slave_DB->a.RX_buff[1] == 4)) // обработка функции 0x03 и 0x04
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800119a:	2b03      	cmp	r3, #3
 800119c:	bf0c      	ite	eq
 800119e:	2301      	moveq	r3, #1
 80011a0:	2300      	movne	r3, #0
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8116 	beq.w	80013ea <Slave_Processor+0x3e6>
							{

								Slave_DB->a.TX_buff[0] = Slave_DB->a.RX_buff[0];
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
								Slave_DB->a.TX_buff[1] = Slave_DB->a.RX_buff[1];
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	f893 250e 	ldrb.w	r2, [r3, #1294]	; 0x50e
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f

								Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 80011dc:	b29a      	uxth	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8001200:	b29b      	uxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b29a      	uxth	r2, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

								Slave_DB->a.Quanity = Slave_DB->a.RX_buff[4];
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8001212:	b29a      	uxth	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
								Slave_DB->a.Quanity = Slave_DB->a.Quanity << 8;
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b29a      	uxth	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
								Slave_DB->a.Quanity = Slave_DB->a.Quanity | Slave_DB->a.RX_buff[5];
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	f8b3 2612 	ldrh.w	r2, [r3, #1554]	; 0x612
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8001236:	b29b      	uxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b29a      	uxth	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612

								Slave_DB->a.TX_buff[2] = Slave_DB->a.Quanity * 2;
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001248:	b2db      	uxtb	r3, r3
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

								if(Slave_DB->a.RX_buff[1] == 4)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800125a:	2b04      	cmp	r3, #4
 800125c:	d14a      	bne.n	80012f4 <Slave_Processor+0x2f0>
								{
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
 8001262:	e03f      	b.n	80012e4 <Slave_Processor+0x2e0>
									{
										Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Input_Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800126a:	4619      	mov	r1, r3
 800126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126e:	0fda      	lsrs	r2, r3, #31
 8001270:	4413      	add	r3, r2
 8001272:	105b      	asrs	r3, r3, #1
 8001274:	18ca      	adds	r2, r1, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f502 7284 	add.w	r2, r2, #264	; 0x108
 800127c:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	3304      	adds	r3, #4
 8001284:	b2d1      	uxtb	r1, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4413      	add	r3, r2
 800128a:	460a      	mov	r2, r1
 800128c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
										Slave_DB->a.TempRegister = Slave_DB->a.Input_Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001296:	4619      	mov	r1, r3
 8001298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129a:	0fda      	lsrs	r2, r3, #31
 800129c:	4413      	add	r3, r2
 800129e:	105b      	asrs	r3, r3, #1
 80012a0:	18ca      	adds	r2, r1, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80012a8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80012ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 80012be:	121b      	asrs	r3, r3, #8
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 80012ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d0:	3303      	adds	r3, #3
 80012d2:	b2d1      	uxtb	r1, r2
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4413      	add	r3, r2
 80012d8:	460a      	mov	r2, r1
 80012da:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80012de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e0:	3302      	adds	r3, #2
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80012ea:	461a      	mov	r2, r3
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	4293      	cmp	r3, r2
 80012f0:	dbb8      	blt.n	8001264 <Slave_Processor+0x260>
 80012f2:	e04b      	b.n	800138c <Slave_Processor+0x388>
									}
								}
								else
								{
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
 80012f8:	e041      	b.n	800137e <Slave_Processor+0x37a>
									{
										Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001300:	4619      	mov	r1, r3
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	0fda      	lsrs	r2, r3, #31
 8001306:	4413      	add	r3, r2
 8001308:	105b      	asrs	r3, r3, #1
 800130a:	440b      	add	r3, r1
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	3308      	adds	r3, #8
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	3304      	adds	r3, #4
 800131c:	b2d1      	uxtb	r1, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4413      	add	r3, r2
 8001322:	460a      	mov	r2, r1
 8001324:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
										Slave_DB->a.TempRegister = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800132e:	4619      	mov	r1, r3
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	0fda      	lsrs	r2, r3, #31
 8001334:	4413      	add	r3, r2
 8001336:	105b      	asrs	r3, r3, #1
 8001338:	440b      	add	r3, r1
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	3308      	adds	r3, #8
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800134a:	b21a      	sxth	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 8001358:	121b      	asrs	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	3303      	adds	r3, #3
 800136c:	b2d1      	uxtb	r1, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4413      	add	r3, r2
 8001372:	460a      	mov	r2, r1
 8001374:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	3302      	adds	r3, #2
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001384:	461a      	mov	r2, r3
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	4293      	cmp	r3, r2
 800138a:	dbb6      	blt.n	80012fa <Slave_Processor+0x2f6>
									}
								}

								uint8_t LenMess;
								LenMess = Slave_DB->a.TX_buff[2] + 5;
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001392:	3305      	adds	r3, #5
 8001394:	72fb      	strb	r3, [r7, #11]
								CRC_16_Modbus(Slave_DB->a.TX_buff, (LenMess - 2), &Slave_DB->a.CRC_Calc_out_table);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	3b02      	subs	r3, #2
 80013a0:	b2d9      	uxtb	r1, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80013a8:	461a      	mov	r2, r3
 80013aa:	f7ff fd37 	bl	8000e1c <CRC_16_Modbus>
								Slave_DB->a.TX_buff[LenMess - 1] = Slave_DB->a.CRC_Calc_out_table[1];
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	f892 160d 	ldrb.w	r1, [r2, #1549]	; 0x60d
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4413      	add	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
								Slave_DB->a.TX_buff[LenMess - 2] = Slave_DB->a.CRC_Calc_out_table[0];
 80013c2:	7afb      	ldrb	r3, [r7, #11]
 80013c4:	3b02      	subs	r3, #2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	f892 160c 	ldrb.w	r1, [r2, #1548]	; 0x60c
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4413      	add	r3, r2
 80013d0:	460a      	mov	r2, r1
 80013d2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

								Slave_DB->a.TX_count = LenMess;
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	b29a      	uxth	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	815a      	strh	r2, [r3, #10]
								Slave_DB->a.TX_incr = 0;
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	2200      	movs	r2, #0
 80013e2:	811a      	strh	r2, [r3, #8]
								Slave_DB->a.RX_buff_pointer = 0;
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2200      	movs	r2, #0
 80013e8:	715a      	strb	r2, [r3, #5]
							}

						}
					}

				if( Slave_DB->a.RX_buff[1] == 16 ) // зондирование для функции 0x10
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 80013f0:	2b10      	cmp	r3, #16
 80013f2:	d10e      	bne.n	8001412 <Slave_Processor+0x40e>
				{
					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[6];
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.LenLongMessage = Slave_DB->a.Quanity + 9;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001408:	b2db      	uxtb	r3, r3
 800140a:	3309      	adds	r3, #9
 800140c:	b2da      	uxtb	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	719a      	strb	r2, [r3, #6]
				}
		}

		if( Slave_DB->a.RX_buff_pointer == 11 )
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	795b      	ldrb	r3, [r3, #5]
 8001416:	2b0b      	cmp	r3, #11
 8001418:	d113      	bne.n	8001442 <Slave_Processor+0x43e>
		{
			if( Slave_DB->a.RX_buff[1] == 23 ) // зондирование для функции 0x17
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001420:	2b17      	cmp	r3, #23
 8001422:	d10e      	bne.n	8001442 <Slave_Processor+0x43e>
				{
					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[10];
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800142a:	b29a      	uxth	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.LenLongMessage = Slave_DB->a.Quanity + 13;
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001438:	b2db      	uxtb	r3, r3
 800143a:	330d      	adds	r3, #13
 800143c:	b2da      	uxtb	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	719a      	strb	r2, [r3, #6]
				}
		}


		if( Slave_DB->a.RX_buff[1] == 16 ) // обработка функции 0x10
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001448:	2b10      	cmp	r3, #16
 800144a:	f040 80dd 	bne.w	8001608 <Slave_Processor+0x604>
		{
			if( (Slave_DB->a.RX_buff_pointer == Slave_DB->a.LenLongMessage) )
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	795a      	ldrb	r2, [r3, #5]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	799b      	ldrb	r3, [r3, #6]
 8001456:	429a      	cmp	r2, r3
 8001458:	f040 80d6 	bne.w	8001608 <Slave_Processor+0x604>
			{
				Slave_DB->a.CRC_Calc_out_table[2] = 0;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
				if(Slave_DB->a.RX_buff[1] == 16) {CRC_16_Modbus(Slave_DB->a.RX_buff, (Slave_DB->a.LenLongMessage-2), &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800146a:	2b10      	cmp	r3, #16
 800146c:	d10c      	bne.n	8001488 <Slave_Processor+0x484>
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	799b      	ldrb	r3, [r3, #6]
 8001478:	3b02      	subs	r3, #2
 800147a:	b2d9      	uxtb	r1, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8001482:	461a      	mov	r2, r3
 8001484:	f7ff fcca 	bl	8000e1c <CRC_16_Modbus>

				if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80ba 	beq.w	8001608 <Slave_Processor+0x604>
				{

					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 800149a:	b29a      	uxth	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.RX_buff[6];i=i+2)
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
 80014ce:	e05f      	b.n	8001590 <Slave_Processor+0x58c>
					{
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.RX_buff[i+7];
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	3307      	adds	r3, #7
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4413      	add	r3, r2
 80014d8:	f893 150d 	ldrb.w	r1, [r3, #1293]	; 0x50d
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80014e2:	4618      	mov	r0, r3
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	0fda      	lsrs	r2, r3, #31
 80014e8:	4413      	add	r3, r2
 80014ea:	105b      	asrs	r3, r3, #1
 80014ec:	4403      	add	r3, r0
 80014ee:	b209      	sxth	r1, r1
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	3308      	adds	r3, #8
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	460a      	mov	r2, r1
 80014fa:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] << 8;
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001502:	4619      	mov	r1, r3
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	0fda      	lsrs	r2, r3, #31
 8001508:	4413      	add	r3, r2
 800150a:	105b      	asrs	r3, r3, #1
 800150c:	440b      	add	r3, r1
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	3308      	adds	r3, #8
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800151a:	0219      	lsls	r1, r3, #8
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001522:	4618      	mov	r0, r3
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	0fda      	lsrs	r2, r3, #31
 8001528:	4413      	add	r3, r2
 800152a:	105b      	asrs	r3, r3, #1
 800152c:	4403      	add	r3, r0
 800152e:	b209      	sxth	r1, r1
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	3308      	adds	r3, #8
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	460a      	mov	r2, r1
 800153a:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] | Slave_DB->a.RX_buff[i+8];
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001542:	4619      	mov	r1, r3
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	0fda      	lsrs	r2, r3, #31
 8001548:	4413      	add	r3, r2
 800154a:	105b      	asrs	r3, r3, #1
 800154c:	440b      	add	r3, r1
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	3308      	adds	r3, #8
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	3308      	adds	r3, #8
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4413      	add	r3, r2
 8001562:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 8001566:	b21a      	sxth	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800156e:	461c      	mov	r4, r3
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	0fd8      	lsrs	r0, r3, #31
 8001574:	4403      	add	r3, r0
 8001576:	105b      	asrs	r3, r3, #1
 8001578:	4423      	add	r3, r4
 800157a:	430a      	orrs	r2, r1
 800157c:	b211      	sxth	r1, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	3308      	adds	r3, #8
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	460a      	mov	r2, r1
 8001588:	805a      	strh	r2, [r3, #2]
					for(int i=0;i<Slave_DB->a.RX_buff[6];i=i+2)
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	3302      	adds	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8001596:	461a      	mov	r2, r3
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	4293      	cmp	r3, r2
 800159c:	db98      	blt.n	80014d0 <Slave_Processor+0x4cc>
					}

					for(int i=0;i<6;i++)
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e00f      	b.n	80015c4 <Slave_Processor+0x5c0>
					{Slave_DB->a.TX_buff[i] = Slave_DB->a.RX_buff[i];}
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	4413      	add	r3, r2
 80015aa:	f203 530d 	addw	r3, r3, #1293	; 0x50d
 80015ae:	7819      	ldrb	r1, [r3, #0]
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 80015ba:	460a      	mov	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<6;i++)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	ddec      	ble.n	80015a4 <Slave_Processor+0x5a0>

					CRC_16_Modbus(Slave_DB->a.TX_buff, 6, &Slave_DB->a.CRC_Calc_out_table);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80015d6:	461a      	mov	r2, r3
 80015d8:	2106      	movs	r1, #6
 80015da:	f7ff fc1f 	bl	8000e1c <CRC_16_Modbus>
					Slave_DB->a.TX_buff[6] = Slave_DB->a.CRC_Calc_out_table[0];
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f893 260c 	ldrb.w	r2, [r3, #1548]	; 0x60c
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
					Slave_DB->a.TX_buff[7] = Slave_DB->a.CRC_Calc_out_table[1];
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f893 260d 	ldrb.w	r2, [r3, #1549]	; 0x60d
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

					Slave_DB->a.TX_count = 8;
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	2208      	movs	r2, #8
 80015fa:	815a      	strh	r2, [r3, #10]
					Slave_DB->a.TX_incr = 0;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2200      	movs	r2, #0
 8001600:	811a      	strh	r2, [r3, #8]
					Slave_DB->a.RX_buff_pointer = 0;
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2200      	movs	r2, #0
 8001606:	715a      	strb	r2, [r3, #5]
				}
			}
		}

		if( Slave_DB->a.RX_buff[1] == 23 ) // обработка функции 0x17
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800160e:	2b17      	cmp	r3, #23
 8001610:	f040 816e 	bne.w	80018f0 <Slave_Processor+0x8ec>
		{
			if( (Slave_DB->a.RX_buff_pointer == Slave_DB->a.LenLongMessage) )
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	795a      	ldrb	r2, [r3, #5]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	799b      	ldrb	r3, [r3, #6]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 8167 	bne.w	80018f0 <Slave_Processor+0x8ec>
			{
				Slave_DB->a.CRC_Calc_out_table[2] = 0;
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
				if(Slave_DB->a.RX_buff[1] == 23) {CRC_16_Modbus(Slave_DB->a.RX_buff, (Slave_DB->a.LenLongMessage-2), &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001630:	2b17      	cmp	r3, #23
 8001632:	d10c      	bne.n	800164e <Slave_Processor+0x64a>
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	799b      	ldrb	r3, [r3, #6]
 800163e:	3b02      	subs	r3, #2
 8001640:	b2d9      	uxtb	r1, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8001648:	461a      	mov	r2, r3
 800164a:	f7ff fbe7 	bl	8000e1c <CRC_16_Modbus>

				if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 814b 	beq.w	80018f0 <Slave_Processor+0x8ec>
				{
					// Приём регистров
					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[6];
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8001660:	b29a      	uxth	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b29a      	uxth	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[7];
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f893 3514 	ldrb.w	r3, [r3, #1300]	; 0x514
 8001684:	b29b      	uxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b29a      	uxth	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.RX_buff[10];i=i+2)
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	e05f      	b.n	8001756 <Slave_Processor+0x752>
					{
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.RX_buff[i+11];
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	330b      	adds	r3, #11
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4413      	add	r3, r2
 800169e:	f893 150d 	ldrb.w	r1, [r3, #1293]	; 0x50d
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80016a8:	4618      	mov	r0, r3
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	0fda      	lsrs	r2, r3, #31
 80016ae:	4413      	add	r3, r2
 80016b0:	105b      	asrs	r3, r3, #1
 80016b2:	4403      	add	r3, r0
 80016b4:	b209      	sxth	r1, r1
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	3308      	adds	r3, #8
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	460a      	mov	r2, r1
 80016c0:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] << 8;
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80016c8:	4619      	mov	r1, r3
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	0fda      	lsrs	r2, r3, #31
 80016ce:	4413      	add	r3, r2
 80016d0:	105b      	asrs	r3, r3, #1
 80016d2:	440b      	add	r3, r1
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	3308      	adds	r3, #8
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016e0:	0219      	lsls	r1, r3, #8
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80016e8:	4618      	mov	r0, r3
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	0fda      	lsrs	r2, r3, #31
 80016ee:	4413      	add	r3, r2
 80016f0:	105b      	asrs	r3, r3, #1
 80016f2:	4403      	add	r3, r0
 80016f4:	b209      	sxth	r1, r1
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	3308      	adds	r3, #8
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	460a      	mov	r2, r1
 8001700:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] | Slave_DB->a.RX_buff[i+12];
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001708:	4619      	mov	r1, r3
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	0fda      	lsrs	r2, r3, #31
 800170e:	4413      	add	r3, r2
 8001710:	105b      	asrs	r3, r3, #1
 8001712:	440b      	add	r3, r1
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	3308      	adds	r3, #8
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	330c      	adds	r3, #12
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4413      	add	r3, r2
 8001728:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 800172c:	b21a      	sxth	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001734:	461c      	mov	r4, r3
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	0fd8      	lsrs	r0, r3, #31
 800173a:	4403      	add	r3, r0
 800173c:	105b      	asrs	r3, r3, #1
 800173e:	4423      	add	r3, r4
 8001740:	430a      	orrs	r2, r1
 8001742:	b211      	sxth	r1, r2
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	3308      	adds	r3, #8
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	460a      	mov	r2, r1
 800174e:	805a      	strh	r2, [r3, #2]
					for(int i=0;i<Slave_DB->a.RX_buff[10];i=i+2)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	3302      	adds	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800175c:	461a      	mov	r2, r3
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4293      	cmp	r3, r2
 8001762:	db98      	blt.n	8001696 <Slave_Processor+0x692>
					}

					// Формирование ответа
					Slave_DB->a.TX_buff[0] = Slave_DB->a.RX_buff[0];
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					Slave_DB->a.TX_buff[1] = Slave_DB->a.RX_buff[1];
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f893 250e 	ldrb.w	r2, [r3, #1294]	; 0x50e
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f

					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[4];
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8001782:	b29a      	uxth	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.Quanity = Slave_DB->a.Quanity << 8;
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b29a      	uxth	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.Quanity = Slave_DB->a.Quanity | Slave_DB->a.RX_buff[5];
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f8b3 2612 	ldrh.w	r2, [r3, #1554]	; 0x612
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612

					Slave_DB->a.TX_buff[2] = Slave_DB->a.Quanity * 2;
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b29a      	uxth	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e041      	b.n	8001884 <Slave_Processor+0x880>
					{
						Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001806:	4619      	mov	r1, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	0fda      	lsrs	r2, r3, #31
 800180c:	4413      	add	r3, r2
 800180e:	105b      	asrs	r3, r3, #1
 8001810:	440b      	add	r3, r1
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	3308      	adds	r3, #8
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3304      	adds	r3, #4
 8001822:	b2d1      	uxtb	r1, r2
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4413      	add	r3, r2
 8001828:	460a      	mov	r2, r1
 800182a:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
						Slave_DB->a.TempRegister = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001834:	4619      	mov	r1, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	0fda      	lsrs	r2, r3, #31
 800183a:	4413      	add	r3, r2
 800183c:	105b      	asrs	r3, r3, #1
 800183e:	440b      	add	r3, r1
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	3308      	adds	r3, #8
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800184c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001850:	b21a      	sxth	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
						Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 800185e:	121b      	asrs	r3, r3, #8
 8001860:	b21a      	sxth	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
						Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3303      	adds	r3, #3
 8001872:	b2d1      	uxtb	r1, r2
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4413      	add	r3, r2
 8001878:	460a      	mov	r2, r1
 800187a:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3302      	adds	r3, #2
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800188a:	461a      	mov	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4293      	cmp	r3, r2
 8001890:	dbb6      	blt.n	8001800 <Slave_Processor+0x7fc>
					}

					uint8_t LenMess;
					LenMess = Slave_DB->a.TX_buff[2] + 5;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001898:	3305      	adds	r3, #5
 800189a:	72bb      	strb	r3, [r7, #10]
					CRC_16_Modbus(Slave_DB->a.TX_buff, (LenMess - 2), &Slave_DB->a.CRC_Calc_out_table);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 80018a2:	7abb      	ldrb	r3, [r7, #10]
 80018a4:	3b02      	subs	r3, #2
 80018a6:	b2d9      	uxtb	r1, r3
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80018ae:	461a      	mov	r2, r3
 80018b0:	f7ff fab4 	bl	8000e1c <CRC_16_Modbus>
					Slave_DB->a.TX_buff[LenMess - 1] = Slave_DB->a.CRC_Calc_out_table[1];
 80018b4:	7abb      	ldrb	r3, [r7, #10]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	f892 160d 	ldrb.w	r1, [r2, #1549]	; 0x60d
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4413      	add	r3, r2
 80018c2:	460a      	mov	r2, r1
 80018c4:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					Slave_DB->a.TX_buff[LenMess - 2] = Slave_DB->a.CRC_Calc_out_table[0];
 80018c8:	7abb      	ldrb	r3, [r7, #10]
 80018ca:	3b02      	subs	r3, #2
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	f892 160c 	ldrb.w	r1, [r2, #1548]	; 0x60c
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4413      	add	r3, r2
 80018d6:	460a      	mov	r2, r1
 80018d8:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

					Slave_DB->a.TX_count = LenMess;
 80018dc:	7abb      	ldrb	r3, [r7, #10]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	815a      	strh	r2, [r3, #10]
					Slave_DB->a.TX_incr = 0;
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2200      	movs	r2, #0
 80018e8:	811a      	strh	r2, [r3, #8]
					Slave_DB->a.RX_buff_pointer = 0;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2200      	movs	r2, #0
 80018ee:	715a      	strb	r2, [r3, #5]
				}
			}
		}
	}
}
 80018f0:	bf00      	nop
 80018f2:	3734      	adds	r7, #52	; 0x34
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}

080018f8 <Slave_Clock_1ms>:
		}
	}
}

void Slave_Clock_1ms(uint32_t pointer_DB)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	60fb      	str	r3, [r7, #12]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60bb      	str	r3, [r7, #8]

	Slave_DB->a.schet++;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8a1b      	ldrh	r3, [r3, #16]
 800190e:	3301      	adds	r3, #1
 8001910:	b29a      	uxth	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	821a      	strh	r2, [r3, #16]
	if(Slave_DB->a.schet>=100){Slave_DB->a.schet=100;}
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8a1b      	ldrh	r3, [r3, #16]
 800191a:	2b63      	cmp	r3, #99	; 0x63
 800191c:	d902      	bls.n	8001924 <Slave_Clock_1ms+0x2c>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2264      	movs	r2, #100	; 0x64
 8001922:	821a      	strh	r2, [r3, #16]
	if(Slave_DB->a.TX_count){USART_port->a.CR1 |= 0x80;}
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	895b      	ldrh	r3, [r3, #10]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <Slave_Clock_1ms+0x40>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60da      	str	r2, [r3, #12]

}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <Screens_init>:




void Screens_init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af04      	add	r7, sp, #16

	for(int i = 0; i < 20;i++)
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e008      	b.n	8001962 <Screens_init+0x1e>
	{
		FonColor[i] = BackgroundColor;
 8001950:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <Screens_init+0x128>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4946      	ldr	r1, [pc, #280]	; (8001a70 <Screens_init+0x12c>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 20;i++)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b13      	cmp	r3, #19
 8001966:	ddf3      	ble.n	8001950 <Screens_init+0xc>
	}


	// Экран 0 (черный экран)
	HAL_LTDC_SetAddress(&hltdc, Page[0], 0);
 8001968:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <Screens_init+0x130>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	4841      	ldr	r0, [pc, #260]	; (8001a78 <Screens_init+0x134>)
 8001972:	f005 fe1f 	bl	80075b4 <HAL_LTDC_SetAddress>
	Zaliv(0x000000, Page[0], 800, 480);
 8001976:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <Screens_init+0x130>)
 8001978:	6819      	ldr	r1, [r3, #0]
 800197a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800197e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001982:	2000      	movs	r0, #0
 8001984:	f004 fd3c 	bl	8006400 <Zaliv>

	// Экран_1
	Zaliv(BackgroundColor, Page[1], 800, 480);
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <Screens_init+0x128>)
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <Screens_init+0x130>)
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001994:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001998:	f004 fd32 	bl	8006400 <Zaliv>
	Draw_Rectangle(0x000000,   0, 220, 800,   3, Page[1], 800, 480); // первая горизонталь
 800199c:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <Screens_init+0x130>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019a4:	9203      	str	r2, [sp, #12]
 80019a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019aa:	9202      	str	r2, [sp, #8]
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	2303      	movs	r3, #3
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80019b6:	22dc      	movs	r2, #220	; 0xdc
 80019b8:	2100      	movs	r1, #0
 80019ba:	2000      	movs	r0, #0
 80019bc:	f004 fd4c 	bl	8006458 <Draw_Rectangle>

	for(int i = 0; i < 3; i++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	e13c      	b.n	8001c40 <Screens_init+0x2fc>
	{

		uint16_t shift_X = i * 260 + 7;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	0192      	lsls	r2, r2, #6
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	3307      	adds	r3, #7
 80019d6:	80fb      	strh	r3, [r7, #6]

		if(i < 2)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	dc13      	bgt.n	8001a06 <Screens_init+0xc2>
		{
			Draw_Rectangle(0x000000, 260 + shift_X,   0,   3, 220, Page[1], 800, 480);
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80019e4:	b299      	uxth	r1, r3
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <Screens_init+0x130>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019ee:	9203      	str	r2, [sp, #12]
 80019f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019f4:	9202      	str	r2, [sp, #8]
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	23dc      	movs	r3, #220	; 0xdc
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2303      	movs	r3, #3
 80019fe:	2200      	movs	r2, #0
 8001a00:	2000      	movs	r0, #0
 8001a02:	f004 fd29 	bl	8006458 <Draw_Rectangle>
		}

		switch(i)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d03d      	beq.n	8001a88 <Screens_init+0x144>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	dc4d      	bgt.n	8001aae <Screens_init+0x16a>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <Screens_init+0xdc>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d013      	beq.n	8001a46 <Screens_init+0x102>
 8001a1e:	e046      	b.n	8001aae <Screens_init+0x16a>
		{
			case 0:
				Short_Left_Colored_RU_DrawString_32("1",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	3346      	adds	r3, #70	; 0x46
 8001a24:	b298      	uxth	r0, r3
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <Screens_init+0x128>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <Screens_init+0x138>)
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	4911      	ldr	r1, [pc, #68]	; (8001a74 <Screens_init+0x130>)
 8001a30:	6849      	ldr	r1, [r1, #4]
 8001a32:	9102      	str	r1, [sp, #8]
 8001a34:	9201      	str	r2, [sp, #4]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2317      	movs	r3, #23
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4810      	ldr	r0, [pc, #64]	; (8001a80 <Screens_init+0x13c>)
 8001a40:	f003 fb92 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			break;
 8001a44:	e033      	b.n	8001aae <Screens_init+0x16a>

			case 1:
				Short_Left_Colored_RU_DrawString_32("2",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	3346      	adds	r3, #70	; 0x46
 8001a4a:	b298      	uxth	r0, r3
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <Screens_init+0x128>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <Screens_init+0x138>)
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	4907      	ldr	r1, [pc, #28]	; (8001a74 <Screens_init+0x130>)
 8001a56:	6849      	ldr	r1, [r1, #4]
 8001a58:	9102      	str	r1, [sp, #8]
 8001a5a:	9201      	str	r2, [sp, #4]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2317      	movs	r3, #23
 8001a60:	4602      	mov	r2, r0
 8001a62:	2101      	movs	r1, #1
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <Screens_init+0x140>)
 8001a66:	f003 fb7f 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			break;
 8001a6a:	e020      	b.n	8001aae <Screens_init+0x16a>
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	200000b0 	.word	0x200000b0
 8001a74:	20000974 	.word	0x20000974
 8001a78:	20000140 	.word	0x20000140
 8001a7c:	200009e8 	.word	0x200009e8
 8001a80:	0800b8c8 	.word	0x0800b8c8
 8001a84:	0800b8cc 	.word	0x0800b8cc

			case 2:
				Short_Left_Colored_RU_DrawString_32("3",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	3346      	adds	r3, #70	; 0x46
 8001a8c:	b298      	uxth	r0, r3
 8001a8e:	4b9c      	ldr	r3, [pc, #624]	; (8001d00 <Screens_init+0x3bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a9c      	ldr	r2, [pc, #624]	; (8001d04 <Screens_init+0x3c0>)
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	499c      	ldr	r1, [pc, #624]	; (8001d08 <Screens_init+0x3c4>)
 8001a98:	6849      	ldr	r1, [r1, #4]
 8001a9a:	9102      	str	r1, [sp, #8]
 8001a9c:	9201      	str	r2, [sp, #4]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2317      	movs	r3, #23
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4899      	ldr	r0, [pc, #612]	; (8001d0c <Screens_init+0x3c8>)
 8001aa8:	f003 fb5e 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			break;
 8001aac:	bf00      	nop
		}

		Short_Left_Colored_RU_DrawString_32("АНН",  			  3,   5 + shift_X,  20, BackgroundColor, BasicSymbolColor, Page[1]);
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	3305      	adds	r3, #5
 8001ab2:	b298      	uxth	r0, r3
 8001ab4:	4b92      	ldr	r3, [pc, #584]	; (8001d00 <Screens_init+0x3bc>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a92      	ldr	r2, [pc, #584]	; (8001d04 <Screens_init+0x3c0>)
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	4992      	ldr	r1, [pc, #584]	; (8001d08 <Screens_init+0x3c4>)
 8001abe:	6849      	ldr	r1, [r1, #4]
 8001ac0:	9102      	str	r1, [sp, #8]
 8001ac2:	9201      	str	r2, [sp, #4]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2314      	movs	r3, #20
 8001ac8:	4602      	mov	r2, r0
 8001aca:	2103      	movs	r1, #3
 8001acc:	4890      	ldr	r0, [pc, #576]	; (8001d10 <Screens_init+0x3cc>)
 8001ace:	f003 fb4b 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Д.напор", 	 	  	  7,   5 + shift_X,  50, BackgroundColor, BasicSymbolColor, Page[1]);
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	3305      	adds	r3, #5
 8001ad6:	b298      	uxth	r0, r3
 8001ad8:	4b89      	ldr	r3, [pc, #548]	; (8001d00 <Screens_init+0x3bc>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a89      	ldr	r2, [pc, #548]	; (8001d04 <Screens_init+0x3c0>)
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	4989      	ldr	r1, [pc, #548]	; (8001d08 <Screens_init+0x3c4>)
 8001ae2:	6849      	ldr	r1, [r1, #4]
 8001ae4:	9102      	str	r1, [sp, #8]
 8001ae6:	9201      	str	r2, [sp, #4]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2332      	movs	r3, #50	; 0x32
 8001aec:	4602      	mov	r2, r0
 8001aee:	2107      	movs	r1, #7
 8001af0:	4888      	ldr	r0, [pc, #544]	; (8001d14 <Screens_init+0x3d0>)
 8001af2:	f003 fb39 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		  3, 200 + shift_X,  50, BackgroundColor, BasicSymbolColor, Page[1]);
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	33c8      	adds	r3, #200	; 0xc8
 8001afa:	b298      	uxth	r0, r3
 8001afc:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <Screens_init+0x3bc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a80      	ldr	r2, [pc, #512]	; (8001d04 <Screens_init+0x3c0>)
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	4980      	ldr	r1, [pc, #512]	; (8001d08 <Screens_init+0x3c4>)
 8001b06:	6849      	ldr	r1, [r1, #4]
 8001b08:	9102      	str	r1, [sp, #8]
 8001b0a:	9201      	str	r2, [sp, #4]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2332      	movs	r3, #50	; 0x32
 8001b10:	4602      	mov	r2, r0
 8001b12:	2103      	movs	r1, #3
 8001b14:	4880      	ldr	r0, [pc, #512]	; (8001d18 <Screens_init+0x3d4>)
 8001b16:	f003 fb27 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Д.масла", 	 		  7,   5 + shift_X,  80, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	3305      	adds	r3, #5
 8001b1e:	b298      	uxth	r0, r3
 8001b20:	4b77      	ldr	r3, [pc, #476]	; (8001d00 <Screens_init+0x3bc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a77      	ldr	r2, [pc, #476]	; (8001d04 <Screens_init+0x3c0>)
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	4977      	ldr	r1, [pc, #476]	; (8001d08 <Screens_init+0x3c4>)
 8001b2a:	6849      	ldr	r1, [r1, #4]
 8001b2c:	9102      	str	r1, [sp, #8]
 8001b2e:	9201      	str	r2, [sp, #4]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2350      	movs	r3, #80	; 0x50
 8001b34:	4602      	mov	r2, r0
 8001b36:	2107      	movs	r1, #7
 8001b38:	4878      	ldr	r0, [pc, #480]	; (8001d1c <Screens_init+0x3d8>)
 8001b3a:	f003 fb15 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		  3, 200 + shift_X,  80, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	33c8      	adds	r3, #200	; 0xc8
 8001b42:	b298      	uxth	r0, r3
 8001b44:	4b6e      	ldr	r3, [pc, #440]	; (8001d00 <Screens_init+0x3bc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <Screens_init+0x3c0>)
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	496e      	ldr	r1, [pc, #440]	; (8001d08 <Screens_init+0x3c4>)
 8001b4e:	6849      	ldr	r1, [r1, #4]
 8001b50:	9102      	str	r1, [sp, #8]
 8001b52:	9201      	str	r2, [sp, #4]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2350      	movs	r3, #80	; 0x50
 8001b58:	4602      	mov	r2, r0
 8001b5a:	2103      	movs	r1, #3
 8001b5c:	486e      	ldr	r0, [pc, #440]	; (8001d18 <Screens_init+0x3d4>)
 8001b5e:	f003 fb03 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Т.масла", 	 	  	  7,   5 + shift_X, 110, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	3305      	adds	r3, #5
 8001b66:	b298      	uxth	r0, r3
 8001b68:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <Screens_init+0x3bc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a65      	ldr	r2, [pc, #404]	; (8001d04 <Screens_init+0x3c0>)
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	4965      	ldr	r1, [pc, #404]	; (8001d08 <Screens_init+0x3c4>)
 8001b72:	6849      	ldr	r1, [r1, #4]
 8001b74:	9102      	str	r1, [sp, #8]
 8001b76:	9201      	str	r2, [sp, #4]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	236e      	movs	r3, #110	; 0x6e
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	2107      	movs	r1, #7
 8001b80:	4867      	ldr	r0, [pc, #412]	; (8001d20 <Screens_init+0x3dc>)
 8001b82:	f003 faf1 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("*С", 	 	  		  2, 200 + shift_X, 110, BackgroundColor, BasicSymbolColor, Page[1]);
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	33c8      	adds	r3, #200	; 0xc8
 8001b8a:	b298      	uxth	r0, r3
 8001b8c:	4b5c      	ldr	r3, [pc, #368]	; (8001d00 <Screens_init+0x3bc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5c      	ldr	r2, [pc, #368]	; (8001d04 <Screens_init+0x3c0>)
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	495c      	ldr	r1, [pc, #368]	; (8001d08 <Screens_init+0x3c4>)
 8001b96:	6849      	ldr	r1, [r1, #4]
 8001b98:	9102      	str	r1, [sp, #8]
 8001b9a:	9201      	str	r2, [sp, #4]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	236e      	movs	r3, #110	; 0x6e
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	485f      	ldr	r0, [pc, #380]	; (8001d24 <Screens_init+0x3e0>)
 8001ba6:	f003 fadf 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МотЧасы", 	 	  	  7,   5 + shift_X, 200, BackgroundColor, BasicSymbolColor, Page[1]);
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	3305      	adds	r3, #5
 8001bae:	b298      	uxth	r0, r3
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <Screens_init+0x3bc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a53      	ldr	r2, [pc, #332]	; (8001d04 <Screens_init+0x3c0>)
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	4953      	ldr	r1, [pc, #332]	; (8001d08 <Screens_init+0x3c4>)
 8001bba:	6849      	ldr	r1, [r1, #4]
 8001bbc:	9102      	str	r1, [sp, #8]
 8001bbe:	9201      	str	r2, [sp, #4]
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	23c8      	movs	r3, #200	; 0xc8
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	2107      	movs	r1, #7
 8001bc8:	4857      	ldr	r0, [pc, #348]	; (8001d28 <Screens_init+0x3e4>)
 8001bca:	f003 facd 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>

		Short_Left_Colored_RU_DrawString_32("   Вкл   ", 		  9,  95 + shift_X,  20,      GreenColor, BasicSymbolColor, Page[1]);
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	335f      	adds	r3, #95	; 0x5f
 8001bd2:	b298      	uxth	r0, r3
 8001bd4:	4b55      	ldr	r3, [pc, #340]	; (8001d2c <Screens_init+0x3e8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a4a      	ldr	r2, [pc, #296]	; (8001d04 <Screens_init+0x3c0>)
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	494a      	ldr	r1, [pc, #296]	; (8001d08 <Screens_init+0x3c4>)
 8001bde:	6849      	ldr	r1, [r1, #4]
 8001be0:	9102      	str	r1, [sp, #8]
 8001be2:	9201      	str	r2, [sp, #4]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2314      	movs	r3, #20
 8001be8:	4602      	mov	r2, r0
 8001bea:	2109      	movs	r1, #9
 8001bec:	4850      	ldr	r0, [pc, #320]	; (8001d30 <Screens_init+0x3ec>)
 8001bee:	f003 fabb 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("  РАЗГРУЗКА   ", 	 14,   5 + shift_X, 140, 		RedColor, BasicSymbolColor, Page[1]);
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	3305      	adds	r3, #5
 8001bf6:	b298      	uxth	r0, r3
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	; (8001d34 <Screens_init+0x3f0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a41      	ldr	r2, [pc, #260]	; (8001d04 <Screens_init+0x3c0>)
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	4941      	ldr	r1, [pc, #260]	; (8001d08 <Screens_init+0x3c4>)
 8001c02:	6849      	ldr	r1, [r1, #4]
 8001c04:	9102      	str	r1, [sp, #8]
 8001c06:	9201      	str	r2, [sp, #4]
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	238c      	movs	r3, #140	; 0x8c
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	210e      	movs	r1, #14
 8001c10:	4849      	ldr	r0, [pc, #292]	; (8001d38 <Screens_init+0x3f4>)
 8001c12:	f003 faa9 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("тепл. защита  ", 	 14,   5 + shift_X, 170, 		RedColor, BasicSymbolColor, Page[1]);
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	3305      	adds	r3, #5
 8001c1a:	b298      	uxth	r0, r3
 8001c1c:	4b45      	ldr	r3, [pc, #276]	; (8001d34 <Screens_init+0x3f0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a38      	ldr	r2, [pc, #224]	; (8001d04 <Screens_init+0x3c0>)
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	4938      	ldr	r1, [pc, #224]	; (8001d08 <Screens_init+0x3c4>)
 8001c26:	6849      	ldr	r1, [r1, #4]
 8001c28:	9102      	str	r1, [sp, #8]
 8001c2a:	9201      	str	r2, [sp, #4]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	23aa      	movs	r3, #170	; 0xaa
 8001c30:	4602      	mov	r2, r0
 8001c32:	210e      	movs	r1, #14
 8001c34:	4841      	ldr	r0, [pc, #260]	; (8001d3c <Screens_init+0x3f8>)
 8001c36:	f003 fa97 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	for(int i = 0; i < 3; i++)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	f77f aebf 	ble.w	80019c6 <Screens_init+0x82>


	}

	Draw_Rectangle(0x000000, 665, 220, 3, 360, Page[1], 800, 480);
 8001c48:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <Screens_init+0x3c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c50:	9203      	str	r2, [sp, #12]
 8001c52:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001c56:	9202      	str	r2, [sp, #8]
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2303      	movs	r3, #3
 8001c62:	22dc      	movs	r2, #220	; 0xdc
 8001c64:	f240 2199 	movw	r1, #665	; 0x299
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f004 fbf5 	bl	8006458 <Draw_Rectangle>
	Short_Left_Colored_RU_DrawString_32("УСТАВКА", 	 	  	 			 7, 670, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <Screens_init+0x3bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <Screens_init+0x3c0>)
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4924      	ldr	r1, [pc, #144]	; (8001d08 <Screens_init+0x3c4>)
 8001c78:	6849      	ldr	r1, [r1, #4]
 8001c7a:	9102      	str	r1, [sp, #8]
 8001c7c:	9201      	str	r2, [sp, #4]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	23f0      	movs	r3, #240	; 0xf0
 8001c82:	f240 229e 	movw	r2, #670	; 0x29e
 8001c86:	2107      	movs	r1, #7
 8001c88:	482d      	ldr	r0, [pc, #180]	; (8001d40 <Screens_init+0x3fc>)
 8001c8a:	f003 fa6d 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  	     			 3, 740, 267, BackgroundColor, BasicSymbolColor, Page[1]);
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <Screens_init+0x3bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <Screens_init+0x3c0>)
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	491c      	ldr	r1, [pc, #112]	; (8001d08 <Screens_init+0x3c4>)
 8001c98:	6849      	ldr	r1, [r1, #4]
 8001c9a:	9102      	str	r1, [sp, #8]
 8001c9c:	9201      	str	r2, [sp, #4]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f240 130b 	movw	r3, #267	; 0x10b
 8001ca4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001ca8:	2103      	movs	r1, #3
 8001caa:	481b      	ldr	r0, [pc, #108]	; (8001d18 <Screens_init+0x3d4>)
 8001cac:	f003 fa5c 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Ур.Бак ", 	 	  	 			 7, 670, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <Screens_init+0x3bc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <Screens_init+0x3c0>)
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	4913      	ldr	r1, [pc, #76]	; (8001d08 <Screens_init+0x3c4>)
 8001cba:	6849      	ldr	r1, [r1, #4]
 8001cbc:	9102      	str	r1, [sp, #8]
 8001cbe:	9201      	str	r2, [sp, #4]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001cc6:	f240 229e 	movw	r2, #670	; 0x29e
 8001cca:	2107      	movs	r1, #7
 8001ccc:	481d      	ldr	r0, [pc, #116]	; (8001d44 <Screens_init+0x400>)
 8001cce:	f003 fa4b 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("мм", 	 	  	     			 2, 740, 327, BackgroundColor, BasicSymbolColor, Page[1]);
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <Screens_init+0x3bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <Screens_init+0x3c0>)
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	490b      	ldr	r1, [pc, #44]	; (8001d08 <Screens_init+0x3c4>)
 8001cdc:	6849      	ldr	r1, [r1, #4]
 8001cde:	9102      	str	r1, [sp, #8]
 8001ce0:	9201      	str	r2, [sp, #4]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	f240 1347 	movw	r3, #327	; 0x147
 8001ce8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001cec:	2102      	movs	r1, #2
 8001cee:	4816      	ldr	r0, [pc, #88]	; (8001d48 <Screens_init+0x404>)
 8001cf0:	f003 fa3a 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Тем.Бак", 	 	  	 			 7, 670, 360, BackgroundColor, BasicSymbolColor, Page[1]);
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <Screens_init+0x3bc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a02      	ldr	r2, [pc, #8]	; (8001d04 <Screens_init+0x3c0>)
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	e026      	b.n	8001d4c <Screens_init+0x408>
 8001cfe:	bf00      	nop
 8001d00:	20000008 	.word	0x20000008
 8001d04:	200009e8 	.word	0x200009e8
 8001d08:	20000974 	.word	0x20000974
 8001d0c:	0800b8d0 	.word	0x0800b8d0
 8001d10:	0800b8d4 	.word	0x0800b8d4
 8001d14:	0800b8dc 	.word	0x0800b8dc
 8001d18:	0800b8ec 	.word	0x0800b8ec
 8001d1c:	0800b8f4 	.word	0x0800b8f4
 8001d20:	0800b904 	.word	0x0800b904
 8001d24:	0800b914 	.word	0x0800b914
 8001d28:	0800b918 	.word	0x0800b918
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	0800b928 	.word	0x0800b928
 8001d34:	20000000 	.word	0x20000000
 8001d38:	0800b938 	.word	0x0800b938
 8001d3c:	0800b950 	.word	0x0800b950
 8001d40:	0800b96c 	.word	0x0800b96c
 8001d44:	0800b97c 	.word	0x0800b97c
 8001d48:	0800b98c 	.word	0x0800b98c
 8001d4c:	499e      	ldr	r1, [pc, #632]	; (8001fc8 <Screens_init+0x684>)
 8001d4e:	6849      	ldr	r1, [r1, #4]
 8001d50:	9102      	str	r1, [sp, #8]
 8001d52:	9201      	str	r2, [sp, #4]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001d5a:	f240 229e 	movw	r2, #670	; 0x29e
 8001d5e:	2107      	movs	r1, #7
 8001d60:	489a      	ldr	r0, [pc, #616]	; (8001fcc <Screens_init+0x688>)
 8001d62:	f003 fa01 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("*С", 	 	  	     			 2, 740, 387, BackgroundColor, BasicSymbolColor, Page[1]);
 8001d66:	4b9a      	ldr	r3, [pc, #616]	; (8001fd0 <Screens_init+0x68c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a9a      	ldr	r2, [pc, #616]	; (8001fd4 <Screens_init+0x690>)
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	4996      	ldr	r1, [pc, #600]	; (8001fc8 <Screens_init+0x684>)
 8001d70:	6849      	ldr	r1, [r1, #4]
 8001d72:	9102      	str	r1, [sp, #8]
 8001d74:	9201      	str	r2, [sp, #4]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	f240 1383 	movw	r3, #387	; 0x183
 8001d7c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001d80:	2102      	movs	r1, #2
 8001d82:	4895      	ldr	r0, [pc, #596]	; (8001fd8 <Screens_init+0x694>)
 8001d84:	f003 f9f0 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("УЗЕЛ ФИЛЬТРОВ", 	 			13,  13, 240,       GrayColor, BasicSymbolColor, Page[1]);
 8001d88:	4b94      	ldr	r3, [pc, #592]	; (8001fdc <Screens_init+0x698>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a91      	ldr	r2, [pc, #580]	; (8001fd4 <Screens_init+0x690>)
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	498d      	ldr	r1, [pc, #564]	; (8001fc8 <Screens_init+0x684>)
 8001d92:	6849      	ldr	r1, [r1, #4]
 8001d94:	9102      	str	r1, [sp, #8]
 8001d96:	9201      	str	r2, [sp, #4]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	23f0      	movs	r3, #240	; 0xf0
 8001d9c:	220d      	movs	r2, #13
 8001d9e:	210d      	movs	r1, #13
 8001da0:	488f      	ldr	r0, [pc, #572]	; (8001fe0 <Screens_init+0x69c>)
 8001da2:	f003 f9e1 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.в магистр:",		 			12, 300, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001da6:	4b8a      	ldr	r3, [pc, #552]	; (8001fd0 <Screens_init+0x68c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a8a      	ldr	r2, [pc, #552]	; (8001fd4 <Screens_init+0x690>)
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	4986      	ldr	r1, [pc, #536]	; (8001fc8 <Screens_init+0x684>)
 8001db0:	6849      	ldr	r1, [r1, #4]
 8001db2:	9102      	str	r1, [sp, #8]
 8001db4:	9201      	str	r2, [sp, #4]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	23f0      	movs	r3, #240	; 0xf0
 8001dba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dbe:	210c      	movs	r1, #12
 8001dc0:	4888      	ldr	r0, [pc, #544]	; (8001fe4 <Screens_init+0x6a0>)
 8001dc2:	f003 f9d1 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 3, 580, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001dc6:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <Screens_init+0x68c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a82      	ldr	r2, [pc, #520]	; (8001fd4 <Screens_init+0x690>)
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	497e      	ldr	r1, [pc, #504]	; (8001fc8 <Screens_init+0x684>)
 8001dd0:	6849      	ldr	r1, [r1, #4]
 8001dd2:	9102      	str	r1, [sp, #8]
 8001dd4:	9201      	str	r2, [sp, #4]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	23f0      	movs	r3, #240	; 0xf0
 8001dda:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001dde:	2103      	movs	r1, #3
 8001de0:	4881      	ldr	r0, [pc, #516]	; (8001fe8 <Screens_init+0x6a4>)
 8001de2:	f003 f9c1 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.перед сл. напорн фильтром:", 28,  13, 270, BackgroundColor, BasicSymbolColor, Page[1]);
 8001de6:	4b7a      	ldr	r3, [pc, #488]	; (8001fd0 <Screens_init+0x68c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a7a      	ldr	r2, [pc, #488]	; (8001fd4 <Screens_init+0x690>)
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	4976      	ldr	r1, [pc, #472]	; (8001fc8 <Screens_init+0x684>)
 8001df0:	6849      	ldr	r1, [r1, #4]
 8001df2:	9102      	str	r1, [sp, #8]
 8001df4:	9201      	str	r2, [sp, #4]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001dfc:	220d      	movs	r2, #13
 8001dfe:	211c      	movs	r1, #28
 8001e00:	487a      	ldr	r0, [pc, #488]	; (8001fec <Screens_init+0x6a8>)
 8001e02:	f003 f9b1 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 3, 580, 270, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <Screens_init+0x68c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a72      	ldr	r2, [pc, #456]	; (8001fd4 <Screens_init+0x690>)
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	496e      	ldr	r1, [pc, #440]	; (8001fc8 <Screens_init+0x684>)
 8001e10:	6849      	ldr	r1, [r1, #4]
 8001e12:	9102      	str	r1, [sp, #8]
 8001e14:	9201      	str	r2, [sp, #4]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001e1c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001e20:	2103      	movs	r1, #3
 8001e22:	4871      	ldr	r0, [pc, #452]	; (8001fe8 <Screens_init+0x6a4>)
 8001e24:	f003 f9a0 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.перед сл.ф.:",			 	14,  13, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e28:	4b69      	ldr	r3, [pc, #420]	; (8001fd0 <Screens_init+0x68c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a69      	ldr	r2, [pc, #420]	; (8001fd4 <Screens_init+0x690>)
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	4965      	ldr	r1, [pc, #404]	; (8001fc8 <Screens_init+0x684>)
 8001e32:	6849      	ldr	r1, [r1, #4]
 8001e34:	9102      	str	r1, [sp, #8]
 8001e36:	9201      	str	r2, [sp, #4]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e3e:	220d      	movs	r2, #13
 8001e40:	210e      	movs	r1, #14
 8001e42:	486b      	ldr	r0, [pc, #428]	; (8001ff0 <Screens_init+0x6ac>)
 8001e44:	f003 f990 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 							 3, 360, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e48:	4b61      	ldr	r3, [pc, #388]	; (8001fd0 <Screens_init+0x68c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a61      	ldr	r2, [pc, #388]	; (8001fd4 <Screens_init+0x690>)
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	495d      	ldr	r1, [pc, #372]	; (8001fc8 <Screens_init+0x684>)
 8001e52:	6849      	ldr	r1, [r1, #4]
 8001e54:	9102      	str	r1, [sp, #8]
 8001e56:	9201      	str	r2, [sp, #4]
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001e62:	2103      	movs	r1, #3
 8001e64:	4860      	ldr	r0, [pc, #384]	; (8001fe8 <Screens_init+0x6a4>)
 8001e66:	f003 f97f 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("за", 							 2, 450, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e6a:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <Screens_init+0x68c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a59      	ldr	r2, [pc, #356]	; (8001fd4 <Screens_init+0x690>)
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	4955      	ldr	r1, [pc, #340]	; (8001fc8 <Screens_init+0x684>)
 8001e74:	6849      	ldr	r1, [r1, #4]
 8001e76:	9102      	str	r1, [sp, #8]
 8001e78:	9201      	str	r2, [sp, #4]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e80:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001e84:	2102      	movs	r1, #2
 8001e86:	485b      	ldr	r0, [pc, #364]	; (8001ff4 <Screens_init+0x6b0>)
 8001e88:	f003 f96e 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 							 3, 580, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <Screens_init+0x68c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a50      	ldr	r2, [pc, #320]	; (8001fd4 <Screens_init+0x690>)
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	494c      	ldr	r1, [pc, #304]	; (8001fc8 <Screens_init+0x684>)
 8001e96:	6849      	ldr	r1, [r1, #4]
 8001e98:	9102      	str	r1, [sp, #8]
 8001e9a:	9201      	str	r2, [sp, #4]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001ea2:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001ea6:	2103      	movs	r1, #3
 8001ea8:	484f      	ldr	r0, [pc, #316]	; (8001fe8 <Screens_init+0x6a4>)
 8001eaa:	f003 f95d 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Расход. сл.ф.:", 				14,  13, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 8001eae:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <Screens_init+0x68c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <Screens_init+0x690>)
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	4944      	ldr	r1, [pc, #272]	; (8001fc8 <Screens_init+0x684>)
 8001eb8:	6849      	ldr	r1, [r1, #4]
 8001eba:	9102      	str	r1, [sp, #8]
 8001ebc:	9201      	str	r2, [sp, #4]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001ec4:	220d      	movs	r2, #13
 8001ec6:	210e      	movs	r1, #14
 8001ec8:	484b      	ldr	r0, [pc, #300]	; (8001ff8 <Screens_init+0x6b4>)
 8001eca:	f003 f94d 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 3, 360, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 8001ece:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <Screens_init+0x68c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a40      	ldr	r2, [pc, #256]	; (8001fd4 <Screens_init+0x690>)
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	493c      	ldr	r1, [pc, #240]	; (8001fc8 <Screens_init+0x684>)
 8001ed8:	6849      	ldr	r1, [r1, #4]
 8001eda:	9102      	str	r1, [sp, #8]
 8001edc:	9201      	str	r2, [sp, #4]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001ee4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001ee8:	2103      	movs	r1, #3
 8001eea:	4844      	ldr	r0, [pc, #272]	; (8001ffc <Screens_init+0x6b8>)
 8001eec:	f003 f93c 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("эмул", 					 	 4, 420, 330,       GrayColor, BasicSymbolColor, Page[1]);
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <Screens_init+0x698>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a37      	ldr	r2, [pc, #220]	; (8001fd4 <Screens_init+0x690>)
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	4933      	ldr	r1, [pc, #204]	; (8001fc8 <Screens_init+0x684>)
 8001efa:	6849      	ldr	r1, [r1, #4]
 8001efc:	9102      	str	r1, [sp, #8]
 8001efe:	9201      	str	r2, [sp, #4]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001f06:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001f0a:	2104      	movs	r1, #4
 8001f0c:	483c      	ldr	r0, [pc, #240]	; (8002000 <Screens_init+0x6bc>)
 8001f0e:	f003 f92b 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 3, 580, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <Screens_init+0x68c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <Screens_init+0x690>)
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	492b      	ldr	r1, [pc, #172]	; (8001fc8 <Screens_init+0x684>)
 8001f1c:	6849      	ldr	r1, [r1, #4]
 8001f1e:	9102      	str	r1, [sp, #8]
 8001f20:	9201      	str	r2, [sp, #4]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001f28:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001f2c:	2103      	movs	r1, #3
 8001f2e:	4833      	ldr	r0, [pc, #204]	; (8001ffc <Screens_init+0x6b8>)
 8001f30:	f003 f91a 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Прокач  объем:", 				14,  13, 360, BackgroundColor, BasicSymbolColor, Page[1]);
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <Screens_init+0x68c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <Screens_init+0x690>)
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	4922      	ldr	r1, [pc, #136]	; (8001fc8 <Screens_init+0x684>)
 8001f3e:	6849      	ldr	r1, [r1, #4]
 8001f40:	9102      	str	r1, [sp, #8]
 8001f42:	9201      	str	r2, [sp, #4]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001f4a:	220d      	movs	r2, #13
 8001f4c:	210e      	movs	r1, #14
 8001f4e:	482d      	ldr	r0, [pc, #180]	; (8002004 <Screens_init+0x6c0>)
 8001f50:	f003 f90a 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("(м3)", 					 	 4, 420, 360,       GrayColor, BasicSymbolColor, Page[1]);
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <Screens_init+0x698>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <Screens_init+0x690>)
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	491a      	ldr	r1, [pc, #104]	; (8001fc8 <Screens_init+0x684>)
 8001f5e:	6849      	ldr	r1, [r1, #4]
 8001f60:	9102      	str	r1, [sp, #8]
 8001f62:	9201      	str	r2, [sp, #4]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001f6a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001f6e:	2104      	movs	r1, #4
 8001f70:	4825      	ldr	r0, [pc, #148]	; (8002008 <Screens_init+0x6c4>)
 8001f72:	f003 f8f9 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>

	// Экран_2 (устройство эмульсии)
	Zaliv(BackgroundColor, Page[2], 800, 480);
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <Screens_init+0x68c>)
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <Screens_init+0x684>)
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001f82:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f86:	f004 fa3b 	bl	8006400 <Zaliv>
	Short_Left_Colored_RU_DrawString_32("Устройство приготовления эмульсии", 	33,  10,  30,       GrayColor, BasicSymbolColor, Page[2]);
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <Screens_init+0x698>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <Screens_init+0x690>)
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	490d      	ldr	r1, [pc, #52]	; (8001fc8 <Screens_init+0x684>)
 8001f94:	6889      	ldr	r1, [r1, #8]
 8001f96:	9102      	str	r1, [sp, #8]
 8001f98:	9201      	str	r2, [sp, #4]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	231e      	movs	r3, #30
 8001f9e:	220a      	movs	r2, #10
 8001fa0:	2121      	movs	r1, #33	; 0x21
 8001fa2:	481a      	ldr	r0, [pc, #104]	; (800200c <Screens_init+0x6c8>)
 8001fa4:	f003 f8e0 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>

	Short_Left_Colored_RU_DrawString_32("Расход концентрата:", 	 				19,  10, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <Screens_init+0x68c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <Screens_init+0x690>)
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	4905      	ldr	r1, [pc, #20]	; (8001fc8 <Screens_init+0x684>)
 8001fb2:	6889      	ldr	r1, [r1, #8]
 8001fb4:	9102      	str	r1, [sp, #8]
 8001fb6:	9201      	str	r2, [sp, #4]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	23b4      	movs	r3, #180	; 0xb4
 8001fbc:	220a      	movs	r2, #10
 8001fbe:	2113      	movs	r1, #19
 8001fc0:	4813      	ldr	r0, [pc, #76]	; (8002010 <Screens_init+0x6cc>)
 8001fc2:	f003 f8d1 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
 8001fc6:	e025      	b.n	8002014 <Screens_init+0x6d0>
 8001fc8:	20000974 	.word	0x20000974
 8001fcc:	0800b994 	.word	0x0800b994
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	200009e8 	.word	0x200009e8
 8001fd8:	0800b914 	.word	0x0800b914
 8001fdc:	2000000c 	.word	0x2000000c
 8001fe0:	0800b9a4 	.word	0x0800b9a4
 8001fe4:	0800b9c0 	.word	0x0800b9c0
 8001fe8:	0800b8ec 	.word	0x0800b8ec
 8001fec:	0800b9d8 	.word	0x0800b9d8
 8001ff0:	0800ba0c 	.word	0x0800ba0c
 8001ff4:	0800ba24 	.word	0x0800ba24
 8001ff8:	0800ba2c 	.word	0x0800ba2c
 8001ffc:	0800ba44 	.word	0x0800ba44
 8002000:	0800ba4c 	.word	0x0800ba4c
 8002004:	0800ba58 	.word	0x0800ba58
 8002008:	0800ba74 	.word	0x0800ba74
 800200c:	0800ba7c 	.word	0x0800ba7c
 8002010:	0800bac0 	.word	0x0800bac0
	Short_Left_Colored_RU_DrawString_32("Рефрактометр поточный", 	 			21,  10, 210, BackgroundColor, BasicSymbolColor, Page[2]);
 8002014:	4b9f      	ldr	r3, [pc, #636]	; (8002294 <Screens_init+0x950>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a9f      	ldr	r2, [pc, #636]	; (8002298 <Screens_init+0x954>)
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	499f      	ldr	r1, [pc, #636]	; (800229c <Screens_init+0x958>)
 800201e:	6889      	ldr	r1, [r1, #8]
 8002020:	9102      	str	r1, [sp, #8]
 8002022:	9201      	str	r2, [sp, #4]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	23d2      	movs	r3, #210	; 0xd2
 8002028:	220a      	movs	r2, #10
 800202a:	2115      	movs	r1, #21
 800202c:	489c      	ldr	r0, [pc, #624]	; (80022a0 <Screens_init+0x95c>)
 800202e:	f003 f89b 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Датчик проводимости", 	 				19,  10, 240, BackgroundColor, BasicSymbolColor, Page[2]);
 8002032:	4b98      	ldr	r3, [pc, #608]	; (8002294 <Screens_init+0x950>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a98      	ldr	r2, [pc, #608]	; (8002298 <Screens_init+0x954>)
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	4998      	ldr	r1, [pc, #608]	; (800229c <Screens_init+0x958>)
 800203c:	6889      	ldr	r1, [r1, #8]
 800203e:	9102      	str	r1, [sp, #8]
 8002040:	9201      	str	r2, [sp, #4]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	23f0      	movs	r3, #240	; 0xf0
 8002046:	220a      	movs	r2, #10
 8002048:	2113      	movs	r1, #19
 800204a:	4896      	ldr	r0, [pc, #600]	; (80022a4 <Screens_init+0x960>)
 800204c:	f003 f88c 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Датчик рН          ", 	 				19,  10, 270, BackgroundColor, BasicSymbolColor, Page[2]);
 8002050:	4b90      	ldr	r3, [pc, #576]	; (8002294 <Screens_init+0x950>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a90      	ldr	r2, [pc, #576]	; (8002298 <Screens_init+0x954>)
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4990      	ldr	r1, [pc, #576]	; (800229c <Screens_init+0x958>)
 800205a:	6889      	ldr	r1, [r1, #8]
 800205c:	9102      	str	r1, [sp, #8]
 800205e:	9201      	str	r2, [sp, #4]
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002066:	220a      	movs	r2, #10
 8002068:	2113      	movs	r1, #19
 800206a:	488f      	ldr	r0, [pc, #572]	; (80022a8 <Screens_init+0x964>)
 800206c:	f003 f87c 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Давление перед фильтрами воды", 		29,  10, 300, BackgroundColor, BasicSymbolColor, Page[2]);
 8002070:	4b88      	ldr	r3, [pc, #544]	; (8002294 <Screens_init+0x950>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a88      	ldr	r2, [pc, #544]	; (8002298 <Screens_init+0x954>)
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	4988      	ldr	r1, [pc, #544]	; (800229c <Screens_init+0x958>)
 800207a:	6889      	ldr	r1, [r1, #8]
 800207c:	9102      	str	r1, [sp, #8]
 800207e:	9201      	str	r2, [sp, #4]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002086:	220a      	movs	r2, #10
 8002088:	211d      	movs	r1, #29
 800208a:	4888      	ldr	r0, [pc, #544]	; (80022ac <Screens_init+0x968>)
 800208c:	f003 f86c 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Давление после фильтров  воды", 		29,  10, 330, BackgroundColor, BasicSymbolColor, Page[2]);
 8002090:	4b80      	ldr	r3, [pc, #512]	; (8002294 <Screens_init+0x950>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a80      	ldr	r2, [pc, #512]	; (8002298 <Screens_init+0x954>)
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4980      	ldr	r1, [pc, #512]	; (800229c <Screens_init+0x958>)
 800209a:	6889      	ldr	r1, [r1, #8]
 800209c:	9102      	str	r1, [sp, #8]
 800209e:	9201      	str	r2, [sp, #4]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80020a6:	220a      	movs	r2, #10
 80020a8:	211d      	movs	r1, #29
 80020aa:	4881      	ldr	r0, [pc, #516]	; (80022b0 <Screens_init+0x96c>)
 80020ac:	f003 f85c 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Расходомер воды", 						15,  10, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 80020b0:	4b78      	ldr	r3, [pc, #480]	; (8002294 <Screens_init+0x950>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a78      	ldr	r2, [pc, #480]	; (8002298 <Screens_init+0x954>)
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4978      	ldr	r1, [pc, #480]	; (800229c <Screens_init+0x958>)
 80020ba:	6889      	ldr	r1, [r1, #8]
 80020bc:	9102      	str	r1, [sp, #8]
 80020be:	9201      	str	r2, [sp, #4]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80020c6:	220a      	movs	r2, #10
 80020c8:	210f      	movs	r1, #15
 80020ca:	487a      	ldr	r0, [pc, #488]	; (80022b4 <Screens_init+0x970>)
 80020cc:	f003 f84c 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 		 3, 520, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 80020d0:	4b70      	ldr	r3, [pc, #448]	; (8002294 <Screens_init+0x950>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a70      	ldr	r2, [pc, #448]	; (8002298 <Screens_init+0x954>)
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	4970      	ldr	r1, [pc, #448]	; (800229c <Screens_init+0x958>)
 80020da:	6889      	ldr	r1, [r1, #8]
 80020dc:	9102      	str	r1, [sp, #8]
 80020de:	9201      	str	r2, [sp, #4]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	23b4      	movs	r3, #180	; 0xb4
 80020e4:	f44f 7202 	mov.w	r2, #520	; 0x208
 80020e8:	2103      	movs	r1, #3
 80020ea:	4873      	ldr	r0, [pc, #460]	; (80022b8 <Screens_init+0x974>)
 80020ec:	f003 f83c 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("м3", 						 	 		 2, 720, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 80020f0:	4b68      	ldr	r3, [pc, #416]	; (8002294 <Screens_init+0x950>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a68      	ldr	r2, [pc, #416]	; (8002298 <Screens_init+0x954>)
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4968      	ldr	r1, [pc, #416]	; (800229c <Screens_init+0x958>)
 80020fa:	6889      	ldr	r1, [r1, #8]
 80020fc:	9102      	str	r1, [sp, #8]
 80020fe:	9201      	str	r2, [sp, #4]
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	23b4      	movs	r3, #180	; 0xb4
 8002104:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002108:	2102      	movs	r1, #2
 800210a:	486c      	ldr	r0, [pc, #432]	; (80022bc <Screens_init+0x978>)
 800210c:	f003 f82c 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 		 3, 520, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 8002110:	4b60      	ldr	r3, [pc, #384]	; (8002294 <Screens_init+0x950>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a60      	ldr	r2, [pc, #384]	; (8002298 <Screens_init+0x954>)
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4960      	ldr	r1, [pc, #384]	; (800229c <Screens_init+0x958>)
 800211a:	6889      	ldr	r1, [r1, #8]
 800211c:	9102      	str	r1, [sp, #8]
 800211e:	9201      	str	r2, [sp, #4]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002126:	f44f 7202 	mov.w	r2, #520	; 0x208
 800212a:	2103      	movs	r1, #3
 800212c:	4862      	ldr	r0, [pc, #392]	; (80022b8 <Screens_init+0x974>)
 800212e:	f003 f81b 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("м3", 						 	 		 2, 720, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 8002132:	4b58      	ldr	r3, [pc, #352]	; (8002294 <Screens_init+0x950>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a58      	ldr	r2, [pc, #352]	; (8002298 <Screens_init+0x954>)
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	4958      	ldr	r1, [pc, #352]	; (800229c <Screens_init+0x958>)
 800213c:	6889      	ldr	r1, [r1, #8]
 800213e:	9102      	str	r1, [sp, #8]
 8002140:	9201      	str	r2, [sp, #4]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002148:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800214c:	2102      	movs	r1, #2
 800214e:	485b      	ldr	r0, [pc, #364]	; (80022bc <Screens_init+0x978>)
 8002150:	f003 f80a 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 		 3, 720, 300, BackgroundColor, BasicSymbolColor, Page[2]);
 8002154:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <Screens_init+0x950>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a4f      	ldr	r2, [pc, #316]	; (8002298 <Screens_init+0x954>)
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	494f      	ldr	r1, [pc, #316]	; (800229c <Screens_init+0x958>)
 800215e:	6889      	ldr	r1, [r1, #8]
 8002160:	9102      	str	r1, [sp, #8]
 8002162:	9201      	str	r2, [sp, #4]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800216a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800216e:	2103      	movs	r1, #3
 8002170:	4853      	ldr	r0, [pc, #332]	; (80022c0 <Screens_init+0x97c>)
 8002172:	f002 fff9 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 		 3, 720, 330, BackgroundColor, BasicSymbolColor, Page[2]);
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <Screens_init+0x950>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a47      	ldr	r2, [pc, #284]	; (8002298 <Screens_init+0x954>)
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	4947      	ldr	r1, [pc, #284]	; (800229c <Screens_init+0x958>)
 8002180:	6889      	ldr	r1, [r1, #8]
 8002182:	9102      	str	r1, [sp, #8]
 8002184:	9201      	str	r2, [sp, #4]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800218c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002190:	2103      	movs	r1, #3
 8002192:	484b      	ldr	r0, [pc, #300]	; (80022c0 <Screens_init+0x97c>)
 8002194:	f002 ffe8 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>

	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560,  90, BackgroundColor, BasicSymbolColor, Page[2]);
 8002198:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <Screens_init+0x950>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a3e      	ldr	r2, [pc, #248]	; (8002298 <Screens_init+0x954>)
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	493e      	ldr	r1, [pc, #248]	; (800229c <Screens_init+0x958>)
 80021a2:	6889      	ldr	r1, [r1, #8]
 80021a4:	9102      	str	r1, [sp, #8]
 80021a6:	9201      	str	r2, [sp, #4]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	235a      	movs	r3, #90	; 0x5a
 80021ac:	f44f 720c 	mov.w	r2, #560	; 0x230
 80021b0:	2106      	movs	r1, #6
 80021b2:	4844      	ldr	r0, [pc, #272]	; (80022c4 <Screens_init+0x980>)
 80021b4:	f002 ffd8 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560, 120, BackgroundColor, BasicSymbolColor, Page[2]);
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <Screens_init+0x950>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a36      	ldr	r2, [pc, #216]	; (8002298 <Screens_init+0x954>)
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	4936      	ldr	r1, [pc, #216]	; (800229c <Screens_init+0x958>)
 80021c2:	6889      	ldr	r1, [r1, #8]
 80021c4:	9102      	str	r1, [sp, #8]
 80021c6:	9201      	str	r2, [sp, #4]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2378      	movs	r3, #120	; 0x78
 80021cc:	f44f 720c 	mov.w	r2, #560	; 0x230
 80021d0:	2106      	movs	r1, #6
 80021d2:	483c      	ldr	r0, [pc, #240]	; (80022c4 <Screens_init+0x980>)
 80021d4:	f002 ffc8 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560, 150, BackgroundColor, BasicSymbolColor, Page[2]);
 80021d8:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <Screens_init+0x950>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <Screens_init+0x954>)
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	492e      	ldr	r1, [pc, #184]	; (800229c <Screens_init+0x958>)
 80021e2:	6889      	ldr	r1, [r1, #8]
 80021e4:	9102      	str	r1, [sp, #8]
 80021e6:	9201      	str	r2, [sp, #4]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2396      	movs	r3, #150	; 0x96
 80021ec:	f44f 720c 	mov.w	r2, #560	; 0x230
 80021f0:	2106      	movs	r1, #6
 80021f2:	4834      	ldr	r0, [pc, #208]	; (80022c4 <Screens_init+0x980>)
 80021f4:	f002 ffb8 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>

	// Экран_3 (пароль)
	Zaliv(BackgroundColor, Page[3], 800, 480);
 80021f8:	4b26      	ldr	r3, [pc, #152]	; (8002294 <Screens_init+0x950>)
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <Screens_init+0x958>)
 80021fe:	68d9      	ldr	r1, [r3, #12]
 8002200:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002204:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002208:	f004 f8fa 	bl	8006400 <Zaliv>
	if(Control_DB.RazrPointer > 4){Control_DB.RazrPointer = 4;}
 800220c:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <Screens_init+0x984>)
 800220e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002212:	2b04      	cmp	r3, #4
 8002214:	dd02      	ble.n	800221c <Screens_init+0x8d8>
 8002216:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <Screens_init+0x984>)
 8002218:	2204      	movs	r2, #4
 800221a:	805a      	strh	r2, [r3, #2]


	// Экран 4
	Zaliv(BackgroundColor, Page[4], 800, 480);
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <Screens_init+0x950>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <Screens_init+0x958>)
 8002222:	6919      	ldr	r1, [r3, #16]
 8002224:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002228:	f44f 7248 	mov.w	r2, #800	; 0x320
 800222c:	f004 f8e8 	bl	8006400 <Zaliv>
	Short_Centred_RU_DrawString_32("Настройки станции насосной", 26, 400, 15, BackgroundColor, BasicSymbolColor, Page[4]);
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <Screens_init+0x950>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a18      	ldr	r2, [pc, #96]	; (8002298 <Screens_init+0x954>)
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	4918      	ldr	r1, [pc, #96]	; (800229c <Screens_init+0x958>)
 800223a:	6909      	ldr	r1, [r1, #16]
 800223c:	9102      	str	r1, [sp, #8]
 800223e:	9201      	str	r2, [sp, #4]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	230f      	movs	r3, #15
 8002244:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002248:	211a      	movs	r1, #26
 800224a:	4820      	ldr	r0, [pc, #128]	; (80022cc <Screens_init+0x988>)
 800224c:	f003 f8aa 	bl	80053a4 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[4], 800, 480);
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <Screens_init+0x958>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002258:	9203      	str	r2, [sp, #12]
 800225a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800225e:	9202      	str	r2, [sp, #8]
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	2303      	movs	r3, #3
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	f44f 7348 	mov.w	r3, #800	; 0x320
 800226a:	221e      	movs	r2, #30
 800226c:	2100      	movs	r1, #0
 800226e:	2000      	movs	r0, #0
 8002270:	f004 f8f2 	bl	8006458 <Draw_Rectangle>




	// Экран 20 (Авария)
	Zaliv(RedColor, Page[20], 800, 480);
 8002274:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <Screens_init+0x98c>)
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <Screens_init+0x958>)
 800227a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800227c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002280:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002284:	f004 f8bc 	bl	8006400 <Zaliv>
	Short_Centred_RU_DrawString_32("Активные аварийные сообщения", 28, 400, 15, RedColor, BasicSymbolColor, Page[20]);
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <Screens_init+0x98c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a02      	ldr	r2, [pc, #8]	; (8002298 <Screens_init+0x954>)
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	e020      	b.n	80022d4 <Screens_init+0x990>
 8002292:	bf00      	nop
 8002294:	20000008 	.word	0x20000008
 8002298:	200009e8 	.word	0x200009e8
 800229c:	20000974 	.word	0x20000974
 80022a0:	0800bae8 	.word	0x0800bae8
 80022a4:	0800bb14 	.word	0x0800bb14
 80022a8:	0800bb3c 	.word	0x0800bb3c
 80022ac:	0800bb58 	.word	0x0800bb58
 80022b0:	0800bb90 	.word	0x0800bb90
 80022b4:	0800bbc8 	.word	0x0800bbc8
 80022b8:	0800ba44 	.word	0x0800ba44
 80022bc:	0800bbe8 	.word	0x0800bbe8
 80022c0:	0800b8ec 	.word	0x0800b8ec
 80022c4:	0800bbec 	.word	0x0800bbec
 80022c8:	20000a1c 	.word	0x20000a1c
 80022cc:	0800bbf8 	.word	0x0800bbf8
 80022d0:	20000000 	.word	0x20000000
 80022d4:	4926      	ldr	r1, [pc, #152]	; (8002370 <Screens_init+0xa2c>)
 80022d6:	6d09      	ldr	r1, [r1, #80]	; 0x50
 80022d8:	9102      	str	r1, [sp, #8]
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	230f      	movs	r3, #15
 80022e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80022e4:	211c      	movs	r1, #28
 80022e6:	4823      	ldr	r0, [pc, #140]	; (8002374 <Screens_init+0xa30>)
 80022e8:	f003 f85c 	bl	80053a4 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[20], 800, 480);
 80022ec:	4b20      	ldr	r3, [pc, #128]	; (8002370 <Screens_init+0xa2c>)
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80022f4:	9203      	str	r2, [sp, #12]
 80022f6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80022fa:	9202      	str	r2, [sp, #8]
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	2303      	movs	r3, #3
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002306:	221e      	movs	r2, #30
 8002308:	2100      	movs	r1, #0
 800230a:	2000      	movs	r0, #0
 800230c:	f004 f8a4 	bl	8006458 <Draw_Rectangle>


	// Экран_21 (сетевуха)
	Zaliv(BackgroundColor, Page[21], 800, 480);
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <Screens_init+0xa34>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <Screens_init+0xa2c>)
 8002316:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002318:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800231c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002320:	f004 f86e 	bl	8006400 <Zaliv>
	Short_Centred_RU_DrawString_32("настройки пульта", 16, 400, 15, BackgroundColor, BasicSymbolColor, Page[21]);
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <Screens_init+0xa34>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <Screens_init+0xa38>)
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	4910      	ldr	r1, [pc, #64]	; (8002370 <Screens_init+0xa2c>)
 800232e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002330:	9102      	str	r1, [sp, #8]
 8002332:	9201      	str	r2, [sp, #4]
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	230f      	movs	r3, #15
 8002338:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800233c:	2110      	movs	r1, #16
 800233e:	4810      	ldr	r0, [pc, #64]	; (8002380 <Screens_init+0xa3c>)
 8002340:	f003 f830 	bl	80053a4 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[21], 800, 480);
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <Screens_init+0xa2c>)
 8002346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002348:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800234c:	9203      	str	r2, [sp, #12]
 800234e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002352:	9202      	str	r2, [sp, #8]
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	2303      	movs	r3, #3
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800235e:	221e      	movs	r2, #30
 8002360:	2100      	movs	r1, #0
 8002362:	2000      	movs	r0, #0
 8002364:	f004 f878 	bl	8006458 <Draw_Rectangle>


}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000974 	.word	0x20000974
 8002374:	0800bc2c 	.word	0x0800bc2c
 8002378:	20000008 	.word	0x20000008
 800237c:	200009e8 	.word	0x200009e8
 8002380:	0800bc64 	.word	0x0800bc64

08002384 <Set_Screen>:
int16_t pass_false = 0;



void Set_Screen(uint8_t screen)
{
 8002384:	b5b0      	push	{r4, r5, r7, lr}
 8002386:	b092      	sub	sp, #72	; 0x48
 8002388:	af0c      	add	r7, sp, #48	; 0x30
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < 20;i++)
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e016      	b.n	80023c2 <Set_Screen+0x3e>
	{
		if(i == Control_DB.MenuPointer) {FonColor[i] = SelectionColor;}
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <Set_Screen+0xb0>)
 8002396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239a:	461a      	mov	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	4293      	cmp	r3, r2
 80023a0:	d106      	bne.n	80023b0 <Set_Screen+0x2c>
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <Set_Screen+0xb4>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4925      	ldr	r1, [pc, #148]	; (800243c <Set_Screen+0xb8>)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80023ae:	e005      	b.n	80023bc <Set_Screen+0x38>
		else {FonColor[i] = BackgroundColor;}
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <Set_Screen+0xbc>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4921      	ldr	r1, [pc, #132]	; (800243c <Set_Screen+0xb8>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 20;i++)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b13      	cmp	r3, #19
 80023c6:	dde5      	ble.n	8002394 <Set_Screen+0x10>
	}

	switch(screen)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	2b14      	cmp	r3, #20
 80023ce:	f200 87aa 	bhi.w	8003326 <Set_Screen+0xfa2>
 80023d2:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <Set_Screen+0x54>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	0800242d 	.word	0x0800242d
 80023dc:	08002845 	.word	0x08002845
 80023e0:	08002baf 	.word	0x08002baf
 80023e4:	08002c77 	.word	0x08002c77
 80023e8:	08003327 	.word	0x08003327
 80023ec:	08003327 	.word	0x08003327
 80023f0:	08003327 	.word	0x08003327
 80023f4:	08003327 	.word	0x08003327
 80023f8:	08003327 	.word	0x08003327
 80023fc:	08003327 	.word	0x08003327
 8002400:	08003327 	.word	0x08003327
 8002404:	08003327 	.word	0x08003327
 8002408:	08003327 	.word	0x08003327
 800240c:	08003327 	.word	0x08003327
 8002410:	08003327 	.word	0x08003327
 8002414:	08003327 	.word	0x08003327
 8002418:	08003327 	.word	0x08003327
 800241c:	08003327 	.word	0x08003327
 8002420:	08003327 	.word	0x08003327
 8002424:	08003327 	.word	0x08003327
 8002428:	080030b5 	.word	0x080030b5
	{

		case 1:

			for(int i = 0; i < 3; i++)
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	e09f      	b.n	8002572 <Set_Screen+0x1ee>
 8002432:	bf00      	nop
 8002434:	20000a1c 	.word	0x20000a1c
 8002438:	20000010 	.word	0x20000010
 800243c:	200000b0 	.word	0x200000b0
 8002440:	20000008 	.word	0x20000008
			{
				uint16_t shift_X = i * 260 + 7;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	0192      	lsls	r2, r2, #6
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	b29b      	uxth	r3, r3
 8002452:	3307      	adds	r3, #7
 8002454:	81fb      	strh	r3, [r7, #14]

				Short_Left_Colored_RU_DrawString_32("   Вкл   ", 		  9,  95 + shift_X,  20,      GreenColor, BasicSymbolColor, Page[1]);
 8002456:	89fb      	ldrh	r3, [r7, #14]
 8002458:	335f      	adds	r3, #95	; 0x5f
 800245a:	b298      	uxth	r0, r3
 800245c:	4ba9      	ldr	r3, [pc, #676]	; (8002704 <Set_Screen+0x380>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4aa9      	ldr	r2, [pc, #676]	; (8002708 <Set_Screen+0x384>)
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	49a9      	ldr	r1, [pc, #676]	; (800270c <Set_Screen+0x388>)
 8002466:	6849      	ldr	r1, [r1, #4]
 8002468:	9102      	str	r1, [sp, #8]
 800246a:	9201      	str	r2, [sp, #4]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2314      	movs	r3, #20
 8002470:	4602      	mov	r2, r0
 8002472:	2109      	movs	r1, #9
 8002474:	48a6      	ldr	r0, [pc, #664]	; (8002710 <Set_Screen+0x38c>)
 8002476:	f002 fe77 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Short_Centred_DrawNumber_16(Val3, 1, 4, 0, 					 170 + shift_X,  52, 									Page[1]);
 800247a:	4ba6      	ldr	r3, [pc, #664]	; (8002714 <Set_Screen+0x390>)
 800247c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	33aa      	adds	r3, #170	; 0xaa
 8002484:	b29b      	uxth	r3, r3
 8002486:	4aa1      	ldr	r2, [pc, #644]	; (800270c <Set_Screen+0x388>)
 8002488:	6852      	ldr	r2, [r2, #4]
 800248a:	9202      	str	r2, [sp, #8]
 800248c:	2234      	movs	r2, #52	; 0x34
 800248e:	9201      	str	r2, [sp, #4]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2300      	movs	r3, #0
 8002494:	2204      	movs	r2, #4
 8002496:	2101      	movs	r1, #1
 8002498:	f003 fe86 	bl	80061a8 <Short_Centred_DrawNumber_16>
				Short_Centred_DrawNumber_16(Val3, 2, 4, 0, 					 170 + shift_X,  82, 									Page[1]);
 800249c:	4b9d      	ldr	r3, [pc, #628]	; (8002714 <Set_Screen+0x390>)
 800249e:	f9b3 0000 	ldrsh.w	r0, [r3]
 80024a2:	89fb      	ldrh	r3, [r7, #14]
 80024a4:	33aa      	adds	r3, #170	; 0xaa
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	4a98      	ldr	r2, [pc, #608]	; (800270c <Set_Screen+0x388>)
 80024aa:	6852      	ldr	r2, [r2, #4]
 80024ac:	9202      	str	r2, [sp, #8]
 80024ae:	2252      	movs	r2, #82	; 0x52
 80024b0:	9201      	str	r2, [sp, #4]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2300      	movs	r3, #0
 80024b6:	2204      	movs	r2, #4
 80024b8:	2102      	movs	r1, #2
 80024ba:	f003 fe75 	bl	80061a8 <Short_Centred_DrawNumber_16>
				Short_Centred_DrawNumber_16(Val3, 0, 4, 0, 					 170 + shift_X, 112, 									Page[1]);
 80024be:	4b95      	ldr	r3, [pc, #596]	; (8002714 <Set_Screen+0x390>)
 80024c0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80024c4:	89fb      	ldrh	r3, [r7, #14]
 80024c6:	33aa      	adds	r3, #170	; 0xaa
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	4a90      	ldr	r2, [pc, #576]	; (800270c <Set_Screen+0x388>)
 80024cc:	6852      	ldr	r2, [r2, #4]
 80024ce:	9202      	str	r2, [sp, #8]
 80024d0:	2270      	movs	r2, #112	; 0x70
 80024d2:	9201      	str	r2, [sp, #4]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2300      	movs	r3, #0
 80024d8:	2204      	movs	r2, #4
 80024da:	2100      	movs	r1, #0
 80024dc:	f003 fe64 	bl	80061a8 <Short_Centred_DrawNumber_16>
				Short_Left_Colored_RU_DrawString_32("  РАЗГРУЗКА   ", 	 14,   5 + shift_X, 140, 		RedColor, BasicSymbolColor, Page[1]);
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	3305      	adds	r3, #5
 80024e4:	b298      	uxth	r0, r3
 80024e6:	4b8c      	ldr	r3, [pc, #560]	; (8002718 <Set_Screen+0x394>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a87      	ldr	r2, [pc, #540]	; (8002708 <Set_Screen+0x384>)
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	4987      	ldr	r1, [pc, #540]	; (800270c <Set_Screen+0x388>)
 80024f0:	6849      	ldr	r1, [r1, #4]
 80024f2:	9102      	str	r1, [sp, #8]
 80024f4:	9201      	str	r2, [sp, #4]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	238c      	movs	r3, #140	; 0x8c
 80024fa:	4602      	mov	r2, r0
 80024fc:	210e      	movs	r1, #14
 80024fe:	4887      	ldr	r0, [pc, #540]	; (800271c <Set_Screen+0x398>)
 8002500:	f002 fe32 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("тепл. защита  ", 	 14,   5 + shift_X, 170, 		RedColor, BasicSymbolColor, Page[1]);
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	3305      	adds	r3, #5
 8002508:	b298      	uxth	r0, r3
 800250a:	4b83      	ldr	r3, [pc, #524]	; (8002718 <Set_Screen+0x394>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7e      	ldr	r2, [pc, #504]	; (8002708 <Set_Screen+0x384>)
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	497e      	ldr	r1, [pc, #504]	; (800270c <Set_Screen+0x388>)
 8002514:	6849      	ldr	r1, [r1, #4]
 8002516:	9102      	str	r1, [sp, #8]
 8002518:	9201      	str	r2, [sp, #4]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	23aa      	movs	r3, #170	; 0xaa
 800251e:	4602      	mov	r2, r0
 8002520:	210e      	movs	r1, #14
 8002522:	487f      	ldr	r0, [pc, #508]	; (8002720 <Set_Screen+0x39c>)
 8002524:	f002 fe20 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 200 + shift_X, 205, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002528:	4b7e      	ldr	r3, [pc, #504]	; (8002724 <Set_Screen+0x3a0>)
 800252a:	681c      	ldr	r4, [r3, #0]
 800252c:	89fb      	ldrh	r3, [r7, #14]
 800252e:	33c8      	adds	r3, #200	; 0xc8
 8002530:	4a76      	ldr	r2, [pc, #472]	; (800270c <Set_Screen+0x388>)
 8002532:	6852      	ldr	r2, [r2, #4]
 8002534:	497c      	ldr	r1, [pc, #496]	; (8002728 <Set_Screen+0x3a4>)
 8002536:	6809      	ldr	r1, [r1, #0]
 8002538:	4873      	ldr	r0, [pc, #460]	; (8002708 <Set_Screen+0x384>)
 800253a:	6800      	ldr	r0, [r0, #0]
 800253c:	2512      	movs	r5, #18
 800253e:	9509      	str	r5, [sp, #36]	; 0x24
 8002540:	250b      	movs	r5, #11
 8002542:	9508      	str	r5, [sp, #32]
 8002544:	4d79      	ldr	r5, [pc, #484]	; (800272c <Set_Screen+0x3a8>)
 8002546:	9507      	str	r5, [sp, #28]
 8002548:	9006      	str	r0, [sp, #24]
 800254a:	9105      	str	r1, [sp, #20]
 800254c:	9204      	str	r2, [sp, #16]
 800254e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002552:	9203      	str	r2, [sp, #12]
 8002554:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002558:	9202      	str	r2, [sp, #8]
 800255a:	22cd      	movs	r2, #205	; 0xcd
 800255c:	9201      	str	r2, [sp, #4]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2300      	movs	r3, #0
 8002562:	220a      	movs	r2, #10
 8002564:	2100      	movs	r1, #0
 8002566:	4620      	mov	r0, r4
 8002568:	f003 f96c 	bl	8005844 <Centred_DrawNumber_16_32bit>
			for(int i = 0; i < 3; i++)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	3301      	adds	r3, #1
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b02      	cmp	r3, #2
 8002576:	f77f af65 	ble.w	8002444 <Set_Screen+0xc0>
			}

			Centred_DrawNumber_16(Val3, 0, 3, 0, 700, 270, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // Уставка
 800257a:	4b66      	ldr	r3, [pc, #408]	; (8002714 <Set_Screen+0x390>)
 800257c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002580:	4b62      	ldr	r3, [pc, #392]	; (800270c <Set_Screen+0x388>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a68      	ldr	r2, [pc, #416]	; (8002728 <Set_Screen+0x3a4>)
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	495f      	ldr	r1, [pc, #380]	; (8002708 <Set_Screen+0x384>)
 800258a:	6809      	ldr	r1, [r1, #0]
 800258c:	2419      	movs	r4, #25
 800258e:	9409      	str	r4, [sp, #36]	; 0x24
 8002590:	2410      	movs	r4, #16
 8002592:	9408      	str	r4, [sp, #32]
 8002594:	4c66      	ldr	r4, [pc, #408]	; (8002730 <Set_Screen+0x3ac>)
 8002596:	9407      	str	r4, [sp, #28]
 8002598:	9106      	str	r1, [sp, #24]
 800259a:	9205      	str	r2, [sp, #20]
 800259c:	9304      	str	r3, [sp, #16]
 800259e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80025a2:	9303      	str	r3, [sp, #12]
 80025a4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2300      	movs	r3, #0
 80025b8:	2203      	movs	r2, #3
 80025ba:	2100      	movs	r1, #0
 80025bc:	f002 ff1e 	bl	80053fc <Centred_DrawNumber_16>
			Centred_DrawNumber_16(Val3, 0, 3, 0, 700, 330, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // уровень бак
 80025c0:	4b54      	ldr	r3, [pc, #336]	; (8002714 <Set_Screen+0x390>)
 80025c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80025c6:	4b51      	ldr	r3, [pc, #324]	; (800270c <Set_Screen+0x388>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a57      	ldr	r2, [pc, #348]	; (8002728 <Set_Screen+0x3a4>)
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	494e      	ldr	r1, [pc, #312]	; (8002708 <Set_Screen+0x384>)
 80025d0:	6809      	ldr	r1, [r1, #0]
 80025d2:	2419      	movs	r4, #25
 80025d4:	9409      	str	r4, [sp, #36]	; 0x24
 80025d6:	2410      	movs	r4, #16
 80025d8:	9408      	str	r4, [sp, #32]
 80025da:	4c55      	ldr	r4, [pc, #340]	; (8002730 <Set_Screen+0x3ac>)
 80025dc:	9407      	str	r4, [sp, #28]
 80025de:	9106      	str	r1, [sp, #24]
 80025e0:	9205      	str	r2, [sp, #20]
 80025e2:	9304      	str	r3, [sp, #16]
 80025e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80025e8:	9303      	str	r3, [sp, #12]
 80025ea:	f44f 7348 	mov.w	r3, #800	; 0x320
 80025ee:	9302      	str	r3, [sp, #8]
 80025f0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2300      	movs	r3, #0
 80025fe:	2203      	movs	r2, #3
 8002600:	2100      	movs	r1, #0
 8002602:	f002 fefb 	bl	80053fc <Centred_DrawNumber_16>
			Centred_DrawNumber_16(Val3, 0, 3, 0, 700, 390, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // температура бак
 8002606:	4b43      	ldr	r3, [pc, #268]	; (8002714 <Set_Screen+0x390>)
 8002608:	f9b3 0000 	ldrsh.w	r0, [r3]
 800260c:	4b3f      	ldr	r3, [pc, #252]	; (800270c <Set_Screen+0x388>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a45      	ldr	r2, [pc, #276]	; (8002728 <Set_Screen+0x3a4>)
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	493c      	ldr	r1, [pc, #240]	; (8002708 <Set_Screen+0x384>)
 8002616:	6809      	ldr	r1, [r1, #0]
 8002618:	2419      	movs	r4, #25
 800261a:	9409      	str	r4, [sp, #36]	; 0x24
 800261c:	2410      	movs	r4, #16
 800261e:	9408      	str	r4, [sp, #32]
 8002620:	4c43      	ldr	r4, [pc, #268]	; (8002730 <Set_Screen+0x3ac>)
 8002622:	9407      	str	r4, [sp, #28]
 8002624:	9106      	str	r1, [sp, #24]
 8002626:	9205      	str	r2, [sp, #20]
 8002628:	9304      	str	r3, [sp, #16]
 800262a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800262e:	9303      	str	r3, [sp, #12]
 8002630:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002634:	9302      	str	r3, [sp, #8]
 8002636:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	2203      	movs	r2, #3
 8002646:	2100      	movs	r1, #0
 8002648:	f002 fed8 	bl	80053fc <Centred_DrawNumber_16>

			Short_Centred_DrawNumber_16(Val3, 1, 4, 0, 					 			550, 242, 									 Page[1]); // давл в магистрали
 800264c:	4b31      	ldr	r3, [pc, #196]	; (8002714 <Set_Screen+0x390>)
 800264e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002652:	4b2e      	ldr	r3, [pc, #184]	; (800270c <Set_Screen+0x388>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	9302      	str	r3, [sp, #8]
 8002658:	23f2      	movs	r3, #242	; 0xf2
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	f240 2326 	movw	r3, #550	; 0x226
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2300      	movs	r3, #0
 8002664:	2204      	movs	r2, #4
 8002666:	2101      	movs	r1, #1
 8002668:	f003 fd9e 	bl	80061a8 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(Val3, 1, 4, 0, 					 			550, 272, 									 Page[1]); // перед сливным напорным фильтром
 800266c:	4b29      	ldr	r3, [pc, #164]	; (8002714 <Set_Screen+0x390>)
 800266e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002672:	4b26      	ldr	r3, [pc, #152]	; (800270c <Set_Screen+0x388>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	9302      	str	r3, [sp, #8]
 8002678:	f44f 7388 	mov.w	r3, #272	; 0x110
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	f240 2326 	movw	r3, #550	; 0x226
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2300      	movs	r3, #0
 8002686:	2204      	movs	r2, #4
 8002688:	2101      	movs	r1, #1
 800268a:	f003 fd8d 	bl	80061a8 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(Val3, 1, 4, 0, 					 			330, 302, 									 Page[1]); // перед сливным фильтром
 800268e:	4b21      	ldr	r3, [pc, #132]	; (8002714 <Set_Screen+0x390>)
 8002690:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <Set_Screen+0x388>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	9302      	str	r3, [sp, #8]
 800269a:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	2204      	movs	r2, #4
 80026aa:	2101      	movs	r1, #1
 80026ac:	f003 fd7c 	bl	80061a8 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(Val3, 1, 4, 0, 					 			550, 302, 									 Page[1]); //    за сливным фильтром
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <Set_Screen+0x390>)
 80026b2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <Set_Screen+0x388>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	9302      	str	r3, [sp, #8]
 80026bc:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	f240 2326 	movw	r3, #550	; 0x226
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	2300      	movs	r3, #0
 80026ca:	2204      	movs	r2, #4
 80026cc:	2101      	movs	r1, #1
 80026ce:	f003 fd6b 	bl	80061a8 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(Val3, 1, 6, 0, 					 			310, 334, 									 Page[1]); // расход на сливном фильтре
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <Set_Screen+0x390>)
 80026d4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <Set_Screen+0x388>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	9302      	str	r3, [sp, #8]
 80026de:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	f44f 739b 	mov.w	r3, #310	; 0x136
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	2300      	movs	r3, #0
 80026ec:	2206      	movs	r2, #6
 80026ee:	2101      	movs	r1, #1
 80026f0:	f003 fd5a 	bl	80061a8 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(Val3, 1, 6, 0, 					 	 		530, 334, 									 Page[1]); // расход эмульсии
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <Set_Screen+0x390>)
 80026f6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <Set_Screen+0x388>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	9302      	str	r3, [sp, #8]
 8002700:	e018      	b.n	8002734 <Set_Screen+0x3b0>
 8002702:	bf00      	nop
 8002704:	20000004 	.word	0x20000004
 8002708:	200009e8 	.word	0x200009e8
 800270c:	20000974 	.word	0x20000974
 8002710:	0800b928 	.word	0x0800b928
 8002714:	20000018 	.word	0x20000018
 8002718:	20000000 	.word	0x20000000
 800271c:	0800b938 	.word	0x0800b938
 8002720:	0800b950 	.word	0x0800b950
 8002724:	2000001c 	.word	0x2000001c
 8002728:	20000008 	.word	0x20000008
 800272c:	0800e8c8 	.word	0x0800e8c8
 8002730:	0800f624 	.word	0x0800f624
 8002734:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	f240 2312 	movw	r3, #530	; 0x212
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	2300      	movs	r3, #0
 8002742:	2206      	movs	r2, #6
 8002744:	2101      	movs	r1, #1
 8002746:	f003 fd2f 	bl	80061a8 <Short_Centred_DrawNumber_16>
			Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 			340, 364, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18); // прокачаный объём на сливном фильтре
 800274a:	4b35      	ldr	r3, [pc, #212]	; (8002820 <Set_Screen+0x49c>)
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	4b35      	ldr	r3, [pc, #212]	; (8002824 <Set_Screen+0x4a0>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4a35      	ldr	r2, [pc, #212]	; (8002828 <Set_Screen+0x4a4>)
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	4935      	ldr	r1, [pc, #212]	; (800282c <Set_Screen+0x4a8>)
 8002758:	6809      	ldr	r1, [r1, #0]
 800275a:	2412      	movs	r4, #18
 800275c:	9409      	str	r4, [sp, #36]	; 0x24
 800275e:	240b      	movs	r4, #11
 8002760:	9408      	str	r4, [sp, #32]
 8002762:	4c33      	ldr	r4, [pc, #204]	; (8002830 <Set_Screen+0x4ac>)
 8002764:	9407      	str	r4, [sp, #28]
 8002766:	9106      	str	r1, [sp, #24]
 8002768:	9205      	str	r2, [sp, #20]
 800276a:	9304      	str	r3, [sp, #16]
 800276c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002770:	9303      	str	r3, [sp, #12]
 8002772:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2300      	movs	r3, #0
 8002786:	220a      	movs	r2, #10
 8002788:	2100      	movs	r1, #0
 800278a:	f003 f85b 	bl	8005844 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 			560, 364, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18); // прокачаный объём эмульсии
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <Set_Screen+0x49c>)
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <Set_Screen+0x4a0>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4a24      	ldr	r2, [pc, #144]	; (8002828 <Set_Screen+0x4a4>)
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4924      	ldr	r1, [pc, #144]	; (800282c <Set_Screen+0x4a8>)
 800279c:	6809      	ldr	r1, [r1, #0]
 800279e:	2412      	movs	r4, #18
 80027a0:	9409      	str	r4, [sp, #36]	; 0x24
 80027a2:	240b      	movs	r4, #11
 80027a4:	9408      	str	r4, [sp, #32]
 80027a6:	4c22      	ldr	r4, [pc, #136]	; (8002830 <Set_Screen+0x4ac>)
 80027a8:	9407      	str	r4, [sp, #28]
 80027aa:	9106      	str	r1, [sp, #24]
 80027ac:	9205      	str	r2, [sp, #20]
 80027ae:	9304      	str	r3, [sp, #16]
 80027b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80027b4:	9303      	str	r3, [sp, #12]
 80027b6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80027ba:	9302      	str	r3, [sp, #8]
 80027bc:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	220a      	movs	r2, #10
 80027cc:	2100      	movs	r1, #0
 80027ce:	f003 f839 	bl	8005844 <Centred_DrawNumber_16_32bit>
			Short_Left_Colored_RU_DrawString_32("кл.промыв.1", 	 11,   				 90, 400, 		 RedColor, BasicSymbolColor, Page[1]);
 80027d2:	4b18      	ldr	r3, [pc, #96]	; (8002834 <Set_Screen+0x4b0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a15      	ldr	r2, [pc, #84]	; (800282c <Set_Screen+0x4a8>)
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	4912      	ldr	r1, [pc, #72]	; (8002824 <Set_Screen+0x4a0>)
 80027dc:	6849      	ldr	r1, [r1, #4]
 80027de:	9102      	str	r1, [sp, #8]
 80027e0:	9201      	str	r2, [sp, #4]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80027e8:	225a      	movs	r2, #90	; 0x5a
 80027ea:	210b      	movs	r1, #11
 80027ec:	4812      	ldr	r0, [pc, #72]	; (8002838 <Set_Screen+0x4b4>)
 80027ee:	f002 fcbb 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("кл.промыв.2", 	 11,   				340, 400, 		 RedColor, BasicSymbolColor, Page[1]);
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <Set_Screen+0x4b0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a0d      	ldr	r2, [pc, #52]	; (800282c <Set_Screen+0x4a8>)
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	490a      	ldr	r1, [pc, #40]	; (8002824 <Set_Screen+0x4a0>)
 80027fc:	6849      	ldr	r1, [r1, #4]
 80027fe:	9102      	str	r1, [sp, #8]
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002808:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800280c:	210b      	movs	r1, #11
 800280e:	480b      	ldr	r0, [pc, #44]	; (800283c <Set_Screen+0x4b8>)
 8002810:	f002 fcaa 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>

			Control_DB.RazrPointer 	= 0;
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <Set_Screen+0x4bc>)
 8002816:	2200      	movs	r2, #0
 8002818:	805a      	strh	r2, [r3, #2]

		break;
 800281a:	f000 bd84 	b.w	8003326 <Set_Screen+0xfa2>
 800281e:	bf00      	nop
 8002820:	2000001c 	.word	0x2000001c
 8002824:	20000974 	.word	0x20000974
 8002828:	20000008 	.word	0x20000008
 800282c:	200009e8 	.word	0x200009e8
 8002830:	0800e8c8 	.word	0x0800e8c8
 8002834:	20000000 	.word	0x20000000
 8002838:	0800bc84 	.word	0x0800bc84
 800283c:	0800bc98 	.word	0x0800bc98
 8002840:	20000a1c 	.word	0x20000a1c

		case 2:

			Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 					730,  94, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002844:	4ba3      	ldr	r3, [pc, #652]	; (8002ad4 <Set_Screen+0x750>)
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	4ba3      	ldr	r3, [pc, #652]	; (8002ad8 <Set_Screen+0x754>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4aa3      	ldr	r2, [pc, #652]	; (8002adc <Set_Screen+0x758>)
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	49a3      	ldr	r1, [pc, #652]	; (8002ae0 <Set_Screen+0x75c>)
 8002852:	6809      	ldr	r1, [r1, #0]
 8002854:	2412      	movs	r4, #18
 8002856:	9409      	str	r4, [sp, #36]	; 0x24
 8002858:	240b      	movs	r4, #11
 800285a:	9408      	str	r4, [sp, #32]
 800285c:	4ca1      	ldr	r4, [pc, #644]	; (8002ae4 <Set_Screen+0x760>)
 800285e:	9407      	str	r4, [sp, #28]
 8002860:	9106      	str	r1, [sp, #24]
 8002862:	9205      	str	r2, [sp, #20]
 8002864:	9304      	str	r3, [sp, #16]
 8002866:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800286a:	9303      	str	r3, [sp, #12]
 800286c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	235e      	movs	r3, #94	; 0x5e
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	f240 23da 	movw	r3, #730	; 0x2da
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2300      	movs	r3, #0
 800287e:	220a      	movs	r2, #10
 8002880:	2100      	movs	r1, #0
 8002882:	f002 ffdf 	bl	8005844 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 					730, 124, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002886:	4b93      	ldr	r3, [pc, #588]	; (8002ad4 <Set_Screen+0x750>)
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	4b93      	ldr	r3, [pc, #588]	; (8002ad8 <Set_Screen+0x754>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4a93      	ldr	r2, [pc, #588]	; (8002adc <Set_Screen+0x758>)
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	4993      	ldr	r1, [pc, #588]	; (8002ae0 <Set_Screen+0x75c>)
 8002894:	6809      	ldr	r1, [r1, #0]
 8002896:	2412      	movs	r4, #18
 8002898:	9409      	str	r4, [sp, #36]	; 0x24
 800289a:	240b      	movs	r4, #11
 800289c:	9408      	str	r4, [sp, #32]
 800289e:	4c91      	ldr	r4, [pc, #580]	; (8002ae4 <Set_Screen+0x760>)
 80028a0:	9407      	str	r4, [sp, #28]
 80028a2:	9106      	str	r1, [sp, #24]
 80028a4:	9205      	str	r2, [sp, #20]
 80028a6:	9304      	str	r3, [sp, #16]
 80028a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80028ac:	9303      	str	r3, [sp, #12]
 80028ae:	f44f 7348 	mov.w	r3, #800	; 0x320
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	237c      	movs	r3, #124	; 0x7c
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	f240 23da 	movw	r3, #730	; 0x2da
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	220a      	movs	r2, #10
 80028c2:	2100      	movs	r1, #0
 80028c4:	f002 ffbe 	bl	8005844 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 					730, 154, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80028c8:	4b82      	ldr	r3, [pc, #520]	; (8002ad4 <Set_Screen+0x750>)
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	4b82      	ldr	r3, [pc, #520]	; (8002ad8 <Set_Screen+0x754>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a82      	ldr	r2, [pc, #520]	; (8002adc <Set_Screen+0x758>)
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	4982      	ldr	r1, [pc, #520]	; (8002ae0 <Set_Screen+0x75c>)
 80028d6:	6809      	ldr	r1, [r1, #0]
 80028d8:	2412      	movs	r4, #18
 80028da:	9409      	str	r4, [sp, #36]	; 0x24
 80028dc:	240b      	movs	r4, #11
 80028de:	9408      	str	r4, [sp, #32]
 80028e0:	4c80      	ldr	r4, [pc, #512]	; (8002ae4 <Set_Screen+0x760>)
 80028e2:	9407      	str	r4, [sp, #28]
 80028e4:	9106      	str	r1, [sp, #24]
 80028e6:	9205      	str	r2, [sp, #20]
 80028e8:	9304      	str	r3, [sp, #16]
 80028ea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80028ee:	9303      	str	r3, [sp, #12]
 80028f0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	239a      	movs	r3, #154	; 0x9a
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	f240 23da 	movw	r3, #730	; 0x2da
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2300      	movs	r3, #0
 8002902:	220a      	movs	r2, #10
 8002904:	2100      	movs	r1, #0
 8002906:	f002 ff9d 	bl	8005844 <Centred_DrawNumber_16_32bit>

			Short_Left_Colored_RU_DrawString_32("Насос циркуляционный ", 				21,  10,  90,        RedColor, BasicSymbolColor, Page[2]);
 800290a:	4b77      	ldr	r3, [pc, #476]	; (8002ae8 <Set_Screen+0x764>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a74      	ldr	r2, [pc, #464]	; (8002ae0 <Set_Screen+0x75c>)
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	4971      	ldr	r1, [pc, #452]	; (8002ad8 <Set_Screen+0x754>)
 8002914:	6889      	ldr	r1, [r1, #8]
 8002916:	9102      	str	r1, [sp, #8]
 8002918:	9201      	str	r2, [sp, #4]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	235a      	movs	r3, #90	; 0x5a
 800291e:	220a      	movs	r2, #10
 8002920:	2115      	movs	r1, #21
 8002922:	4872      	ldr	r0, [pc, #456]	; (8002aec <Set_Screen+0x768>)
 8002924:	f002 fc20 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Насос концентрата    ", 				21,  10, 120,        RedColor, BasicSymbolColor, Page[2]);
 8002928:	4b6f      	ldr	r3, [pc, #444]	; (8002ae8 <Set_Screen+0x764>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a6c      	ldr	r2, [pc, #432]	; (8002ae0 <Set_Screen+0x75c>)
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	4969      	ldr	r1, [pc, #420]	; (8002ad8 <Set_Screen+0x754>)
 8002932:	6889      	ldr	r1, [r1, #8]
 8002934:	9102      	str	r1, [sp, #8]
 8002936:	9201      	str	r2, [sp, #4]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2378      	movs	r3, #120	; 0x78
 800293c:	220a      	movs	r2, #10
 800293e:	2115      	movs	r1, #21
 8002940:	486b      	ldr	r0, [pc, #428]	; (8002af0 <Set_Screen+0x76c>)
 8002942:	f002 fc11 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Насос закач.концентр.", 				21,  10, 150,        RedColor, BasicSymbolColor, Page[2]);
 8002946:	4b68      	ldr	r3, [pc, #416]	; (8002ae8 <Set_Screen+0x764>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a65      	ldr	r2, [pc, #404]	; (8002ae0 <Set_Screen+0x75c>)
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	4962      	ldr	r1, [pc, #392]	; (8002ad8 <Set_Screen+0x754>)
 8002950:	6889      	ldr	r1, [r1, #8]
 8002952:	9102      	str	r1, [sp, #8]
 8002954:	9201      	str	r2, [sp, #4]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2396      	movs	r3, #150	; 0x96
 800295a:	220a      	movs	r2, #10
 800295c:	2115      	movs	r1, #21
 800295e:	4865      	ldr	r0, [pc, #404]	; (8002af4 <Set_Screen+0x770>)
 8002960:	f002 fc02 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400,  90,        RedColor, BasicSymbolColor, Page[2]);
 8002964:	4b60      	ldr	r3, [pc, #384]	; (8002ae8 <Set_Screen+0x764>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a5d      	ldr	r2, [pc, #372]	; (8002ae0 <Set_Screen+0x75c>)
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	495a      	ldr	r1, [pc, #360]	; (8002ad8 <Set_Screen+0x754>)
 800296e:	6889      	ldr	r1, [r1, #8]
 8002970:	9102      	str	r1, [sp, #8]
 8002972:	9201      	str	r2, [sp, #4]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	235a      	movs	r3, #90	; 0x5a
 8002978:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800297c:	2108      	movs	r1, #8
 800297e:	485e      	ldr	r0, [pc, #376]	; (8002af8 <Set_Screen+0x774>)
 8002980:	f002 fbf2 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 120,        RedColor, BasicSymbolColor, Page[2]);
 8002984:	4b58      	ldr	r3, [pc, #352]	; (8002ae8 <Set_Screen+0x764>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a55      	ldr	r2, [pc, #340]	; (8002ae0 <Set_Screen+0x75c>)
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	4952      	ldr	r1, [pc, #328]	; (8002ad8 <Set_Screen+0x754>)
 800298e:	6889      	ldr	r1, [r1, #8]
 8002990:	9102      	str	r1, [sp, #8]
 8002992:	9201      	str	r2, [sp, #4]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2378      	movs	r3, #120	; 0x78
 8002998:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800299c:	2108      	movs	r1, #8
 800299e:	4856      	ldr	r0, [pc, #344]	; (8002af8 <Set_Screen+0x774>)
 80029a0:	f002 fbe2 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 150,        RedColor, BasicSymbolColor, Page[2]);
 80029a4:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <Set_Screen+0x764>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a4d      	ldr	r2, [pc, #308]	; (8002ae0 <Set_Screen+0x75c>)
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	494a      	ldr	r1, [pc, #296]	; (8002ad8 <Set_Screen+0x754>)
 80029ae:	6889      	ldr	r1, [r1, #8]
 80029b0:	9102      	str	r1, [sp, #8]
 80029b2:	9201      	str	r2, [sp, #4]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2396      	movs	r3, #150	; 0x96
 80029b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80029bc:	2108      	movs	r1, #8
 80029be:	484e      	ldr	r0, [pc, #312]	; (8002af8 <Set_Screen+0x774>)
 80029c0:	f002 fbd2 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>

			Short_Centred_DrawNumber_16(Val3, 1, 6, 0, 					 					470, 184, 									 Page[2]);
 80029c4:	4b4d      	ldr	r3, [pc, #308]	; (8002afc <Set_Screen+0x778>)
 80029c6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <Set_Screen+0x754>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	9302      	str	r3, [sp, #8]
 80029d0:	23b8      	movs	r3, #184	; 0xb8
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2300      	movs	r3, #0
 80029dc:	2206      	movs	r2, #6
 80029de:	2101      	movs	r1, #1
 80029e0:	f003 fbe2 	bl	80061a8 <Short_Centred_DrawNumber_16>
			Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 					650, 184, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80029e4:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <Set_Screen+0x750>)
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <Set_Screen+0x754>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a3b      	ldr	r2, [pc, #236]	; (8002adc <Set_Screen+0x758>)
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	493b      	ldr	r1, [pc, #236]	; (8002ae0 <Set_Screen+0x75c>)
 80029f2:	6809      	ldr	r1, [r1, #0]
 80029f4:	2412      	movs	r4, #18
 80029f6:	9409      	str	r4, [sp, #36]	; 0x24
 80029f8:	240b      	movs	r4, #11
 80029fa:	9408      	str	r4, [sp, #32]
 80029fc:	4c39      	ldr	r4, [pc, #228]	; (8002ae4 <Set_Screen+0x760>)
 80029fe:	9407      	str	r4, [sp, #28]
 8002a00:	9106      	str	r1, [sp, #24]
 8002a02:	9205      	str	r2, [sp, #20]
 8002a04:	9304      	str	r3, [sp, #16]
 8002a06:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002a0a:	9303      	str	r3, [sp, #12]
 8002a0c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002a10:	9302      	str	r3, [sp, #8]
 8002a12:	23b8      	movs	r3, #184	; 0xb8
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	f240 238a 	movw	r3, #650	; 0x28a
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	220a      	movs	r2, #10
 8002a20:	2100      	movs	r1, #0
 8002a22:	f002 ff0f 	bl	8005844 <Centred_DrawNumber_16_32bit>

			Short_Centred_DrawNumber_16(Val3, 1, 6, 0, 					 					470, 364, 									 Page[2]);
 8002a26:	4b35      	ldr	r3, [pc, #212]	; (8002afc <Set_Screen+0x778>)
 8002a28:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <Set_Screen+0x754>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	9302      	str	r3, [sp, #8]
 8002a32:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2206      	movs	r2, #6
 8002a42:	2101      	movs	r1, #1
 8002a44:	f003 fbb0 	bl	80061a8 <Short_Centred_DrawNumber_16>
			Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 					650, 364, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002a48:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <Set_Screen+0x750>)
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <Set_Screen+0x754>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a22      	ldr	r2, [pc, #136]	; (8002adc <Set_Screen+0x758>)
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	4922      	ldr	r1, [pc, #136]	; (8002ae0 <Set_Screen+0x75c>)
 8002a56:	6809      	ldr	r1, [r1, #0]
 8002a58:	2412      	movs	r4, #18
 8002a5a:	9409      	str	r4, [sp, #36]	; 0x24
 8002a5c:	240b      	movs	r4, #11
 8002a5e:	9408      	str	r4, [sp, #32]
 8002a60:	4c20      	ldr	r4, [pc, #128]	; (8002ae4 <Set_Screen+0x760>)
 8002a62:	9407      	str	r4, [sp, #28]
 8002a64:	9106      	str	r1, [sp, #24]
 8002a66:	9205      	str	r2, [sp, #20]
 8002a68:	9304      	str	r3, [sp, #16]
 8002a6a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002a6e:	9303      	str	r3, [sp, #12]
 8002a70:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002a74:	9302      	str	r3, [sp, #8]
 8002a76:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	f240 238a 	movw	r3, #650	; 0x28a
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2300      	movs	r3, #0
 8002a84:	220a      	movs	r2, #10
 8002a86:	2100      	movs	r1, #0
 8002a88:	f002 fedc 	bl	8005844 <Centred_DrawNumber_16_32bit>

			Short_Centred_DrawNumber_16(Val3, 1, 6, 0, 					 					673, 304, 									 Page[2]);
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <Set_Screen+0x778>)
 8002a8e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <Set_Screen+0x754>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	9302      	str	r3, [sp, #8]
 8002a98:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	f240 23a1 	movw	r3, #673	; 0x2a1
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2206      	movs	r2, #6
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	f003 fb7d 	bl	80061a8 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(Val3, 1, 6, 0, 					 					673, 334, 									 Page[2]);
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <Set_Screen+0x778>)
 8002ab0:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <Set_Screen+0x754>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	9302      	str	r3, [sp, #8]
 8002aba:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	f240 23a1 	movw	r3, #673	; 0x2a1
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2206      	movs	r2, #6
 8002aca:	2101      	movs	r1, #1
 8002acc:	f003 fb6c 	bl	80061a8 <Short_Centred_DrawNumber_16>
 8002ad0:	e016      	b.n	8002b00 <Set_Screen+0x77c>
 8002ad2:	bf00      	nop
 8002ad4:	2000001c 	.word	0x2000001c
 8002ad8:	20000974 	.word	0x20000974
 8002adc:	20000008 	.word	0x20000008
 8002ae0:	200009e8 	.word	0x200009e8
 8002ae4:	0800e8c8 	.word	0x0800e8c8
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	0800bcac 	.word	0x0800bcac
 8002af0:	0800bcd8 	.word	0x0800bcd8
 8002af4:	0800bd00 	.word	0x0800bd00
 8002af8:	0800bd28 	.word	0x0800bd28
 8002afc:	20000018 	.word	0x20000018

			Short_Left_Colored_RU_DrawString_32("кл.фил.1", 							 8,  20, 390,        RedColor, BasicSymbolColor, Page[2]);
 8002b00:	4b8d      	ldr	r3, [pc, #564]	; (8002d38 <Set_Screen+0x9b4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a8d      	ldr	r2, [pc, #564]	; (8002d3c <Set_Screen+0x9b8>)
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	498d      	ldr	r1, [pc, #564]	; (8002d40 <Set_Screen+0x9bc>)
 8002b0a:	6889      	ldr	r1, [r1, #8]
 8002b0c:	9102      	str	r1, [sp, #8]
 8002b0e:	9201      	str	r2, [sp, #4]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8002b16:	2214      	movs	r2, #20
 8002b18:	2108      	movs	r1, #8
 8002b1a:	488a      	ldr	r0, [pc, #552]	; (8002d44 <Set_Screen+0x9c0>)
 8002b1c:	f002 fb24 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("кл.фил.2", 							 8, 170, 390,        RedColor, BasicSymbolColor, Page[2]);
 8002b20:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <Set_Screen+0x9b4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a85      	ldr	r2, [pc, #532]	; (8002d3c <Set_Screen+0x9b8>)
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	4985      	ldr	r1, [pc, #532]	; (8002d40 <Set_Screen+0x9bc>)
 8002b2a:	6889      	ldr	r1, [r1, #8]
 8002b2c:	9102      	str	r1, [sp, #8]
 8002b2e:	9201      	str	r2, [sp, #4]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8002b36:	22aa      	movs	r2, #170	; 0xaa
 8002b38:	2108      	movs	r1, #8
 8002b3a:	4883      	ldr	r0, [pc, #524]	; (8002d48 <Set_Screen+0x9c4>)
 8002b3c:	f002 fb14 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("кл.фил.3", 							 8, 320, 390,        RedColor, BasicSymbolColor, Page[2]);
 8002b40:	4b7d      	ldr	r3, [pc, #500]	; (8002d38 <Set_Screen+0x9b4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a7d      	ldr	r2, [pc, #500]	; (8002d3c <Set_Screen+0x9b8>)
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	497d      	ldr	r1, [pc, #500]	; (8002d40 <Set_Screen+0x9bc>)
 8002b4a:	6889      	ldr	r1, [r1, #8]
 8002b4c:	9102      	str	r1, [sp, #8]
 8002b4e:	9201      	str	r2, [sp, #4]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8002b56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	487b      	ldr	r0, [pc, #492]	; (8002d4c <Set_Screen+0x9c8>)
 8002b5e:	f002 fb03 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("кл.воды ", 							 8, 470, 390,        RedColor, BasicSymbolColor, Page[2]);
 8002b62:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <Set_Screen+0x9b4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a75      	ldr	r2, [pc, #468]	; (8002d3c <Set_Screen+0x9b8>)
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	4975      	ldr	r1, [pc, #468]	; (8002d40 <Set_Screen+0x9bc>)
 8002b6c:	6889      	ldr	r1, [r1, #8]
 8002b6e:	9102      	str	r1, [sp, #8]
 8002b70:	9201      	str	r2, [sp, #4]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8002b78:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8002b7c:	2108      	movs	r1, #8
 8002b7e:	4874      	ldr	r0, [pc, #464]	; (8002d50 <Set_Screen+0x9cc>)
 8002b80:	f002 faf2 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("кл.конц ", 							 8, 620, 390,        RedColor, BasicSymbolColor, Page[2]);
 8002b84:	4b6c      	ldr	r3, [pc, #432]	; (8002d38 <Set_Screen+0x9b4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a6c      	ldr	r2, [pc, #432]	; (8002d3c <Set_Screen+0x9b8>)
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	496c      	ldr	r1, [pc, #432]	; (8002d40 <Set_Screen+0x9bc>)
 8002b8e:	6889      	ldr	r1, [r1, #8]
 8002b90:	9102      	str	r1, [sp, #8]
 8002b92:	9201      	str	r2, [sp, #4]
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8002b9a:	f44f 721b 	mov.w	r2, #620	; 0x26c
 8002b9e:	2108      	movs	r1, #8
 8002ba0:	486c      	ldr	r0, [pc, #432]	; (8002d54 <Set_Screen+0x9d0>)
 8002ba2:	f002 fae1 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>

			Control_DB.RazrPointer 	= 0;
 8002ba6:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <Set_Screen+0x9d4>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	805a      	strh	r2, [r3, #2]

		break;
 8002bac:	e3bb      	b.n	8003326 <Set_Screen+0xfa2>

		case 3:

			Short_Centred_RU_DrawString_32("Введите пароль", 14, 	  		400, 190, BackgroundColor, BasicSymbolColor, Page[3]);
 8002bae:	4b6b      	ldr	r3, [pc, #428]	; (8002d5c <Set_Screen+0x9d8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a62      	ldr	r2, [pc, #392]	; (8002d3c <Set_Screen+0x9b8>)
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	4962      	ldr	r1, [pc, #392]	; (8002d40 <Set_Screen+0x9bc>)
 8002bb8:	68c9      	ldr	r1, [r1, #12]
 8002bba:	9102      	str	r1, [sp, #8]
 8002bbc:	9201      	str	r2, [sp, #4]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	23be      	movs	r3, #190	; 0xbe
 8002bc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002bc6:	210e      	movs	r1, #14
 8002bc8:	4865      	ldr	r0, [pc, #404]	; (8002d60 <Set_Screen+0x9dc>)
 8002bca:	f002 fbeb 	bl	80053a4 <Short_Centred_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&PassW_block.PassWord, 		  		  0,   4, Control_DB.RazrPointer, 9999,      0, 400,  240, 800,480, Page[3], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002bce:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <Set_Screen+0x9d4>)
 8002bd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bd4:	461c      	mov	r4, r3
 8002bd6:	4b5a      	ldr	r3, [pc, #360]	; (8002d40 <Set_Screen+0x9bc>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4a62      	ldr	r2, [pc, #392]	; (8002d64 <Set_Screen+0x9e0>)
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	4957      	ldr	r1, [pc, #348]	; (8002d3c <Set_Screen+0x9b8>)
 8002be0:	6809      	ldr	r1, [r1, #0]
 8002be2:	2012      	movs	r0, #18
 8002be4:	900b      	str	r0, [sp, #44]	; 0x2c
 8002be6:	200b      	movs	r0, #11
 8002be8:	900a      	str	r0, [sp, #40]	; 0x28
 8002bea:	485f      	ldr	r0, [pc, #380]	; (8002d68 <Set_Screen+0x9e4>)
 8002bec:	9009      	str	r0, [sp, #36]	; 0x24
 8002bee:	9108      	str	r1, [sp, #32]
 8002bf0:	9207      	str	r2, [sp, #28]
 8002bf2:	9306      	str	r3, [sp, #24]
 8002bf4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002bf8:	9305      	str	r3, [sp, #20]
 8002bfa:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002bfe:	9304      	str	r3, [sp, #16]
 8002c00:	23f0      	movs	r3, #240	; 0xf0
 8002c02:	9303      	str	r3, [sp, #12]
 8002c04:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002c08:	9302      	str	r3, [sp, #8]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	4623      	mov	r3, r4
 8002c16:	2204      	movs	r2, #4
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4854      	ldr	r0, [pc, #336]	; (8002d6c <Set_Screen+0x9e8>)
 8002c1c:	f003 f842 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>
			if(PassW_block.PassFalseTimer)
 8002c20:	4b52      	ldr	r3, [pc, #328]	; (8002d6c <Set_Screen+0x9e8>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d011      	beq.n	8002c4c <Set_Screen+0x8c8>
			{
				Short_Centred_RU_DrawString_32("Пароль неверный", 15, 		400, 290,        RedColor, BasicSymbolColor, Page[3]);
 8002c28:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <Set_Screen+0x9b4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a43      	ldr	r2, [pc, #268]	; (8002d3c <Set_Screen+0x9b8>)
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	4943      	ldr	r1, [pc, #268]	; (8002d40 <Set_Screen+0x9bc>)
 8002c32:	68c9      	ldr	r1, [r1, #12]
 8002c34:	9102      	str	r1, [sp, #8]
 8002c36:	9201      	str	r2, [sp, #4]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	f44f 7391 	mov.w	r3, #290	; 0x122
 8002c3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002c42:	210f      	movs	r1, #15
 8002c44:	484a      	ldr	r0, [pc, #296]	; (8002d70 <Set_Screen+0x9ec>)
 8002c46:	f002 fbad 	bl	80053a4 <Short_Centred_RU_DrawString_32>
 8002c4a:	e010      	b.n	8002c6e <Set_Screen+0x8ea>
			}
			else
			{
				Short_Centred_RU_DrawString_32("               ", 15, 		400, 290, BackgroundColor, BasicSymbolColor, Page[3]);
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <Set_Screen+0x9d8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3a      	ldr	r2, [pc, #232]	; (8002d3c <Set_Screen+0x9b8>)
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	493a      	ldr	r1, [pc, #232]	; (8002d40 <Set_Screen+0x9bc>)
 8002c56:	68c9      	ldr	r1, [r1, #12]
 8002c58:	9102      	str	r1, [sp, #8]
 8002c5a:	9201      	str	r2, [sp, #4]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f44f 7391 	mov.w	r3, #290	; 0x122
 8002c62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002c66:	210f      	movs	r1, #15
 8002c68:	4842      	ldr	r0, [pc, #264]	; (8002d74 <Set_Screen+0x9f0>)
 8002c6a:	f002 fb9b 	bl	80053a4 <Short_Centred_RU_DrawString_32>
			}

			Control_DB.RazrPointerMAX = 4;
 8002c6e:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <Set_Screen+0x9d4>)
 8002c70:	2204      	movs	r2, #4
 8002c72:	80da      	strh	r2, [r3, #6]

		break;
 8002c74:	e357      	b.n	8003326 <Set_Screen+0xfa2>

		case 4:
			Short_Left_Colored_RU_DrawString_32("Режим работы    ", 16,	30,  50, FonColor[0], BasicSymbolColor, Page[4]);
 8002c76:	4b40      	ldr	r3, [pc, #256]	; (8002d78 <Set_Screen+0x9f4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a30      	ldr	r2, [pc, #192]	; (8002d3c <Set_Screen+0x9b8>)
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	4930      	ldr	r1, [pc, #192]	; (8002d40 <Set_Screen+0x9bc>)
 8002c80:	6909      	ldr	r1, [r1, #16]
 8002c82:	9102      	str	r1, [sp, #8]
 8002c84:	9201      	str	r2, [sp, #4]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2332      	movs	r3, #50	; 0x32
 8002c8a:	221e      	movs	r2, #30
 8002c8c:	2110      	movs	r1, #16
 8002c8e:	483b      	ldr	r0, [pc, #236]	; (8002d7c <Set_Screen+0x9f8>)
 8002c90:	f002 fa6a 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>

			if(Settings_DB.pump_mode == 1)
 8002c94:	4b3a      	ldr	r3, [pc, #232]	; (8002d80 <Set_Screen+0x9fc>)
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d177      	bne.n	8002d8c <Set_Screen+0xa08>
			{
				Short_Left_Colored_RU_DrawString_32("Авто", 4,600,  50, BackgroundColor, BasicSymbolColor, Page[4]);
 8002c9c:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <Set_Screen+0x9d8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a26      	ldr	r2, [pc, #152]	; (8002d3c <Set_Screen+0x9b8>)
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	4926      	ldr	r1, [pc, #152]	; (8002d40 <Set_Screen+0x9bc>)
 8002ca6:	6909      	ldr	r1, [r1, #16]
 8002ca8:	9102      	str	r1, [sp, #8]
 8002caa:	9201      	str	r2, [sp, #4]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2332      	movs	r3, #50	; 0x32
 8002cb0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	4833      	ldr	r0, [pc, #204]	; (8002d84 <Set_Screen+0xa00>)
 8002cb8:	f002 fa56 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&Settings_DB.pump_mode,0, 1, Control_DB.RazrPointer, 1,   0, 470, 50, 800,480, Page[4], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002cbc:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <Set_Screen+0x9d4>)
 8002cbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cc2:	461c      	mov	r4, r3
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <Set_Screen+0x9bc>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <Set_Screen+0x9f4>)
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	491b      	ldr	r1, [pc, #108]	; (8002d3c <Set_Screen+0x9b8>)
 8002cce:	6809      	ldr	r1, [r1, #0]
 8002cd0:	2012      	movs	r0, #18
 8002cd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8002cd4:	200b      	movs	r0, #11
 8002cd6:	900a      	str	r0, [sp, #40]	; 0x28
 8002cd8:	4823      	ldr	r0, [pc, #140]	; (8002d68 <Set_Screen+0x9e4>)
 8002cda:	9009      	str	r0, [sp, #36]	; 0x24
 8002cdc:	9108      	str	r1, [sp, #32]
 8002cde:	9207      	str	r2, [sp, #28]
 8002ce0:	9306      	str	r3, [sp, #24]
 8002ce2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002ce6:	9305      	str	r3, [sp, #20]
 8002ce8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002cec:	9304      	str	r3, [sp, #16]
 8002cee:	2332      	movs	r3, #50	; 0x32
 8002cf0:	9303      	str	r3, [sp, #12]
 8002cf2:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8002cf6:	9302      	str	r3, [sp, #8]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	4623      	mov	r3, r4
 8002d02:	2201      	movs	r2, #1
 8002d04:	2100      	movs	r1, #0
 8002d06:	4820      	ldr	r0, [pc, #128]	; (8002d88 <Set_Screen+0xa04>)
 8002d08:	f002 ffcc 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>
				Draw_Rectangle(BackgroundColor, 30,   70,  750, 600, Page[4], 800, 480);
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <Set_Screen+0x9d8>)
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <Set_Screen+0x9bc>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d18:	9203      	str	r2, [sp, #12]
 8002d1a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002d1e:	9202      	str	r2, [sp, #8]
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002d2c:	2246      	movs	r2, #70	; 0x46
 8002d2e:	211e      	movs	r1, #30
 8002d30:	f003 fb92 	bl	8006458 <Draw_Rectangle>
 8002d34:	e1ae      	b.n	8003094 <Set_Screen+0xd10>
 8002d36:	bf00      	nop
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	200009e8 	.word	0x200009e8
 8002d40:	20000974 	.word	0x20000974
 8002d44:	0800bd38 	.word	0x0800bd38
 8002d48:	0800bd48 	.word	0x0800bd48
 8002d4c:	0800bd58 	.word	0x0800bd58
 8002d50:	0800bd68 	.word	0x0800bd68
 8002d54:	0800bd78 	.word	0x0800bd78
 8002d58:	20000a1c 	.word	0x20000a1c
 8002d5c:	20000008 	.word	0x20000008
 8002d60:	0800bd88 	.word	0x0800bd88
 8002d64:	2000000c 	.word	0x2000000c
 8002d68:	0800e8c8 	.word	0x0800e8c8
 8002d6c:	200009f0 	.word	0x200009f0
 8002d70:	0800bda4 	.word	0x0800bda4
 8002d74:	0800bdc4 	.word	0x0800bdc4
 8002d78:	200000b0 	.word	0x200000b0
 8002d7c:	0800bdd4 	.word	0x0800bdd4
 8002d80:	200009fc 	.word	0x200009fc
 8002d84:	0800bdf0 	.word	0x0800bdf0
 8002d88:	20000a18 	.word	0x20000a18
			}
			else
			{
				Centred_DrawNumber_16_32bit_controled(&Settings_DB.pump_mode,0, 1, Control_DB.RazrPointer, 1,   0, 470, 50, 800,480, Page[4], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002d8c:	4ba2      	ldr	r3, [pc, #648]	; (8003018 <Set_Screen+0xc94>)
 8002d8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d92:	461c      	mov	r4, r3
 8002d94:	4ba1      	ldr	r3, [pc, #644]	; (800301c <Set_Screen+0xc98>)
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	4aa1      	ldr	r2, [pc, #644]	; (8003020 <Set_Screen+0xc9c>)
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	49a1      	ldr	r1, [pc, #644]	; (8003024 <Set_Screen+0xca0>)
 8002d9e:	6809      	ldr	r1, [r1, #0]
 8002da0:	2012      	movs	r0, #18
 8002da2:	900b      	str	r0, [sp, #44]	; 0x2c
 8002da4:	200b      	movs	r0, #11
 8002da6:	900a      	str	r0, [sp, #40]	; 0x28
 8002da8:	489f      	ldr	r0, [pc, #636]	; (8003028 <Set_Screen+0xca4>)
 8002daa:	9009      	str	r0, [sp, #36]	; 0x24
 8002dac:	9108      	str	r1, [sp, #32]
 8002dae:	9207      	str	r2, [sp, #28]
 8002db0:	9306      	str	r3, [sp, #24]
 8002db2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002db6:	9305      	str	r3, [sp, #20]
 8002db8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002dbc:	9304      	str	r3, [sp, #16]
 8002dbe:	2332      	movs	r3, #50	; 0x32
 8002dc0:	9303      	str	r3, [sp, #12]
 8002dc2:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8002dc6:	9302      	str	r3, [sp, #8]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	4623      	mov	r3, r4
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4895      	ldr	r0, [pc, #596]	; (800302c <Set_Screen+0xca8>)
 8002dd8:	f002 ff64 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>
				Short_Left_Colored_RU_DrawString_32("Ручн", 4,600,  50, BackgroundColor, BasicSymbolColor, Page[4]);
 8002ddc:	4b94      	ldr	r3, [pc, #592]	; (8003030 <Set_Screen+0xcac>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a90      	ldr	r2, [pc, #576]	; (8003024 <Set_Screen+0xca0>)
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	498d      	ldr	r1, [pc, #564]	; (800301c <Set_Screen+0xc98>)
 8002de6:	6909      	ldr	r1, [r1, #16]
 8002de8:	9102      	str	r1, [sp, #8]
 8002dea:	9201      	str	r2, [sp, #4]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2332      	movs	r3, #50	; 0x32
 8002df0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002df4:	2104      	movs	r1, #4
 8002df6:	488f      	ldr	r0, [pc, #572]	; (8003034 <Set_Screen+0xcb0>)
 8002df8:	f002 f9b6 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Конц эмульсии    ", 17,30,  80, FonColor[1], BasicSymbolColor, Page[4]);
 8002dfc:	4b88      	ldr	r3, [pc, #544]	; (8003020 <Set_Screen+0xc9c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a88      	ldr	r2, [pc, #544]	; (8003024 <Set_Screen+0xca0>)
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	4985      	ldr	r1, [pc, #532]	; (800301c <Set_Screen+0xc98>)
 8002e06:	6909      	ldr	r1, [r1, #16]
 8002e08:	9102      	str	r1, [sp, #8]
 8002e0a:	9201      	str	r2, [sp, #4]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2350      	movs	r3, #80	; 0x50
 8002e10:	221e      	movs	r2, #30
 8002e12:	2111      	movs	r1, #17
 8002e14:	4888      	ldr	r0, [pc, #544]	; (8003038 <Set_Screen+0xcb4>)
 8002e16:	f002 f9a7 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Настр промыв фильт", 18, 30, 110, FonColor[2], BasicSymbolColor, Page[4]);
 8002e1a:	4b81      	ldr	r3, [pc, #516]	; (8003020 <Set_Screen+0xc9c>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	4a81      	ldr	r2, [pc, #516]	; (8003024 <Set_Screen+0xca0>)
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	497e      	ldr	r1, [pc, #504]	; (800301c <Set_Screen+0xc98>)
 8002e24:	6909      	ldr	r1, [r1, #16]
 8002e26:	9102      	str	r1, [sp, #8]
 8002e28:	9201      	str	r2, [sp, #4]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	236e      	movs	r3, #110	; 0x6e
 8002e2e:	221e      	movs	r2, #30
 8002e30:	2112      	movs	r1, #18
 8002e32:	4882      	ldr	r0, [pc, #520]	; (800303c <Set_Screen+0xcb8>)
 8002e34:	f002 f998 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Время промыв", 	12,	30, 140, FonColor[3], BasicSymbolColor, Page[4]);
 8002e38:	4b79      	ldr	r3, [pc, #484]	; (8003020 <Set_Screen+0xc9c>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a79      	ldr	r2, [pc, #484]	; (8003024 <Set_Screen+0xca0>)
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	4976      	ldr	r1, [pc, #472]	; (800301c <Set_Screen+0xc98>)
 8002e42:	6909      	ldr	r1, [r1, #16]
 8002e44:	9102      	str	r1, [sp, #8]
 8002e46:	9201      	str	r2, [sp, #4]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	238c      	movs	r3, #140	; 0x8c
 8002e4c:	221e      	movs	r2, #30
 8002e4e:	210c      	movs	r1, #12
 8002e50:	487b      	ldr	r0, [pc, #492]	; (8003040 <Set_Screen+0xcbc>)
 8002e52:	f002 f989 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Настр мин уровн конц", 20, 30, 170, FonColor[4], BasicSymbolColor, Page[4]);
 8002e56:	4b72      	ldr	r3, [pc, #456]	; (8003020 <Set_Screen+0xc9c>)
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	4a72      	ldr	r2, [pc, #456]	; (8003024 <Set_Screen+0xca0>)
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	496f      	ldr	r1, [pc, #444]	; (800301c <Set_Screen+0xc98>)
 8002e60:	6909      	ldr	r1, [r1, #16]
 8002e62:	9102      	str	r1, [sp, #8]
 8002e64:	9201      	str	r2, [sp, #4]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	23aa      	movs	r3, #170	; 0xaa
 8002e6a:	221e      	movs	r2, #30
 8002e6c:	2114      	movs	r1, #20
 8002e6e:	4875      	ldr	r0, [pc, #468]	; (8003044 <Set_Screen+0xcc0>)
 8002e70:	f002 f97a 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Настр уровн авт разгр", 21, 30, 200, FonColor[5], BasicSymbolColor, Page[4]);
 8002e74:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <Set_Screen+0xc9c>)
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	4a6a      	ldr	r2, [pc, #424]	; (8003024 <Set_Screen+0xca0>)
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	4967      	ldr	r1, [pc, #412]	; (800301c <Set_Screen+0xc98>)
 8002e7e:	6909      	ldr	r1, [r1, #16]
 8002e80:	9102      	str	r1, [sp, #8]
 8002e82:	9201      	str	r2, [sp, #4]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	23c8      	movs	r3, #200	; 0xc8
 8002e88:	221e      	movs	r2, #30
 8002e8a:	2115      	movs	r1, #21
 8002e8c:	486e      	ldr	r0, [pc, #440]	; (8003048 <Set_Screen+0xcc4>)
 8002e8e:	f002 f96b 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Сброс настр по умол", 19, 	30, 230, FonColor[6], BasicSymbolColor, Page[4]);
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <Set_Screen+0xc9c>)
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	4a63      	ldr	r2, [pc, #396]	; (8003024 <Set_Screen+0xca0>)
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	4960      	ldr	r1, [pc, #384]	; (800301c <Set_Screen+0xc98>)
 8002e9c:	6909      	ldr	r1, [r1, #16]
 8002e9e:	9102      	str	r1, [sp, #8]
 8002ea0:	9201      	str	r2, [sp, #4]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	23e6      	movs	r3, #230	; 0xe6
 8002ea6:	221e      	movs	r2, #30
 8002ea8:	2113      	movs	r1, #19
 8002eaa:	4868      	ldr	r0, [pc, #416]	; (800304c <Set_Screen+0xcc8>)
 8002eac:	f002 f95c 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(1,0, 1, Control_DB.RazrPointer, 1,   0, 470, 50, 800,480, Page[4], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <Set_Screen+0xc94>)
 8002eb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002eb6:	461c      	mov	r4, r3
 8002eb8:	4b58      	ldr	r3, [pc, #352]	; (800301c <Set_Screen+0xc98>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	4a64      	ldr	r2, [pc, #400]	; (8003050 <Set_Screen+0xccc>)
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	4958      	ldr	r1, [pc, #352]	; (8003024 <Set_Screen+0xca0>)
 8002ec2:	6809      	ldr	r1, [r1, #0]
 8002ec4:	2012      	movs	r0, #18
 8002ec6:	900b      	str	r0, [sp, #44]	; 0x2c
 8002ec8:	200b      	movs	r0, #11
 8002eca:	900a      	str	r0, [sp, #40]	; 0x28
 8002ecc:	4856      	ldr	r0, [pc, #344]	; (8003028 <Set_Screen+0xca4>)
 8002ece:	9009      	str	r0, [sp, #36]	; 0x24
 8002ed0:	9108      	str	r1, [sp, #32]
 8002ed2:	9207      	str	r2, [sp, #28]
 8002ed4:	9306      	str	r3, [sp, #24]
 8002ed6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002eda:	9305      	str	r3, [sp, #20]
 8002edc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002ee0:	9304      	str	r3, [sp, #16]
 8002ee2:	2332      	movs	r3, #50	; 0x32
 8002ee4:	9303      	str	r3, [sp, #12]
 8002ee6:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	2300      	movs	r3, #0
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2001      	movs	r0, #1
 8002efc:	f002 fed2 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>
				Centred_DrawNumber_16_32bit_controled(1,0, 1, Control_DB.RazrPointer, 1,   0, 470, 170, 800,480, Page[4], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002f00:	4b45      	ldr	r3, [pc, #276]	; (8003018 <Set_Screen+0xc94>)
 8002f02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f06:	461c      	mov	r4, r3
 8002f08:	4b44      	ldr	r3, [pc, #272]	; (800301c <Set_Screen+0xc98>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	4a50      	ldr	r2, [pc, #320]	; (8003050 <Set_Screen+0xccc>)
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	4944      	ldr	r1, [pc, #272]	; (8003024 <Set_Screen+0xca0>)
 8002f12:	6809      	ldr	r1, [r1, #0]
 8002f14:	2012      	movs	r0, #18
 8002f16:	900b      	str	r0, [sp, #44]	; 0x2c
 8002f18:	200b      	movs	r0, #11
 8002f1a:	900a      	str	r0, [sp, #40]	; 0x28
 8002f1c:	4842      	ldr	r0, [pc, #264]	; (8003028 <Set_Screen+0xca4>)
 8002f1e:	9009      	str	r0, [sp, #36]	; 0x24
 8002f20:	9108      	str	r1, [sp, #32]
 8002f22:	9207      	str	r2, [sp, #28]
 8002f24:	9306      	str	r3, [sp, #24]
 8002f26:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f2a:	9305      	str	r3, [sp, #20]
 8002f2c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002f30:	9304      	str	r3, [sp, #16]
 8002f32:	23aa      	movs	r3, #170	; 0xaa
 8002f34:	9303      	str	r3, [sp, #12]
 8002f36:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8002f3a:	9302      	str	r3, [sp, #8]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	2301      	movs	r3, #1
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	4623      	mov	r3, r4
 8002f46:	2201      	movs	r2, #1
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f002 feaa 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>
				Centred_DrawNumber_16_32bit_controled(1,0, 1, Control_DB.RazrPointer, 1,   0, 470, 200, 800,480, Page[4], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002f50:	4b31      	ldr	r3, [pc, #196]	; (8003018 <Set_Screen+0xc94>)
 8002f52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f56:	461c      	mov	r4, r3
 8002f58:	4b30      	ldr	r3, [pc, #192]	; (800301c <Set_Screen+0xc98>)
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	4a3c      	ldr	r2, [pc, #240]	; (8003050 <Set_Screen+0xccc>)
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	4930      	ldr	r1, [pc, #192]	; (8003024 <Set_Screen+0xca0>)
 8002f62:	6809      	ldr	r1, [r1, #0]
 8002f64:	2012      	movs	r0, #18
 8002f66:	900b      	str	r0, [sp, #44]	; 0x2c
 8002f68:	200b      	movs	r0, #11
 8002f6a:	900a      	str	r0, [sp, #40]	; 0x28
 8002f6c:	482e      	ldr	r0, [pc, #184]	; (8003028 <Set_Screen+0xca4>)
 8002f6e:	9009      	str	r0, [sp, #36]	; 0x24
 8002f70:	9108      	str	r1, [sp, #32]
 8002f72:	9207      	str	r2, [sp, #28]
 8002f74:	9306      	str	r3, [sp, #24]
 8002f76:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f7a:	9305      	str	r3, [sp, #20]
 8002f7c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002f80:	9304      	str	r3, [sp, #16]
 8002f82:	23c8      	movs	r3, #200	; 0xc8
 8002f84:	9303      	str	r3, [sp, #12]
 8002f86:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	2301      	movs	r3, #1
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4623      	mov	r3, r4
 8002f96:	2201      	movs	r2, #1
 8002f98:	2100      	movs	r1, #0
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f002 fe82 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>
				Centred_DrawNumber_16_32bit_controled(1,0, 1, Control_DB.RazrPointer, 1,   0, 470, 80, 800,480, Page[4], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <Set_Screen+0xc94>)
 8002fa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fa6:	461c      	mov	r4, r3
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <Set_Screen+0xc98>)
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	4a28      	ldr	r2, [pc, #160]	; (8003050 <Set_Screen+0xccc>)
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	491c      	ldr	r1, [pc, #112]	; (8003024 <Set_Screen+0xca0>)
 8002fb2:	6809      	ldr	r1, [r1, #0]
 8002fb4:	2012      	movs	r0, #18
 8002fb6:	900b      	str	r0, [sp, #44]	; 0x2c
 8002fb8:	200b      	movs	r0, #11
 8002fba:	900a      	str	r0, [sp, #40]	; 0x28
 8002fbc:	481a      	ldr	r0, [pc, #104]	; (8003028 <Set_Screen+0xca4>)
 8002fbe:	9009      	str	r0, [sp, #36]	; 0x24
 8002fc0:	9108      	str	r1, [sp, #32]
 8002fc2:	9207      	str	r2, [sp, #28]
 8002fc4:	9306      	str	r3, [sp, #24]
 8002fc6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002fca:	9305      	str	r3, [sp, #20]
 8002fcc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002fd0:	9304      	str	r3, [sp, #16]
 8002fd2:	2350      	movs	r3, #80	; 0x50
 8002fd4:	9303      	str	r3, [sp, #12]
 8002fd6:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8002fda:	9302      	str	r3, [sp, #8]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	4623      	mov	r3, r4
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2001      	movs	r0, #1
 8002fec:	f002 fe5a 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>
//				Short_Left_Colored_RU_DrawString_32("По переп дав", 12,585,  110, BackgroundColor, BasicSymbolColor, Page[4]);
				Short_Left_Colored_RU_DrawString_32("По врем", 7,600,  90, BackgroundColor, BasicSymbolColor, Page[4]);
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <Set_Screen+0xcac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <Set_Screen+0xca0>)
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	4908      	ldr	r1, [pc, #32]	; (800301c <Set_Screen+0xc98>)
 8002ffa:	6909      	ldr	r1, [r1, #16]
 8002ffc:	9102      	str	r1, [sp, #8]
 8002ffe:	9201      	str	r2, [sp, #4]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	235a      	movs	r3, #90	; 0x5a
 8003004:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003008:	2107      	movs	r1, #7
 800300a:	4812      	ldr	r0, [pc, #72]	; (8003054 <Set_Screen+0xcd0>)
 800300c:	f002 f8ac 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
//				Short_Left_Colored_RU_DrawString_32("механ", 5,600,  200, BackgroundColor, BasicSymbolColor, Page[4]);
				Short_Left_Colored_RU_DrawString_32("моль/л", 6,600,  170, BackgroundColor, BasicSymbolColor, Page[4]);
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <Set_Screen+0xcac>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e020      	b.n	8003058 <Set_Screen+0xcd4>
 8003016:	bf00      	nop
 8003018:	20000a1c 	.word	0x20000a1c
 800301c:	20000974 	.word	0x20000974
 8003020:	200000b0 	.word	0x200000b0
 8003024:	200009e8 	.word	0x200009e8
 8003028:	0800e8c8 	.word	0x0800e8c8
 800302c:	20000a18 	.word	0x20000a18
 8003030:	20000008 	.word	0x20000008
 8003034:	0800bdfc 	.word	0x0800bdfc
 8003038:	0800be08 	.word	0x0800be08
 800303c:	0800be28 	.word	0x0800be28
 8003040:	0800be4c 	.word	0x0800be4c
 8003044:	0800be64 	.word	0x0800be64
 8003048:	0800be8c 	.word	0x0800be8c
 800304c:	0800beb4 	.word	0x0800beb4
 8003050:	2000000c 	.word	0x2000000c
 8003054:	0800bed8 	.word	0x0800bed8
 8003058:	4a10      	ldr	r2, [pc, #64]	; (800309c <Set_Screen+0xd18>)
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	4910      	ldr	r1, [pc, #64]	; (80030a0 <Set_Screen+0xd1c>)
 800305e:	6909      	ldr	r1, [r1, #16]
 8003060:	9102      	str	r1, [sp, #8]
 8003062:	9201      	str	r2, [sp, #4]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	23aa      	movs	r3, #170	; 0xaa
 8003068:	f44f 7216 	mov.w	r2, #600	; 0x258
 800306c:	2106      	movs	r1, #6
 800306e:	480d      	ldr	r0, [pc, #52]	; (80030a4 <Set_Screen+0xd20>)
 8003070:	f002 f87a 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("эл.магн", 7,600,  180, BackgroundColor, BasicSymbolColor, Page[4]);
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <Set_Screen+0xd24>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <Set_Screen+0xd18>)
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	4908      	ldr	r1, [pc, #32]	; (80030a0 <Set_Screen+0xd1c>)
 800307e:	6909      	ldr	r1, [r1, #16]
 8003080:	9102      	str	r1, [sp, #8]
 8003082:	9201      	str	r2, [sp, #4]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	23b4      	movs	r3, #180	; 0xb4
 8003088:	f44f 7216 	mov.w	r2, #600	; 0x258
 800308c:	2107      	movs	r1, #7
 800308e:	4807      	ldr	r0, [pc, #28]	; (80030ac <Set_Screen+0xd28>)
 8003090:	f002 f86a 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
//			Short_Left_Colored_RU_DrawString_32("По переп дав", 12,585,  110, BackgroundColor, BasicSymbolColor, Page[4]);
////			Short_Left_Colored_RU_DrawString_32("По врем", 7,600,  90, BackgroundColor, BasicSymbolColor, Page[4]);
//			Short_Left_Colored_RU_DrawString_32("механ", 5,600,  200, BackgroundColor, BasicSymbolColor, Page[4]);
//			Short_Left_Colored_RU_DrawString_32("моль/л", 6,600,  170, BackgroundColor, BasicSymbolColor, Page[4]);
////			Short_Left_Colored_RU_DrawString_32("эл.магн", 7,600,  180, BackgroundColor, BasicSymbolColor, Page[4]);
			Control_DB.MenuPointerMAX = 6;
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <Set_Screen+0xd2c>)
 8003096:	2206      	movs	r2, #6
 8003098:	809a      	strh	r2, [r3, #4]

		break;
 800309a:	e144      	b.n	8003326 <Set_Screen+0xfa2>
 800309c:	200009e8 	.word	0x200009e8
 80030a0:	20000974 	.word	0x20000974
 80030a4:	0800bee8 	.word	0x0800bee8
 80030a8:	20000008 	.word	0x20000008
 80030ac:	0800bef4 	.word	0x0800bef4
 80030b0:	20000a1c 	.word	0x20000a1c

		case 21:

			Short_Left_Colored_RU_DrawString_32("Адрес            ", 17,	100,  70, FonColor[0], BasicSymbolColor, Page[21]);
 80030b4:	4ba1      	ldr	r3, [pc, #644]	; (800333c <Set_Screen+0xfb8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4aa1      	ldr	r2, [pc, #644]	; (8003340 <Set_Screen+0xfbc>)
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	49a1      	ldr	r1, [pc, #644]	; (8003344 <Set_Screen+0xfc0>)
 80030be:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80030c0:	9102      	str	r1, [sp, #8]
 80030c2:	9201      	str	r2, [sp, #4]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2346      	movs	r3, #70	; 0x46
 80030c8:	2264      	movs	r2, #100	; 0x64
 80030ca:	2111      	movs	r1, #17
 80030cc:	489e      	ldr	r0, [pc, #632]	; (8003348 <Set_Screen+0xfc4>)
 80030ce:	f002 f84b 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Скорость         ", 17, 	100, 110, FonColor[1], BasicSymbolColor, Page[21]);
 80030d2:	4b9a      	ldr	r3, [pc, #616]	; (800333c <Set_Screen+0xfb8>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a9a      	ldr	r2, [pc, #616]	; (8003340 <Set_Screen+0xfbc>)
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	499a      	ldr	r1, [pc, #616]	; (8003344 <Set_Screen+0xfc0>)
 80030dc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80030de:	9102      	str	r1, [sp, #8]
 80030e0:	9201      	str	r2, [sp, #4]
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	236e      	movs	r3, #110	; 0x6e
 80030e6:	2264      	movs	r2, #100	; 0x64
 80030e8:	2111      	movs	r1, #17
 80030ea:	4898      	ldr	r0, [pc, #608]	; (800334c <Set_Screen+0xfc8>)
 80030ec:	f002 f83c 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Стоп биты        ", 17, 	100, 150, FonColor[2], BasicSymbolColor, Page[21]);
 80030f0:	4b92      	ldr	r3, [pc, #584]	; (800333c <Set_Screen+0xfb8>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a92      	ldr	r2, [pc, #584]	; (8003340 <Set_Screen+0xfbc>)
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	4992      	ldr	r1, [pc, #584]	; (8003344 <Set_Screen+0xfc0>)
 80030fa:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80030fc:	9102      	str	r1, [sp, #8]
 80030fe:	9201      	str	r2, [sp, #4]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2396      	movs	r3, #150	; 0x96
 8003104:	2264      	movs	r2, #100	; 0x64
 8003106:	2111      	movs	r1, #17
 8003108:	4891      	ldr	r0, [pc, #580]	; (8003350 <Set_Screen+0xfcc>)
 800310a:	f002 f82d 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Яркость дисплея  ", 17, 	100, 190, FonColor[3], BasicSymbolColor, Page[21]);
 800310e:	4b8b      	ldr	r3, [pc, #556]	; (800333c <Set_Screen+0xfb8>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	4a8b      	ldr	r2, [pc, #556]	; (8003340 <Set_Screen+0xfbc>)
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	498b      	ldr	r1, [pc, #556]	; (8003344 <Set_Screen+0xfc0>)
 8003118:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800311a:	9102      	str	r1, [sp, #8]
 800311c:	9201      	str	r2, [sp, #4]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	23be      	movs	r3, #190	; 0xbe
 8003122:	2264      	movs	r2, #100	; 0x64
 8003124:	2111      	movs	r1, #17
 8003126:	488b      	ldr	r0, [pc, #556]	; (8003354 <Set_Screen+0xfd0>)
 8003128:	f002 f81e 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Яркость клав-ры  ", 17, 	100, 230, FonColor[4], BasicSymbolColor, Page[21]);
 800312c:	4b83      	ldr	r3, [pc, #524]	; (800333c <Set_Screen+0xfb8>)
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	4a83      	ldr	r2, [pc, #524]	; (8003340 <Set_Screen+0xfbc>)
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	4983      	ldr	r1, [pc, #524]	; (8003344 <Set_Screen+0xfc0>)
 8003136:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003138:	9102      	str	r1, [sp, #8]
 800313a:	9201      	str	r2, [sp, #4]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	23e6      	movs	r3, #230	; 0xe6
 8003140:	2264      	movs	r2, #100	; 0x64
 8003142:	2111      	movs	r1, #17
 8003144:	4884      	ldr	r0, [pc, #528]	; (8003358 <Set_Screen+0xfd4>)
 8003146:	f002 f80f 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Сохранить во флеш", 17, 	100, 270, FonColor[5], BasicSymbolColor, Page[21]);
 800314a:	4b7c      	ldr	r3, [pc, #496]	; (800333c <Set_Screen+0xfb8>)
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	4a7c      	ldr	r2, [pc, #496]	; (8003340 <Set_Screen+0xfbc>)
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	497c      	ldr	r1, [pc, #496]	; (8003344 <Set_Screen+0xfc0>)
 8003154:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003156:	9102      	str	r1, [sp, #8]
 8003158:	9201      	str	r2, [sp, #4]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003160:	2264      	movs	r2, #100	; 0x64
 8003162:	2111      	movs	r1, #17
 8003164:	487d      	ldr	r0, [pc, #500]	; (800335c <Set_Screen+0xfd8>)
 8003166:	f001 ffff 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_ADDR, 			0, 3, Control_DB.RazrPointer,    255,      0, 470,  70, 800,480, Page[21], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800316a:	4b7d      	ldr	r3, [pc, #500]	; (8003360 <Set_Screen+0xfdc>)
 800316c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003170:	461c      	mov	r4, r3
 8003172:	4b74      	ldr	r3, [pc, #464]	; (8003344 <Set_Screen+0xfc0>)
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	4a71      	ldr	r2, [pc, #452]	; (800333c <Set_Screen+0xfb8>)
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	4971      	ldr	r1, [pc, #452]	; (8003340 <Set_Screen+0xfbc>)
 800317c:	6809      	ldr	r1, [r1, #0]
 800317e:	2012      	movs	r0, #18
 8003180:	900b      	str	r0, [sp, #44]	; 0x2c
 8003182:	200b      	movs	r0, #11
 8003184:	900a      	str	r0, [sp, #40]	; 0x28
 8003186:	4877      	ldr	r0, [pc, #476]	; (8003364 <Set_Screen+0xfe0>)
 8003188:	9009      	str	r0, [sp, #36]	; 0x24
 800318a:	9108      	str	r1, [sp, #32]
 800318c:	9207      	str	r2, [sp, #28]
 800318e:	9306      	str	r3, [sp, #24]
 8003190:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003194:	9305      	str	r3, [sp, #20]
 8003196:	f44f 7348 	mov.w	r3, #800	; 0x320
 800319a:	9304      	str	r3, [sp, #16]
 800319c:	2346      	movs	r3, #70	; 0x46
 800319e:	9303      	str	r3, [sp, #12]
 80031a0:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80031a4:	9302      	str	r3, [sp, #8]
 80031a6:	2300      	movs	r3, #0
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	23ff      	movs	r3, #255	; 0xff
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	4623      	mov	r3, r4
 80031b0:	2203      	movs	r2, #3
 80031b2:	2100      	movs	r1, #0
 80031b4:	486c      	ldr	r0, [pc, #432]	; (8003368 <Set_Screen+0xfe4>)
 80031b6:	f002 fd75 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_Speed, 		0, 6, Control_DB.RazrPointer, 115200,   9600, 470, 110, 800,480, Page[21], FonColor[1], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80031ba:	4b69      	ldr	r3, [pc, #420]	; (8003360 <Set_Screen+0xfdc>)
 80031bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031c0:	461c      	mov	r4, r3
 80031c2:	4b60      	ldr	r3, [pc, #384]	; (8003344 <Set_Screen+0xfc0>)
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	4a5d      	ldr	r2, [pc, #372]	; (800333c <Set_Screen+0xfb8>)
 80031c8:	6852      	ldr	r2, [r2, #4]
 80031ca:	495d      	ldr	r1, [pc, #372]	; (8003340 <Set_Screen+0xfbc>)
 80031cc:	6809      	ldr	r1, [r1, #0]
 80031ce:	2012      	movs	r0, #18
 80031d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80031d2:	200b      	movs	r0, #11
 80031d4:	900a      	str	r0, [sp, #40]	; 0x28
 80031d6:	4863      	ldr	r0, [pc, #396]	; (8003364 <Set_Screen+0xfe0>)
 80031d8:	9009      	str	r0, [sp, #36]	; 0x24
 80031da:	9108      	str	r1, [sp, #32]
 80031dc:	9207      	str	r2, [sp, #28]
 80031de:	9306      	str	r3, [sp, #24]
 80031e0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80031e4:	9305      	str	r3, [sp, #20]
 80031e6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80031ea:	9304      	str	r3, [sp, #16]
 80031ec:	236e      	movs	r3, #110	; 0x6e
 80031ee:	9303      	str	r3, [sp, #12]
 80031f0:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80031f4:	9302      	str	r3, [sp, #8]
 80031f6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	4623      	mov	r3, r4
 8003204:	2206      	movs	r2, #6
 8003206:	2100      	movs	r1, #0
 8003208:	4858      	ldr	r0, [pc, #352]	; (800336c <Set_Screen+0xfe8>)
 800320a:	f002 fd4b 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_Stops, 		0, 1, Control_DB.RazrPointer,      2,      1, 470, 150, 800,480, Page[21], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800320e:	4b54      	ldr	r3, [pc, #336]	; (8003360 <Set_Screen+0xfdc>)
 8003210:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003214:	461c      	mov	r4, r3
 8003216:	4b4b      	ldr	r3, [pc, #300]	; (8003344 <Set_Screen+0xfc0>)
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	4a48      	ldr	r2, [pc, #288]	; (800333c <Set_Screen+0xfb8>)
 800321c:	6892      	ldr	r2, [r2, #8]
 800321e:	4948      	ldr	r1, [pc, #288]	; (8003340 <Set_Screen+0xfbc>)
 8003220:	6809      	ldr	r1, [r1, #0]
 8003222:	2012      	movs	r0, #18
 8003224:	900b      	str	r0, [sp, #44]	; 0x2c
 8003226:	200b      	movs	r0, #11
 8003228:	900a      	str	r0, [sp, #40]	; 0x28
 800322a:	484e      	ldr	r0, [pc, #312]	; (8003364 <Set_Screen+0xfe0>)
 800322c:	9009      	str	r0, [sp, #36]	; 0x24
 800322e:	9108      	str	r1, [sp, #32]
 8003230:	9207      	str	r2, [sp, #28]
 8003232:	9306      	str	r3, [sp, #24]
 8003234:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003238:	9305      	str	r3, [sp, #20]
 800323a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800323e:	9304      	str	r3, [sp, #16]
 8003240:	2396      	movs	r3, #150	; 0x96
 8003242:	9303      	str	r3, [sp, #12]
 8003244:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003248:	9302      	str	r3, [sp, #8]
 800324a:	2301      	movs	r3, #1
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	2302      	movs	r3, #2
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	4623      	mov	r3, r4
 8003254:	2201      	movs	r2, #1
 8003256:	2100      	movs	r1, #0
 8003258:	4845      	ldr	r0, [pc, #276]	; (8003370 <Set_Screen+0xfec>)
 800325a:	f002 fd23 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.brightness_disp, 	0, 3, Control_DB.RazrPointer,    100,     10, 470, 190, 800,480, Page[21], FonColor[3], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800325e:	4b40      	ldr	r3, [pc, #256]	; (8003360 <Set_Screen+0xfdc>)
 8003260:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003264:	461c      	mov	r4, r3
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <Set_Screen+0xfc0>)
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	4a34      	ldr	r2, [pc, #208]	; (800333c <Set_Screen+0xfb8>)
 800326c:	68d2      	ldr	r2, [r2, #12]
 800326e:	4934      	ldr	r1, [pc, #208]	; (8003340 <Set_Screen+0xfbc>)
 8003270:	6809      	ldr	r1, [r1, #0]
 8003272:	2012      	movs	r0, #18
 8003274:	900b      	str	r0, [sp, #44]	; 0x2c
 8003276:	200b      	movs	r0, #11
 8003278:	900a      	str	r0, [sp, #40]	; 0x28
 800327a:	483a      	ldr	r0, [pc, #232]	; (8003364 <Set_Screen+0xfe0>)
 800327c:	9009      	str	r0, [sp, #36]	; 0x24
 800327e:	9108      	str	r1, [sp, #32]
 8003280:	9207      	str	r2, [sp, #28]
 8003282:	9306      	str	r3, [sp, #24]
 8003284:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003288:	9305      	str	r3, [sp, #20]
 800328a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800328e:	9304      	str	r3, [sp, #16]
 8003290:	23be      	movs	r3, #190	; 0xbe
 8003292:	9303      	str	r3, [sp, #12]
 8003294:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003298:	9302      	str	r3, [sp, #8]
 800329a:	230a      	movs	r3, #10
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2364      	movs	r3, #100	; 0x64
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	4623      	mov	r3, r4
 80032a4:	2203      	movs	r2, #3
 80032a6:	2100      	movs	r1, #0
 80032a8:	4832      	ldr	r0, [pc, #200]	; (8003374 <Set_Screen+0xff0>)
 80032aa:	f002 fcfb 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.brightness_clav, 	0, 3, Control_DB.RazrPointer,    100,     10, 470, 230, 800,480, Page[21], FonColor[4], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80032ae:	4b2c      	ldr	r3, [pc, #176]	; (8003360 <Set_Screen+0xfdc>)
 80032b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032b4:	461c      	mov	r4, r3
 80032b6:	4b23      	ldr	r3, [pc, #140]	; (8003344 <Set_Screen+0xfc0>)
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	4a20      	ldr	r2, [pc, #128]	; (800333c <Set_Screen+0xfb8>)
 80032bc:	6912      	ldr	r2, [r2, #16]
 80032be:	4920      	ldr	r1, [pc, #128]	; (8003340 <Set_Screen+0xfbc>)
 80032c0:	6809      	ldr	r1, [r1, #0]
 80032c2:	2012      	movs	r0, #18
 80032c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80032c6:	200b      	movs	r0, #11
 80032c8:	900a      	str	r0, [sp, #40]	; 0x28
 80032ca:	4826      	ldr	r0, [pc, #152]	; (8003364 <Set_Screen+0xfe0>)
 80032cc:	9009      	str	r0, [sp, #36]	; 0x24
 80032ce:	9108      	str	r1, [sp, #32]
 80032d0:	9207      	str	r2, [sp, #28]
 80032d2:	9306      	str	r3, [sp, #24]
 80032d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80032d8:	9305      	str	r3, [sp, #20]
 80032da:	f44f 7348 	mov.w	r3, #800	; 0x320
 80032de:	9304      	str	r3, [sp, #16]
 80032e0:	23e6      	movs	r3, #230	; 0xe6
 80032e2:	9303      	str	r3, [sp, #12]
 80032e4:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	230a      	movs	r3, #10
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	2364      	movs	r3, #100	; 0x64
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	4623      	mov	r3, r4
 80032f4:	2203      	movs	r2, #3
 80032f6:	2100      	movs	r1, #0
 80032f8:	481f      	ldr	r0, [pc, #124]	; (8003378 <Set_Screen+0xff4>)
 80032fa:	f002 fcd3 	bl	8005ca4 <Centred_DrawNumber_16_32bit_controled>

			Control_DB.MenuPointerMAX = 5;
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <Set_Screen+0xfdc>)
 8003300:	2205      	movs	r2, #5
 8003302:	809a      	strh	r2, [r3, #4]

			Short_Left_Colored_RU_DrawString_32("бод/с", 5,					585,  110, BackgroundColor, BasicSymbolColor, Page[21]);
 8003304:	4b1d      	ldr	r3, [pc, #116]	; (800337c <Set_Screen+0xff8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <Set_Screen+0xfbc>)
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	490d      	ldr	r1, [pc, #52]	; (8003344 <Set_Screen+0xfc0>)
 800330e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003310:	9102      	str	r1, [sp, #8]
 8003312:	9201      	str	r2, [sp, #4]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	236e      	movs	r3, #110	; 0x6e
 8003318:	f240 2249 	movw	r2, #585	; 0x249
 800331c:	2105      	movs	r1, #5
 800331e:	4818      	ldr	r0, [pc, #96]	; (8003380 <Set_Screen+0xffc>)
 8003320:	f001 ff22 	bl	8005168 <Short_Left_Colored_RU_DrawString_32>

		break;
 8003324:	bf00      	nop

	}

	if(screen_event)
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <Set_Screen+0x1000>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d031      	beq.n	8003392 <Set_Screen+0x100e>
	{

		Control_DB.RazrPointer 	= 0;
 800332e:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <Set_Screen+0xfdc>)
 8003330:	2200      	movs	r2, #0
 8003332:	805a      	strh	r2, [r3, #2]
		PassW_block.PassWord   	= 0;
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <Set_Screen+0x1004>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e027      	b.n	800338c <Set_Screen+0x1008>
 800333c:	200000b0 	.word	0x200000b0
 8003340:	200009e8 	.word	0x200009e8
 8003344:	20000974 	.word	0x20000974
 8003348:	0800bf04 	.word	0x0800bf04
 800334c:	0800bf1c 	.word	0x0800bf1c
 8003350:	0800bf38 	.word	0x0800bf38
 8003354:	0800bf54 	.word	0x0800bf54
 8003358:	0800bf74 	.word	0x0800bf74
 800335c:	0800bf94 	.word	0x0800bf94
 8003360:	20000a1c 	.word	0x20000a1c
 8003364:	0800e8c8 	.word	0x0800e8c8
 8003368:	200009fc 	.word	0x200009fc
 800336c:	20000a00 	.word	0x20000a00
 8003370:	20000a04 	.word	0x20000a04
 8003374:	20000a10 	.word	0x20000a10
 8003378:	20000a14 	.word	0x20000a14
 800337c:	20000008 	.word	0x20000008
 8003380:	0800bfb8 	.word	0x0800bfb8
 8003384:	200009ec 	.word	0x200009ec
 8003388:	200009f0 	.word	0x200009f0
		screen_event 			= 0;
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <Set_Screen+0x1028>)
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]



	}

	HAL_LTDC_SetAddress(&hltdc, Page[screen], 0);
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <Set_Screen+0x102c>)
 8003396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339a:	2200      	movs	r2, #0
 800339c:	4619      	mov	r1, r3
 800339e:	4805      	ldr	r0, [pc, #20]	; (80033b4 <Set_Screen+0x1030>)
 80033a0:	f004 f908 	bl	80075b4 <HAL_LTDC_SetAddress>
}
 80033a4:	bf00      	nop
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bdb0      	pop	{r4, r5, r7, pc}
 80033ac:	200009ec 	.word	0x200009ec
 80033b0:	20000974 	.word	0x20000974
 80033b4:	20000140 	.word	0x20000140

080033b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033bc:	b08a      	sub	sp, #40	; 0x28
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	PassW_block.PassWord 		=    0;
 80033c0:	4b78      	ldr	r3, [pc, #480]	; (80035a4 <main+0x1ec>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
	PassW_block.PassWord_true 	= 1234;
 80033c6:	4b77      	ldr	r3, [pc, #476]	; (80035a4 <main+0x1ec>)
 80033c8:	f240 42d2 	movw	r2, #1234	; 0x4d2
 80033cc:	605a      	str	r2, [r3, #4]

	memcpy(&Settings_DB, 0x08060000, sizeof(Settings_DB)); // чтение настроек с флеш
 80033ce:	4a76      	ldr	r2, [pc, #472]	; (80035a8 <main+0x1f0>)
 80033d0:	4b76      	ldr	r3, [pc, #472]	; (80035ac <main+0x1f4>)
 80033d2:	4614      	mov	r4, r2
 80033d4:	461d      	mov	r5, r3
 80033d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Settings_DB.FlashWriteFlag	 = 0;
 80033e2:	4b71      	ldr	r3, [pc, #452]	; (80035a8 <main+0x1f0>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	741a      	strb	r2, [r3, #16]
	Settings_DB.RS485_Parity	 = 0;
 80033e8:	4b6f      	ldr	r3, [pc, #444]	; (80035a8 <main+0x1f0>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]

	if(Settings_DB.RS485_ADDR == -1)
 80033ee:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <main+0x1f0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f6:	d112      	bne.n	800341e <main+0x66>
	{
		Settings_DB.RS485_ADDR  = 1;
 80033f8:	4b6b      	ldr	r3, [pc, #428]	; (80035a8 <main+0x1f0>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
		Settings_DB.RS485_Speed = 115200;
 80033fe:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <main+0x1f0>)
 8003400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003404:	605a      	str	r2, [r3, #4]
		Settings_DB.RS485_Stops = 1;
 8003406:	4b68      	ldr	r3, [pc, #416]	; (80035a8 <main+0x1f0>)
 8003408:	2201      	movs	r2, #1
 800340a:	609a      	str	r2, [r3, #8]
		Settings_DB.brightness_disp = 100;
 800340c:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <main+0x1f0>)
 800340e:	2264      	movs	r2, #100	; 0x64
 8003410:	615a      	str	r2, [r3, #20]
		Settings_DB.brightness_clav = 100;
 8003412:	4b65      	ldr	r3, [pc, #404]	; (80035a8 <main+0x1f0>)
 8003414:	2264      	movs	r2, #100	; 0x64
 8003416:	619a      	str	r2, [r3, #24]
		Settings_DB.pump_mode = 1;
 8003418:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <main+0x1f0>)
 800341a:	2201      	movs	r2, #1
 800341c:	61da      	str	r2, [r3, #28]
	}

	Slave_1.PORT    		= UART7_BASE;
 800341e:	4b64      	ldr	r3, [pc, #400]	; (80035b0 <main+0x1f8>)
 8003420:	4a64      	ldr	r2, [pc, #400]	; (80035b4 <main+0x1fc>)
 8003422:	601a      	str	r2, [r3, #0]
	Slave_1.MB_Addr 		= Settings_DB.RS485_ADDR;
 8003424:	4b60      	ldr	r3, [pc, #384]	; (80035a8 <main+0x1f0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4b61      	ldr	r3, [pc, #388]	; (80035b0 <main+0x1f8>)
 800342c:	711a      	strb	r2, [r3, #4]
	Slave_1.Roll_max 		= 0;
 800342e:	4b60      	ldr	r3, [pc, #384]	; (80035b0 <main+0x1f8>)
 8003430:	2200      	movs	r2, #0
 8003432:	81da      	strh	r2, [r3, #14]
	Slave_1.Transmit_delay 	= 2;
 8003434:	4b5e      	ldr	r3, [pc, #376]	; (80035b0 <main+0x1f8>)
 8003436:	2202      	movs	r2, #2
 8003438:	f8a3 2616 	strh.w	r2, [r3, #1558]	; 0x616
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800343c:	f003 f84c 	bl	80064d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003440:	f000 f8d4 	bl	80035ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003444:	f000 fba8 	bl	8003b98 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8003448:	f000 f940 	bl	80036cc <MX_DMA2D_Init>
  MX_FMC_Init();
 800344c:	f000 fb52 	bl	8003af4 <MX_FMC_Init>
  MX_LTDC_Init();
 8003450:	f000 f96e 	bl	8003730 <MX_LTDC_Init>
  MX_SPI1_Init();
 8003454:	f000 f9ee 	bl	8003834 <MX_SPI1_Init>
  MX_UART7_Init();
 8003458:	f000 faf2 	bl	8003a40 <MX_UART7_Init>
  MX_TIM4_Init();
 800345c:	f000 fa20 	bl	80038a0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8003460:	f000 faa0 	bl	80039a4 <MX_TIM5_Init>





	TIM4->CCR3 = 0;
 8003464:	4b54      	ldr	r3, [pc, #336]	; (80035b8 <main+0x200>)
 8003466:	2200      	movs	r2, #0
 8003468:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 0;
 800346a:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <main+0x200>)
 800346c:	2200      	movs	r2, #0
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003470:	2108      	movs	r1, #8
 8003472:	4852      	ldr	r0, [pc, #328]	; (80035bc <main+0x204>)
 8003474:	f005 fb20 	bl	8008ab8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003478:	210c      	movs	r1, #12
 800347a:	4850      	ldr	r0, [pc, #320]	; (80035bc <main+0x204>)
 800347c:	f005 fb1c 	bl	8008ab8 <HAL_TIM_PWM_Start>


	BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 8003480:	494f      	ldr	r1, [pc, #316]	; (80035c0 <main+0x208>)
 8003482:	4850      	ldr	r0, [pc, #320]	; (80035c4 <main+0x20c>)
 8003484:	f000 fcae 	bl	8003de4 <BSP_SDRAM_Initialization_Sequence>

	HAL_DMA2D_ConfigDeadTime(&hdma2d, 100);
 8003488:	2164      	movs	r1, #100	; 0x64
 800348a:	484f      	ldr	r0, [pc, #316]	; (80035c8 <main+0x210>)
 800348c:	f003 fb62 	bl	8006b54 <HAL_DMA2D_ConfigDeadTime>
	HAL_DMA2D_EnableDeadTime(&hdma2d);
 8003490:	484d      	ldr	r0, [pc, #308]	; (80035c8 <main+0x210>)
 8003492:	f003 fb35 	bl	8006b00 <HAL_DMA2D_EnableDeadTime>

	Page[0] = SDRAM_BANK_ADDR;
 8003496:	4b4d      	ldr	r3, [pc, #308]	; (80035cc <main+0x214>)
 8003498:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800349c:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 29; i++)
 800349e:	2301      	movs	r3, #1
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
 80034a2:	e00f      	b.n	80034c4 <main+0x10c>
	{
		Page[i] = Page[i-1] + (800*480*3);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	3b01      	subs	r3, #1
 80034a8:	4a48      	ldr	r2, [pc, #288]	; (80035cc <main+0x214>)
 80034aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ae:	f503 138c 	add.w	r3, r3, #1146880	; 0x118000
 80034b2:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80034b6:	4945      	ldr	r1, [pc, #276]	; (80035cc <main+0x214>)
 80034b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for(int i = 1; i < 29; i++)
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	3301      	adds	r3, #1
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	2b1c      	cmp	r3, #28
 80034c8:	ddec      	ble.n	80034a4 <main+0xec>
	}

	Screens_init();
 80034ca:	f7fe fa3b 	bl	8001944 <Screens_init>
	HAL_GPIO_WritePin(LTDC_DISP_GPIO_Port, LTDC_DISP_Pin, GPIO_PIN_SET);
 80034ce:	2201      	movs	r2, #1
 80034d0:	2108      	movs	r1, #8
 80034d2:	483f      	ldr	r0, [pc, #252]	; (80035d0 <main+0x218>)
 80034d4:	f003 ff46 	bl	8007364 <HAL_GPIO_WritePin>
	PWM_launch = 1;
 80034d8:	4b3e      	ldr	r3, [pc, #248]	; (80035d4 <main+0x21c>)
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]


	screen = 1;
 80034de:	4b3e      	ldr	r3, [pc, #248]	; (80035d8 <main+0x220>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]


	HAL_TIM_Base_Start_IT(&htim5);
 80034e4:	483d      	ldr	r0, [pc, #244]	; (80035dc <main+0x224>)
 80034e6:	f005 fa1d 	bl	8008924 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


		if(Settings_DB.FlashWriteFlag)
 80034ea:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <main+0x1f0>)
 80034ec:	7c1b      	ldrb	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d051      	beq.n	8003596 <main+0x1de>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034f2:	b672      	cpsid	i
}
 80034f4:	bf00      	nop
		{

			__disable_irq (); // запретить прерывания

			HAL_FLASH_Unlock();
 80034f6:	f003 fbb1 	bl	8006c5c <HAL_FLASH_Unlock>

			FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_1); // стирание сектора 7 (0x08060000)
 80034fa:	2100      	movs	r1, #0
 80034fc:	2007      	movs	r0, #7
 80034fe:	f003 fd1f 	bl	8006f40 <FLASH_Erase_Sector>

			while(FLASH->SR & 0x01){;} // Ждем пока снимется флаг BSY=
 8003502:	bf00      	nop
 8003504:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <main+0x228>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f9      	bne.n	8003504 <main+0x14c>

			uint8_t massive[sizeof(Settings_DB)];
			memcpy(&massive, &Settings_DB, sizeof(Settings_DB));
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <main+0x1f0>)
 8003512:	1d3c      	adds	r4, r7, #4
 8003514:	461d      	mov	r5, r3
 8003516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800351a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800351e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			for(flash_i = 0; flash_i < sizeof(Settings_DB); flash_i++)
 8003522:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <main+0x22c>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e01a      	b.n	8003560 <main+0x1a8>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x08060000 + flash_i, massive[flash_i]);
 800352a:	4b2e      	ldr	r3, [pc, #184]	; (80035e4 <main+0x22c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003532:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 8003536:	4619      	mov	r1, r3
 8003538:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <main+0x22c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3328      	adds	r3, #40	; 0x28
 800353e:	443b      	add	r3, r7
 8003540:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2200      	movs	r2, #0
 8003548:	4698      	mov	r8, r3
 800354a:	4691      	mov	r9, r2
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	2000      	movs	r0, #0
 8003552:	f003 fb2f 	bl	8006bb4 <HAL_FLASH_Program>
			for(flash_i = 0; flash_i < sizeof(Settings_DB); flash_i++)
 8003556:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <main+0x22c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3301      	adds	r3, #1
 800355c:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <main+0x22c>)
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <main+0x22c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b1f      	cmp	r3, #31
 8003566:	d9e0      	bls.n	800352a <main+0x172>
			}

			HAL_FLASH_Lock();
 8003568:	f003 fb9a 	bl	8006ca0 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800356c:	b662      	cpsie	i
}
 800356e:	bf00      	nop
			__enable_irq ();  // разрешить прерывания

			MX_UART7_Init();
 8003570:	f000 fa66 	bl	8003a40 <MX_UART7_Init>

			screen 						= 1;
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <main+0x220>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
			Control_DB.MenuPointer 		= 0;
 800357a:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <main+0x230>)
 800357c:	2200      	movs	r2, #0
 800357e:	801a      	strh	r2, [r3, #0]
			Settings_DB.FlashWriteFlag 	= 0;
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <main+0x1f0>)
 8003582:	2200      	movs	r2, #0
 8003584:	741a      	strb	r2, [r3, #16]
			Control_DB.RazrPointer      = 0;
 8003586:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <main+0x230>)
 8003588:	2200      	movs	r2, #0
 800358a:	805a      	strh	r2, [r3, #2]
			Slave_1.MB_Addr 			= Settings_DB.RS485_ADDR;
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <main+0x1f0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <main+0x1f8>)
 8003594:	711a      	strb	r2, [r3, #4]





	Set_Screen(screen);
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <main+0x220>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fef2 	bl	8002384 <Set_Screen>
  {
 80035a0:	e7a3      	b.n	80034ea <main+0x132>
 80035a2:	bf00      	nop
 80035a4:	200009f0 	.word	0x200009f0
 80035a8:	200009fc 	.word	0x200009fc
 80035ac:	08060000 	.word	0x08060000
 80035b0:	20000348 	.word	0x20000348
 80035b4:	40007800 	.word	0x40007800
 80035b8:	40000800 	.word	0x40000800
 80035bc:	20000240 	.word	0x20000240
 80035c0:	20000960 	.word	0x20000960
 80035c4:	20000314 	.word	0x20000314
 80035c8:	20000100 	.word	0x20000100
 80035cc:	20000974 	.word	0x20000974
 80035d0:	40021000 	.word	0x40021000
 80035d4:	200009ed 	.word	0x200009ed
 80035d8:	20000020 	.word	0x20000020
 80035dc:	20000288 	.word	0x20000288
 80035e0:	40023c00 	.word	0x40023c00
 80035e4:	20000970 	.word	0x20000970
 80035e8:	20000a1c 	.word	0x20000a1c

080035ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b094      	sub	sp, #80	; 0x50
 80035f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035f2:	f107 0320 	add.w	r3, r7, #32
 80035f6:	2230      	movs	r2, #48	; 0x30
 80035f8:	2100      	movs	r1, #0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f007 f9f2 	bl	800a9e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003600:	f107 030c 	add.w	r3, r7, #12
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <SystemClock_Config+0xd8>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <SystemClock_Config+0xd8>)
 800361a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361e:	6413      	str	r3, [r2, #64]	; 0x40
 8003620:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <SystemClock_Config+0xd8>)
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800362c:	2300      	movs	r3, #0
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <SystemClock_Config+0xdc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a24      	ldr	r2, [pc, #144]	; (80036c8 <SystemClock_Config+0xdc>)
 8003636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <SystemClock_Config+0xdc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003648:	2301      	movs	r3, #1
 800364a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800364c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003652:	2302      	movs	r3, #2
 8003654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800365c:	2304      	movs	r3, #4
 800365e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003660:	23b4      	movs	r3, #180	; 0xb4
 8003662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003664:	2302      	movs	r3, #2
 8003666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003668:	2304      	movs	r3, #4
 800366a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800366c:	f107 0320 	add.w	r3, r7, #32
 8003670:	4618      	mov	r0, r3
 8003672:	f004 f9bd 	bl	80079f0 <HAL_RCC_OscConfig>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800367c:	f000 fc10 	bl	8003ea0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003680:	f004 f966 	bl	8007950 <HAL_PWREx_EnableOverDrive>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800368a:	f000 fc09 	bl	8003ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800368e:	230f      	movs	r3, #15
 8003690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003692:	2302      	movs	r3, #2
 8003694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800369a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800369e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036a6:	f107 030c 	add.w	r3, r7, #12
 80036aa:	2105      	movs	r1, #5
 80036ac:	4618      	mov	r0, r3
 80036ae:	f004 fc17 	bl	8007ee0 <HAL_RCC_ClockConfig>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80036b8:	f000 fbf2 	bl	8003ea0 <Error_Handler>
  }
}
 80036bc:	bf00      	nop
 80036be:	3750      	adds	r7, #80	; 0x50
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40007000 	.word	0x40007000

080036cc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80036d0:	4b15      	ldr	r3, [pc, #84]	; (8003728 <MX_DMA2D_Init+0x5c>)
 80036d2:	4a16      	ldr	r2, [pc, #88]	; (800372c <MX_DMA2D_Init+0x60>)
 80036d4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <MX_DMA2D_Init+0x5c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80036dc:	4b12      	ldr	r3, [pc, #72]	; (8003728 <MX_DMA2D_Init+0x5c>)
 80036de:	2201      	movs	r2, #1
 80036e0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80036e2:	4b11      	ldr	r3, [pc, #68]	; (8003728 <MX_DMA2D_Init+0x5c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <MX_DMA2D_Init+0x5c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <MX_DMA2D_Init+0x5c>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <MX_DMA2D_Init+0x5c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <MX_DMA2D_Init+0x5c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003700:	4809      	ldr	r0, [pc, #36]	; (8003728 <MX_DMA2D_Init+0x5c>)
 8003702:	f003 f922 	bl	800694a <HAL_DMA2D_Init>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800370c:	f000 fbc8 	bl	8003ea0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003710:	2101      	movs	r1, #1
 8003712:	4805      	ldr	r0, [pc, #20]	; (8003728 <MX_DMA2D_Init+0x5c>)
 8003714:	f003 f962 	bl	80069dc <HAL_DMA2D_ConfigLayer>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800371e:	f000 fbbf 	bl	8003ea0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000100 	.word	0x20000100
 800372c:	4002b000 	.word	0x4002b000

08003730 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08e      	sub	sp, #56	; 0x38
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	2234      	movs	r2, #52	; 0x34
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f007 f951 	bl	800a9e4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003742:	4b3a      	ldr	r3, [pc, #232]	; (800382c <MX_LTDC_Init+0xfc>)
 8003744:	4a3a      	ldr	r2, [pc, #232]	; (8003830 <MX_LTDC_Init+0x100>)
 8003746:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003748:	4b38      	ldr	r3, [pc, #224]	; (800382c <MX_LTDC_Init+0xfc>)
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800374e:	4b37      	ldr	r3, [pc, #220]	; (800382c <MX_LTDC_Init+0xfc>)
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003754:	4b35      	ldr	r3, [pc, #212]	; (800382c <MX_LTDC_Init+0xfc>)
 8003756:	2200      	movs	r2, #0
 8003758:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800375a:	4b34      	ldr	r3, [pc, #208]	; (800382c <MX_LTDC_Init+0xfc>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 47;
 8003760:	4b32      	ldr	r3, [pc, #200]	; (800382c <MX_LTDC_Init+0xfc>)
 8003762:	222f      	movs	r2, #47	; 0x2f
 8003764:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8003766:	4b31      	ldr	r3, [pc, #196]	; (800382c <MX_LTDC_Init+0xfc>)
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 87;
 800376c:	4b2f      	ldr	r3, [pc, #188]	; (800382c <MX_LTDC_Init+0xfc>)
 800376e:	2257      	movs	r2, #87	; 0x57
 8003770:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 8003772:	4b2e      	ldr	r3, [pc, #184]	; (800382c <MX_LTDC_Init+0xfc>)
 8003774:	221f      	movs	r2, #31
 8003776:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 887;
 8003778:	4b2c      	ldr	r3, [pc, #176]	; (800382c <MX_LTDC_Init+0xfc>)
 800377a:	f240 3277 	movw	r2, #887	; 0x377
 800377e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 511;
 8003780:	4b2a      	ldr	r3, [pc, #168]	; (800382c <MX_LTDC_Init+0xfc>)
 8003782:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 927;
 8003788:	4b28      	ldr	r3, [pc, #160]	; (800382c <MX_LTDC_Init+0xfc>)
 800378a:	f240 329f 	movw	r2, #927	; 0x39f
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 524;
 8003790:	4b26      	ldr	r3, [pc, #152]	; (800382c <MX_LTDC_Init+0xfc>)
 8003792:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003798:	4b24      	ldr	r3, [pc, #144]	; (800382c <MX_LTDC_Init+0xfc>)
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80037a0:	4b22      	ldr	r3, [pc, #136]	; (800382c <MX_LTDC_Init+0xfc>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80037a8:	4b20      	ldr	r3, [pc, #128]	; (800382c <MX_LTDC_Init+0xfc>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80037b0:	481e      	ldr	r0, [pc, #120]	; (800382c <MX_LTDC_Init+0xfc>)
 80037b2:	f003 fdf1 	bl	8007398 <HAL_LTDC_Init>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80037bc:	f000 fb70 	bl	8003ea0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80037c4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80037c8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80037ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80037d2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80037d4:	2301      	movs	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80037d8:	23ff      	movs	r3, #255	; 0xff
 80037da:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80037e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037e4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80037e6:	2307      	movs	r3, #7
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80037ea:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 80037f0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 80037f6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80037fa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	2200      	movs	r2, #0
 8003812:	4619      	mov	r1, r3
 8003814:	4805      	ldr	r0, [pc, #20]	; (800382c <MX_LTDC_Init+0xfc>)
 8003816:	f003 fe8f 	bl	8007538 <HAL_LTDC_ConfigLayer>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8003820:	f000 fb3e 	bl	8003ea0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003824:	bf00      	nop
 8003826:	3738      	adds	r7, #56	; 0x38
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000140 	.word	0x20000140
 8003830:	40016800 	.word	0x40016800

08003834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003838:	4b17      	ldr	r3, [pc, #92]	; (8003898 <MX_SPI1_Init+0x64>)
 800383a:	4a18      	ldr	r2, [pc, #96]	; (800389c <MX_SPI1_Init+0x68>)
 800383c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <MX_SPI1_Init+0x64>)
 8003840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003846:	4b14      	ldr	r3, [pc, #80]	; (8003898 <MX_SPI1_Init+0x64>)
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <MX_SPI1_Init+0x64>)
 800384e:	2200      	movs	r2, #0
 8003850:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <MX_SPI1_Init+0x64>)
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <MX_SPI1_Init+0x64>)
 800385a:	2200      	movs	r2, #0
 800385c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800385e:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <MX_SPI1_Init+0x64>)
 8003860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <MX_SPI1_Init+0x64>)
 8003868:	2218      	movs	r2, #24
 800386a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <MX_SPI1_Init+0x64>)
 800386e:	2200      	movs	r2, #0
 8003870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <MX_SPI1_Init+0x64>)
 8003874:	2200      	movs	r2, #0
 8003876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <MX_SPI1_Init+0x64>)
 800387a:	2200      	movs	r2, #0
 800387c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <MX_SPI1_Init+0x64>)
 8003880:	220a      	movs	r2, #10
 8003882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <MX_SPI1_Init+0x64>)
 8003886:	f004 ff74 	bl	8008772 <HAL_SPI_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003890:	f000 fb06 	bl	8003ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}
 8003898:	200001e8 	.word	0x200001e8
 800389c:	40013000 	.word	0x40013000

080038a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08e      	sub	sp, #56	; 0x38
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b4:	f107 0320 	add.w	r3, r7, #32
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	611a      	str	r2, [r3, #16]
 80038cc:	615a      	str	r2, [r3, #20]
 80038ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <MX_TIM4_Init+0xfc>)
 80038d2:	4a33      	ldr	r2, [pc, #204]	; (80039a0 <MX_TIM4_Init+0x100>)
 80038d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <MX_TIM4_Init+0xfc>)
 80038d8:	2200      	movs	r2, #0
 80038da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038dc:	4b2f      	ldr	r3, [pc, #188]	; (800399c <MX_TIM4_Init+0xfc>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80038e2:	4b2e      	ldr	r3, [pc, #184]	; (800399c <MX_TIM4_Init+0xfc>)
 80038e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80038e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ea:	4b2c      	ldr	r3, [pc, #176]	; (800399c <MX_TIM4_Init+0xfc>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <MX_TIM4_Init+0xfc>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80038f6:	4829      	ldr	r0, [pc, #164]	; (800399c <MX_TIM4_Init+0xfc>)
 80038f8:	f004 ffc4 	bl	8008884 <HAL_TIM_Base_Init>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003902:	f000 facd 	bl	8003ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800390c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003910:	4619      	mov	r1, r3
 8003912:	4822      	ldr	r0, [pc, #136]	; (800399c <MX_TIM4_Init+0xfc>)
 8003914:	f005 fb62 	bl	8008fdc <HAL_TIM_ConfigClockSource>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800391e:	f000 fabf 	bl	8003ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003922:	481e      	ldr	r0, [pc, #120]	; (800399c <MX_TIM4_Init+0xfc>)
 8003924:	f005 f86e 	bl	8008a04 <HAL_TIM_PWM_Init>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800392e:	f000 fab7 	bl	8003ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800393a:	f107 0320 	add.w	r3, r7, #32
 800393e:	4619      	mov	r1, r3
 8003940:	4816      	ldr	r0, [pc, #88]	; (800399c <MX_TIM4_Init+0xfc>)
 8003942:	f005 ff55 	bl	80097f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800394c:	f000 faa8 	bl	8003ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003950:	2360      	movs	r3, #96	; 0x60
 8003952:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003960:	1d3b      	adds	r3, r7, #4
 8003962:	2208      	movs	r2, #8
 8003964:	4619      	mov	r1, r3
 8003966:	480d      	ldr	r0, [pc, #52]	; (800399c <MX_TIM4_Init+0xfc>)
 8003968:	f005 fa76 	bl	8008e58 <HAL_TIM_PWM_ConfigChannel>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003972:	f000 fa95 	bl	8003ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003976:	1d3b      	adds	r3, r7, #4
 8003978:	220c      	movs	r2, #12
 800397a:	4619      	mov	r1, r3
 800397c:	4807      	ldr	r0, [pc, #28]	; (800399c <MX_TIM4_Init+0xfc>)
 800397e:	f005 fa6b 	bl	8008e58 <HAL_TIM_PWM_ConfigChannel>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8003988:	f000 fa8a 	bl	8003ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800398c:	4803      	ldr	r0, [pc, #12]	; (800399c <MX_TIM4_Init+0xfc>)
 800398e:	f000 fc53 	bl	8004238 <HAL_TIM_MspPostInit>

}
 8003992:	bf00      	nop
 8003994:	3738      	adds	r7, #56	; 0x38
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000240 	.word	0x20000240
 80039a0:	40000800 	.word	0x40000800

080039a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	609a      	str	r2, [r3, #8]
 80039b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039b8:	463b      	mov	r3, r7
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80039c0:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <MX_TIM5_Init+0x90>)
 80039c2:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <MX_TIM5_Init+0x94>)
 80039c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <MX_TIM5_Init+0x90>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <MX_TIM5_Init+0x90>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90000;
 80039d2:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <MX_TIM5_Init+0x90>)
 80039d4:	4a19      	ldr	r2, [pc, #100]	; (8003a3c <MX_TIM5_Init+0x98>)
 80039d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d8:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <MX_TIM5_Init+0x90>)
 80039da:	2200      	movs	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <MX_TIM5_Init+0x90>)
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80039e4:	4813      	ldr	r0, [pc, #76]	; (8003a34 <MX_TIM5_Init+0x90>)
 80039e6:	f004 ff4d 	bl	8008884 <HAL_TIM_Base_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80039f0:	f000 fa56 	bl	8003ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	4619      	mov	r1, r3
 8003a00:	480c      	ldr	r0, [pc, #48]	; (8003a34 <MX_TIM5_Init+0x90>)
 8003a02:	f005 faeb 	bl	8008fdc <HAL_TIM_ConfigClockSource>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8003a0c:	f000 fa48 	bl	8003ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a10:	2300      	movs	r3, #0
 8003a12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a18:	463b      	mov	r3, r7
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4805      	ldr	r0, [pc, #20]	; (8003a34 <MX_TIM5_Init+0x90>)
 8003a1e:	f005 fee7 	bl	80097f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8003a28:	f000 fa3a 	bl	8003ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003a2c:	bf00      	nop
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000288 	.word	0x20000288
 8003a38:	40000c00 	.word	0x40000c00
 8003a3c:	00015f90 	.word	0x00015f90

08003a40 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */

	  huart7.Instance = UART7;
 8003a44:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003a46:	4a29      	ldr	r2, [pc, #164]	; (8003aec <MX_UART7_Init+0xac>)
 8003a48:	601a      	str	r2, [r3, #0]

	  huart7.Init.BaudRate = Settings_DB.RS485_Speed;
 8003a4a:	4b29      	ldr	r3, [pc, #164]	; (8003af0 <MX_UART7_Init+0xb0>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003a52:	605a      	str	r2, [r3, #4]

	  if(Settings_DB.RS485_Parity)
 8003a54:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <MX_UART7_Init+0xb0>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <MX_UART7_Init+0x26>
	  {
		  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8003a5c:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	e002      	b.n	8003a6c <MX_UART7_Init+0x2c>
	  }
	  else
	  {
		  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
	  }

	  if(Settings_DB.RS485_Stops == 1)
 8003a6c:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <MX_UART7_Init+0xb0>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d103      	bne.n	8003a7c <MX_UART7_Init+0x3c>
	  {
		  huart7.Init.StopBits = UART_STOPBITS_1;
 8003a74:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	e003      	b.n	8003a84 <MX_UART7_Init+0x44>
	  }
	  else
	  {
		  huart7.Init.StopBits = UART_STOPBITS_2;
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a82:	60da      	str	r2, [r3, #12]
	  }

	  switch(Settings_DB.RS485_Parity)
 8003a84:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <MX_UART7_Init+0xb0>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d00f      	beq.n	8003aac <MX_UART7_Init+0x6c>
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	dc12      	bgt.n	8003ab6 <MX_UART7_Init+0x76>
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <MX_UART7_Init+0x5a>
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d004      	beq.n	8003aa2 <MX_UART7_Init+0x62>
 8003a98:	e00d      	b.n	8003ab6 <MX_UART7_Init+0x76>
	  {
	  	  case 0:
	  		  huart7.Init.Parity = UART_PARITY_NONE;
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	611a      	str	r2, [r3, #16]
	      break;
 8003aa0:	e009      	b.n	8003ab6 <MX_UART7_Init+0x76>
	  	  case 1:
	  		  huart7.Init.Parity = UART_PARITY_EVEN;
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aa8:	611a      	str	r2, [r3, #16]
	      break;
 8003aaa:	e004      	b.n	8003ab6 <MX_UART7_Init+0x76>
	  	  case 2:
	  		  huart7.Init.Parity = UART_PARITY_ODD;
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003aae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003ab2:	611a      	str	r2, [r3, #16]
	      break;
 8003ab4:	bf00      	nop
	  }

	  huart7.Init.Mode = UART_MODE_TX_RX;
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003ab8:	220c      	movs	r2, #12
 8003aba:	615a      	str	r2, [r3, #20]
	  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	619a      	str	r2, [r3, #24]
	  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003ac8:	4807      	ldr	r0, [pc, #28]	; (8003ae8 <MX_UART7_Init+0xa8>)
 8003aca:	f005 ff21 	bl	8009910 <HAL_UART_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_UART7_Init+0x98>
	  {
	    Error_Handler();
 8003ad4:	f000 f9e4 	bl	8003ea0 <Error_Handler>
	  }

  /* USER CODE BEGIN UART7_Init 2 */
  UART7->CR1 |= 0x20;
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <MX_UART7_Init+0xac>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4a03      	ldr	r2, [pc, #12]	; (8003aec <MX_UART7_Init+0xac>)
 8003ade:	f043 0320 	orr.w	r3, r3, #32
 8003ae2:	60d3      	str	r3, [r2, #12]
  /* USER CODE END UART7_Init 2 */

}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200002d0 	.word	0x200002d0
 8003aec:	40007800 	.word	0x40007800
 8003af0:	200009fc 	.word	0x200009fc

08003af4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	611a      	str	r2, [r3, #16]
 8003b08:	615a      	str	r2, [r3, #20]
 8003b0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003b0c:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b0e:	4a21      	ldr	r2, [pc, #132]	; (8003b94 <MX_FMC_Init+0xa0>)
 8003b10:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003b12:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8003b18:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8003b1e:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b20:	2208      	movs	r2, #8
 8003b22:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003b24:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b26:	2210      	movs	r2, #16
 8003b28:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b2c:	2240      	movs	r2, #64	; 0x40
 8003b2e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8003b30:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b36:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b38:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003b3e:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b44:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8003b4e:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8003b56:	2302      	movs	r3, #2
 8003b58:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 5;
 8003b5e:	2305      	movs	r3, #5
 8003b60:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 8;
 8003b62:	2308      	movs	r3, #8
 8003b64:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 8003b66:	2304      	movs	r3, #4
 8003b68:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003b72:	1d3b      	adds	r3, r7, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4806      	ldr	r0, [pc, #24]	; (8003b90 <MX_FMC_Init+0x9c>)
 8003b78:	f004 fd92 	bl	80086a0 <HAL_SDRAM_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8003b82:	f000 f98d 	bl	8003ea0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003b86:	bf00      	nop
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000314 	.word	0x20000314
 8003b94:	a0000140 	.word	0xa0000140

08003b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b090      	sub	sp, #64	; 0x40
 8003b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
 8003baa:	60da      	str	r2, [r3, #12]
 8003bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb2:	4b84      	ldr	r3, [pc, #528]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4a83      	ldr	r2, [pc, #524]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003bb8:	f043 0310 	orr.w	r3, r3, #16
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	4b7d      	ldr	r3, [pc, #500]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	4a7c      	ldr	r2, [pc, #496]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bda:	4b7a      	ldr	r3, [pc, #488]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	623b      	str	r3, [r7, #32]
 8003bea:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	4a75      	ldr	r2, [pc, #468]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003bf0:	f043 0320 	orr.w	r3, r3, #32
 8003bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf6:	4b73      	ldr	r3, [pc, #460]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	623b      	str	r3, [r7, #32]
 8003c00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	4b6f      	ldr	r3, [pc, #444]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a6e      	ldr	r2, [pc, #440]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
 8003c12:	4b6c      	ldr	r3, [pc, #432]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	4b68      	ldr	r3, [pc, #416]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	4a67      	ldr	r2, [pc, #412]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c28:	f043 0304 	orr.w	r3, r3, #4
 8003c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2e:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	4b61      	ldr	r3, [pc, #388]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a60      	ldr	r2, [pc, #384]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4a:	4b5e      	ldr	r3, [pc, #376]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	4b5a      	ldr	r3, [pc, #360]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4a59      	ldr	r2, [pc, #356]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	6313      	str	r3, [r2, #48]	; 0x30
 8003c66:	4b57      	ldr	r3, [pc, #348]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	4a52      	ldr	r2, [pc, #328]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c80:	6313      	str	r3, [r2, #48]	; 0x30
 8003c82:	4b50      	ldr	r3, [pc, #320]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	4b4c      	ldr	r3, [pc, #304]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	4a4b      	ldr	r2, [pc, #300]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9e:	4b49      	ldr	r3, [pc, #292]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	4b45      	ldr	r3, [pc, #276]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	4a44      	ldr	r2, [pc, #272]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003cb4:	f043 0308 	orr.w	r3, r3, #8
 8003cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cba:	4b42      	ldr	r3, [pc, #264]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4a3d      	ldr	r2, [pc, #244]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003cd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd6:	4b3b      	ldr	r3, [pc, #236]	; (8003dc4 <MX_GPIO_Init+0x22c>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_DISP_GPIO_Port, LTDC_DISP_Pin, GPIO_PIN_RESET);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2108      	movs	r1, #8
 8003ce6:	4838      	ldr	r0, [pc, #224]	; (8003dc8 <MX_GPIO_Init+0x230>)
 8003ce8:	f003 fb3c 	bl	8007364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485DE_GPIO_Port, RS485DE_Pin, GPIO_PIN_RESET);
 8003cec:	2200      	movs	r2, #0
 8003cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cf2:	4836      	ldr	r0, [pc, #216]	; (8003dcc <MX_GPIO_Init+0x234>)
 8003cf4:	f003 fb36 	bl	8007364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	2110      	movs	r1, #16
 8003cfc:	4834      	ldr	r0, [pc, #208]	; (8003dd0 <MX_GPIO_Init+0x238>)
 8003cfe:	f003 fb31 	bl	8007364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_DISP_Pin */
  GPIO_InitStruct.Pin = LTDC_DISP_Pin;
 8003d02:	2308      	movs	r3, #8
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d06:	2301      	movs	r3, #1
 8003d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LTDC_DISP_GPIO_Port, &GPIO_InitStruct);
 8003d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d16:	4619      	mov	r1, r3
 8003d18:	482b      	ldr	r0, [pc, #172]	; (8003dc8 <MX_GPIO_Init+0x230>)
 8003d1a:	f003 f95f 	bl	8006fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485DE_Pin */
  GPIO_InitStruct.Pin = RS485DE_Pin;
 8003d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d24:	2301      	movs	r3, #1
 8003d26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(RS485DE_GPIO_Port, &GPIO_InitStruct);
 8003d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d34:	4619      	mov	r1, r3
 8003d36:	4825      	ldr	r0, [pc, #148]	; (8003dcc <MX_GPIO_Init+0x234>)
 8003d38:	f003 f950 	bl	8006fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d40:	2301      	movs	r3, #1
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d44:	2301      	movs	r3, #1
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d50:	4619      	mov	r1, r3
 8003d52:	481f      	ldr	r0, [pc, #124]	; (8003dd0 <MX_GPIO_Init+0x238>)
 8003d54:	f003 f942 	bl	8006fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 8003d58:	2320      	movs	r3, #32
 8003d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d60:	2301      	movs	r3, #1
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8003d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d68:	4619      	mov	r1, r3
 8003d6a:	481a      	ldr	r0, [pc, #104]	; (8003dd4 <MX_GPIO_Init+0x23c>)
 8003d6c:	f003 f936 	bl	8006fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin BUTTON_4_Pin BUTTON_5_Pin
                           BUTTON_6_Pin BUTTON_7_Pin BUTTON_8_Pin BUTTON_16_Pin
                           BUTTON_15_Pin BUTTON_14_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_4_Pin|BUTTON_5_Pin
 8003d70:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BUTTON_6_Pin|BUTTON_7_Pin|BUTTON_8_Pin|BUTTON_16_Pin
                          |BUTTON_15_Pin|BUTTON_14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d76:	2300      	movs	r3, #0
 8003d78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d82:	4619      	mov	r1, r3
 8003d84:	4814      	ldr	r0, [pc, #80]	; (8003dd8 <MX_GPIO_Init+0x240>)
 8003d86:	f003 f929 	bl	8006fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_12_Pin BUTTON_11_Pin BUTTON_10_Pin BUTTON_9_Pin */
  GPIO_InitStruct.Pin = BUTTON_12_Pin|BUTTON_11_Pin|BUTTON_10_Pin|BUTTON_9_Pin;
 8003d8a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d90:	2300      	movs	r3, #0
 8003d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d94:	2301      	movs	r3, #1
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	480f      	ldr	r0, [pc, #60]	; (8003ddc <MX_GPIO_Init+0x244>)
 8003da0:	f003 f91c 	bl	8006fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_13_Pin */
  GPIO_InitStruct.Pin = BUTTON_13_Pin;
 8003da4:	2301      	movs	r3, #1
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003da8:	2300      	movs	r3, #0
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dac:	2301      	movs	r3, #1
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_13_GPIO_Port, &GPIO_InitStruct);
 8003db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003db4:	4619      	mov	r1, r3
 8003db6:	480a      	ldr	r0, [pc, #40]	; (8003de0 <MX_GPIO_Init+0x248>)
 8003db8:	f003 f910 	bl	8006fdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003dbc:	bf00      	nop
 8003dbe:	3740      	adds	r7, #64	; 0x40
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40021400 	.word	0x40021400
 8003dd0:	40020000 	.word	0x40020000
 8003dd4:	40022400 	.word	0x40022400
 8003dd8:	40021c00 	.word	0x40021c00
 8003ddc:	40020800 	.word	0x40020800
 8003de0:	40022000 	.word	0x40022000

08003de4 <BSP_SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */

void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command){
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2210      	movs	r2, #16
 8003dfc:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2201      	movs	r2, #1
 8003e02:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f004 fc79 	bl	8008708 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003e16:	2001      	movs	r0, #1
 8003e18:	f002 fbd0 	bl	80065bc <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2210      	movs	r2, #16
 8003e26:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2200      	movs	r2, #0
 8003e32:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e38:	6839      	ldr	r1, [r7, #0]
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f004 fc64 	bl	8008708 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2203      	movs	r2, #3
 8003e44:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2210      	movs	r2, #16
 8003e4a:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2208      	movs	r2, #8
 8003e50:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2200      	movs	r2, #0
 8003e56:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f004 fc52 	bl	8008708 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003e64:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003e68:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2210      	movs	r2, #16
 8003e74:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e86:	6839      	ldr	r1, [r7, #0]
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f004 fc3d 	bl	8008708 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  //hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
  hsdram->Instance->SDRTR = ((uint32_t)(64000*65/4096-20) << 1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8003e96:	615a      	str	r2, [r3, #20]
};
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ea4:	b672      	cpsid	i
}
 8003ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ea8:	e7fe      	b.n	8003ea8 <Error_Handler+0x8>
	...

08003eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <HAL_MspInit+0x4c>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	4a0f      	ldr	r2, [pc, #60]	; (8003ef8 <HAL_MspInit+0x4c>)
 8003ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <HAL_MspInit+0x4c>)
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_MspInit+0x4c>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <HAL_MspInit+0x4c>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003edc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_MspInit+0x4c>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800

08003efc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a0b      	ldr	r2, [pc, #44]	; (8003f38 <HAL_DMA2D_MspInit+0x3c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d10d      	bne.n	8003f2a <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_DMA2D_MspInit+0x40>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <HAL_DMA2D_MspInit+0x40>)
 8003f18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <HAL_DMA2D_MspInit+0x40>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003f2a:	bf00      	nop
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	4002b000 	.word	0x4002b000
 8003f3c:	40023800 	.word	0x40023800

08003f40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b09a      	sub	sp, #104	; 0x68
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f5c:	2230      	movs	r2, #48	; 0x30
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f006 fd3f 	bl	800a9e4 <memset>
  if(hltdc->Instance==LTDC)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a69      	ldr	r2, [pc, #420]	; (8004110 <HAL_LTDC_MspInit+0x1d0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	f040 80ca 	bne.w	8004106 <HAL_LTDC_MspInit+0x1c6>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f72:	2308      	movs	r3, #8
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003f76:	2332      	movs	r3, #50	; 0x32
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f86:	4618      	mov	r0, r3
 8003f88:	f004 f9ca 	bl	8008320 <HAL_RCCEx_PeriphCLKConfig>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003f92:	f7ff ff85 	bl	8003ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	4b5e      	ldr	r3, [pc, #376]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	4a5d      	ldr	r2, [pc, #372]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003fa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fa6:	4b5b      	ldr	r3, [pc, #364]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	4b57      	ldr	r3, [pc, #348]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	4a56      	ldr	r2, [pc, #344]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc2:	4b54      	ldr	r3, [pc, #336]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	4b50      	ldr	r3, [pc, #320]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	4a4f      	ldr	r2, [pc, #316]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003fd8:	f043 0320 	orr.w	r3, r3, #32
 8003fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fde:	4b4d      	ldr	r3, [pc, #308]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	61bb      	str	r3, [r7, #24]
 8003fe8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	4b49      	ldr	r3, [pc, #292]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4a48      	ldr	r2, [pc, #288]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003ff4:	f043 0302 	orr.w	r3, r3, #2
 8003ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffa:	4b46      	ldr	r3, [pc, #280]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	4b42      	ldr	r3, [pc, #264]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4a41      	ldr	r2, [pc, #260]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8004010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004014:	6313      	str	r3, [r2, #48]	; 0x30
 8004016:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	4b3b      	ldr	r3, [pc, #236]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a3a      	ldr	r2, [pc, #232]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 800402c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b38      	ldr	r3, [pc, #224]	; (8004114 <HAL_LTDC_MspInit+0x1d4>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
    PK3     ------> LTDC_B4
    PK4     ------> LTDC_B5
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800403e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004042:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004044:	2302      	movs	r3, #2
 8004046:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404c:	2303      	movs	r3, #3
 800404e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004050:	230e      	movs	r3, #14
 8004052:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004054:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004058:	4619      	mov	r1, r3
 800405a:	482f      	ldr	r0, [pc, #188]	; (8004118 <HAL_LTDC_MspInit+0x1d8>)
 800405c:	f002 ffbe 	bl	8006fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004064:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004066:	2302      	movs	r3, #2
 8004068:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406e:	2303      	movs	r3, #3
 8004070:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004072:	230e      	movs	r3, #14
 8004074:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004076:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800407a:	4619      	mov	r1, r3
 800407c:	4827      	ldr	r0, [pc, #156]	; (800411c <HAL_LTDC_MspInit+0x1dc>)
 800407e:	f002 ffad 	bl	8006fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004082:	2302      	movs	r3, #2
 8004084:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004086:	2302      	movs	r3, #2
 8004088:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408e:	2303      	movs	r3, #3
 8004090:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004092:	2309      	movs	r3, #9
 8004094:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004096:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800409a:	4619      	mov	r1, r3
 800409c:	4820      	ldr	r0, [pc, #128]	; (8004120 <HAL_LTDC_MspInit+0x1e0>)
 800409e:	f002 ff9d 	bl	8006fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80040a2:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80040a6:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b0:	2303      	movs	r3, #3
 80040b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040b4:	230e      	movs	r3, #14
 80040b6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80040b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040bc:	4619      	mov	r1, r3
 80040be:	4819      	ldr	r0, [pc, #100]	; (8004124 <HAL_LTDC_MspInit+0x1e4>)
 80040c0:	f002 ff8c 	bl	8006fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040c8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	2302      	movs	r3, #2
 80040cc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d2:	2303      	movs	r3, #3
 80040d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040d6:	230e      	movs	r3, #14
 80040d8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040de:	4619      	mov	r1, r3
 80040e0:	480f      	ldr	r0, [pc, #60]	; (8004120 <HAL_LTDC_MspInit+0x1e0>)
 80040e2:	f002 ff7b 	bl	8006fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80040e6:	237f      	movs	r3, #127	; 0x7f
 80040e8:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ea:	2302      	movs	r3, #2
 80040ec:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f2:	2303      	movs	r3, #3
 80040f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040f6:	230e      	movs	r3, #14
 80040f8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80040fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040fe:	4619      	mov	r1, r3
 8004100:	4809      	ldr	r0, [pc, #36]	; (8004128 <HAL_LTDC_MspInit+0x1e8>)
 8004102:	f002 ff6b 	bl	8006fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004106:	bf00      	nop
 8004108:	3768      	adds	r7, #104	; 0x68
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40016800 	.word	0x40016800
 8004114:	40023800 	.word	0x40023800
 8004118:	40022000 	.word	0x40022000
 800411c:	40021400 	.word	0x40021400
 8004120:	40020400 	.word	0x40020400
 8004124:	40022400 	.word	0x40022400
 8004128:	40022800 	.word	0x40022800

0800412c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	; 0x28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <HAL_SPI_MspInit+0x84>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d12b      	bne.n	80041a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	4b18      	ldr	r3, [pc, #96]	; (80041b4 <HAL_SPI_MspInit+0x88>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	4a17      	ldr	r2, [pc, #92]	; (80041b4 <HAL_SPI_MspInit+0x88>)
 8004158:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800415c:	6453      	str	r3, [r2, #68]	; 0x44
 800415e:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <HAL_SPI_MspInit+0x88>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <HAL_SPI_MspInit+0x88>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <HAL_SPI_MspInit+0x88>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6313      	str	r3, [r2, #48]	; 0x30
 800417a:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <HAL_SPI_MspInit+0x88>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004186:	23e0      	movs	r3, #224	; 0xe0
 8004188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418a:	2302      	movs	r3, #2
 800418c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004192:	2303      	movs	r3, #3
 8004194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004196:	2305      	movs	r3, #5
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800419a:	f107 0314 	add.w	r3, r7, #20
 800419e:	4619      	mov	r1, r3
 80041a0:	4805      	ldr	r0, [pc, #20]	; (80041b8 <HAL_SPI_MspInit+0x8c>)
 80041a2:	f002 ff1b 	bl	8006fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80041a6:	bf00      	nop
 80041a8:	3728      	adds	r7, #40	; 0x28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40013000 	.word	0x40013000
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40020000 	.word	0x40020000

080041bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a18      	ldr	r2, [pc, #96]	; (800422c <HAL_TIM_Base_MspInit+0x70>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <HAL_TIM_Base_MspInit+0x74>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4a16      	ldr	r2, [pc, #88]	; (8004230 <HAL_TIM_Base_MspInit+0x74>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	6413      	str	r3, [r2, #64]	; 0x40
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_TIM_Base_MspInit+0x74>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80041ea:	e01a      	b.n	8004222 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a10      	ldr	r2, [pc, #64]	; (8004234 <HAL_TIM_Base_MspInit+0x78>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d115      	bne.n	8004222 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <HAL_TIM_Base_MspInit+0x74>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a0c      	ldr	r2, [pc, #48]	; (8004230 <HAL_TIM_Base_MspInit+0x74>)
 8004200:	f043 0308 	orr.w	r3, r3, #8
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_TIM_Base_MspInit+0x74>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8004212:	2200      	movs	r2, #0
 8004214:	2101      	movs	r1, #1
 8004216:	2032      	movs	r0, #50	; 0x32
 8004218:	f002 facf 	bl	80067ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800421c:	2032      	movs	r0, #50	; 0x32
 800421e:	f002 fae8 	bl	80067f2 <HAL_NVIC_EnableIRQ>
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40000800 	.word	0x40000800
 8004230:	40023800 	.word	0x40023800
 8004234:	40000c00 	.word	0x40000c00

08004238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 030c 	add.w	r3, r7, #12
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <HAL_TIM_MspPostInit+0x68>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d11e      	bne.n	8004298 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <HAL_TIM_MspPostInit+0x6c>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	4a10      	ldr	r2, [pc, #64]	; (80042a4 <HAL_TIM_MspPostInit+0x6c>)
 8004264:	f043 0302 	orr.w	r3, r3, #2
 8004268:	6313      	str	r3, [r2, #48]	; 0x30
 800426a:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <HAL_TIM_MspPostInit+0x6c>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800427a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427c:	2302      	movs	r3, #2
 800427e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004284:	2300      	movs	r3, #0
 8004286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004288:	2302      	movs	r3, #2
 800428a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800428c:	f107 030c 	add.w	r3, r7, #12
 8004290:	4619      	mov	r1, r3
 8004292:	4805      	ldr	r0, [pc, #20]	; (80042a8 <HAL_TIM_MspPostInit+0x70>)
 8004294:	f002 fea2 	bl	8006fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004298:	bf00      	nop
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40020400 	.word	0x40020400

080042ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	; 0x28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	609a      	str	r2, [r3, #8]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <HAL_UART_MspInit+0x94>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d133      	bne.n	8004336 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	4b1c      	ldr	r3, [pc, #112]	; (8004344 <HAL_UART_MspInit+0x98>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <HAL_UART_MspInit+0x98>)
 80042d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042dc:	6413      	str	r3, [r2, #64]	; 0x40
 80042de:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_UART_MspInit+0x98>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <HAL_UART_MspInit+0x98>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	4a14      	ldr	r2, [pc, #80]	; (8004344 <HAL_UART_MspInit+0x98>)
 80042f4:	f043 0320 	orr.w	r3, r3, #32
 80042f8:	6313      	str	r3, [r2, #48]	; 0x30
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <HAL_UART_MspInit+0x98>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004306:	23c0      	movs	r3, #192	; 0xc0
 8004308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	2302      	movs	r3, #2
 800430c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004312:	2303      	movs	r3, #3
 8004314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004316:	2308      	movs	r3, #8
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800431a:	f107 0314 	add.w	r3, r7, #20
 800431e:	4619      	mov	r1, r3
 8004320:	4809      	ldr	r0, [pc, #36]	; (8004348 <HAL_UART_MspInit+0x9c>)
 8004322:	f002 fe5b 	bl	8006fdc <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8004326:	2200      	movs	r2, #0
 8004328:	2100      	movs	r1, #0
 800432a:	2052      	movs	r0, #82	; 0x52
 800432c:	f002 fa45 	bl	80067ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004330:	2052      	movs	r0, #82	; 0x52
 8004332:	f002 fa5e 	bl	80067f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8004336:	bf00      	nop
 8004338:	3728      	adds	r7, #40	; 0x28
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40007800 	.word	0x40007800
 8004344:	40023800 	.word	0x40023800
 8004348:	40021400 	.word	0x40021400

0800434c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004352:	1d3b      	adds	r3, r7, #4
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004360:	4b34      	ldr	r3, [pc, #208]	; (8004434 <HAL_FMC_MspInit+0xe8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d160      	bne.n	800442a <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 8004368:	4b32      	ldr	r3, [pc, #200]	; (8004434 <HAL_FMC_MspInit+0xe8>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	4b31      	ldr	r3, [pc, #196]	; (8004438 <HAL_FMC_MspInit+0xec>)
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	4a30      	ldr	r2, [pc, #192]	; (8004438 <HAL_FMC_MspInit+0xec>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6393      	str	r3, [r2, #56]	; 0x38
 800437e:	4b2e      	ldr	r3, [pc, #184]	; (8004438 <HAL_FMC_MspInit+0xec>)
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800438a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800438e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004390:	2302      	movs	r3, #2
 8004392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004398:	2303      	movs	r3, #3
 800439a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800439c:	230c      	movs	r3, #12
 800439e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043a0:	1d3b      	adds	r3, r7, #4
 80043a2:	4619      	mov	r1, r3
 80043a4:	4825      	ldr	r0, [pc, #148]	; (800443c <HAL_FMC_MspInit+0xf0>)
 80043a6:	f002 fe19 	bl	8006fdc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80043aa:	230d      	movs	r3, #13
 80043ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ae:	2302      	movs	r3, #2
 80043b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b6:	2303      	movs	r3, #3
 80043b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043ba:	230c      	movs	r3, #12
 80043bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043be:	1d3b      	adds	r3, r7, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	481f      	ldr	r0, [pc, #124]	; (8004440 <HAL_FMC_MspInit+0xf4>)
 80043c4:	f002 fe0a 	bl	8006fdc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80043c8:	f248 1337 	movw	r3, #33079	; 0x8137
 80043cc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ce:	2302      	movs	r3, #2
 80043d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d6:	2303      	movs	r3, #3
 80043d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043da:	230c      	movs	r3, #12
 80043dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4818      	ldr	r0, [pc, #96]	; (8004444 <HAL_FMC_MspInit+0xf8>)
 80043e4:	f002 fdfa 	bl	8006fdc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80043e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80043ec:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ee:	2302      	movs	r3, #2
 80043f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f6:	2303      	movs	r3, #3
 80043f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043fa:	230c      	movs	r3, #12
 80043fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4811      	ldr	r0, [pc, #68]	; (8004448 <HAL_FMC_MspInit+0xfc>)
 8004404:	f002 fdea 	bl	8006fdc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004408:	f24c 7303 	movw	r3, #50947	; 0xc703
 800440c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440e:	2302      	movs	r3, #2
 8004410:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004416:	2303      	movs	r3, #3
 8004418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800441a:	230c      	movs	r3, #12
 800441c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	4619      	mov	r1, r3
 8004422:	480a      	ldr	r0, [pc, #40]	; (800444c <HAL_FMC_MspInit+0x100>)
 8004424:	f002 fdda 	bl	8006fdc <HAL_GPIO_Init>
 8004428:	e000      	b.n	800442c <HAL_FMC_MspInit+0xe0>
    return;
 800442a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000a30 	.word	0x20000a30
 8004438:	40023800 	.word	0x40023800
 800443c:	40021400 	.word	0x40021400
 8004440:	40020800 	.word	0x40020800
 8004444:	40021800 	.word	0x40021800
 8004448:	40021000 	.word	0x40021000
 800444c:	40020c00 	.word	0x40020c00

08004450 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004458:	f7ff ff78 	bl	800434c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004468:	e7fe      	b.n	8004468 <NMI_Handler+0x4>

0800446a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800446a:	b480      	push	{r7}
 800446c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800446e:	e7fe      	b.n	800446e <HardFault_Handler+0x4>

08004470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004474:	e7fe      	b.n	8004474 <MemManage_Handler+0x4>

08004476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004476:	b480      	push	{r7}
 8004478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800447a:	e7fe      	b.n	800447a <BusFault_Handler+0x4>

0800447c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004480:	e7fe      	b.n	8004480 <UsageFault_Handler+0x4>

08004482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004482:	b480      	push	{r7}
 8004484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004486:	bf00      	nop
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004494:	bf00      	nop
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	timer_1++;
 80044b2:	4b41      	ldr	r3, [pc, #260]	; (80045b8 <SysTick_Handler+0x10c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a3f      	ldr	r2, [pc, #252]	; (80045b8 <SysTick_Handler+0x10c>)
 80044ba:	6013      	str	r3, [r2, #0]

	if(PassW_block.PassFalseTimer){PassW_block.PassFalseTimer--;}
 80044bc:	4b3f      	ldr	r3, [pc, #252]	; (80045bc <SysTick_Handler+0x110>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d004      	beq.n	80044ce <SysTick_Handler+0x22>
 80044c4:	4b3d      	ldr	r3, [pc, #244]	; (80045bc <SysTick_Handler+0x110>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	4a3c      	ldr	r2, [pc, #240]	; (80045bc <SysTick_Handler+0x110>)
 80044cc:	6093      	str	r3, [r2, #8]

	if(PWM_launch)
 80044ce:	4b3c      	ldr	r3, [pc, #240]	; (80045c0 <SysTick_Handler+0x114>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d065      	beq.n	80045a2 <SysTick_Handler+0xf6>
	{

		if(brightness_disp < 10000){brightness_disp += 1;}
 80044d6:	4b3b      	ldr	r3, [pc, #236]	; (80045c4 <SysTick_Handler+0x118>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f242 720f 	movw	r2, #9999	; 0x270f
 80044de:	4293      	cmp	r3, r2
 80044e0:	d804      	bhi.n	80044ec <SysTick_Handler+0x40>
 80044e2:	4b38      	ldr	r3, [pc, #224]	; (80045c4 <SysTick_Handler+0x118>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	4a36      	ldr	r2, [pc, #216]	; (80045c4 <SysTick_Handler+0x118>)
 80044ea:	6013      	str	r3, [r2, #0]
		if(brightness_clav < 10000){brightness_clav += 1;}
 80044ec:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <SysTick_Handler+0x11c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d804      	bhi.n	8004502 <SysTick_Handler+0x56>
 80044f8:	4b33      	ldr	r3, [pc, #204]	; (80045c8 <SysTick_Handler+0x11c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3301      	adds	r3, #1
 80044fe:	4a32      	ldr	r2, [pc, #200]	; (80045c8 <SysTick_Handler+0x11c>)
 8004500:	6013      	str	r3, [r2, #0]

		float temp  = brightness_disp;
 8004502:	4b30      	ldr	r3, [pc, #192]	; (80045c4 <SysTick_Handler+0x118>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	edc7 7a01 	vstr	s15, [r7, #4]
		float temp2 = Settings_DB.brightness_disp;
 8004512:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <SysTick_Handler+0x120>)
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800451e:	edc7 7a00 	vstr	s15, [r7]
		temp2 /= 100;
 8004522:	ed97 7a00 	vldr	s14, [r7]
 8004526:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80045d0 <SysTick_Handler+0x124>
 800452a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800452e:	edc7 7a00 	vstr	s15, [r7]
		temp *= temp2;
 8004532:	ed97 7a01 	vldr	s14, [r7, #4]
 8004536:	edd7 7a00 	vldr	s15, [r7]
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	edc7 7a01 	vstr	s15, [r7, #4]
		TIM4->CCR3 = temp;
 8004542:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <SysTick_Handler+0x128>)
 8004544:	edd7 7a01 	vldr	s15, [r7, #4]
 8004548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800454c:	ee17 2a90 	vmov	r2, s15
 8004550:	63da      	str	r2, [r3, #60]	; 0x3c

		temp  = brightness_clav;
 8004552:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <SysTick_Handler+0x11c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	edc7 7a01 	vstr	s15, [r7, #4]
		temp2 = Settings_DB.brightness_clav;
 8004562:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <SysTick_Handler+0x120>)
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800456e:	edc7 7a00 	vstr	s15, [r7]
		temp2 /= 100;
 8004572:	ed97 7a00 	vldr	s14, [r7]
 8004576:	eddf 6a16 	vldr	s13, [pc, #88]	; 80045d0 <SysTick_Handler+0x124>
 800457a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800457e:	edc7 7a00 	vstr	s15, [r7]
		temp *= temp2;
 8004582:	ed97 7a01 	vldr	s14, [r7, #4]
 8004586:	edd7 7a00 	vldr	s15, [r7]
 800458a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458e:	edc7 7a01 	vstr	s15, [r7, #4]
		TIM4->CCR4 = temp;
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <SysTick_Handler+0x128>)
 8004594:	edd7 7a01 	vldr	s15, [r7, #4]
 8004598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459c:	ee17 2a90 	vmov	r2, s15
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40

	}

	KeyboardCheck();
 80045a2:	f000 f9e7 	bl	8004974 <KeyboardCheck>

	KeyboardWork();
 80045a6:	f000 f83f 	bl	8004628 <KeyboardWork>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045aa:	f001 ffe7 	bl	800657c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000a6c 	.word	0x20000a6c
 80045bc:	200009f0 	.word	0x200009f0
 80045c0:	200009ed 	.word	0x200009ed
 80045c4:	20000a64 	.word	0x20000a64
 80045c8:	20000a68 	.word	0x20000a68
 80045cc:	200009fc 	.word	0x200009fc
 80045d0:	42c80000 	.word	0x42c80000
 80045d4:	40000800 	.word	0x40000800

080045d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

	timer_2++;
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <TIM5_IRQHandler+0x20>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	4a05      	ldr	r2, [pc, #20]	; (80045f8 <TIM5_IRQHandler+0x20>)
 80045e4:	6013      	str	r3, [r2, #0]
	Slave_Clock_1ms(&Slave_1);
 80045e6:	4805      	ldr	r0, [pc, #20]	; (80045fc <TIM5_IRQHandler+0x24>)
 80045e8:	f7fd f986 	bl	80018f8 <Slave_Clock_1ms>

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80045ec:	4804      	ldr	r0, [pc, #16]	; (8004600 <TIM5_IRQHandler+0x28>)
 80045ee:	f004 fb2b 	bl	8008c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000a70 	.word	0x20000a70
 80045fc:	20000348 	.word	0x20000348
 8004600:	20000288 	.word	0x20000288

08004604 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

	  Slave_PORT_Processor(&Slave_1);
 8004608:	4805      	ldr	r0, [pc, #20]	; (8004620 <UART7_IRQHandler+0x1c>)
 800460a:	f7fc fc81 	bl	8000f10 <Slave_PORT_Processor>

	  Slave_Processor(&Slave_1);
 800460e:	4804      	ldr	r0, [pc, #16]	; (8004620 <UART7_IRQHandler+0x1c>)
 8004610:	f7fc fcf8 	bl	8001004 <Slave_Processor>

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004614:	4803      	ldr	r0, [pc, #12]	; (8004624 <UART7_IRQHandler+0x20>)
 8004616:	f005 f9c9 	bl	80099ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000348 	.word	0x20000348
 8004624:	200002d0 	.word	0x200002d0

08004628 <KeyboardWork>:

/* USER CODE BEGIN 1 */

void KeyboardWork(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af02      	add	r7, sp, #8

	uint8_t scr_plus  = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	71fb      	strb	r3, [r7, #7]
	uint8_t scr_minus = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	71bb      	strb	r3, [r7, #6]


	if(KeysRetain.Up & KeysRetain.Down)
 8004636:	4b95      	ldr	r3, [pc, #596]	; (800488c <KeyboardWork+0x264>)
 8004638:	795a      	ldrb	r2, [r3, #5]
 800463a:	4b94      	ldr	r3, [pc, #592]	; (800488c <KeyboardWork+0x264>)
 800463c:	791b      	ldrb	r3, [r3, #4]
 800463e:	4013      	ands	r3, r2
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <KeyboardWork+0x30>
	{
		screen 			= 21;
 8004646:	4b92      	ldr	r3, [pc, #584]	; (8004890 <KeyboardWork+0x268>)
 8004648:	2215      	movs	r2, #21
 800464a:	701a      	strb	r2, [r3, #0]
		Control_DB.MenuPointer     = 0;
 800464c:	4b91      	ldr	r3, [pc, #580]	; (8004894 <KeyboardWork+0x26c>)
 800464e:	2200      	movs	r2, #0
 8004650:	801a      	strh	r2, [r3, #0]
		Control_DB.RazrPointer 	= 0;
 8004652:	4b90      	ldr	r3, [pc, #576]	; (8004894 <KeyboardWork+0x26c>)
 8004654:	2200      	movs	r2, #0
 8004656:	805a      	strh	r2, [r3, #2]
	}
	if(KeysFlash.ESC & (screen < 3))
 8004658:	4b8f      	ldr	r3, [pc, #572]	; (8004898 <KeyboardWork+0x270>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	4b8c      	ldr	r3, [pc, #560]	; (8004890 <KeyboardWork+0x268>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b02      	cmp	r3, #2
 8004664:	bf94      	ite	ls
 8004666:	2301      	movls	r3, #1
 8004668:	2300      	movhi	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	4013      	ands	r3, r2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d009      	beq.n	8004686 <KeyboardWork+0x5e>
	{
		screen_save 	= screen;
 8004672:	4b87      	ldr	r3, [pc, #540]	; (8004890 <KeyboardWork+0x268>)
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	4b89      	ldr	r3, [pc, #548]	; (800489c <KeyboardWork+0x274>)
 8004678:	701a      	strb	r2, [r3, #0]
		screen 			= 20;
 800467a:	4b85      	ldr	r3, [pc, #532]	; (8004890 <KeyboardWork+0x268>)
 800467c:	2214      	movs	r2, #20
 800467e:	701a      	strb	r2, [r3, #0]
		KeysFlash.ESC 	= 0;
 8004680:	4b85      	ldr	r3, [pc, #532]	; (8004898 <KeyboardWork+0x270>)
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
	}
	if(KeysFlash.ESC & (screen == 20))
 8004686:	4b84      	ldr	r3, [pc, #528]	; (8004898 <KeyboardWork+0x270>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	4b80      	ldr	r3, [pc, #512]	; (8004890 <KeyboardWork+0x268>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b14      	cmp	r3, #20
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d006      	beq.n	80046ae <KeyboardWork+0x86>
	{
		screen = screen_save;
 80046a0:	4b7e      	ldr	r3, [pc, #504]	; (800489c <KeyboardWork+0x274>)
 80046a2:	781a      	ldrb	r2, [r3, #0]
 80046a4:	4b7a      	ldr	r3, [pc, #488]	; (8004890 <KeyboardWork+0x268>)
 80046a6:	701a      	strb	r2, [r3, #0]
		KeysFlash.ESC 	= 0;
 80046a8:	4b7b      	ldr	r3, [pc, #492]	; (8004898 <KeyboardWork+0x270>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	701a      	strb	r2, [r3, #0]
	}
	if(KeysFlash.ESC & ((screen == 3) | (screen == 4) | (screen == 21)))
 80046ae:	4b7a      	ldr	r3, [pc, #488]	; (8004898 <KeyboardWork+0x270>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	4619      	mov	r1, r3
 80046b4:	4b76      	ldr	r3, [pc, #472]	; (8004890 <KeyboardWork+0x268>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	bf0c      	ite	eq
 80046bc:	2301      	moveq	r3, #1
 80046be:	2300      	movne	r3, #0
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b73      	ldr	r3, [pc, #460]	; (8004890 <KeyboardWork+0x268>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	bf0c      	ite	eq
 80046ca:	2301      	moveq	r3, #1
 80046cc:	2300      	movne	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	4313      	orrs	r3, r2
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	4b6e      	ldr	r3, [pc, #440]	; (8004890 <KeyboardWork+0x268>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b15      	cmp	r3, #21
 80046dc:	bf0c      	ite	eq
 80046de:	2301      	moveq	r3, #1
 80046e0:	2300      	movne	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	4313      	orrs	r3, r2
 80046e6:	400b      	ands	r3, r1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <KeyboardWork+0xd6>
	{
		screen 			= 1;
 80046ec:	4b68      	ldr	r3, [pc, #416]	; (8004890 <KeyboardWork+0x268>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
		screen_save 	= 1;
 80046f2:	4b6a      	ldr	r3, [pc, #424]	; (800489c <KeyboardWork+0x274>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
		Control_DB.RazrPointer 	= 0;
 80046f8:	4b66      	ldr	r3, [pc, #408]	; (8004894 <KeyboardWork+0x26c>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	805a      	strh	r2, [r3, #2]
	}

	if(KeysFlash.Right)
 80046fe:	4b66      	ldr	r3, [pc, #408]	; (8004898 <KeyboardWork+0x270>)
 8004700:	789b      	ldrb	r3, [r3, #2]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01a      	beq.n	800473c <KeyboardWork+0x114>
	{
		if(Control_DB.RazrPointer)
 8004706:	4b63      	ldr	r3, [pc, #396]	; (8004894 <KeyboardWork+0x26c>)
 8004708:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <KeyboardWork+0x110>
		{
			Control_DB.RazrPointer--;
 8004710:	4b60      	ldr	r3, [pc, #384]	; (8004894 <KeyboardWork+0x26c>)
 8004712:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29b      	uxth	r3, r3
 800471c:	b21a      	sxth	r2, r3
 800471e:	4b5d      	ldr	r3, [pc, #372]	; (8004894 <KeyboardWork+0x26c>)
 8004720:	805a      	strh	r2, [r3, #2]
			if(Control_DB.RazrPointer == 0)
 8004722:	4b5c      	ldr	r3, [pc, #368]	; (8004894 <KeyboardWork+0x26c>)
 8004724:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d107      	bne.n	800473c <KeyboardWork+0x114>
			{
				Control_DB.RazrPointer = Control_DB.RazrPointerMAX;
 800472c:	4b59      	ldr	r3, [pc, #356]	; (8004894 <KeyboardWork+0x26c>)
 800472e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004732:	4b58      	ldr	r3, [pc, #352]	; (8004894 <KeyboardWork+0x26c>)
 8004734:	805a      	strh	r2, [r3, #2]
 8004736:	e001      	b.n	800473c <KeyboardWork+0x114>
			}
		}
		else
		{
			scr_plus = 1;
 8004738:	2301      	movs	r3, #1
 800473a:	71fb      	strb	r3, [r7, #7]
		}
	}
	if(KeysFlash.Left)
 800473c:	4b56      	ldr	r3, [pc, #344]	; (8004898 <KeyboardWork+0x270>)
 800473e:	78db      	ldrb	r3, [r3, #3]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01b      	beq.n	800477c <KeyboardWork+0x154>
	{
		if(Control_DB.RazrPointer)
 8004744:	4b53      	ldr	r3, [pc, #332]	; (8004894 <KeyboardWork+0x26c>)
 8004746:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d014      	beq.n	8004778 <KeyboardWork+0x150>
		{
			Control_DB.RazrPointer++;
 800474e:	4b51      	ldr	r3, [pc, #324]	; (8004894 <KeyboardWork+0x26c>)
 8004750:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004754:	b29b      	uxth	r3, r3
 8004756:	3301      	adds	r3, #1
 8004758:	b29b      	uxth	r3, r3
 800475a:	b21a      	sxth	r2, r3
 800475c:	4b4d      	ldr	r3, [pc, #308]	; (8004894 <KeyboardWork+0x26c>)
 800475e:	805a      	strh	r2, [r3, #2]
			if(Control_DB.RazrPointer > Control_DB.RazrPointerMAX)
 8004760:	4b4c      	ldr	r3, [pc, #304]	; (8004894 <KeyboardWork+0x26c>)
 8004762:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004766:	4b4b      	ldr	r3, [pc, #300]	; (8004894 <KeyboardWork+0x26c>)
 8004768:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800476c:	429a      	cmp	r2, r3
 800476e:	dd05      	ble.n	800477c <KeyboardWork+0x154>
			{
				Control_DB.RazrPointer = 1;
 8004770:	4b48      	ldr	r3, [pc, #288]	; (8004894 <KeyboardWork+0x26c>)
 8004772:	2201      	movs	r2, #1
 8004774:	805a      	strh	r2, [r3, #2]
 8004776:	e001      	b.n	800477c <KeyboardWork+0x154>
			}
		}
		else
		{
			scr_minus = 1;
 8004778:	2301      	movs	r3, #1
 800477a:	71bb      	strb	r3, [r7, #6]
		}
	}

	if(KeysFlash.ENT)
 800477c:	4b46      	ldr	r3, [pc, #280]	; (8004898 <KeyboardWork+0x270>)
 800477e:	785b      	ldrb	r3, [r3, #1]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d038      	beq.n	80047f6 <KeyboardWork+0x1ce>
	{

		if(screen == 3)
 8004784:	4b42      	ldr	r3, [pc, #264]	; (8004890 <KeyboardWork+0x268>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d112      	bne.n	80047b2 <KeyboardWork+0x18a>
		{
			if(PassW_block.PassWord != PassW_block.PassWord_true)
 800478c:	4b44      	ldr	r3, [pc, #272]	; (80048a0 <KeyboardWork+0x278>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b43      	ldr	r3, [pc, #268]	; (80048a0 <KeyboardWork+0x278>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d009      	beq.n	80047ac <KeyboardWork+0x184>
			{
				if(Control_DB.RazrPointer)
 8004798:	4b3e      	ldr	r3, [pc, #248]	; (8004894 <KeyboardWork+0x26c>)
 800479a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <KeyboardWork+0x18a>
				{
					PassW_block.PassFalseTimer = 1000;
 80047a2:	4b3f      	ldr	r3, [pc, #252]	; (80048a0 <KeyboardWork+0x278>)
 80047a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047a8:	609a      	str	r2, [r3, #8]
 80047aa:	e002      	b.n	80047b2 <KeyboardWork+0x18a>
				}
			}
			else
			{
				screen = 4;
 80047ac:	4b38      	ldr	r3, [pc, #224]	; (8004890 <KeyboardWork+0x268>)
 80047ae:	2204      	movs	r2, #4
 80047b0:	701a      	strb	r2, [r3, #0]
			}
		}



		if(Control_DB.RazrPointer)
 80047b2:	4b38      	ldr	r3, [pc, #224]	; (8004894 <KeyboardWork+0x26c>)
 80047b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <KeyboardWork+0x19c>
		{
			Control_DB.RazrPointer = 0;
 80047bc:	4b35      	ldr	r3, [pc, #212]	; (8004894 <KeyboardWork+0x26c>)
 80047be:	2200      	movs	r2, #0
 80047c0:	805a      	strh	r2, [r3, #2]
 80047c2:	e002      	b.n	80047ca <KeyboardWork+0x1a2>
		}
		else
		{
			Control_DB.RazrPointer = 1;
 80047c4:	4b33      	ldr	r3, [pc, #204]	; (8004894 <KeyboardWork+0x26c>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	805a      	strh	r2, [r3, #2]
		}

		if((screen == 21) & (Control_DB.MenuPointer == 5))
 80047ca:	4b31      	ldr	r3, [pc, #196]	; (8004890 <KeyboardWork+0x268>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b15      	cmp	r3, #21
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	4b2e      	ldr	r3, [pc, #184]	; (8004894 <KeyboardWork+0x26c>)
 80047da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047de:	2b05      	cmp	r3, #5
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	4013      	ands	r3, r2
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <KeyboardWork+0x1ce>
		{
			Settings_DB.FlashWriteFlag = 1;
 80047f0:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <KeyboardWork+0x27c>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	741a      	strb	r2, [r3, #16]



	}

	if(KeysFlash.Down)
 80047f6:	4b28      	ldr	r3, [pc, #160]	; (8004898 <KeyboardWork+0x270>)
 80047f8:	791b      	ldrb	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d028      	beq.n	8004850 <KeyboardWork+0x228>
	{
		if(Control_DB.RazrPointer == 0)
 80047fe:	4b25      	ldr	r3, [pc, #148]	; (8004894 <KeyboardWork+0x26c>)
 8004800:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d114      	bne.n	8004832 <KeyboardWork+0x20a>
		{
			Control_DB.MenuPointer++;
 8004808:	4b22      	ldr	r3, [pc, #136]	; (8004894 <KeyboardWork+0x26c>)
 800480a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800480e:	b29b      	uxth	r3, r3
 8004810:	3301      	adds	r3, #1
 8004812:	b29b      	uxth	r3, r3
 8004814:	b21a      	sxth	r2, r3
 8004816:	4b1f      	ldr	r3, [pc, #124]	; (8004894 <KeyboardWork+0x26c>)
 8004818:	801a      	strh	r2, [r3, #0]
			if(Control_DB.MenuPointer > Control_DB.MenuPointerMAX){Control_DB.MenuPointer = 0;}
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <KeyboardWork+0x26c>)
 800481c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004820:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <KeyboardWork+0x26c>)
 8004822:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004826:	429a      	cmp	r2, r3
 8004828:	dd12      	ble.n	8004850 <KeyboardWork+0x228>
 800482a:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <KeyboardWork+0x26c>)
 800482c:	2200      	movs	r2, #0
 800482e:	801a      	strh	r2, [r3, #0]
 8004830:	e00e      	b.n	8004850 <KeyboardWork+0x228>
		}
		else
		{
			NumberChange(Control_DB.VauePointer, Control_DB.RazrPointer, Control_DB.RazrPointerMAX, 0, 1);
 8004832:	4b18      	ldr	r3, [pc, #96]	; (8004894 <KeyboardWork+0x26c>)
 8004834:	6898      	ldr	r0, [r3, #8]
 8004836:	4b17      	ldr	r3, [pc, #92]	; (8004894 <KeyboardWork+0x26c>)
 8004838:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800483c:	4619      	mov	r1, r3
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <KeyboardWork+0x26c>)
 8004840:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004844:	461a      	mov	r2, r3
 8004846:	2301      	movs	r3, #1
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2300      	movs	r3, #0
 800484c:	f001 fce8 	bl	8006220 <NumberChange>
		}
	}
	if(KeysFlash.Up)
 8004850:	4b11      	ldr	r3, [pc, #68]	; (8004898 <KeyboardWork+0x270>)
 8004852:	795b      	ldrb	r3, [r3, #5]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d036      	beq.n	80048c6 <KeyboardWork+0x29e>
	{
		if(Control_DB.RazrPointer == 0)
 8004858:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <KeyboardWork+0x26c>)
 800485a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d122      	bne.n	80048a8 <KeyboardWork+0x280>
		{
			Control_DB.MenuPointer--;
 8004862:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <KeyboardWork+0x26c>)
 8004864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29b      	uxth	r3, r3
 800486e:	b21a      	sxth	r2, r3
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <KeyboardWork+0x26c>)
 8004872:	801a      	strh	r2, [r3, #0]
			if(Control_DB.MenuPointer < 0){Control_DB.MenuPointer = Control_DB.MenuPointerMAX;}
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <KeyboardWork+0x26c>)
 8004876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800487a:	2b00      	cmp	r3, #0
 800487c:	da23      	bge.n	80048c6 <KeyboardWork+0x29e>
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <KeyboardWork+0x26c>)
 8004880:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <KeyboardWork+0x26c>)
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	e01d      	b.n	80048c6 <KeyboardWork+0x29e>
 800488a:	bf00      	nop
 800488c:	20000a34 	.word	0x20000a34
 8004890:	20000020 	.word	0x20000020
 8004894:	20000a1c 	.word	0x20000a1c
 8004898:	20000a44 	.word	0x20000a44
 800489c:	20000022 	.word	0x20000022
 80048a0:	200009f0 	.word	0x200009f0
 80048a4:	200009fc 	.word	0x200009fc
		}
		else
		{
			NumberChange(Control_DB.VauePointer, Control_DB.RazrPointer, Control_DB.RazrPointerMAX, 1, 0);
 80048a8:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <KeyboardWork+0x338>)
 80048aa:	6898      	ldr	r0, [r3, #8]
 80048ac:	4b2c      	ldr	r3, [pc, #176]	; (8004960 <KeyboardWork+0x338>)
 80048ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80048b2:	4619      	mov	r1, r3
 80048b4:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <KeyboardWork+0x338>)
 80048b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80048ba:	461a      	mov	r2, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	2301      	movs	r3, #1
 80048c2:	f001 fcad 	bl	8006220 <NumberChange>
		}
	}


	if((screen != 21) & (screen != 4))
 80048c6:	4b27      	ldr	r3, [pc, #156]	; (8004964 <KeyboardWork+0x33c>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b15      	cmp	r3, #21
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	4b23      	ldr	r3, [pc, #140]	; (8004964 <KeyboardWork+0x33c>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b04      	cmp	r3, #4
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	4013      	ands	r3, r2
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d027      	beq.n	800493a <KeyboardWork+0x312>
	{
		if(scr_plus) {screen++;}
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <KeyboardWork+0x2d4>
 80048f0:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <KeyboardWork+0x33c>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <KeyboardWork+0x33c>)
 80048fa:	701a      	strb	r2, [r3, #0]
		if(scr_minus){screen--;}
 80048fc:	79bb      	ldrb	r3, [r7, #6]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <KeyboardWork+0x2e6>
 8004902:	4b18      	ldr	r3, [pc, #96]	; (8004964 <KeyboardWork+0x33c>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	3b01      	subs	r3, #1
 8004908:	b2da      	uxtb	r2, r3
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <KeyboardWork+0x33c>)
 800490c:	701a      	strb	r2, [r3, #0]

		if(KeysFlash.Right | KeysFlash.Left)
 800490e:	4b16      	ldr	r3, [pc, #88]	; (8004968 <KeyboardWork+0x340>)
 8004910:	789a      	ldrb	r2, [r3, #2]
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <KeyboardWork+0x340>)
 8004914:	78db      	ldrb	r3, [r3, #3]
 8004916:	4313      	orrs	r3, r2
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <KeyboardWork+0x312>
		{
			if(screen > 3){screen = 1;}
 800491e:	4b11      	ldr	r3, [pc, #68]	; (8004964 <KeyboardWork+0x33c>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b03      	cmp	r3, #3
 8004924:	d902      	bls.n	800492c <KeyboardWork+0x304>
 8004926:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <KeyboardWork+0x33c>)
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
			if(screen < 1){screen = 3;}
 800492c:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <KeyboardWork+0x33c>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <KeyboardWork+0x312>
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <KeyboardWork+0x33c>)
 8004936:	2203      	movs	r2, #3
 8004938:	701a      	strb	r2, [r3, #0]
		}
	}

	if(screen != screen_mirror)
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <KeyboardWork+0x33c>)
 800493c:	781a      	ldrb	r2, [r3, #0]
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <KeyboardWork+0x344>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d006      	beq.n	8004954 <KeyboardWork+0x32c>
	{
		screen_mirror = screen;
 8004946:	4b07      	ldr	r3, [pc, #28]	; (8004964 <KeyboardWork+0x33c>)
 8004948:	781a      	ldrb	r2, [r3, #0]
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <KeyboardWork+0x344>)
 800494c:	701a      	strb	r2, [r3, #0]
		screen_event  = 1;
 800494e:	4b08      	ldr	r3, [pc, #32]	; (8004970 <KeyboardWork+0x348>)
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
	}

	KeyboardClear();
 8004954:	f000 fa42 	bl	8004ddc <KeyboardClear>
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000a1c 	.word	0x20000a1c
 8004964:	20000020 	.word	0x20000020
 8004968:	20000a44 	.word	0x20000a44
 800496c:	20000021 	.word	0x20000021
 8004970:	200009ec 	.word	0x200009ec

08004974 <KeyboardCheck>:

void KeyboardCheck(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0

	KeysRetain.ESC 			= !HAL_GPIO_ReadPin( BUTTON_1_GPIO_Port,  BUTTON_1_Pin);
 8004978:	2120      	movs	r1, #32
 800497a:	48a6      	ldr	r0, [pc, #664]	; (8004c14 <KeyboardCheck+0x2a0>)
 800497c:	f002 fcda 	bl	8007334 <HAL_GPIO_ReadPin>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf0c      	ite	eq
 8004986:	2301      	moveq	r3, #1
 8004988:	2300      	movne	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	4ba2      	ldr	r3, [pc, #648]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004990:	701a      	strb	r2, [r3, #0]
	KeysRetain.ENT 			= !HAL_GPIO_ReadPin( BUTTON_2_GPIO_Port,  BUTTON_2_Pin);
 8004992:	2140      	movs	r1, #64	; 0x40
 8004994:	48a1      	ldr	r0, [pc, #644]	; (8004c1c <KeyboardCheck+0x2a8>)
 8004996:	f002 fccd 	bl	8007334 <HAL_GPIO_ReadPin>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	4b9b      	ldr	r3, [pc, #620]	; (8004c18 <KeyboardCheck+0x2a4>)
 80049aa:	705a      	strb	r2, [r3, #1]
	KeysRetain.Right 		= !HAL_GPIO_ReadPin( BUTTON_3_GPIO_Port,  BUTTON_3_Pin);
 80049ac:	2180      	movs	r1, #128	; 0x80
 80049ae:	489b      	ldr	r0, [pc, #620]	; (8004c1c <KeyboardCheck+0x2a8>)
 80049b0:	f002 fcc0 	bl	8007334 <HAL_GPIO_ReadPin>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b95      	ldr	r3, [pc, #596]	; (8004c18 <KeyboardCheck+0x2a4>)
 80049c4:	709a      	strb	r2, [r3, #2]
	KeysRetain.Left 		= !HAL_GPIO_ReadPin( BUTTON_4_GPIO_Port,  BUTTON_4_Pin);
 80049c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049ca:	4894      	ldr	r0, [pc, #592]	; (8004c1c <KeyboardCheck+0x2a8>)
 80049cc:	f002 fcb2 	bl	8007334 <HAL_GPIO_ReadPin>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bf0c      	ite	eq
 80049d6:	2301      	moveq	r3, #1
 80049d8:	2300      	movne	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	4b8e      	ldr	r3, [pc, #568]	; (8004c18 <KeyboardCheck+0x2a4>)
 80049e0:	70da      	strb	r2, [r3, #3]
	KeysRetain.Down 		= !HAL_GPIO_ReadPin( BUTTON_5_GPIO_Port,  BUTTON_5_Pin);
 80049e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049e6:	488d      	ldr	r0, [pc, #564]	; (8004c1c <KeyboardCheck+0x2a8>)
 80049e8:	f002 fca4 	bl	8007334 <HAL_GPIO_ReadPin>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bf0c      	ite	eq
 80049f2:	2301      	moveq	r3, #1
 80049f4:	2300      	movne	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	4b87      	ldr	r3, [pc, #540]	; (8004c18 <KeyboardCheck+0x2a4>)
 80049fc:	711a      	strb	r2, [r3, #4]
	KeysRetain.Up 			= !HAL_GPIO_ReadPin( BUTTON_6_GPIO_Port,  BUTTON_6_Pin);
 80049fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a02:	4886      	ldr	r0, [pc, #536]	; (8004c1c <KeyboardCheck+0x2a8>)
 8004a04:	f002 fc96 	bl	8007334 <HAL_GPIO_ReadPin>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	4b80      	ldr	r3, [pc, #512]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004a18:	715a      	strb	r2, [r3, #5]
	KeysRetain.PressDown 	= !HAL_GPIO_ReadPin( BUTTON_7_GPIO_Port,  BUTTON_7_Pin);
 8004a1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a1e:	487f      	ldr	r0, [pc, #508]	; (8004c1c <KeyboardCheck+0x2a8>)
 8004a20:	f002 fc88 	bl	8007334 <HAL_GPIO_ReadPin>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b79      	ldr	r3, [pc, #484]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004a34:	719a      	strb	r2, [r3, #6]
	KeysRetain.AHH3_Stop 	= !HAL_GPIO_ReadPin( BUTTON_8_GPIO_Port,  BUTTON_8_Pin);
 8004a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a3a:	4878      	ldr	r0, [pc, #480]	; (8004c1c <KeyboardCheck+0x2a8>)
 8004a3c:	f002 fc7a 	bl	8007334 <HAL_GPIO_ReadPin>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4b72      	ldr	r3, [pc, #456]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004a50:	71da      	strb	r2, [r3, #7]
	KeysRetain.AutoPusk 	= !HAL_GPIO_ReadPin( BUTTON_9_GPIO_Port,  BUTTON_9_Pin);
 8004a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a56:	4872      	ldr	r0, [pc, #456]	; (8004c20 <KeyboardCheck+0x2ac>)
 8004a58:	f002 fc6c 	bl	8007334 <HAL_GPIO_ReadPin>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4b6b      	ldr	r3, [pc, #428]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004a6c:	721a      	strb	r2, [r3, #8]
	KeysRetain.AutoStop 	= !HAL_GPIO_ReadPin(BUTTON_10_GPIO_Port, BUTTON_10_Pin);
 8004a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a72:	486b      	ldr	r0, [pc, #428]	; (8004c20 <KeyboardCheck+0x2ac>)
 8004a74:	f002 fc5e 	bl	8007334 <HAL_GPIO_ReadPin>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bf0c      	ite	eq
 8004a7e:	2301      	moveq	r3, #1
 8004a80:	2300      	movne	r3, #0
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	4b64      	ldr	r3, [pc, #400]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004a88:	725a      	strb	r2, [r3, #9]
	KeysRetain.AHH1_Stop 	= !HAL_GPIO_ReadPin(BUTTON_11_GPIO_Port, BUTTON_11_Pin);
 8004a8a:	2180      	movs	r1, #128	; 0x80
 8004a8c:	4864      	ldr	r0, [pc, #400]	; (8004c20 <KeyboardCheck+0x2ac>)
 8004a8e:	f002 fc51 	bl	8007334 <HAL_GPIO_ReadPin>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4b5d      	ldr	r3, [pc, #372]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004aa2:	729a      	strb	r2, [r3, #10]
	KeysRetain.AHH2_Stop 	= !HAL_GPIO_ReadPin(BUTTON_12_GPIO_Port, BUTTON_12_Pin);
 8004aa4:	2140      	movs	r1, #64	; 0x40
 8004aa6:	485e      	ldr	r0, [pc, #376]	; (8004c20 <KeyboardCheck+0x2ac>)
 8004aa8:	f002 fc44 	bl	8007334 <HAL_GPIO_ReadPin>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	2300      	movne	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4b57      	ldr	r3, [pc, #348]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004abc:	72da      	strb	r2, [r3, #11]
	KeysRetain.PressUp 		= !HAL_GPIO_ReadPin(BUTTON_13_GPIO_Port, BUTTON_13_Pin);
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4858      	ldr	r0, [pc, #352]	; (8004c24 <KeyboardCheck+0x2b0>)
 8004ac2:	f002 fc37 	bl	8007334 <HAL_GPIO_ReadPin>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004ad6:	731a      	strb	r2, [r3, #12]
	KeysRetain.AHH3_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_14_GPIO_Port, BUTTON_14_Pin);
 8004ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004adc:	484f      	ldr	r0, [pc, #316]	; (8004c1c <KeyboardCheck+0x2a8>)
 8004ade:	f002 fc29 	bl	8007334 <HAL_GPIO_ReadPin>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	4b49      	ldr	r3, [pc, #292]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004af2:	735a      	strb	r2, [r3, #13]
	KeysRetain.AHH2_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_15_GPIO_Port, BUTTON_15_Pin);
 8004af4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004af8:	4848      	ldr	r0, [pc, #288]	; (8004c1c <KeyboardCheck+0x2a8>)
 8004afa:	f002 fc1b 	bl	8007334 <HAL_GPIO_ReadPin>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4b42      	ldr	r3, [pc, #264]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004b0e:	739a      	strb	r2, [r3, #14]
	KeysRetain.AHH1_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_16_GPIO_Port, BUTTON_16_Pin);
 8004b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b14:	4841      	ldr	r0, [pc, #260]	; (8004c1c <KeyboardCheck+0x2a8>)
 8004b16:	f002 fc0d 	bl	8007334 <HAL_GPIO_ReadPin>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	461a      	mov	r2, r3
 8004b28:	4b3b      	ldr	r3, [pc, #236]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004b2a:	73da      	strb	r2, [r3, #15]

	if(KeysRetain.ESC 		& !KeysMirror.ESC)			{KeysFlash.ESC 			= 1;}
 8004b2c:	4b3a      	ldr	r3, [pc, #232]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	4b3d      	ldr	r3, [pc, #244]	; (8004c28 <KeyboardCheck+0x2b4>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf0c      	ite	eq
 8004b3a:	2301      	moveq	r3, #1
 8004b3c:	2300      	movne	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <KeyboardCheck+0x1d8>
 8004b46:	4b39      	ldr	r3, [pc, #228]	; (8004c2c <KeyboardCheck+0x2b8>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	701a      	strb	r2, [r3, #0]
	if(KeysRetain.ENT 		& !KeysMirror.ENT)			{KeysFlash.ENT 			= 1;}
 8004b4c:	4b32      	ldr	r3, [pc, #200]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b35      	ldr	r3, [pc, #212]	; (8004c28 <KeyboardCheck+0x2b4>)
 8004b54:	785b      	ldrb	r3, [r3, #1]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bf0c      	ite	eq
 8004b5a:	2301      	moveq	r3, #1
 8004b5c:	2300      	movne	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <KeyboardCheck+0x1f8>
 8004b66:	4b31      	ldr	r3, [pc, #196]	; (8004c2c <KeyboardCheck+0x2b8>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	705a      	strb	r2, [r3, #1]
	if(KeysRetain.Right 	& !KeysMirror.Right)		{KeysFlash.Right 		= 1;}
 8004b6c:	4b2a      	ldr	r3, [pc, #168]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004b6e:	789b      	ldrb	r3, [r3, #2]
 8004b70:	461a      	mov	r2, r3
 8004b72:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <KeyboardCheck+0x2b4>)
 8004b74:	789b      	ldrb	r3, [r3, #2]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf0c      	ite	eq
 8004b7a:	2301      	moveq	r3, #1
 8004b7c:	2300      	movne	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <KeyboardCheck+0x218>
 8004b86:	4b29      	ldr	r3, [pc, #164]	; (8004c2c <KeyboardCheck+0x2b8>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	709a      	strb	r2, [r3, #2]
	if(KeysRetain.Left 		& !KeysMirror.Left)			{KeysFlash.Left 		= 1;}
 8004b8c:	4b22      	ldr	r3, [pc, #136]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004b8e:	78db      	ldrb	r3, [r3, #3]
 8004b90:	461a      	mov	r2, r3
 8004b92:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <KeyboardCheck+0x2b4>)
 8004b94:	78db      	ldrb	r3, [r3, #3]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <KeyboardCheck+0x238>
 8004ba6:	4b21      	ldr	r3, [pc, #132]	; (8004c2c <KeyboardCheck+0x2b8>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	70da      	strb	r2, [r3, #3]
	if(KeysRetain.Down 		& !KeysMirror.Down)			{KeysFlash.Down 		= 1;}
 8004bac:	4b1a      	ldr	r3, [pc, #104]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004bae:	791b      	ldrb	r3, [r3, #4]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <KeyboardCheck+0x2b4>)
 8004bb4:	791b      	ldrb	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	bf0c      	ite	eq
 8004bba:	2301      	moveq	r3, #1
 8004bbc:	2300      	movne	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <KeyboardCheck+0x258>
 8004bc6:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <KeyboardCheck+0x2b8>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	711a      	strb	r2, [r3, #4]
	if(KeysRetain.Up 		& !KeysMirror.Up)			{KeysFlash.Up 			= 1;}
 8004bcc:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004bce:	795b      	ldrb	r3, [r3, #5]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <KeyboardCheck+0x2b4>)
 8004bd4:	795b      	ldrb	r3, [r3, #5]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bf0c      	ite	eq
 8004bda:	2301      	moveq	r3, #1
 8004bdc:	2300      	movne	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <KeyboardCheck+0x278>
 8004be6:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <KeyboardCheck+0x2b8>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	715a      	strb	r2, [r3, #5]
	if(KeysRetain.PressDown & !KeysMirror.PressDown)	{KeysFlash.PressDown 	= 1;}
 8004bec:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004bee:	799b      	ldrb	r3, [r3, #6]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <KeyboardCheck+0x2b4>)
 8004bf4:	799b      	ldrb	r3, [r3, #6]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <KeyboardCheck+0x298>
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <KeyboardCheck+0x2b8>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	719a      	strb	r2, [r3, #6]
	if(KeysRetain.AHH3_Stop & !KeysMirror.AHH3_Stop)	{KeysFlash.AHH3_Stop 	= 1;}
 8004c0c:	4b02      	ldr	r3, [pc, #8]	; (8004c18 <KeyboardCheck+0x2a4>)
 8004c0e:	79db      	ldrb	r3, [r3, #7]
 8004c10:	461a      	mov	r2, r3
 8004c12:	e00d      	b.n	8004c30 <KeyboardCheck+0x2bc>
 8004c14:	40022400 	.word	0x40022400
 8004c18:	20000a34 	.word	0x20000a34
 8004c1c:	40021c00 	.word	0x40021c00
 8004c20:	40020800 	.word	0x40020800
 8004c24:	40022000 	.word	0x40022000
 8004c28:	20000a54 	.word	0x20000a54
 8004c2c:	20000a44 	.word	0x20000a44
 8004c30:	4b67      	ldr	r3, [pc, #412]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004c32:	79db      	ldrb	r3, [r3, #7]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <KeyboardCheck+0x2d6>
 8004c44:	4b63      	ldr	r3, [pc, #396]	; (8004dd4 <KeyboardCheck+0x460>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	71da      	strb	r2, [r3, #7]
	if(KeysRetain.AutoPusk 	& !KeysMirror.AutoPusk)		{KeysFlash.AutoPusk 	= 1;}
 8004c4a:	4b63      	ldr	r3, [pc, #396]	; (8004dd8 <KeyboardCheck+0x464>)
 8004c4c:	7a1b      	ldrb	r3, [r3, #8]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4b5f      	ldr	r3, [pc, #380]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004c52:	7a1b      	ldrb	r3, [r3, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <KeyboardCheck+0x2f6>
 8004c64:	4b5b      	ldr	r3, [pc, #364]	; (8004dd4 <KeyboardCheck+0x460>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	721a      	strb	r2, [r3, #8]
	if(KeysRetain.AutoStop 	& !KeysMirror.AutoStop)		{KeysFlash.AutoStop 	= 1;}
 8004c6a:	4b5b      	ldr	r3, [pc, #364]	; (8004dd8 <KeyboardCheck+0x464>)
 8004c6c:	7a5b      	ldrb	r3, [r3, #9]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4b57      	ldr	r3, [pc, #348]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004c72:	7a5b      	ldrb	r3, [r3, #9]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf0c      	ite	eq
 8004c78:	2301      	moveq	r3, #1
 8004c7a:	2300      	movne	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <KeyboardCheck+0x316>
 8004c84:	4b53      	ldr	r3, [pc, #332]	; (8004dd4 <KeyboardCheck+0x460>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	725a      	strb	r2, [r3, #9]
	if(KeysRetain.AHH1_Stop & !KeysMirror.AHH1_Stop)	{KeysFlash.AHH1_Stop 	= 1;}
 8004c8a:	4b53      	ldr	r3, [pc, #332]	; (8004dd8 <KeyboardCheck+0x464>)
 8004c8c:	7a9b      	ldrb	r3, [r3, #10]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4b4f      	ldr	r3, [pc, #316]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004c92:	7a9b      	ldrb	r3, [r3, #10]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <KeyboardCheck+0x336>
 8004ca4:	4b4b      	ldr	r3, [pc, #300]	; (8004dd4 <KeyboardCheck+0x460>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	729a      	strb	r2, [r3, #10]
	if(KeysRetain.AHH2_Stop & !KeysMirror.AHH2_Stop)	{KeysFlash.AHH2_Stop 	= 1;}
 8004caa:	4b4b      	ldr	r3, [pc, #300]	; (8004dd8 <KeyboardCheck+0x464>)
 8004cac:	7adb      	ldrb	r3, [r3, #11]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4b47      	ldr	r3, [pc, #284]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004cb2:	7adb      	ldrb	r3, [r3, #11]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <KeyboardCheck+0x356>
 8004cc4:	4b43      	ldr	r3, [pc, #268]	; (8004dd4 <KeyboardCheck+0x460>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	72da      	strb	r2, [r3, #11]
	if(KeysRetain.PressUp 	& !KeysMirror.PressUp)		{KeysFlash.PressUp 		= 1;}
 8004cca:	4b43      	ldr	r3, [pc, #268]	; (8004dd8 <KeyboardCheck+0x464>)
 8004ccc:	7b1b      	ldrb	r3, [r3, #12]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4b3f      	ldr	r3, [pc, #252]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004cd2:	7b1b      	ldrb	r3, [r3, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <KeyboardCheck+0x376>
 8004ce4:	4b3b      	ldr	r3, [pc, #236]	; (8004dd4 <KeyboardCheck+0x460>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	731a      	strb	r2, [r3, #12]
	if(KeysRetain.AHH3_Pusk & !KeysMirror.AHH3_Pusk)	{KeysFlash.AHH3_Pusk 	= 1;}
 8004cea:	4b3b      	ldr	r3, [pc, #236]	; (8004dd8 <KeyboardCheck+0x464>)
 8004cec:	7b5b      	ldrb	r3, [r3, #13]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4b37      	ldr	r3, [pc, #220]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004cf2:	7b5b      	ldrb	r3, [r3, #13]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2301      	moveq	r3, #1
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <KeyboardCheck+0x396>
 8004d04:	4b33      	ldr	r3, [pc, #204]	; (8004dd4 <KeyboardCheck+0x460>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	735a      	strb	r2, [r3, #13]
	if(KeysRetain.AHH2_Pusk & !KeysMirror.AHH2_Pusk)	{KeysFlash.AHH2_Pusk 	= 1;}
 8004d0a:	4b33      	ldr	r3, [pc, #204]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d0c:	7b9b      	ldrb	r3, [r3, #14]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4b2f      	ldr	r3, [pc, #188]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d12:	7b9b      	ldrb	r3, [r3, #14]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <KeyboardCheck+0x3b6>
 8004d24:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <KeyboardCheck+0x460>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	739a      	strb	r2, [r3, #14]
	if(KeysRetain.AHH1_Pusk & !KeysMirror.AHH1_Pusk)	{KeysFlash.AHH1_Pusk 	= 1;}
 8004d2a:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d2c:	7bdb      	ldrb	r3, [r3, #15]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	4b27      	ldr	r3, [pc, #156]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d32:	7bdb      	ldrb	r3, [r3, #15]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <KeyboardCheck+0x3d6>
 8004d44:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <KeyboardCheck+0x460>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	73da      	strb	r2, [r3, #15]

	KeysMirror.ESC 			= KeysRetain.ESC;
 8004d4a:	4b23      	ldr	r3, [pc, #140]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d4c:	781a      	ldrb	r2, [r3, #0]
 8004d4e:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d50:	701a      	strb	r2, [r3, #0]
	KeysMirror.ENT 			= KeysRetain.ENT;
 8004d52:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d54:	785a      	ldrb	r2, [r3, #1]
 8004d56:	4b1e      	ldr	r3, [pc, #120]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d58:	705a      	strb	r2, [r3, #1]
	KeysMirror.Right 		= KeysRetain.Right;
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d5c:	789a      	ldrb	r2, [r3, #2]
 8004d5e:	4b1c      	ldr	r3, [pc, #112]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d60:	709a      	strb	r2, [r3, #2]
	KeysMirror.Left 		= KeysRetain.Left;
 8004d62:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d64:	78da      	ldrb	r2, [r3, #3]
 8004d66:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d68:	70da      	strb	r2, [r3, #3]
	KeysMirror.Down 		= KeysRetain.Down;
 8004d6a:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d6c:	791a      	ldrb	r2, [r3, #4]
 8004d6e:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d70:	711a      	strb	r2, [r3, #4]
	KeysMirror.Up 			= KeysRetain.Up;
 8004d72:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d74:	795a      	ldrb	r2, [r3, #5]
 8004d76:	4b16      	ldr	r3, [pc, #88]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d78:	715a      	strb	r2, [r3, #5]
	KeysMirror.PressDown 	= KeysRetain.PressDown;
 8004d7a:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d7c:	799a      	ldrb	r2, [r3, #6]
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d80:	719a      	strb	r2, [r3, #6]
	KeysMirror.AHH3_Stop 	= KeysRetain.AHH3_Stop;
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d84:	79da      	ldrb	r2, [r3, #7]
 8004d86:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d88:	71da      	strb	r2, [r3, #7]
	KeysMirror.AutoPusk 	= KeysRetain.AutoPusk;
 8004d8a:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d8c:	7a1a      	ldrb	r2, [r3, #8]
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d90:	721a      	strb	r2, [r3, #8]
	KeysMirror.AutoStop 	= KeysRetain.AutoStop;
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d94:	7a5a      	ldrb	r2, [r3, #9]
 8004d96:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004d98:	725a      	strb	r2, [r3, #9]
	KeysMirror.AHH1_Stop 	= KeysRetain.AHH1_Stop;
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <KeyboardCheck+0x464>)
 8004d9c:	7a9a      	ldrb	r2, [r3, #10]
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004da0:	729a      	strb	r2, [r3, #10]
	KeysMirror.AHH2_Stop 	= KeysRetain.AHH2_Stop;
 8004da2:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <KeyboardCheck+0x464>)
 8004da4:	7ada      	ldrb	r2, [r3, #11]
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004da8:	72da      	strb	r2, [r3, #11]
	KeysMirror.PressUp 		= KeysRetain.PressUp;
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <KeyboardCheck+0x464>)
 8004dac:	7b1a      	ldrb	r2, [r3, #12]
 8004dae:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004db0:	731a      	strb	r2, [r3, #12]
	KeysMirror.AHH3_Pusk 	= KeysRetain.AHH3_Pusk;
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <KeyboardCheck+0x464>)
 8004db4:	7b5a      	ldrb	r2, [r3, #13]
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004db8:	735a      	strb	r2, [r3, #13]
	KeysMirror.AHH2_Pusk 	= KeysRetain.AHH2_Pusk;
 8004dba:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <KeyboardCheck+0x464>)
 8004dbc:	7b9a      	ldrb	r2, [r3, #14]
 8004dbe:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004dc0:	739a      	strb	r2, [r3, #14]
	KeysMirror.AHH1_Pusk 	= KeysRetain.AHH1_Pusk;
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <KeyboardCheck+0x464>)
 8004dc4:	7bda      	ldrb	r2, [r3, #15]
 8004dc6:	4b02      	ldr	r3, [pc, #8]	; (8004dd0 <KeyboardCheck+0x45c>)
 8004dc8:	73da      	strb	r2, [r3, #15]

}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000a54 	.word	0x20000a54
 8004dd4:	20000a44 	.word	0x20000a44
 8004dd8:	20000a34 	.word	0x20000a34

08004ddc <KeyboardClear>:

void KeyboardClear(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
	KeysFlash.ESC 			= 0;
 8004de0:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <KeyboardClear+0x70>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]
	KeysFlash.ENT 			= 0;
 8004de6:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <KeyboardClear+0x70>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	705a      	strb	r2, [r3, #1]
	KeysFlash.Right 		= 0;
 8004dec:	4b17      	ldr	r3, [pc, #92]	; (8004e4c <KeyboardClear+0x70>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	709a      	strb	r2, [r3, #2]
	KeysFlash.Left 			= 0;
 8004df2:	4b16      	ldr	r3, [pc, #88]	; (8004e4c <KeyboardClear+0x70>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	70da      	strb	r2, [r3, #3]
	KeysFlash.Down 			= 0;
 8004df8:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <KeyboardClear+0x70>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	711a      	strb	r2, [r3, #4]
	KeysFlash.Up 			= 0;
 8004dfe:	4b13      	ldr	r3, [pc, #76]	; (8004e4c <KeyboardClear+0x70>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	715a      	strb	r2, [r3, #5]
	KeysFlash.PressDown 	= 0;
 8004e04:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <KeyboardClear+0x70>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	719a      	strb	r2, [r3, #6]
	KeysFlash.AHH3_Stop 	= 0;
 8004e0a:	4b10      	ldr	r3, [pc, #64]	; (8004e4c <KeyboardClear+0x70>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	71da      	strb	r2, [r3, #7]
	KeysFlash.AutoPusk 		= 0;
 8004e10:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <KeyboardClear+0x70>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	721a      	strb	r2, [r3, #8]
	KeysFlash.AutoStop 		= 0;
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <KeyboardClear+0x70>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	725a      	strb	r2, [r3, #9]
	KeysFlash.AHH1_Stop 	= 0;
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <KeyboardClear+0x70>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	729a      	strb	r2, [r3, #10]
	KeysFlash.AHH2_Stop 	= 0;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <KeyboardClear+0x70>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	72da      	strb	r2, [r3, #11]
	KeysFlash.PressUp 		= 0;
 8004e28:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <KeyboardClear+0x70>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	731a      	strb	r2, [r3, #12]
	KeysFlash.AHH3_Pusk 	= 0;
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <KeyboardClear+0x70>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	735a      	strb	r2, [r3, #13]
	KeysFlash.AHH2_Pusk 	= 0;
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <KeyboardClear+0x70>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	739a      	strb	r2, [r3, #14]
	KeysFlash.AHH1_Pusk 	= 0;
 8004e3a:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <KeyboardClear+0x70>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	73da      	strb	r2, [r3, #15]
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000a44 	.word	0x20000a44

08004e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e54:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <SystemInit+0x20>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	4a05      	ldr	r2, [pc, #20]	; (8004e70 <SystemInit+0x20>)
 8004e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	e000ed00 	.word	0xe000ed00

08004e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004eac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e78:	480d      	ldr	r0, [pc, #52]	; (8004eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e7a:	490e      	ldr	r1, [pc, #56]	; (8004eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e7c:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e80:	e002      	b.n	8004e88 <LoopCopyDataInit>

08004e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e86:	3304      	adds	r3, #4

08004e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e8c:	d3f9      	bcc.n	8004e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e8e:	4a0b      	ldr	r2, [pc, #44]	; (8004ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004e90:	4c0b      	ldr	r4, [pc, #44]	; (8004ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e94:	e001      	b.n	8004e9a <LoopFillZerobss>

08004e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e98:	3204      	adds	r2, #4

08004e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e9c:	d3fb      	bcc.n	8004e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e9e:	f7ff ffd7 	bl	8004e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ea2:	f005 fd53 	bl	800a94c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ea6:	f7fe fa87 	bl	80033b8 <main>
  bx  lr    
 8004eaa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004eac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004eb4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8004eb8:	08010918 	.word	0x08010918
  ldr r2, =_sbss
 8004ebc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8004ec0:	20000a98 	.word	0x20000a98

08004ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ec4:	e7fe      	b.n	8004ec4 <ADC_IRQHandler>

08004ec6 <DrawChar_16>:
//extern Settings Settings_DB;
extern InterfaceControlDB Control_DB;


void DrawChar_16(uint8_t Char, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint16_t Table[], uint16_t width_char, uint16_t height_char)
{
 8004ec6:	b590      	push	{r4, r7, lr}
 8004ec8:	b089      	sub	sp, #36	; 0x24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	4604      	mov	r4, r0
 8004ece:	4608      	mov	r0, r1
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4623      	mov	r3, r4
 8004ed6:	71fb      	strb	r3, [r7, #7]
 8004ed8:	4603      	mov	r3, r0
 8004eda:	80bb      	strh	r3, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	807b      	strh	r3, [r7, #2]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	803b      	strh	r3, [r7, #0]
	uint32_t Color_RGB;
	uint16_t Horizontal_line;
	struct {uint8_t b,g,r;} *vbuf=Video_buffer_pointer;
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee6:	613b      	str	r3, [r7, #16]

	for(int j=0;j<height_char;j++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	e044      	b.n	8004f78 <DrawChar_16+0xb2>
	{
		Horizontal_line = Table[(Char * height_char) + j];
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004ef4:	fb03 f202 	mul.w	r2, r3, r2
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	4413      	add	r3, r2
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f00:	4413      	add	r3, r2
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	83fb      	strh	r3, [r7, #30]
		Horizontal_line = Horizontal_line >> (16 - width_char);
 8004f06:	8bfa      	ldrh	r2, [r7, #30]
 8004f08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f0c:	f1c3 0310 	rsb	r3, r3, #16
 8004f10:	fa42 f303 	asr.w	r3, r2, r3
 8004f14:	83fb      	strh	r3, [r7, #30]

		for(int i=width_char;i>0;i--)
 8004f16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e026      	b.n	8004f6c <DrawChar_16+0xa6>
		{

			if(Horizontal_line & 0x1)
 8004f1e:	8bfb      	ldrh	r3, [r7, #30]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <DrawChar_16+0x68>
			{
				Color_RGB = Symbol_Color;
 8004f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	e001      	b.n	8004f32 <DrawChar_16+0x6c>
			}
			else
			{
				Color_RGB = Font_Color;
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	60fb      	str	r3, [r7, #12]
			}

			memcpy(&vbuf[Coord_X + ((Coord_Y+j) * Resolution_X) + i].b, &Color_RGB, 3);
 8004f32:	88ba      	ldrh	r2, [r7, #4]
 8004f34:	8879      	ldrh	r1, [r7, #2]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	440b      	add	r3, r1
 8004f3a:	8839      	ldrh	r1, [r7, #0]
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	441a      	add	r2, r3
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	4413      	add	r3, r2
 8004f46:	461a      	mov	r2, r3
 8004f48:	4613      	mov	r3, r2
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4413      	add	r3, r2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4413      	add	r3, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f107 030c 	add.w	r3, r7, #12
 8004f58:	2203      	movs	r2, #3
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	f005 fd34 	bl	800a9c8 <memcpy>
			Horizontal_line = Horizontal_line >> 1;
 8004f60:	8bfb      	ldrh	r3, [r7, #30]
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	83fb      	strh	r3, [r7, #30]
		for(int i=width_char;i>0;i--)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	dcd5      	bgt.n	8004f1e <DrawChar_16+0x58>
	for(int j=0;j<height_char;j++)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	3301      	adds	r3, #1
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	dbb5      	blt.n	8004eee <DrawChar_16+0x28>
		}

	}

}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	3724      	adds	r7, #36	; 0x24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd90      	pop	{r4, r7, pc}

08004f8c <DrawChar_32>:


void DrawChar_32(uint8_t Char, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8004f8c:	b590      	push	{r4, r7, lr}
 8004f8e:	b089      	sub	sp, #36	; 0x24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4604      	mov	r4, r0
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4623      	mov	r3, r4
 8004f9c:	71fb      	strb	r3, [r7, #7]
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	80bb      	strh	r3, [r7, #4]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	807b      	strh	r3, [r7, #2]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	803b      	strh	r3, [r7, #0]
	uint32_t Color_RGB;
	uint32_t Horizontal_line;
	struct {uint8_t b,g,r;} *vbuf=Video_buffer_pointer;
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fac:	613b      	str	r3, [r7, #16]
	Char = Char - 32;
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	3b20      	subs	r3, #32
 8004fb2:	71fb      	strb	r3, [r7, #7]

	for(int j=0;j<height_char;j++)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
 8004fb8:	e044      	b.n	8005044 <DrawChar_32+0xb8>
	{
		Horizontal_line = Table[(Char * height_char) + j];
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004fc0:	fb03 f202 	mul.w	r2, r3, r2
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fcc:	4413      	add	r3, r2
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	61fb      	str	r3, [r7, #28]
		Horizontal_line = Horizontal_line >> (32 - width_char);
 8004fd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004fd6:	f1c3 0320 	rsb	r3, r3, #32
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe0:	61fb      	str	r3, [r7, #28]

		for(int i=width_char;i>0;i--)
 8004fe2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	e026      	b.n	8005038 <DrawChar_32+0xac>
		{

			if(Horizontal_line & 0x1)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <DrawChar_32+0x6e>
			{
				Color_RGB = Symbol_Color;
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e001      	b.n	8004ffe <DrawChar_32+0x72>
			}
			else
			{
				Color_RGB = Font_Color;
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	60fb      	str	r3, [r7, #12]
			}

			memcpy(&vbuf[Coord_X + ((Coord_Y+j) * Resolution_X) + i].b, &Color_RGB, 3);
 8004ffe:	88ba      	ldrh	r2, [r7, #4]
 8005000:	8879      	ldrh	r1, [r7, #2]
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	440b      	add	r3, r1
 8005006:	8839      	ldrh	r1, [r7, #0]
 8005008:	fb01 f303 	mul.w	r3, r1, r3
 800500c:	441a      	add	r2, r3
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	4413      	add	r3, r2
 8005012:	461a      	mov	r2, r3
 8005014:	4613      	mov	r3, r2
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4413      	add	r3, r2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4413      	add	r3, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f107 030c 	add.w	r3, r7, #12
 8005024:	2203      	movs	r2, #3
 8005026:	4619      	mov	r1, r3
 8005028:	f005 fcce 	bl	800a9c8 <memcpy>
			Horizontal_line = Horizontal_line >> 1;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	61fb      	str	r3, [r7, #28]
		for(int i=width_char;i>0;i--)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	3b01      	subs	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	dcd5      	bgt.n	8004fea <DrawChar_32+0x5e>
	for(int j=0;j<height_char;j++)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	3301      	adds	r3, #1
 8005042:	61bb      	str	r3, [r7, #24]
 8005044:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	429a      	cmp	r2, r3
 800504c:	dbb5      	blt.n	8004fba <DrawChar_32+0x2e>
		}
	}
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	3724      	adds	r7, #36	; 0x24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd90      	pop	{r4, r7, pc}

08005058 <DrawString_16>:


void DrawString_16(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b09b      	sub	sp, #108	; 0x6c
 800505c:	af08      	add	r7, sp, #32
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	4608      	mov	r0, r1
 8005062:	4611      	mov	r1, r2
 8005064:	461a      	mov	r2, r3
 8005066:	4603      	mov	r3, r0
 8005068:	817b      	strh	r3, [r7, #10]
 800506a:	460b      	mov	r3, r1
 800506c:	813b      	strh	r3, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	80fb      	strh	r3, [r7, #6]
	char String2[50];
	for(int i=0;i<Len;i++)
 8005072:	2300      	movs	r3, #0
 8005074:	647b      	str	r3, [r7, #68]	; 0x44
 8005076:	e034      	b.n	80050e2 <DrawString_16+0x8a>
	{
	String2[i] = String[i] - 32;
 8005078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	3b20      	subs	r3, #32
 8005082:	b2d9      	uxtb	r1, r3
 8005084:	f107 0210 	add.w	r2, r7, #16
 8005088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508a:	4413      	add	r3, r2
 800508c:	460a      	mov	r2, r1
 800508e:	701a      	strb	r2, [r3, #0]
	DrawChar_16(String2[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8005090:	f107 0210 	add.w	r2, r7, #16
 8005094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005096:	4413      	add	r3, r2
 8005098:	7818      	ldrb	r0, [r3, #0]
 800509a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800509c:	b29b      	uxth	r3, r3
 800509e:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80050a2:	fb12 f303 	smulbb	r3, r2, r3
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	893b      	ldrh	r3, [r7, #8]
 80050aa:	4413      	add	r3, r2
 80050ac:	b299      	uxth	r1, r3
 80050ae:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80050b8:	9306      	str	r3, [sp, #24]
 80050ba:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80050be:	9305      	str	r3, [sp, #20]
 80050c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c2:	9304      	str	r3, [sp, #16]
 80050c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050c6:	9303      	str	r3, [sp, #12]
 80050c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ca:	9302      	str	r3, [sp, #8]
 80050cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	4623      	mov	r3, r4
 80050d8:	f7ff fef5 	bl	8004ec6 <DrawChar_16>
	for(int i=0;i<Len;i++)
 80050dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050de:	3301      	adds	r3, #1
 80050e0:	647b      	str	r3, [r7, #68]	; 0x44
 80050e2:	897b      	ldrh	r3, [r7, #10]
 80050e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e6:	429a      	cmp	r2, r3
 80050e8:	dbc6      	blt.n	8005078 <DrawString_16+0x20>
	}
}
 80050ea:	bf00      	nop
 80050ec:	bf00      	nop
 80050ee:	374c      	adds	r7, #76	; 0x4c
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd90      	pop	{r4, r7, pc}

080050f4 <Centred_DrawString_16>:

void Centred_DrawString_16(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08c      	sub	sp, #48	; 0x30
 80050f8:	af08      	add	r7, sp, #32
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	4608      	mov	r0, r1
 80050fe:	4611      	mov	r1, r2
 8005100:	461a      	mov	r2, r3
 8005102:	4603      	mov	r3, r0
 8005104:	817b      	strh	r3, [r7, #10]
 8005106:	460b      	mov	r3, r1
 8005108:	813b      	strh	r3, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (height_char / 2);
 800510e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	88fa      	ldrh	r2, [r7, #6]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	80fb      	strh	r3, [r7, #6]
	Coord_X = Coord_X - ((width_char * Len) / 2);
 800511a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800511c:	897a      	ldrh	r2, [r7, #10]
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	0fda      	lsrs	r2, r3, #31
 8005124:	4413      	add	r3, r2
 8005126:	105b      	asrs	r3, r3, #1
 8005128:	425b      	negs	r3, r3
 800512a:	b29a      	uxth	r2, r3
 800512c:	893b      	ldrh	r3, [r7, #8]
 800512e:	4413      	add	r3, r2
 8005130:	813b      	strh	r3, [r7, #8]
	DrawString_16(String, Len, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8005132:	88f8      	ldrh	r0, [r7, #6]
 8005134:	893a      	ldrh	r2, [r7, #8]
 8005136:	8979      	ldrh	r1, [r7, #10]
 8005138:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800513a:	9307      	str	r3, [sp, #28]
 800513c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800513e:	9306      	str	r3, [sp, #24]
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005142:	9305      	str	r3, [sp, #20]
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	9304      	str	r3, [sp, #16]
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	9303      	str	r3, [sp, #12]
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	9302      	str	r3, [sp, #8]
 8005150:	8bbb      	ldrh	r3, [r7, #28]
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	8b3b      	ldrh	r3, [r7, #24]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	4603      	mov	r3, r0
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff ff7c 	bl	8005058 <DrawString_16>
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <Short_Left_Colored_RU_DrawString_32>:
	Coord_Y = Coord_Y - (27 / 2);
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, BackgroundColor, BasicSymbolColor, RU_18x27_Table, 18, 27);
}

void Short_Left_Colored_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t PageNumber)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	; 0x30
 800516c:	af08      	add	r7, sp, #32
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	461a      	mov	r2, r3
 8005176:	4603      	mov	r3, r0
 8005178:	817b      	strh	r3, [r7, #10]
 800517a:	460b      	mov	r3, r1
 800517c:	813b      	strh	r3, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (27 / 2);
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	3b0d      	subs	r3, #13
 8005186:	80fb      	strh	r3, [r7, #6]
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
 8005188:	88f8      	ldrh	r0, [r7, #6]
 800518a:	893a      	ldrh	r2, [r7, #8]
 800518c:	8979      	ldrh	r1, [r7, #10]
 800518e:	231b      	movs	r3, #27
 8005190:	9307      	str	r3, [sp, #28]
 8005192:	2312      	movs	r3, #18
 8005194:	9306      	str	r3, [sp, #24]
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <Short_Left_Colored_RU_DrawString_32+0x5c>)
 8005198:	9305      	str	r3, [sp, #20]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	9303      	str	r3, [sp, #12]
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	9302      	str	r3, [sp, #8]
 80051a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	f44f 7348 	mov.w	r3, #800	; 0x320
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	4603      	mov	r3, r0
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f807 	bl	80051c8 <RU_DrawString_32>
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	0800bfdc 	.word	0x0800bfdc

080051c8 <RU_DrawString_32>:
	DrawChar_32(String[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
	}
}

void RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b0ab      	sub	sp, #172	; 0xac
 80051cc:	af08      	add	r7, sp, #32
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	4608      	mov	r0, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	461a      	mov	r2, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	817b      	strh	r3, [r7, #10]
 80051da:	460b      	mov	r3, r1
 80051dc:	813b      	strh	r3, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]

	uint8_t String_OUT[100];
	uint16_t num = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint16_t limit = Len*2;
 80051e8:	897b      	ldrh	r3, [r7, #10]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	for(int i=0;i<limit;i++)
 80051f0:	2300      	movs	r3, #0
 80051f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051f6:	e04a      	b.n	800528e <RU_DrawString_32+0xc6>
	{
		if(String[i]>=208)
 80051f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2bcf      	cmp	r3, #207	; 0xcf
 8005204:	d929      	bls.n	800525a <RU_DrawString_32+0x92>
		{
			if(String[i]==208){String_OUT[num] = (String[i+1] - 79);}
 8005206:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2bd0      	cmp	r3, #208	; 0xd0
 8005212:	d10e      	bne.n	8005232 <RU_DrawString_32+0x6a>
 8005214:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005218:	3301      	adds	r3, #1
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	781a      	ldrb	r2, [r3, #0]
 8005220:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005224:	3a4f      	subs	r2, #79	; 0x4f
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	3388      	adds	r3, #136	; 0x88
 800522a:	443b      	add	r3, r7
 800522c:	f803 2c74 	strb.w	r2, [r3, #-116]
 8005230:	e00d      	b.n	800524e <RU_DrawString_32+0x86>
			else{String_OUT[num] = (String[i+1] - 15);}
 8005232:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005236:	3301      	adds	r3, #1
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	781a      	ldrb	r2, [r3, #0]
 800523e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005242:	3a0f      	subs	r2, #15
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	3388      	adds	r3, #136	; 0x88
 8005248:	443b      	add	r3, r7
 800524a:	f803 2c74 	strb.w	r2, [r3, #-116]
			i++;
 800524e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005252:	3301      	adds	r3, #1
 8005254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005258:	e00f      	b.n	800527a <RU_DrawString_32+0xb2>
		}
		else
		{
			String_OUT[num] = (String[i]);
 800525a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	441a      	add	r2, r3
 8005262:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005266:	7812      	ldrb	r2, [r2, #0]
 8005268:	3388      	adds	r3, #136	; 0x88
 800526a:	443b      	add	r3, r7
 800526c:	f803 2c74 	strb.w	r2, [r3, #-116]
			limit--;
 8005270:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005274:	3b01      	subs	r3, #1
 8005276:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		}
		num++;
 800527a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800527e:	3301      	adds	r3, #1
 8005280:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	for(int i=0;i<limit;i++)
 8005284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005288:	3301      	adds	r3, #1
 800528a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800528e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005292:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005296:	429a      	cmp	r2, r3
 8005298:	dbae      	blt.n	80051f8 <RU_DrawString_32+0x30>
	}

	for(int i=num;i<(Len*2);i++){String_OUT[i]=0;}
 800529a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800529e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052a0:	e008      	b.n	80052b4 <RU_DrawString_32+0xec>
 80052a2:	f107 0214 	add.w	r2, r7, #20
 80052a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052a8:	4413      	add	r3, r2
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052b0:	3301      	adds	r3, #1
 80052b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052b4:	897b      	ldrh	r3, [r7, #10]
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80052ba:	429a      	cmp	r2, r3
 80052bc:	dbf1      	blt.n	80052a2 <RU_DrawString_32+0xda>


	for(int i=0;i<Len;i++)
 80052be:	2300      	movs	r3, #0
 80052c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80052c2:	e02c      	b.n	800531e <RU_DrawString_32+0x156>
	{
		DrawChar_32(String_OUT[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color,
 80052c4:	f107 0214 	add.w	r2, r7, #20
 80052c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ca:	4413      	add	r3, r2
 80052cc:	7818      	ldrb	r0, [r3, #0]
 80052ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80052d6:	fb12 f303 	smulbb	r3, r2, r3
 80052da:	b29a      	uxth	r2, r3
 80052dc:	893b      	ldrh	r3, [r7, #8]
 80052de:	4413      	add	r3, r2
 80052e0:	b299      	uxth	r1, r3
 80052e2:	f8b7 4098 	ldrh.w	r4, [r7, #152]	; 0x98
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80052ec:	9306      	str	r3, [sp, #24]
 80052ee:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80052f2:	9305      	str	r3, [sp, #20]
 80052f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052f8:	9304      	str	r3, [sp, #16]
 80052fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052fe:	9303      	str	r3, [sp, #12]
 8005300:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005304:	9302      	str	r3, [sp, #8]
 8005306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	4623      	mov	r3, r4
 8005314:	f7ff fe3a 	bl	8004f8c <DrawChar_32>
	for(int i=0;i<Len;i++)
 8005318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800531a:	3301      	adds	r3, #1
 800531c:	67bb      	str	r3, [r7, #120]	; 0x78
 800531e:	897b      	ldrh	r3, [r7, #10]
 8005320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005322:	429a      	cmp	r2, r3
 8005324:	dbce      	blt.n	80052c4 <RU_DrawString_32+0xfc>
				Table, width_char, height_char);
	}
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	378c      	adds	r7, #140	; 0x8c
 800532c:	46bd      	mov	sp, r7
 800532e:	bd90      	pop	{r4, r7, pc}

08005330 <Centred_RU_DrawString_32>:

void Centred_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08c      	sub	sp, #48	; 0x30
 8005334:	af08      	add	r7, sp, #32
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	4608      	mov	r0, r1
 800533a:	4611      	mov	r1, r2
 800533c:	461a      	mov	r2, r3
 800533e:	4603      	mov	r3, r0
 8005340:	817b      	strh	r3, [r7, #10]
 8005342:	460b      	mov	r3, r1
 8005344:	813b      	strh	r3, [r7, #8]
 8005346:	4613      	mov	r3, r2
 8005348:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (height_char / 2);
 800534a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800534c:	085b      	lsrs	r3, r3, #1
 800534e:	b29b      	uxth	r3, r3
 8005350:	88fa      	ldrh	r2, [r7, #6]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	80fb      	strh	r3, [r7, #6]
	Coord_X = Coord_X - ((width_char * Len) / 2);
 8005356:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005358:	897a      	ldrh	r2, [r7, #10]
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	0fda      	lsrs	r2, r3, #31
 8005360:	4413      	add	r3, r2
 8005362:	105b      	asrs	r3, r3, #1
 8005364:	425b      	negs	r3, r3
 8005366:	b29a      	uxth	r2, r3
 8005368:	893b      	ldrh	r3, [r7, #8]
 800536a:	4413      	add	r3, r2
 800536c:	813b      	strh	r3, [r7, #8]
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 800536e:	88f8      	ldrh	r0, [r7, #6]
 8005370:	893a      	ldrh	r2, [r7, #8]
 8005372:	8979      	ldrh	r1, [r7, #10]
 8005374:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005376:	9307      	str	r3, [sp, #28]
 8005378:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800537a:	9306      	str	r3, [sp, #24]
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	9305      	str	r3, [sp, #20]
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	9304      	str	r3, [sp, #16]
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	9303      	str	r3, [sp, #12]
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	9302      	str	r3, [sp, #8]
 800538c:	8bbb      	ldrh	r3, [r7, #28]
 800538e:	9301      	str	r3, [sp, #4]
 8005390:	8b3b      	ldrh	r3, [r7, #24]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	4603      	mov	r3, r0
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f7ff ff16 	bl	80051c8 <RU_DrawString_32>
}
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <Short_Centred_RU_DrawString_32>:

void Short_Centred_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X,
		uint16_t Coord_Y, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t PageNumber)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08c      	sub	sp, #48	; 0x30
 80053a8:	af08      	add	r7, sp, #32
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	4608      	mov	r0, r1
 80053ae:	4611      	mov	r1, r2
 80053b0:	461a      	mov	r2, r3
 80053b2:	4603      	mov	r3, r0
 80053b4:	817b      	strh	r3, [r7, #10]
 80053b6:	460b      	mov	r3, r1
 80053b8:	813b      	strh	r3, [r7, #8]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
	Centred_RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
 80053be:	88f8      	ldrh	r0, [r7, #6]
 80053c0:	893a      	ldrh	r2, [r7, #8]
 80053c2:	8979      	ldrh	r1, [r7, #10]
 80053c4:	231b      	movs	r3, #27
 80053c6:	9307      	str	r3, [sp, #28]
 80053c8:	2312      	movs	r3, #18
 80053ca:	9306      	str	r3, [sp, #24]
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <Short_Centred_RU_DrawString_32+0x54>)
 80053ce:	9305      	str	r3, [sp, #20]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	9304      	str	r3, [sp, #16]
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	9303      	str	r3, [sp, #12]
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	9302      	str	r3, [sp, #8]
 80053dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	4603      	mov	r3, r0
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f7ff ffa0 	bl	8005330 <Centred_RU_DrawString_32>
}
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	0800bfdc 	.word	0x0800bfdc

080053fc <Centred_DrawNumber_16>:
{
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, VideoBuffer, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
}

void Centred_DrawNumber_16(int16_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b09d      	sub	sp, #116	; 0x74
 8005400:	af08      	add	r7, sp, #32
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	4611      	mov	r1, r2
 8005408:	461a      	mov	r2, r3
 800540a:	4623      	mov	r3, r4
 800540c:	80fb      	strh	r3, [r7, #6]
 800540e:	4603      	mov	r3, r0
 8005410:	80bb      	strh	r3, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	807b      	strh	r3, [r7, #2]
 8005416:	4613      	mov	r3, r2
 8005418:	803b      	strh	r3, [r7, #0]
	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 800541a:	2300      	movs	r3, #0
 800541c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800541e:	e008      	b.n	8005432 <Centred_DrawNumber_16+0x36>
 8005420:	f107 0208 	add.w	r2, r7, #8
 8005424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005426:	4413      	add	r3, r2
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542e:	3301      	adds	r3, #1
 8005430:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005434:	2b09      	cmp	r3, #9
 8005436:	ddf3      	ble.n	8005420 <Centred_DrawNumber_16+0x24>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	  if(Register < 0)
 8005444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005448:	2b00      	cmp	r3, #0
 800544a:	da06      	bge.n	800545a <Centred_DrawNumber_16+0x5e>
	  {
		  BelowZero = 1;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		  Register = 0 - Register;
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	425b      	negs	r3, r3
 8005456:	b29b      	uxth	r3, r3
 8005458:	80fb      	strh	r3, [r7, #6]
	  }

	  if(Comma>5){Comma=5;}
 800545a:	88bb      	ldrh	r3, [r7, #4]
 800545c:	2b05      	cmp	r3, #5
 800545e:	d901      	bls.n	8005464 <Centred_DrawNumber_16+0x68>
 8005460:	2305      	movs	r3, #5
 8005462:	80bb      	strh	r3, [r7, #4]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 8005464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005468:	f107 0114 	add.w	r1, r7, #20
 800546c:	220a      	movs	r2, #10
 800546e:	4618      	mov	r0, r3
 8005470:	f005 faa8 	bl	800a9c4 <itoa>

	  Cycle_Pointer = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 800547a:	e004      	b.n	8005486 <Centred_DrawNumber_16+0x8a>
	  {
		  Cycle_Pointer++;
 800547c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005480:	3301      	adds	r3, #1
 8005482:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8005486:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800548a:	3350      	adds	r3, #80	; 0x50
 800548c:	443b      	add	r3, r7
 800548e:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f2      	bne.n	800547c <Centred_DrawNumber_16+0x80>
	  }

	  TemporaryLenPointer = Numbers;
 8005496:	887b      	ldrh	r3, [r7, #2]
 8005498:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  for(int i=TemporaryLenPointer;i;i--)
 800549c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80054a0:	643b      	str	r3, [r7, #64]	; 0x40
 80054a2:	e00f      	b.n	80054c4 <Centred_DrawNumber_16+0xc8>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 80054a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a6:	3b01      	subs	r3, #1
 80054a8:	3350      	adds	r3, #80	; 0x50
 80054aa:	443b      	add	r3, r7
 80054ac:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80054b0:	f803 2c48 	strb.w	r2, [r3, #-72]
		  TemporaryLenPointer--;
 80054b4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80054b8:	3b01      	subs	r3, #1
 80054ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  for(int i=TemporaryLenPointer;i;i--)
 80054be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c0:	3b01      	subs	r3, #1
 80054c2:	643b      	str	r3, [r7, #64]	; 0x40
 80054c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1ec      	bne.n	80054a4 <Centred_DrawNumber_16+0xa8>
	  }


	  if(Comma>0)
 80054ca:	88bb      	ldrh	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d06b      	beq.n	80055a8 <Centred_DrawNumber_16+0x1ac>
	  {
		  if(Comma>=Cycle_Pointer)
 80054d0:	88ba      	ldrh	r2, [r7, #4]
 80054d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d338      	bcc.n	800554c <Centred_DrawNumber_16+0x150>
		  {
			  Final_Len = Comma + 2;
 80054da:	88bb      	ldrh	r3, [r7, #4]
 80054dc:	3302      	adds	r3, #2
 80054de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			  int8_t temp = Cycle_Pointer;
 80054e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  for(int i=(Final_Len-1);i>=0;i--)
 80054ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80054ee:	3b01      	subs	r3, #1
 80054f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80054f2:	e020      	b.n	8005536 <Centred_DrawNumber_16+0x13a>
			  {
				  if(temp)
 80054f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d013      	beq.n	8005524 <Centred_DrawNumber_16+0x128>
				  {
					  temp--;
 80054fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005500:	b2db      	uxtb	r3, r3
 8005502:	3b01      	subs	r3, #1
 8005504:	b2db      	uxtb	r3, r3
 8005506:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					  String[i] = String[temp];
 800550a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800550e:	3350      	adds	r3, #80	; 0x50
 8005510:	443b      	add	r3, r7
 8005512:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8005516:	f107 0214 	add.w	r2, r7, #20
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	4413      	add	r3, r2
 800551e:	460a      	mov	r2, r1
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	e005      	b.n	8005530 <Centred_DrawNumber_16+0x134>
				  }
				  else
				  {
					  String[i] = '0';
 8005524:	f107 0214 	add.w	r2, r7, #20
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	4413      	add	r3, r2
 800552c:	2230      	movs	r2, #48	; 0x30
 800552e:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	3b01      	subs	r3, #1
 8005534:	63bb      	str	r3, [r7, #56]	; 0x38
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	dadb      	bge.n	80054f4 <Centred_DrawNumber_16+0xf8>
				  }
			  }
			  String[1] = ',';
 800553c:	232c      	movs	r3, #44	; 0x2c
 800553e:	757b      	strb	r3, [r7, #21]
			  Cycle_Pointer--;
 8005540:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005544:	3b01      	subs	r3, #1
 8005546:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800554a:	e031      	b.n	80055b0 <Centred_DrawNumber_16+0x1b4>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 800554c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005550:	3301      	adds	r3, #1
 8005552:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			  for(int i=(Final_Len-1);i>=0;i--)
 8005556:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800555a:	3b01      	subs	r3, #1
 800555c:	637b      	str	r3, [r7, #52]	; 0x34
 800555e:	e015      	b.n	800558c <Centred_DrawNumber_16+0x190>
			  {
				  if( i > (Final_Len - Comma - 1))
 8005560:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005564:	88bb      	ldrh	r3, [r7, #4]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800556a:	429a      	cmp	r2, r3
 800556c:	db0b      	blt.n	8005586 <Centred_DrawNumber_16+0x18a>
				  {
					  String[i] = String[i-1];
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	3b01      	subs	r3, #1
 8005572:	3350      	adds	r3, #80	; 0x50
 8005574:	443b      	add	r3, r7
 8005576:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 800557a:	f107 0214 	add.w	r2, r7, #20
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	4413      	add	r3, r2
 8005582:	460a      	mov	r2, r1
 8005584:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8005586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005588:	3b01      	subs	r3, #1
 800558a:	637b      	str	r3, [r7, #52]	; 0x34
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	2b00      	cmp	r3, #0
 8005590:	dae6      	bge.n	8005560 <Centred_DrawNumber_16+0x164>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 8005592:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005596:	88bb      	ldrh	r3, [r7, #4]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	3350      	adds	r3, #80	; 0x50
 800559e:	443b      	add	r3, r7
 80055a0:	222c      	movs	r2, #44	; 0x2c
 80055a2:	f803 2c3c 	strb.w	r2, [r3, #-60]
 80055a6:	e003      	b.n	80055b0 <Centred_DrawNumber_16+0x1b4>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 80055a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46


	  if(BelowZero)
 80055b0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01c      	beq.n	80055f2 <Centred_DrawNumber_16+0x1f6>
	  {
		  for(int i=Final_Len;i>=0;i--)
 80055b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30
 80055be:	e00e      	b.n	80055de <Centred_DrawNumber_16+0x1e2>
		  {
			  String[i] = String[i - 1];
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	3b01      	subs	r3, #1
 80055c4:	3350      	adds	r3, #80	; 0x50
 80055c6:	443b      	add	r3, r7
 80055c8:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 80055cc:	f107 0214 	add.w	r2, r7, #20
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	4413      	add	r3, r2
 80055d4:	460a      	mov	r2, r1
 80055d6:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	3b01      	subs	r3, #1
 80055dc:	633b      	str	r3, [r7, #48]	; 0x30
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	daed      	bge.n	80055c0 <Centred_DrawNumber_16+0x1c4>
		  }
		  String[0] = '-';
 80055e4:	232d      	movs	r3, #45	; 0x2d
 80055e6:	753b      	strb	r3, [r7, #20]
		  Final_Len++;
 80055e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80055ec:	3301      	adds	r3, #1
 80055ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  }

		uint8_t StandartLen = Numbers;
 80055f2:	887b      	ldrh	r3, [r7, #2]
 80055f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t IschLen = Final_Len - 1;
 80055f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(Final_Len < StandartLen)
 8005604:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005608:	b29b      	uxth	r3, r3
 800560a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800560e:	429a      	cmp	r2, r3
 8005610:	d236      	bcs.n	8005680 <Centred_DrawNumber_16+0x284>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 8005612:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005616:	3b01      	subs	r3, #1
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28
 800561a:	e02e      	b.n	800567a <Centred_DrawNumber_16+0x27e>
			{
				if(IschLen)
 800561c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005620:	2b00      	cmp	r3, #0
 8005622:	d011      	beq.n	8005648 <Centred_DrawNumber_16+0x24c>
				{
					String[i] = String[IschLen];
 8005624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005628:	3350      	adds	r3, #80	; 0x50
 800562a:	443b      	add	r3, r7
 800562c:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8005630:	f107 0214 	add.w	r2, r7, #20
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	4413      	add	r3, r2
 8005638:	460a      	mov	r2, r1
 800563a:	701a      	strb	r2, [r3, #0]
					IschLen--;
 800563c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005640:	3b01      	subs	r3, #1
 8005642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005646:	e015      	b.n	8005674 <Centred_DrawNumber_16+0x278>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 8005648:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800564c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005654:	429a      	cmp	r2, r3
 8005656:	d107      	bne.n	8005668 <Centred_DrawNumber_16+0x26c>
					{
						String[i] = String[0];
 8005658:	7d39      	ldrb	r1, [r7, #20]
 800565a:	f107 0214 	add.w	r2, r7, #20
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	4413      	add	r3, r2
 8005662:	460a      	mov	r2, r1
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	e005      	b.n	8005674 <Centred_DrawNumber_16+0x278>
					}
					else
					{
						String[i] = ' ';
 8005668:	f107 0214 	add.w	r2, r7, #20
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	4413      	add	r3, r2
 8005670:	2220      	movs	r2, #32
 8005672:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	3b01      	subs	r3, #1
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	2b00      	cmp	r3, #0
 800567e:	dacd      	bge.n	800561c <Centred_DrawNumber_16+0x220>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 8005680:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800568c:	4413      	add	r3, r2
 800568e:	843b      	strh	r3, [r7, #32]
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 8005690:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8005694:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005698:	fb02 f303 	mul.w	r3, r2, r3
 800569c:	0fda      	lsrs	r2, r3, #31
 800569e:	4413      	add	r3, r2
 80056a0:	105b      	asrs	r3, r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80056a8:	4413      	add	r3, r2
 80056aa:	83fb      	strh	r3, [r7, #30]

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 80056ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	da01      	bge.n	80056b8 <Centred_DrawNumber_16+0x2bc>
 80056b4:	2300      	movs	r3, #0
 80056b6:	803b      	strh	r3, [r7, #0]

		for(int i=0;i<Numbers;i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
 80056bc:	e095      	b.n	80057ea <Centred_DrawNumber_16+0x3ee>
		{
			if(Pointer_Razr == RazrPointerArray[i])
 80056be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80056c2:	f107 0108 	add.w	r1, r7, #8
 80056c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c8:	440a      	add	r2, r1
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d147      	bne.n	8005760 <Centred_DrawNumber_16+0x364>
			{
				if(Pointer_Razr)
 80056d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8085 	beq.w	80057e4 <Centred_DrawNumber_16+0x3e8>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 80056da:	4b58      	ldr	r3, [pc, #352]	; (800583c <Centred_DrawNumber_16+0x440>)
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	3301      	adds	r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80056e8:	fb12 f303 	smulbb	r3, r2, r3
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	8bfa      	ldrh	r2, [r7, #30]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	b299      	uxth	r1, r3
 80056f4:	8c3b      	ldrh	r3, [r7, #32]
 80056f6:	3301      	adds	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 80056fe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005702:	9303      	str	r3, [sp, #12]
 8005704:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005708:	9302      	str	r3, [sp, #8]
 800570a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	2304      	movs	r3, #4
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	4623      	mov	r3, r4
 8005714:	f000 fea0 	bl	8006458 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8005718:	4b48      	ldr	r3, [pc, #288]	; (800583c <Centred_DrawNumber_16+0x440>)
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	3301      	adds	r3, #1
 8005720:	b29b      	uxth	r3, r3
 8005722:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8005726:	fb12 f303 	smulbb	r3, r2, r3
 800572a:	b29b      	uxth	r3, r3
 800572c:	8bfa      	ldrh	r2, [r7, #30]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	b299      	uxth	r1, r3
 8005732:	8c3a      	ldrh	r2, [r7, #32]
 8005734:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b04      	subs	r3, #4
 800573e:	b29a      	uxth	r2, r3
 8005740:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8005744:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005748:	9303      	str	r3, [sp, #12]
 800574a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800574e:	9302      	str	r3, [sp, #8]
 8005750:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005752:	9301      	str	r3, [sp, #4]
 8005754:	2304      	movs	r3, #4
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	4623      	mov	r3, r4
 800575a:	f000 fe7d 	bl	8006458 <Draw_Rectangle>
 800575e:	e041      	b.n	80057e4 <Centred_DrawNumber_16+0x3e8>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8005760:	4b37      	ldr	r3, [pc, #220]	; (8005840 <Centred_DrawNumber_16+0x444>)
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	3301      	adds	r3, #1
 8005768:	b29b      	uxth	r3, r3
 800576a:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800576e:	fb12 f303 	smulbb	r3, r2, r3
 8005772:	b29b      	uxth	r3, r3
 8005774:	8bfa      	ldrh	r2, [r7, #30]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	b299      	uxth	r1, r3
 800577a:	8c3b      	ldrh	r3, [r7, #32]
 800577c:	3301      	adds	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8005784:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005788:	9303      	str	r3, [sp, #12]
 800578a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800578e:	9302      	str	r3, [sp, #8]
 8005790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	2304      	movs	r3, #4
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4623      	mov	r3, r4
 800579a:	f000 fe5d 	bl	8006458 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 800579e:	4b28      	ldr	r3, [pc, #160]	; (8005840 <Centred_DrawNumber_16+0x444>)
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	3301      	adds	r3, #1
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80057ac:	fb12 f303 	smulbb	r3, r2, r3
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	8bfa      	ldrh	r2, [r7, #30]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	b299      	uxth	r1, r3
 80057b8:	8c3a      	ldrh	r2, [r7, #32]
 80057ba:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b04      	subs	r3, #4
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 80057ca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80057ce:	9303      	str	r3, [sp, #12]
 80057d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80057d4:	9302      	str	r3, [sp, #8]
 80057d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	2304      	movs	r3, #4
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	4623      	mov	r3, r4
 80057e0:	f000 fe3a 	bl	8006458 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	3301      	adds	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	887b      	ldrh	r3, [r7, #2]
 80057ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ee:	429a      	cmp	r2, r3
 80057f0:	f6ff af65 	blt.w	80056be <Centred_DrawNumber_16+0x2c2>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 80057f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057f8:	b299      	uxth	r1, r3
 80057fa:	f8b7 4064 	ldrh.w	r4, [r7, #100]	; 0x64
 80057fe:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8005802:	f107 0014 	add.w	r0, r7, #20
 8005806:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800580a:	9307      	str	r3, [sp, #28]
 800580c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8005810:	9306      	str	r3, [sp, #24]
 8005812:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005814:	9305      	str	r3, [sp, #20]
 8005816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005818:	9304      	str	r3, [sp, #16]
 800581a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800581c:	9303      	str	r3, [sp, #12]
 800581e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005820:	9302      	str	r3, [sp, #8]
 8005822:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	4623      	mov	r3, r4
 8005830:	f7ff fc60 	bl	80050f4 <Centred_DrawString_16>
}
 8005834:	bf00      	nop
 8005836:	3754      	adds	r7, #84	; 0x54
 8005838:	46bd      	mov	sp, r7
 800583a:	bd90      	pop	{r4, r7, pc}
 800583c:	20000014 	.word	0x20000014
 8005840:	20000008 	.word	0x20000008

08005844 <Centred_DrawNumber_16_32bit>:

void Centred_DrawNumber_16_32bit(int32_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8005844:	b590      	push	{r4, r7, lr}
 8005846:	b09f      	sub	sp, #124	; 0x7c
 8005848:	af08      	add	r7, sp, #32
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	461a      	mov	r2, r3
 8005852:	4603      	mov	r3, r0
 8005854:	817b      	strh	r3, [r7, #10]
 8005856:	460b      	mov	r3, r1
 8005858:	813b      	strh	r3, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]

	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 800585e:	2300      	movs	r3, #0
 8005860:	657b      	str	r3, [r7, #84]	; 0x54
 8005862:	e008      	b.n	8005876 <Centred_DrawNumber_16_32bit+0x32>
 8005864:	f107 0210 	add.w	r2, r7, #16
 8005868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800586a:	4413      	add	r3, r2
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005872:	3301      	adds	r3, #1
 8005874:	657b      	str	r3, [r7, #84]	; 0x54
 8005876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005878:	2b09      	cmp	r3, #9
 800587a:	ddf3      	ble.n	8005864 <Centred_DrawNumber_16_32bit+0x20>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d




	  if(Register < 0)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	da05      	bge.n	800589a <Centred_DrawNumber_16_32bit+0x56>
	  {
		  BelowZero = 1;
 800588e:	2301      	movs	r3, #1
 8005890:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		  Register = 0 - Register;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	425b      	negs	r3, r3
 8005898:	60fb      	str	r3, [r7, #12]
	  }

	  if(Comma>5){Comma=5;}
 800589a:	897b      	ldrh	r3, [r7, #10]
 800589c:	2b05      	cmp	r3, #5
 800589e:	d901      	bls.n	80058a4 <Centred_DrawNumber_16_32bit+0x60>
 80058a0:	2305      	movs	r3, #5
 80058a2:	817b      	strh	r3, [r7, #10]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 80058a4:	f107 031c 	add.w	r3, r7, #28
 80058a8:	220a      	movs	r2, #10
 80058aa:	4619      	mov	r1, r3
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f005 f889 	bl	800a9c4 <itoa>

	  Cycle_Pointer = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 80058b8:	e004      	b.n	80058c4 <Centred_DrawNumber_16_32bit+0x80>
	  {
		  Cycle_Pointer++;
 80058ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80058be:	3301      	adds	r3, #1
 80058c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 80058c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80058c8:	3358      	adds	r3, #88	; 0x58
 80058ca:	443b      	add	r3, r7
 80058cc:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f2      	bne.n	80058ba <Centred_DrawNumber_16_32bit+0x76>
	  }

	  TemporaryLenPointer = Numbers;
 80058d4:	893b      	ldrh	r3, [r7, #8]
 80058d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  for(int i=TemporaryLenPointer;i;i--)
 80058da:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80058de:	64bb      	str	r3, [r7, #72]	; 0x48
 80058e0:	e00f      	b.n	8005902 <Centred_DrawNumber_16_32bit+0xbe>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 80058e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e4:	3b01      	subs	r3, #1
 80058e6:	3358      	adds	r3, #88	; 0x58
 80058e8:	443b      	add	r3, r7
 80058ea:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80058ee:	f803 2c48 	strb.w	r2, [r3, #-72]
		  TemporaryLenPointer--;
 80058f2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80058f6:	3b01      	subs	r3, #1
 80058f8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  for(int i=TemporaryLenPointer;i;i--)
 80058fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fe:	3b01      	subs	r3, #1
 8005900:	64bb      	str	r3, [r7, #72]	; 0x48
 8005902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ec      	bne.n	80058e2 <Centred_DrawNumber_16_32bit+0x9e>
	  }


	  if(Comma>0)
 8005908:	897b      	ldrh	r3, [r7, #10]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d06b      	beq.n	80059e6 <Centred_DrawNumber_16_32bit+0x1a2>
	  {
		  if(Comma>=Cycle_Pointer)
 800590e:	897a      	ldrh	r2, [r7, #10]
 8005910:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005914:	429a      	cmp	r2, r3
 8005916:	d338      	bcc.n	800598a <Centred_DrawNumber_16_32bit+0x146>
		  {
			  Final_Len = Comma + 2;
 8005918:	897b      	ldrh	r3, [r7, #10]
 800591a:	3302      	adds	r3, #2
 800591c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			  int8_t temp = Cycle_Pointer;
 8005920:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005924:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  for(int i=(Final_Len-1);i>=0;i--)
 8005928:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800592c:	3b01      	subs	r3, #1
 800592e:	643b      	str	r3, [r7, #64]	; 0x40
 8005930:	e020      	b.n	8005974 <Centred_DrawNumber_16_32bit+0x130>
			  {
				  if(temp)
 8005932:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005936:	2b00      	cmp	r3, #0
 8005938:	d013      	beq.n	8005962 <Centred_DrawNumber_16_32bit+0x11e>
				  {
					  temp--;
 800593a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800593e:	b2db      	uxtb	r3, r3
 8005940:	3b01      	subs	r3, #1
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  String[i] = String[temp];
 8005948:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800594c:	3358      	adds	r3, #88	; 0x58
 800594e:	443b      	add	r3, r7
 8005950:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8005954:	f107 021c 	add.w	r2, r7, #28
 8005958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595a:	4413      	add	r3, r2
 800595c:	460a      	mov	r2, r1
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	e005      	b.n	800596e <Centred_DrawNumber_16_32bit+0x12a>
				  }
				  else
				  {
					  String[i] = '0';
 8005962:	f107 021c 	add.w	r2, r7, #28
 8005966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005968:	4413      	add	r3, r2
 800596a:	2230      	movs	r2, #48	; 0x30
 800596c:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 800596e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005970:	3b01      	subs	r3, #1
 8005972:	643b      	str	r3, [r7, #64]	; 0x40
 8005974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	dadb      	bge.n	8005932 <Centred_DrawNumber_16_32bit+0xee>
				  }
			  }
			  String[1] = ',';
 800597a:	232c      	movs	r3, #44	; 0x2c
 800597c:	777b      	strb	r3, [r7, #29]
			  Cycle_Pointer--;
 800597e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005982:	3b01      	subs	r3, #1
 8005984:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005988:	e031      	b.n	80059ee <Centred_DrawNumber_16_32bit+0x1aa>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 800598a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800598e:	3301      	adds	r3, #1
 8005990:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			  for(int i=(Final_Len-1);i>=0;i--)
 8005994:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005998:	3b01      	subs	r3, #1
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800599c:	e015      	b.n	80059ca <Centred_DrawNumber_16_32bit+0x186>
			  {
				  if( i > (Final_Len - Comma - 1))
 800599e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80059a2:	897b      	ldrh	r3, [r7, #10]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059a8:	429a      	cmp	r2, r3
 80059aa:	db0b      	blt.n	80059c4 <Centred_DrawNumber_16_32bit+0x180>
				  {
					  String[i] = String[i-1];
 80059ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ae:	3b01      	subs	r3, #1
 80059b0:	3358      	adds	r3, #88	; 0x58
 80059b2:	443b      	add	r3, r7
 80059b4:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 80059b8:	f107 021c 	add.w	r2, r7, #28
 80059bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059be:	4413      	add	r3, r2
 80059c0:	460a      	mov	r2, r1
 80059c2:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	3b01      	subs	r3, #1
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	dae6      	bge.n	800599e <Centred_DrawNumber_16_32bit+0x15a>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 80059d0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80059d4:	897b      	ldrh	r3, [r7, #10]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	3358      	adds	r3, #88	; 0x58
 80059dc:	443b      	add	r3, r7
 80059de:	222c      	movs	r2, #44	; 0x2c
 80059e0:	f803 2c3c 	strb.w	r2, [r3, #-60]
 80059e4:	e003      	b.n	80059ee <Centred_DrawNumber_16_32bit+0x1aa>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 80059e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80059ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e


	  if(BelowZero)
 80059ee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01c      	beq.n	8005a30 <Centred_DrawNumber_16_32bit+0x1ec>
	  {
		  for(int i=Final_Len;i>=0;i--)
 80059f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80059fc:	e00e      	b.n	8005a1c <Centred_DrawNumber_16_32bit+0x1d8>
		  {
			  String[i] = String[i - 1];
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	3b01      	subs	r3, #1
 8005a02:	3358      	adds	r3, #88	; 0x58
 8005a04:	443b      	add	r3, r7
 8005a06:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8005a0a:	f107 021c 	add.w	r2, r7, #28
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	4413      	add	r3, r2
 8005a12:	460a      	mov	r2, r1
 8005a14:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	daed      	bge.n	80059fe <Centred_DrawNumber_16_32bit+0x1ba>
		  }
		  String[0] = '-';
 8005a22:	232d      	movs	r3, #45	; 0x2d
 8005a24:	773b      	strb	r3, [r7, #28]
		  Final_Len++;
 8005a26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  }

		uint8_t StandartLen = Numbers;
 8005a30:	893b      	ldrh	r3, [r7, #8]
 8005a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		uint8_t IschLen = Final_Len - 1;
 8005a36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(Final_Len < StandartLen)
 8005a42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d236      	bcs.n	8005abe <Centred_DrawNumber_16_32bit+0x27a>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 8005a50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a54:	3b01      	subs	r3, #1
 8005a56:	633b      	str	r3, [r7, #48]	; 0x30
 8005a58:	e02e      	b.n	8005ab8 <Centred_DrawNumber_16_32bit+0x274>
			{
				if(IschLen)
 8005a5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d011      	beq.n	8005a86 <Centred_DrawNumber_16_32bit+0x242>
				{
					String[i] = String[IschLen];
 8005a62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a66:	3358      	adds	r3, #88	; 0x58
 8005a68:	443b      	add	r3, r7
 8005a6a:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8005a6e:	f107 021c 	add.w	r2, r7, #28
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	4413      	add	r3, r2
 8005a76:	460a      	mov	r2, r1
 8005a78:	701a      	strb	r2, [r3, #0]
					IschLen--;
 8005a7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005a84:	e015      	b.n	8005ab2 <Centred_DrawNumber_16_32bit+0x26e>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 8005a86:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005a8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d107      	bne.n	8005aa6 <Centred_DrawNumber_16_32bit+0x262>
					{
						String[i] = String[0];
 8005a96:	7f39      	ldrb	r1, [r7, #28]
 8005a98:	f107 021c 	add.w	r2, r7, #28
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	4413      	add	r3, r2
 8005aa0:	460a      	mov	r2, r1
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e005      	b.n	8005ab2 <Centred_DrawNumber_16_32bit+0x26e>
					}
					else
					{
						String[i] = ' ';
 8005aa6:	f107 021c 	add.w	r2, r7, #28
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	4413      	add	r3, r2
 8005aae:	2220      	movs	r2, #32
 8005ab0:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	dacd      	bge.n	8005a5a <Centred_DrawNumber_16_32bit+0x216>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 8005abe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005aca:	4413      	add	r3, r2
 8005acc:	853b      	strh	r3, [r7, #40]	; 0x28
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 8005ace:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005ad2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	0fda      	lsrs	r2, r3, #31
 8005adc:	4413      	add	r3, r2
 8005ade:	105b      	asrs	r3, r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005ae6:	4413      	add	r3, r2
 8005ae8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 8005aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	da01      	bge.n	8005af6 <Centred_DrawNumber_16_32bit+0x2b2>
 8005af2:	2300      	movs	r3, #0
 8005af4:	80fb      	strh	r3, [r7, #6]

		for(int i=0;i<Numbers;i++)
 8005af6:	2300      	movs	r3, #0
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afa:	e0a4      	b.n	8005c46 <Centred_DrawNumber_16_32bit+0x402>
		{
			if((Pointer_Razr == RazrPointerArray[i]) & (Font_Color != BackgroundColor))
 8005afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b00:	f107 0110 	add.w	r1, r7, #16
 8005b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b06:	440a      	add	r2, r1
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	bf0c      	ite	eq
 8005b0e:	2301      	moveq	r3, #1
 8005b10:	2300      	movne	r3, #0
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	4b61      	ldr	r3, [pc, #388]	; (8005c9c <Centred_DrawNumber_16_32bit+0x458>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b1a:	4299      	cmp	r1, r3
 8005b1c:	bf14      	ite	ne
 8005b1e:	2301      	movne	r3, #1
 8005b20:	2300      	moveq	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	4013      	ands	r3, r2
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d047      	beq.n	8005bbc <Centred_DrawNumber_16_32bit+0x378>
			{
				if(Pointer_Razr)
 8005b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8085 	beq.w	8005c40 <Centred_DrawNumber_16_32bit+0x3fc>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8005b36:	4b5a      	ldr	r3, [pc, #360]	; (8005ca0 <Centred_DrawNumber_16_32bit+0x45c>)
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8005b44:	fb12 f303 	smulbb	r3, r2, r3
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	b299      	uxth	r1, r3
 8005b50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b52:	3301      	adds	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 8005b5a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005b5e:	9303      	str	r3, [sp, #12]
 8005b60:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005b64:	9302      	str	r3, [sp, #8]
 8005b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	4623      	mov	r3, r4
 8005b70:	f000 fc72 	bl	8006458 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8005b74:	4b4a      	ldr	r3, [pc, #296]	; (8005ca0 <Centred_DrawNumber_16_32bit+0x45c>)
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8005b82:	fb12 f303 	smulbb	r3, r2, r3
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	b299      	uxth	r1, r3
 8005b8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005b90:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b04      	subs	r3, #4
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 8005ba0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005ba4:	9303      	str	r3, [sp, #12]
 8005ba6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005baa:	9302      	str	r3, [sp, #8]
 8005bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	4623      	mov	r3, r4
 8005bb6:	f000 fc4f 	bl	8006458 <Draw_Rectangle>
 8005bba:	e041      	b.n	8005c40 <Centred_DrawNumber_16_32bit+0x3fc>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8005bbc:	4b37      	ldr	r3, [pc, #220]	; (8005c9c <Centred_DrawNumber_16_32bit+0x458>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8005bca:	fb12 f303 	smulbb	r3, r2, r3
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	b299      	uxth	r1, r3
 8005bd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bd8:	3301      	adds	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 8005be0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005be4:	9303      	str	r3, [sp, #12]
 8005be6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005bea:	9302      	str	r3, [sp, #8]
 8005bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	f000 fc2f 	bl	8006458 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8005bfa:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <Centred_DrawNumber_16_32bit+0x458>)
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	3301      	adds	r3, #1
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8005c08:	fb12 f303 	smulbb	r3, r2, r3
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	b299      	uxth	r1, r3
 8005c14:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c16:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 8005c26:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005c2a:	9303      	str	r3, [sp, #12]
 8005c2c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005c30:	9302      	str	r3, [sp, #8]
 8005c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	2304      	movs	r3, #4
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	f000 fc0c 	bl	8006458 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	3301      	adds	r3, #1
 8005c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c46:	893b      	ldrh	r3, [r7, #8]
 8005c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	f6ff af56 	blt.w	8005afc <Centred_DrawNumber_16_32bit+0x2b8>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8005c50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c54:	b299      	uxth	r1, r3
 8005c56:	f8b7 406c 	ldrh.w	r4, [r7, #108]	; 0x6c
 8005c5a:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8005c5e:	f107 001c 	add.w	r0, r7, #28
 8005c62:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005c66:	9307      	str	r3, [sp, #28]
 8005c68:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005c6c:	9306      	str	r3, [sp, #24]
 8005c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c72:	9305      	str	r3, [sp, #20]
 8005c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c78:	9304      	str	r3, [sp, #16]
 8005c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c7c:	9303      	str	r3, [sp, #12]
 8005c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c80:	9302      	str	r3, [sp, #8]
 8005c82:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	4623      	mov	r3, r4
 8005c90:	f7ff fa30 	bl	80050f4 <Centred_DrawString_16>
}
 8005c94:	bf00      	nop
 8005c96:	375c      	adds	r7, #92	; 0x5c
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd90      	pop	{r4, r7, pc}
 8005c9c:	20000008 	.word	0x20000008
 8005ca0:	20000014 	.word	0x20000014

08005ca4 <Centred_DrawNumber_16_32bit_controled>:


void Centred_DrawNumber_16_32bit_controled(uint32_t ValPointer, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, int32_t Max, int32_t Min, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b0a3      	sub	sp, #140	; 0x8c
 8005ca8:	af08      	add	r7, sp, #32
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	4608      	mov	r0, r1
 8005cae:	4611      	mov	r1, r2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	817b      	strh	r3, [r7, #10]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	813b      	strh	r3, [r7, #8]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	80fb      	strh	r3, [r7, #6]


	  int32_t Register;
	  memcpy(&Register, ValPointer, 4);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if((Pointer_Razr > 0) & (Font_Color != BackgroundColor))
 8005cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bfcc      	ite	gt
 8005ccc:	2301      	movgt	r3, #1
 8005cce:	2300      	movle	r3, #0
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	4bb0      	ldr	r3, [pc, #704]	; (8005f94 <Centred_DrawNumber_16_32bit_controled+0x2f0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005cda:	4299      	cmp	r1, r3
 8005cdc:	bf14      	ite	ne
 8005cde:	2301      	movne	r3, #1
 8005ce0:	2300      	moveq	r3, #0
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d02c      	beq.n	8005d46 <Centred_DrawNumber_16_32bit_controled+0xa2>
	  {
		  Control_DB.VauePointer    = ValPointer;
 8005cec:	4aaa      	ldr	r2, [pc, #680]	; (8005f98 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6093      	str	r3, [r2, #8]
		  Control_DB.RazrPointerMAX = Numbers;
 8005cf2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005cf6:	4ba8      	ldr	r3, [pc, #672]	; (8005f98 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8005cf8:	80da      	strh	r2, [r3, #6]
		  Control_DB.ValueMax		= Max;
 8005cfa:	4aa7      	ldr	r2, [pc, #668]	; (8005f98 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8005cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cfe:	60d3      	str	r3, [r2, #12]
		  Control_DB.ValueMin		= Min;
 8005d00:	4aa5      	ldr	r2, [pc, #660]	; (8005f98 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8005d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d04:	6113      	str	r3, [r2, #16]

		  uint8_t BackWriteFlag = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  if(Register > Control_DB.ValueMax)
 8005d0c:	4ba2      	ldr	r3, [pc, #648]	; (8005f98 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	429a      	cmp	r2, r3
 8005d14:	da05      	bge.n	8005d22 <Centred_DrawNumber_16_32bit_controled+0x7e>
		  {
			  BackWriteFlag = 1;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  Register = Control_DB.ValueMax;
 8005d1c:	4b9e      	ldr	r3, [pc, #632]	; (8005f98 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
		  if(Register < Control_DB.ValueMin)
 8005d22:	4b9d      	ldr	r3, [pc, #628]	; (8005f98 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	dd05      	ble.n	8005d38 <Centred_DrawNumber_16_32bit_controled+0x94>
		  {
			  BackWriteFlag = 1;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  Register = Control_DB.ValueMin;
 8005d32:	4b99      	ldr	r3, [pc, #612]	; (8005f98 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
		  if(BackWriteFlag)
 8005d38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <Centred_DrawNumber_16_32bit_controled+0xa2>
		  {
			  memcpy(ValPointer, &Register, 4);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d44:	601a      	str	r2, [r3, #0]


	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 8005d46:	2300      	movs	r3, #0
 8005d48:	663b      	str	r3, [r7, #96]	; 0x60
 8005d4a:	e008      	b.n	8005d5e <Centred_DrawNumber_16_32bit_controled+0xba>
 8005d4c:	f107 0214 	add.w	r2, r7, #20
 8005d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d52:	4413      	add	r3, r2
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d60:	2b09      	cmp	r3, #9
 8005d62:	ddf3      	ble.n	8005d4c <Centred_DrawNumber_16_32bit_controled+0xa8>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59



	  if(Register < 0)
 8005d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	da05      	bge.n	8005d82 <Centred_DrawNumber_16_32bit_controled+0xde>
	  {
		  BelowZero = 1;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		  Register = 0 - Register;
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	425b      	negs	r3, r3
 8005d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }

	  if(Comma>5){Comma=5;}
 8005d82:	897b      	ldrh	r3, [r7, #10]
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	d901      	bls.n	8005d8c <Centred_DrawNumber_16_32bit_controled+0xe8>
 8005d88:	2305      	movs	r3, #5
 8005d8a:	817b      	strh	r3, [r7, #10]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	f107 0120 	add.w	r1, r7, #32
 8005d92:	220a      	movs	r2, #10
 8005d94:	4618      	mov	r0, r3
 8005d96:	f004 fe15 	bl	800a9c4 <itoa>

	  Cycle_Pointer = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8005da0:	e004      	b.n	8005dac <Centred_DrawNumber_16_32bit_controled+0x108>
	  {
		  Cycle_Pointer++;
 8005da2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005da6:	3301      	adds	r3, #1
 8005da8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8005dac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005db0:	3368      	adds	r3, #104	; 0x68
 8005db2:	443b      	add	r3, r7
 8005db4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1f2      	bne.n	8005da2 <Centred_DrawNumber_16_32bit_controled+0xfe>
	  }

	  TemporaryLenPointer = Numbers;
 8005dbc:	893b      	ldrh	r3, [r7, #8]
 8005dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  for(int i=TemporaryLenPointer;i;i--)
 8005dc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8005dc8:	e00f      	b.n	8005dea <Centred_DrawNumber_16_32bit_controled+0x146>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 8005dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	3368      	adds	r3, #104	; 0x68
 8005dd0:	443b      	add	r3, r7
 8005dd2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8005dd6:	f803 2c54 	strb.w	r2, [r3, #-84]
		  TemporaryLenPointer--;
 8005dda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dde:	3b01      	subs	r3, #1
 8005de0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  for(int i=TemporaryLenPointer;i;i--)
 8005de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de6:	3b01      	subs	r3, #1
 8005de8:	657b      	str	r3, [r7, #84]	; 0x54
 8005dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ec      	bne.n	8005dca <Centred_DrawNumber_16_32bit_controled+0x126>
	  }


	  if(Comma>0)
 8005df0:	897b      	ldrh	r3, [r7, #10]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d06c      	beq.n	8005ed0 <Centred_DrawNumber_16_32bit_controled+0x22c>
	  {
		  if(Comma>=Cycle_Pointer)
 8005df6:	897a      	ldrh	r2, [r7, #10]
 8005df8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d339      	bcc.n	8005e74 <Centred_DrawNumber_16_32bit_controled+0x1d0>
		  {
			  Final_Len = Comma + 2;
 8005e00:	897b      	ldrh	r3, [r7, #10]
 8005e02:	3302      	adds	r3, #2
 8005e04:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

			  int8_t temp = Cycle_Pointer;
 8005e08:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005e0c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			  for(int i=(Final_Len-1);i>=0;i--)
 8005e10:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005e14:	3b01      	subs	r3, #1
 8005e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e18:	e020      	b.n	8005e5c <Centred_DrawNumber_16_32bit_controled+0x1b8>
			  {
				  if(temp)
 8005e1a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d013      	beq.n	8005e4a <Centred_DrawNumber_16_32bit_controled+0x1a6>
				  {
					  temp--;
 8005e22:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					  String[i] = String[temp];
 8005e30:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005e34:	3368      	adds	r3, #104	; 0x68
 8005e36:	443b      	add	r3, r7
 8005e38:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 8005e3c:	f107 0220 	add.w	r2, r7, #32
 8005e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e42:	4413      	add	r3, r2
 8005e44:	460a      	mov	r2, r1
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	e005      	b.n	8005e56 <Centred_DrawNumber_16_32bit_controled+0x1b2>
				  }
				  else
				  {
					  String[i] = '0';
 8005e4a:	f107 0220 	add.w	r2, r7, #32
 8005e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e50:	4413      	add	r3, r2
 8005e52:	2230      	movs	r2, #48	; 0x30
 8005e54:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8005e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	dadb      	bge.n	8005e1a <Centred_DrawNumber_16_32bit_controled+0x176>
				  }
			  }
			  String[1] = ',';
 8005e62:	232c      	movs	r3, #44	; 0x2c
 8005e64:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			  Cycle_Pointer--;
 8005e68:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005e72:	e031      	b.n	8005ed8 <Centred_DrawNumber_16_32bit_controled+0x234>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 8005e74:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005e78:	3301      	adds	r3, #1
 8005e7a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

			  for(int i=(Final_Len-1);i>=0;i--)
 8005e7e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005e82:	3b01      	subs	r3, #1
 8005e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e86:	e015      	b.n	8005eb4 <Centred_DrawNumber_16_32bit_controled+0x210>
			  {
				  if( i > (Final_Len - Comma - 1))
 8005e88:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8005e8c:	897b      	ldrh	r3, [r7, #10]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e92:	429a      	cmp	r2, r3
 8005e94:	db0b      	blt.n	8005eae <Centred_DrawNumber_16_32bit_controled+0x20a>
				  {
					  String[i] = String[i-1];
 8005e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	3368      	adds	r3, #104	; 0x68
 8005e9c:	443b      	add	r3, r7
 8005e9e:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 8005ea2:	f107 0220 	add.w	r2, r7, #32
 8005ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea8:	4413      	add	r3, r2
 8005eaa:	460a      	mov	r2, r1
 8005eac:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8005eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	dae6      	bge.n	8005e88 <Centred_DrawNumber_16_32bit_controled+0x1e4>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 8005eba:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8005ebe:	897b      	ldrh	r3, [r7, #10]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	3368      	adds	r3, #104	; 0x68
 8005ec6:	443b      	add	r3, r7
 8005ec8:	222c      	movs	r2, #44	; 0x2c
 8005eca:	f803 2c48 	strb.w	r2, [r3, #-72]
 8005ece:	e003      	b.n	8005ed8 <Centred_DrawNumber_16_32bit_controled+0x234>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 8005ed0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005ed4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a


	  if(BelowZero)
 8005ed8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01d      	beq.n	8005f1c <Centred_DrawNumber_16_32bit_controled+0x278>
	  {
		  for(int i=Final_Len;i>=0;i--)
 8005ee0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee6:	e00e      	b.n	8005f06 <Centred_DrawNumber_16_32bit_controled+0x262>
		  {
			  String[i] = String[i - 1];
 8005ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eea:	3b01      	subs	r3, #1
 8005eec:	3368      	adds	r3, #104	; 0x68
 8005eee:	443b      	add	r3, r7
 8005ef0:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 8005ef4:	f107 0220 	add.w	r2, r7, #32
 8005ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efa:	4413      	add	r3, r2
 8005efc:	460a      	mov	r2, r1
 8005efe:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 8005f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f02:	3b01      	subs	r3, #1
 8005f04:	647b      	str	r3, [r7, #68]	; 0x44
 8005f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	daed      	bge.n	8005ee8 <Centred_DrawNumber_16_32bit_controled+0x244>
		  }
		  String[0] = '-';
 8005f0c:	232d      	movs	r3, #45	; 0x2d
 8005f0e:	f887 3020 	strb.w	r3, [r7, #32]
		  Final_Len++;
 8005f12:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005f16:	3301      	adds	r3, #1
 8005f18:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  }

		uint8_t StandartLen = Numbers;
 8005f1c:	893b      	ldrh	r3, [r7, #8]
 8005f1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint8_t IschLen = Final_Len - 1;
 8005f22:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if(Final_Len < StandartLen)
 8005f2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d23b      	bcs.n	8005fb4 <Centred_DrawNumber_16_32bit_controled+0x310>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 8005f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f40:	3b01      	subs	r3, #1
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f44:	e033      	b.n	8005fae <Centred_DrawNumber_16_32bit_controled+0x30a>
			{
				if(IschLen)
 8005f46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d011      	beq.n	8005f72 <Centred_DrawNumber_16_32bit_controled+0x2ce>
				{
					String[i] = String[IschLen];
 8005f4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f52:	3368      	adds	r3, #104	; 0x68
 8005f54:	443b      	add	r3, r7
 8005f56:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 8005f5a:	f107 0220 	add.w	r2, r7, #32
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f60:	4413      	add	r3, r2
 8005f62:	460a      	mov	r2, r1
 8005f64:	701a      	strb	r2, [r3, #0]
					IschLen--;
 8005f66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f70:	e01a      	b.n	8005fa8 <Centred_DrawNumber_16_32bit_controled+0x304>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 8005f72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005f76:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d10c      	bne.n	8005f9c <Centred_DrawNumber_16_32bit_controled+0x2f8>
					{
						String[i] = String[0];
 8005f82:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005f86:	f107 0220 	add.w	r2, r7, #32
 8005f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8c:	4413      	add	r3, r2
 8005f8e:	460a      	mov	r2, r1
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	e009      	b.n	8005fa8 <Centred_DrawNumber_16_32bit_controled+0x304>
 8005f94:	20000008 	.word	0x20000008
 8005f98:	20000a1c 	.word	0x20000a1c
					}
					else
					{
						String[i] = ' ';
 8005f9c:	f107 0220 	add.w	r2, r7, #32
 8005fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa2:	4413      	add	r3, r2
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 8005fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005faa:	3b01      	subs	r3, #1
 8005fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	dac8      	bge.n	8005f46 <Centred_DrawNumber_16_32bit_controled+0x2a2>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 8005fb4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8005fb8:	085b      	lsrs	r3, r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005fc0:	4413      	add	r3, r2
 8005fc2:	86bb      	strh	r3, [r7, #52]	; 0x34
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 8005fc4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8005fc8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
 8005fd0:	0fda      	lsrs	r2, r3, #31
 8005fd2:	4413      	add	r3, r2
 8005fd4:	105b      	asrs	r3, r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8005fdc:	4413      	add	r3, r2
 8005fde:	867b      	strh	r3, [r7, #50]	; 0x32

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 8005fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	da01      	bge.n	8005fec <Centred_DrawNumber_16_32bit_controled+0x348>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	80fb      	strh	r3, [r7, #6]

		for(int i=0;i<Numbers;i++)
 8005fec:	2300      	movs	r3, #0
 8005fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ff0:	e0a9      	b.n	8006146 <Centred_DrawNumber_16_32bit_controled+0x4a2>
		{
			if((Pointer_Razr == RazrPointerArray[i]) & (Font_Color != BackgroundColor))
 8005ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ff6:	f107 0114 	add.w	r1, r7, #20
 8005ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ffc:	440a      	add	r2, r1
 8005ffe:	7812      	ldrb	r2, [r2, #0]
 8006000:	4293      	cmp	r3, r2
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	b2da      	uxtb	r2, r3
 800600a:	4b65      	ldr	r3, [pc, #404]	; (80061a0 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006012:	4299      	cmp	r1, r3
 8006014:	bf14      	ite	ne
 8006016:	2301      	movne	r3, #1
 8006018:	2300      	moveq	r3, #0
 800601a:	b2db      	uxtb	r3, r3
 800601c:	4013      	ands	r3, r2
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d049      	beq.n	80060b8 <Centred_DrawNumber_16_32bit_controled+0x414>
			{
				if(Pointer_Razr)
 8006024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8089 	beq.w	8006140 <Centred_DrawNumber_16_32bit_controled+0x49c>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 800602e:	4b5d      	ldr	r3, [pc, #372]	; (80061a4 <Centred_DrawNumber_16_32bit_controled+0x500>)
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	3301      	adds	r3, #1
 8006036:	b29b      	uxth	r3, r3
 8006038:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800603c:	fb12 f303 	smulbb	r3, r2, r3
 8006040:	b29b      	uxth	r3, r3
 8006042:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	b299      	uxth	r1, r3
 8006048:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800604a:	3301      	adds	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 8006052:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006056:	9303      	str	r3, [sp, #12]
 8006058:	f44f 7348 	mov.w	r3, #800	; 0x320
 800605c:	9302      	str	r3, [sp, #8]
 800605e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	2304      	movs	r3, #4
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	4623      	mov	r3, r4
 800606a:	f000 f9f5 	bl	8006458 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 800606e:	4b4d      	ldr	r3, [pc, #308]	; (80061a4 <Centred_DrawNumber_16_32bit_controled+0x500>)
 8006070:	6818      	ldr	r0, [r3, #0]
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	3301      	adds	r3, #1
 8006076:	b29b      	uxth	r3, r3
 8006078:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800607c:	fb12 f303 	smulbb	r3, r2, r3
 8006080:	b29b      	uxth	r3, r3
 8006082:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	b299      	uxth	r1, r3
 8006088:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800608a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b04      	subs	r3, #4
 8006094:	b29a      	uxth	r2, r3
 8006096:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 800609a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800609e:	9303      	str	r3, [sp, #12]
 80060a0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80060a4:	9302      	str	r3, [sp, #8]
 80060a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	2304      	movs	r3, #4
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	4623      	mov	r3, r4
 80060b2:	f000 f9d1 	bl	8006458 <Draw_Rectangle>
 80060b6:	e043      	b.n	8006140 <Centred_DrawNumber_16_32bit_controled+0x49c>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 80060b8:	4b39      	ldr	r3, [pc, #228]	; (80061a0 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	3301      	adds	r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80060c6:	fb12 f303 	smulbb	r3, r2, r3
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	b299      	uxth	r1, r3
 80060d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060d4:	3301      	adds	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 80060dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80060e0:	9303      	str	r3, [sp, #12]
 80060e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80060e6:	9302      	str	r3, [sp, #8]
 80060e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060ec:	9301      	str	r3, [sp, #4]
 80060ee:	2304      	movs	r3, #4
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	4623      	mov	r3, r4
 80060f4:	f000 f9b0 	bl	8006458 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 80060f8:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	3301      	adds	r3, #1
 8006100:	b29b      	uxth	r3, r3
 8006102:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8006106:	fb12 f303 	smulbb	r3, r2, r3
 800610a:	b29b      	uxth	r3, r3
 800610c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	b299      	uxth	r1, r3
 8006112:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006114:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b04      	subs	r3, #4
 800611e:	b29a      	uxth	r2, r3
 8006120:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 8006124:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006128:	9303      	str	r3, [sp, #12]
 800612a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800612e:	9302      	str	r3, [sp, #8]
 8006130:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	2304      	movs	r3, #4
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	4623      	mov	r3, r4
 800613c:	f000 f98c 	bl	8006458 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	3301      	adds	r3, #1
 8006144:	63bb      	str	r3, [r7, #56]	; 0x38
 8006146:	893b      	ldrh	r3, [r7, #8]
 8006148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800614a:	429a      	cmp	r2, r3
 800614c:	f6ff af51 	blt.w	8005ff2 <Centred_DrawNumber_16_32bit_controled+0x34e>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8006150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006154:	b299      	uxth	r1, r3
 8006156:	f8b7 4084 	ldrh.w	r4, [r7, #132]	; 0x84
 800615a:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800615e:	f107 0020 	add.w	r0, r7, #32
 8006162:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006166:	9307      	str	r3, [sp, #28]
 8006168:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800616c:	9306      	str	r3, [sp, #24]
 800616e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006172:	9305      	str	r3, [sp, #20]
 8006174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006178:	9304      	str	r3, [sp, #16]
 800617a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800617e:	9303      	str	r3, [sp, #12]
 8006180:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006184:	9302      	str	r3, [sp, #8]
 8006186:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	4623      	mov	r3, r4
 8006194:	f7fe ffae 	bl	80050f4 <Centred_DrawString_16>
}
 8006198:	bf00      	nop
 800619a:	376c      	adds	r7, #108	; 0x6c
 800619c:	46bd      	mov	sp, r7
 800619e:	bd90      	pop	{r4, r7, pc}
 80061a0:	20000008 	.word	0x20000008
 80061a4:	20000014 	.word	0x20000014

080061a8 <Short_Centred_DrawNumber_16>:


void Short_Centred_DrawNumber_16(int16_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr,
		uint16_t Coord_X, uint16_t Coord_Y,  uint32_t PageNumber)
{
 80061a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061aa:	b08d      	sub	sp, #52	; 0x34
 80061ac:	af0a      	add	r7, sp, #40	; 0x28
 80061ae:	4604      	mov	r4, r0
 80061b0:	4608      	mov	r0, r1
 80061b2:	4611      	mov	r1, r2
 80061b4:	461a      	mov	r2, r3
 80061b6:	4623      	mov	r3, r4
 80061b8:	80fb      	strh	r3, [r7, #6]
 80061ba:	4603      	mov	r3, r0
 80061bc:	80bb      	strh	r3, [r7, #4]
 80061be:	460b      	mov	r3, r1
 80061c0:	807b      	strh	r3, [r7, #2]
 80061c2:	4613      	mov	r3, r2
 80061c4:	803b      	strh	r3, [r7, #0]
	Centred_DrawNumber_16(Register, Comma, Numbers, Pointer_Razr, Coord_X, Coord_Y, 800, 480, PageNumber, BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80061c6:	4b13      	ldr	r3, [pc, #76]	; (8006214 <Short_Centred_DrawNumber_16+0x6c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a13      	ldr	r2, [pc, #76]	; (8006218 <Short_Centred_DrawNumber_16+0x70>)
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	f9b7 5000 	ldrsh.w	r5, [r7]
 80061d2:	887c      	ldrh	r4, [r7, #2]
 80061d4:	88b9      	ldrh	r1, [r7, #4]
 80061d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80061da:	2612      	movs	r6, #18
 80061dc:	9609      	str	r6, [sp, #36]	; 0x24
 80061de:	260b      	movs	r6, #11
 80061e0:	9608      	str	r6, [sp, #32]
 80061e2:	4e0e      	ldr	r6, [pc, #56]	; (800621c <Short_Centred_DrawNumber_16+0x74>)
 80061e4:	9607      	str	r6, [sp, #28]
 80061e6:	9206      	str	r2, [sp, #24]
 80061e8:	9305      	str	r3, [sp, #20]
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	9304      	str	r3, [sp, #16]
 80061ee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80061f2:	9303      	str	r3, [sp, #12]
 80061f4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80061f8:	9302      	str	r3, [sp, #8]
 80061fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061fc:	9301      	str	r3, [sp, #4]
 80061fe:	8c3b      	ldrh	r3, [r7, #32]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	462b      	mov	r3, r5
 8006204:	4622      	mov	r2, r4
 8006206:	f7ff f8f9 	bl	80053fc <Centred_DrawNumber_16>
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006212:	bf00      	nop
 8006214:	20000008 	.word	0x20000008
 8006218:	200009e8 	.word	0x200009e8
 800621c:	0800e8c8 	.word	0x0800e8c8

08006220 <NumberChange>:




void NumberChange(uint32_t pointer, uint8_t razr, uint8_t len, uint8_t Up, uint8_t Down)
{
 8006220:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006224:	b08c      	sub	sp, #48	; 0x30
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	4608      	mov	r0, r1
 800622c:	4611      	mov	r1, r2
 800622e:	461a      	mov	r2, r3
 8006230:	4603      	mov	r3, r0
 8006232:	70fb      	strb	r3, [r7, #3]
 8006234:	460b      	mov	r3, r1
 8006236:	70bb      	strb	r3, [r7, #2]
 8006238:	4613      	mov	r3, r2
 800623a:	707b      	strb	r3, [r7, #1]
	struct {int32_t a;} *Number = pointer;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t temp2;
	int16_t Tpoint = razr - 1;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	847b      	strh	r3, [r7, #34]	; 0x22

	int16_t Symbols[10];

	for(int i= (len-1);i>=0;i--)
 800624a:	78bb      	ldrb	r3, [r7, #2]
 800624c:	3b01      	subs	r3, #1
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006250:	e03d      	b.n	80062ce <NumberChange+0xae>
	{
		temp2 = pow(10,i);
 8006252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006254:	f7fa f91e 	bl	8000494 <__aeabi_i2d>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	ec43 2b11 	vmov	d1, r2, r3
 8006260:	ed9f 0b65 	vldr	d0, [pc, #404]	; 80063f8 <NumberChange+0x1d8>
 8006264:	f004 fc08 	bl	800aa78 <pow>
 8006268:	ec53 2b10 	vmov	r2, r3, d0
 800626c:	4610      	mov	r0, r2
 800626e:	4619      	mov	r1, r3
 8006270:	f7fa fc2a 	bl	8000ac8 <__aeabi_d2iz>
 8006274:	4603      	mov	r3, r0
 8006276:	61fb      	str	r3, [r7, #28]
		if(Number->a >= temp2)
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	429a      	cmp	r2, r3
 8006280:	dc1b      	bgt.n	80062ba <NumberChange+0x9a>
		{
			Symbols[i] = Number->a / temp2;
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	fb92 f3f3 	sdiv	r3, r2, r3
 800628c:	b21a      	sxth	r2, r3
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	3330      	adds	r3, #48	; 0x30
 8006294:	443b      	add	r3, r7
 8006296:	f823 2c28 	strh.w	r2, [r3, #-40]
			Number->a = Number->a - (temp2 * Symbols[i]);
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	3330      	adds	r3, #48	; 0x30
 80062a4:	443b      	add	r3, r7
 80062a6:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 80062aa:	4619      	mov	r1, r3
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	fb01 f303 	mul.w	r3, r1, r3
 80062b2:	1ad2      	subs	r2, r2, r3
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	e006      	b.n	80062c8 <NumberChange+0xa8>
		}
		else
		{
			Symbols[i] = 0;
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	3330      	adds	r3, #48	; 0x30
 80062c0:	443b      	add	r3, r7
 80062c2:	2200      	movs	r2, #0
 80062c4:	f823 2c28 	strh.w	r2, [r3, #-40]
	for(int i= (len-1);i>=0;i--)
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	3b01      	subs	r3, #1
 80062cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	dabe      	bge.n	8006252 <NumberChange+0x32>
		}
	}	// Разделение числа на разряды



	if(Up)
 80062d4:	787b      	ldrb	r3, [r7, #1]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d021      	beq.n	800631e <NumberChange+0xfe>
	{
		Symbols[Tpoint]++;
 80062da:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80062de:	0053      	lsls	r3, r2, #1
 80062e0:	3330      	adds	r3, #48	; 0x30
 80062e2:	443b      	add	r3, r7
 80062e4:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3301      	adds	r3, #1
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	b219      	sxth	r1, r3
 80062f0:	0053      	lsls	r3, r2, #1
 80062f2:	3330      	adds	r3, #48	; 0x30
 80062f4:	443b      	add	r3, r7
 80062f6:	460a      	mov	r2, r1
 80062f8:	f823 2c28 	strh.w	r2, [r3, #-40]
		if(Symbols[Tpoint] > 9){Symbols[Tpoint] = 0;}
 80062fc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	3330      	adds	r3, #48	; 0x30
 8006304:	443b      	add	r3, r7
 8006306:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 800630a:	2b09      	cmp	r3, #9
 800630c:	dd07      	ble.n	800631e <NumberChange+0xfe>
 800630e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	3330      	adds	r3, #48	; 0x30
 8006316:	443b      	add	r3, r7
 8006318:	2200      	movs	r2, #0
 800631a:	f823 2c28 	strh.w	r2, [r3, #-40]
	}

	if(Down)
 800631e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006322:	2b00      	cmp	r3, #0
 8006324:	d021      	beq.n	800636a <NumberChange+0x14a>
	{
		Symbols[Tpoint]--;
 8006326:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800632a:	0053      	lsls	r3, r2, #1
 800632c:	3330      	adds	r3, #48	; 0x30
 800632e:	443b      	add	r3, r7
 8006330:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29b      	uxth	r3, r3
 800633a:	b219      	sxth	r1, r3
 800633c:	0053      	lsls	r3, r2, #1
 800633e:	3330      	adds	r3, #48	; 0x30
 8006340:	443b      	add	r3, r7
 8006342:	460a      	mov	r2, r1
 8006344:	f823 2c28 	strh.w	r2, [r3, #-40]
		if(Symbols[Tpoint] < 0){Symbols[Tpoint] = 9;}
 8006348:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	3330      	adds	r3, #48	; 0x30
 8006350:	443b      	add	r3, r7
 8006352:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8006356:	2b00      	cmp	r3, #0
 8006358:	da07      	bge.n	800636a <NumberChange+0x14a>
 800635a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	3330      	adds	r3, #48	; 0x30
 8006362:	443b      	add	r3, r7
 8006364:	2209      	movs	r2, #9
 8006366:	f823 2c28 	strh.w	r2, [r3, #-40]
	}



	Number->a = 0;
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
	for(int i=(len-1);i>=0;i--)
 8006370:	78bb      	ldrb	r3, [r7, #2]
 8006372:	3b01      	subs	r3, #1
 8006374:	62bb      	str	r3, [r7, #40]	; 0x28
 8006376:	e034      	b.n	80063e2 <NumberChange+0x1c2>
	{
		Number->a = Number->a + Symbols[i] * pow(10,i);
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f7fa f889 	bl	8000494 <__aeabi_i2d>
 8006382:	4604      	mov	r4, r0
 8006384:	460d      	mov	r5, r1
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	3330      	adds	r3, #48	; 0x30
 800638c:	443b      	add	r3, r7
 800638e:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8006392:	4618      	mov	r0, r3
 8006394:	f7fa f87e 	bl	8000494 <__aeabi_i2d>
 8006398:	4680      	mov	r8, r0
 800639a:	4689      	mov	r9, r1
 800639c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800639e:	f7fa f879 	bl	8000494 <__aeabi_i2d>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	ec43 2b11 	vmov	d1, r2, r3
 80063aa:	ed9f 0b13 	vldr	d0, [pc, #76]	; 80063f8 <NumberChange+0x1d8>
 80063ae:	f004 fb63 	bl	800aa78 <pow>
 80063b2:	ec53 2b10 	vmov	r2, r3, d0
 80063b6:	4640      	mov	r0, r8
 80063b8:	4649      	mov	r1, r9
 80063ba:	f7fa f8d5 	bl	8000568 <__aeabi_dmul>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4620      	mov	r0, r4
 80063c4:	4629      	mov	r1, r5
 80063c6:	f7f9 ff19 	bl	80001fc <__adddf3>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4610      	mov	r0, r2
 80063d0:	4619      	mov	r1, r3
 80063d2:	f7fa fb79 	bl	8000ac8 <__aeabi_d2iz>
 80063d6:	4602      	mov	r2, r0
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	601a      	str	r2, [r3, #0]
	for(int i=(len-1);i>=0;i--)
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	3b01      	subs	r3, #1
 80063e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	dac7      	bge.n	8006378 <NumberChange+0x158>
	}	// Сборка числа обратно
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	3730      	adds	r7, #48	; 0x30
 80063ee:	46bd      	mov	sp, r7
 80063f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80063f4:	f3af 8000 	nop.w
 80063f8:	00000000 	.word	0x00000000
 80063fc:	40240000 	.word	0x40240000

08006400 <Zaliv>:
extern uint32_t VideoBuffer;
extern __IO uint32_t BasicFon;
extern __IO uint8_t  temporary_line_buffer;

void Zaliv(uint32_t Color, uint32_t Bufer_Pointer, uint16_t Resolution_X, uint16_t Resolution_Y)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4611      	mov	r1, r2
 800640c:	461a      	mov	r2, r3
 800640e:	460b      	mov	r3, r1
 8006410:	80fb      	strh	r3, [r7, #6]
 8006412:	4613      	mov	r3, r2
 8006414:	80bb      	strh	r3, [r7, #4]
	struct {uint8_t b,g,r;} *TempBuf=Bufer_Pointer;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	613b      	str	r3, [r7, #16]
	for(int i=0;i<(Resolution_X*Resolution_Y);i++){memcpy(&TempBuf[i].b, &Color, 3);} //Заливка всего экрана
 800641a:	2300      	movs	r3, #0
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	e00f      	b.n	8006440 <Zaliv+0x40>
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4613      	mov	r3, r2
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	4413      	add	r3, r2
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	4618      	mov	r0, r3
 800642e:	f107 030c 	add.w	r3, r7, #12
 8006432:	2203      	movs	r2, #3
 8006434:	4619      	mov	r1, r3
 8006436:	f004 fac7 	bl	800a9c8 <memcpy>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	3301      	adds	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	88ba      	ldrh	r2, [r7, #4]
 8006444:	fb02 f303 	mul.w	r3, r2, r3
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	429a      	cmp	r2, r3
 800644c:	dbe8      	blt.n	8006420 <Zaliv+0x20>
} // Заливка экрана
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <Draw_Rectangle>:
	struct {uint8_t a,b,g,r;} *TempBuf=Bufer_Pointer;
	for(int i=0;i<(Resolution_X*Resolution_Y);i++){memcpy(&TempBuf[i].b, &Color, 4);} //Заливка всего экрана
} // Заливка экрана

void Draw_Rectangle(uint32_t Color, uint16_t Start_X, uint16_t Start_Y, uint16_t Size_X, uint16_t Size_Y, uint32_t Bufer_Pointer, uint16_t Resolution_X, uint16_t Resolution_Y)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	4608      	mov	r0, r1
 8006462:	4611      	mov	r1, r2
 8006464:	461a      	mov	r2, r3
 8006466:	4603      	mov	r3, r0
 8006468:	817b      	strh	r3, [r7, #10]
 800646a:	460b      	mov	r3, r1
 800646c:	813b      	strh	r3, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	80fb      	strh	r3, [r7, #6]
	struct {uint8_t b,g,r;} *TempBuf=Bufer_Pointer;
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	617b      	str	r3, [r7, #20]
	for(int i=Start_Y;i<(Start_Y + Size_Y);i++)
 8006476:	893b      	ldrh	r3, [r7, #8]
 8006478:	61fb      	str	r3, [r7, #28]
 800647a:	e021      	b.n	80064c0 <Draw_Rectangle+0x68>
	{
		for(int j=Start_X;j<(Start_X + Size_X);j++)
 800647c:	897b      	ldrh	r3, [r7, #10]
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	e015      	b.n	80064ae <Draw_Rectangle+0x56>
		{
			memcpy(&TempBuf[(i * Resolution_X) + j].b, &Color, 3);
 8006482:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	fb03 f202 	mul.w	r2, r3, r2
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	4413      	add	r3, r2
 800648e:	461a      	mov	r2, r3
 8006490:	4613      	mov	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	4413      	add	r3, r2
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4413      	add	r3, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f107 030c 	add.w	r3, r7, #12
 80064a0:	2203      	movs	r2, #3
 80064a2:	4619      	mov	r1, r3
 80064a4:	f004 fa90 	bl	800a9c8 <memcpy>
		for(int j=Start_X;j<(Start_X + Size_X);j++)
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	3301      	adds	r3, #1
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	897a      	ldrh	r2, [r7, #10]
 80064b0:	88fb      	ldrh	r3, [r7, #6]
 80064b2:	4413      	add	r3, r2
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	dbe3      	blt.n	8006482 <Draw_Rectangle+0x2a>
	for(int i=Start_Y;i<(Start_Y + Size_Y);i++)
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	3301      	adds	r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	893a      	ldrh	r2, [r7, #8]
 80064c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064c4:	4413      	add	r3, r2
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	dbd7      	blt.n	800647c <Draw_Rectangle+0x24>
		}
	}
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064dc:	4b0e      	ldr	r3, [pc, #56]	; (8006518 <HAL_Init+0x40>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a0d      	ldr	r2, [pc, #52]	; (8006518 <HAL_Init+0x40>)
 80064e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80064e8:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <HAL_Init+0x40>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a0a      	ldr	r2, [pc, #40]	; (8006518 <HAL_Init+0x40>)
 80064ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064f4:	4b08      	ldr	r3, [pc, #32]	; (8006518 <HAL_Init+0x40>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a07      	ldr	r2, [pc, #28]	; (8006518 <HAL_Init+0x40>)
 80064fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006500:	2003      	movs	r0, #3
 8006502:	f000 f94f 	bl	80067a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006506:	200f      	movs	r0, #15
 8006508:	f000 f808 	bl	800651c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800650c:	f7fd fcce 	bl	8003eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	40023c00 	.word	0x40023c00

0800651c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <HAL_InitTick+0x54>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b12      	ldr	r3, [pc, #72]	; (8006574 <HAL_InitTick+0x58>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	4619      	mov	r1, r3
 800652e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006532:	fbb3 f3f1 	udiv	r3, r3, r1
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f967 	bl	800680e <HAL_SYSTICK_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e00e      	b.n	8006568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b0f      	cmp	r3, #15
 800654e:	d80a      	bhi.n	8006566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006550:	2200      	movs	r2, #0
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	f000 f92f 	bl	80067ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800655c:	4a06      	ldr	r2, [pc, #24]	; (8006578 <HAL_InitTick+0x5c>)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e000      	b.n	8006568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20000024 	.word	0x20000024
 8006574:	2000002c 	.word	0x2000002c
 8006578:	20000028 	.word	0x20000028

0800657c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006580:	4b06      	ldr	r3, [pc, #24]	; (800659c <HAL_IncTick+0x20>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <HAL_IncTick+0x24>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4413      	add	r3, r2
 800658c:	4a04      	ldr	r2, [pc, #16]	; (80065a0 <HAL_IncTick+0x24>)
 800658e:	6013      	str	r3, [r2, #0]
}
 8006590:	bf00      	nop
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	2000002c 	.word	0x2000002c
 80065a0:	20000a74 	.word	0x20000a74

080065a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  return uwTick;
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <HAL_GetTick+0x14>)
 80065aa:	681b      	ldr	r3, [r3, #0]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000a74 	.word	0x20000a74

080065bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065c4:	f7ff ffee 	bl	80065a4 <HAL_GetTick>
 80065c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d005      	beq.n	80065e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <HAL_Delay+0x44>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065e2:	bf00      	nop
 80065e4:	f7ff ffde 	bl	80065a4 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d8f7      	bhi.n	80065e4 <HAL_Delay+0x28>
  {
  }
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	2000002c 	.word	0x2000002c

08006604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <__NVIC_SetPriorityGrouping+0x44>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006620:	4013      	ands	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800662c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006636:	4a04      	ldr	r2, [pc, #16]	; (8006648 <__NVIC_SetPriorityGrouping+0x44>)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	60d3      	str	r3, [r2, #12]
}
 800663c:	bf00      	nop
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	e000ed00 	.word	0xe000ed00

0800664c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <__NVIC_GetPriorityGrouping+0x18>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	f003 0307 	and.w	r3, r3, #7
}
 800665a:	4618      	mov	r0, r3
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	e000ed00 	.word	0xe000ed00

08006668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006676:	2b00      	cmp	r3, #0
 8006678:	db0b      	blt.n	8006692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	f003 021f 	and.w	r2, r3, #31
 8006680:	4907      	ldr	r1, [pc, #28]	; (80066a0 <__NVIC_EnableIRQ+0x38>)
 8006682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	2001      	movs	r0, #1
 800668a:	fa00 f202 	lsl.w	r2, r0, r2
 800668e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	e000e100 	.word	0xe000e100

080066a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	6039      	str	r1, [r7, #0]
 80066ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	db0a      	blt.n	80066ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	490c      	ldr	r1, [pc, #48]	; (80066f0 <__NVIC_SetPriority+0x4c>)
 80066be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c2:	0112      	lsls	r2, r2, #4
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	440b      	add	r3, r1
 80066c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066cc:	e00a      	b.n	80066e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	4908      	ldr	r1, [pc, #32]	; (80066f4 <__NVIC_SetPriority+0x50>)
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	3b04      	subs	r3, #4
 80066dc:	0112      	lsls	r2, r2, #4
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	440b      	add	r3, r1
 80066e2:	761a      	strb	r2, [r3, #24]
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	e000e100 	.word	0xe000e100
 80066f4:	e000ed00 	.word	0xe000ed00

080066f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b089      	sub	sp, #36	; 0x24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f1c3 0307 	rsb	r3, r3, #7
 8006712:	2b04      	cmp	r3, #4
 8006714:	bf28      	it	cs
 8006716:	2304      	movcs	r3, #4
 8006718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	3304      	adds	r3, #4
 800671e:	2b06      	cmp	r3, #6
 8006720:	d902      	bls.n	8006728 <NVIC_EncodePriority+0x30>
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	3b03      	subs	r3, #3
 8006726:	e000      	b.n	800672a <NVIC_EncodePriority+0x32>
 8006728:	2300      	movs	r3, #0
 800672a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800672c:	f04f 32ff 	mov.w	r2, #4294967295
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	43da      	mvns	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	401a      	ands	r2, r3
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006740:	f04f 31ff 	mov.w	r1, #4294967295
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	fa01 f303 	lsl.w	r3, r1, r3
 800674a:	43d9      	mvns	r1, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006750:	4313      	orrs	r3, r2
         );
}
 8006752:	4618      	mov	r0, r3
 8006754:	3724      	adds	r7, #36	; 0x24
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3b01      	subs	r3, #1
 800676c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006770:	d301      	bcc.n	8006776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006772:	2301      	movs	r3, #1
 8006774:	e00f      	b.n	8006796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006776:	4a0a      	ldr	r2, [pc, #40]	; (80067a0 <SysTick_Config+0x40>)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3b01      	subs	r3, #1
 800677c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800677e:	210f      	movs	r1, #15
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	f7ff ff8e 	bl	80066a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <SysTick_Config+0x40>)
 800678a:	2200      	movs	r2, #0
 800678c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800678e:	4b04      	ldr	r3, [pc, #16]	; (80067a0 <SysTick_Config+0x40>)
 8006790:	2207      	movs	r2, #7
 8006792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	e000e010 	.word	0xe000e010

080067a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff ff29 	bl	8006604 <__NVIC_SetPriorityGrouping>
}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b086      	sub	sp, #24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	4603      	mov	r3, r0
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067cc:	f7ff ff3e 	bl	800664c <__NVIC_GetPriorityGrouping>
 80067d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	6978      	ldr	r0, [r7, #20]
 80067d8:	f7ff ff8e 	bl	80066f8 <NVIC_EncodePriority>
 80067dc:	4602      	mov	r2, r0
 80067de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067e2:	4611      	mov	r1, r2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff ff5d 	bl	80066a4 <__NVIC_SetPriority>
}
 80067ea:	bf00      	nop
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	4603      	mov	r3, r0
 80067fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff ff31 	bl	8006668 <__NVIC_EnableIRQ>
}
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff ffa2 	bl	8006760 <SysTick_Config>
 800681c:	4603      	mov	r3, r0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006832:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006834:	f7ff feb6 	bl	80065a4 <HAL_GetTick>
 8006838:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d008      	beq.n	8006858 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2280      	movs	r2, #128	; 0x80
 800684a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e052      	b.n	80068fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0216 	bic.w	r2, r2, #22
 8006866:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006876:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d103      	bne.n	8006888 <HAL_DMA_Abort+0x62>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006884:	2b00      	cmp	r3, #0
 8006886:	d007      	beq.n	8006898 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0208 	bic.w	r2, r2, #8
 8006896:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0201 	bic.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068a8:	e013      	b.n	80068d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068aa:	f7ff fe7b 	bl	80065a4 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	d90c      	bls.n	80068d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2203      	movs	r2, #3
 80068c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e015      	b.n	80068fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e4      	bne.n	80068aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e4:	223f      	movs	r2, #63	; 0x3f
 80068e6:	409a      	lsls	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d004      	beq.n	8006924 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2280      	movs	r2, #128	; 0x80
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e00c      	b.n	800693e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2205      	movs	r2, #5
 8006928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0201 	bic.w	r2, r2, #1
 800693a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e03b      	b.n	80069d4 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7fd fac3 	bl	8003efc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699a:	f023 0107 	bic.w	r1, r3, #7
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80069b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	68d1      	ldr	r1, [r2, #12]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_DMA2D_ConfigLayer+0x20>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e079      	b.n	8006af0 <HAL_DMA2D_ConfigLayer+0x114>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	3318      	adds	r3, #24
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	4413      	add	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	041b      	lsls	r3, r3, #16
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006a26:	4b35      	ldr	r3, [pc, #212]	; (8006afc <HAL_DMA2D_ConfigLayer+0x120>)
 8006a28:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b0a      	cmp	r3, #10
 8006a30:	d003      	beq.n	8006a3a <HAL_DMA2D_ConfigLayer+0x5e>
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	d107      	bne.n	8006a4a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	e005      	b.n	8006a56 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	061b      	lsls	r3, r3, #24
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d120      	bne.n	8006a9e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	43db      	mvns	r3, r3
 8006a66:	ea02 0103 	and.w	r1, r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	6812      	ldr	r2, [r2, #0]
 8006a7c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2b0a      	cmp	r3, #10
 8006a84:	d003      	beq.n	8006a8e <HAL_DMA2D_ConfigLayer+0xb2>
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b09      	cmp	r3, #9
 8006a8c:	d127      	bne.n	8006ade <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a9c:	e01f      	b.n	8006ade <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	43db      	mvns	r3, r3
 8006aa8:	ea02 0103 	and.w	r1, r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b0a      	cmp	r3, #10
 8006ac6:	d003      	beq.n	8006ad0 <HAL_DMA2D_ConfigLayer+0xf4>
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b09      	cmp	r3, #9
 8006ace:	d106      	bne.n	8006ade <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006adc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	ff03000f 	.word	0xff03000f

08006b00 <HAL_DMA2D_EnableDeadTime>:
  * @brief Enable DMA2D dead time feature.
  * @param hdma2d DMA2D handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_EnableDeadTime(DMA2D_HandleTypeDef *hdma2d)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdma2d);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <HAL_DMA2D_EnableDeadTime+0x16>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e018      	b.n	8006b48 <HAL_DMA2D_EnableDeadTime+0x48>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set DMA2D_AMTCR EN bit */
  SET_BIT(hdma2d->Instance->AMTCR, DMA2D_AMTCR_EN);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f042 0201 	orr.w	r2, r2, #1
 8006b34:	64da      	str	r2, [r3, #76]	; 0x4c

  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_DMA2D_ConfigDeadTime>:
  * @param hdma2d DMA2D handle.
  * @param DeadTime dead time value.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigDeadTime(DMA2D_HandleTypeDef *hdma2d, uint8_t DeadTime)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
  /* Process Locked */
  __HAL_LOCK(hdma2d);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_DMA2D_ConfigDeadTime+0x1a>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e01b      	b.n	8006ba6 <HAL_DMA2D_ConfigDeadTime+0x52>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set DMA2D_AMTCR DT field */
  MODIFY_REG(hdma2d->Instance->AMTCR, DMA2D_AMTCR_DT, (((uint32_t) DeadTime) << DMA2D_AMTCR_DT_Pos));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b84:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	021a      	lsls	r2, r3, #8
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	64da      	str	r2, [r3, #76]	; 0x4c

  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
	...

08006bb4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006bc6:	4b23      	ldr	r3, [pc, #140]	; (8006c54 <HAL_FLASH_Program+0xa0>)
 8006bc8:	7e1b      	ldrb	r3, [r3, #24]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_FLASH_Program+0x1e>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e03b      	b.n	8006c4a <HAL_FLASH_Program+0x96>
 8006bd2:	4b20      	ldr	r3, [pc, #128]	; (8006c54 <HAL_FLASH_Program+0xa0>)
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006bd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006bdc:	f000 f870 	bl	8006cc0 <FLASH_WaitForLastOperation>
 8006be0:	4603      	mov	r3, r0
 8006be2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d12b      	bne.n	8006c42 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d105      	bne.n	8006bfc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006bf0:	783b      	ldrb	r3, [r7, #0]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68b8      	ldr	r0, [r7, #8]
 8006bf6:	f000 f91b 	bl	8006e30 <FLASH_Program_Byte>
 8006bfa:	e016      	b.n	8006c2a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d105      	bne.n	8006c0e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006c02:	883b      	ldrh	r3, [r7, #0]
 8006c04:	4619      	mov	r1, r3
 8006c06:	68b8      	ldr	r0, [r7, #8]
 8006c08:	f000 f8ee 	bl	8006de8 <FLASH_Program_HalfWord>
 8006c0c:	e00d      	b.n	8006c2a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d105      	bne.n	8006c20 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	4619      	mov	r1, r3
 8006c18:	68b8      	ldr	r0, [r7, #8]
 8006c1a:	f000 f8c3 	bl	8006da4 <FLASH_Program_Word>
 8006c1e:	e004      	b.n	8006c2a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c24:	68b8      	ldr	r0, [r7, #8]
 8006c26:	f000 f88b 	bl	8006d40 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006c2a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c2e:	f000 f847 	bl	8006cc0 <FLASH_WaitForLastOperation>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006c36:	4b08      	ldr	r3, [pc, #32]	; (8006c58 <HAL_FLASH_Program+0xa4>)
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	4a07      	ldr	r2, [pc, #28]	; (8006c58 <HAL_FLASH_Program+0xa4>)
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006c42:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <HAL_FLASH_Program+0xa0>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20000a78 	.word	0x20000a78
 8006c58:	40023c00 	.word	0x40023c00

08006c5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_FLASH_Unlock+0x38>)
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da0b      	bge.n	8006c86 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <HAL_FLASH_Unlock+0x38>)
 8006c70:	4a09      	ldr	r2, [pc, #36]	; (8006c98 <HAL_FLASH_Unlock+0x3c>)
 8006c72:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006c74:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <HAL_FLASH_Unlock+0x38>)
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <HAL_FLASH_Unlock+0x40>)
 8006c78:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006c7a:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <HAL_FLASH_Unlock+0x38>)
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	da01      	bge.n	8006c86 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006c86:	79fb      	ldrb	r3, [r7, #7]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	40023c00 	.word	0x40023c00
 8006c98:	45670123 	.word	0x45670123
 8006c9c:	cdef89ab 	.word	0xcdef89ab

08006ca0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <HAL_FLASH_Lock+0x1c>)
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	4a04      	ldr	r2, [pc, #16]	; (8006cbc <HAL_FLASH_Lock+0x1c>)
 8006caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cae:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	40023c00 	.word	0x40023c00

08006cc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	; (8006d38 <FLASH_WaitForLastOperation+0x78>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006cd2:	f7ff fc67 	bl	80065a4 <HAL_GetTick>
 8006cd6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006cd8:	e010      	b.n	8006cfc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce0:	d00c      	beq.n	8006cfc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d007      	beq.n	8006cf8 <FLASH_WaitForLastOperation+0x38>
 8006ce8:	f7ff fc5c 	bl	80065a4 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d201      	bcs.n	8006cfc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e019      	b.n	8006d30 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006cfc:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <FLASH_WaitForLastOperation+0x7c>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e8      	bne.n	8006cda <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006d08:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <FLASH_WaitForLastOperation+0x7c>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006d14:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <FLASH_WaitForLastOperation+0x7c>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006d1a:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <FLASH_WaitForLastOperation+0x7c>)
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006d26:	f000 f8a5 	bl	8006e74 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
  
}  
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20000a78 	.word	0x20000a78
 8006d3c:	40023c00 	.word	0x40023c00

08006d40 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006d4c:	4b14      	ldr	r3, [pc, #80]	; (8006da0 <FLASH_Program_DoubleWord+0x60>)
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <FLASH_Program_DoubleWord+0x60>)
 8006d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006d58:	4b11      	ldr	r3, [pc, #68]	; (8006da0 <FLASH_Program_DoubleWord+0x60>)
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	4a10      	ldr	r2, [pc, #64]	; (8006da0 <FLASH_Program_DoubleWord+0x60>)
 8006d5e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006d62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006d64:	4b0e      	ldr	r3, [pc, #56]	; (8006da0 <FLASH_Program_DoubleWord+0x60>)
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	4a0d      	ldr	r2, [pc, #52]	; (8006da0 <FLASH_Program_DoubleWord+0x60>)
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006d76:	f3bf 8f6f 	isb	sy
}
 8006d7a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006d7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	000a      	movs	r2, r1
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	68f9      	ldr	r1, [r7, #12]
 8006d8e:	3104      	adds	r1, #4
 8006d90:	4613      	mov	r3, r2
 8006d92:	600b      	str	r3, [r1, #0]
}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	40023c00 	.word	0x40023c00

08006da4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006dae:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <FLASH_Program_Word+0x40>)
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	4a0c      	ldr	r2, [pc, #48]	; (8006de4 <FLASH_Program_Word+0x40>)
 8006db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <FLASH_Program_Word+0x40>)
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	4a09      	ldr	r2, [pc, #36]	; (8006de4 <FLASH_Program_Word+0x40>)
 8006dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006dc6:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <FLASH_Program_Word+0x40>)
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	4a06      	ldr	r2, [pc, #24]	; (8006de4 <FLASH_Program_Word+0x40>)
 8006dcc:	f043 0301 	orr.w	r3, r3, #1
 8006dd0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	601a      	str	r2, [r3, #0]
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	40023c00 	.word	0x40023c00

08006de8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006df4:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <FLASH_Program_HalfWord+0x44>)
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	4a0c      	ldr	r2, [pc, #48]	; (8006e2c <FLASH_Program_HalfWord+0x44>)
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006e00:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <FLASH_Program_HalfWord+0x44>)
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	4a09      	ldr	r2, [pc, #36]	; (8006e2c <FLASH_Program_HalfWord+0x44>)
 8006e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006e0c:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <FLASH_Program_HalfWord+0x44>)
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	4a06      	ldr	r2, [pc, #24]	; (8006e2c <FLASH_Program_HalfWord+0x44>)
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	887a      	ldrh	r2, [r7, #2]
 8006e1c:	801a      	strh	r2, [r3, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40023c00 	.word	0x40023c00

08006e30 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006e3c:	4b0c      	ldr	r3, [pc, #48]	; (8006e70 <FLASH_Program_Byte+0x40>)
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	4a0b      	ldr	r2, [pc, #44]	; (8006e70 <FLASH_Program_Byte+0x40>)
 8006e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006e48:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <FLASH_Program_Byte+0x40>)
 8006e4a:	4a09      	ldr	r2, [pc, #36]	; (8006e70 <FLASH_Program_Byte+0x40>)
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <FLASH_Program_Byte+0x40>)
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	4a06      	ldr	r2, [pc, #24]	; (8006e70 <FLASH_Program_Byte+0x40>)
 8006e56:	f043 0301 	orr.w	r3, r3, #1
 8006e5a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	78fa      	ldrb	r2, [r7, #3]
 8006e60:	701a      	strb	r2, [r3, #0]
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	40023c00 	.word	0x40023c00

08006e74 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006e78:	4b2f      	ldr	r3, [pc, #188]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d008      	beq.n	8006e96 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006e84:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	f043 0310 	orr.w	r3, r3, #16
 8006e8c:	4a2b      	ldr	r2, [pc, #172]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006e8e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006e90:	4b29      	ldr	r3, [pc, #164]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006e92:	2210      	movs	r2, #16
 8006e94:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006e96:	4b28      	ldr	r3, [pc, #160]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d008      	beq.n	8006eb4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006ea2:	4b26      	ldr	r3, [pc, #152]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	f043 0308 	orr.w	r3, r3, #8
 8006eaa:	4a24      	ldr	r2, [pc, #144]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006eac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006eae:	4b22      	ldr	r3, [pc, #136]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006eb4:	4b20      	ldr	r3, [pc, #128]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d008      	beq.n	8006ed2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006ec0:	4b1e      	ldr	r3, [pc, #120]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	f043 0304 	orr.w	r3, r3, #4
 8006ec8:	4a1c      	ldr	r2, [pc, #112]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006eca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006ecc:	4b1a      	ldr	r3, [pc, #104]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006ece:	2240      	movs	r2, #64	; 0x40
 8006ed0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006ed2:	4b19      	ldr	r3, [pc, #100]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d008      	beq.n	8006ef0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006ede:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f043 0302 	orr.w	r3, r3, #2
 8006ee6:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006ee8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006eea:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006eec:	2280      	movs	r2, #128	; 0x80
 8006eee:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006ef0:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d009      	beq.n	8006f10 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006efc:	4b0f      	ldr	r3, [pc, #60]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	4a0d      	ldr	r2, [pc, #52]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006f06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006f08:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f0e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006f10:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d008      	beq.n	8006f2e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006f1c:	4b07      	ldr	r3, [pc, #28]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	f043 0320 	orr.w	r3, r3, #32
 8006f24:	4a05      	ldr	r2, [pc, #20]	; (8006f3c <FLASH_SetErrorCode+0xc8>)
 8006f26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006f28:	4b03      	ldr	r3, [pc, #12]	; (8006f38 <FLASH_SetErrorCode+0xc4>)
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	60da      	str	r2, [r3, #12]
  }
}
 8006f2e:	bf00      	nop
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40023c00 	.word	0x40023c00
 8006f3c:	20000a78 	.word	0x20000a78

08006f40 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d102      	bne.n	8006f5c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	e010      	b.n	8006f7e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d103      	bne.n	8006f6a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e009      	b.n	8006f7e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006f6a:	78fb      	ldrb	r3, [r7, #3]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d103      	bne.n	8006f78 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	e002      	b.n	8006f7e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006f78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006f7c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b0b      	cmp	r3, #11
 8006f82:	d902      	bls.n	8006f8a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3304      	adds	r3, #4
 8006f88:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006f8a:	4b13      	ldr	r3, [pc, #76]	; (8006fd8 <FLASH_Erase_Sector+0x98>)
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	4a12      	ldr	r2, [pc, #72]	; (8006fd8 <FLASH_Erase_Sector+0x98>)
 8006f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006f96:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <FLASH_Erase_Sector+0x98>)
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	490f      	ldr	r1, [pc, #60]	; (8006fd8 <FLASH_Erase_Sector+0x98>)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <FLASH_Erase_Sector+0x98>)
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	4a0c      	ldr	r2, [pc, #48]	; (8006fd8 <FLASH_Erase_Sector+0x98>)
 8006fa8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006fac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006fae:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <FLASH_Erase_Sector+0x98>)
 8006fb0:	691a      	ldr	r2, [r3, #16]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	4a07      	ldr	r2, [pc, #28]	; (8006fd8 <FLASH_Erase_Sector+0x98>)
 8006fba:	f043 0302 	orr.w	r3, r3, #2
 8006fbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <FLASH_Erase_Sector+0x98>)
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	4a04      	ldr	r2, [pc, #16]	; (8006fd8 <FLASH_Erase_Sector+0x98>)
 8006fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fca:	6113      	str	r3, [r2, #16]
}
 8006fcc:	bf00      	nop
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	40023c00 	.word	0x40023c00

08006fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b089      	sub	sp, #36	; 0x24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61fb      	str	r3, [r7, #28]
 8006ff6:	e177      	b.n	80072e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8007000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4013      	ands	r3, r2
 800700a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	429a      	cmp	r2, r3
 8007012:	f040 8166 	bne.w	80072e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	2b01      	cmp	r3, #1
 8007020:	d005      	beq.n	800702e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800702a:	2b02      	cmp	r3, #2
 800702c:	d130      	bne.n	8007090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	2203      	movs	r2, #3
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	43db      	mvns	r3, r3
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	4013      	ands	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	4313      	orrs	r3, r2
 8007056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007064:	2201      	movs	r2, #1
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	43db      	mvns	r3, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4013      	ands	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	091b      	lsrs	r3, r3, #4
 800707a:	f003 0201 	and.w	r2, r3, #1
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	4313      	orrs	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	2b03      	cmp	r3, #3
 800709a:	d017      	beq.n	80070cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	2203      	movs	r2, #3
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	43db      	mvns	r3, r3
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	4013      	ands	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	fa02 f303 	lsl.w	r3, r2, r3
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d123      	bne.n	8007120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	08da      	lsrs	r2, r3, #3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3208      	adds	r2, #8
 80070e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	220f      	movs	r2, #15
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	4013      	ands	r3, r2
 80070fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	4313      	orrs	r3, r2
 8007110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	08da      	lsrs	r2, r3, #3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	3208      	adds	r2, #8
 800711a:	69b9      	ldr	r1, [r7, #24]
 800711c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	2203      	movs	r2, #3
 800712c:	fa02 f303 	lsl.w	r3, r2, r3
 8007130:	43db      	mvns	r3, r3
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	4013      	ands	r3, r2
 8007136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f003 0203 	and.w	r2, r3, #3
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	fa02 f303 	lsl.w	r3, r2, r3
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	4313      	orrs	r3, r2
 800714c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 80c0 	beq.w	80072e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	4b66      	ldr	r3, [pc, #408]	; (8007300 <HAL_GPIO_Init+0x324>)
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716a:	4a65      	ldr	r2, [pc, #404]	; (8007300 <HAL_GPIO_Init+0x324>)
 800716c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007170:	6453      	str	r3, [r2, #68]	; 0x44
 8007172:	4b63      	ldr	r3, [pc, #396]	; (8007300 <HAL_GPIO_Init+0x324>)
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800717e:	4a61      	ldr	r2, [pc, #388]	; (8007304 <HAL_GPIO_Init+0x328>)
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	089b      	lsrs	r3, r3, #2
 8007184:	3302      	adds	r3, #2
 8007186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800718a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f003 0303 	and.w	r3, r3, #3
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	220f      	movs	r2, #15
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	43db      	mvns	r3, r3
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	4013      	ands	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a58      	ldr	r2, [pc, #352]	; (8007308 <HAL_GPIO_Init+0x32c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d037      	beq.n	800721a <HAL_GPIO_Init+0x23e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a57      	ldr	r2, [pc, #348]	; (800730c <HAL_GPIO_Init+0x330>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d031      	beq.n	8007216 <HAL_GPIO_Init+0x23a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a56      	ldr	r2, [pc, #344]	; (8007310 <HAL_GPIO_Init+0x334>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d02b      	beq.n	8007212 <HAL_GPIO_Init+0x236>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a55      	ldr	r2, [pc, #340]	; (8007314 <HAL_GPIO_Init+0x338>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d025      	beq.n	800720e <HAL_GPIO_Init+0x232>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a54      	ldr	r2, [pc, #336]	; (8007318 <HAL_GPIO_Init+0x33c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01f      	beq.n	800720a <HAL_GPIO_Init+0x22e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a53      	ldr	r2, [pc, #332]	; (800731c <HAL_GPIO_Init+0x340>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d019      	beq.n	8007206 <HAL_GPIO_Init+0x22a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a52      	ldr	r2, [pc, #328]	; (8007320 <HAL_GPIO_Init+0x344>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <HAL_GPIO_Init+0x226>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a51      	ldr	r2, [pc, #324]	; (8007324 <HAL_GPIO_Init+0x348>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00d      	beq.n	80071fe <HAL_GPIO_Init+0x222>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a50      	ldr	r2, [pc, #320]	; (8007328 <HAL_GPIO_Init+0x34c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d007      	beq.n	80071fa <HAL_GPIO_Init+0x21e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a4f      	ldr	r2, [pc, #316]	; (800732c <HAL_GPIO_Init+0x350>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d101      	bne.n	80071f6 <HAL_GPIO_Init+0x21a>
 80071f2:	2309      	movs	r3, #9
 80071f4:	e012      	b.n	800721c <HAL_GPIO_Init+0x240>
 80071f6:	230a      	movs	r3, #10
 80071f8:	e010      	b.n	800721c <HAL_GPIO_Init+0x240>
 80071fa:	2308      	movs	r3, #8
 80071fc:	e00e      	b.n	800721c <HAL_GPIO_Init+0x240>
 80071fe:	2307      	movs	r3, #7
 8007200:	e00c      	b.n	800721c <HAL_GPIO_Init+0x240>
 8007202:	2306      	movs	r3, #6
 8007204:	e00a      	b.n	800721c <HAL_GPIO_Init+0x240>
 8007206:	2305      	movs	r3, #5
 8007208:	e008      	b.n	800721c <HAL_GPIO_Init+0x240>
 800720a:	2304      	movs	r3, #4
 800720c:	e006      	b.n	800721c <HAL_GPIO_Init+0x240>
 800720e:	2303      	movs	r3, #3
 8007210:	e004      	b.n	800721c <HAL_GPIO_Init+0x240>
 8007212:	2302      	movs	r3, #2
 8007214:	e002      	b.n	800721c <HAL_GPIO_Init+0x240>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <HAL_GPIO_Init+0x240>
 800721a:	2300      	movs	r3, #0
 800721c:	69fa      	ldr	r2, [r7, #28]
 800721e:	f002 0203 	and.w	r2, r2, #3
 8007222:	0092      	lsls	r2, r2, #2
 8007224:	4093      	lsls	r3, r2
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	4313      	orrs	r3, r2
 800722a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800722c:	4935      	ldr	r1, [pc, #212]	; (8007304 <HAL_GPIO_Init+0x328>)
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	089b      	lsrs	r3, r3, #2
 8007232:	3302      	adds	r3, #2
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800723a:	4b3d      	ldr	r3, [pc, #244]	; (8007330 <HAL_GPIO_Init+0x354>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	43db      	mvns	r3, r3
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	4013      	ands	r3, r2
 8007248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800725e:	4a34      	ldr	r2, [pc, #208]	; (8007330 <HAL_GPIO_Init+0x354>)
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007264:	4b32      	ldr	r3, [pc, #200]	; (8007330 <HAL_GPIO_Init+0x354>)
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	43db      	mvns	r3, r3
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	4013      	ands	r3, r2
 8007272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007288:	4a29      	ldr	r2, [pc, #164]	; (8007330 <HAL_GPIO_Init+0x354>)
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800728e:	4b28      	ldr	r3, [pc, #160]	; (8007330 <HAL_GPIO_Init+0x354>)
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	43db      	mvns	r3, r3
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	4013      	ands	r3, r2
 800729c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072b2:	4a1f      	ldr	r2, [pc, #124]	; (8007330 <HAL_GPIO_Init+0x354>)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072b8:	4b1d      	ldr	r3, [pc, #116]	; (8007330 <HAL_GPIO_Init+0x354>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	4013      	ands	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072dc:	4a14      	ldr	r2, [pc, #80]	; (8007330 <HAL_GPIO_Init+0x354>)
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	3301      	adds	r3, #1
 80072e6:	61fb      	str	r3, [r7, #28]
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	2b0f      	cmp	r3, #15
 80072ec:	f67f ae84 	bls.w	8006ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	3724      	adds	r7, #36	; 0x24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40023800 	.word	0x40023800
 8007304:	40013800 	.word	0x40013800
 8007308:	40020000 	.word	0x40020000
 800730c:	40020400 	.word	0x40020400
 8007310:	40020800 	.word	0x40020800
 8007314:	40020c00 	.word	0x40020c00
 8007318:	40021000 	.word	0x40021000
 800731c:	40021400 	.word	0x40021400
 8007320:	40021800 	.word	0x40021800
 8007324:	40021c00 	.word	0x40021c00
 8007328:	40022000 	.word	0x40022000
 800732c:	40022400 	.word	0x40022400
 8007330:	40013c00 	.word	0x40013c00

08007334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	887b      	ldrh	r3, [r7, #2]
 8007346:	4013      	ands	r3, r2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800734c:	2301      	movs	r3, #1
 800734e:	73fb      	strb	r3, [r7, #15]
 8007350:	e001      	b.n	8007356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	807b      	strh	r3, [r7, #2]
 8007370:	4613      	mov	r3, r2
 8007372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007374:	787b      	ldrb	r3, [r7, #1]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800737a:	887a      	ldrh	r2, [r7, #2]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007380:	e003      	b.n	800738a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007382:	887b      	ldrh	r3, [r7, #2]
 8007384:	041a      	lsls	r2, r3, #16
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	619a      	str	r2, [r3, #24]
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
	...

08007398 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e0bf      	b.n	800752a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fc fdbe 	bl	8003f40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699a      	ldr	r2, [r3, #24]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80073da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6999      	ldr	r1, [r3, #24]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6899      	ldr	r1, [r3, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	4b4a      	ldr	r3, [pc, #296]	; (8007534 <HAL_LTDC_Init+0x19c>)
 800740c:	400b      	ands	r3, r1
 800740e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	041b      	lsls	r3, r3, #16
 8007416:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6899      	ldr	r1, [r3, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	699a      	ldr	r2, [r3, #24]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68d9      	ldr	r1, [r3, #12]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	4b3e      	ldr	r3, [pc, #248]	; (8007534 <HAL_LTDC_Init+0x19c>)
 800743a:	400b      	ands	r3, r1
 800743c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68d9      	ldr	r1, [r3, #12]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a1a      	ldr	r2, [r3, #32]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6919      	ldr	r1, [r3, #16]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	4b33      	ldr	r3, [pc, #204]	; (8007534 <HAL_LTDC_Init+0x19c>)
 8007468:	400b      	ands	r3, r1
 800746a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6919      	ldr	r1, [r3, #16]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6959      	ldr	r1, [r3, #20]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	4b27      	ldr	r3, [pc, #156]	; (8007534 <HAL_LTDC_Init+0x19c>)
 8007496:	400b      	ands	r3, r1
 8007498:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6959      	ldr	r1, [r3, #20]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074be:	021b      	lsls	r3, r3, #8
 80074c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80074c8:	041b      	lsls	r3, r3, #16
 80074ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0206 	orr.w	r2, r2, #6
 8007506:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699a      	ldr	r2, [r3, #24]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0201 	orr.w	r2, r2, #1
 8007516:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	f000f800 	.word	0xf000f800

08007538 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007538:	b5b0      	push	{r4, r5, r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <HAL_LTDC_ConfigLayer+0x1a>
 800754e:	2302      	movs	r3, #2
 8007550:	e02c      	b.n	80075ac <HAL_LTDC_ConfigLayer+0x74>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2202      	movs	r2, #2
 800755e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2134      	movs	r1, #52	; 0x34
 8007568:	fb01 f303 	mul.w	r3, r1, r3
 800756c:	4413      	add	r3, r2
 800756e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	4614      	mov	r4, r2
 8007576:	461d      	mov	r5, r3
 8007578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800757a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800757c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800757e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 f847 	bl	8007620 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2201      	movs	r2, #1
 8007598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bdb0      	pop	{r4, r5, r7, pc}

080075b4 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_LTDC_SetAddress+0x1a>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e024      	b.n	8007618 <HAL_LTDC_SetAddress+0x64>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2202      	movs	r2, #2
 80075da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2234      	movs	r2, #52	; 0x34
 80075e2:	fb02 f303 	mul.w	r3, r2, r3
 80075e6:	3338      	adds	r3, #56	; 0x38
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6979      	ldr	r1, [r7, #20]
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f811 	bl	8007620 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2201      	movs	r2, #1
 8007604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007620:	b480      	push	{r7}
 8007622:	b089      	sub	sp, #36	; 0x24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	0c1b      	lsrs	r3, r3, #16
 8007638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800763c:	4413      	add	r3, r2
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	01db      	lsls	r3, r3, #7
 800764c:	4413      	add	r3, r2
 800764e:	3384      	adds	r3, #132	; 0x84
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	6812      	ldr	r2, [r2, #0]
 8007656:	4611      	mov	r1, r2
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	01d2      	lsls	r2, r2, #7
 800765c:	440a      	add	r2, r1
 800765e:	3284      	adds	r2, #132	; 0x84
 8007660:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007664:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	0c1b      	lsrs	r3, r3, #16
 8007672:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007676:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007678:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4619      	mov	r1, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	01db      	lsls	r3, r3, #7
 8007684:	440b      	add	r3, r1
 8007686:	3384      	adds	r3, #132	; 0x84
 8007688:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800768e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800769e:	4413      	add	r3, r2
 80076a0:	041b      	lsls	r3, r3, #16
 80076a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	461a      	mov	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	01db      	lsls	r3, r3, #7
 80076ae:	4413      	add	r3, r2
 80076b0:	3384      	adds	r3, #132	; 0x84
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	4611      	mov	r1, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	01d2      	lsls	r2, r2, #7
 80076be:	440a      	add	r2, r1
 80076c0:	3284      	adds	r2, #132	; 0x84
 80076c2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80076c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076d6:	4413      	add	r3, r2
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4619      	mov	r1, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	01db      	lsls	r3, r3, #7
 80076e4:	440b      	add	r3, r1
 80076e6:	3384      	adds	r3, #132	; 0x84
 80076e8:	4619      	mov	r1, r3
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	01db      	lsls	r3, r3, #7
 80076fa:	4413      	add	r3, r2
 80076fc:	3384      	adds	r3, #132	; 0x84
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	4611      	mov	r1, r2
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	01d2      	lsls	r2, r2, #7
 800770a:	440a      	add	r2, r1
 800770c:	3284      	adds	r2, #132	; 0x84
 800770e:	f023 0307 	bic.w	r3, r3, #7
 8007712:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	461a      	mov	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	01db      	lsls	r3, r3, #7
 800771e:	4413      	add	r3, r2
 8007720:	3384      	adds	r3, #132	; 0x84
 8007722:	461a      	mov	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800773a:	041b      	lsls	r3, r3, #16
 800773c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	061b      	lsls	r3, r3, #24
 8007744:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	01db      	lsls	r3, r3, #7
 8007750:	4413      	add	r3, r2
 8007752:	3384      	adds	r3, #132	; 0x84
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	01db      	lsls	r3, r3, #7
 8007760:	4413      	add	r3, r2
 8007762:	3384      	adds	r3, #132	; 0x84
 8007764:	461a      	mov	r2, r3
 8007766:	2300      	movs	r3, #0
 8007768:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007770:	461a      	mov	r2, r3
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	431a      	orrs	r2, r3
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	431a      	orrs	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4619      	mov	r1, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	01db      	lsls	r3, r3, #7
 8007784:	440b      	add	r3, r1
 8007786:	3384      	adds	r3, #132	; 0x84
 8007788:	4619      	mov	r1, r3
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	4313      	orrs	r3, r2
 800778e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	01db      	lsls	r3, r3, #7
 800779a:	4413      	add	r3, r2
 800779c:	3384      	adds	r3, #132	; 0x84
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	6812      	ldr	r2, [r2, #0]
 80077a4:	4611      	mov	r1, r2
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	01d2      	lsls	r2, r2, #7
 80077aa:	440a      	add	r2, r1
 80077ac:	3284      	adds	r2, #132	; 0x84
 80077ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80077b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	01db      	lsls	r3, r3, #7
 80077be:	4413      	add	r3, r2
 80077c0:	3384      	adds	r3, #132	; 0x84
 80077c2:	461a      	mov	r2, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	01db      	lsls	r3, r3, #7
 80077d4:	4413      	add	r3, r2
 80077d6:	3384      	adds	r3, #132	; 0x84
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	4611      	mov	r1, r2
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	01d2      	lsls	r2, r2, #7
 80077e4:	440a      	add	r2, r1
 80077e6:	3284      	adds	r2, #132	; 0x84
 80077e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80077ec:	f023 0307 	bic.w	r3, r3, #7
 80077f0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	69da      	ldr	r2, [r3, #28]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	68f9      	ldr	r1, [r7, #12]
 80077fc:	6809      	ldr	r1, [r1, #0]
 80077fe:	4608      	mov	r0, r1
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	01c9      	lsls	r1, r1, #7
 8007804:	4401      	add	r1, r0
 8007806:	3184      	adds	r1, #132	; 0x84
 8007808:	4313      	orrs	r3, r2
 800780a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	01db      	lsls	r3, r3, #7
 8007816:	4413      	add	r3, r2
 8007818:	3384      	adds	r3, #132	; 0x84
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	01db      	lsls	r3, r3, #7
 8007826:	4413      	add	r3, r2
 8007828:	3384      	adds	r3, #132	; 0x84
 800782a:	461a      	mov	r2, r3
 800782c:	2300      	movs	r3, #0
 800782e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	01db      	lsls	r3, r3, #7
 800783a:	4413      	add	r3, r2
 800783c:	3384      	adds	r3, #132	; 0x84
 800783e:	461a      	mov	r2, r3
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d102      	bne.n	8007854 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800784e:	2304      	movs	r3, #4
 8007850:	61fb      	str	r3, [r7, #28]
 8007852:	e01b      	b.n	800788c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d102      	bne.n	8007862 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800785c:	2303      	movs	r3, #3
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	e014      	b.n	800788c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b04      	cmp	r3, #4
 8007868:	d00b      	beq.n	8007882 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800786e:	2b02      	cmp	r3, #2
 8007870:	d007      	beq.n	8007882 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007876:	2b03      	cmp	r3, #3
 8007878:	d003      	beq.n	8007882 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800787e:	2b07      	cmp	r3, #7
 8007880:	d102      	bne.n	8007888 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007882:	2302      	movs	r3, #2
 8007884:	61fb      	str	r3, [r7, #28]
 8007886:	e001      	b.n	800788c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007888:	2301      	movs	r3, #1
 800788a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	01db      	lsls	r3, r3, #7
 8007896:	4413      	add	r3, r2
 8007898:	3384      	adds	r3, #132	; 0x84
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	6812      	ldr	r2, [r2, #0]
 80078a0:	4611      	mov	r1, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	01d2      	lsls	r2, r2, #7
 80078a6:	440a      	add	r2, r1
 80078a8:	3284      	adds	r2, #132	; 0x84
 80078aa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80078ae:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	fb02 f303 	mul.w	r3, r2, r3
 80078ba:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	6859      	ldr	r1, [r3, #4]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	1acb      	subs	r3, r1, r3
 80078c6:	69f9      	ldr	r1, [r7, #28]
 80078c8:	fb01 f303 	mul.w	r3, r1, r3
 80078cc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80078ce:	68f9      	ldr	r1, [r7, #12]
 80078d0:	6809      	ldr	r1, [r1, #0]
 80078d2:	4608      	mov	r0, r1
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	01c9      	lsls	r1, r1, #7
 80078d8:	4401      	add	r1, r0
 80078da:	3184      	adds	r1, #132	; 0x84
 80078dc:	4313      	orrs	r3, r2
 80078de:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	01db      	lsls	r3, r3, #7
 80078ea:	4413      	add	r3, r2
 80078ec:	3384      	adds	r3, #132	; 0x84
 80078ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	6812      	ldr	r2, [r2, #0]
 80078f4:	4611      	mov	r1, r2
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	01d2      	lsls	r2, r2, #7
 80078fa:	440a      	add	r2, r1
 80078fc:	3284      	adds	r2, #132	; 0x84
 80078fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007902:	f023 0307 	bic.w	r3, r3, #7
 8007906:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	461a      	mov	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	01db      	lsls	r3, r3, #7
 8007912:	4413      	add	r3, r2
 8007914:	3384      	adds	r3, #132	; 0x84
 8007916:	461a      	mov	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	01db      	lsls	r3, r3, #7
 8007928:	4413      	add	r3, r2
 800792a:	3384      	adds	r3, #132	; 0x84
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	6812      	ldr	r2, [r2, #0]
 8007932:	4611      	mov	r1, r2
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	01d2      	lsls	r2, r2, #7
 8007938:	440a      	add	r2, r1
 800793a:	3284      	adds	r2, #132	; 0x84
 800793c:	f043 0301 	orr.w	r3, r3, #1
 8007940:	6013      	str	r3, [r2, #0]
}
 8007942:	bf00      	nop
 8007944:	3724      	adds	r7, #36	; 0x24
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
	...

08007950 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800795a:	2300      	movs	r3, #0
 800795c:	603b      	str	r3, [r7, #0]
 800795e:	4b20      	ldr	r3, [pc, #128]	; (80079e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	4a1f      	ldr	r2, [pc, #124]	; (80079e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007968:	6413      	str	r3, [r2, #64]	; 0x40
 800796a:	4b1d      	ldr	r3, [pc, #116]	; (80079e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007976:	4b1b      	ldr	r3, [pc, #108]	; (80079e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8007978:	2201      	movs	r2, #1
 800797a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800797c:	f7fe fe12 	bl	80065a4 <HAL_GetTick>
 8007980:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007982:	e009      	b.n	8007998 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007984:	f7fe fe0e 	bl	80065a4 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007992:	d901      	bls.n	8007998 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e01f      	b.n	80079d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007998:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a4:	d1ee      	bne.n	8007984 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80079a6:	4b11      	ldr	r3, [pc, #68]	; (80079ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80079a8:	2201      	movs	r2, #1
 80079aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079ac:	f7fe fdfa 	bl	80065a4 <HAL_GetTick>
 80079b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079b2:	e009      	b.n	80079c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80079b4:	f7fe fdf6 	bl	80065a4 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079c2:	d901      	bls.n	80079c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e007      	b.n	80079d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d4:	d1ee      	bne.n	80079b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	40023800 	.word	0x40023800
 80079e4:	420e0040 	.word	0x420e0040
 80079e8:	40007000 	.word	0x40007000
 80079ec:	420e0044 	.word	0x420e0044

080079f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e267      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d075      	beq.n	8007afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a0e:	4b88      	ldr	r3, [pc, #544]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 030c 	and.w	r3, r3, #12
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	d00c      	beq.n	8007a34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a1a:	4b85      	ldr	r3, [pc, #532]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a22:	2b08      	cmp	r3, #8
 8007a24:	d112      	bne.n	8007a4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a26:	4b82      	ldr	r3, [pc, #520]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a32:	d10b      	bne.n	8007a4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a34:	4b7e      	ldr	r3, [pc, #504]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d05b      	beq.n	8007af8 <HAL_RCC_OscConfig+0x108>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d157      	bne.n	8007af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e242      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a54:	d106      	bne.n	8007a64 <HAL_RCC_OscConfig+0x74>
 8007a56:	4b76      	ldr	r3, [pc, #472]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a75      	ldr	r2, [pc, #468]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e01d      	b.n	8007aa0 <HAL_RCC_OscConfig+0xb0>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a6c:	d10c      	bne.n	8007a88 <HAL_RCC_OscConfig+0x98>
 8007a6e:	4b70      	ldr	r3, [pc, #448]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a6f      	ldr	r2, [pc, #444]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	4b6d      	ldr	r3, [pc, #436]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a6c      	ldr	r2, [pc, #432]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	e00b      	b.n	8007aa0 <HAL_RCC_OscConfig+0xb0>
 8007a88:	4b69      	ldr	r3, [pc, #420]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a68      	ldr	r2, [pc, #416]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	4b66      	ldr	r3, [pc, #408]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a65      	ldr	r2, [pc, #404]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d013      	beq.n	8007ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa8:	f7fe fd7c 	bl	80065a4 <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ab0:	f7fe fd78 	bl	80065a4 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b64      	cmp	r3, #100	; 0x64
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e207      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ac2:	4b5b      	ldr	r3, [pc, #364]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0f0      	beq.n	8007ab0 <HAL_RCC_OscConfig+0xc0>
 8007ace:	e014      	b.n	8007afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad0:	f7fe fd68 	bl	80065a4 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ad8:	f7fe fd64 	bl	80065a4 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b64      	cmp	r3, #100	; 0x64
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e1f3      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aea:	4b51      	ldr	r3, [pc, #324]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1f0      	bne.n	8007ad8 <HAL_RCC_OscConfig+0xe8>
 8007af6:	e000      	b.n	8007afa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d063      	beq.n	8007bce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b06:	4b4a      	ldr	r3, [pc, #296]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f003 030c 	and.w	r3, r3, #12
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b12:	4b47      	ldr	r3, [pc, #284]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d11c      	bne.n	8007b58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b1e:	4b44      	ldr	r3, [pc, #272]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d116      	bne.n	8007b58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b2a:	4b41      	ldr	r3, [pc, #260]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <HAL_RCC_OscConfig+0x152>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d001      	beq.n	8007b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e1c7      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b42:	4b3b      	ldr	r3, [pc, #236]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	4937      	ldr	r1, [pc, #220]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b56:	e03a      	b.n	8007bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d020      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b60:	4b34      	ldr	r3, [pc, #208]	; (8007c34 <HAL_RCC_OscConfig+0x244>)
 8007b62:	2201      	movs	r2, #1
 8007b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b66:	f7fe fd1d 	bl	80065a4 <HAL_GetTick>
 8007b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b6c:	e008      	b.n	8007b80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b6e:	f7fe fd19 	bl	80065a4 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e1a8      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b80:	4b2b      	ldr	r3, [pc, #172]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0f0      	beq.n	8007b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b8c:	4b28      	ldr	r3, [pc, #160]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	4925      	ldr	r1, [pc, #148]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	600b      	str	r3, [r1, #0]
 8007ba0:	e015      	b.n	8007bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ba2:	4b24      	ldr	r3, [pc, #144]	; (8007c34 <HAL_RCC_OscConfig+0x244>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba8:	f7fe fcfc 	bl	80065a4 <HAL_GetTick>
 8007bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bae:	e008      	b.n	8007bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bb0:	f7fe fcf8 	bl	80065a4 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e187      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bc2:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1f0      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d036      	beq.n	8007c48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d016      	beq.n	8007c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <HAL_RCC_OscConfig+0x248>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be8:	f7fe fcdc 	bl	80065a4 <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bee:	e008      	b.n	8007c02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bf0:	f7fe fcd8 	bl	80065a4 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e167      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <HAL_RCC_OscConfig+0x240>)
 8007c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0f0      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x200>
 8007c0e:	e01b      	b.n	8007c48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c10:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <HAL_RCC_OscConfig+0x248>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c16:	f7fe fcc5 	bl	80065a4 <HAL_GetTick>
 8007c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c1c:	e00e      	b.n	8007c3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c1e:	f7fe fcc1 	bl	80065a4 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d907      	bls.n	8007c3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e150      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
 8007c30:	40023800 	.word	0x40023800
 8007c34:	42470000 	.word	0x42470000
 8007c38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c3c:	4b88      	ldr	r3, [pc, #544]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1ea      	bne.n	8007c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0304 	and.w	r3, r3, #4
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 8097 	beq.w	8007d84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c56:	2300      	movs	r3, #0
 8007c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c5a:	4b81      	ldr	r3, [pc, #516]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10f      	bne.n	8007c86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c66:	2300      	movs	r3, #0
 8007c68:	60bb      	str	r3, [r7, #8]
 8007c6a:	4b7d      	ldr	r3, [pc, #500]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	4a7c      	ldr	r2, [pc, #496]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c74:	6413      	str	r3, [r2, #64]	; 0x40
 8007c76:	4b7a      	ldr	r3, [pc, #488]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c7e:	60bb      	str	r3, [r7, #8]
 8007c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c82:	2301      	movs	r3, #1
 8007c84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c86:	4b77      	ldr	r3, [pc, #476]	; (8007e64 <HAL_RCC_OscConfig+0x474>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d118      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c92:	4b74      	ldr	r3, [pc, #464]	; (8007e64 <HAL_RCC_OscConfig+0x474>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a73      	ldr	r2, [pc, #460]	; (8007e64 <HAL_RCC_OscConfig+0x474>)
 8007c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c9e:	f7fe fc81 	bl	80065a4 <HAL_GetTick>
 8007ca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ca4:	e008      	b.n	8007cb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ca6:	f7fe fc7d 	bl	80065a4 <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e10c      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cb8:	4b6a      	ldr	r3, [pc, #424]	; (8007e64 <HAL_RCC_OscConfig+0x474>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0f0      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d106      	bne.n	8007cda <HAL_RCC_OscConfig+0x2ea>
 8007ccc:	4b64      	ldr	r3, [pc, #400]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd0:	4a63      	ldr	r2, [pc, #396]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007cd2:	f043 0301 	orr.w	r3, r3, #1
 8007cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd8:	e01c      	b.n	8007d14 <HAL_RCC_OscConfig+0x324>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2b05      	cmp	r3, #5
 8007ce0:	d10c      	bne.n	8007cfc <HAL_RCC_OscConfig+0x30c>
 8007ce2:	4b5f      	ldr	r3, [pc, #380]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce6:	4a5e      	ldr	r2, [pc, #376]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007ce8:	f043 0304 	orr.w	r3, r3, #4
 8007cec:	6713      	str	r3, [r2, #112]	; 0x70
 8007cee:	4b5c      	ldr	r3, [pc, #368]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf2:	4a5b      	ldr	r2, [pc, #364]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007cf4:	f043 0301 	orr.w	r3, r3, #1
 8007cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cfa:	e00b      	b.n	8007d14 <HAL_RCC_OscConfig+0x324>
 8007cfc:	4b58      	ldr	r3, [pc, #352]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d00:	4a57      	ldr	r2, [pc, #348]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007d02:	f023 0301 	bic.w	r3, r3, #1
 8007d06:	6713      	str	r3, [r2, #112]	; 0x70
 8007d08:	4b55      	ldr	r3, [pc, #340]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0c:	4a54      	ldr	r2, [pc, #336]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007d0e:	f023 0304 	bic.w	r3, r3, #4
 8007d12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d015      	beq.n	8007d48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d1c:	f7fe fc42 	bl	80065a4 <HAL_GetTick>
 8007d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d22:	e00a      	b.n	8007d3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d24:	f7fe fc3e 	bl	80065a4 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e0cb      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d3a:	4b49      	ldr	r3, [pc, #292]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0ee      	beq.n	8007d24 <HAL_RCC_OscConfig+0x334>
 8007d46:	e014      	b.n	8007d72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d48:	f7fe fc2c 	bl	80065a4 <HAL_GetTick>
 8007d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d4e:	e00a      	b.n	8007d66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d50:	f7fe fc28 	bl	80065a4 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e0b5      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d66:	4b3e      	ldr	r3, [pc, #248]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1ee      	bne.n	8007d50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d105      	bne.n	8007d84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d78:	4b39      	ldr	r3, [pc, #228]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	4a38      	ldr	r2, [pc, #224]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 80a1 	beq.w	8007ed0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d8e:	4b34      	ldr	r3, [pc, #208]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 030c 	and.w	r3, r3, #12
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d05c      	beq.n	8007e54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d141      	bne.n	8007e26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007da2:	4b31      	ldr	r3, [pc, #196]	; (8007e68 <HAL_RCC_OscConfig+0x478>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da8:	f7fe fbfc 	bl	80065a4 <HAL_GetTick>
 8007dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dae:	e008      	b.n	8007dc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007db0:	f7fe fbf8 	bl	80065a4 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e087      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dc2:	4b27      	ldr	r3, [pc, #156]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1f0      	bne.n	8007db0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69da      	ldr	r2, [r3, #28]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	019b      	lsls	r3, r3, #6
 8007dde:	431a      	orrs	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de4:	085b      	lsrs	r3, r3, #1
 8007de6:	3b01      	subs	r3, #1
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	431a      	orrs	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	061b      	lsls	r3, r3, #24
 8007df2:	491b      	ldr	r1, [pc, #108]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007df8:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <HAL_RCC_OscConfig+0x478>)
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dfe:	f7fe fbd1 	bl	80065a4 <HAL_GetTick>
 8007e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e04:	e008      	b.n	8007e18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e06:	f7fe fbcd 	bl	80065a4 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d901      	bls.n	8007e18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e05c      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e18:	4b11      	ldr	r3, [pc, #68]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0f0      	beq.n	8007e06 <HAL_RCC_OscConfig+0x416>
 8007e24:	e054      	b.n	8007ed0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e26:	4b10      	ldr	r3, [pc, #64]	; (8007e68 <HAL_RCC_OscConfig+0x478>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e2c:	f7fe fbba 	bl	80065a4 <HAL_GetTick>
 8007e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e32:	e008      	b.n	8007e46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e34:	f7fe fbb6 	bl	80065a4 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d901      	bls.n	8007e46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e045      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e46:	4b06      	ldr	r3, [pc, #24]	; (8007e60 <HAL_RCC_OscConfig+0x470>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1f0      	bne.n	8007e34 <HAL_RCC_OscConfig+0x444>
 8007e52:	e03d      	b.n	8007ed0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d107      	bne.n	8007e6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e038      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
 8007e60:	40023800 	.word	0x40023800
 8007e64:	40007000 	.word	0x40007000
 8007e68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e6c:	4b1b      	ldr	r3, [pc, #108]	; (8007edc <HAL_RCC_OscConfig+0x4ec>)
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d028      	beq.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d121      	bne.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d11a      	bne.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ea2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d111      	bne.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb2:	085b      	lsrs	r3, r3, #1
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d107      	bne.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d001      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e000      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	40023800 	.word	0x40023800

08007ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e0cc      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ef4:	4b68      	ldr	r3, [pc, #416]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 030f 	and.w	r3, r3, #15
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d90c      	bls.n	8007f1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f02:	4b65      	ldr	r3, [pc, #404]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f0a:	4b63      	ldr	r3, [pc, #396]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d001      	beq.n	8007f1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e0b8      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d020      	beq.n	8007f6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f34:	4b59      	ldr	r3, [pc, #356]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	4a58      	ldr	r2, [pc, #352]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0308 	and.w	r3, r3, #8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f4c:	4b53      	ldr	r3, [pc, #332]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	4a52      	ldr	r2, [pc, #328]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f58:	4b50      	ldr	r3, [pc, #320]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	494d      	ldr	r1, [pc, #308]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d044      	beq.n	8008000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d107      	bne.n	8007f8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f7e:	4b47      	ldr	r3, [pc, #284]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d119      	bne.n	8007fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e07f      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d003      	beq.n	8007f9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d107      	bne.n	8007fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f9e:	4b3f      	ldr	r3, [pc, #252]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d109      	bne.n	8007fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e06f      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fae:	4b3b      	ldr	r3, [pc, #236]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e067      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fbe:	4b37      	ldr	r3, [pc, #220]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f023 0203 	bic.w	r2, r3, #3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	4934      	ldr	r1, [pc, #208]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fd0:	f7fe fae8 	bl	80065a4 <HAL_GetTick>
 8007fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fd6:	e00a      	b.n	8007fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fd8:	f7fe fae4 	bl	80065a4 <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e04f      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fee:	4b2b      	ldr	r3, [pc, #172]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f003 020c 	and.w	r2, r3, #12
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d1eb      	bne.n	8007fd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008000:	4b25      	ldr	r3, [pc, #148]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 030f 	and.w	r3, r3, #15
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d20c      	bcs.n	8008028 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800800e:	4b22      	ldr	r3, [pc, #136]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008016:	4b20      	ldr	r3, [pc, #128]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d001      	beq.n	8008028 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e032      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d008      	beq.n	8008046 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008034:	4b19      	ldr	r3, [pc, #100]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	4916      	ldr	r1, [pc, #88]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8008042:	4313      	orrs	r3, r2
 8008044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008052:	4b12      	ldr	r3, [pc, #72]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	490e      	ldr	r1, [pc, #56]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8008062:	4313      	orrs	r3, r2
 8008064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008066:	f000 f821 	bl	80080ac <HAL_RCC_GetSysClockFreq>
 800806a:	4602      	mov	r2, r0
 800806c:	4b0b      	ldr	r3, [pc, #44]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	091b      	lsrs	r3, r3, #4
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	490a      	ldr	r1, [pc, #40]	; (80080a0 <HAL_RCC_ClockConfig+0x1c0>)
 8008078:	5ccb      	ldrb	r3, [r1, r3]
 800807a:	fa22 f303 	lsr.w	r3, r2, r3
 800807e:	4a09      	ldr	r2, [pc, #36]	; (80080a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008082:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe fa48 	bl	800651c <HAL_InitTick>

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	40023c00 	.word	0x40023c00
 800809c:	40023800 	.word	0x40023800
 80080a0:	0800bfc4 	.word	0x0800bfc4
 80080a4:	20000024 	.word	0x20000024
 80080a8:	20000028 	.word	0x20000028

080080ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080b0:	b094      	sub	sp, #80	; 0x50
 80080b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	647b      	str	r3, [r7, #68]	; 0x44
 80080b8:	2300      	movs	r3, #0
 80080ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080bc:	2300      	movs	r3, #0
 80080be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080c4:	4b79      	ldr	r3, [pc, #484]	; (80082ac <HAL_RCC_GetSysClockFreq+0x200>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f003 030c 	and.w	r3, r3, #12
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d00d      	beq.n	80080ec <HAL_RCC_GetSysClockFreq+0x40>
 80080d0:	2b08      	cmp	r3, #8
 80080d2:	f200 80e1 	bhi.w	8008298 <HAL_RCC_GetSysClockFreq+0x1ec>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <HAL_RCC_GetSysClockFreq+0x34>
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d003      	beq.n	80080e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80080de:	e0db      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080e0:	4b73      	ldr	r3, [pc, #460]	; (80082b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80080e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80080e4:	e0db      	b.n	800829e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080e6:	4b73      	ldr	r3, [pc, #460]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80080e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080ea:	e0d8      	b.n	800829e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080ec:	4b6f      	ldr	r3, [pc, #444]	; (80082ac <HAL_RCC_GetSysClockFreq+0x200>)
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080f6:	4b6d      	ldr	r3, [pc, #436]	; (80082ac <HAL_RCC_GetSysClockFreq+0x200>)
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d063      	beq.n	80081ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008102:	4b6a      	ldr	r3, [pc, #424]	; (80082ac <HAL_RCC_GetSysClockFreq+0x200>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	099b      	lsrs	r3, r3, #6
 8008108:	2200      	movs	r2, #0
 800810a:	63bb      	str	r3, [r7, #56]	; 0x38
 800810c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800810e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008114:	633b      	str	r3, [r7, #48]	; 0x30
 8008116:	2300      	movs	r3, #0
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
 800811a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800811e:	4622      	mov	r2, r4
 8008120:	462b      	mov	r3, r5
 8008122:	f04f 0000 	mov.w	r0, #0
 8008126:	f04f 0100 	mov.w	r1, #0
 800812a:	0159      	lsls	r1, r3, #5
 800812c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008130:	0150      	lsls	r0, r2, #5
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	4621      	mov	r1, r4
 8008138:	1a51      	subs	r1, r2, r1
 800813a:	6139      	str	r1, [r7, #16]
 800813c:	4629      	mov	r1, r5
 800813e:	eb63 0301 	sbc.w	r3, r3, r1
 8008142:	617b      	str	r3, [r7, #20]
 8008144:	f04f 0200 	mov.w	r2, #0
 8008148:	f04f 0300 	mov.w	r3, #0
 800814c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008150:	4659      	mov	r1, fp
 8008152:	018b      	lsls	r3, r1, #6
 8008154:	4651      	mov	r1, sl
 8008156:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800815a:	4651      	mov	r1, sl
 800815c:	018a      	lsls	r2, r1, #6
 800815e:	4651      	mov	r1, sl
 8008160:	ebb2 0801 	subs.w	r8, r2, r1
 8008164:	4659      	mov	r1, fp
 8008166:	eb63 0901 	sbc.w	r9, r3, r1
 800816a:	f04f 0200 	mov.w	r2, #0
 800816e:	f04f 0300 	mov.w	r3, #0
 8008172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800817a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800817e:	4690      	mov	r8, r2
 8008180:	4699      	mov	r9, r3
 8008182:	4623      	mov	r3, r4
 8008184:	eb18 0303 	adds.w	r3, r8, r3
 8008188:	60bb      	str	r3, [r7, #8]
 800818a:	462b      	mov	r3, r5
 800818c:	eb49 0303 	adc.w	r3, r9, r3
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	f04f 0200 	mov.w	r2, #0
 8008196:	f04f 0300 	mov.w	r3, #0
 800819a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800819e:	4629      	mov	r1, r5
 80081a0:	024b      	lsls	r3, r1, #9
 80081a2:	4621      	mov	r1, r4
 80081a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80081a8:	4621      	mov	r1, r4
 80081aa:	024a      	lsls	r2, r1, #9
 80081ac:	4610      	mov	r0, r2
 80081ae:	4619      	mov	r1, r3
 80081b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b2:	2200      	movs	r2, #0
 80081b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80081b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081bc:	f7f8 fcac 	bl	8000b18 <__aeabi_uldivmod>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4613      	mov	r3, r2
 80081c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081c8:	e058      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081ca:	4b38      	ldr	r3, [pc, #224]	; (80082ac <HAL_RCC_GetSysClockFreq+0x200>)
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	099b      	lsrs	r3, r3, #6
 80081d0:	2200      	movs	r2, #0
 80081d2:	4618      	mov	r0, r3
 80081d4:	4611      	mov	r1, r2
 80081d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80081da:	623b      	str	r3, [r7, #32]
 80081dc:	2300      	movs	r3, #0
 80081de:	627b      	str	r3, [r7, #36]	; 0x24
 80081e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80081e4:	4642      	mov	r2, r8
 80081e6:	464b      	mov	r3, r9
 80081e8:	f04f 0000 	mov.w	r0, #0
 80081ec:	f04f 0100 	mov.w	r1, #0
 80081f0:	0159      	lsls	r1, r3, #5
 80081f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081f6:	0150      	lsls	r0, r2, #5
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4641      	mov	r1, r8
 80081fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8008202:	4649      	mov	r1, r9
 8008204:	eb63 0b01 	sbc.w	fp, r3, r1
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	f04f 0300 	mov.w	r3, #0
 8008210:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008214:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008218:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800821c:	ebb2 040a 	subs.w	r4, r2, sl
 8008220:	eb63 050b 	sbc.w	r5, r3, fp
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	f04f 0300 	mov.w	r3, #0
 800822c:	00eb      	lsls	r3, r5, #3
 800822e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008232:	00e2      	lsls	r2, r4, #3
 8008234:	4614      	mov	r4, r2
 8008236:	461d      	mov	r5, r3
 8008238:	4643      	mov	r3, r8
 800823a:	18e3      	adds	r3, r4, r3
 800823c:	603b      	str	r3, [r7, #0]
 800823e:	464b      	mov	r3, r9
 8008240:	eb45 0303 	adc.w	r3, r5, r3
 8008244:	607b      	str	r3, [r7, #4]
 8008246:	f04f 0200 	mov.w	r2, #0
 800824a:	f04f 0300 	mov.w	r3, #0
 800824e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008252:	4629      	mov	r1, r5
 8008254:	028b      	lsls	r3, r1, #10
 8008256:	4621      	mov	r1, r4
 8008258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800825c:	4621      	mov	r1, r4
 800825e:	028a      	lsls	r2, r1, #10
 8008260:	4610      	mov	r0, r2
 8008262:	4619      	mov	r1, r3
 8008264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008266:	2200      	movs	r2, #0
 8008268:	61bb      	str	r3, [r7, #24]
 800826a:	61fa      	str	r2, [r7, #28]
 800826c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008270:	f7f8 fc52 	bl	8000b18 <__aeabi_uldivmod>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4613      	mov	r3, r2
 800827a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800827c:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <HAL_RCC_GetSysClockFreq+0x200>)
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	0c1b      	lsrs	r3, r3, #16
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	3301      	adds	r3, #1
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800828c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800828e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008290:	fbb2 f3f3 	udiv	r3, r2, r3
 8008294:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008296:	e002      	b.n	800829e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008298:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800829a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800829c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800829e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3750      	adds	r7, #80	; 0x50
 80082a4:	46bd      	mov	sp, r7
 80082a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082aa:	bf00      	nop
 80082ac:	40023800 	.word	0x40023800
 80082b0:	00f42400 	.word	0x00f42400
 80082b4:	007a1200 	.word	0x007a1200

080082b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082b8:	b480      	push	{r7}
 80082ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082bc:	4b03      	ldr	r3, [pc, #12]	; (80082cc <HAL_RCC_GetHCLKFreq+0x14>)
 80082be:	681b      	ldr	r3, [r3, #0]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	20000024 	.word	0x20000024

080082d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80082d4:	f7ff fff0 	bl	80082b8 <HAL_RCC_GetHCLKFreq>
 80082d8:	4602      	mov	r2, r0
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	0a9b      	lsrs	r3, r3, #10
 80082e0:	f003 0307 	and.w	r3, r3, #7
 80082e4:	4903      	ldr	r1, [pc, #12]	; (80082f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082e6:	5ccb      	ldrb	r3, [r1, r3]
 80082e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	40023800 	.word	0x40023800
 80082f4:	0800bfd4 	.word	0x0800bfd4

080082f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80082fc:	f7ff ffdc 	bl	80082b8 <HAL_RCC_GetHCLKFreq>
 8008300:	4602      	mov	r2, r0
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	0b5b      	lsrs	r3, r3, #13
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	4903      	ldr	r1, [pc, #12]	; (800831c <HAL_RCC_GetPCLK2Freq+0x24>)
 800830e:	5ccb      	ldrb	r3, [r1, r3]
 8008310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008314:	4618      	mov	r0, r3
 8008316:	bd80      	pop	{r7, pc}
 8008318:	40023800 	.word	0x40023800
 800831c:	0800bfd4 	.word	0x0800bfd4

08008320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008328:	2300      	movs	r3, #0
 800832a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008344:	2b00      	cmp	r3, #0
 8008346:	d105      	bne.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008350:	2b00      	cmp	r3, #0
 8008352:	d075      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008354:	4b91      	ldr	r3, [pc, #580]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800835a:	f7fe f923 	bl	80065a4 <HAL_GetTick>
 800835e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008360:	e008      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008362:	f7fe f91f 	bl	80065a4 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b02      	cmp	r3, #2
 800836e:	d901      	bls.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e189      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008374:	4b8a      	ldr	r3, [pc, #552]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1f0      	bne.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d009      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	019a      	lsls	r2, r3, #6
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	071b      	lsls	r3, r3, #28
 8008398:	4981      	ldr	r1, [pc, #516]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800839a:	4313      	orrs	r3, r2
 800839c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01f      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083ac:	4b7c      	ldr	r3, [pc, #496]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b2:	0f1b      	lsrs	r3, r3, #28
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	019a      	lsls	r2, r3, #6
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	061b      	lsls	r3, r3, #24
 80083c6:	431a      	orrs	r2, r3
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	071b      	lsls	r3, r3, #28
 80083cc:	4974      	ldr	r1, [pc, #464]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80083d4:	4b72      	ldr	r3, [pc, #456]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083da:	f023 021f 	bic.w	r2, r3, #31
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	496e      	ldr	r1, [pc, #440]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00d      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	019a      	lsls	r2, r3, #6
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	061b      	lsls	r3, r3, #24
 8008404:	431a      	orrs	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	071b      	lsls	r3, r3, #28
 800840c:	4964      	ldr	r1, [pc, #400]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008414:	4b61      	ldr	r3, [pc, #388]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008416:	2201      	movs	r2, #1
 8008418:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800841a:	f7fe f8c3 	bl	80065a4 <HAL_GetTick>
 800841e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008420:	e008      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008422:	f7fe f8bf 	bl	80065a4 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	2b02      	cmp	r3, #2
 800842e:	d901      	bls.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e129      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008434:	4b5a      	ldr	r3, [pc, #360]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0f0      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d105      	bne.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008454:	2b00      	cmp	r3, #0
 8008456:	d079      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008458:	4b52      	ldr	r3, [pc, #328]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800845e:	f7fe f8a1 	bl	80065a4 <HAL_GetTick>
 8008462:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008464:	e008      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008466:	f7fe f89d 	bl	80065a4 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e107      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008478:	4b49      	ldr	r3, [pc, #292]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008484:	d0ef      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0304 	and.w	r3, r3, #4
 800848e:	2b00      	cmp	r3, #0
 8008490:	d020      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008492:	4b43      	ldr	r3, [pc, #268]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008498:	0f1b      	lsrs	r3, r3, #28
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	019a      	lsls	r2, r3, #6
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	061b      	lsls	r3, r3, #24
 80084ac:	431a      	orrs	r2, r3
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	071b      	lsls	r3, r3, #28
 80084b2:	493b      	ldr	r1, [pc, #236]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80084ba:	4b39      	ldr	r3, [pc, #228]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	021b      	lsls	r3, r3, #8
 80084cc:	4934      	ldr	r1, [pc, #208]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0308 	and.w	r3, r3, #8
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01e      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80084e0:	4b2f      	ldr	r3, [pc, #188]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e6:	0e1b      	lsrs	r3, r3, #24
 80084e8:	f003 030f 	and.w	r3, r3, #15
 80084ec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	019a      	lsls	r2, r3, #6
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	061b      	lsls	r3, r3, #24
 80084f8:	431a      	orrs	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	071b      	lsls	r3, r3, #28
 8008500:	4927      	ldr	r1, [pc, #156]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008502:	4313      	orrs	r3, r2
 8008504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008508:	4b25      	ldr	r3, [pc, #148]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800850a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800850e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	4922      	ldr	r1, [pc, #136]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008518:	4313      	orrs	r3, r2
 800851a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800851e:	4b21      	ldr	r3, [pc, #132]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008520:	2201      	movs	r2, #1
 8008522:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008524:	f7fe f83e 	bl	80065a4 <HAL_GetTick>
 8008528:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800852a:	e008      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800852c:	f7fe f83a 	bl	80065a4 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b02      	cmp	r3, #2
 8008538:	d901      	bls.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e0a4      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800853e:	4b18      	ldr	r3, [pc, #96]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800854a:	d1ef      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0320 	and.w	r3, r3, #32
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 808b 	beq.w	8008670 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800855a:	2300      	movs	r3, #0
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	4b10      	ldr	r3, [pc, #64]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	4a0f      	ldr	r2, [pc, #60]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008568:	6413      	str	r3, [r2, #64]	; 0x40
 800856a:	4b0d      	ldr	r3, [pc, #52]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008576:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a0b      	ldr	r2, [pc, #44]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800857c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008580:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008582:	f7fe f80f 	bl	80065a4 <HAL_GetTick>
 8008586:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008588:	e010      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800858a:	f7fe f80b 	bl	80065a4 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2b02      	cmp	r3, #2
 8008596:	d909      	bls.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e075      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800859c:	42470068 	.word	0x42470068
 80085a0:	40023800 	.word	0x40023800
 80085a4:	42470070 	.word	0x42470070
 80085a8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80085ac:	4b38      	ldr	r3, [pc, #224]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0e8      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085b8:	4b36      	ldr	r3, [pc, #216]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d02f      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d028      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085d6:	4b2f      	ldr	r3, [pc, #188]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085e0:	4b2d      	ldr	r3, [pc, #180]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80085e2:	2201      	movs	r2, #1
 80085e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085e6:	4b2c      	ldr	r3, [pc, #176]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80085ec:	4a29      	ldr	r2, [pc, #164]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085f2:	4b28      	ldr	r3, [pc, #160]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d114      	bne.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80085fe:	f7fd ffd1 	bl	80065a4 <HAL_GetTick>
 8008602:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008604:	e00a      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008606:	f7fd ffcd 	bl	80065a4 <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	f241 3288 	movw	r2, #5000	; 0x1388
 8008614:	4293      	cmp	r3, r2
 8008616:	d901      	bls.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e035      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800861c:	4b1d      	ldr	r3, [pc, #116]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800861e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b00      	cmp	r3, #0
 8008626:	d0ee      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008634:	d10d      	bne.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008636:	4b17      	ldr	r3, [pc, #92]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008642:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800864a:	4912      	ldr	r1, [pc, #72]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800864c:	4313      	orrs	r3, r2
 800864e:	608b      	str	r3, [r1, #8]
 8008650:	e005      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008652:	4b10      	ldr	r3, [pc, #64]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	4a0f      	ldr	r2, [pc, #60]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008658:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800865c:	6093      	str	r3, [r2, #8]
 800865e:	4b0d      	ldr	r3, [pc, #52]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008660:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800866a:	490a      	ldr	r1, [pc, #40]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800866c:	4313      	orrs	r3, r2
 800866e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0310 	and.w	r3, r3, #16
 8008678:	2b00      	cmp	r3, #0
 800867a:	d004      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008682:	4b06      	ldr	r3, [pc, #24]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008684:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40007000 	.word	0x40007000
 8008694:	40023800 	.word	0x40023800
 8008698:	42470e40 	.word	0x42470e40
 800869c:	424711e0 	.word	0x424711e0

080086a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e025      	b.n	8008700 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d106      	bne.n	80086ce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7fb fec1 	bl	8004450 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2202      	movs	r2, #2
 80086d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3304      	adds	r3, #4
 80086de:	4619      	mov	r1, r3
 80086e0:	4610      	mov	r0, r2
 80086e2:	f002 f829 	bl	800a738 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	f002 f87e 	bl	800a7f2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800871a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b02      	cmp	r3, #2
 8008720:	d101      	bne.n	8008726 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008722:	2302      	movs	r3, #2
 8008724:	e021      	b.n	800876a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d002      	beq.n	8008732 <HAL_SDRAM_SendCommand+0x2a>
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	2b05      	cmp	r3, #5
 8008730:	d118      	bne.n	8008764 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2202      	movs	r2, #2
 8008736:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	4618      	mov	r0, r3
 8008744:	f002 f8be 	bl	800a8c4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d104      	bne.n	800875a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2205      	movs	r2, #5
 8008754:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008758:	e006      	b.n	8008768 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008762:	e001      	b.n	8008768 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e000      	b.n	800876a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e07b      	b.n	800887c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	d108      	bne.n	800879e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008794:	d009      	beq.n	80087aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	61da      	str	r2, [r3, #28]
 800879c:	e005      	b.n	80087aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d106      	bne.n	80087ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7fb fcb1 	bl	800412c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2202      	movs	r2, #2
 80087ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80087f2:	431a      	orrs	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	431a      	orrs	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800881a:	431a      	orrs	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	69db      	ldr	r3, [r3, #28]
 8008820:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008824:	431a      	orrs	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882e:	ea42 0103 	orr.w	r1, r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008836:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	0c1b      	lsrs	r3, r3, #16
 8008848:	f003 0104 	and.w	r1, r3, #4
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	f003 0210 	and.w	r2, r3, #16
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	69da      	ldr	r2, [r3, #28]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800886a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e041      	b.n	800891a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d106      	bne.n	80088b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7fb fc86 	bl	80041bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3304      	adds	r3, #4
 80088c0:	4619      	mov	r1, r3
 80088c2:	4610      	mov	r0, r2
 80088c4:	f000 fc84 	bl	80091d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b01      	cmp	r3, #1
 8008936:	d001      	beq.n	800893c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e04e      	b.n	80089da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0201 	orr.w	r2, r2, #1
 8008952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a23      	ldr	r2, [pc, #140]	; (80089e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d022      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008966:	d01d      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1f      	ldr	r2, [pc, #124]	; (80089ec <HAL_TIM_Base_Start_IT+0xc8>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d018      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1e      	ldr	r2, [pc, #120]	; (80089f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d013      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a1c      	ldr	r2, [pc, #112]	; (80089f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00e      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a1b      	ldr	r2, [pc, #108]	; (80089f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d009      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a19      	ldr	r2, [pc, #100]	; (80089fc <HAL_TIM_Base_Start_IT+0xd8>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d004      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a18      	ldr	r2, [pc, #96]	; (8008a00 <HAL_TIM_Base_Start_IT+0xdc>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d111      	bne.n	80089c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f003 0307 	and.w	r3, r3, #7
 80089ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b06      	cmp	r3, #6
 80089b4:	d010      	beq.n	80089d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f042 0201 	orr.w	r2, r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c6:	e007      	b.n	80089d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0201 	orr.w	r2, r2, #1
 80089d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	40010000 	.word	0x40010000
 80089ec:	40000400 	.word	0x40000400
 80089f0:	40000800 	.word	0x40000800
 80089f4:	40000c00 	.word	0x40000c00
 80089f8:	40010400 	.word	0x40010400
 80089fc:	40014000 	.word	0x40014000
 8008a00:	40001800 	.word	0x40001800

08008a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e041      	b.n	8008a9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d106      	bne.n	8008a30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f839 	bl	8008aa2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	3304      	adds	r3, #4
 8008a40:	4619      	mov	r1, r3
 8008a42:	4610      	mov	r0, r2
 8008a44:	f000 fbc4 	bl	80091d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008aaa:	bf00      	nop
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
	...

08008ab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d109      	bne.n	8008adc <HAL_TIM_PWM_Start+0x24>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	bf14      	ite	ne
 8008ad4:	2301      	movne	r3, #1
 8008ad6:	2300      	moveq	r3, #0
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	e022      	b.n	8008b22 <HAL_TIM_PWM_Start+0x6a>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d109      	bne.n	8008af6 <HAL_TIM_PWM_Start+0x3e>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	bf14      	ite	ne
 8008aee:	2301      	movne	r3, #1
 8008af0:	2300      	moveq	r3, #0
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	e015      	b.n	8008b22 <HAL_TIM_PWM_Start+0x6a>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d109      	bne.n	8008b10 <HAL_TIM_PWM_Start+0x58>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	bf14      	ite	ne
 8008b08:	2301      	movne	r3, #1
 8008b0a:	2300      	moveq	r3, #0
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	e008      	b.n	8008b22 <HAL_TIM_PWM_Start+0x6a>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	bf14      	ite	ne
 8008b1c:	2301      	movne	r3, #1
 8008b1e:	2300      	moveq	r3, #0
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e07c      	b.n	8008c24 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d104      	bne.n	8008b3a <HAL_TIM_PWM_Start+0x82>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2202      	movs	r2, #2
 8008b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b38:	e013      	b.n	8008b62 <HAL_TIM_PWM_Start+0xaa>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	d104      	bne.n	8008b4a <HAL_TIM_PWM_Start+0x92>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2202      	movs	r2, #2
 8008b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b48:	e00b      	b.n	8008b62 <HAL_TIM_PWM_Start+0xaa>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b08      	cmp	r3, #8
 8008b4e:	d104      	bne.n	8008b5a <HAL_TIM_PWM_Start+0xa2>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b58:	e003      	b.n	8008b62 <HAL_TIM_PWM_Start+0xaa>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2201      	movs	r2, #1
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fe1a 	bl	80097a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a2d      	ldr	r2, [pc, #180]	; (8008c2c <HAL_TIM_PWM_Start+0x174>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <HAL_TIM_PWM_Start+0xcc>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a2c      	ldr	r2, [pc, #176]	; (8008c30 <HAL_TIM_PWM_Start+0x178>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d101      	bne.n	8008b88 <HAL_TIM_PWM_Start+0xd0>
 8008b84:	2301      	movs	r3, #1
 8008b86:	e000      	b.n	8008b8a <HAL_TIM_PWM_Start+0xd2>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d007      	beq.n	8008b9e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a22      	ldr	r2, [pc, #136]	; (8008c2c <HAL_TIM_PWM_Start+0x174>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d022      	beq.n	8008bee <HAL_TIM_PWM_Start+0x136>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb0:	d01d      	beq.n	8008bee <HAL_TIM_PWM_Start+0x136>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a1f      	ldr	r2, [pc, #124]	; (8008c34 <HAL_TIM_PWM_Start+0x17c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d018      	beq.n	8008bee <HAL_TIM_PWM_Start+0x136>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1d      	ldr	r2, [pc, #116]	; (8008c38 <HAL_TIM_PWM_Start+0x180>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d013      	beq.n	8008bee <HAL_TIM_PWM_Start+0x136>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a1c      	ldr	r2, [pc, #112]	; (8008c3c <HAL_TIM_PWM_Start+0x184>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d00e      	beq.n	8008bee <HAL_TIM_PWM_Start+0x136>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a16      	ldr	r2, [pc, #88]	; (8008c30 <HAL_TIM_PWM_Start+0x178>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d009      	beq.n	8008bee <HAL_TIM_PWM_Start+0x136>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a18      	ldr	r2, [pc, #96]	; (8008c40 <HAL_TIM_PWM_Start+0x188>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d004      	beq.n	8008bee <HAL_TIM_PWM_Start+0x136>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a16      	ldr	r2, [pc, #88]	; (8008c44 <HAL_TIM_PWM_Start+0x18c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d111      	bne.n	8008c12 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f003 0307 	and.w	r3, r3, #7
 8008bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b06      	cmp	r3, #6
 8008bfe:	d010      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 0201 	orr.w	r2, r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c10:	e007      	b.n	8008c22 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f042 0201 	orr.w	r2, r2, #1
 8008c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	40010000 	.word	0x40010000
 8008c30:	40010400 	.word	0x40010400
 8008c34:	40000400 	.word	0x40000400
 8008c38:	40000800 	.word	0x40000800
 8008c3c:	40000c00 	.word	0x40000c00
 8008c40:	40014000 	.word	0x40014000
 8008c44:	40001800 	.word	0x40001800

08008c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d122      	bne.n	8008ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d11b      	bne.n	8008ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f06f 0202 	mvn.w	r2, #2
 8008c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa81 	bl	8009192 <HAL_TIM_IC_CaptureCallback>
 8008c90:	e005      	b.n	8008c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa73 	bl	800917e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa84 	bl	80091a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	f003 0304 	and.w	r3, r3, #4
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d122      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d11b      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f06f 0204 	mvn.w	r2, #4
 8008cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa57 	bl	8009192 <HAL_TIM_IC_CaptureCallback>
 8008ce4:	e005      	b.n	8008cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa49 	bl	800917e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fa5a 	bl	80091a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b08      	cmp	r3, #8
 8008d04:	d122      	bne.n	8008d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	d11b      	bne.n	8008d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f06f 0208 	mvn.w	r2, #8
 8008d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2204      	movs	r2, #4
 8008d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa2d 	bl	8009192 <HAL_TIM_IC_CaptureCallback>
 8008d38:	e005      	b.n	8008d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa1f 	bl	800917e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fa30 	bl	80091a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f003 0310 	and.w	r3, r3, #16
 8008d56:	2b10      	cmp	r3, #16
 8008d58:	d122      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b10      	cmp	r3, #16
 8008d66:	d11b      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f06f 0210 	mvn.w	r2, #16
 8008d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2208      	movs	r2, #8
 8008d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fa03 	bl	8009192 <HAL_TIM_IC_CaptureCallback>
 8008d8c:	e005      	b.n	8008d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f9f5 	bl	800917e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fa06 	bl	80091a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d10e      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d107      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f06f 0201 	mvn.w	r2, #1
 8008dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f9cf 	bl	800916a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd6:	2b80      	cmp	r3, #128	; 0x80
 8008dd8:	d10e      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de4:	2b80      	cmp	r3, #128	; 0x80
 8008de6:	d107      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fd82 	bl	80098fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e02:	2b40      	cmp	r3, #64	; 0x40
 8008e04:	d10e      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e10:	2b40      	cmp	r3, #64	; 0x40
 8008e12:	d107      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f9cb 	bl	80091ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f003 0320 	and.w	r3, r3, #32
 8008e2e:	2b20      	cmp	r3, #32
 8008e30:	d10e      	bne.n	8008e50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f003 0320 	and.w	r3, r3, #32
 8008e3c:	2b20      	cmp	r3, #32
 8008e3e:	d107      	bne.n	8008e50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0220 	mvn.w	r2, #32
 8008e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fd4c 	bl	80098e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e0ae      	b.n	8008fd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b0c      	cmp	r3, #12
 8008e82:	f200 809f 	bhi.w	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008e86:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8c:	08008ec1 	.word	0x08008ec1
 8008e90:	08008fc5 	.word	0x08008fc5
 8008e94:	08008fc5 	.word	0x08008fc5
 8008e98:	08008fc5 	.word	0x08008fc5
 8008e9c:	08008f01 	.word	0x08008f01
 8008ea0:	08008fc5 	.word	0x08008fc5
 8008ea4:	08008fc5 	.word	0x08008fc5
 8008ea8:	08008fc5 	.word	0x08008fc5
 8008eac:	08008f43 	.word	0x08008f43
 8008eb0:	08008fc5 	.word	0x08008fc5
 8008eb4:	08008fc5 	.word	0x08008fc5
 8008eb8:	08008fc5 	.word	0x08008fc5
 8008ebc:	08008f83 	.word	0x08008f83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68b9      	ldr	r1, [r7, #8]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 fa22 	bl	8009310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f042 0208 	orr.w	r2, r2, #8
 8008eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699a      	ldr	r2, [r3, #24]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f022 0204 	bic.w	r2, r2, #4
 8008eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6999      	ldr	r1, [r3, #24]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	691a      	ldr	r2, [r3, #16]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	619a      	str	r2, [r3, #24]
      break;
 8008efe:	e064      	b.n	8008fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68b9      	ldr	r1, [r7, #8]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 fa72 	bl	80093f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	699a      	ldr	r2, [r3, #24]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	699a      	ldr	r2, [r3, #24]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6999      	ldr	r1, [r3, #24]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	021a      	lsls	r2, r3, #8
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	619a      	str	r2, [r3, #24]
      break;
 8008f40:	e043      	b.n	8008fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68b9      	ldr	r1, [r7, #8]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fac7 	bl	80094dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f042 0208 	orr.w	r2, r2, #8
 8008f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69da      	ldr	r2, [r3, #28]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 0204 	bic.w	r2, r2, #4
 8008f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	69d9      	ldr	r1, [r3, #28]
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	691a      	ldr	r2, [r3, #16]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	61da      	str	r2, [r3, #28]
      break;
 8008f80:	e023      	b.n	8008fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68b9      	ldr	r1, [r7, #8]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 fb1b 	bl	80095c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	69da      	ldr	r2, [r3, #28]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69da      	ldr	r2, [r3, #28]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69d9      	ldr	r1, [r3, #28]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	021a      	lsls	r2, r3, #8
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	61da      	str	r2, [r3, #28]
      break;
 8008fc2:	e002      	b.n	8008fca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e0b4      	b.n	8009162 <HAL_TIM_ConfigClockSource+0x186>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800901e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009030:	d03e      	beq.n	80090b0 <HAL_TIM_ConfigClockSource+0xd4>
 8009032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009036:	f200 8087 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x16c>
 800903a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800903e:	f000 8086 	beq.w	800914e <HAL_TIM_ConfigClockSource+0x172>
 8009042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009046:	d87f      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x16c>
 8009048:	2b70      	cmp	r3, #112	; 0x70
 800904a:	d01a      	beq.n	8009082 <HAL_TIM_ConfigClockSource+0xa6>
 800904c:	2b70      	cmp	r3, #112	; 0x70
 800904e:	d87b      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x16c>
 8009050:	2b60      	cmp	r3, #96	; 0x60
 8009052:	d050      	beq.n	80090f6 <HAL_TIM_ConfigClockSource+0x11a>
 8009054:	2b60      	cmp	r3, #96	; 0x60
 8009056:	d877      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x16c>
 8009058:	2b50      	cmp	r3, #80	; 0x50
 800905a:	d03c      	beq.n	80090d6 <HAL_TIM_ConfigClockSource+0xfa>
 800905c:	2b50      	cmp	r3, #80	; 0x50
 800905e:	d873      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x16c>
 8009060:	2b40      	cmp	r3, #64	; 0x40
 8009062:	d058      	beq.n	8009116 <HAL_TIM_ConfigClockSource+0x13a>
 8009064:	2b40      	cmp	r3, #64	; 0x40
 8009066:	d86f      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x16c>
 8009068:	2b30      	cmp	r3, #48	; 0x30
 800906a:	d064      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x15a>
 800906c:	2b30      	cmp	r3, #48	; 0x30
 800906e:	d86b      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x16c>
 8009070:	2b20      	cmp	r3, #32
 8009072:	d060      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x15a>
 8009074:	2b20      	cmp	r3, #32
 8009076:	d867      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x16c>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d05c      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x15a>
 800907c:	2b10      	cmp	r3, #16
 800907e:	d05a      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x15a>
 8009080:	e062      	b.n	8009148 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6818      	ldr	r0, [r3, #0]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	6899      	ldr	r1, [r3, #8]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f000 fb67 	bl	8009764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	609a      	str	r2, [r3, #8]
      break;
 80090ae:	e04f      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	6899      	ldr	r1, [r3, #8]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f000 fb50 	bl	8009764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090d2:	609a      	str	r2, [r3, #8]
      break;
 80090d4:	e03c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	6859      	ldr	r1, [r3, #4]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f000 fac4 	bl	8009670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2150      	movs	r1, #80	; 0x50
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fb1d 	bl	800972e <TIM_ITRx_SetConfig>
      break;
 80090f4:	e02c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6818      	ldr	r0, [r3, #0]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	6859      	ldr	r1, [r3, #4]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	461a      	mov	r2, r3
 8009104:	f000 fae3 	bl	80096ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2160      	movs	r1, #96	; 0x60
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fb0d 	bl	800972e <TIM_ITRx_SetConfig>
      break;
 8009114:	e01c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6859      	ldr	r1, [r3, #4]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	461a      	mov	r2, r3
 8009124:	f000 faa4 	bl	8009670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2140      	movs	r1, #64	; 0x40
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fafd 	bl	800972e <TIM_ITRx_SetConfig>
      break;
 8009134:	e00c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f000 faf4 	bl	800972e <TIM_ITRx_SetConfig>
      break;
 8009146:	e003      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	73fb      	strb	r3, [r7, #15]
      break;
 800914c:	e000      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800914e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009172:	bf00      	nop
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800919a:	bf00      	nop
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091ae:	bf00      	nop
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a40      	ldr	r2, [pc, #256]	; (80092e4 <TIM_Base_SetConfig+0x114>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d013      	beq.n	8009210 <TIM_Base_SetConfig+0x40>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ee:	d00f      	beq.n	8009210 <TIM_Base_SetConfig+0x40>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a3d      	ldr	r2, [pc, #244]	; (80092e8 <TIM_Base_SetConfig+0x118>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00b      	beq.n	8009210 <TIM_Base_SetConfig+0x40>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a3c      	ldr	r2, [pc, #240]	; (80092ec <TIM_Base_SetConfig+0x11c>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d007      	beq.n	8009210 <TIM_Base_SetConfig+0x40>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a3b      	ldr	r2, [pc, #236]	; (80092f0 <TIM_Base_SetConfig+0x120>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d003      	beq.n	8009210 <TIM_Base_SetConfig+0x40>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a3a      	ldr	r2, [pc, #232]	; (80092f4 <TIM_Base_SetConfig+0x124>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d108      	bne.n	8009222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a2f      	ldr	r2, [pc, #188]	; (80092e4 <TIM_Base_SetConfig+0x114>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d02b      	beq.n	8009282 <TIM_Base_SetConfig+0xb2>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009230:	d027      	beq.n	8009282 <TIM_Base_SetConfig+0xb2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a2c      	ldr	r2, [pc, #176]	; (80092e8 <TIM_Base_SetConfig+0x118>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d023      	beq.n	8009282 <TIM_Base_SetConfig+0xb2>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a2b      	ldr	r2, [pc, #172]	; (80092ec <TIM_Base_SetConfig+0x11c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d01f      	beq.n	8009282 <TIM_Base_SetConfig+0xb2>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a2a      	ldr	r2, [pc, #168]	; (80092f0 <TIM_Base_SetConfig+0x120>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d01b      	beq.n	8009282 <TIM_Base_SetConfig+0xb2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a29      	ldr	r2, [pc, #164]	; (80092f4 <TIM_Base_SetConfig+0x124>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d017      	beq.n	8009282 <TIM_Base_SetConfig+0xb2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a28      	ldr	r2, [pc, #160]	; (80092f8 <TIM_Base_SetConfig+0x128>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d013      	beq.n	8009282 <TIM_Base_SetConfig+0xb2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a27      	ldr	r2, [pc, #156]	; (80092fc <TIM_Base_SetConfig+0x12c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d00f      	beq.n	8009282 <TIM_Base_SetConfig+0xb2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a26      	ldr	r2, [pc, #152]	; (8009300 <TIM_Base_SetConfig+0x130>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d00b      	beq.n	8009282 <TIM_Base_SetConfig+0xb2>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a25      	ldr	r2, [pc, #148]	; (8009304 <TIM_Base_SetConfig+0x134>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d007      	beq.n	8009282 <TIM_Base_SetConfig+0xb2>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a24      	ldr	r2, [pc, #144]	; (8009308 <TIM_Base_SetConfig+0x138>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d003      	beq.n	8009282 <TIM_Base_SetConfig+0xb2>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a23      	ldr	r2, [pc, #140]	; (800930c <TIM_Base_SetConfig+0x13c>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d108      	bne.n	8009294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	4313      	orrs	r3, r2
 8009292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	4313      	orrs	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	689a      	ldr	r2, [r3, #8]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a0a      	ldr	r2, [pc, #40]	; (80092e4 <TIM_Base_SetConfig+0x114>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d003      	beq.n	80092c8 <TIM_Base_SetConfig+0xf8>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a0c      	ldr	r2, [pc, #48]	; (80092f4 <TIM_Base_SetConfig+0x124>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d103      	bne.n	80092d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	691a      	ldr	r2, [r3, #16]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	615a      	str	r2, [r3, #20]
}
 80092d6:	bf00      	nop
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	40010000 	.word	0x40010000
 80092e8:	40000400 	.word	0x40000400
 80092ec:	40000800 	.word	0x40000800
 80092f0:	40000c00 	.word	0x40000c00
 80092f4:	40010400 	.word	0x40010400
 80092f8:	40014000 	.word	0x40014000
 80092fc:	40014400 	.word	0x40014400
 8009300:	40014800 	.word	0x40014800
 8009304:	40001800 	.word	0x40001800
 8009308:	40001c00 	.word	0x40001c00
 800930c:	40002000 	.word	0x40002000

08009310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	f023 0201 	bic.w	r2, r3, #1
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800933e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f023 0303 	bic.w	r3, r3, #3
 8009346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4313      	orrs	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f023 0302 	bic.w	r3, r3, #2
 8009358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	4313      	orrs	r3, r2
 8009362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a20      	ldr	r2, [pc, #128]	; (80093e8 <TIM_OC1_SetConfig+0xd8>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d003      	beq.n	8009374 <TIM_OC1_SetConfig+0x64>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a1f      	ldr	r2, [pc, #124]	; (80093ec <TIM_OC1_SetConfig+0xdc>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d10c      	bne.n	800938e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f023 0308 	bic.w	r3, r3, #8
 800937a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4313      	orrs	r3, r2
 8009384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f023 0304 	bic.w	r3, r3, #4
 800938c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a15      	ldr	r2, [pc, #84]	; (80093e8 <TIM_OC1_SetConfig+0xd8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d003      	beq.n	800939e <TIM_OC1_SetConfig+0x8e>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a14      	ldr	r2, [pc, #80]	; (80093ec <TIM_OC1_SetConfig+0xdc>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d111      	bne.n	80093c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	697a      	ldr	r2, [r7, #20]
 80093da:	621a      	str	r2, [r3, #32]
}
 80093dc:	bf00      	nop
 80093de:	371c      	adds	r7, #28
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	40010000 	.word	0x40010000
 80093ec:	40010400 	.word	0x40010400

080093f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b087      	sub	sp, #28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	f023 0210 	bic.w	r2, r3, #16
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800941e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	021b      	lsls	r3, r3, #8
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	4313      	orrs	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	f023 0320 	bic.w	r3, r3, #32
 800943a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	011b      	lsls	r3, r3, #4
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	4313      	orrs	r3, r2
 8009446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a22      	ldr	r2, [pc, #136]	; (80094d4 <TIM_OC2_SetConfig+0xe4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d003      	beq.n	8009458 <TIM_OC2_SetConfig+0x68>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a21      	ldr	r2, [pc, #132]	; (80094d8 <TIM_OC2_SetConfig+0xe8>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d10d      	bne.n	8009474 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800945e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	4313      	orrs	r3, r2
 800946a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a17      	ldr	r2, [pc, #92]	; (80094d4 <TIM_OC2_SetConfig+0xe4>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d003      	beq.n	8009484 <TIM_OC2_SetConfig+0x94>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a16      	ldr	r2, [pc, #88]	; (80094d8 <TIM_OC2_SetConfig+0xe8>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d113      	bne.n	80094ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800948a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	4313      	orrs	r3, r2
 800949e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	621a      	str	r2, [r3, #32]
}
 80094c6:	bf00      	nop
 80094c8:	371c      	adds	r7, #28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	40010000 	.word	0x40010000
 80094d8:	40010400 	.word	0x40010400

080094dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800950a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0303 	bic.w	r3, r3, #3
 8009512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	021b      	lsls	r3, r3, #8
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	4313      	orrs	r3, r2
 8009530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a21      	ldr	r2, [pc, #132]	; (80095bc <TIM_OC3_SetConfig+0xe0>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d003      	beq.n	8009542 <TIM_OC3_SetConfig+0x66>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a20      	ldr	r2, [pc, #128]	; (80095c0 <TIM_OC3_SetConfig+0xe4>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d10d      	bne.n	800955e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	021b      	lsls	r3, r3, #8
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	4313      	orrs	r3, r2
 8009554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800955c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a16      	ldr	r2, [pc, #88]	; (80095bc <TIM_OC3_SetConfig+0xe0>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d003      	beq.n	800956e <TIM_OC3_SetConfig+0x92>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a15      	ldr	r2, [pc, #84]	; (80095c0 <TIM_OC3_SetConfig+0xe4>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d113      	bne.n	8009596 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800957c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	011b      	lsls	r3, r3, #4
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	4313      	orrs	r3, r2
 8009588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	4313      	orrs	r3, r2
 8009594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	621a      	str	r2, [r3, #32]
}
 80095b0:	bf00      	nop
 80095b2:	371c      	adds	r7, #28
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	40010000 	.word	0x40010000
 80095c0:	40010400 	.word	0x40010400

080095c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	021b      	lsls	r3, r3, #8
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	4313      	orrs	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800960e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	031b      	lsls	r3, r3, #12
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	4313      	orrs	r3, r2
 800961a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a12      	ldr	r2, [pc, #72]	; (8009668 <TIM_OC4_SetConfig+0xa4>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d003      	beq.n	800962c <TIM_OC4_SetConfig+0x68>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a11      	ldr	r2, [pc, #68]	; (800966c <TIM_OC4_SetConfig+0xa8>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d109      	bne.n	8009640 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	019b      	lsls	r3, r3, #6
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	4313      	orrs	r3, r2
 800963e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	621a      	str	r2, [r3, #32]
}
 800965a:	bf00      	nop
 800965c:	371c      	adds	r7, #28
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	40010000 	.word	0x40010000
 800966c:	40010400 	.word	0x40010400

08009670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	f023 0201 	bic.w	r2, r3, #1
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800969a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	011b      	lsls	r3, r3, #4
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f023 030a 	bic.w	r3, r3, #10
 80096ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	621a      	str	r2, [r3, #32]
}
 80096c2:	bf00      	nop
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b087      	sub	sp, #28
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	f023 0210 	bic.w	r2, r3, #16
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	031b      	lsls	r3, r3, #12
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	4313      	orrs	r3, r2
 8009702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800970a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	011b      	lsls	r3, r3, #4
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	4313      	orrs	r3, r2
 8009714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	621a      	str	r2, [r3, #32]
}
 8009722:	bf00      	nop
 8009724:	371c      	adds	r7, #28
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800972e:	b480      	push	{r7}
 8009730:	b085      	sub	sp, #20
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	f043 0307 	orr.w	r3, r3, #7
 8009750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	609a      	str	r2, [r3, #8]
}
 8009758:	bf00      	nop
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
 8009770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800977e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	021a      	lsls	r2, r3, #8
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	431a      	orrs	r2, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4313      	orrs	r3, r2
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	4313      	orrs	r3, r2
 8009790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	609a      	str	r2, [r3, #8]
}
 8009798:	bf00      	nop
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f003 031f 	and.w	r3, r3, #31
 80097b6:	2201      	movs	r2, #1
 80097b8:	fa02 f303 	lsl.w	r3, r2, r3
 80097bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6a1a      	ldr	r2, [r3, #32]
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	43db      	mvns	r3, r3
 80097c6:	401a      	ands	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6a1a      	ldr	r2, [r3, #32]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	f003 031f 	and.w	r3, r3, #31
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	fa01 f303 	lsl.w	r3, r1, r3
 80097dc:	431a      	orrs	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	621a      	str	r2, [r3, #32]
}
 80097e2:	bf00      	nop
 80097e4:	371c      	adds	r7, #28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
	...

080097f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009800:	2b01      	cmp	r3, #1
 8009802:	d101      	bne.n	8009808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009804:	2302      	movs	r3, #2
 8009806:	e05a      	b.n	80098be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2202      	movs	r2, #2
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a21      	ldr	r2, [pc, #132]	; (80098cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d022      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009854:	d01d      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a1d      	ldr	r2, [pc, #116]	; (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d018      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a1b      	ldr	r2, [pc, #108]	; (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d013      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a1a      	ldr	r2, [pc, #104]	; (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00e      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a18      	ldr	r2, [pc, #96]	; (80098dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d009      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a17      	ldr	r2, [pc, #92]	; (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d004      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a15      	ldr	r2, [pc, #84]	; (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d10c      	bne.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	40010000 	.word	0x40010000
 80098d0:	40000400 	.word	0x40000400
 80098d4:	40000800 	.word	0x40000800
 80098d8:	40000c00 	.word	0x40000c00
 80098dc:	40010400 	.word	0x40010400
 80098e0:	40014000 	.word	0x40014000
 80098e4:	40001800 	.word	0x40001800

080098e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e03f      	b.n	80099a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d106      	bne.n	800993c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7fa fcb8 	bl	80042ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2224      	movs	r2, #36	; 0x24
 8009940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fc7b 	bl	800a250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	691a      	ldr	r2, [r3, #16]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	695a      	ldr	r2, [r3, #20]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68da      	ldr	r2, [r3, #12]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2220      	movs	r2, #32
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2220      	movs	r2, #32
 800999c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b0ba      	sub	sp, #232	; 0xe8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80099d8:	2300      	movs	r3, #0
 80099da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80099de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e2:	f003 030f 	and.w	r3, r3, #15
 80099e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80099ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10f      	bne.n	8009a12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099f6:	f003 0320 	and.w	r3, r3, #32
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d009      	beq.n	8009a12 <HAL_UART_IRQHandler+0x66>
 80099fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a02:	f003 0320 	and.w	r3, r3, #32
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fb65 	bl	800a0da <UART_Receive_IT>
      return;
 8009a10:	e256      	b.n	8009ec0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 80de 	beq.w	8009bd8 <HAL_UART_IRQHandler+0x22c>
 8009a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d106      	bne.n	8009a36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 80d1 	beq.w	8009bd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00b      	beq.n	8009a5a <HAL_UART_IRQHandler+0xae>
 8009a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a52:	f043 0201 	orr.w	r2, r3, #1
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a5e:	f003 0304 	and.w	r3, r3, #4
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00b      	beq.n	8009a7e <HAL_UART_IRQHandler+0xd2>
 8009a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d005      	beq.n	8009a7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a76:	f043 0202 	orr.w	r2, r3, #2
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a82:	f003 0302 	and.w	r3, r3, #2
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00b      	beq.n	8009aa2 <HAL_UART_IRQHandler+0xf6>
 8009a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9a:	f043 0204 	orr.w	r2, r3, #4
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa6:	f003 0308 	and.w	r3, r3, #8
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d011      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x126>
 8009aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ab2:	f003 0320 	and.w	r3, r3, #32
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d105      	bne.n	8009ac6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d005      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aca:	f043 0208 	orr.w	r2, r3, #8
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f000 81ed 	beq.w	8009eb6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d008      	beq.n	8009afa <HAL_UART_IRQHandler+0x14e>
 8009ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aec:	f003 0320 	and.w	r3, r3, #32
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 faf0 	bl	800a0da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b04:	2b40      	cmp	r3, #64	; 0x40
 8009b06:	bf0c      	ite	eq
 8009b08:	2301      	moveq	r3, #1
 8009b0a:	2300      	movne	r3, #0
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	f003 0308 	and.w	r3, r3, #8
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d103      	bne.n	8009b26 <HAL_UART_IRQHandler+0x17a>
 8009b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d04f      	beq.n	8009bc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f9f8 	bl	8009f1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b36:	2b40      	cmp	r3, #64	; 0x40
 8009b38:	d141      	bne.n	8009bbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3314      	adds	r3, #20
 8009b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3314      	adds	r3, #20
 8009b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1d9      	bne.n	8009b3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d013      	beq.n	8009bb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b92:	4a7d      	ldr	r2, [pc, #500]	; (8009d88 <HAL_UART_IRQHandler+0x3dc>)
 8009b94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fc feb3 	bl	8006906 <HAL_DMA_Abort_IT>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d016      	beq.n	8009bd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb4:	e00e      	b.n	8009bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f99a 	bl	8009ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bbc:	e00a      	b.n	8009bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f996 	bl	8009ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc4:	e006      	b.n	8009bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f992 	bl	8009ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009bd2:	e170      	b.n	8009eb6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd4:	bf00      	nop
    return;
 8009bd6:	e16e      	b.n	8009eb6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	f040 814a 	bne.w	8009e76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be6:	f003 0310 	and.w	r3, r3, #16
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 8143 	beq.w	8009e76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bf4:	f003 0310 	and.w	r3, r3, #16
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 813c 	beq.w	8009e76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60bb      	str	r3, [r7, #8]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	60bb      	str	r3, [r7, #8]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	60bb      	str	r3, [r7, #8]
 8009c12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1e:	2b40      	cmp	r3, #64	; 0x40
 8009c20:	f040 80b4 	bne.w	8009d8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 8140 	beq.w	8009eba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c42:	429a      	cmp	r2, r3
 8009c44:	f080 8139 	bcs.w	8009eba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c54:	69db      	ldr	r3, [r3, #28]
 8009c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5a:	f000 8088 	beq.w	8009d6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	330c      	adds	r3, #12
 8009c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	330c      	adds	r3, #12
 8009c86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009c8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c9a:	e841 2300 	strex	r3, r2, [r1]
 8009c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1d9      	bne.n	8009c5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3314      	adds	r3, #20
 8009cb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cb4:	e853 3f00 	ldrex	r3, [r3]
 8009cb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cbc:	f023 0301 	bic.w	r3, r3, #1
 8009cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3314      	adds	r3, #20
 8009cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009cce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e1      	bne.n	8009caa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3314      	adds	r3, #20
 8009cec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cf0:	e853 3f00 	ldrex	r3, [r3]
 8009cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3314      	adds	r3, #20
 8009d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d12:	e841 2300 	strex	r3, r2, [r1]
 8009d16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e3      	bne.n	8009ce6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	330c      	adds	r3, #12
 8009d32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d3e:	f023 0310 	bic.w	r3, r3, #16
 8009d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	330c      	adds	r3, #12
 8009d4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009d50:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d58:	e841 2300 	strex	r3, r2, [r1]
 8009d5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1e3      	bne.n	8009d2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fc fd5c 	bl	8006826 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f8c0 	bl	8009f04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d84:	e099      	b.n	8009eba <HAL_UART_IRQHandler+0x50e>
 8009d86:	bf00      	nop
 8009d88:	08009fe3 	.word	0x08009fe3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 808b 	beq.w	8009ebe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 8086 	beq.w	8009ebe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	330c      	adds	r3, #12
 8009db8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	330c      	adds	r3, #12
 8009dd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009dd6:	647a      	str	r2, [r7, #68]	; 0x44
 8009dd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e3      	bne.n	8009db2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3314      	adds	r3, #20
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	623b      	str	r3, [r7, #32]
   return(result);
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	f023 0301 	bic.w	r3, r3, #1
 8009e00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3314      	adds	r3, #20
 8009e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e0e:	633a      	str	r2, [r7, #48]	; 0x30
 8009e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e3      	bne.n	8009dea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	330c      	adds	r3, #12
 8009e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f023 0310 	bic.w	r3, r3, #16
 8009e46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	330c      	adds	r3, #12
 8009e50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009e54:	61fa      	str	r2, [r7, #28]
 8009e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e58:	69b9      	ldr	r1, [r7, #24]
 8009e5a:	69fa      	ldr	r2, [r7, #28]
 8009e5c:	e841 2300 	strex	r3, r2, [r1]
 8009e60:	617b      	str	r3, [r7, #20]
   return(result);
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1e3      	bne.n	8009e30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f848 	bl	8009f04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e74:	e023      	b.n	8009ebe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d009      	beq.n	8009e96 <HAL_UART_IRQHandler+0x4ea>
 8009e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f8bb 	bl	800a00a <UART_Transmit_IT>
    return;
 8009e94:	e014      	b.n	8009ec0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00e      	beq.n	8009ec0 <HAL_UART_IRQHandler+0x514>
 8009ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d008      	beq.n	8009ec0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f8fb 	bl	800a0aa <UART_EndTransmit_IT>
    return;
 8009eb4:	e004      	b.n	8009ec0 <HAL_UART_IRQHandler+0x514>
    return;
 8009eb6:	bf00      	nop
 8009eb8:	e002      	b.n	8009ec0 <HAL_UART_IRQHandler+0x514>
      return;
 8009eba:	bf00      	nop
 8009ebc:	e000      	b.n	8009ec0 <HAL_UART_IRQHandler+0x514>
      return;
 8009ebe:	bf00      	nop
  }
}
 8009ec0:	37e8      	adds	r7, #232	; 0xe8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop

08009ec8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b095      	sub	sp, #84	; 0x54
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	330c      	adds	r3, #12
 8009f2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2e:	e853 3f00 	ldrex	r3, [r3]
 8009f32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	330c      	adds	r3, #12
 8009f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f44:	643a      	str	r2, [r7, #64]	; 0x40
 8009f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f4c:	e841 2300 	strex	r3, r2, [r1]
 8009f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1e5      	bne.n	8009f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3314      	adds	r3, #20
 8009f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	f023 0301 	bic.w	r3, r3, #1
 8009f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	3314      	adds	r3, #20
 8009f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f80:	e841 2300 	strex	r3, r2, [r1]
 8009f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e5      	bne.n	8009f58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d119      	bne.n	8009fc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	330c      	adds	r3, #12
 8009f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	e853 3f00 	ldrex	r3, [r3]
 8009fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f023 0310 	bic.w	r3, r3, #16
 8009faa:	647b      	str	r3, [r7, #68]	; 0x44
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	330c      	adds	r3, #12
 8009fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fb4:	61ba      	str	r2, [r7, #24]
 8009fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb8:	6979      	ldr	r1, [r7, #20]
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	e841 2300 	strex	r3, r2, [r1]
 8009fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1e5      	bne.n	8009f94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2220      	movs	r2, #32
 8009fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009fd6:	bf00      	nop
 8009fd8:	3754      	adds	r7, #84	; 0x54
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f7ff ff77 	bl	8009ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a002:	bf00      	nop
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b21      	cmp	r3, #33	; 0x21
 800a01c:	d13e      	bne.n	800a09c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a026:	d114      	bne.n	800a052 <UART_Transmit_IT+0x48>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d110      	bne.n	800a052 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	461a      	mov	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a044:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	1c9a      	adds	r2, r3, #2
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	621a      	str	r2, [r3, #32]
 800a050:	e008      	b.n	800a064 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	1c59      	adds	r1, r3, #1
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	6211      	str	r1, [r2, #32]
 800a05c:	781a      	ldrb	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a068:	b29b      	uxth	r3, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	4619      	mov	r1, r3
 800a072:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10f      	bne.n	800a098 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68da      	ldr	r2, [r3, #12]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a086:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68da      	ldr	r2, [r3, #12]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a096:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	e000      	b.n	800a09e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a09c:	2302      	movs	r3, #2
  }
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68da      	ldr	r2, [r3, #12]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff fefc 	bl	8009ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b08c      	sub	sp, #48	; 0x30
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b22      	cmp	r3, #34	; 0x22
 800a0ec:	f040 80ab 	bne.w	800a246 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0f8:	d117      	bne.n	800a12a <UART_Receive_IT+0x50>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d113      	bne.n	800a12a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a102:	2300      	movs	r3, #0
 800a104:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	b29b      	uxth	r3, r3
 800a114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a118:	b29a      	uxth	r2, r3
 800a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a122:	1c9a      	adds	r2, r3, #2
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	629a      	str	r2, [r3, #40]	; 0x28
 800a128:	e026      	b.n	800a178 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a130:	2300      	movs	r3, #0
 800a132:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a13c:	d007      	beq.n	800a14e <UART_Receive_IT+0x74>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10a      	bne.n	800a15c <UART_Receive_IT+0x82>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d106      	bne.n	800a15c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	b2da      	uxtb	r2, r3
 800a156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a158:	701a      	strb	r2, [r3, #0]
 800a15a:	e008      	b.n	800a16e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	b2db      	uxtb	r3, r3
 800a164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	3b01      	subs	r3, #1
 800a180:	b29b      	uxth	r3, r3
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	4619      	mov	r1, r3
 800a186:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d15a      	bne.n	800a242 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f022 0220 	bic.w	r2, r2, #32
 800a19a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68da      	ldr	r2, [r3, #12]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	695a      	ldr	r2, [r3, #20]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f022 0201 	bic.w	r2, r2, #1
 800a1ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d135      	bne.n	800a238 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	330c      	adds	r3, #12
 800a1d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	e853 3f00 	ldrex	r3, [r3]
 800a1e0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f023 0310 	bic.w	r3, r3, #16
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	330c      	adds	r3, #12
 800a1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f2:	623a      	str	r2, [r7, #32]
 800a1f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f6:	69f9      	ldr	r1, [r7, #28]
 800a1f8:	6a3a      	ldr	r2, [r7, #32]
 800a1fa:	e841 2300 	strex	r3, r2, [r1]
 800a1fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e5      	bne.n	800a1d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0310 	and.w	r3, r3, #16
 800a210:	2b10      	cmp	r3, #16
 800a212:	d10a      	bne.n	800a22a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a214:	2300      	movs	r3, #0
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff fe67 	bl	8009f04 <HAL_UARTEx_RxEventCallback>
 800a236:	e002      	b.n	800a23e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f7ff fe4f 	bl	8009edc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	e002      	b.n	800a248 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	e000      	b.n	800a248 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a246:	2302      	movs	r3, #2
  }
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3730      	adds	r7, #48	; 0x30
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a254:	b0c0      	sub	sp, #256	; 0x100
 800a256:	af00      	add	r7, sp, #0
 800a258:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a26c:	68d9      	ldr	r1, [r3, #12]
 800a26e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	ea40 0301 	orr.w	r3, r0, r1
 800a278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27e:	689a      	ldr	r2, [r3, #8]
 800a280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	431a      	orrs	r2, r3
 800a288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	431a      	orrs	r2, r3
 800a290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	4313      	orrs	r3, r2
 800a298:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a2a8:	f021 010c 	bic.w	r1, r1, #12
 800a2ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2b6:	430b      	orrs	r3, r1
 800a2b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a2c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ca:	6999      	ldr	r1, [r3, #24]
 800a2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	ea40 0301 	orr.w	r3, r0, r1
 800a2d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	4b8f      	ldr	r3, [pc, #572]	; (800a51c <UART_SetConfig+0x2cc>)
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d005      	beq.n	800a2f0 <UART_SetConfig+0xa0>
 800a2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	4b8d      	ldr	r3, [pc, #564]	; (800a520 <UART_SetConfig+0x2d0>)
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d104      	bne.n	800a2fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2f0:	f7fe f802 	bl	80082f8 <HAL_RCC_GetPCLK2Freq>
 800a2f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a2f8:	e003      	b.n	800a302 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2fa:	f7fd ffe9 	bl	80082d0 <HAL_RCC_GetPCLK1Freq>
 800a2fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a30c:	f040 810c 	bne.w	800a528 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a314:	2200      	movs	r2, #0
 800a316:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a31a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a31e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a322:	4622      	mov	r2, r4
 800a324:	462b      	mov	r3, r5
 800a326:	1891      	adds	r1, r2, r2
 800a328:	65b9      	str	r1, [r7, #88]	; 0x58
 800a32a:	415b      	adcs	r3, r3
 800a32c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a32e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a332:	4621      	mov	r1, r4
 800a334:	eb12 0801 	adds.w	r8, r2, r1
 800a338:	4629      	mov	r1, r5
 800a33a:	eb43 0901 	adc.w	r9, r3, r1
 800a33e:	f04f 0200 	mov.w	r2, #0
 800a342:	f04f 0300 	mov.w	r3, #0
 800a346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a34a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a34e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a352:	4690      	mov	r8, r2
 800a354:	4699      	mov	r9, r3
 800a356:	4623      	mov	r3, r4
 800a358:	eb18 0303 	adds.w	r3, r8, r3
 800a35c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a360:	462b      	mov	r3, r5
 800a362:	eb49 0303 	adc.w	r3, r9, r3
 800a366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a36a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a376:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a37a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a37e:	460b      	mov	r3, r1
 800a380:	18db      	adds	r3, r3, r3
 800a382:	653b      	str	r3, [r7, #80]	; 0x50
 800a384:	4613      	mov	r3, r2
 800a386:	eb42 0303 	adc.w	r3, r2, r3
 800a38a:	657b      	str	r3, [r7, #84]	; 0x54
 800a38c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a390:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a394:	f7f6 fbc0 	bl	8000b18 <__aeabi_uldivmod>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	4b61      	ldr	r3, [pc, #388]	; (800a524 <UART_SetConfig+0x2d4>)
 800a39e:	fba3 2302 	umull	r2, r3, r3, r2
 800a3a2:	095b      	lsrs	r3, r3, #5
 800a3a4:	011c      	lsls	r4, r3, #4
 800a3a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a3b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a3b8:	4642      	mov	r2, r8
 800a3ba:	464b      	mov	r3, r9
 800a3bc:	1891      	adds	r1, r2, r2
 800a3be:	64b9      	str	r1, [r7, #72]	; 0x48
 800a3c0:	415b      	adcs	r3, r3
 800a3c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a3c8:	4641      	mov	r1, r8
 800a3ca:	eb12 0a01 	adds.w	sl, r2, r1
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	eb43 0b01 	adc.w	fp, r3, r1
 800a3d4:	f04f 0200 	mov.w	r2, #0
 800a3d8:	f04f 0300 	mov.w	r3, #0
 800a3dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a3e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a3e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3e8:	4692      	mov	sl, r2
 800a3ea:	469b      	mov	fp, r3
 800a3ec:	4643      	mov	r3, r8
 800a3ee:	eb1a 0303 	adds.w	r3, sl, r3
 800a3f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3f6:	464b      	mov	r3, r9
 800a3f8:	eb4b 0303 	adc.w	r3, fp, r3
 800a3fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a40c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a410:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a414:	460b      	mov	r3, r1
 800a416:	18db      	adds	r3, r3, r3
 800a418:	643b      	str	r3, [r7, #64]	; 0x40
 800a41a:	4613      	mov	r3, r2
 800a41c:	eb42 0303 	adc.w	r3, r2, r3
 800a420:	647b      	str	r3, [r7, #68]	; 0x44
 800a422:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a426:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a42a:	f7f6 fb75 	bl	8000b18 <__aeabi_uldivmod>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4611      	mov	r1, r2
 800a434:	4b3b      	ldr	r3, [pc, #236]	; (800a524 <UART_SetConfig+0x2d4>)
 800a436:	fba3 2301 	umull	r2, r3, r3, r1
 800a43a:	095b      	lsrs	r3, r3, #5
 800a43c:	2264      	movs	r2, #100	; 0x64
 800a43e:	fb02 f303 	mul.w	r3, r2, r3
 800a442:	1acb      	subs	r3, r1, r3
 800a444:	00db      	lsls	r3, r3, #3
 800a446:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a44a:	4b36      	ldr	r3, [pc, #216]	; (800a524 <UART_SetConfig+0x2d4>)
 800a44c:	fba3 2302 	umull	r2, r3, r3, r2
 800a450:	095b      	lsrs	r3, r3, #5
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a458:	441c      	add	r4, r3
 800a45a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a45e:	2200      	movs	r2, #0
 800a460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a464:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a468:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a46c:	4642      	mov	r2, r8
 800a46e:	464b      	mov	r3, r9
 800a470:	1891      	adds	r1, r2, r2
 800a472:	63b9      	str	r1, [r7, #56]	; 0x38
 800a474:	415b      	adcs	r3, r3
 800a476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a47c:	4641      	mov	r1, r8
 800a47e:	1851      	adds	r1, r2, r1
 800a480:	6339      	str	r1, [r7, #48]	; 0x30
 800a482:	4649      	mov	r1, r9
 800a484:	414b      	adcs	r3, r1
 800a486:	637b      	str	r3, [r7, #52]	; 0x34
 800a488:	f04f 0200 	mov.w	r2, #0
 800a48c:	f04f 0300 	mov.w	r3, #0
 800a490:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a494:	4659      	mov	r1, fp
 800a496:	00cb      	lsls	r3, r1, #3
 800a498:	4651      	mov	r1, sl
 800a49a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a49e:	4651      	mov	r1, sl
 800a4a0:	00ca      	lsls	r2, r1, #3
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	4642      	mov	r2, r8
 800a4aa:	189b      	adds	r3, r3, r2
 800a4ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a4b0:	464b      	mov	r3, r9
 800a4b2:	460a      	mov	r2, r1
 800a4b4:	eb42 0303 	adc.w	r3, r2, r3
 800a4b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a4c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a4cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	18db      	adds	r3, r3, r3
 800a4d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	eb42 0303 	adc.w	r3, r2, r3
 800a4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a4e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a4e6:	f7f6 fb17 	bl	8000b18 <__aeabi_uldivmod>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4b0d      	ldr	r3, [pc, #52]	; (800a524 <UART_SetConfig+0x2d4>)
 800a4f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a4f4:	095b      	lsrs	r3, r3, #5
 800a4f6:	2164      	movs	r1, #100	; 0x64
 800a4f8:	fb01 f303 	mul.w	r3, r1, r3
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	3332      	adds	r3, #50	; 0x32
 800a502:	4a08      	ldr	r2, [pc, #32]	; (800a524 <UART_SetConfig+0x2d4>)
 800a504:	fba2 2303 	umull	r2, r3, r2, r3
 800a508:	095b      	lsrs	r3, r3, #5
 800a50a:	f003 0207 	and.w	r2, r3, #7
 800a50e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4422      	add	r2, r4
 800a516:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a518:	e105      	b.n	800a726 <UART_SetConfig+0x4d6>
 800a51a:	bf00      	nop
 800a51c:	40011000 	.word	0x40011000
 800a520:	40011400 	.word	0x40011400
 800a524:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a52c:	2200      	movs	r2, #0
 800a52e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a532:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a536:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a53a:	4642      	mov	r2, r8
 800a53c:	464b      	mov	r3, r9
 800a53e:	1891      	adds	r1, r2, r2
 800a540:	6239      	str	r1, [r7, #32]
 800a542:	415b      	adcs	r3, r3
 800a544:	627b      	str	r3, [r7, #36]	; 0x24
 800a546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a54a:	4641      	mov	r1, r8
 800a54c:	1854      	adds	r4, r2, r1
 800a54e:	4649      	mov	r1, r9
 800a550:	eb43 0501 	adc.w	r5, r3, r1
 800a554:	f04f 0200 	mov.w	r2, #0
 800a558:	f04f 0300 	mov.w	r3, #0
 800a55c:	00eb      	lsls	r3, r5, #3
 800a55e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a562:	00e2      	lsls	r2, r4, #3
 800a564:	4614      	mov	r4, r2
 800a566:	461d      	mov	r5, r3
 800a568:	4643      	mov	r3, r8
 800a56a:	18e3      	adds	r3, r4, r3
 800a56c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a570:	464b      	mov	r3, r9
 800a572:	eb45 0303 	adc.w	r3, r5, r3
 800a576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a57a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a586:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a58a:	f04f 0200 	mov.w	r2, #0
 800a58e:	f04f 0300 	mov.w	r3, #0
 800a592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a596:	4629      	mov	r1, r5
 800a598:	008b      	lsls	r3, r1, #2
 800a59a:	4621      	mov	r1, r4
 800a59c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	008a      	lsls	r2, r1, #2
 800a5a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a5a8:	f7f6 fab6 	bl	8000b18 <__aeabi_uldivmod>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4b60      	ldr	r3, [pc, #384]	; (800a734 <UART_SetConfig+0x4e4>)
 800a5b2:	fba3 2302 	umull	r2, r3, r3, r2
 800a5b6:	095b      	lsrs	r3, r3, #5
 800a5b8:	011c      	lsls	r4, r3, #4
 800a5ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a5c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a5cc:	4642      	mov	r2, r8
 800a5ce:	464b      	mov	r3, r9
 800a5d0:	1891      	adds	r1, r2, r2
 800a5d2:	61b9      	str	r1, [r7, #24]
 800a5d4:	415b      	adcs	r3, r3
 800a5d6:	61fb      	str	r3, [r7, #28]
 800a5d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5dc:	4641      	mov	r1, r8
 800a5de:	1851      	adds	r1, r2, r1
 800a5e0:	6139      	str	r1, [r7, #16]
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	414b      	adcs	r3, r1
 800a5e6:	617b      	str	r3, [r7, #20]
 800a5e8:	f04f 0200 	mov.w	r2, #0
 800a5ec:	f04f 0300 	mov.w	r3, #0
 800a5f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5f4:	4659      	mov	r1, fp
 800a5f6:	00cb      	lsls	r3, r1, #3
 800a5f8:	4651      	mov	r1, sl
 800a5fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5fe:	4651      	mov	r1, sl
 800a600:	00ca      	lsls	r2, r1, #3
 800a602:	4610      	mov	r0, r2
 800a604:	4619      	mov	r1, r3
 800a606:	4603      	mov	r3, r0
 800a608:	4642      	mov	r2, r8
 800a60a:	189b      	adds	r3, r3, r2
 800a60c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a610:	464b      	mov	r3, r9
 800a612:	460a      	mov	r2, r1
 800a614:	eb42 0303 	adc.w	r3, r2, r3
 800a618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	67bb      	str	r3, [r7, #120]	; 0x78
 800a626:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a628:	f04f 0200 	mov.w	r2, #0
 800a62c:	f04f 0300 	mov.w	r3, #0
 800a630:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a634:	4649      	mov	r1, r9
 800a636:	008b      	lsls	r3, r1, #2
 800a638:	4641      	mov	r1, r8
 800a63a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a63e:	4641      	mov	r1, r8
 800a640:	008a      	lsls	r2, r1, #2
 800a642:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a646:	f7f6 fa67 	bl	8000b18 <__aeabi_uldivmod>
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	4b39      	ldr	r3, [pc, #228]	; (800a734 <UART_SetConfig+0x4e4>)
 800a650:	fba3 1302 	umull	r1, r3, r3, r2
 800a654:	095b      	lsrs	r3, r3, #5
 800a656:	2164      	movs	r1, #100	; 0x64
 800a658:	fb01 f303 	mul.w	r3, r1, r3
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	011b      	lsls	r3, r3, #4
 800a660:	3332      	adds	r3, #50	; 0x32
 800a662:	4a34      	ldr	r2, [pc, #208]	; (800a734 <UART_SetConfig+0x4e4>)
 800a664:	fba2 2303 	umull	r2, r3, r2, r3
 800a668:	095b      	lsrs	r3, r3, #5
 800a66a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a66e:	441c      	add	r4, r3
 800a670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a674:	2200      	movs	r2, #0
 800a676:	673b      	str	r3, [r7, #112]	; 0x70
 800a678:	677a      	str	r2, [r7, #116]	; 0x74
 800a67a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a67e:	4642      	mov	r2, r8
 800a680:	464b      	mov	r3, r9
 800a682:	1891      	adds	r1, r2, r2
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	415b      	adcs	r3, r3
 800a688:	60fb      	str	r3, [r7, #12]
 800a68a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a68e:	4641      	mov	r1, r8
 800a690:	1851      	adds	r1, r2, r1
 800a692:	6039      	str	r1, [r7, #0]
 800a694:	4649      	mov	r1, r9
 800a696:	414b      	adcs	r3, r1
 800a698:	607b      	str	r3, [r7, #4]
 800a69a:	f04f 0200 	mov.w	r2, #0
 800a69e:	f04f 0300 	mov.w	r3, #0
 800a6a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a6a6:	4659      	mov	r1, fp
 800a6a8:	00cb      	lsls	r3, r1, #3
 800a6aa:	4651      	mov	r1, sl
 800a6ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6b0:	4651      	mov	r1, sl
 800a6b2:	00ca      	lsls	r2, r1, #3
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	4642      	mov	r2, r8
 800a6bc:	189b      	adds	r3, r3, r2
 800a6be:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	460a      	mov	r2, r1
 800a6c4:	eb42 0303 	adc.w	r3, r2, r3
 800a6c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	663b      	str	r3, [r7, #96]	; 0x60
 800a6d4:	667a      	str	r2, [r7, #100]	; 0x64
 800a6d6:	f04f 0200 	mov.w	r2, #0
 800a6da:	f04f 0300 	mov.w	r3, #0
 800a6de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	008b      	lsls	r3, r1, #2
 800a6e6:	4641      	mov	r1, r8
 800a6e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6ec:	4641      	mov	r1, r8
 800a6ee:	008a      	lsls	r2, r1, #2
 800a6f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a6f4:	f7f6 fa10 	bl	8000b18 <__aeabi_uldivmod>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4b0d      	ldr	r3, [pc, #52]	; (800a734 <UART_SetConfig+0x4e4>)
 800a6fe:	fba3 1302 	umull	r1, r3, r3, r2
 800a702:	095b      	lsrs	r3, r3, #5
 800a704:	2164      	movs	r1, #100	; 0x64
 800a706:	fb01 f303 	mul.w	r3, r1, r3
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	011b      	lsls	r3, r3, #4
 800a70e:	3332      	adds	r3, #50	; 0x32
 800a710:	4a08      	ldr	r2, [pc, #32]	; (800a734 <UART_SetConfig+0x4e4>)
 800a712:	fba2 2303 	umull	r2, r3, r2, r3
 800a716:	095b      	lsrs	r3, r3, #5
 800a718:	f003 020f 	and.w	r2, r3, #15
 800a71c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4422      	add	r2, r4
 800a724:	609a      	str	r2, [r3, #8]
}
 800a726:	bf00      	nop
 800a728:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a72c:	46bd      	mov	sp, r7
 800a72e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a732:	bf00      	nop
 800a734:	51eb851f 	.word	0x51eb851f

0800a738 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d123      	bne.n	800a792 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a752:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	6851      	ldr	r1, [r2, #4]
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	6892      	ldr	r2, [r2, #8]
 800a75e:	4311      	orrs	r1, r2
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	68d2      	ldr	r2, [r2, #12]
 800a764:	4311      	orrs	r1, r2
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	6912      	ldr	r2, [r2, #16]
 800a76a:	4311      	orrs	r1, r2
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	6952      	ldr	r2, [r2, #20]
 800a770:	4311      	orrs	r1, r2
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	6992      	ldr	r2, [r2, #24]
 800a776:	4311      	orrs	r1, r2
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	69d2      	ldr	r2, [r2, #28]
 800a77c:	4311      	orrs	r1, r2
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	6a12      	ldr	r2, [r2, #32]
 800a782:	4311      	orrs	r1, r2
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a788:	430a      	orrs	r2, r1
 800a78a:	431a      	orrs	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	e028      	b.n	800a7e4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	69d9      	ldr	r1, [r3, #28]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	4319      	orrs	r1, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a8:	430b      	orrs	r3, r1
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a7b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	6851      	ldr	r1, [r2, #4]
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	6892      	ldr	r2, [r2, #8]
 800a7c4:	4311      	orrs	r1, r2
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	68d2      	ldr	r2, [r2, #12]
 800a7ca:	4311      	orrs	r1, r2
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	6912      	ldr	r2, [r2, #16]
 800a7d0:	4311      	orrs	r1, r2
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	6952      	ldr	r2, [r2, #20]
 800a7d6:	4311      	orrs	r1, r2
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	6992      	ldr	r2, [r2, #24]
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	431a      	orrs	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b085      	sub	sp, #20
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d128      	bne.n	800a856 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	1e59      	subs	r1, r3, #1
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	3b01      	subs	r3, #1
 800a818:	011b      	lsls	r3, r3, #4
 800a81a:	4319      	orrs	r1, r3
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	3b01      	subs	r3, #1
 800a822:	021b      	lsls	r3, r3, #8
 800a824:	4319      	orrs	r1, r3
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	031b      	lsls	r3, r3, #12
 800a82e:	4319      	orrs	r1, r3
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	3b01      	subs	r3, #1
 800a836:	041b      	lsls	r3, r3, #16
 800a838:	4319      	orrs	r1, r3
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	3b01      	subs	r3, #1
 800a840:	051b      	lsls	r3, r3, #20
 800a842:	4319      	orrs	r1, r3
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	3b01      	subs	r3, #1
 800a84a:	061b      	lsls	r3, r3, #24
 800a84c:	430b      	orrs	r3, r1
 800a84e:	431a      	orrs	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	609a      	str	r2, [r3, #8]
 800a854:	e02f      	b.n	800a8b6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a85e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	68d2      	ldr	r2, [r2, #12]
 800a866:	3a01      	subs	r2, #1
 800a868:	0311      	lsls	r1, r2, #12
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	6952      	ldr	r2, [r2, #20]
 800a86e:	3a01      	subs	r2, #1
 800a870:	0512      	lsls	r2, r2, #20
 800a872:	430a      	orrs	r2, r1
 800a874:	431a      	orrs	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	1e59      	subs	r1, r3, #1
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	011b      	lsls	r3, r3, #4
 800a890:	4319      	orrs	r1, r3
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	3b01      	subs	r3, #1
 800a898:	021b      	lsls	r3, r3, #8
 800a89a:	4319      	orrs	r1, r3
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	041b      	lsls	r3, r3, #16
 800a8a4:	4319      	orrs	r1, r3
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	061b      	lsls	r3, r3, #24
 800a8ae:	430b      	orrs	r3, r1
 800a8b0:	431a      	orrs	r2, r3
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	0d9b      	lsrs	r3, r3, #22
 800a8da:	059b      	lsls	r3, r3, #22
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	6811      	ldr	r1, [r2, #0]
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	6852      	ldr	r2, [r2, #4]
 800a8e4:	4311      	orrs	r1, r2
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	6892      	ldr	r2, [r2, #8]
 800a8ea:	3a01      	subs	r2, #1
 800a8ec:	0152      	lsls	r2, r2, #5
 800a8ee:	4311      	orrs	r1, r2
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	68d2      	ldr	r2, [r2, #12]
 800a8f4:	0252      	lsls	r2, r2, #9
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a8fe:	f7fb fe51 	bl	80065a4 <HAL_GetTick>
 800a902:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a904:	e010      	b.n	800a928 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90c:	d00c      	beq.n	800a928 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d007      	beq.n	800a924 <FMC_SDRAM_SendCommand+0x60>
 800a914:	f7fb fe46 	bl	80065a4 <HAL_GetTick>
 800a918:	4602      	mov	r2, r0
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	429a      	cmp	r2, r3
 800a922:	d201      	bcs.n	800a928 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a924:	2303      	movs	r3, #3
 800a926:	e006      	b.n	800a936 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	f003 0320 	and.w	r3, r3, #32
 800a930:	2b20      	cmp	r3, #32
 800a932:	d0e8      	beq.n	800a906 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <__errno>:
 800a940:	4b01      	ldr	r3, [pc, #4]	; (800a948 <__errno+0x8>)
 800a942:	6818      	ldr	r0, [r3, #0]
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	20000030 	.word	0x20000030

0800a94c <__libc_init_array>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	4d0d      	ldr	r5, [pc, #52]	; (800a984 <__libc_init_array+0x38>)
 800a950:	4c0d      	ldr	r4, [pc, #52]	; (800a988 <__libc_init_array+0x3c>)
 800a952:	1b64      	subs	r4, r4, r5
 800a954:	10a4      	asrs	r4, r4, #2
 800a956:	2600      	movs	r6, #0
 800a958:	42a6      	cmp	r6, r4
 800a95a:	d109      	bne.n	800a970 <__libc_init_array+0x24>
 800a95c:	4d0b      	ldr	r5, [pc, #44]	; (800a98c <__libc_init_array+0x40>)
 800a95e:	4c0c      	ldr	r4, [pc, #48]	; (800a990 <__libc_init_array+0x44>)
 800a960:	f000 ffa4 	bl	800b8ac <_init>
 800a964:	1b64      	subs	r4, r4, r5
 800a966:	10a4      	asrs	r4, r4, #2
 800a968:	2600      	movs	r6, #0
 800a96a:	42a6      	cmp	r6, r4
 800a96c:	d105      	bne.n	800a97a <__libc_init_array+0x2e>
 800a96e:	bd70      	pop	{r4, r5, r6, pc}
 800a970:	f855 3b04 	ldr.w	r3, [r5], #4
 800a974:	4798      	blx	r3
 800a976:	3601      	adds	r6, #1
 800a978:	e7ee      	b.n	800a958 <__libc_init_array+0xc>
 800a97a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a97e:	4798      	blx	r3
 800a980:	3601      	adds	r6, #1
 800a982:	e7f2      	b.n	800a96a <__libc_init_array+0x1e>
 800a984:	08010910 	.word	0x08010910
 800a988:	08010910 	.word	0x08010910
 800a98c:	08010910 	.word	0x08010910
 800a990:	08010914 	.word	0x08010914

0800a994 <__itoa>:
 800a994:	1e93      	subs	r3, r2, #2
 800a996:	2b22      	cmp	r3, #34	; 0x22
 800a998:	b510      	push	{r4, lr}
 800a99a:	460c      	mov	r4, r1
 800a99c:	d904      	bls.n	800a9a8 <__itoa+0x14>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	700b      	strb	r3, [r1, #0]
 800a9a2:	461c      	mov	r4, r3
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	bd10      	pop	{r4, pc}
 800a9a8:	2a0a      	cmp	r2, #10
 800a9aa:	d109      	bne.n	800a9c0 <__itoa+0x2c>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	da07      	bge.n	800a9c0 <__itoa+0x2c>
 800a9b0:	232d      	movs	r3, #45	; 0x2d
 800a9b2:	700b      	strb	r3, [r1, #0]
 800a9b4:	4240      	negs	r0, r0
 800a9b6:	2101      	movs	r1, #1
 800a9b8:	4421      	add	r1, r4
 800a9ba:	f000 f81b 	bl	800a9f4 <__utoa>
 800a9be:	e7f1      	b.n	800a9a4 <__itoa+0x10>
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	e7f9      	b.n	800a9b8 <__itoa+0x24>

0800a9c4 <itoa>:
 800a9c4:	f7ff bfe6 	b.w	800a994 <__itoa>

0800a9c8 <memcpy>:
 800a9c8:	440a      	add	r2, r1
 800a9ca:	4291      	cmp	r1, r2
 800a9cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9d0:	d100      	bne.n	800a9d4 <memcpy+0xc>
 800a9d2:	4770      	bx	lr
 800a9d4:	b510      	push	{r4, lr}
 800a9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9de:	4291      	cmp	r1, r2
 800a9e0:	d1f9      	bne.n	800a9d6 <memcpy+0xe>
 800a9e2:	bd10      	pop	{r4, pc}

0800a9e4 <memset>:
 800a9e4:	4402      	add	r2, r0
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d100      	bne.n	800a9ee <memset+0xa>
 800a9ec:	4770      	bx	lr
 800a9ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a9f2:	e7f9      	b.n	800a9e8 <memset+0x4>

0800a9f4 <__utoa>:
 800a9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f6:	4c1f      	ldr	r4, [pc, #124]	; (800aa74 <__utoa+0x80>)
 800a9f8:	b08b      	sub	sp, #44	; 0x2c
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	466e      	mov	r6, sp
 800aa00:	f104 0c20 	add.w	ip, r4, #32
 800aa04:	6820      	ldr	r0, [r4, #0]
 800aa06:	6861      	ldr	r1, [r4, #4]
 800aa08:	4637      	mov	r7, r6
 800aa0a:	c703      	stmia	r7!, {r0, r1}
 800aa0c:	3408      	adds	r4, #8
 800aa0e:	4564      	cmp	r4, ip
 800aa10:	463e      	mov	r6, r7
 800aa12:	d1f7      	bne.n	800aa04 <__utoa+0x10>
 800aa14:	7921      	ldrb	r1, [r4, #4]
 800aa16:	7139      	strb	r1, [r7, #4]
 800aa18:	1e91      	subs	r1, r2, #2
 800aa1a:	6820      	ldr	r0, [r4, #0]
 800aa1c:	6038      	str	r0, [r7, #0]
 800aa1e:	2922      	cmp	r1, #34	; 0x22
 800aa20:	f04f 0100 	mov.w	r1, #0
 800aa24:	d904      	bls.n	800aa30 <__utoa+0x3c>
 800aa26:	7019      	strb	r1, [r3, #0]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	b00b      	add	sp, #44	; 0x2c
 800aa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa30:	1e58      	subs	r0, r3, #1
 800aa32:	4684      	mov	ip, r0
 800aa34:	fbb5 f7f2 	udiv	r7, r5, r2
 800aa38:	fb02 5617 	mls	r6, r2, r7, r5
 800aa3c:	3628      	adds	r6, #40	; 0x28
 800aa3e:	446e      	add	r6, sp
 800aa40:	460c      	mov	r4, r1
 800aa42:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800aa46:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800aa4a:	462e      	mov	r6, r5
 800aa4c:	42b2      	cmp	r2, r6
 800aa4e:	f101 0101 	add.w	r1, r1, #1
 800aa52:	463d      	mov	r5, r7
 800aa54:	d9ee      	bls.n	800aa34 <__utoa+0x40>
 800aa56:	2200      	movs	r2, #0
 800aa58:	545a      	strb	r2, [r3, r1]
 800aa5a:	1919      	adds	r1, r3, r4
 800aa5c:	1aa5      	subs	r5, r4, r2
 800aa5e:	42aa      	cmp	r2, r5
 800aa60:	dae3      	bge.n	800aa2a <__utoa+0x36>
 800aa62:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800aa66:	780e      	ldrb	r6, [r1, #0]
 800aa68:	7006      	strb	r6, [r0, #0]
 800aa6a:	3201      	adds	r2, #1
 800aa6c:	f801 5901 	strb.w	r5, [r1], #-1
 800aa70:	e7f4      	b.n	800aa5c <__utoa+0x68>
 800aa72:	bf00      	nop
 800aa74:	080108b2 	.word	0x080108b2

0800aa78 <pow>:
 800aa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7a:	ed2d 8b02 	vpush	{d8}
 800aa7e:	eeb0 8a40 	vmov.f32	s16, s0
 800aa82:	eef0 8a60 	vmov.f32	s17, s1
 800aa86:	ec55 4b11 	vmov	r4, r5, d1
 800aa8a:	f000 f865 	bl	800ab58 <__ieee754_pow>
 800aa8e:	4622      	mov	r2, r4
 800aa90:	462b      	mov	r3, r5
 800aa92:	4620      	mov	r0, r4
 800aa94:	4629      	mov	r1, r5
 800aa96:	ec57 6b10 	vmov	r6, r7, d0
 800aa9a:	f7f5 ffff 	bl	8000a9c <__aeabi_dcmpun>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d13b      	bne.n	800ab1a <pow+0xa2>
 800aaa2:	ec51 0b18 	vmov	r0, r1, d8
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f7f5 ffc5 	bl	8000a38 <__aeabi_dcmpeq>
 800aaae:	b1b8      	cbz	r0, 800aae0 <pow+0x68>
 800aab0:	2200      	movs	r2, #0
 800aab2:	2300      	movs	r3, #0
 800aab4:	4620      	mov	r0, r4
 800aab6:	4629      	mov	r1, r5
 800aab8:	f7f5 ffbe 	bl	8000a38 <__aeabi_dcmpeq>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d146      	bne.n	800ab4e <pow+0xd6>
 800aac0:	ec45 4b10 	vmov	d0, r4, r5
 800aac4:	f000 fe61 	bl	800b78a <finite>
 800aac8:	b338      	cbz	r0, 800ab1a <pow+0xa2>
 800aaca:	2200      	movs	r2, #0
 800aacc:	2300      	movs	r3, #0
 800aace:	4620      	mov	r0, r4
 800aad0:	4629      	mov	r1, r5
 800aad2:	f7f5 ffbb 	bl	8000a4c <__aeabi_dcmplt>
 800aad6:	b300      	cbz	r0, 800ab1a <pow+0xa2>
 800aad8:	f7ff ff32 	bl	800a940 <__errno>
 800aadc:	2322      	movs	r3, #34	; 0x22
 800aade:	e01b      	b.n	800ab18 <pow+0xa0>
 800aae0:	ec47 6b10 	vmov	d0, r6, r7
 800aae4:	f000 fe51 	bl	800b78a <finite>
 800aae8:	b9e0      	cbnz	r0, 800ab24 <pow+0xac>
 800aaea:	eeb0 0a48 	vmov.f32	s0, s16
 800aaee:	eef0 0a68 	vmov.f32	s1, s17
 800aaf2:	f000 fe4a 	bl	800b78a <finite>
 800aaf6:	b1a8      	cbz	r0, 800ab24 <pow+0xac>
 800aaf8:	ec45 4b10 	vmov	d0, r4, r5
 800aafc:	f000 fe45 	bl	800b78a <finite>
 800ab00:	b180      	cbz	r0, 800ab24 <pow+0xac>
 800ab02:	4632      	mov	r2, r6
 800ab04:	463b      	mov	r3, r7
 800ab06:	4630      	mov	r0, r6
 800ab08:	4639      	mov	r1, r7
 800ab0a:	f7f5 ffc7 	bl	8000a9c <__aeabi_dcmpun>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d0e2      	beq.n	800aad8 <pow+0x60>
 800ab12:	f7ff ff15 	bl	800a940 <__errno>
 800ab16:	2321      	movs	r3, #33	; 0x21
 800ab18:	6003      	str	r3, [r0, #0]
 800ab1a:	ecbd 8b02 	vpop	{d8}
 800ab1e:	ec47 6b10 	vmov	d0, r6, r7
 800ab22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab24:	2200      	movs	r2, #0
 800ab26:	2300      	movs	r3, #0
 800ab28:	4630      	mov	r0, r6
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	f7f5 ff84 	bl	8000a38 <__aeabi_dcmpeq>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d0f2      	beq.n	800ab1a <pow+0xa2>
 800ab34:	eeb0 0a48 	vmov.f32	s0, s16
 800ab38:	eef0 0a68 	vmov.f32	s1, s17
 800ab3c:	f000 fe25 	bl	800b78a <finite>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d0ea      	beq.n	800ab1a <pow+0xa2>
 800ab44:	ec45 4b10 	vmov	d0, r4, r5
 800ab48:	f000 fe1f 	bl	800b78a <finite>
 800ab4c:	e7c3      	b.n	800aad6 <pow+0x5e>
 800ab4e:	4f01      	ldr	r7, [pc, #4]	; (800ab54 <pow+0xdc>)
 800ab50:	2600      	movs	r6, #0
 800ab52:	e7e2      	b.n	800ab1a <pow+0xa2>
 800ab54:	3ff00000 	.word	0x3ff00000

0800ab58 <__ieee754_pow>:
 800ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	ed2d 8b06 	vpush	{d8-d10}
 800ab60:	b089      	sub	sp, #36	; 0x24
 800ab62:	ed8d 1b00 	vstr	d1, [sp]
 800ab66:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ab6a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ab6e:	ea58 0102 	orrs.w	r1, r8, r2
 800ab72:	ec57 6b10 	vmov	r6, r7, d0
 800ab76:	d115      	bne.n	800aba4 <__ieee754_pow+0x4c>
 800ab78:	19b3      	adds	r3, r6, r6
 800ab7a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ab7e:	4152      	adcs	r2, r2
 800ab80:	4299      	cmp	r1, r3
 800ab82:	4b89      	ldr	r3, [pc, #548]	; (800ada8 <__ieee754_pow+0x250>)
 800ab84:	4193      	sbcs	r3, r2
 800ab86:	f080 84d2 	bcs.w	800b52e <__ieee754_pow+0x9d6>
 800ab8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab8e:	4630      	mov	r0, r6
 800ab90:	4639      	mov	r1, r7
 800ab92:	f7f5 fb33 	bl	80001fc <__adddf3>
 800ab96:	ec41 0b10 	vmov	d0, r0, r1
 800ab9a:	b009      	add	sp, #36	; 0x24
 800ab9c:	ecbd 8b06 	vpop	{d8-d10}
 800aba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba4:	4b81      	ldr	r3, [pc, #516]	; (800adac <__ieee754_pow+0x254>)
 800aba6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800abaa:	429c      	cmp	r4, r3
 800abac:	ee10 aa10 	vmov	sl, s0
 800abb0:	463d      	mov	r5, r7
 800abb2:	dc06      	bgt.n	800abc2 <__ieee754_pow+0x6a>
 800abb4:	d101      	bne.n	800abba <__ieee754_pow+0x62>
 800abb6:	2e00      	cmp	r6, #0
 800abb8:	d1e7      	bne.n	800ab8a <__ieee754_pow+0x32>
 800abba:	4598      	cmp	r8, r3
 800abbc:	dc01      	bgt.n	800abc2 <__ieee754_pow+0x6a>
 800abbe:	d10f      	bne.n	800abe0 <__ieee754_pow+0x88>
 800abc0:	b172      	cbz	r2, 800abe0 <__ieee754_pow+0x88>
 800abc2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800abc6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800abca:	ea55 050a 	orrs.w	r5, r5, sl
 800abce:	d1dc      	bne.n	800ab8a <__ieee754_pow+0x32>
 800abd0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abd4:	18db      	adds	r3, r3, r3
 800abd6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800abda:	4152      	adcs	r2, r2
 800abdc:	429d      	cmp	r5, r3
 800abde:	e7d0      	b.n	800ab82 <__ieee754_pow+0x2a>
 800abe0:	2d00      	cmp	r5, #0
 800abe2:	da3b      	bge.n	800ac5c <__ieee754_pow+0x104>
 800abe4:	4b72      	ldr	r3, [pc, #456]	; (800adb0 <__ieee754_pow+0x258>)
 800abe6:	4598      	cmp	r8, r3
 800abe8:	dc51      	bgt.n	800ac8e <__ieee754_pow+0x136>
 800abea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800abee:	4598      	cmp	r8, r3
 800abf0:	f340 84ac 	ble.w	800b54c <__ieee754_pow+0x9f4>
 800abf4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800abf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800abfc:	2b14      	cmp	r3, #20
 800abfe:	dd0f      	ble.n	800ac20 <__ieee754_pow+0xc8>
 800ac00:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ac04:	fa22 f103 	lsr.w	r1, r2, r3
 800ac08:	fa01 f303 	lsl.w	r3, r1, r3
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	f040 849d 	bne.w	800b54c <__ieee754_pow+0x9f4>
 800ac12:	f001 0101 	and.w	r1, r1, #1
 800ac16:	f1c1 0302 	rsb	r3, r1, #2
 800ac1a:	9304      	str	r3, [sp, #16]
 800ac1c:	b182      	cbz	r2, 800ac40 <__ieee754_pow+0xe8>
 800ac1e:	e05f      	b.n	800ace0 <__ieee754_pow+0x188>
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	d15b      	bne.n	800acdc <__ieee754_pow+0x184>
 800ac24:	f1c3 0314 	rsb	r3, r3, #20
 800ac28:	fa48 f103 	asr.w	r1, r8, r3
 800ac2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac30:	4543      	cmp	r3, r8
 800ac32:	f040 8488 	bne.w	800b546 <__ieee754_pow+0x9ee>
 800ac36:	f001 0101 	and.w	r1, r1, #1
 800ac3a:	f1c1 0302 	rsb	r3, r1, #2
 800ac3e:	9304      	str	r3, [sp, #16]
 800ac40:	4b5c      	ldr	r3, [pc, #368]	; (800adb4 <__ieee754_pow+0x25c>)
 800ac42:	4598      	cmp	r8, r3
 800ac44:	d132      	bne.n	800acac <__ieee754_pow+0x154>
 800ac46:	f1b9 0f00 	cmp.w	r9, #0
 800ac4a:	f280 8478 	bge.w	800b53e <__ieee754_pow+0x9e6>
 800ac4e:	4959      	ldr	r1, [pc, #356]	; (800adb4 <__ieee754_pow+0x25c>)
 800ac50:	4632      	mov	r2, r6
 800ac52:	463b      	mov	r3, r7
 800ac54:	2000      	movs	r0, #0
 800ac56:	f7f5 fdb1 	bl	80007bc <__aeabi_ddiv>
 800ac5a:	e79c      	b.n	800ab96 <__ieee754_pow+0x3e>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	9304      	str	r3, [sp, #16]
 800ac60:	2a00      	cmp	r2, #0
 800ac62:	d13d      	bne.n	800ace0 <__ieee754_pow+0x188>
 800ac64:	4b51      	ldr	r3, [pc, #324]	; (800adac <__ieee754_pow+0x254>)
 800ac66:	4598      	cmp	r8, r3
 800ac68:	d1ea      	bne.n	800ac40 <__ieee754_pow+0xe8>
 800ac6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ac6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ac72:	ea53 030a 	orrs.w	r3, r3, sl
 800ac76:	f000 845a 	beq.w	800b52e <__ieee754_pow+0x9d6>
 800ac7a:	4b4f      	ldr	r3, [pc, #316]	; (800adb8 <__ieee754_pow+0x260>)
 800ac7c:	429c      	cmp	r4, r3
 800ac7e:	dd08      	ble.n	800ac92 <__ieee754_pow+0x13a>
 800ac80:	f1b9 0f00 	cmp.w	r9, #0
 800ac84:	f2c0 8457 	blt.w	800b536 <__ieee754_pow+0x9de>
 800ac88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac8c:	e783      	b.n	800ab96 <__ieee754_pow+0x3e>
 800ac8e:	2302      	movs	r3, #2
 800ac90:	e7e5      	b.n	800ac5e <__ieee754_pow+0x106>
 800ac92:	f1b9 0f00 	cmp.w	r9, #0
 800ac96:	f04f 0000 	mov.w	r0, #0
 800ac9a:	f04f 0100 	mov.w	r1, #0
 800ac9e:	f6bf af7a 	bge.w	800ab96 <__ieee754_pow+0x3e>
 800aca2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800aca6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800acaa:	e774      	b.n	800ab96 <__ieee754_pow+0x3e>
 800acac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800acb0:	d106      	bne.n	800acc0 <__ieee754_pow+0x168>
 800acb2:	4632      	mov	r2, r6
 800acb4:	463b      	mov	r3, r7
 800acb6:	4630      	mov	r0, r6
 800acb8:	4639      	mov	r1, r7
 800acba:	f7f5 fc55 	bl	8000568 <__aeabi_dmul>
 800acbe:	e76a      	b.n	800ab96 <__ieee754_pow+0x3e>
 800acc0:	4b3e      	ldr	r3, [pc, #248]	; (800adbc <__ieee754_pow+0x264>)
 800acc2:	4599      	cmp	r9, r3
 800acc4:	d10c      	bne.n	800ace0 <__ieee754_pow+0x188>
 800acc6:	2d00      	cmp	r5, #0
 800acc8:	db0a      	blt.n	800ace0 <__ieee754_pow+0x188>
 800acca:	ec47 6b10 	vmov	d0, r6, r7
 800acce:	b009      	add	sp, #36	; 0x24
 800acd0:	ecbd 8b06 	vpop	{d8-d10}
 800acd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd8:	f000 bc6c 	b.w	800b5b4 <__ieee754_sqrt>
 800acdc:	2300      	movs	r3, #0
 800acde:	9304      	str	r3, [sp, #16]
 800ace0:	ec47 6b10 	vmov	d0, r6, r7
 800ace4:	f000 fd48 	bl	800b778 <fabs>
 800ace8:	ec51 0b10 	vmov	r0, r1, d0
 800acec:	f1ba 0f00 	cmp.w	sl, #0
 800acf0:	d129      	bne.n	800ad46 <__ieee754_pow+0x1ee>
 800acf2:	b124      	cbz	r4, 800acfe <__ieee754_pow+0x1a6>
 800acf4:	4b2f      	ldr	r3, [pc, #188]	; (800adb4 <__ieee754_pow+0x25c>)
 800acf6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d123      	bne.n	800ad46 <__ieee754_pow+0x1ee>
 800acfe:	f1b9 0f00 	cmp.w	r9, #0
 800ad02:	da05      	bge.n	800ad10 <__ieee754_pow+0x1b8>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	2000      	movs	r0, #0
 800ad0a:	492a      	ldr	r1, [pc, #168]	; (800adb4 <__ieee754_pow+0x25c>)
 800ad0c:	f7f5 fd56 	bl	80007bc <__aeabi_ddiv>
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	f6bf af40 	bge.w	800ab96 <__ieee754_pow+0x3e>
 800ad16:	9b04      	ldr	r3, [sp, #16]
 800ad18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ad1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ad20:	4323      	orrs	r3, r4
 800ad22:	d108      	bne.n	800ad36 <__ieee754_pow+0x1de>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4610      	mov	r0, r2
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	f7f5 fa64 	bl	80001f8 <__aeabi_dsub>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	e78f      	b.n	800ac56 <__ieee754_pow+0xfe>
 800ad36:	9b04      	ldr	r3, [sp, #16]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	f47f af2c 	bne.w	800ab96 <__ieee754_pow+0x3e>
 800ad3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad42:	4619      	mov	r1, r3
 800ad44:	e727      	b.n	800ab96 <__ieee754_pow+0x3e>
 800ad46:	0feb      	lsrs	r3, r5, #31
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	9306      	str	r3, [sp, #24]
 800ad4c:	9a06      	ldr	r2, [sp, #24]
 800ad4e:	9b04      	ldr	r3, [sp, #16]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	d102      	bne.n	800ad5a <__ieee754_pow+0x202>
 800ad54:	4632      	mov	r2, r6
 800ad56:	463b      	mov	r3, r7
 800ad58:	e7e6      	b.n	800ad28 <__ieee754_pow+0x1d0>
 800ad5a:	4b19      	ldr	r3, [pc, #100]	; (800adc0 <__ieee754_pow+0x268>)
 800ad5c:	4598      	cmp	r8, r3
 800ad5e:	f340 80fb 	ble.w	800af58 <__ieee754_pow+0x400>
 800ad62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ad66:	4598      	cmp	r8, r3
 800ad68:	4b13      	ldr	r3, [pc, #76]	; (800adb8 <__ieee754_pow+0x260>)
 800ad6a:	dd0c      	ble.n	800ad86 <__ieee754_pow+0x22e>
 800ad6c:	429c      	cmp	r4, r3
 800ad6e:	dc0f      	bgt.n	800ad90 <__ieee754_pow+0x238>
 800ad70:	f1b9 0f00 	cmp.w	r9, #0
 800ad74:	da0f      	bge.n	800ad96 <__ieee754_pow+0x23e>
 800ad76:	2000      	movs	r0, #0
 800ad78:	b009      	add	sp, #36	; 0x24
 800ad7a:	ecbd 8b06 	vpop	{d8-d10}
 800ad7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad82:	f000 bcf0 	b.w	800b766 <__math_oflow>
 800ad86:	429c      	cmp	r4, r3
 800ad88:	dbf2      	blt.n	800ad70 <__ieee754_pow+0x218>
 800ad8a:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <__ieee754_pow+0x25c>)
 800ad8c:	429c      	cmp	r4, r3
 800ad8e:	dd19      	ble.n	800adc4 <__ieee754_pow+0x26c>
 800ad90:	f1b9 0f00 	cmp.w	r9, #0
 800ad94:	dcef      	bgt.n	800ad76 <__ieee754_pow+0x21e>
 800ad96:	2000      	movs	r0, #0
 800ad98:	b009      	add	sp, #36	; 0x24
 800ad9a:	ecbd 8b06 	vpop	{d8-d10}
 800ad9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada2:	f000 bcd7 	b.w	800b754 <__math_uflow>
 800ada6:	bf00      	nop
 800ada8:	fff00000 	.word	0xfff00000
 800adac:	7ff00000 	.word	0x7ff00000
 800adb0:	433fffff 	.word	0x433fffff
 800adb4:	3ff00000 	.word	0x3ff00000
 800adb8:	3fefffff 	.word	0x3fefffff
 800adbc:	3fe00000 	.word	0x3fe00000
 800adc0:	41e00000 	.word	0x41e00000
 800adc4:	4b60      	ldr	r3, [pc, #384]	; (800af48 <__ieee754_pow+0x3f0>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	f7f5 fa16 	bl	80001f8 <__aeabi_dsub>
 800adcc:	a354      	add	r3, pc, #336	; (adr r3, 800af20 <__ieee754_pow+0x3c8>)
 800adce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add2:	4604      	mov	r4, r0
 800add4:	460d      	mov	r5, r1
 800add6:	f7f5 fbc7 	bl	8000568 <__aeabi_dmul>
 800adda:	a353      	add	r3, pc, #332	; (adr r3, 800af28 <__ieee754_pow+0x3d0>)
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	4606      	mov	r6, r0
 800ade2:	460f      	mov	r7, r1
 800ade4:	4620      	mov	r0, r4
 800ade6:	4629      	mov	r1, r5
 800ade8:	f7f5 fbbe 	bl	8000568 <__aeabi_dmul>
 800adec:	4b57      	ldr	r3, [pc, #348]	; (800af4c <__ieee754_pow+0x3f4>)
 800adee:	4682      	mov	sl, r0
 800adf0:	468b      	mov	fp, r1
 800adf2:	2200      	movs	r2, #0
 800adf4:	4620      	mov	r0, r4
 800adf6:	4629      	mov	r1, r5
 800adf8:	f7f5 fbb6 	bl	8000568 <__aeabi_dmul>
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	a14b      	add	r1, pc, #300	; (adr r1, 800af30 <__ieee754_pow+0x3d8>)
 800ae02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae06:	f7f5 f9f7 	bl	80001f8 <__aeabi_dsub>
 800ae0a:	4622      	mov	r2, r4
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	f7f5 fbab 	bl	8000568 <__aeabi_dmul>
 800ae12:	4602      	mov	r2, r0
 800ae14:	460b      	mov	r3, r1
 800ae16:	2000      	movs	r0, #0
 800ae18:	494d      	ldr	r1, [pc, #308]	; (800af50 <__ieee754_pow+0x3f8>)
 800ae1a:	f7f5 f9ed 	bl	80001f8 <__aeabi_dsub>
 800ae1e:	4622      	mov	r2, r4
 800ae20:	4680      	mov	r8, r0
 800ae22:	4689      	mov	r9, r1
 800ae24:	462b      	mov	r3, r5
 800ae26:	4620      	mov	r0, r4
 800ae28:	4629      	mov	r1, r5
 800ae2a:	f7f5 fb9d 	bl	8000568 <__aeabi_dmul>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4640      	mov	r0, r8
 800ae34:	4649      	mov	r1, r9
 800ae36:	f7f5 fb97 	bl	8000568 <__aeabi_dmul>
 800ae3a:	a33f      	add	r3, pc, #252	; (adr r3, 800af38 <__ieee754_pow+0x3e0>)
 800ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae40:	f7f5 fb92 	bl	8000568 <__aeabi_dmul>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	4650      	mov	r0, sl
 800ae4a:	4659      	mov	r1, fp
 800ae4c:	f7f5 f9d4 	bl	80001f8 <__aeabi_dsub>
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	4680      	mov	r8, r0
 800ae56:	4689      	mov	r9, r1
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	f7f5 f9ce 	bl	80001fc <__adddf3>
 800ae60:	2000      	movs	r0, #0
 800ae62:	4632      	mov	r2, r6
 800ae64:	463b      	mov	r3, r7
 800ae66:	4604      	mov	r4, r0
 800ae68:	460d      	mov	r5, r1
 800ae6a:	f7f5 f9c5 	bl	80001f8 <__aeabi_dsub>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	4640      	mov	r0, r8
 800ae74:	4649      	mov	r1, r9
 800ae76:	f7f5 f9bf 	bl	80001f8 <__aeabi_dsub>
 800ae7a:	9b04      	ldr	r3, [sp, #16]
 800ae7c:	9a06      	ldr	r2, [sp, #24]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	4313      	orrs	r3, r2
 800ae82:	4682      	mov	sl, r0
 800ae84:	468b      	mov	fp, r1
 800ae86:	f040 81e7 	bne.w	800b258 <__ieee754_pow+0x700>
 800ae8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800af40 <__ieee754_pow+0x3e8>
 800ae8e:	eeb0 8a47 	vmov.f32	s16, s14
 800ae92:	eef0 8a67 	vmov.f32	s17, s15
 800ae96:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ae9a:	2600      	movs	r6, #0
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	463b      	mov	r3, r7
 800aea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aea4:	f7f5 f9a8 	bl	80001f8 <__aeabi_dsub>
 800aea8:	4622      	mov	r2, r4
 800aeaa:	462b      	mov	r3, r5
 800aeac:	f7f5 fb5c 	bl	8000568 <__aeabi_dmul>
 800aeb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	4689      	mov	r9, r1
 800aeb8:	4650      	mov	r0, sl
 800aeba:	4659      	mov	r1, fp
 800aebc:	f7f5 fb54 	bl	8000568 <__aeabi_dmul>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	4640      	mov	r0, r8
 800aec6:	4649      	mov	r1, r9
 800aec8:	f7f5 f998 	bl	80001fc <__adddf3>
 800aecc:	4632      	mov	r2, r6
 800aece:	463b      	mov	r3, r7
 800aed0:	4680      	mov	r8, r0
 800aed2:	4689      	mov	r9, r1
 800aed4:	4620      	mov	r0, r4
 800aed6:	4629      	mov	r1, r5
 800aed8:	f7f5 fb46 	bl	8000568 <__aeabi_dmul>
 800aedc:	460b      	mov	r3, r1
 800aede:	4604      	mov	r4, r0
 800aee0:	460d      	mov	r5, r1
 800aee2:	4602      	mov	r2, r0
 800aee4:	4649      	mov	r1, r9
 800aee6:	4640      	mov	r0, r8
 800aee8:	f7f5 f988 	bl	80001fc <__adddf3>
 800aeec:	4b19      	ldr	r3, [pc, #100]	; (800af54 <__ieee754_pow+0x3fc>)
 800aeee:	4299      	cmp	r1, r3
 800aef0:	ec45 4b19 	vmov	d9, r4, r5
 800aef4:	4606      	mov	r6, r0
 800aef6:	460f      	mov	r7, r1
 800aef8:	468b      	mov	fp, r1
 800aefa:	f340 82f1 	ble.w	800b4e0 <__ieee754_pow+0x988>
 800aefe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800af02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800af06:	4303      	orrs	r3, r0
 800af08:	f000 81e4 	beq.w	800b2d4 <__ieee754_pow+0x77c>
 800af0c:	ec51 0b18 	vmov	r0, r1, d8
 800af10:	2200      	movs	r2, #0
 800af12:	2300      	movs	r3, #0
 800af14:	f7f5 fd9a 	bl	8000a4c <__aeabi_dcmplt>
 800af18:	3800      	subs	r0, #0
 800af1a:	bf18      	it	ne
 800af1c:	2001      	movne	r0, #1
 800af1e:	e72b      	b.n	800ad78 <__ieee754_pow+0x220>
 800af20:	60000000 	.word	0x60000000
 800af24:	3ff71547 	.word	0x3ff71547
 800af28:	f85ddf44 	.word	0xf85ddf44
 800af2c:	3e54ae0b 	.word	0x3e54ae0b
 800af30:	55555555 	.word	0x55555555
 800af34:	3fd55555 	.word	0x3fd55555
 800af38:	652b82fe 	.word	0x652b82fe
 800af3c:	3ff71547 	.word	0x3ff71547
 800af40:	00000000 	.word	0x00000000
 800af44:	bff00000 	.word	0xbff00000
 800af48:	3ff00000 	.word	0x3ff00000
 800af4c:	3fd00000 	.word	0x3fd00000
 800af50:	3fe00000 	.word	0x3fe00000
 800af54:	408fffff 	.word	0x408fffff
 800af58:	4bd5      	ldr	r3, [pc, #852]	; (800b2b0 <__ieee754_pow+0x758>)
 800af5a:	402b      	ands	r3, r5
 800af5c:	2200      	movs	r2, #0
 800af5e:	b92b      	cbnz	r3, 800af6c <__ieee754_pow+0x414>
 800af60:	4bd4      	ldr	r3, [pc, #848]	; (800b2b4 <__ieee754_pow+0x75c>)
 800af62:	f7f5 fb01 	bl	8000568 <__aeabi_dmul>
 800af66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800af6a:	460c      	mov	r4, r1
 800af6c:	1523      	asrs	r3, r4, #20
 800af6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af72:	4413      	add	r3, r2
 800af74:	9305      	str	r3, [sp, #20]
 800af76:	4bd0      	ldr	r3, [pc, #832]	; (800b2b8 <__ieee754_pow+0x760>)
 800af78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800af7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800af80:	429c      	cmp	r4, r3
 800af82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800af86:	dd08      	ble.n	800af9a <__ieee754_pow+0x442>
 800af88:	4bcc      	ldr	r3, [pc, #816]	; (800b2bc <__ieee754_pow+0x764>)
 800af8a:	429c      	cmp	r4, r3
 800af8c:	f340 8162 	ble.w	800b254 <__ieee754_pow+0x6fc>
 800af90:	9b05      	ldr	r3, [sp, #20]
 800af92:	3301      	adds	r3, #1
 800af94:	9305      	str	r3, [sp, #20]
 800af96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800af9a:	2400      	movs	r4, #0
 800af9c:	00e3      	lsls	r3, r4, #3
 800af9e:	9307      	str	r3, [sp, #28]
 800afa0:	4bc7      	ldr	r3, [pc, #796]	; (800b2c0 <__ieee754_pow+0x768>)
 800afa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afa6:	ed93 7b00 	vldr	d7, [r3]
 800afaa:	4629      	mov	r1, r5
 800afac:	ec53 2b17 	vmov	r2, r3, d7
 800afb0:	eeb0 9a47 	vmov.f32	s18, s14
 800afb4:	eef0 9a67 	vmov.f32	s19, s15
 800afb8:	4682      	mov	sl, r0
 800afba:	f7f5 f91d 	bl	80001f8 <__aeabi_dsub>
 800afbe:	4652      	mov	r2, sl
 800afc0:	4606      	mov	r6, r0
 800afc2:	460f      	mov	r7, r1
 800afc4:	462b      	mov	r3, r5
 800afc6:	ec51 0b19 	vmov	r0, r1, d9
 800afca:	f7f5 f917 	bl	80001fc <__adddf3>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	2000      	movs	r0, #0
 800afd4:	49bb      	ldr	r1, [pc, #748]	; (800b2c4 <__ieee754_pow+0x76c>)
 800afd6:	f7f5 fbf1 	bl	80007bc <__aeabi_ddiv>
 800afda:	ec41 0b1a 	vmov	d10, r0, r1
 800afde:	4602      	mov	r2, r0
 800afe0:	460b      	mov	r3, r1
 800afe2:	4630      	mov	r0, r6
 800afe4:	4639      	mov	r1, r7
 800afe6:	f7f5 fabf 	bl	8000568 <__aeabi_dmul>
 800afea:	2300      	movs	r3, #0
 800afec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aff0:	9302      	str	r3, [sp, #8]
 800aff2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aff6:	46ab      	mov	fp, r5
 800aff8:	106d      	asrs	r5, r5, #1
 800affa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800affe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b002:	ec41 0b18 	vmov	d8, r0, r1
 800b006:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b00a:	2200      	movs	r2, #0
 800b00c:	4640      	mov	r0, r8
 800b00e:	4649      	mov	r1, r9
 800b010:	4614      	mov	r4, r2
 800b012:	461d      	mov	r5, r3
 800b014:	f7f5 faa8 	bl	8000568 <__aeabi_dmul>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	f7f5 f8ea 	bl	80001f8 <__aeabi_dsub>
 800b024:	ec53 2b19 	vmov	r2, r3, d9
 800b028:	4606      	mov	r6, r0
 800b02a:	460f      	mov	r7, r1
 800b02c:	4620      	mov	r0, r4
 800b02e:	4629      	mov	r1, r5
 800b030:	f7f5 f8e2 	bl	80001f8 <__aeabi_dsub>
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	4650      	mov	r0, sl
 800b03a:	4659      	mov	r1, fp
 800b03c:	f7f5 f8dc 	bl	80001f8 <__aeabi_dsub>
 800b040:	4642      	mov	r2, r8
 800b042:	464b      	mov	r3, r9
 800b044:	f7f5 fa90 	bl	8000568 <__aeabi_dmul>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4630      	mov	r0, r6
 800b04e:	4639      	mov	r1, r7
 800b050:	f7f5 f8d2 	bl	80001f8 <__aeabi_dsub>
 800b054:	ec53 2b1a 	vmov	r2, r3, d10
 800b058:	f7f5 fa86 	bl	8000568 <__aeabi_dmul>
 800b05c:	ec53 2b18 	vmov	r2, r3, d8
 800b060:	ec41 0b19 	vmov	d9, r0, r1
 800b064:	ec51 0b18 	vmov	r0, r1, d8
 800b068:	f7f5 fa7e 	bl	8000568 <__aeabi_dmul>
 800b06c:	a37c      	add	r3, pc, #496	; (adr r3, 800b260 <__ieee754_pow+0x708>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	4604      	mov	r4, r0
 800b074:	460d      	mov	r5, r1
 800b076:	f7f5 fa77 	bl	8000568 <__aeabi_dmul>
 800b07a:	a37b      	add	r3, pc, #492	; (adr r3, 800b268 <__ieee754_pow+0x710>)
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	f7f5 f8bc 	bl	80001fc <__adddf3>
 800b084:	4622      	mov	r2, r4
 800b086:	462b      	mov	r3, r5
 800b088:	f7f5 fa6e 	bl	8000568 <__aeabi_dmul>
 800b08c:	a378      	add	r3, pc, #480	; (adr r3, 800b270 <__ieee754_pow+0x718>)
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	f7f5 f8b3 	bl	80001fc <__adddf3>
 800b096:	4622      	mov	r2, r4
 800b098:	462b      	mov	r3, r5
 800b09a:	f7f5 fa65 	bl	8000568 <__aeabi_dmul>
 800b09e:	a376      	add	r3, pc, #472	; (adr r3, 800b278 <__ieee754_pow+0x720>)
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f7f5 f8aa 	bl	80001fc <__adddf3>
 800b0a8:	4622      	mov	r2, r4
 800b0aa:	462b      	mov	r3, r5
 800b0ac:	f7f5 fa5c 	bl	8000568 <__aeabi_dmul>
 800b0b0:	a373      	add	r3, pc, #460	; (adr r3, 800b280 <__ieee754_pow+0x728>)
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	f7f5 f8a1 	bl	80001fc <__adddf3>
 800b0ba:	4622      	mov	r2, r4
 800b0bc:	462b      	mov	r3, r5
 800b0be:	f7f5 fa53 	bl	8000568 <__aeabi_dmul>
 800b0c2:	a371      	add	r3, pc, #452	; (adr r3, 800b288 <__ieee754_pow+0x730>)
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	f7f5 f898 	bl	80001fc <__adddf3>
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	460f      	mov	r7, r1
 800b0d2:	462b      	mov	r3, r5
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	f7f5 fa46 	bl	8000568 <__aeabi_dmul>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	4639      	mov	r1, r7
 800b0e4:	f7f5 fa40 	bl	8000568 <__aeabi_dmul>
 800b0e8:	4642      	mov	r2, r8
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	460d      	mov	r5, r1
 800b0ee:	464b      	mov	r3, r9
 800b0f0:	ec51 0b18 	vmov	r0, r1, d8
 800b0f4:	f7f5 f882 	bl	80001fc <__adddf3>
 800b0f8:	ec53 2b19 	vmov	r2, r3, d9
 800b0fc:	f7f5 fa34 	bl	8000568 <__aeabi_dmul>
 800b100:	4622      	mov	r2, r4
 800b102:	462b      	mov	r3, r5
 800b104:	f7f5 f87a 	bl	80001fc <__adddf3>
 800b108:	4642      	mov	r2, r8
 800b10a:	4682      	mov	sl, r0
 800b10c:	468b      	mov	fp, r1
 800b10e:	464b      	mov	r3, r9
 800b110:	4640      	mov	r0, r8
 800b112:	4649      	mov	r1, r9
 800b114:	f7f5 fa28 	bl	8000568 <__aeabi_dmul>
 800b118:	4b6b      	ldr	r3, [pc, #428]	; (800b2c8 <__ieee754_pow+0x770>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	4606      	mov	r6, r0
 800b11e:	460f      	mov	r7, r1
 800b120:	f7f5 f86c 	bl	80001fc <__adddf3>
 800b124:	4652      	mov	r2, sl
 800b126:	465b      	mov	r3, fp
 800b128:	f7f5 f868 	bl	80001fc <__adddf3>
 800b12c:	2000      	movs	r0, #0
 800b12e:	4604      	mov	r4, r0
 800b130:	460d      	mov	r5, r1
 800b132:	4602      	mov	r2, r0
 800b134:	460b      	mov	r3, r1
 800b136:	4640      	mov	r0, r8
 800b138:	4649      	mov	r1, r9
 800b13a:	f7f5 fa15 	bl	8000568 <__aeabi_dmul>
 800b13e:	4b62      	ldr	r3, [pc, #392]	; (800b2c8 <__ieee754_pow+0x770>)
 800b140:	4680      	mov	r8, r0
 800b142:	4689      	mov	r9, r1
 800b144:	2200      	movs	r2, #0
 800b146:	4620      	mov	r0, r4
 800b148:	4629      	mov	r1, r5
 800b14a:	f7f5 f855 	bl	80001f8 <__aeabi_dsub>
 800b14e:	4632      	mov	r2, r6
 800b150:	463b      	mov	r3, r7
 800b152:	f7f5 f851 	bl	80001f8 <__aeabi_dsub>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	4650      	mov	r0, sl
 800b15c:	4659      	mov	r1, fp
 800b15e:	f7f5 f84b 	bl	80001f8 <__aeabi_dsub>
 800b162:	ec53 2b18 	vmov	r2, r3, d8
 800b166:	f7f5 f9ff 	bl	8000568 <__aeabi_dmul>
 800b16a:	4622      	mov	r2, r4
 800b16c:	4606      	mov	r6, r0
 800b16e:	460f      	mov	r7, r1
 800b170:	462b      	mov	r3, r5
 800b172:	ec51 0b19 	vmov	r0, r1, d9
 800b176:	f7f5 f9f7 	bl	8000568 <__aeabi_dmul>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	4630      	mov	r0, r6
 800b180:	4639      	mov	r1, r7
 800b182:	f7f5 f83b 	bl	80001fc <__adddf3>
 800b186:	4606      	mov	r6, r0
 800b188:	460f      	mov	r7, r1
 800b18a:	4602      	mov	r2, r0
 800b18c:	460b      	mov	r3, r1
 800b18e:	4640      	mov	r0, r8
 800b190:	4649      	mov	r1, r9
 800b192:	f7f5 f833 	bl	80001fc <__adddf3>
 800b196:	a33e      	add	r3, pc, #248	; (adr r3, 800b290 <__ieee754_pow+0x738>)
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	2000      	movs	r0, #0
 800b19e:	4604      	mov	r4, r0
 800b1a0:	460d      	mov	r5, r1
 800b1a2:	f7f5 f9e1 	bl	8000568 <__aeabi_dmul>
 800b1a6:	4642      	mov	r2, r8
 800b1a8:	ec41 0b18 	vmov	d8, r0, r1
 800b1ac:	464b      	mov	r3, r9
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	f7f5 f821 	bl	80001f8 <__aeabi_dsub>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	4639      	mov	r1, r7
 800b1be:	f7f5 f81b 	bl	80001f8 <__aeabi_dsub>
 800b1c2:	a335      	add	r3, pc, #212	; (adr r3, 800b298 <__ieee754_pow+0x740>)
 800b1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c8:	f7f5 f9ce 	bl	8000568 <__aeabi_dmul>
 800b1cc:	a334      	add	r3, pc, #208	; (adr r3, 800b2a0 <__ieee754_pow+0x748>)
 800b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	460f      	mov	r7, r1
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	4629      	mov	r1, r5
 800b1da:	f7f5 f9c5 	bl	8000568 <__aeabi_dmul>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	f7f5 f809 	bl	80001fc <__adddf3>
 800b1ea:	9a07      	ldr	r2, [sp, #28]
 800b1ec:	4b37      	ldr	r3, [pc, #220]	; (800b2cc <__ieee754_pow+0x774>)
 800b1ee:	4413      	add	r3, r2
 800b1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f4:	f7f5 f802 	bl	80001fc <__adddf3>
 800b1f8:	4682      	mov	sl, r0
 800b1fa:	9805      	ldr	r0, [sp, #20]
 800b1fc:	468b      	mov	fp, r1
 800b1fe:	f7f5 f949 	bl	8000494 <__aeabi_i2d>
 800b202:	9a07      	ldr	r2, [sp, #28]
 800b204:	4b32      	ldr	r3, [pc, #200]	; (800b2d0 <__ieee754_pow+0x778>)
 800b206:	4413      	add	r3, r2
 800b208:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b20c:	4606      	mov	r6, r0
 800b20e:	460f      	mov	r7, r1
 800b210:	4652      	mov	r2, sl
 800b212:	465b      	mov	r3, fp
 800b214:	ec51 0b18 	vmov	r0, r1, d8
 800b218:	f7f4 fff0 	bl	80001fc <__adddf3>
 800b21c:	4642      	mov	r2, r8
 800b21e:	464b      	mov	r3, r9
 800b220:	f7f4 ffec 	bl	80001fc <__adddf3>
 800b224:	4632      	mov	r2, r6
 800b226:	463b      	mov	r3, r7
 800b228:	f7f4 ffe8 	bl	80001fc <__adddf3>
 800b22c:	2000      	movs	r0, #0
 800b22e:	4632      	mov	r2, r6
 800b230:	463b      	mov	r3, r7
 800b232:	4604      	mov	r4, r0
 800b234:	460d      	mov	r5, r1
 800b236:	f7f4 ffdf 	bl	80001f8 <__aeabi_dsub>
 800b23a:	4642      	mov	r2, r8
 800b23c:	464b      	mov	r3, r9
 800b23e:	f7f4 ffdb 	bl	80001f8 <__aeabi_dsub>
 800b242:	ec53 2b18 	vmov	r2, r3, d8
 800b246:	f7f4 ffd7 	bl	80001f8 <__aeabi_dsub>
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	4650      	mov	r0, sl
 800b250:	4659      	mov	r1, fp
 800b252:	e610      	b.n	800ae76 <__ieee754_pow+0x31e>
 800b254:	2401      	movs	r4, #1
 800b256:	e6a1      	b.n	800af9c <__ieee754_pow+0x444>
 800b258:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b2a8 <__ieee754_pow+0x750>
 800b25c:	e617      	b.n	800ae8e <__ieee754_pow+0x336>
 800b25e:	bf00      	nop
 800b260:	4a454eef 	.word	0x4a454eef
 800b264:	3fca7e28 	.word	0x3fca7e28
 800b268:	93c9db65 	.word	0x93c9db65
 800b26c:	3fcd864a 	.word	0x3fcd864a
 800b270:	a91d4101 	.word	0xa91d4101
 800b274:	3fd17460 	.word	0x3fd17460
 800b278:	518f264d 	.word	0x518f264d
 800b27c:	3fd55555 	.word	0x3fd55555
 800b280:	db6fabff 	.word	0xdb6fabff
 800b284:	3fdb6db6 	.word	0x3fdb6db6
 800b288:	33333303 	.word	0x33333303
 800b28c:	3fe33333 	.word	0x3fe33333
 800b290:	e0000000 	.word	0xe0000000
 800b294:	3feec709 	.word	0x3feec709
 800b298:	dc3a03fd 	.word	0xdc3a03fd
 800b29c:	3feec709 	.word	0x3feec709
 800b2a0:	145b01f5 	.word	0x145b01f5
 800b2a4:	be3e2fe0 	.word	0xbe3e2fe0
 800b2a8:	00000000 	.word	0x00000000
 800b2ac:	3ff00000 	.word	0x3ff00000
 800b2b0:	7ff00000 	.word	0x7ff00000
 800b2b4:	43400000 	.word	0x43400000
 800b2b8:	0003988e 	.word	0x0003988e
 800b2bc:	000bb679 	.word	0x000bb679
 800b2c0:	080108d8 	.word	0x080108d8
 800b2c4:	3ff00000 	.word	0x3ff00000
 800b2c8:	40080000 	.word	0x40080000
 800b2cc:	080108f8 	.word	0x080108f8
 800b2d0:	080108e8 	.word	0x080108e8
 800b2d4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b5ac <__ieee754_pow+0xa54>)
 800b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2da:	4640      	mov	r0, r8
 800b2dc:	4649      	mov	r1, r9
 800b2de:	f7f4 ff8d 	bl	80001fc <__adddf3>
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	ec41 0b1a 	vmov	d10, r0, r1
 800b2e8:	462b      	mov	r3, r5
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	f7f4 ff83 	bl	80001f8 <__aeabi_dsub>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	ec51 0b1a 	vmov	r0, r1, d10
 800b2fa:	f7f5 fbc5 	bl	8000a88 <__aeabi_dcmpgt>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f47f ae04 	bne.w	800af0c <__ieee754_pow+0x3b4>
 800b304:	4aa4      	ldr	r2, [pc, #656]	; (800b598 <__ieee754_pow+0xa40>)
 800b306:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b30a:	4293      	cmp	r3, r2
 800b30c:	f340 8108 	ble.w	800b520 <__ieee754_pow+0x9c8>
 800b310:	151b      	asrs	r3, r3, #20
 800b312:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b316:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b31a:	fa4a f303 	asr.w	r3, sl, r3
 800b31e:	445b      	add	r3, fp
 800b320:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b324:	4e9d      	ldr	r6, [pc, #628]	; (800b59c <__ieee754_pow+0xa44>)
 800b326:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b32a:	4116      	asrs	r6, r2
 800b32c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b330:	2000      	movs	r0, #0
 800b332:	ea23 0106 	bic.w	r1, r3, r6
 800b336:	f1c2 0214 	rsb	r2, r2, #20
 800b33a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b33e:	fa4a fa02 	asr.w	sl, sl, r2
 800b342:	f1bb 0f00 	cmp.w	fp, #0
 800b346:	4602      	mov	r2, r0
 800b348:	460b      	mov	r3, r1
 800b34a:	4620      	mov	r0, r4
 800b34c:	4629      	mov	r1, r5
 800b34e:	bfb8      	it	lt
 800b350:	f1ca 0a00 	rsblt	sl, sl, #0
 800b354:	f7f4 ff50 	bl	80001f8 <__aeabi_dsub>
 800b358:	ec41 0b19 	vmov	d9, r0, r1
 800b35c:	4642      	mov	r2, r8
 800b35e:	464b      	mov	r3, r9
 800b360:	ec51 0b19 	vmov	r0, r1, d9
 800b364:	f7f4 ff4a 	bl	80001fc <__adddf3>
 800b368:	a37b      	add	r3, pc, #492	; (adr r3, 800b558 <__ieee754_pow+0xa00>)
 800b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36e:	2000      	movs	r0, #0
 800b370:	4604      	mov	r4, r0
 800b372:	460d      	mov	r5, r1
 800b374:	f7f5 f8f8 	bl	8000568 <__aeabi_dmul>
 800b378:	ec53 2b19 	vmov	r2, r3, d9
 800b37c:	4606      	mov	r6, r0
 800b37e:	460f      	mov	r7, r1
 800b380:	4620      	mov	r0, r4
 800b382:	4629      	mov	r1, r5
 800b384:	f7f4 ff38 	bl	80001f8 <__aeabi_dsub>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4640      	mov	r0, r8
 800b38e:	4649      	mov	r1, r9
 800b390:	f7f4 ff32 	bl	80001f8 <__aeabi_dsub>
 800b394:	a372      	add	r3, pc, #456	; (adr r3, 800b560 <__ieee754_pow+0xa08>)
 800b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39a:	f7f5 f8e5 	bl	8000568 <__aeabi_dmul>
 800b39e:	a372      	add	r3, pc, #456	; (adr r3, 800b568 <__ieee754_pow+0xa10>)
 800b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	4689      	mov	r9, r1
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	f7f5 f8dc 	bl	8000568 <__aeabi_dmul>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	f7f4 ff20 	bl	80001fc <__adddf3>
 800b3bc:	4604      	mov	r4, r0
 800b3be:	460d      	mov	r5, r1
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	4639      	mov	r1, r7
 800b3c8:	f7f4 ff18 	bl	80001fc <__adddf3>
 800b3cc:	4632      	mov	r2, r6
 800b3ce:	463b      	mov	r3, r7
 800b3d0:	4680      	mov	r8, r0
 800b3d2:	4689      	mov	r9, r1
 800b3d4:	f7f4 ff10 	bl	80001f8 <__aeabi_dsub>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	4620      	mov	r0, r4
 800b3de:	4629      	mov	r1, r5
 800b3e0:	f7f4 ff0a 	bl	80001f8 <__aeabi_dsub>
 800b3e4:	4642      	mov	r2, r8
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	460f      	mov	r7, r1
 800b3ea:	464b      	mov	r3, r9
 800b3ec:	4640      	mov	r0, r8
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	f7f5 f8ba 	bl	8000568 <__aeabi_dmul>
 800b3f4:	a35e      	add	r3, pc, #376	; (adr r3, 800b570 <__ieee754_pow+0xa18>)
 800b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	460d      	mov	r5, r1
 800b3fe:	f7f5 f8b3 	bl	8000568 <__aeabi_dmul>
 800b402:	a35d      	add	r3, pc, #372	; (adr r3, 800b578 <__ieee754_pow+0xa20>)
 800b404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b408:	f7f4 fef6 	bl	80001f8 <__aeabi_dsub>
 800b40c:	4622      	mov	r2, r4
 800b40e:	462b      	mov	r3, r5
 800b410:	f7f5 f8aa 	bl	8000568 <__aeabi_dmul>
 800b414:	a35a      	add	r3, pc, #360	; (adr r3, 800b580 <__ieee754_pow+0xa28>)
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	f7f4 feef 	bl	80001fc <__adddf3>
 800b41e:	4622      	mov	r2, r4
 800b420:	462b      	mov	r3, r5
 800b422:	f7f5 f8a1 	bl	8000568 <__aeabi_dmul>
 800b426:	a358      	add	r3, pc, #352	; (adr r3, 800b588 <__ieee754_pow+0xa30>)
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	f7f4 fee4 	bl	80001f8 <__aeabi_dsub>
 800b430:	4622      	mov	r2, r4
 800b432:	462b      	mov	r3, r5
 800b434:	f7f5 f898 	bl	8000568 <__aeabi_dmul>
 800b438:	a355      	add	r3, pc, #340	; (adr r3, 800b590 <__ieee754_pow+0xa38>)
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	f7f4 fedd 	bl	80001fc <__adddf3>
 800b442:	4622      	mov	r2, r4
 800b444:	462b      	mov	r3, r5
 800b446:	f7f5 f88f 	bl	8000568 <__aeabi_dmul>
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	4640      	mov	r0, r8
 800b450:	4649      	mov	r1, r9
 800b452:	f7f4 fed1 	bl	80001f8 <__aeabi_dsub>
 800b456:	4604      	mov	r4, r0
 800b458:	460d      	mov	r5, r1
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	4640      	mov	r0, r8
 800b460:	4649      	mov	r1, r9
 800b462:	f7f5 f881 	bl	8000568 <__aeabi_dmul>
 800b466:	2200      	movs	r2, #0
 800b468:	ec41 0b19 	vmov	d9, r0, r1
 800b46c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b470:	4620      	mov	r0, r4
 800b472:	4629      	mov	r1, r5
 800b474:	f7f4 fec0 	bl	80001f8 <__aeabi_dsub>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	ec51 0b19 	vmov	r0, r1, d9
 800b480:	f7f5 f99c 	bl	80007bc <__aeabi_ddiv>
 800b484:	4632      	mov	r2, r6
 800b486:	4604      	mov	r4, r0
 800b488:	460d      	mov	r5, r1
 800b48a:	463b      	mov	r3, r7
 800b48c:	4640      	mov	r0, r8
 800b48e:	4649      	mov	r1, r9
 800b490:	f7f5 f86a 	bl	8000568 <__aeabi_dmul>
 800b494:	4632      	mov	r2, r6
 800b496:	463b      	mov	r3, r7
 800b498:	f7f4 feb0 	bl	80001fc <__adddf3>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	4629      	mov	r1, r5
 800b4a4:	f7f4 fea8 	bl	80001f8 <__aeabi_dsub>
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	464b      	mov	r3, r9
 800b4ac:	f7f4 fea4 	bl	80001f8 <__aeabi_dsub>
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	493a      	ldr	r1, [pc, #232]	; (800b5a0 <__ieee754_pow+0xa48>)
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	f7f4 fe9e 	bl	80001f8 <__aeabi_dsub>
 800b4bc:	ec41 0b10 	vmov	d0, r0, r1
 800b4c0:	ee10 3a90 	vmov	r3, s1
 800b4c4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b4c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4cc:	da2b      	bge.n	800b526 <__ieee754_pow+0x9ce>
 800b4ce:	4650      	mov	r0, sl
 800b4d0:	f000 f966 	bl	800b7a0 <scalbn>
 800b4d4:	ec51 0b10 	vmov	r0, r1, d0
 800b4d8:	ec53 2b18 	vmov	r2, r3, d8
 800b4dc:	f7ff bbed 	b.w	800acba <__ieee754_pow+0x162>
 800b4e0:	4b30      	ldr	r3, [pc, #192]	; (800b5a4 <__ieee754_pow+0xa4c>)
 800b4e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b4e6:	429e      	cmp	r6, r3
 800b4e8:	f77f af0c 	ble.w	800b304 <__ieee754_pow+0x7ac>
 800b4ec:	4b2e      	ldr	r3, [pc, #184]	; (800b5a8 <__ieee754_pow+0xa50>)
 800b4ee:	440b      	add	r3, r1
 800b4f0:	4303      	orrs	r3, r0
 800b4f2:	d009      	beq.n	800b508 <__ieee754_pow+0x9b0>
 800b4f4:	ec51 0b18 	vmov	r0, r1, d8
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	f7f5 faa6 	bl	8000a4c <__aeabi_dcmplt>
 800b500:	3800      	subs	r0, #0
 800b502:	bf18      	it	ne
 800b504:	2001      	movne	r0, #1
 800b506:	e447      	b.n	800ad98 <__ieee754_pow+0x240>
 800b508:	4622      	mov	r2, r4
 800b50a:	462b      	mov	r3, r5
 800b50c:	f7f4 fe74 	bl	80001f8 <__aeabi_dsub>
 800b510:	4642      	mov	r2, r8
 800b512:	464b      	mov	r3, r9
 800b514:	f7f5 faae 	bl	8000a74 <__aeabi_dcmpge>
 800b518:	2800      	cmp	r0, #0
 800b51a:	f43f aef3 	beq.w	800b304 <__ieee754_pow+0x7ac>
 800b51e:	e7e9      	b.n	800b4f4 <__ieee754_pow+0x99c>
 800b520:	f04f 0a00 	mov.w	sl, #0
 800b524:	e71a      	b.n	800b35c <__ieee754_pow+0x804>
 800b526:	ec51 0b10 	vmov	r0, r1, d0
 800b52a:	4619      	mov	r1, r3
 800b52c:	e7d4      	b.n	800b4d8 <__ieee754_pow+0x980>
 800b52e:	491c      	ldr	r1, [pc, #112]	; (800b5a0 <__ieee754_pow+0xa48>)
 800b530:	2000      	movs	r0, #0
 800b532:	f7ff bb30 	b.w	800ab96 <__ieee754_pow+0x3e>
 800b536:	2000      	movs	r0, #0
 800b538:	2100      	movs	r1, #0
 800b53a:	f7ff bb2c 	b.w	800ab96 <__ieee754_pow+0x3e>
 800b53e:	4630      	mov	r0, r6
 800b540:	4639      	mov	r1, r7
 800b542:	f7ff bb28 	b.w	800ab96 <__ieee754_pow+0x3e>
 800b546:	9204      	str	r2, [sp, #16]
 800b548:	f7ff bb7a 	b.w	800ac40 <__ieee754_pow+0xe8>
 800b54c:	2300      	movs	r3, #0
 800b54e:	f7ff bb64 	b.w	800ac1a <__ieee754_pow+0xc2>
 800b552:	bf00      	nop
 800b554:	f3af 8000 	nop.w
 800b558:	00000000 	.word	0x00000000
 800b55c:	3fe62e43 	.word	0x3fe62e43
 800b560:	fefa39ef 	.word	0xfefa39ef
 800b564:	3fe62e42 	.word	0x3fe62e42
 800b568:	0ca86c39 	.word	0x0ca86c39
 800b56c:	be205c61 	.word	0xbe205c61
 800b570:	72bea4d0 	.word	0x72bea4d0
 800b574:	3e663769 	.word	0x3e663769
 800b578:	c5d26bf1 	.word	0xc5d26bf1
 800b57c:	3ebbbd41 	.word	0x3ebbbd41
 800b580:	af25de2c 	.word	0xaf25de2c
 800b584:	3f11566a 	.word	0x3f11566a
 800b588:	16bebd93 	.word	0x16bebd93
 800b58c:	3f66c16c 	.word	0x3f66c16c
 800b590:	5555553e 	.word	0x5555553e
 800b594:	3fc55555 	.word	0x3fc55555
 800b598:	3fe00000 	.word	0x3fe00000
 800b59c:	000fffff 	.word	0x000fffff
 800b5a0:	3ff00000 	.word	0x3ff00000
 800b5a4:	4090cbff 	.word	0x4090cbff
 800b5a8:	3f6f3400 	.word	0x3f6f3400
 800b5ac:	652b82fe 	.word	0x652b82fe
 800b5b0:	3c971547 	.word	0x3c971547

0800b5b4 <__ieee754_sqrt>:
 800b5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b8:	ec55 4b10 	vmov	r4, r5, d0
 800b5bc:	4e55      	ldr	r6, [pc, #340]	; (800b714 <__ieee754_sqrt+0x160>)
 800b5be:	43ae      	bics	r6, r5
 800b5c0:	ee10 0a10 	vmov	r0, s0
 800b5c4:	ee10 3a10 	vmov	r3, s0
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	4629      	mov	r1, r5
 800b5cc:	d110      	bne.n	800b5f0 <__ieee754_sqrt+0x3c>
 800b5ce:	ee10 2a10 	vmov	r2, s0
 800b5d2:	462b      	mov	r3, r5
 800b5d4:	f7f4 ffc8 	bl	8000568 <__aeabi_dmul>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4620      	mov	r0, r4
 800b5de:	4629      	mov	r1, r5
 800b5e0:	f7f4 fe0c 	bl	80001fc <__adddf3>
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	460d      	mov	r5, r1
 800b5e8:	ec45 4b10 	vmov	d0, r4, r5
 800b5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f0:	2d00      	cmp	r5, #0
 800b5f2:	dc10      	bgt.n	800b616 <__ieee754_sqrt+0x62>
 800b5f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b5f8:	4330      	orrs	r0, r6
 800b5fa:	d0f5      	beq.n	800b5e8 <__ieee754_sqrt+0x34>
 800b5fc:	b15d      	cbz	r5, 800b616 <__ieee754_sqrt+0x62>
 800b5fe:	ee10 2a10 	vmov	r2, s0
 800b602:	462b      	mov	r3, r5
 800b604:	ee10 0a10 	vmov	r0, s0
 800b608:	f7f4 fdf6 	bl	80001f8 <__aeabi_dsub>
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	f7f5 f8d4 	bl	80007bc <__aeabi_ddiv>
 800b614:	e7e6      	b.n	800b5e4 <__ieee754_sqrt+0x30>
 800b616:	1512      	asrs	r2, r2, #20
 800b618:	d074      	beq.n	800b704 <__ieee754_sqrt+0x150>
 800b61a:	07d4      	lsls	r4, r2, #31
 800b61c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b620:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b628:	bf5e      	ittt	pl
 800b62a:	0fda      	lsrpl	r2, r3, #31
 800b62c:	005b      	lslpl	r3, r3, #1
 800b62e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b632:	2400      	movs	r4, #0
 800b634:	0fda      	lsrs	r2, r3, #31
 800b636:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b63a:	107f      	asrs	r7, r7, #1
 800b63c:	005b      	lsls	r3, r3, #1
 800b63e:	2516      	movs	r5, #22
 800b640:	4620      	mov	r0, r4
 800b642:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b646:	1886      	adds	r6, r0, r2
 800b648:	428e      	cmp	r6, r1
 800b64a:	bfde      	ittt	le
 800b64c:	1b89      	suble	r1, r1, r6
 800b64e:	18b0      	addle	r0, r6, r2
 800b650:	18a4      	addle	r4, r4, r2
 800b652:	0049      	lsls	r1, r1, #1
 800b654:	3d01      	subs	r5, #1
 800b656:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b65a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b65e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b662:	d1f0      	bne.n	800b646 <__ieee754_sqrt+0x92>
 800b664:	462a      	mov	r2, r5
 800b666:	f04f 0e20 	mov.w	lr, #32
 800b66a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b66e:	4281      	cmp	r1, r0
 800b670:	eb06 0c05 	add.w	ip, r6, r5
 800b674:	dc02      	bgt.n	800b67c <__ieee754_sqrt+0xc8>
 800b676:	d113      	bne.n	800b6a0 <__ieee754_sqrt+0xec>
 800b678:	459c      	cmp	ip, r3
 800b67a:	d811      	bhi.n	800b6a0 <__ieee754_sqrt+0xec>
 800b67c:	f1bc 0f00 	cmp.w	ip, #0
 800b680:	eb0c 0506 	add.w	r5, ip, r6
 800b684:	da43      	bge.n	800b70e <__ieee754_sqrt+0x15a>
 800b686:	2d00      	cmp	r5, #0
 800b688:	db41      	blt.n	800b70e <__ieee754_sqrt+0x15a>
 800b68a:	f100 0801 	add.w	r8, r0, #1
 800b68e:	1a09      	subs	r1, r1, r0
 800b690:	459c      	cmp	ip, r3
 800b692:	bf88      	it	hi
 800b694:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b698:	eba3 030c 	sub.w	r3, r3, ip
 800b69c:	4432      	add	r2, r6
 800b69e:	4640      	mov	r0, r8
 800b6a0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b6a4:	f1be 0e01 	subs.w	lr, lr, #1
 800b6a8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b6ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b6b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b6b4:	d1db      	bne.n	800b66e <__ieee754_sqrt+0xba>
 800b6b6:	430b      	orrs	r3, r1
 800b6b8:	d006      	beq.n	800b6c8 <__ieee754_sqrt+0x114>
 800b6ba:	1c50      	adds	r0, r2, #1
 800b6bc:	bf13      	iteet	ne
 800b6be:	3201      	addne	r2, #1
 800b6c0:	3401      	addeq	r4, #1
 800b6c2:	4672      	moveq	r2, lr
 800b6c4:	f022 0201 	bicne.w	r2, r2, #1
 800b6c8:	1063      	asrs	r3, r4, #1
 800b6ca:	0852      	lsrs	r2, r2, #1
 800b6cc:	07e1      	lsls	r1, r4, #31
 800b6ce:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b6d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b6d6:	bf48      	it	mi
 800b6d8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b6dc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b6e0:	4614      	mov	r4, r2
 800b6e2:	e781      	b.n	800b5e8 <__ieee754_sqrt+0x34>
 800b6e4:	0ad9      	lsrs	r1, r3, #11
 800b6e6:	3815      	subs	r0, #21
 800b6e8:	055b      	lsls	r3, r3, #21
 800b6ea:	2900      	cmp	r1, #0
 800b6ec:	d0fa      	beq.n	800b6e4 <__ieee754_sqrt+0x130>
 800b6ee:	02cd      	lsls	r5, r1, #11
 800b6f0:	d50a      	bpl.n	800b708 <__ieee754_sqrt+0x154>
 800b6f2:	f1c2 0420 	rsb	r4, r2, #32
 800b6f6:	fa23 f404 	lsr.w	r4, r3, r4
 800b6fa:	1e55      	subs	r5, r2, #1
 800b6fc:	4093      	lsls	r3, r2
 800b6fe:	4321      	orrs	r1, r4
 800b700:	1b42      	subs	r2, r0, r5
 800b702:	e78a      	b.n	800b61a <__ieee754_sqrt+0x66>
 800b704:	4610      	mov	r0, r2
 800b706:	e7f0      	b.n	800b6ea <__ieee754_sqrt+0x136>
 800b708:	0049      	lsls	r1, r1, #1
 800b70a:	3201      	adds	r2, #1
 800b70c:	e7ef      	b.n	800b6ee <__ieee754_sqrt+0x13a>
 800b70e:	4680      	mov	r8, r0
 800b710:	e7bd      	b.n	800b68e <__ieee754_sqrt+0xda>
 800b712:	bf00      	nop
 800b714:	7ff00000 	.word	0x7ff00000

0800b718 <with_errno>:
 800b718:	b570      	push	{r4, r5, r6, lr}
 800b71a:	4604      	mov	r4, r0
 800b71c:	460d      	mov	r5, r1
 800b71e:	4616      	mov	r6, r2
 800b720:	f7ff f90e 	bl	800a940 <__errno>
 800b724:	4629      	mov	r1, r5
 800b726:	6006      	str	r6, [r0, #0]
 800b728:	4620      	mov	r0, r4
 800b72a:	bd70      	pop	{r4, r5, r6, pc}

0800b72c <xflow>:
 800b72c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b72e:	4614      	mov	r4, r2
 800b730:	461d      	mov	r5, r3
 800b732:	b108      	cbz	r0, 800b738 <xflow+0xc>
 800b734:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b738:	e9cd 2300 	strd	r2, r3, [sp]
 800b73c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b740:	4620      	mov	r0, r4
 800b742:	4629      	mov	r1, r5
 800b744:	f7f4 ff10 	bl	8000568 <__aeabi_dmul>
 800b748:	2222      	movs	r2, #34	; 0x22
 800b74a:	b003      	add	sp, #12
 800b74c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b750:	f7ff bfe2 	b.w	800b718 <with_errno>

0800b754 <__math_uflow>:
 800b754:	b508      	push	{r3, lr}
 800b756:	2200      	movs	r2, #0
 800b758:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b75c:	f7ff ffe6 	bl	800b72c <xflow>
 800b760:	ec41 0b10 	vmov	d0, r0, r1
 800b764:	bd08      	pop	{r3, pc}

0800b766 <__math_oflow>:
 800b766:	b508      	push	{r3, lr}
 800b768:	2200      	movs	r2, #0
 800b76a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b76e:	f7ff ffdd 	bl	800b72c <xflow>
 800b772:	ec41 0b10 	vmov	d0, r0, r1
 800b776:	bd08      	pop	{r3, pc}

0800b778 <fabs>:
 800b778:	ec51 0b10 	vmov	r0, r1, d0
 800b77c:	ee10 2a10 	vmov	r2, s0
 800b780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b784:	ec43 2b10 	vmov	d0, r2, r3
 800b788:	4770      	bx	lr

0800b78a <finite>:
 800b78a:	b082      	sub	sp, #8
 800b78c:	ed8d 0b00 	vstr	d0, [sp]
 800b790:	9801      	ldr	r0, [sp, #4]
 800b792:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b796:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b79a:	0fc0      	lsrs	r0, r0, #31
 800b79c:	b002      	add	sp, #8
 800b79e:	4770      	bx	lr

0800b7a0 <scalbn>:
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	ec55 4b10 	vmov	r4, r5, d0
 800b7a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	462b      	mov	r3, r5
 800b7ae:	b99a      	cbnz	r2, 800b7d8 <scalbn+0x38>
 800b7b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7b4:	4323      	orrs	r3, r4
 800b7b6:	d036      	beq.n	800b826 <scalbn+0x86>
 800b7b8:	4b39      	ldr	r3, [pc, #228]	; (800b8a0 <scalbn+0x100>)
 800b7ba:	4629      	mov	r1, r5
 800b7bc:	ee10 0a10 	vmov	r0, s0
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f7f4 fed1 	bl	8000568 <__aeabi_dmul>
 800b7c6:	4b37      	ldr	r3, [pc, #220]	; (800b8a4 <scalbn+0x104>)
 800b7c8:	429e      	cmp	r6, r3
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	460d      	mov	r5, r1
 800b7ce:	da10      	bge.n	800b7f2 <scalbn+0x52>
 800b7d0:	a32b      	add	r3, pc, #172	; (adr r3, 800b880 <scalbn+0xe0>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	e03a      	b.n	800b84e <scalbn+0xae>
 800b7d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b7dc:	428a      	cmp	r2, r1
 800b7de:	d10c      	bne.n	800b7fa <scalbn+0x5a>
 800b7e0:	ee10 2a10 	vmov	r2, s0
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	f7f4 fd08 	bl	80001fc <__adddf3>
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	460d      	mov	r5, r1
 800b7f0:	e019      	b.n	800b826 <scalbn+0x86>
 800b7f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	3a36      	subs	r2, #54	; 0x36
 800b7fa:	4432      	add	r2, r6
 800b7fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b800:	428a      	cmp	r2, r1
 800b802:	dd08      	ble.n	800b816 <scalbn+0x76>
 800b804:	2d00      	cmp	r5, #0
 800b806:	a120      	add	r1, pc, #128	; (adr r1, 800b888 <scalbn+0xe8>)
 800b808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b80c:	da1c      	bge.n	800b848 <scalbn+0xa8>
 800b80e:	a120      	add	r1, pc, #128	; (adr r1, 800b890 <scalbn+0xf0>)
 800b810:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b814:	e018      	b.n	800b848 <scalbn+0xa8>
 800b816:	2a00      	cmp	r2, #0
 800b818:	dd08      	ble.n	800b82c <scalbn+0x8c>
 800b81a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b81e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b822:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b826:	ec45 4b10 	vmov	d0, r4, r5
 800b82a:	bd70      	pop	{r4, r5, r6, pc}
 800b82c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b830:	da19      	bge.n	800b866 <scalbn+0xc6>
 800b832:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b836:	429e      	cmp	r6, r3
 800b838:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b83c:	dd0a      	ble.n	800b854 <scalbn+0xb4>
 800b83e:	a112      	add	r1, pc, #72	; (adr r1, 800b888 <scalbn+0xe8>)
 800b840:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e2      	bne.n	800b80e <scalbn+0x6e>
 800b848:	a30f      	add	r3, pc, #60	; (adr r3, 800b888 <scalbn+0xe8>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	f7f4 fe8b 	bl	8000568 <__aeabi_dmul>
 800b852:	e7cb      	b.n	800b7ec <scalbn+0x4c>
 800b854:	a10a      	add	r1, pc, #40	; (adr r1, 800b880 <scalbn+0xe0>)
 800b856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d0b8      	beq.n	800b7d0 <scalbn+0x30>
 800b85e:	a10e      	add	r1, pc, #56	; (adr r1, 800b898 <scalbn+0xf8>)
 800b860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b864:	e7b4      	b.n	800b7d0 <scalbn+0x30>
 800b866:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b86a:	3236      	adds	r2, #54	; 0x36
 800b86c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b870:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b874:	4620      	mov	r0, r4
 800b876:	4b0c      	ldr	r3, [pc, #48]	; (800b8a8 <scalbn+0x108>)
 800b878:	2200      	movs	r2, #0
 800b87a:	e7e8      	b.n	800b84e <scalbn+0xae>
 800b87c:	f3af 8000 	nop.w
 800b880:	c2f8f359 	.word	0xc2f8f359
 800b884:	01a56e1f 	.word	0x01a56e1f
 800b888:	8800759c 	.word	0x8800759c
 800b88c:	7e37e43c 	.word	0x7e37e43c
 800b890:	8800759c 	.word	0x8800759c
 800b894:	fe37e43c 	.word	0xfe37e43c
 800b898:	c2f8f359 	.word	0xc2f8f359
 800b89c:	81a56e1f 	.word	0x81a56e1f
 800b8a0:	43500000 	.word	0x43500000
 800b8a4:	ffff3cb0 	.word	0xffff3cb0
 800b8a8:	3c900000 	.word	0x3c900000

0800b8ac <_init>:
 800b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ae:	bf00      	nop
 800b8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b2:	bc08      	pop	{r3}
 800b8b4:	469e      	mov	lr, r3
 800b8b6:	4770      	bx	lr

0800b8b8 <_fini>:
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	bf00      	nop
 800b8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8be:	bc08      	pop	{r3}
 800b8c0:	469e      	mov	lr, r3
 800b8c2:	4770      	bx	lr
