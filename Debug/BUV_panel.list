
BUV_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc30  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005a10  0800dde0  0800dde0  0001dde0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137f0  080137f0  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  080137f0  080137f0  000237f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080137f8  080137f8  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080137f8  080137f8  000237f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080137fc  080137fc  000237fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08013800  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          00000d0c  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d94  20000d94  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001aaf0  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d13  00000000  00000000  0004abeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001710  00000000  00000000  0004e900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011b4  00000000  00000000  00050010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000040ba  00000000  00000000  000511c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ecef  00000000  00000000  0005527e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1764  00000000  00000000  00073f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000066f4  00000000  00000000  001556d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003b  00000000  00000000  0015bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ddc8 	.word	0x0800ddc8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800ddc8 	.word	0x0800ddc8

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_uldivmod>:
 8000b18:	b953      	cbnz	r3, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1a:	b94a      	cbnz	r2, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bf08      	it	eq
 8000b20:	2800      	cmpeq	r0, #0
 8000b22:	bf1c      	itt	ne
 8000b24:	f04f 31ff 	movne.w	r1, #4294967295
 8000b28:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2c:	f000 b970 	b.w	8000e10 <__aeabi_idiv0>
 8000b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b38:	f000 f806 	bl	8000b48 <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <__udivmoddi4>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	9e08      	ldr	r6, [sp, #32]
 8000b4e:	460d      	mov	r5, r1
 8000b50:	4604      	mov	r4, r0
 8000b52:	460f      	mov	r7, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d14a      	bne.n	8000bee <__udivmoddi4+0xa6>
 8000b58:	428a      	cmp	r2, r1
 8000b5a:	4694      	mov	ip, r2
 8000b5c:	d965      	bls.n	8000c2a <__udivmoddi4+0xe2>
 8000b5e:	fab2 f382 	clz	r3, r2
 8000b62:	b143      	cbz	r3, 8000b76 <__udivmoddi4+0x2e>
 8000b64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b68:	f1c3 0220 	rsb	r2, r3, #32
 8000b6c:	409f      	lsls	r7, r3
 8000b6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b72:	4317      	orrs	r7, r2
 8000b74:	409c      	lsls	r4, r3
 8000b76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b7a:	fa1f f58c 	uxth.w	r5, ip
 8000b7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b82:	0c22      	lsrs	r2, r4, #16
 8000b84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b8c:	fb01 f005 	mul.w	r0, r1, r5
 8000b90:	4290      	cmp	r0, r2
 8000b92:	d90a      	bls.n	8000baa <__udivmoddi4+0x62>
 8000b94:	eb1c 0202 	adds.w	r2, ip, r2
 8000b98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b9c:	f080 811c 	bcs.w	8000dd8 <__udivmoddi4+0x290>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f240 8119 	bls.w	8000dd8 <__udivmoddi4+0x290>
 8000ba6:	3902      	subs	r1, #2
 8000ba8:	4462      	add	r2, ip
 8000baa:	1a12      	subs	r2, r2, r0
 8000bac:	b2a4      	uxth	r4, r4
 8000bae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bba:	fb00 f505 	mul.w	r5, r0, r5
 8000bbe:	42a5      	cmp	r5, r4
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x90>
 8000bc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bca:	f080 8107 	bcs.w	8000ddc <__udivmoddi4+0x294>
 8000bce:	42a5      	cmp	r5, r4
 8000bd0:	f240 8104 	bls.w	8000ddc <__udivmoddi4+0x294>
 8000bd4:	4464      	add	r4, ip
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bdc:	1b64      	subs	r4, r4, r5
 8000bde:	2100      	movs	r1, #0
 8000be0:	b11e      	cbz	r6, 8000bea <__udivmoddi4+0xa2>
 8000be2:	40dc      	lsrs	r4, r3
 8000be4:	2300      	movs	r3, #0
 8000be6:	e9c6 4300 	strd	r4, r3, [r6]
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0xbc>
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	f000 80ed 	beq.w	8000dd2 <__udivmoddi4+0x28a>
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000bfe:	4608      	mov	r0, r1
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	fab3 f183 	clz	r1, r3
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	d149      	bne.n	8000ca0 <__udivmoddi4+0x158>
 8000c0c:	42ab      	cmp	r3, r5
 8000c0e:	d302      	bcc.n	8000c16 <__udivmoddi4+0xce>
 8000c10:	4282      	cmp	r2, r0
 8000c12:	f200 80f8 	bhi.w	8000e06 <__udivmoddi4+0x2be>
 8000c16:	1a84      	subs	r4, r0, r2
 8000c18:	eb65 0203 	sbc.w	r2, r5, r3
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	4617      	mov	r7, r2
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	d0e2      	beq.n	8000bea <__udivmoddi4+0xa2>
 8000c24:	e9c6 4700 	strd	r4, r7, [r6]
 8000c28:	e7df      	b.n	8000bea <__udivmoddi4+0xa2>
 8000c2a:	b902      	cbnz	r2, 8000c2e <__udivmoddi4+0xe6>
 8000c2c:	deff      	udf	#255	; 0xff
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8090 	bne.w	8000d58 <__udivmoddi4+0x210>
 8000c38:	1a8a      	subs	r2, r1, r2
 8000c3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3e:	fa1f fe8c 	uxth.w	lr, ip
 8000c42:	2101      	movs	r1, #1
 8000c44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c48:	fb07 2015 	mls	r0, r7, r5, r2
 8000c4c:	0c22      	lsrs	r2, r4, #16
 8000c4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c52:	fb0e f005 	mul.w	r0, lr, r5
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0x124>
 8000c5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x122>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f200 80cb 	bhi.w	8000e00 <__udivmoddi4+0x2b8>
 8000c6a:	4645      	mov	r5, r8
 8000c6c:	1a12      	subs	r2, r2, r0
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c74:	fb07 2210 	mls	r2, r7, r0, r2
 8000c78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x14e>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x14c>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	f200 80bb 	bhi.w	8000e0a <__udivmoddi4+0x2c2>
 8000c94:	4610      	mov	r0, r2
 8000c96:	eba4 040e 	sub.w	r4, r4, lr
 8000c9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c9e:	e79f      	b.n	8000be0 <__udivmoddi4+0x98>
 8000ca0:	f1c1 0720 	rsb	r7, r1, #32
 8000ca4:	408b      	lsls	r3, r1
 8000ca6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000caa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cae:	fa05 f401 	lsl.w	r4, r5, r1
 8000cb2:	fa20 f307 	lsr.w	r3, r0, r7
 8000cb6:	40fd      	lsrs	r5, r7
 8000cb8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cbc:	4323      	orrs	r3, r4
 8000cbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cc2:	fa1f fe8c 	uxth.w	lr, ip
 8000cc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000cca:	0c1c      	lsrs	r4, r3, #16
 8000ccc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000cd4:	42a5      	cmp	r5, r4
 8000cd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cda:	fa00 f001 	lsl.w	r0, r0, r1
 8000cde:	d90b      	bls.n	8000cf8 <__udivmoddi4+0x1b0>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce8:	f080 8088 	bcs.w	8000dfc <__udivmoddi4+0x2b4>
 8000cec:	42a5      	cmp	r5, r4
 8000cee:	f240 8085 	bls.w	8000dfc <__udivmoddi4+0x2b4>
 8000cf2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf6:	4464      	add	r4, ip
 8000cf8:	1b64      	subs	r4, r4, r5
 8000cfa:	b29d      	uxth	r5, r3
 8000cfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d00:	fb09 4413 	mls	r4, r9, r3, r4
 8000d04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x1da>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d18:	d26c      	bcs.n	8000df4 <__udivmoddi4+0x2ac>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	d96a      	bls.n	8000df4 <__udivmoddi4+0x2ac>
 8000d1e:	3b02      	subs	r3, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d26:	fba3 9502 	umull	r9, r5, r3, r2
 8000d2a:	eba4 040e 	sub.w	r4, r4, lr
 8000d2e:	42ac      	cmp	r4, r5
 8000d30:	46c8      	mov	r8, r9
 8000d32:	46ae      	mov	lr, r5
 8000d34:	d356      	bcc.n	8000de4 <__udivmoddi4+0x29c>
 8000d36:	d053      	beq.n	8000de0 <__udivmoddi4+0x298>
 8000d38:	b156      	cbz	r6, 8000d50 <__udivmoddi4+0x208>
 8000d3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d42:	fa04 f707 	lsl.w	r7, r4, r7
 8000d46:	40ca      	lsrs	r2, r1
 8000d48:	40cc      	lsrs	r4, r1
 8000d4a:	4317      	orrs	r7, r2
 8000d4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d50:	4618      	mov	r0, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d58:	f1c3 0120 	rsb	r1, r3, #32
 8000d5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d60:	fa20 f201 	lsr.w	r2, r0, r1
 8000d64:	fa25 f101 	lsr.w	r1, r5, r1
 8000d68:	409d      	lsls	r5, r3
 8000d6a:	432a      	orrs	r2, r5
 8000d6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d78:	fb07 1510 	mls	r5, r7, r0, r1
 8000d7c:	0c11      	lsrs	r1, r2, #16
 8000d7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d82:	fb00 f50e 	mul.w	r5, r0, lr
 8000d86:	428d      	cmp	r5, r1
 8000d88:	fa04 f403 	lsl.w	r4, r4, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x258>
 8000d8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d96:	d22f      	bcs.n	8000df8 <__udivmoddi4+0x2b0>
 8000d98:	428d      	cmp	r5, r1
 8000d9a:	d92d      	bls.n	8000df8 <__udivmoddi4+0x2b0>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1b49      	subs	r1, r1, r5
 8000da2:	b292      	uxth	r2, r2
 8000da4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000da8:	fb07 1115 	mls	r1, r7, r5, r1
 8000dac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db0:	fb05 f10e 	mul.w	r1, r5, lr
 8000db4:	4291      	cmp	r1, r2
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x282>
 8000db8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc0:	d216      	bcs.n	8000df0 <__udivmoddi4+0x2a8>
 8000dc2:	4291      	cmp	r1, r2
 8000dc4:	d914      	bls.n	8000df0 <__udivmoddi4+0x2a8>
 8000dc6:	3d02      	subs	r5, #2
 8000dc8:	4462      	add	r2, ip
 8000dca:	1a52      	subs	r2, r2, r1
 8000dcc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dd0:	e738      	b.n	8000c44 <__udivmoddi4+0xfc>
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	e708      	b.n	8000bea <__udivmoddi4+0xa2>
 8000dd8:	4639      	mov	r1, r7
 8000dda:	e6e6      	b.n	8000baa <__udivmoddi4+0x62>
 8000ddc:	4610      	mov	r0, r2
 8000dde:	e6fb      	b.n	8000bd8 <__udivmoddi4+0x90>
 8000de0:	4548      	cmp	r0, r9
 8000de2:	d2a9      	bcs.n	8000d38 <__udivmoddi4+0x1f0>
 8000de4:	ebb9 0802 	subs.w	r8, r9, r2
 8000de8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dec:	3b01      	subs	r3, #1
 8000dee:	e7a3      	b.n	8000d38 <__udivmoddi4+0x1f0>
 8000df0:	4645      	mov	r5, r8
 8000df2:	e7ea      	b.n	8000dca <__udivmoddi4+0x282>
 8000df4:	462b      	mov	r3, r5
 8000df6:	e794      	b.n	8000d22 <__udivmoddi4+0x1da>
 8000df8:	4640      	mov	r0, r8
 8000dfa:	e7d1      	b.n	8000da0 <__udivmoddi4+0x258>
 8000dfc:	46d0      	mov	r8, sl
 8000dfe:	e77b      	b.n	8000cf8 <__udivmoddi4+0x1b0>
 8000e00:	3d02      	subs	r5, #2
 8000e02:	4462      	add	r2, ip
 8000e04:	e732      	b.n	8000c6c <__udivmoddi4+0x124>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e70a      	b.n	8000c20 <__udivmoddi4+0xd8>
 8000e0a:	4464      	add	r4, ip
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	e742      	b.n	8000c96 <__udivmoddi4+0x14e>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <update_station_pump>:



void update_station_pump(int32_t value,int32_t pix)

{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af04      	add	r7, sp, #16
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	switch(value)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d02f      	beq.n	8000e84 <update_station_pump+0x70>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	dc3f      	bgt.n	8000eaa <update_station_pump+0x96>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d003      	beq.n	8000e38 <update_station_pump+0x24>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d013      	beq.n	8000e5e <update_station_pump+0x4a>
		break;
	case 3:
		Short_Left_Colored_RU_DrawString_32("РЕМОНТ   ", 9,585,  pix, BackgroundColor, BasicSymbolColor, Page[6]);
		break;
	}
}
 8000e36:	e038      	b.n	8000eaa <update_station_pump+0x96>
		Short_Left_Colored_RU_DrawString_32("РАЗРЕШЕНО", 9,585,  pix, BackgroundColor, BasicSymbolColor, Page[6]);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b298      	uxth	r0, r3
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <update_station_pump+0xa0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <update_station_pump+0xa4>)
 8000e42:	6812      	ldr	r2, [r2, #0]
 8000e44:	491d      	ldr	r1, [pc, #116]	; (8000ebc <update_station_pump+0xa8>)
 8000e46:	6989      	ldr	r1, [r1, #24]
 8000e48:	9102      	str	r1, [sp, #8]
 8000e4a:	9201      	str	r2, [sp, #4]
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f240 2249 	movw	r2, #585	; 0x249
 8000e54:	2109      	movs	r1, #9
 8000e56:	481a      	ldr	r0, [pc, #104]	; (8000ec0 <update_station_pump+0xac>)
 8000e58:	f006 fbf6 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		break;
 8000e5c:	e025      	b.n	8000eaa <update_station_pump+0x96>
		Short_Left_Colored_RU_DrawString_32("ЗАПРЕЩЕНО", 9,585,  pix, BackgroundColor, BasicSymbolColor, Page[6]);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b298      	uxth	r0, r3
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <update_station_pump+0xa0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <update_station_pump+0xa4>)
 8000e68:	6812      	ldr	r2, [r2, #0]
 8000e6a:	4914      	ldr	r1, [pc, #80]	; (8000ebc <update_station_pump+0xa8>)
 8000e6c:	6989      	ldr	r1, [r1, #24]
 8000e6e:	9102      	str	r1, [sp, #8]
 8000e70:	9201      	str	r2, [sp, #4]
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4603      	mov	r3, r0
 8000e76:	f240 2249 	movw	r2, #585	; 0x249
 8000e7a:	2109      	movs	r1, #9
 8000e7c:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <update_station_pump+0xb0>)
 8000e7e:	f006 fbe3 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		break;
 8000e82:	e012      	b.n	8000eaa <update_station_pump+0x96>
		Short_Left_Colored_RU_DrawString_32("РЕМОНТ   ", 9,585,  pix, BackgroundColor, BasicSymbolColor, Page[6]);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b298      	uxth	r0, r3
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <update_station_pump+0xa0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <update_station_pump+0xa4>)
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	490a      	ldr	r1, [pc, #40]	; (8000ebc <update_station_pump+0xa8>)
 8000e92:	6989      	ldr	r1, [r1, #24]
 8000e94:	9102      	str	r1, [sp, #8]
 8000e96:	9201      	str	r2, [sp, #4]
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f240 2249 	movw	r2, #585	; 0x249
 8000ea0:	2109      	movs	r1, #9
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <update_station_pump+0xb4>)
 8000ea4:	f006 fbd0 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		break;
 8000ea8:	bf00      	nop
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	200009f4 	.word	0x200009f4
 8000ebc:	20000980 	.word	0x20000980
 8000ec0:	0800dde0 	.word	0x0800dde0
 8000ec4:	0800ddf4 	.word	0x0800ddf4
 8000ec8:	0800de08 	.word	0x0800de08

08000ecc <setting_auto_unload>:
void setting_auto_unload(int32_t value)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af04      	add	r7, sp, #16
 8000ed2:	6078      	str	r0, [r7, #4]
	if(value)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d011      	beq.n	8000efe <setting_auto_unload+0x32>
	{
		Short_Left_Colored_RU_DrawString_32("механ  ", 7,600,  350, BackgroundColor, BasicSymbolColor, Page[6]);
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <setting_auto_unload+0x5c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <setting_auto_unload+0x60>)
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	4913      	ldr	r1, [pc, #76]	; (8000f30 <setting_auto_unload+0x64>)
 8000ee4:	6989      	ldr	r1, [r1, #24]
 8000ee6:	9102      	str	r1, [sp, #8]
 8000ee8:	9201      	str	r2, [sp, #4]
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8000ef0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	480f      	ldr	r0, [pc, #60]	; (8000f34 <setting_auto_unload+0x68>)
 8000ef8:	f006 fba6 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	}
	else
	{
		Short_Left_Colored_RU_DrawString_32("эл.магн", 7,600,  350, BackgroundColor, BasicSymbolColor, Page[6]);
	}
}
 8000efc:	e010      	b.n	8000f20 <setting_auto_unload+0x54>
		Short_Left_Colored_RU_DrawString_32("эл.магн", 7,600,  350, BackgroundColor, BasicSymbolColor, Page[6]);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <setting_auto_unload+0x5c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <setting_auto_unload+0x60>)
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	490a      	ldr	r1, [pc, #40]	; (8000f30 <setting_auto_unload+0x64>)
 8000f08:	6989      	ldr	r1, [r1, #24]
 8000f0a:	9102      	str	r1, [sp, #8]
 8000f0c:	9201      	str	r2, [sp, #4]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8000f14:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000f18:	2107      	movs	r1, #7
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <setting_auto_unload+0x6c>)
 8000f1c:	f006 fb94 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	200009f4 	.word	0x200009f4
 8000f30:	20000980 	.word	0x20000980
 8000f34:	0800de18 	.word	0x0800de18
 8000f38:	0800de28 	.word	0x0800de28

08000f3c <update_mode_flushing>:
void update_mode_flushing(int32_t value,uint32_t page)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	switch (value)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d84a      	bhi.n	8000fe4 <update_mode_flushing+0xa8>
 8000f4e:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <update_mode_flushing+0x18>)
 8000f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f54:	08000f65 	.word	0x08000f65
 8000f58:	08000f85 	.word	0x08000f85
 8000f5c:	08000fa5 	.word	0x08000fa5
 8000f60:	08000fc5 	.word	0x08000fc5
	{
	case 1:
		Short_Left_Colored_RU_DrawString_32(" ПО ВРЕМЕНИ    ", 15,550,  50, BackgroundColor, BasicSymbolColor, page);
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <update_mode_flushing+0xb0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <update_mode_flushing+0xb4>)
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	6839      	ldr	r1, [r7, #0]
 8000f6e:	9102      	str	r1, [sp, #8]
 8000f70:	9201      	str	r2, [sp, #4]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2332      	movs	r3, #50	; 0x32
 8000f76:	f240 2226 	movw	r2, #550	; 0x226
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	481d      	ldr	r0, [pc, #116]	; (8000ff4 <update_mode_flushing+0xb8>)
 8000f7e:	f006 fb63 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		break;
 8000f82:	e02f      	b.n	8000fe4 <update_mode_flushing+0xa8>
	case 2:
		Short_Left_Colored_RU_DrawString_32("ПО ПЕРЕП ДАВ   ", 15,550,  50, BackgroundColor, BasicSymbolColor, page);
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <update_mode_flushing+0xb0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <update_mode_flushing+0xb4>)
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	6839      	ldr	r1, [r7, #0]
 8000f8e:	9102      	str	r1, [sp, #8]
 8000f90:	9201      	str	r2, [sp, #4]
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2332      	movs	r3, #50	; 0x32
 8000f96:	f240 2226 	movw	r2, #550	; 0x226
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	4816      	ldr	r0, [pc, #88]	; (8000ff8 <update_mode_flushing+0xbc>)
 8000f9e:	f006 fb53 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

		break;
 8000fa2:	e01f      	b.n	8000fe4 <update_mode_flushing+0xa8>

	case 3:
		Short_Left_Colored_RU_DrawString_32("ПО ПЕР ДАВ и ВР", 15,550,  50, BackgroundColor, BasicSymbolColor, page);
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <update_mode_flushing+0xb0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <update_mode_flushing+0xb4>)
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	9102      	str	r1, [sp, #8]
 8000fb0:	9201      	str	r2, [sp, #4]
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2332      	movs	r3, #50	; 0x32
 8000fb6:	f240 2226 	movw	r2, #550	; 0x226
 8000fba:	210f      	movs	r1, #15
 8000fbc:	480f      	ldr	r0, [pc, #60]	; (8000ffc <update_mode_flushing+0xc0>)
 8000fbe:	f006 fb43 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		break;
 8000fc2:	e00f      	b.n	8000fe4 <update_mode_flushing+0xa8>
	case 4:
		Short_Left_Colored_RU_DrawString_32("В РУЧНУЮ       ", 15,550,  50, BackgroundColor, BasicSymbolColor, page);
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <update_mode_flushing+0xb0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <update_mode_flushing+0xb4>)
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	6839      	ldr	r1, [r7, #0]
 8000fce:	9102      	str	r1, [sp, #8]
 8000fd0:	9201      	str	r2, [sp, #4]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2332      	movs	r3, #50	; 0x32
 8000fd6:	f240 2226 	movw	r2, #550	; 0x226
 8000fda:	210f      	movs	r1, #15
 8000fdc:	4808      	ldr	r0, [pc, #32]	; (8001000 <update_mode_flushing+0xc4>)
 8000fde:	f006 fb33 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		break;
 8000fe2:	bf00      	nop
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	200009f4 	.word	0x200009f4
 8000ff4:	0800de38 	.word	0x0800de38
 8000ff8:	0800de54 	.word	0x0800de54
 8000ffc:	0800de70 	.word	0x0800de70
 8001000:	0800de8c 	.word	0x0800de8c

08001004 <CRC_16_Modbus>:

// Поддерживаются функции 0x03, 0x04, 0x06, 0x10, 0x17


CRC_16_Modbus(uint8_t Buffer[], uint8_t Len, uint32_t pointer_out) //Рассчёт CRC
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	460b      	mov	r3, r1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	72fb      	strb	r3, [r7, #11]
	uint8_t OutTable[3];

	uint16_t  i;
	uint8_t  j;
	uint16_t TempByte, CurrentCRC = 0xFFFF;
 8001012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001016:	833b      	strh	r3, [r7, #24]

	uint8_t HiByte;
	uint8_t LoByte;
	//make byte 16 bit format

	for ( i = 0; i < Len; i++ )
 8001018:	2300      	movs	r3, #0
 800101a:	83fb      	strh	r3, [r7, #30]
 800101c:	e02c      	b.n	8001078 <CRC_16_Modbus+0x74>
	{
	  TempByte = Buffer[i];
 800101e:	8bfb      	ldrh	r3, [r7, #30]
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	837b      	strh	r3, [r7, #26]

	  for ( j = 0; j < 8; j++ )
 8001028:	2300      	movs	r3, #0
 800102a:	777b      	strb	r3, [r7, #29]
 800102c:	e01e      	b.n	800106c <CRC_16_Modbus+0x68>
	  {
		  if ( (CurrentCRC & 0x0001) == (TempByte & 0x0001) )
 800102e:	8b3a      	ldrh	r2, [r7, #24]
 8001030:	8b7b      	ldrh	r3, [r7, #26]
 8001032:	4053      	eors	r3, r2
 8001034:	b29b      	uxth	r3, r3
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d106      	bne.n	800104c <CRC_16_Modbus+0x48>
		  {
			  //right shift crc
			  CurrentCRC >>= 1;
 800103e:	8b3b      	ldrh	r3, [r7, #24]
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	833b      	strh	r3, [r7, #24]
			  //right shift data
			  TempByte >>= 1;
 8001044:	8b7b      	ldrh	r3, [r7, #26]
 8001046:	085b      	lsrs	r3, r3, #1
 8001048:	837b      	strh	r3, [r7, #26]
 800104a:	e00c      	b.n	8001066 <CRC_16_Modbus+0x62>
		  }
		  else
		  {
			  CurrentCRC >>= 1;
 800104c:	8b3b      	ldrh	r3, [r7, #24]
 800104e:	085b      	lsrs	r3, r3, #1
 8001050:	833b      	strh	r3, [r7, #24]
			  TempByte >>= 1;
 8001052:	8b7b      	ldrh	r3, [r7, #26]
 8001054:	085b      	lsrs	r3, r3, #1
 8001056:	837b      	strh	r3, [r7, #26]
			  CurrentCRC = CurrentCRC ^ 0xA001; /* 1000 0100 0000 1000 = x^16 + x^12 + x^5 + 1 */
 8001058:	8b3b      	ldrh	r3, [r7, #24]
 800105a:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 800105e:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001062:	43db      	mvns	r3, r3
 8001064:	833b      	strh	r3, [r7, #24]
	  for ( j = 0; j < 8; j++ )
 8001066:	7f7b      	ldrb	r3, [r7, #29]
 8001068:	3301      	adds	r3, #1
 800106a:	777b      	strb	r3, [r7, #29]
 800106c:	7f7b      	ldrb	r3, [r7, #29]
 800106e:	2b07      	cmp	r3, #7
 8001070:	d9dd      	bls.n	800102e <CRC_16_Modbus+0x2a>
	for ( i = 0; i < Len; i++ )
 8001072:	8bfb      	ldrh	r3, [r7, #30]
 8001074:	3301      	adds	r3, #1
 8001076:	83fb      	strh	r3, [r7, #30]
 8001078:	7afb      	ldrb	r3, [r7, #11]
 800107a:	b29b      	uxth	r3, r3
 800107c:	8bfa      	ldrh	r2, [r7, #30]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3cd      	bcc.n	800101e <CRC_16_Modbus+0x1a>
		  }
	  }
	}

	HiByte = 0x00FF & CurrentCRC;
 8001082:	8b3b      	ldrh	r3, [r7, #24]
 8001084:	75fb      	strb	r3, [r7, #23]
	CurrentCRC = 0xFF00 & CurrentCRC;
 8001086:	8b3b      	ldrh	r3, [r7, #24]
 8001088:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800108c:	833b      	strh	r3, [r7, #24]
	CurrentCRC = CurrentCRC >> 8;
 800108e:	8b3b      	ldrh	r3, [r7, #24]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	833b      	strh	r3, [r7, #24]
	LoByte = 0x00FF & CurrentCRC;
 8001094:	8b3b      	ldrh	r3, [r7, #24]
 8001096:	75bb      	strb	r3, [r7, #22]

	OutTable[0] = HiByte;
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	743b      	strb	r3, [r7, #16]
	OutTable[1] = LoByte;
 800109c:	7dbb      	ldrb	r3, [r7, #22]
 800109e:	747b      	strb	r3, [r7, #17]
	OutTable[2] = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	74bb      	strb	r3, [r7, #18]


	if( (Buffer[Len] == HiByte) & (Buffer[Len+1] == LoByte) )
 80010a4:	7afb      	ldrb	r3, [r7, #11]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	7dfa      	ldrb	r2, [r7, #23]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	bf0c      	ite	eq
 80010b2:	2301      	moveq	r3, #1
 80010b4:	2300      	movne	r3, #0
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	3301      	adds	r3, #1
 80010bc:	68f9      	ldr	r1, [r7, #12]
 80010be:	440b      	add	r3, r1
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	7db9      	ldrb	r1, [r7, #22]
 80010c4:	4299      	cmp	r1, r3
 80010c6:	bf0c      	ite	eq
 80010c8:	2301      	moveq	r3, #1
 80010ca:	2300      	movne	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4013      	ands	r3, r2
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <CRC_16_Modbus+0xd6>
	{
		OutTable[2] = 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	74bb      	strb	r3, [r7, #18]
	}

	memcpy(pointer_out, &OutTable, 3);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	461a      	mov	r2, r3
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	8819      	ldrh	r1, [r3, #0]
 80010e4:	789b      	ldrb	r3, [r3, #2]
 80010e6:	8011      	strh	r1, [r2, #0]
 80010e8:	7093      	strb	r3, [r2, #2]
}
 80010ea:	bf00      	nop
 80010ec:	4618      	mov	r0, r3
 80010ee:	3724      	adds	r7, #36	; 0x24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <Slave_PORT_Processor>:

void Slave_PORT_Processor(uint32_t pointer_DB)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	60fb      	str	r3, [r7, #12]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60bb      	str	r3, [r7, #8]

	if(USART_port->a.SR & 0x80) // если прерывание по передаче
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	2b00      	cmp	r3, #0
 8001114:	d038      	beq.n	8001188 <Slave_PORT_Processor+0x90>
	{
		if(Slave_DB->a.TX_count)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	895b      	ldrh	r3, [r3, #10]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d034      	beq.n	8001188 <Slave_PORT_Processor+0x90>
		{
			GPIOF->BSRR = GPIO_PIN_8;		//Tx On
 800111e:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <Slave_PORT_Processor+0xf0>)
 8001120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001124:	619a      	str	r2, [r3, #24]

			Slave_DB->a.Roll++;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	899b      	ldrh	r3, [r3, #12]
 800112a:	3301      	adds	r3, #1
 800112c:	b29a      	uxth	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	819a      	strh	r2, [r3, #12]
			if(Slave_DB->a.Roll > Slave_DB->a.Roll_max)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	899a      	ldrh	r2, [r3, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	89db      	ldrh	r3, [r3, #14]
 800113a:	429a      	cmp	r2, r3
 800113c:	d924      	bls.n	8001188 <Slave_PORT_Processor+0x90>
			{

				Slave_DB->a.Roll= 0;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	819a      	strh	r2, [r3, #12]

				if(Slave_DB->a.TX_count < Slave_DB->a.TX_incr)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	895a      	ldrh	r2, [r3, #10]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	891b      	ldrh	r3, [r3, #8]
 800114c:	429a      	cmp	r2, r3
 800114e:	d20b      	bcs.n	8001168 <Slave_PORT_Processor+0x70>
				{
					Slave_DB->a.TX_count = 0;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2200      	movs	r2, #0
 8001154:	815a      	strh	r2, [r3, #10]
					USART_port->a.CR1 = 0x202c;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	f242 022c 	movw	r2, #8236	; 0x202c
 800115c:	60da      	str	r2, [r3, #12]
					GPIOF->BSRR = GPIO_PIN_8 << 16;	//Tx Off
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <Slave_PORT_Processor+0xf0>)
 8001160:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001164:	619a      	str	r2, [r3, #24]
 8001166:	e00f      	b.n	8001188 <Slave_PORT_Processor+0x90>
				}
				else
				{
					USART_port->a.DR = Slave_DB->a.TX_buff[Slave_DB->a.TX_incr];
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	891b      	ldrh	r3, [r3, #8]
 800116c:	461a      	mov	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8001176:	461a      	mov	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	605a      	str	r2, [r3, #4]
					Slave_DB->a.TX_incr++;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	891b      	ldrh	r3, [r3, #8]
 8001180:	3301      	adds	r3, #1
 8001182:	b29a      	uxth	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	811a      	strh	r2, [r3, #8]
			}

		}
	}

	if(!Slave_DB->a.TX_count)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	895b      	ldrh	r3, [r3, #10]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d125      	bne.n	80011dc <Slave_PORT_Processor+0xe4>
	{
		if( (USART_port->a.SR & 0x20) ) // если прерывание по приёму
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	2b00      	cmp	r3, #0
 800119a:	d019      	beq.n	80011d0 <Slave_PORT_Processor+0xd8>
		{

			if(Slave_DB->a.schet > 3){Slave_DB->a.RX_buff_pointer = 0;}
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8a1b      	ldrh	r3, [r3, #16]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d902      	bls.n	80011aa <Slave_PORT_Processor+0xb2>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	715a      	strb	r2, [r3, #5]
			Slave_DB->a.RX_buff[Slave_DB->a.RX_buff_pointer] = 0x000000FF & (USART_port->a.DR);
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	795b      	ldrb	r3, [r3, #5]
 80011b2:	4619      	mov	r1, r3
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	440b      	add	r3, r1
 80011ba:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			Slave_DB->a.RX_buff_pointer++;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	795b      	ldrb	r3, [r3, #5]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	715a      	strb	r2, [r3, #5]
			Slave_DB->a.schet=0;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	821a      	strh	r2, [r3, #16]
		}

		USART_port->a.CR1 |= 0x20;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f043 0220 	orr.w	r2, r3, #32
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60da      	str	r2, [r3, #12]
	}

}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40021400 	.word	0x40021400

080011ec <Slave_Processor>:

void Slave_Processor(uint32_t pointer_DB)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b08d      	sub	sp, #52	; 0x34
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	613b      	str	r3, [r7, #16]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]

	if( Slave_DB->a.RX_buff[0] == Slave_DB->a.MB_Addr )
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	791b      	ldrb	r3, [r3, #4]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 8465 	bne.w	8001ad8 <Slave_Processor+0x8ec>
	{
		if( Slave_DB->a.RX_buff_pointer == 8 )
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	795b      	ldrb	r3, [r3, #5]
 8001212:	2b08      	cmp	r3, #8
 8001214:	f040 81f1 	bne.w	80015fa <Slave_Processor+0x40e>
		{

				if ((Slave_DB->a.RX_buff[1] == 3) | (Slave_DB->a.RX_buff[1] == 4) | (Slave_DB->a.RX_buff[1] == 6))
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800121e:	2b03      	cmp	r3, #3
 8001220:	bf0c      	ite	eq
 8001222:	2301      	moveq	r3, #1
 8001224:	2300      	movne	r3, #0
 8001226:	b2da      	uxtb	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf0c      	ite	eq
 8001232:	2301      	moveq	r3, #1
 8001234:	2300      	movne	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001244:	2b06      	cmp	r3, #6
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 81be 	beq.w	80015d2 <Slave_Processor+0x3e6>
					{
						Slave_DB->a.CRC_Calc_out_table[2] = 0;
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
						if(Slave_DB->a.RX_buff[1] <= 6) {CRC_16_Modbus(Slave_DB->a.RX_buff, 6, &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001264:	2b06      	cmp	r3, #6
 8001266:	d809      	bhi.n	800127c <Slave_Processor+0x90>
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8001274:	461a      	mov	r2, r3
 8001276:	2106      	movs	r1, #6
 8001278:	f7ff fec4 	bl	8001004 <CRC_16_Modbus>

						if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 81a5 	beq.w	80015d2 <Slave_Processor+0x3e6>
						{

							if(Slave_DB->a.RX_buff[1] == 6) // обработка функции 0x06
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 800128e:	2b06      	cmp	r3, #6
 8001290:	d174      	bne.n	800137c <Slave_Processor+0x190>
							{

								Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 8001298:	b29a      	uxth	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.RX_buff[4];
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	f893 2511 	ldrb.w	r2, [r3, #1297]	; 0x511
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80012d4:	b211      	sxth	r1, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	3308      	adds	r3, #8
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	460a      	mov	r2, r1
 80012e0:	805a      	strh	r2, [r3, #2]
								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.Registers[Slave_DB->a.StartAddr] << 8;
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	3308      	adds	r3, #8
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012f4:	021a      	lsls	r2, r3, #8
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80012fc:	b211      	sxth	r1, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	3308      	adds	r3, #8
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	460a      	mov	r2, r1
 8001308:	805a      	strh	r2, [r3, #2]
								Slave_DB->a.Registers[Slave_DB->a.StartAddr] = Slave_DB->a.Registers[Slave_DB->a.StartAddr] | Slave_DB->a.RX_buff[5];
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	3308      	adds	r3, #8
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8001322:	b21b      	sxth	r3, r3
 8001324:	6939      	ldr	r1, [r7, #16]
 8001326:	f8b1 1610 	ldrh.w	r1, [r1, #1552]	; 0x610
 800132a:	4608      	mov	r0, r1
 800132c:	4313      	orrs	r3, r2
 800132e:	b219      	sxth	r1, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	f100 0308 	add.w	r3, r0, #8
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	460a      	mov	r2, r1
 800133c:	805a      	strh	r2, [r3, #2]

								for(int i=0;i<8;i++)
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001342:	e00f      	b.n	8001364 <Slave_Processor+0x178>
								{
									Slave_DB->a.TX_buff[i] = Slave_DB->a.RX_buff[i];
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	4413      	add	r3, r2
 800134a:	f203 530d 	addw	r3, r3, #1293	; 0x50d
 800134e:	7819      	ldrb	r1, [r3, #0]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	4413      	add	r3, r2
 8001356:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 800135a:	460a      	mov	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
								for(int i=0;i<8;i++)
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	3301      	adds	r3, #1
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001366:	2b07      	cmp	r3, #7
 8001368:	ddec      	ble.n	8001344 <Slave_Processor+0x158>
								}

								Slave_DB->a.TX_count = 8;
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	2208      	movs	r2, #8
 800136e:	815a      	strh	r2, [r3, #10]
								Slave_DB->a.TX_incr = 0;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2200      	movs	r2, #0
 8001374:	811a      	strh	r2, [r3, #8]
								Slave_DB->a.RX_buff_pointer = 0;
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	2200      	movs	r2, #0
 800137a:	715a      	strb	r2, [r3, #5]

							}

							if((Slave_DB->a.RX_buff[1] == 3) | (Slave_DB->a.RX_buff[1] == 4)) // обработка функции 0x03 и 0x04
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001382:	2b03      	cmp	r3, #3
 8001384:	bf0c      	ite	eq
 8001386:	2301      	moveq	r3, #1
 8001388:	2300      	movne	r3, #0
 800138a:	b2da      	uxtb	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf0c      	ite	eq
 8001396:	2301      	moveq	r3, #1
 8001398:	2300      	movne	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8116 	beq.w	80015d2 <Slave_Processor+0x3e6>
							{

								Slave_DB->a.TX_buff[0] = Slave_DB->a.RX_buff[0];
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
								Slave_DB->a.TX_buff[1] = Slave_DB->a.RX_buff[1];
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f893 250e 	ldrb.w	r2, [r3, #1294]	; 0x50e
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f

								Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
								Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

								Slave_DB->a.Quanity = Slave_DB->a.RX_buff[4];
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
								Slave_DB->a.Quanity = Slave_DB->a.Quanity << 8;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b29a      	uxth	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
								Slave_DB->a.Quanity = Slave_DB->a.Quanity | Slave_DB->a.RX_buff[5];
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f8b3 2612 	ldrh.w	r2, [r3, #1554]	; 0x612
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 800141e:	b29b      	uxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b29a      	uxth	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612

								Slave_DB->a.TX_buff[2] = Slave_DB->a.Quanity * 2;
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001430:	b2db      	uxtb	r3, r3
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	b2da      	uxtb	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

								if(Slave_DB->a.RX_buff[1] == 4)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001442:	2b04      	cmp	r3, #4
 8001444:	d14a      	bne.n	80014dc <Slave_Processor+0x2f0>
								{
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 8001446:	2300      	movs	r3, #0
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
 800144a:	e03f      	b.n	80014cc <Slave_Processor+0x2e0>
									{
										Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Input_Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001452:	4619      	mov	r1, r3
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	0fda      	lsrs	r2, r3, #31
 8001458:	4413      	add	r3, r2
 800145a:	105b      	asrs	r3, r3, #1
 800145c:	18ca      	adds	r2, r1, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001464:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	3304      	adds	r3, #4
 800146c:	b2d1      	uxtb	r1, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4413      	add	r3, r2
 8001472:	460a      	mov	r2, r1
 8001474:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
										Slave_DB->a.TempRegister = Slave_DB->a.Input_Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800147e:	4619      	mov	r1, r3
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	0fda      	lsrs	r2, r3, #31
 8001484:	4413      	add	r3, r2
 8001486:	105b      	asrs	r3, r3, #1
 8001488:	18ca      	adds	r2, r1, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001490:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001494:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001498:	b21a      	sxth	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 80014a6:	121b      	asrs	r3, r3, #8
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 80014b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b8:	3303      	adds	r3, #3
 80014ba:	b2d1      	uxtb	r1, r2
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4413      	add	r3, r2
 80014c0:	460a      	mov	r2, r1
 80014c2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	3302      	adds	r3, #2
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80014d2:	461a      	mov	r2, r3
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	4293      	cmp	r3, r2
 80014d8:	dbb8      	blt.n	800144c <Slave_Processor+0x260>
 80014da:	e04b      	b.n	8001574 <Slave_Processor+0x388>
									}
								}
								else
								{
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
 80014e0:	e041      	b.n	8001566 <Slave_Processor+0x37a>
									{
										Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80014e8:	4619      	mov	r1, r3
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	0fda      	lsrs	r2, r3, #31
 80014ee:	4413      	add	r3, r2
 80014f0:	105b      	asrs	r3, r3, #1
 80014f2:	440b      	add	r3, r1
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	3308      	adds	r3, #8
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	3304      	adds	r3, #4
 8001504:	b2d1      	uxtb	r1, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4413      	add	r3, r2
 800150a:	460a      	mov	r2, r1
 800150c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
										Slave_DB->a.TempRegister = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001516:	4619      	mov	r1, r3
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	0fda      	lsrs	r2, r3, #31
 800151c:	4413      	add	r3, r2
 800151e:	105b      	asrs	r3, r3, #1
 8001520:	440b      	add	r3, r1
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	3308      	adds	r3, #8
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800152e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001532:	b21a      	sxth	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 8001540:	121b      	asrs	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
										Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	3303      	adds	r3, #3
 8001554:	b2d1      	uxtb	r1, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4413      	add	r3, r2
 800155a:	460a      	mov	r2, r1
 800155c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
									for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	3302      	adds	r3, #2
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800156c:	461a      	mov	r2, r3
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	4293      	cmp	r3, r2
 8001572:	dbb6      	blt.n	80014e2 <Slave_Processor+0x2f6>
									}
								}

								uint8_t LenMess;
								LenMess = Slave_DB->a.TX_buff[2] + 5;
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800157a:	3305      	adds	r3, #5
 800157c:	72fb      	strb	r3, [r7, #11]
								CRC_16_Modbus(Slave_DB->a.TX_buff, (LenMess - 2), &Slave_DB->a.CRC_Calc_out_table);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	3b02      	subs	r3, #2
 8001588:	b2d9      	uxtb	r1, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8001590:	461a      	mov	r2, r3
 8001592:	f7ff fd37 	bl	8001004 <CRC_16_Modbus>
								Slave_DB->a.TX_buff[LenMess - 1] = Slave_DB->a.CRC_Calc_out_table[1];
 8001596:	7afb      	ldrb	r3, [r7, #11]
 8001598:	3b01      	subs	r3, #1
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	f892 160d 	ldrb.w	r1, [r2, #1549]	; 0x60d
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4413      	add	r3, r2
 80015a4:	460a      	mov	r2, r1
 80015a6:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
								Slave_DB->a.TX_buff[LenMess - 2] = Slave_DB->a.CRC_Calc_out_table[0];
 80015aa:	7afb      	ldrb	r3, [r7, #11]
 80015ac:	3b02      	subs	r3, #2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	f892 160c 	ldrb.w	r1, [r2, #1548]	; 0x60c
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4413      	add	r3, r2
 80015b8:	460a      	mov	r2, r1
 80015ba:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

								Slave_DB->a.TX_count = LenMess;
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	815a      	strh	r2, [r3, #10]
								Slave_DB->a.TX_incr = 0;
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2200      	movs	r2, #0
 80015ca:	811a      	strh	r2, [r3, #8]
								Slave_DB->a.RX_buff_pointer = 0;
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	2200      	movs	r2, #0
 80015d0:	715a      	strb	r2, [r3, #5]
							}

						}
					}

				if( Slave_DB->a.RX_buff[1] == 16 ) // зондирование для функции 0x10
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 80015d8:	2b10      	cmp	r3, #16
 80015da:	d10e      	bne.n	80015fa <Slave_Processor+0x40e>
				{
					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[6];
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.LenLongMessage = Slave_DB->a.Quanity + 9;
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	3309      	adds	r3, #9
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	719a      	strb	r2, [r3, #6]
				}
		}

		if( Slave_DB->a.RX_buff_pointer == 11 )
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	795b      	ldrb	r3, [r3, #5]
 80015fe:	2b0b      	cmp	r3, #11
 8001600:	d113      	bne.n	800162a <Slave_Processor+0x43e>
		{
			if( Slave_DB->a.RX_buff[1] == 23 ) // зондирование для функции 0x17
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001608:	2b17      	cmp	r3, #23
 800160a:	d10e      	bne.n	800162a <Slave_Processor+0x43e>
				{
					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[10];
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001612:	b29a      	uxth	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.LenLongMessage = Slave_DB->a.Quanity + 13;
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001620:	b2db      	uxtb	r3, r3
 8001622:	330d      	adds	r3, #13
 8001624:	b2da      	uxtb	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	719a      	strb	r2, [r3, #6]
				}
		}


		if( Slave_DB->a.RX_buff[1] == 16 ) // обработка функции 0x10
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001630:	2b10      	cmp	r3, #16
 8001632:	f040 80dd 	bne.w	80017f0 <Slave_Processor+0x604>
		{
			if( (Slave_DB->a.RX_buff_pointer == Slave_DB->a.LenLongMessage) )
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	795a      	ldrb	r2, [r3, #5]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	799b      	ldrb	r3, [r3, #6]
 800163e:	429a      	cmp	r2, r3
 8001640:	f040 80d6 	bne.w	80017f0 <Slave_Processor+0x604>
			{
				Slave_DB->a.CRC_Calc_out_table[2] = 0;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
				if(Slave_DB->a.RX_buff[1] == 16) {CRC_16_Modbus(Slave_DB->a.RX_buff, (Slave_DB->a.LenLongMessage-2), &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001652:	2b10      	cmp	r3, #16
 8001654:	d10c      	bne.n	8001670 <Slave_Processor+0x484>
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	799b      	ldrb	r3, [r3, #6]
 8001660:	3b02      	subs	r3, #2
 8001662:	b2d9      	uxtb	r1, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 800166a:	461a      	mov	r2, r3
 800166c:	f7ff fcca 	bl	8001004 <CRC_16_Modbus>

				if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80ba 	beq.w	80017f0 <Slave_Processor+0x604>
				{

					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 8001682:	b29a      	uxth	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b29a      	uxth	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.RX_buff[6];i=i+2)
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	e05f      	b.n	8001778 <Slave_Processor+0x58c>
					{
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.RX_buff[i+7];
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	3307      	adds	r3, #7
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4413      	add	r3, r2
 80016c0:	f893 150d 	ldrb.w	r1, [r3, #1293]	; 0x50d
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80016ca:	4618      	mov	r0, r3
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	0fda      	lsrs	r2, r3, #31
 80016d0:	4413      	add	r3, r2
 80016d2:	105b      	asrs	r3, r3, #1
 80016d4:	4403      	add	r3, r0
 80016d6:	b209      	sxth	r1, r1
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	3308      	adds	r3, #8
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	460a      	mov	r2, r1
 80016e2:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] << 8;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80016ea:	4619      	mov	r1, r3
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	0fda      	lsrs	r2, r3, #31
 80016f0:	4413      	add	r3, r2
 80016f2:	105b      	asrs	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	3308      	adds	r3, #8
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001702:	0219      	lsls	r1, r3, #8
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800170a:	4618      	mov	r0, r3
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	0fda      	lsrs	r2, r3, #31
 8001710:	4413      	add	r3, r2
 8001712:	105b      	asrs	r3, r3, #1
 8001714:	4403      	add	r3, r0
 8001716:	b209      	sxth	r1, r1
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	3308      	adds	r3, #8
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	460a      	mov	r2, r1
 8001722:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] | Slave_DB->a.RX_buff[i+8];
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800172a:	4619      	mov	r1, r3
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	0fda      	lsrs	r2, r3, #31
 8001730:	4413      	add	r3, r2
 8001732:	105b      	asrs	r3, r3, #1
 8001734:	440b      	add	r3, r1
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	3308      	adds	r3, #8
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	3308      	adds	r3, #8
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4413      	add	r3, r2
 800174a:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 800174e:	b21a      	sxth	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001756:	461c      	mov	r4, r3
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	0fd8      	lsrs	r0, r3, #31
 800175c:	4403      	add	r3, r0
 800175e:	105b      	asrs	r3, r3, #1
 8001760:	4423      	add	r3, r4
 8001762:	430a      	orrs	r2, r1
 8001764:	b211      	sxth	r1, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	3308      	adds	r3, #8
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	460a      	mov	r2, r1
 8001770:	805a      	strh	r2, [r3, #2]
					for(int i=0;i<Slave_DB->a.RX_buff[6];i=i+2)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	3302      	adds	r3, #2
 8001776:	623b      	str	r3, [r7, #32]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 800177e:	461a      	mov	r2, r3
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	4293      	cmp	r3, r2
 8001784:	db98      	blt.n	80016b8 <Slave_Processor+0x4cc>
					}

					for(int i=0;i<6;i++)
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	e00f      	b.n	80017ac <Slave_Processor+0x5c0>
					{Slave_DB->a.TX_buff[i] = Slave_DB->a.RX_buff[i];}
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	4413      	add	r3, r2
 8001792:	f203 530d 	addw	r3, r3, #1293	; 0x50d
 8001796:	7819      	ldrb	r1, [r3, #0]
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 80017a2:	460a      	mov	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<6;i++)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	ddec      	ble.n	800178c <Slave_Processor+0x5a0>

					CRC_16_Modbus(Slave_DB->a.TX_buff, 6, &Slave_DB->a.CRC_Calc_out_table);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80017be:	461a      	mov	r2, r3
 80017c0:	2106      	movs	r1, #6
 80017c2:	f7ff fc1f 	bl	8001004 <CRC_16_Modbus>
					Slave_DB->a.TX_buff[6] = Slave_DB->a.CRC_Calc_out_table[0];
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f893 260c 	ldrb.w	r2, [r3, #1548]	; 0x60c
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
					Slave_DB->a.TX_buff[7] = Slave_DB->a.CRC_Calc_out_table[1];
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f893 260d 	ldrb.w	r2, [r3, #1549]	; 0x60d
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

					Slave_DB->a.TX_count = 8;
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	2208      	movs	r2, #8
 80017e2:	815a      	strh	r2, [r3, #10]
					Slave_DB->a.TX_incr = 0;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	2200      	movs	r2, #0
 80017e8:	811a      	strh	r2, [r3, #8]
					Slave_DB->a.RX_buff_pointer = 0;
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2200      	movs	r2, #0
 80017ee:	715a      	strb	r2, [r3, #5]
				}
			}
		}

		if( Slave_DB->a.RX_buff[1] == 23 ) // обработка функции 0x17
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 80017f6:	2b17      	cmp	r3, #23
 80017f8:	f040 816e 	bne.w	8001ad8 <Slave_Processor+0x8ec>
		{
			if( (Slave_DB->a.RX_buff_pointer == Slave_DB->a.LenLongMessage) )
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	795a      	ldrb	r2, [r3, #5]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	799b      	ldrb	r3, [r3, #6]
 8001804:	429a      	cmp	r2, r3
 8001806:	f040 8167 	bne.w	8001ad8 <Slave_Processor+0x8ec>
			{
				Slave_DB->a.CRC_Calc_out_table[2] = 0;
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
				if(Slave_DB->a.RX_buff[1] == 23) {CRC_16_Modbus(Slave_DB->a.RX_buff, (Slave_DB->a.LenLongMessage-2), &Slave_DB->a.CRC_Calc_out_table);} //Проверка CRC
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f893 350e 	ldrb.w	r3, [r3, #1294]	; 0x50e
 8001818:	2b17      	cmp	r3, #23
 800181a:	d10c      	bne.n	8001836 <Slave_Processor+0x64a>
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f203 500d 	addw	r0, r3, #1293	; 0x50d
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	799b      	ldrb	r3, [r3, #6]
 8001826:	3b02      	subs	r3, #2
 8001828:	b2d9      	uxtb	r1, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8001830:	461a      	mov	r2, r3
 8001832:	f7ff fbe7 	bl	8001004 <CRC_16_Modbus>

				if(Slave_DB->a.CRC_Calc_out_table[2]) //Если CRC OK
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f893 360e 	ldrb.w	r3, [r3, #1550]	; 0x60e
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 814b 	beq.w	8001ad8 <Slave_Processor+0x8ec>
				{
					// Приём регистров
					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[6];
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8001848:	b29a      	uxth	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	b29a      	uxth	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[7];
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f893 3514 	ldrb.w	r3, [r3, #1300]	; 0x514
 800186c:	b29b      	uxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b29a      	uxth	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.RX_buff[10];i=i+2)
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	e05f      	b.n	800193e <Slave_Processor+0x752>
					{
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.RX_buff[i+11];
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	330b      	adds	r3, #11
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4413      	add	r3, r2
 8001886:	f893 150d 	ldrb.w	r1, [r3, #1293]	; 0x50d
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001890:	4618      	mov	r0, r3
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	0fda      	lsrs	r2, r3, #31
 8001896:	4413      	add	r3, r2
 8001898:	105b      	asrs	r3, r3, #1
 800189a:	4403      	add	r3, r0
 800189c:	b209      	sxth	r1, r1
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	3308      	adds	r3, #8
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	460a      	mov	r2, r1
 80018a8:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] << 8;
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80018b0:	4619      	mov	r1, r3
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	0fda      	lsrs	r2, r3, #31
 80018b6:	4413      	add	r3, r2
 80018b8:	105b      	asrs	r3, r3, #1
 80018ba:	440b      	add	r3, r1
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	3308      	adds	r3, #8
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018c8:	0219      	lsls	r1, r3, #8
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80018d0:	4618      	mov	r0, r3
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	0fda      	lsrs	r2, r3, #31
 80018d6:	4413      	add	r3, r2
 80018d8:	105b      	asrs	r3, r3, #1
 80018da:	4403      	add	r3, r0
 80018dc:	b209      	sxth	r1, r1
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	3308      	adds	r3, #8
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	460a      	mov	r2, r1
 80018e8:	805a      	strh	r2, [r3, #2]
						Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] | Slave_DB->a.RX_buff[i+12];
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80018f0:	4619      	mov	r1, r3
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	0fda      	lsrs	r2, r3, #31
 80018f6:	4413      	add	r3, r2
 80018f8:	105b      	asrs	r3, r3, #1
 80018fa:	440b      	add	r3, r1
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	3308      	adds	r3, #8
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	330c      	adds	r3, #12
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4413      	add	r3, r2
 8001910:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 8001914:	b21a      	sxth	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 800191c:	461c      	mov	r4, r3
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	0fd8      	lsrs	r0, r3, #31
 8001922:	4403      	add	r3, r0
 8001924:	105b      	asrs	r3, r3, #1
 8001926:	4423      	add	r3, r4
 8001928:	430a      	orrs	r2, r1
 800192a:	b211      	sxth	r1, r2
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	3308      	adds	r3, #8
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	460a      	mov	r2, r1
 8001936:	805a      	strh	r2, [r3, #2]
					for(int i=0;i<Slave_DB->a.RX_buff[10];i=i+2)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	3302      	adds	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 8001944:	461a      	mov	r2, r3
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4293      	cmp	r3, r2
 800194a:	db98      	blt.n	800187e <Slave_Processor+0x692>
					}

					// Формирование ответа
					Slave_DB->a.TX_buff[0] = Slave_DB->a.RX_buff[0];
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					Slave_DB->a.TX_buff[1] = Slave_DB->a.RX_buff[1];
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f893 250e 	ldrb.w	r2, [r3, #1294]	; 0x50e
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f

					Slave_DB->a.Quanity = Slave_DB->a.RX_buff[4];
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 800196a:	b29a      	uxth	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.Quanity = Slave_DB->a.Quanity << 8;
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b29a      	uxth	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612
					Slave_DB->a.Quanity = Slave_DB->a.Quanity | Slave_DB->a.RX_buff[5];
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f8b3 2612 	ldrh.w	r2, [r3, #1554]	; 0x612
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 800198e:	b29b      	uxth	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b29a      	uxth	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f8a3 2612 	strh.w	r2, [r3, #1554]	; 0x612

					Slave_DB->a.TX_buff[2] = Slave_DB->a.Quanity * 2;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

					Slave_DB->a.StartAddr = Slave_DB->a.RX_buff[2];
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f893 350f 	ldrb.w	r3, [r3, #1295]	; 0x50f
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr << 8;
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610
					Slave_DB->a.StartAddr = Slave_DB->a.StartAddr | Slave_DB->a.RX_buff[3];
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	f8b3 2610 	ldrh.w	r2, [r3, #1552]	; 0x610
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4313      	orrs	r3, r2
 80019da:	b29a      	uxth	r2, r3
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f8a3 2610 	strh.w	r2, [r3, #1552]	; 0x610

					for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e041      	b.n	8001a6c <Slave_Processor+0x880>
					{
						Slave_DB->a.TX_buff[i+4] = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0x00FF;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 80019ee:	4619      	mov	r1, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	0fda      	lsrs	r2, r3, #31
 80019f4:	4413      	add	r3, r2
 80019f6:	105b      	asrs	r3, r3, #1
 80019f8:	440b      	add	r3, r1
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	3308      	adds	r3, #8
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	b2d1      	uxtb	r1, r2
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4413      	add	r3, r2
 8001a10:	460a      	mov	r2, r1
 8001a12:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
						Slave_DB->a.TempRegister = Slave_DB->a.Registers[Slave_DB->a.StartAddr + (i/2)] & 0xFF00;
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f8b3 3610 	ldrh.w	r3, [r3, #1552]	; 0x610
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	0fda      	lsrs	r2, r3, #31
 8001a22:	4413      	add	r3, r2
 8001a24:	105b      	asrs	r3, r3, #1
 8001a26:	440b      	add	r3, r1
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a38:	b21a      	sxth	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
						Slave_DB->a.TempRegister = Slave_DB->a.TempRegister >> 8;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	f9b3 3614 	ldrsh.w	r3, [r3, #1556]	; 0x614
 8001a46:	121b      	asrs	r3, r3, #8
 8001a48:	b21a      	sxth	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	f8a3 2614 	strh.w	r2, [r3, #1556]	; 0x614
						Slave_DB->a.TX_buff[i+3] = Slave_DB->a.TempRegister & 0x00FF;
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	f9b3 2614 	ldrsh.w	r2, [r3, #1556]	; 0x614
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3303      	adds	r3, #3
 8001a5a:	b2d1      	uxtb	r1, r2
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4413      	add	r3, r2
 8001a60:	460a      	mov	r2, r1
 8001a62:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					for(int i=0;i<Slave_DB->a.TX_buff[2];i=i+2)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3302      	adds	r3, #2
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001a72:	461a      	mov	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	4293      	cmp	r3, r2
 8001a78:	dbb6      	blt.n	80019e8 <Slave_Processor+0x7fc>
					}

					uint8_t LenMess;
					LenMess = Slave_DB->a.TX_buff[2] + 5;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001a80:	3305      	adds	r3, #5
 8001a82:	72bb      	strb	r3, [r7, #10]
					CRC_16_Modbus(Slave_DB->a.TX_buff, (LenMess - 2), &Slave_DB->a.CRC_Calc_out_table);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f203 400e 	addw	r0, r3, #1038	; 0x40e
 8001a8a:	7abb      	ldrb	r3, [r7, #10]
 8001a8c:	3b02      	subs	r3, #2
 8001a8e:	b2d9      	uxtb	r1, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8001a96:	461a      	mov	r2, r3
 8001a98:	f7ff fab4 	bl	8001004 <CRC_16_Modbus>
					Slave_DB->a.TX_buff[LenMess - 1] = Slave_DB->a.CRC_Calc_out_table[1];
 8001a9c:	7abb      	ldrb	r3, [r7, #10]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	f892 160d 	ldrb.w	r1, [r2, #1549]	; 0x60d
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	460a      	mov	r2, r1
 8001aac:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
					Slave_DB->a.TX_buff[LenMess - 2] = Slave_DB->a.CRC_Calc_out_table[0];
 8001ab0:	7abb      	ldrb	r3, [r7, #10]
 8001ab2:	3b02      	subs	r3, #2
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	f892 160c 	ldrb.w	r1, [r2, #1548]	; 0x60c
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4413      	add	r3, r2
 8001abe:	460a      	mov	r2, r1
 8001ac0:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

					Slave_DB->a.TX_count = LenMess;
 8001ac4:	7abb      	ldrb	r3, [r7, #10]
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	815a      	strh	r2, [r3, #10]
					Slave_DB->a.TX_incr = 0;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	811a      	strh	r2, [r3, #8]
					Slave_DB->a.RX_buff_pointer = 0;
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	715a      	strb	r2, [r3, #5]
				}
			}
		}
	}
}
 8001ad8:	bf00      	nop
 8001ada:	3734      	adds	r7, #52	; 0x34
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}

08001ae0 <Slave_Clock_1ms>:
		}
	}
}

void Slave_Clock_1ms(uint32_t pointer_DB)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

	struct {UART_Slave_DB a;} *Slave_DB = pointer_DB;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	60fb      	str	r3, [r7, #12]
	struct {USART_TypeDef a;} *USART_port = Slave_DB->a.PORT;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60bb      	str	r3, [r7, #8]

	Slave_DB->a.schet++;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8a1b      	ldrh	r3, [r3, #16]
 8001af6:	3301      	adds	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	821a      	strh	r2, [r3, #16]
	if(Slave_DB->a.schet>=100){Slave_DB->a.schet=100;}
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8a1b      	ldrh	r3, [r3, #16]
 8001b02:	2b63      	cmp	r3, #99	; 0x63
 8001b04:	d902      	bls.n	8001b0c <Slave_Clock_1ms+0x2c>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2264      	movs	r2, #100	; 0x64
 8001b0a:	821a      	strh	r2, [r3, #16]
	if(Slave_DB->a.TX_count){USART_port->a.CR1 |= 0x80;}
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	895b      	ldrh	r3, [r3, #10]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <Slave_Clock_1ms+0x40>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60da      	str	r2, [r3, #12]

}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <Screens_init>:
background_zaliv Work_regim_zaliv_1 = {0};



void Screens_init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af04      	add	r7, sp, #16

	for(int i = 0; i < 20;i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e008      	b.n	8001b4a <Screens_init+0x1e>
	{
		FonColor[i] = BackgroundColor;
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <Screens_init+0x128>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4946      	ldr	r1, [pc, #280]	; (8001c58 <Screens_init+0x12c>)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 20;i++)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b13      	cmp	r3, #19
 8001b4e:	ddf3      	ble.n	8001b38 <Screens_init+0xc>
	}


	// Экран 0 (черный экран)
	HAL_LTDC_SetAddress(&hltdc, Page[0], 0);
 8001b50:	4b42      	ldr	r3, [pc, #264]	; (8001c5c <Screens_init+0x130>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2200      	movs	r2, #0
 8001b56:	4619      	mov	r1, r3
 8001b58:	4841      	ldr	r0, [pc, #260]	; (8001c60 <Screens_init+0x134>)
 8001b5a:	f007 ff9b 	bl	8009a94 <HAL_LTDC_SetAddress>
	Zaliv(0x000000, Page[0], 800, 480);
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <Screens_init+0x130>)
 8001b60:	6819      	ldr	r1, [r3, #0]
 8001b62:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b66:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f006 feb8 	bl	80088e0 <Zaliv>

	// Экран_1
	Zaliv(BackgroundColor, Page[1], 800, 480);
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <Screens_init+0x128>)
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <Screens_init+0x130>)
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b80:	f006 feae 	bl	80088e0 <Zaliv>
	Draw_Rectangle(0x000000,   0, 220, 800,   3, Page[1], 800, 480); // первая горизонталь
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <Screens_init+0x130>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b8c:	9203      	str	r2, [sp, #12]
 8001b8e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b92:	9202      	str	r2, [sp, #8]
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	2303      	movs	r3, #3
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b9e:	22dc      	movs	r2, #220	; 0xdc
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f006 fec8 	bl	8008938 <Draw_Rectangle>

	for(int i = 0; i < 3; i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	e13c      	b.n	8001e28 <Screens_init+0x2fc>
	{

		uint16_t shift_X = i * 260 + 7;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	0192      	lsls	r2, r2, #6
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3307      	adds	r3, #7
 8001bbe:	80fb      	strh	r3, [r7, #6]

		if(i < 2)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	dc13      	bgt.n	8001bee <Screens_init+0xc2>
		{
			Draw_Rectangle(0x000000, 260 + shift_X,   0,   3, 220, Page[1], 800, 480);
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001bcc:	b299      	uxth	r1, r3
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <Screens_init+0x130>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001bd6:	9203      	str	r2, [sp, #12]
 8001bd8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001bdc:	9202      	str	r2, [sp, #8]
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	23dc      	movs	r3, #220	; 0xdc
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2303      	movs	r3, #3
 8001be6:	2200      	movs	r2, #0
 8001be8:	2000      	movs	r0, #0
 8001bea:	f006 fea5 	bl	8008938 <Draw_Rectangle>
		}

		switch(i)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d03d      	beq.n	8001c70 <Screens_init+0x144>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	dc4d      	bgt.n	8001c96 <Screens_init+0x16a>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <Screens_init+0xdc>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d013      	beq.n	8001c2e <Screens_init+0x102>
 8001c06:	e046      	b.n	8001c96 <Screens_init+0x16a>
		{
			case 0:
				Short_Left_Colored_RU_DrawString_32("1",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	3346      	adds	r3, #70	; 0x46
 8001c0c:	b298      	uxth	r0, r3
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <Screens_init+0x128>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <Screens_init+0x138>)
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	4911      	ldr	r1, [pc, #68]	; (8001c5c <Screens_init+0x130>)
 8001c18:	6849      	ldr	r1, [r1, #4]
 8001c1a:	9102      	str	r1, [sp, #8]
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2317      	movs	r3, #23
 8001c22:	4602      	mov	r2, r0
 8001c24:	2101      	movs	r1, #1
 8001c26:	4810      	ldr	r0, [pc, #64]	; (8001c68 <Screens_init+0x13c>)
 8001c28:	f005 fd0e 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			break;
 8001c2c:	e033      	b.n	8001c96 <Screens_init+0x16a>

			case 1:
				Short_Left_Colored_RU_DrawString_32("2",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	3346      	adds	r3, #70	; 0x46
 8001c32:	b298      	uxth	r0, r3
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <Screens_init+0x128>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <Screens_init+0x138>)
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	4907      	ldr	r1, [pc, #28]	; (8001c5c <Screens_init+0x130>)
 8001c3e:	6849      	ldr	r1, [r1, #4]
 8001c40:	9102      	str	r1, [sp, #8]
 8001c42:	9201      	str	r2, [sp, #4]
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2317      	movs	r3, #23
 8001c48:	4602      	mov	r2, r0
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <Screens_init+0x140>)
 8001c4e:	f005 fcfb 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			break;
 8001c52:	e020      	b.n	8001c96 <Screens_init+0x16a>
 8001c54:	20000008 	.word	0x20000008
 8001c58:	200000a4 	.word	0x200000a4
 8001c5c:	20000980 	.word	0x20000980
 8001c60:	20000144 	.word	0x20000144
 8001c64:	200009f4 	.word	0x200009f4
 8001c68:	0800dea4 	.word	0x0800dea4
 8001c6c:	0800dea8 	.word	0x0800dea8

			case 2:
				Short_Left_Colored_RU_DrawString_32("3",  			      1,  70 + shift_X,  23, BackgroundColor, BasicSymbolColor, Page[1]);
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	3346      	adds	r3, #70	; 0x46
 8001c74:	b298      	uxth	r0, r3
 8001c76:	4b9c      	ldr	r3, [pc, #624]	; (8001ee8 <Screens_init+0x3bc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a9c      	ldr	r2, [pc, #624]	; (8001eec <Screens_init+0x3c0>)
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	499c      	ldr	r1, [pc, #624]	; (8001ef0 <Screens_init+0x3c4>)
 8001c80:	6849      	ldr	r1, [r1, #4]
 8001c82:	9102      	str	r1, [sp, #8]
 8001c84:	9201      	str	r2, [sp, #4]
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2317      	movs	r3, #23
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4899      	ldr	r0, [pc, #612]	; (8001ef4 <Screens_init+0x3c8>)
 8001c90:	f005 fcda 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			break;
 8001c94:	bf00      	nop
		}

		Short_Left_Colored_RU_DrawString_32("АНН",  			  3,   5 + shift_X,  20, BackgroundColor, BasicSymbolColor, Page[1]);
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	3305      	adds	r3, #5
 8001c9a:	b298      	uxth	r0, r3
 8001c9c:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <Screens_init+0x3bc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a92      	ldr	r2, [pc, #584]	; (8001eec <Screens_init+0x3c0>)
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	4992      	ldr	r1, [pc, #584]	; (8001ef0 <Screens_init+0x3c4>)
 8001ca6:	6849      	ldr	r1, [r1, #4]
 8001ca8:	9102      	str	r1, [sp, #8]
 8001caa:	9201      	str	r2, [sp, #4]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2314      	movs	r3, #20
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	4890      	ldr	r0, [pc, #576]	; (8001ef8 <Screens_init+0x3cc>)
 8001cb6:	f005 fcc7 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Д.напор", 	 	  	  7,   5 + shift_X,  50, BackgroundColor, BasicSymbolColor, Page[1]);
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	3305      	adds	r3, #5
 8001cbe:	b298      	uxth	r0, r3
 8001cc0:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <Screens_init+0x3bc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a89      	ldr	r2, [pc, #548]	; (8001eec <Screens_init+0x3c0>)
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	4989      	ldr	r1, [pc, #548]	; (8001ef0 <Screens_init+0x3c4>)
 8001cca:	6849      	ldr	r1, [r1, #4]
 8001ccc:	9102      	str	r1, [sp, #8]
 8001cce:	9201      	str	r2, [sp, #4]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2332      	movs	r3, #50	; 0x32
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	2107      	movs	r1, #7
 8001cd8:	4888      	ldr	r0, [pc, #544]	; (8001efc <Screens_init+0x3d0>)
 8001cda:	f005 fcb5 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		  3, 200 + shift_X,  50, BackgroundColor, BasicSymbolColor, Page[1]);
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	33c8      	adds	r3, #200	; 0xc8
 8001ce2:	b298      	uxth	r0, r3
 8001ce4:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <Screens_init+0x3bc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a80      	ldr	r2, [pc, #512]	; (8001eec <Screens_init+0x3c0>)
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	4980      	ldr	r1, [pc, #512]	; (8001ef0 <Screens_init+0x3c4>)
 8001cee:	6849      	ldr	r1, [r1, #4]
 8001cf0:	9102      	str	r1, [sp, #8]
 8001cf2:	9201      	str	r2, [sp, #4]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2332      	movs	r3, #50	; 0x32
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	2103      	movs	r1, #3
 8001cfc:	4880      	ldr	r0, [pc, #512]	; (8001f00 <Screens_init+0x3d4>)
 8001cfe:	f005 fca3 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Д.масла", 	 		  7,   5 + shift_X,  80, BackgroundColor, BasicSymbolColor, Page[1]);
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	3305      	adds	r3, #5
 8001d06:	b298      	uxth	r0, r3
 8001d08:	4b77      	ldr	r3, [pc, #476]	; (8001ee8 <Screens_init+0x3bc>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a77      	ldr	r2, [pc, #476]	; (8001eec <Screens_init+0x3c0>)
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	4977      	ldr	r1, [pc, #476]	; (8001ef0 <Screens_init+0x3c4>)
 8001d12:	6849      	ldr	r1, [r1, #4]
 8001d14:	9102      	str	r1, [sp, #8]
 8001d16:	9201      	str	r2, [sp, #4]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2350      	movs	r3, #80	; 0x50
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	2107      	movs	r1, #7
 8001d20:	4878      	ldr	r0, [pc, #480]	; (8001f04 <Screens_init+0x3d8>)
 8001d22:	f005 fc91 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		  3, 200 + shift_X,  80, BackgroundColor, BasicSymbolColor, Page[1]);
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	33c8      	adds	r3, #200	; 0xc8
 8001d2a:	b298      	uxth	r0, r3
 8001d2c:	4b6e      	ldr	r3, [pc, #440]	; (8001ee8 <Screens_init+0x3bc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6e      	ldr	r2, [pc, #440]	; (8001eec <Screens_init+0x3c0>)
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	496e      	ldr	r1, [pc, #440]	; (8001ef0 <Screens_init+0x3c4>)
 8001d36:	6849      	ldr	r1, [r1, #4]
 8001d38:	9102      	str	r1, [sp, #8]
 8001d3a:	9201      	str	r2, [sp, #4]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2350      	movs	r3, #80	; 0x50
 8001d40:	4602      	mov	r2, r0
 8001d42:	2103      	movs	r1, #3
 8001d44:	486e      	ldr	r0, [pc, #440]	; (8001f00 <Screens_init+0x3d4>)
 8001d46:	f005 fc7f 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("Т.масла", 	 	  	  7,   5 + shift_X, 110, BackgroundColor, BasicSymbolColor, Page[1]);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	3305      	adds	r3, #5
 8001d4e:	b298      	uxth	r0, r3
 8001d50:	4b65      	ldr	r3, [pc, #404]	; (8001ee8 <Screens_init+0x3bc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a65      	ldr	r2, [pc, #404]	; (8001eec <Screens_init+0x3c0>)
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	4965      	ldr	r1, [pc, #404]	; (8001ef0 <Screens_init+0x3c4>)
 8001d5a:	6849      	ldr	r1, [r1, #4]
 8001d5c:	9102      	str	r1, [sp, #8]
 8001d5e:	9201      	str	r2, [sp, #4]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	236e      	movs	r3, #110	; 0x6e
 8001d64:	4602      	mov	r2, r0
 8001d66:	2107      	movs	r1, #7
 8001d68:	4867      	ldr	r0, [pc, #412]	; (8001f08 <Screens_init+0x3dc>)
 8001d6a:	f005 fc6d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("*С", 	 	  		  2, 200 + shift_X, 110, BackgroundColor, BasicSymbolColor, Page[1]);
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	33c8      	adds	r3, #200	; 0xc8
 8001d72:	b298      	uxth	r0, r3
 8001d74:	4b5c      	ldr	r3, [pc, #368]	; (8001ee8 <Screens_init+0x3bc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a5c      	ldr	r2, [pc, #368]	; (8001eec <Screens_init+0x3c0>)
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	495c      	ldr	r1, [pc, #368]	; (8001ef0 <Screens_init+0x3c4>)
 8001d7e:	6849      	ldr	r1, [r1, #4]
 8001d80:	9102      	str	r1, [sp, #8]
 8001d82:	9201      	str	r2, [sp, #4]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	236e      	movs	r3, #110	; 0x6e
 8001d88:	4602      	mov	r2, r0
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	485f      	ldr	r0, [pc, #380]	; (8001f0c <Screens_init+0x3e0>)
 8001d8e:	f005 fc5b 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("МотЧасы", 	 	  	  7,   5 + shift_X, 200, BackgroundColor, BasicSymbolColor, Page[1]);
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	3305      	adds	r3, #5
 8001d96:	b298      	uxth	r0, r3
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <Screens_init+0x3bc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a53      	ldr	r2, [pc, #332]	; (8001eec <Screens_init+0x3c0>)
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	4953      	ldr	r1, [pc, #332]	; (8001ef0 <Screens_init+0x3c4>)
 8001da2:	6849      	ldr	r1, [r1, #4]
 8001da4:	9102      	str	r1, [sp, #8]
 8001da6:	9201      	str	r2, [sp, #4]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	23c8      	movs	r3, #200	; 0xc8
 8001dac:	4602      	mov	r2, r0
 8001dae:	2107      	movs	r1, #7
 8001db0:	4857      	ldr	r0, [pc, #348]	; (8001f10 <Screens_init+0x3e4>)
 8001db2:	f005 fc49 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

		Short_Left_Colored_RU_DrawString_32("   Вкл   ", 		  9,  95 + shift_X,  20,      GreenColor, BasicSymbolColor, Page[1]);
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	335f      	adds	r3, #95	; 0x5f
 8001dba:	b298      	uxth	r0, r3
 8001dbc:	4b55      	ldr	r3, [pc, #340]	; (8001f14 <Screens_init+0x3e8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a4a      	ldr	r2, [pc, #296]	; (8001eec <Screens_init+0x3c0>)
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	494a      	ldr	r1, [pc, #296]	; (8001ef0 <Screens_init+0x3c4>)
 8001dc6:	6849      	ldr	r1, [r1, #4]
 8001dc8:	9102      	str	r1, [sp, #8]
 8001dca:	9201      	str	r2, [sp, #4]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2314      	movs	r3, #20
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	2109      	movs	r1, #9
 8001dd4:	4850      	ldr	r0, [pc, #320]	; (8001f18 <Screens_init+0x3ec>)
 8001dd6:	f005 fc37 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("  РАЗГРУЗКА   ", 	 14,   5 + shift_X, 140, 		RedColor, BasicSymbolColor, Page[1]);
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	3305      	adds	r3, #5
 8001dde:	b298      	uxth	r0, r3
 8001de0:	4b4e      	ldr	r3, [pc, #312]	; (8001f1c <Screens_init+0x3f0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a41      	ldr	r2, [pc, #260]	; (8001eec <Screens_init+0x3c0>)
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	4941      	ldr	r1, [pc, #260]	; (8001ef0 <Screens_init+0x3c4>)
 8001dea:	6849      	ldr	r1, [r1, #4]
 8001dec:	9102      	str	r1, [sp, #8]
 8001dee:	9201      	str	r2, [sp, #4]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	238c      	movs	r3, #140	; 0x8c
 8001df4:	4602      	mov	r2, r0
 8001df6:	210e      	movs	r1, #14
 8001df8:	4849      	ldr	r0, [pc, #292]	; (8001f20 <Screens_init+0x3f4>)
 8001dfa:	f005 fc25 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		Short_Left_Colored_RU_DrawString_32("тепл. защита  ", 	 14,   5 + shift_X, 170, 		RedColor, BasicSymbolColor, Page[1]);
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	3305      	adds	r3, #5
 8001e02:	b298      	uxth	r0, r3
 8001e04:	4b45      	ldr	r3, [pc, #276]	; (8001f1c <Screens_init+0x3f0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a38      	ldr	r2, [pc, #224]	; (8001eec <Screens_init+0x3c0>)
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	4938      	ldr	r1, [pc, #224]	; (8001ef0 <Screens_init+0x3c4>)
 8001e0e:	6849      	ldr	r1, [r1, #4]
 8001e10:	9102      	str	r1, [sp, #8]
 8001e12:	9201      	str	r2, [sp, #4]
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	23aa      	movs	r3, #170	; 0xaa
 8001e18:	4602      	mov	r2, r0
 8001e1a:	210e      	movs	r1, #14
 8001e1c:	4841      	ldr	r0, [pc, #260]	; (8001f24 <Screens_init+0x3f8>)
 8001e1e:	f005 fc13 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	for(int i = 0; i < 3; i++)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	3301      	adds	r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	f77f aebf 	ble.w	8001bae <Screens_init+0x82>
		

	}

	Draw_Rectangle(0x000000, 665, 220, 3, 360, Page[1], 800, 480);
 8001e30:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <Screens_init+0x3c4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e38:	9203      	str	r2, [sp, #12]
 8001e3a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e3e:	9202      	str	r2, [sp, #8]
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2303      	movs	r3, #3
 8001e4a:	22dc      	movs	r2, #220	; 0xdc
 8001e4c:	f240 2199 	movw	r1, #665	; 0x299
 8001e50:	2000      	movs	r0, #0
 8001e52:	f006 fd71 	bl	8008938 <Draw_Rectangle>
	Short_Left_Colored_RU_DrawString_32("УСТАВКА", 	 	  	 			 7, 670, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e56:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <Screens_init+0x3bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a24      	ldr	r2, [pc, #144]	; (8001eec <Screens_init+0x3c0>)
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	4924      	ldr	r1, [pc, #144]	; (8001ef0 <Screens_init+0x3c4>)
 8001e60:	6849      	ldr	r1, [r1, #4]
 8001e62:	9102      	str	r1, [sp, #8]
 8001e64:	9201      	str	r2, [sp, #4]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	23f0      	movs	r3, #240	; 0xf0
 8001e6a:	f240 229e 	movw	r2, #670	; 0x29e
 8001e6e:	2107      	movs	r1, #7
 8001e70:	482d      	ldr	r0, [pc, #180]	; (8001f28 <Screens_init+0x3fc>)
 8001e72:	f005 fbe9 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  	     			 3, 740, 267, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <Screens_init+0x3bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <Screens_init+0x3c0>)
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	491c      	ldr	r1, [pc, #112]	; (8001ef0 <Screens_init+0x3c4>)
 8001e80:	6849      	ldr	r1, [r1, #4]
 8001e82:	9102      	str	r1, [sp, #8]
 8001e84:	9201      	str	r2, [sp, #4]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f240 130b 	movw	r3, #267	; 0x10b
 8001e8c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001e90:	2103      	movs	r1, #3
 8001e92:	481b      	ldr	r0, [pc, #108]	; (8001f00 <Screens_init+0x3d4>)
 8001e94:	f005 fbd8 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Ур.Бак ", 	 	  	 			 7, 670, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <Screens_init+0x3bc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a13      	ldr	r2, [pc, #76]	; (8001eec <Screens_init+0x3c0>)
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	4913      	ldr	r1, [pc, #76]	; (8001ef0 <Screens_init+0x3c4>)
 8001ea2:	6849      	ldr	r1, [r1, #4]
 8001ea4:	9102      	str	r1, [sp, #8]
 8001ea6:	9201      	str	r2, [sp, #4]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001eae:	f240 229e 	movw	r2, #670	; 0x29e
 8001eb2:	2107      	movs	r1, #7
 8001eb4:	481d      	ldr	r0, [pc, #116]	; (8001f2c <Screens_init+0x400>)
 8001eb6:	f005 fbc7 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("мм", 	 	  	     			 2, 740, 327, BackgroundColor, BasicSymbolColor, Page[1]);
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <Screens_init+0x3bc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <Screens_init+0x3c0>)
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	490b      	ldr	r1, [pc, #44]	; (8001ef0 <Screens_init+0x3c4>)
 8001ec4:	6849      	ldr	r1, [r1, #4]
 8001ec6:	9102      	str	r1, [sp, #8]
 8001ec8:	9201      	str	r2, [sp, #4]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	f240 1347 	movw	r3, #327	; 0x147
 8001ed0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4816      	ldr	r0, [pc, #88]	; (8001f30 <Screens_init+0x404>)
 8001ed8:	f005 fbb6 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Тем.Бак", 	 	  	 			 7, 670, 360, BackgroundColor, BasicSymbolColor, Page[1]);
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <Screens_init+0x3bc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a02      	ldr	r2, [pc, #8]	; (8001eec <Screens_init+0x3c0>)
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	e026      	b.n	8001f34 <Screens_init+0x408>
 8001ee6:	bf00      	nop
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	200009f4 	.word	0x200009f4
 8001ef0:	20000980 	.word	0x20000980
 8001ef4:	0800deac 	.word	0x0800deac
 8001ef8:	0800deb0 	.word	0x0800deb0
 8001efc:	0800deb8 	.word	0x0800deb8
 8001f00:	0800dec8 	.word	0x0800dec8
 8001f04:	0800ded0 	.word	0x0800ded0
 8001f08:	0800dee0 	.word	0x0800dee0
 8001f0c:	0800def0 	.word	0x0800def0
 8001f10:	0800def4 	.word	0x0800def4
 8001f14:	20000004 	.word	0x20000004
 8001f18:	0800df04 	.word	0x0800df04
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	0800df14 	.word	0x0800df14
 8001f24:	0800df2c 	.word	0x0800df2c
 8001f28:	0800df48 	.word	0x0800df48
 8001f2c:	0800df58 	.word	0x0800df58
 8001f30:	0800df68 	.word	0x0800df68
 8001f34:	499e      	ldr	r1, [pc, #632]	; (80021b0 <Screens_init+0x684>)
 8001f36:	6849      	ldr	r1, [r1, #4]
 8001f38:	9102      	str	r1, [sp, #8]
 8001f3a:	9201      	str	r2, [sp, #4]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001f42:	f240 229e 	movw	r2, #670	; 0x29e
 8001f46:	2107      	movs	r1, #7
 8001f48:	489a      	ldr	r0, [pc, #616]	; (80021b4 <Screens_init+0x688>)
 8001f4a:	f005 fb7d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("*С", 	 	  	     			 2, 740, 387, BackgroundColor, BasicSymbolColor, Page[1]);
 8001f4e:	4b9a      	ldr	r3, [pc, #616]	; (80021b8 <Screens_init+0x68c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a9a      	ldr	r2, [pc, #616]	; (80021bc <Screens_init+0x690>)
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	4996      	ldr	r1, [pc, #600]	; (80021b0 <Screens_init+0x684>)
 8001f58:	6849      	ldr	r1, [r1, #4]
 8001f5a:	9102      	str	r1, [sp, #8]
 8001f5c:	9201      	str	r2, [sp, #4]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f240 1383 	movw	r3, #387	; 0x183
 8001f64:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4895      	ldr	r0, [pc, #596]	; (80021c0 <Screens_init+0x694>)
 8001f6c:	f005 fb6c 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("УЗЕЛ ФИЛЬТРОВ", 	 			13,  13, 240,       GrayColor, BasicSymbolColor, Page[1]);
 8001f70:	4b94      	ldr	r3, [pc, #592]	; (80021c4 <Screens_init+0x698>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a91      	ldr	r2, [pc, #580]	; (80021bc <Screens_init+0x690>)
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	498d      	ldr	r1, [pc, #564]	; (80021b0 <Screens_init+0x684>)
 8001f7a:	6849      	ldr	r1, [r1, #4]
 8001f7c:	9102      	str	r1, [sp, #8]
 8001f7e:	9201      	str	r2, [sp, #4]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	23f0      	movs	r3, #240	; 0xf0
 8001f84:	220d      	movs	r2, #13
 8001f86:	210d      	movs	r1, #13
 8001f88:	488f      	ldr	r0, [pc, #572]	; (80021c8 <Screens_init+0x69c>)
 8001f8a:	f005 fb5d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.в магистр:",		 			12, 300, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001f8e:	4b8a      	ldr	r3, [pc, #552]	; (80021b8 <Screens_init+0x68c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a8a      	ldr	r2, [pc, #552]	; (80021bc <Screens_init+0x690>)
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	4986      	ldr	r1, [pc, #536]	; (80021b0 <Screens_init+0x684>)
 8001f98:	6849      	ldr	r1, [r1, #4]
 8001f9a:	9102      	str	r1, [sp, #8]
 8001f9c:	9201      	str	r2, [sp, #4]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	23f0      	movs	r3, #240	; 0xf0
 8001fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fa6:	210c      	movs	r1, #12
 8001fa8:	4888      	ldr	r0, [pc, #544]	; (80021cc <Screens_init+0x6a0>)
 8001faa:	f005 fb4d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 3, 580, 240, BackgroundColor, BasicSymbolColor, Page[1]);
 8001fae:	4b82      	ldr	r3, [pc, #520]	; (80021b8 <Screens_init+0x68c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a82      	ldr	r2, [pc, #520]	; (80021bc <Screens_init+0x690>)
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	497e      	ldr	r1, [pc, #504]	; (80021b0 <Screens_init+0x684>)
 8001fb8:	6849      	ldr	r1, [r1, #4]
 8001fba:	9102      	str	r1, [sp, #8]
 8001fbc:	9201      	str	r2, [sp, #4]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	23f0      	movs	r3, #240	; 0xf0
 8001fc2:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001fc6:	2103      	movs	r1, #3
 8001fc8:	4881      	ldr	r0, [pc, #516]	; (80021d0 <Screens_init+0x6a4>)
 8001fca:	f005 fb3d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.перед сл. напорн фильтром:", 28,  13, 270, BackgroundColor, BasicSymbolColor, Page[1]);
 8001fce:	4b7a      	ldr	r3, [pc, #488]	; (80021b8 <Screens_init+0x68c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a7a      	ldr	r2, [pc, #488]	; (80021bc <Screens_init+0x690>)
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	4976      	ldr	r1, [pc, #472]	; (80021b0 <Screens_init+0x684>)
 8001fd8:	6849      	ldr	r1, [r1, #4]
 8001fda:	9102      	str	r1, [sp, #8]
 8001fdc:	9201      	str	r2, [sp, #4]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001fe4:	220d      	movs	r2, #13
 8001fe6:	211c      	movs	r1, #28
 8001fe8:	487a      	ldr	r0, [pc, #488]	; (80021d4 <Screens_init+0x6a8>)
 8001fea:	f005 fb2d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 3, 580, 270, BackgroundColor, BasicSymbolColor, Page[1]);
 8001fee:	4b72      	ldr	r3, [pc, #456]	; (80021b8 <Screens_init+0x68c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a72      	ldr	r2, [pc, #456]	; (80021bc <Screens_init+0x690>)
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	496e      	ldr	r1, [pc, #440]	; (80021b0 <Screens_init+0x684>)
 8001ff8:	6849      	ldr	r1, [r1, #4]
 8001ffa:	9102      	str	r1, [sp, #8]
 8001ffc:	9201      	str	r2, [sp, #4]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002004:	f44f 7211 	mov.w	r2, #580	; 0x244
 8002008:	2103      	movs	r1, #3
 800200a:	4871      	ldr	r0, [pc, #452]	; (80021d0 <Screens_init+0x6a4>)
 800200c:	f005 fb1c 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Д.перед сл.ф.:",			 	14,  13, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8002010:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <Screens_init+0x68c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a69      	ldr	r2, [pc, #420]	; (80021bc <Screens_init+0x690>)
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	4965      	ldr	r1, [pc, #404]	; (80021b0 <Screens_init+0x684>)
 800201a:	6849      	ldr	r1, [r1, #4]
 800201c:	9102      	str	r1, [sp, #8]
 800201e:	9201      	str	r2, [sp, #4]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002026:	220d      	movs	r2, #13
 8002028:	210e      	movs	r1, #14
 800202a:	486b      	ldr	r0, [pc, #428]	; (80021d8 <Screens_init+0x6ac>)
 800202c:	f005 fb0c 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 							 3, 360, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8002030:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <Screens_init+0x68c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a61      	ldr	r2, [pc, #388]	; (80021bc <Screens_init+0x690>)
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	495d      	ldr	r1, [pc, #372]	; (80021b0 <Screens_init+0x684>)
 800203a:	6849      	ldr	r1, [r1, #4]
 800203c:	9102      	str	r1, [sp, #8]
 800203e:	9201      	str	r2, [sp, #4]
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002046:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800204a:	2103      	movs	r1, #3
 800204c:	4860      	ldr	r0, [pc, #384]	; (80021d0 <Screens_init+0x6a4>)
 800204e:	f005 fafb 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("за", 							 2, 450, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8002052:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <Screens_init+0x68c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a59      	ldr	r2, [pc, #356]	; (80021bc <Screens_init+0x690>)
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	4955      	ldr	r1, [pc, #340]	; (80021b0 <Screens_init+0x684>)
 800205c:	6849      	ldr	r1, [r1, #4]
 800205e:	9102      	str	r1, [sp, #8]
 8002060:	9201      	str	r2, [sp, #4]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002068:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800206c:	2102      	movs	r1, #2
 800206e:	485b      	ldr	r0, [pc, #364]	; (80021dc <Screens_init+0x6b0>)
 8002070:	f005 faea 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 							 3, 580, 300, BackgroundColor, BasicSymbolColor, Page[1]);
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <Screens_init+0x68c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a50      	ldr	r2, [pc, #320]	; (80021bc <Screens_init+0x690>)
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	494c      	ldr	r1, [pc, #304]	; (80021b0 <Screens_init+0x684>)
 800207e:	6849      	ldr	r1, [r1, #4]
 8002080:	9102      	str	r1, [sp, #8]
 8002082:	9201      	str	r2, [sp, #4]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800208a:	f44f 7211 	mov.w	r2, #580	; 0x244
 800208e:	2103      	movs	r1, #3
 8002090:	484f      	ldr	r0, [pc, #316]	; (80021d0 <Screens_init+0x6a4>)
 8002092:	f005 fad9 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Расход. сл.ф.:", 				14,  13, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 8002096:	4b48      	ldr	r3, [pc, #288]	; (80021b8 <Screens_init+0x68c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a48      	ldr	r2, [pc, #288]	; (80021bc <Screens_init+0x690>)
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	4944      	ldr	r1, [pc, #272]	; (80021b0 <Screens_init+0x684>)
 80020a0:	6849      	ldr	r1, [r1, #4]
 80020a2:	9102      	str	r1, [sp, #8]
 80020a4:	9201      	str	r2, [sp, #4]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80020ac:	220d      	movs	r2, #13
 80020ae:	210e      	movs	r1, #14
 80020b0:	484b      	ldr	r0, [pc, #300]	; (80021e0 <Screens_init+0x6b4>)
 80020b2:	f005 fac9 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 3, 360, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 80020b6:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <Screens_init+0x68c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a40      	ldr	r2, [pc, #256]	; (80021bc <Screens_init+0x690>)
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	493c      	ldr	r1, [pc, #240]	; (80021b0 <Screens_init+0x684>)
 80020c0:	6849      	ldr	r1, [r1, #4]
 80020c2:	9102      	str	r1, [sp, #8]
 80020c4:	9201      	str	r2, [sp, #4]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80020cc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80020d0:	2103      	movs	r1, #3
 80020d2:	4844      	ldr	r0, [pc, #272]	; (80021e4 <Screens_init+0x6b8>)
 80020d4:	f005 fab8 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("эмул", 					 	 4, 420, 330,       GrayColor, BasicSymbolColor, Page[1]);
 80020d8:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <Screens_init+0x698>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a37      	ldr	r2, [pc, #220]	; (80021bc <Screens_init+0x690>)
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	4933      	ldr	r1, [pc, #204]	; (80021b0 <Screens_init+0x684>)
 80020e2:	6849      	ldr	r1, [r1, #4]
 80020e4:	9102      	str	r1, [sp, #8]
 80020e6:	9201      	str	r2, [sp, #4]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80020ee:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80020f2:	2104      	movs	r1, #4
 80020f4:	483c      	ldr	r0, [pc, #240]	; (80021e8 <Screens_init+0x6bc>)
 80020f6:	f005 faa7 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 3, 580, 330, BackgroundColor, BasicSymbolColor, Page[1]);
 80020fa:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <Screens_init+0x68c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2f      	ldr	r2, [pc, #188]	; (80021bc <Screens_init+0x690>)
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	492b      	ldr	r1, [pc, #172]	; (80021b0 <Screens_init+0x684>)
 8002104:	6849      	ldr	r1, [r1, #4]
 8002106:	9102      	str	r1, [sp, #8]
 8002108:	9201      	str	r2, [sp, #4]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8002110:	f44f 7211 	mov.w	r2, #580	; 0x244
 8002114:	2103      	movs	r1, #3
 8002116:	4833      	ldr	r0, [pc, #204]	; (80021e4 <Screens_init+0x6b8>)
 8002118:	f005 fa96 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Прокач  объем:", 				14,  13, 360, BackgroundColor, BasicSymbolColor, Page[1]);
 800211c:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <Screens_init+0x68c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a26      	ldr	r2, [pc, #152]	; (80021bc <Screens_init+0x690>)
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	4922      	ldr	r1, [pc, #136]	; (80021b0 <Screens_init+0x684>)
 8002126:	6849      	ldr	r1, [r1, #4]
 8002128:	9102      	str	r1, [sp, #8]
 800212a:	9201      	str	r2, [sp, #4]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002132:	220d      	movs	r2, #13
 8002134:	210e      	movs	r1, #14
 8002136:	482d      	ldr	r0, [pc, #180]	; (80021ec <Screens_init+0x6c0>)
 8002138:	f005 fa86 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("(м3)", 					 	 4, 420, 360,       GrayColor, BasicSymbolColor, Page[1]);
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <Screens_init+0x698>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <Screens_init+0x690>)
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	491a      	ldr	r1, [pc, #104]	; (80021b0 <Screens_init+0x684>)
 8002146:	6849      	ldr	r1, [r1, #4]
 8002148:	9102      	str	r1, [sp, #8]
 800214a:	9201      	str	r2, [sp, #4]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002152:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8002156:	2104      	movs	r1, #4
 8002158:	4825      	ldr	r0, [pc, #148]	; (80021f0 <Screens_init+0x6c4>)
 800215a:	f005 fa75 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	

	// Экран_2 (устройство эмульсии)
	Zaliv(BackgroundColor, Page[2], 800, 480);
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <Screens_init+0x68c>)
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <Screens_init+0x684>)
 8002164:	6899      	ldr	r1, [r3, #8]
 8002166:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800216a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800216e:	f006 fbb7 	bl	80088e0 <Zaliv>
	Short_Left_Colored_RU_DrawString_32("Устройство приготовления эмульсии", 	33,  10,  30,       GrayColor, BasicSymbolColor, Page[2]);
 8002172:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <Screens_init+0x698>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <Screens_init+0x690>)
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	490d      	ldr	r1, [pc, #52]	; (80021b0 <Screens_init+0x684>)
 800217c:	6889      	ldr	r1, [r1, #8]
 800217e:	9102      	str	r1, [sp, #8]
 8002180:	9201      	str	r2, [sp, #4]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	231e      	movs	r3, #30
 8002186:	220a      	movs	r2, #10
 8002188:	2121      	movs	r1, #33	; 0x21
 800218a:	481a      	ldr	r0, [pc, #104]	; (80021f4 <Screens_init+0x6c8>)
 800218c:	f005 fa5c 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

	Short_Left_Colored_RU_DrawString_32("Расход концентрата:", 	 				19,  10, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <Screens_init+0x68c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a09      	ldr	r2, [pc, #36]	; (80021bc <Screens_init+0x690>)
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	4905      	ldr	r1, [pc, #20]	; (80021b0 <Screens_init+0x684>)
 800219a:	6889      	ldr	r1, [r1, #8]
 800219c:	9102      	str	r1, [sp, #8]
 800219e:	9201      	str	r2, [sp, #4]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	23b4      	movs	r3, #180	; 0xb4
 80021a4:	220a      	movs	r2, #10
 80021a6:	2113      	movs	r1, #19
 80021a8:	4813      	ldr	r0, [pc, #76]	; (80021f8 <Screens_init+0x6cc>)
 80021aa:	f005 fa4d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 80021ae:	e025      	b.n	80021fc <Screens_init+0x6d0>
 80021b0:	20000980 	.word	0x20000980
 80021b4:	0800df70 	.word	0x0800df70
 80021b8:	20000008 	.word	0x20000008
 80021bc:	200009f4 	.word	0x200009f4
 80021c0:	0800def0 	.word	0x0800def0
 80021c4:	2000000c 	.word	0x2000000c
 80021c8:	0800df80 	.word	0x0800df80
 80021cc:	0800df9c 	.word	0x0800df9c
 80021d0:	0800dec8 	.word	0x0800dec8
 80021d4:	0800dfb4 	.word	0x0800dfb4
 80021d8:	0800dfe8 	.word	0x0800dfe8
 80021dc:	0800e000 	.word	0x0800e000
 80021e0:	0800e008 	.word	0x0800e008
 80021e4:	0800e020 	.word	0x0800e020
 80021e8:	0800e028 	.word	0x0800e028
 80021ec:	0800e034 	.word	0x0800e034
 80021f0:	0800e050 	.word	0x0800e050
 80021f4:	0800e058 	.word	0x0800e058
 80021f8:	0800e09c 	.word	0x0800e09c
	Short_Left_Colored_RU_DrawString_32("Рефрактометр поточный", 	 			21,  10, 210, BackgroundColor, BasicSymbolColor, Page[2]);
 80021fc:	4ba0      	ldr	r3, [pc, #640]	; (8002480 <Screens_init+0x954>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4aa0      	ldr	r2, [pc, #640]	; (8002484 <Screens_init+0x958>)
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	49a0      	ldr	r1, [pc, #640]	; (8002488 <Screens_init+0x95c>)
 8002206:	6889      	ldr	r1, [r1, #8]
 8002208:	9102      	str	r1, [sp, #8]
 800220a:	9201      	str	r2, [sp, #4]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	23d2      	movs	r3, #210	; 0xd2
 8002210:	220a      	movs	r2, #10
 8002212:	2115      	movs	r1, #21
 8002214:	489d      	ldr	r0, [pc, #628]	; (800248c <Screens_init+0x960>)
 8002216:	f005 fa17 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Датчик проводимости", 	 				19,  10, 240, BackgroundColor, BasicSymbolColor, Page[2]);
 800221a:	4b99      	ldr	r3, [pc, #612]	; (8002480 <Screens_init+0x954>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a99      	ldr	r2, [pc, #612]	; (8002484 <Screens_init+0x958>)
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	4999      	ldr	r1, [pc, #612]	; (8002488 <Screens_init+0x95c>)
 8002224:	6889      	ldr	r1, [r1, #8]
 8002226:	9102      	str	r1, [sp, #8]
 8002228:	9201      	str	r2, [sp, #4]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	23f0      	movs	r3, #240	; 0xf0
 800222e:	220a      	movs	r2, #10
 8002230:	2113      	movs	r1, #19
 8002232:	4897      	ldr	r0, [pc, #604]	; (8002490 <Screens_init+0x964>)
 8002234:	f005 fa08 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Датчик рН          ", 	 				19,  10, 270, BackgroundColor, BasicSymbolColor, Page[2]);
 8002238:	4b91      	ldr	r3, [pc, #580]	; (8002480 <Screens_init+0x954>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a91      	ldr	r2, [pc, #580]	; (8002484 <Screens_init+0x958>)
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	4991      	ldr	r1, [pc, #580]	; (8002488 <Screens_init+0x95c>)
 8002242:	6889      	ldr	r1, [r1, #8]
 8002244:	9102      	str	r1, [sp, #8]
 8002246:	9201      	str	r2, [sp, #4]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800224e:	220a      	movs	r2, #10
 8002250:	2113      	movs	r1, #19
 8002252:	4890      	ldr	r0, [pc, #576]	; (8002494 <Screens_init+0x968>)
 8002254:	f005 f9f8 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Давление перед фильтрами воды", 		29,  10, 300, BackgroundColor, BasicSymbolColor, Page[2]);
 8002258:	4b89      	ldr	r3, [pc, #548]	; (8002480 <Screens_init+0x954>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a89      	ldr	r2, [pc, #548]	; (8002484 <Screens_init+0x958>)
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	4989      	ldr	r1, [pc, #548]	; (8002488 <Screens_init+0x95c>)
 8002262:	6889      	ldr	r1, [r1, #8]
 8002264:	9102      	str	r1, [sp, #8]
 8002266:	9201      	str	r2, [sp, #4]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800226e:	220a      	movs	r2, #10
 8002270:	211d      	movs	r1, #29
 8002272:	4889      	ldr	r0, [pc, #548]	; (8002498 <Screens_init+0x96c>)
 8002274:	f005 f9e8 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Давление после фильтров  воды", 		29,  10, 330, BackgroundColor, BasicSymbolColor, Page[2]);
 8002278:	4b81      	ldr	r3, [pc, #516]	; (8002480 <Screens_init+0x954>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a81      	ldr	r2, [pc, #516]	; (8002484 <Screens_init+0x958>)
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	4981      	ldr	r1, [pc, #516]	; (8002488 <Screens_init+0x95c>)
 8002282:	6889      	ldr	r1, [r1, #8]
 8002284:	9102      	str	r1, [sp, #8]
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800228e:	220a      	movs	r2, #10
 8002290:	211d      	movs	r1, #29
 8002292:	4882      	ldr	r0, [pc, #520]	; (800249c <Screens_init+0x970>)
 8002294:	f005 f9d8 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("Расходомер воды", 						15,  10, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 8002298:	4b79      	ldr	r3, [pc, #484]	; (8002480 <Screens_init+0x954>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a79      	ldr	r2, [pc, #484]	; (8002484 <Screens_init+0x958>)
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	4979      	ldr	r1, [pc, #484]	; (8002488 <Screens_init+0x95c>)
 80022a2:	6889      	ldr	r1, [r1, #8]
 80022a4:	9102      	str	r1, [sp, #8]
 80022a6:	9201      	str	r2, [sp, #4]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80022ae:	220a      	movs	r2, #10
 80022b0:	210f      	movs	r1, #15
 80022b2:	487b      	ldr	r0, [pc, #492]	; (80024a0 <Screens_init+0x974>)
 80022b4:	f005 f9c8 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 		 3, 520, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 80022b8:	4b71      	ldr	r3, [pc, #452]	; (8002480 <Screens_init+0x954>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a71      	ldr	r2, [pc, #452]	; (8002484 <Screens_init+0x958>)
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	4971      	ldr	r1, [pc, #452]	; (8002488 <Screens_init+0x95c>)
 80022c2:	6889      	ldr	r1, [r1, #8]
 80022c4:	9102      	str	r1, [sp, #8]
 80022c6:	9201      	str	r2, [sp, #4]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	23b4      	movs	r3, #180	; 0xb4
 80022cc:	f44f 7202 	mov.w	r2, #520	; 0x208
 80022d0:	2103      	movs	r1, #3
 80022d2:	4874      	ldr	r0, [pc, #464]	; (80024a4 <Screens_init+0x978>)
 80022d4:	f005 f9b8 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("м3", 						 	 		 2, 720, 180, BackgroundColor, BasicSymbolColor, Page[2]);
 80022d8:	4b69      	ldr	r3, [pc, #420]	; (8002480 <Screens_init+0x954>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a69      	ldr	r2, [pc, #420]	; (8002484 <Screens_init+0x958>)
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	4969      	ldr	r1, [pc, #420]	; (8002488 <Screens_init+0x95c>)
 80022e2:	6889      	ldr	r1, [r1, #8]
 80022e4:	9102      	str	r1, [sp, #8]
 80022e6:	9201      	str	r2, [sp, #4]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	23b4      	movs	r3, #180	; 0xb4
 80022ec:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80022f0:	2102      	movs	r1, #2
 80022f2:	486d      	ldr	r0, [pc, #436]	; (80024a8 <Screens_init+0x97c>)
 80022f4:	f005 f9a8 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("л/м", 						 	 		 3, 520, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 80022f8:	4b61      	ldr	r3, [pc, #388]	; (8002480 <Screens_init+0x954>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a61      	ldr	r2, [pc, #388]	; (8002484 <Screens_init+0x958>)
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	4961      	ldr	r1, [pc, #388]	; (8002488 <Screens_init+0x95c>)
 8002302:	6889      	ldr	r1, [r1, #8]
 8002304:	9102      	str	r1, [sp, #8]
 8002306:	9201      	str	r2, [sp, #4]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800230e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002312:	2103      	movs	r1, #3
 8002314:	4863      	ldr	r0, [pc, #396]	; (80024a4 <Screens_init+0x978>)
 8002316:	f005 f997 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("м3", 						 	 		 2, 720, 360, BackgroundColor, BasicSymbolColor, Page[2]);
 800231a:	4b59      	ldr	r3, [pc, #356]	; (8002480 <Screens_init+0x954>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a59      	ldr	r2, [pc, #356]	; (8002484 <Screens_init+0x958>)
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	4959      	ldr	r1, [pc, #356]	; (8002488 <Screens_init+0x95c>)
 8002324:	6889      	ldr	r1, [r1, #8]
 8002326:	9102      	str	r1, [sp, #8]
 8002328:	9201      	str	r2, [sp, #4]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002330:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002334:	2102      	movs	r1, #2
 8002336:	485c      	ldr	r0, [pc, #368]	; (80024a8 <Screens_init+0x97c>)
 8002338:	f005 f986 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 		 3, 720, 300, BackgroundColor, BasicSymbolColor, Page[2]);
 800233c:	4b50      	ldr	r3, [pc, #320]	; (8002480 <Screens_init+0x954>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a50      	ldr	r2, [pc, #320]	; (8002484 <Screens_init+0x958>)
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	4950      	ldr	r1, [pc, #320]	; (8002488 <Screens_init+0x95c>)
 8002346:	6889      	ldr	r1, [r1, #8]
 8002348:	9102      	str	r1, [sp, #8]
 800234a:	9201      	str	r2, [sp, #4]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002352:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002356:	2103      	movs	r1, #3
 8002358:	4854      	ldr	r0, [pc, #336]	; (80024ac <Screens_init+0x980>)
 800235a:	f005 f975 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МПа", 	 	  		 			 		 3, 720, 330, BackgroundColor, BasicSymbolColor, Page[2]);
 800235e:	4b48      	ldr	r3, [pc, #288]	; (8002480 <Screens_init+0x954>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a48      	ldr	r2, [pc, #288]	; (8002484 <Screens_init+0x958>)
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	4948      	ldr	r1, [pc, #288]	; (8002488 <Screens_init+0x95c>)
 8002368:	6889      	ldr	r1, [r1, #8]
 800236a:	9102      	str	r1, [sp, #8]
 800236c:	9201      	str	r2, [sp, #4]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8002374:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002378:	2103      	movs	r1, #3
 800237a:	484c      	ldr	r0, [pc, #304]	; (80024ac <Screens_init+0x980>)
 800237c:	f005 f964 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560,  90, BackgroundColor, BasicSymbolColor, Page[2]);
 8002380:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <Screens_init+0x954>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a3f      	ldr	r2, [pc, #252]	; (8002484 <Screens_init+0x958>)
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	493f      	ldr	r1, [pc, #252]	; (8002488 <Screens_init+0x95c>)
 800238a:	6889      	ldr	r1, [r1, #8]
 800238c:	9102      	str	r1, [sp, #8]
 800238e:	9201      	str	r2, [sp, #4]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	235a      	movs	r3, #90	; 0x5a
 8002394:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002398:	2106      	movs	r1, #6
 800239a:	4845      	ldr	r0, [pc, #276]	; (80024b0 <Screens_init+0x984>)
 800239c:	f005 f954 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560, 120, BackgroundColor, BasicSymbolColor, Page[2]);
 80023a0:	4b37      	ldr	r3, [pc, #220]	; (8002480 <Screens_init+0x954>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a37      	ldr	r2, [pc, #220]	; (8002484 <Screens_init+0x958>)
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	4937      	ldr	r1, [pc, #220]	; (8002488 <Screens_init+0x95c>)
 80023aa:	6889      	ldr	r1, [r1, #8]
 80023ac:	9102      	str	r1, [sp, #8]
 80023ae:	9201      	str	r2, [sp, #4]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2378      	movs	r3, #120	; 0x78
 80023b4:	f44f 720c 	mov.w	r2, #560	; 0x230
 80023b8:	2106      	movs	r1, #6
 80023ba:	483d      	ldr	r0, [pc, #244]	; (80024b0 <Screens_init+0x984>)
 80023bc:	f005 f944 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
	Short_Left_Colored_RU_DrawString_32("МтЧас:", 						 		 6, 560, 150, BackgroundColor, BasicSymbolColor, Page[2]);
 80023c0:	4b2f      	ldr	r3, [pc, #188]	; (8002480 <Screens_init+0x954>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2f      	ldr	r2, [pc, #188]	; (8002484 <Screens_init+0x958>)
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	492f      	ldr	r1, [pc, #188]	; (8002488 <Screens_init+0x95c>)
 80023ca:	6889      	ldr	r1, [r1, #8]
 80023cc:	9102      	str	r1, [sp, #8]
 80023ce:	9201      	str	r2, [sp, #4]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2396      	movs	r3, #150	; 0x96
 80023d4:	f44f 720c 	mov.w	r2, #560	; 0x230
 80023d8:	2106      	movs	r1, #6
 80023da:	4835      	ldr	r0, [pc, #212]	; (80024b0 <Screens_init+0x984>)
 80023dc:	f005 f934 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

	// Экран 3
	Zaliv(BackgroundColor, Page[3], 800, 480);
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <Screens_init+0x954>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <Screens_init+0x95c>)
 80023e6:	68d9      	ldr	r1, [r3, #12]
 80023e8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80023ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023f0:	f006 fa76 	bl	80088e0 <Zaliv>
	Short_Centred_RU_DrawString_32("ОКНО ДАННЫЕ", 11, 400, 15, BackgroundColor, BasicSymbolColor, Page[3]);
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <Screens_init+0x954>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a22      	ldr	r2, [pc, #136]	; (8002484 <Screens_init+0x958>)
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	4922      	ldr	r1, [pc, #136]	; (8002488 <Screens_init+0x95c>)
 80023fe:	68c9      	ldr	r1, [r1, #12]
 8002400:	9102      	str	r1, [sp, #8]
 8002402:	9201      	str	r2, [sp, #4]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	230f      	movs	r3, #15
 8002408:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800240c:	210b      	movs	r1, #11
 800240e:	4829      	ldr	r0, [pc, #164]	; (80024b4 <Screens_init+0x988>)
 8002410:	f005 fa38 	bl	8007884 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,     0, 30, 800,   3, Page[3], 800, 480);
 8002414:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <Screens_init+0x95c>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800241c:	9203      	str	r2, [sp, #12]
 800241e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002422:	9202      	str	r2, [sp, #8]
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2303      	movs	r3, #3
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800242e:	221e      	movs	r2, #30
 8002430:	2100      	movs	r1, #0
 8002432:	2000      	movs	r0, #0
 8002434:	f006 fa80 	bl	8008938 <Draw_Rectangle>
	Draw_Rectangle(0x000000,   500, 70,   3, 410, Page[3], 800, 480);
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <Screens_init+0x95c>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002440:	9203      	str	r2, [sp, #12]
 8002442:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002446:	9202      	str	r2, [sp, #8]
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2303      	movs	r3, #3
 8002452:	2246      	movs	r2, #70	; 0x46
 8002454:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002458:	2000      	movs	r0, #0
 800245a:	f006 fa6d 	bl	8008938 <Draw_Rectangle>


	// Экран 4
	Zaliv(BackgroundColor, Page[4], 800, 480);
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <Screens_init+0x954>)
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <Screens_init+0x95c>)
 8002464:	6919      	ldr	r1, [r3, #16]
 8002466:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800246a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800246e:	f006 fa37 	bl	80088e0 <Zaliv>
	Short_Centred_RU_DrawString_32("ОКНО РУЧНОГО УПРАВЛЕНИЯ", 23, 400, 15, BackgroundColor, BasicSymbolColor, Page[4]);
 8002472:	4b03      	ldr	r3, [pc, #12]	; (8002480 <Screens_init+0x954>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a03      	ldr	r2, [pc, #12]	; (8002484 <Screens_init+0x958>)
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	4903      	ldr	r1, [pc, #12]	; (8002488 <Screens_init+0x95c>)
 800247c:	6909      	ldr	r1, [r1, #16]
 800247e:	e01b      	b.n	80024b8 <Screens_init+0x98c>
 8002480:	20000008 	.word	0x20000008
 8002484:	200009f4 	.word	0x200009f4
 8002488:	20000980 	.word	0x20000980
 800248c:	0800e0c4 	.word	0x0800e0c4
 8002490:	0800e0f0 	.word	0x0800e0f0
 8002494:	0800e118 	.word	0x0800e118
 8002498:	0800e134 	.word	0x0800e134
 800249c:	0800e16c 	.word	0x0800e16c
 80024a0:	0800e1a4 	.word	0x0800e1a4
 80024a4:	0800e020 	.word	0x0800e020
 80024a8:	0800e1c4 	.word	0x0800e1c4
 80024ac:	0800dec8 	.word	0x0800dec8
 80024b0:	0800e1c8 	.word	0x0800e1c8
 80024b4:	0800e1d4 	.word	0x0800e1d4
 80024b8:	9102      	str	r1, [sp, #8]
 80024ba:	9201      	str	r2, [sp, #4]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	230f      	movs	r3, #15
 80024c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80024c4:	2117      	movs	r1, #23
 80024c6:	48af      	ldr	r0, [pc, #700]	; (8002784 <Screens_init+0xc58>)
 80024c8:	f005 f9dc 	bl	8007884 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[4], 800, 480);
 80024cc:	4bae      	ldr	r3, [pc, #696]	; (8002788 <Screens_init+0xc5c>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024d4:	9203      	str	r2, [sp, #12]
 80024d6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80024da:	9202      	str	r2, [sp, #8]
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	2303      	movs	r3, #3
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80024e6:	221e      	movs	r2, #30
 80024e8:	2100      	movs	r1, #0
 80024ea:	2000      	movs	r0, #0
 80024ec:	f006 fa24 	bl	8008938 <Draw_Rectangle>

	// Экран_5 (пароль)
	Zaliv(BackgroundColor, Page[5], 800, 480);
 80024f0:	4ba6      	ldr	r3, [pc, #664]	; (800278c <Screens_init+0xc60>)
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	4ba4      	ldr	r3, [pc, #656]	; (8002788 <Screens_init+0xc5c>)
 80024f6:	6959      	ldr	r1, [r3, #20]
 80024f8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80024fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002500:	f006 f9ee 	bl	80088e0 <Zaliv>
	if(Control_DB.RazrPointer > 4){Control_DB.RazrPointer = 4;}
 8002504:	4ba2      	ldr	r3, [pc, #648]	; (8002790 <Screens_init+0xc64>)
 8002506:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800250a:	2b04      	cmp	r3, #4
 800250c:	dd02      	ble.n	8002514 <Screens_init+0x9e8>
 800250e:	4ba0      	ldr	r3, [pc, #640]	; (8002790 <Screens_init+0xc64>)
 8002510:	2204      	movs	r2, #4
 8002512:	805a      	strh	r2, [r3, #2]


	// Экран 6
	Zaliv(BackgroundColor, Page[6], 800, 480);
 8002514:	4b9d      	ldr	r3, [pc, #628]	; (800278c <Screens_init+0xc60>)
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	4b9b      	ldr	r3, [pc, #620]	; (8002788 <Screens_init+0xc5c>)
 800251a:	6999      	ldr	r1, [r3, #24]
 800251c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002520:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002524:	f006 f9dc 	bl	80088e0 <Zaliv>
	Short_Centred_RU_DrawString_32("Настройки станции насосной", 26, 400, 15, BackgroundColor, BasicSymbolColor, Page[6]);
 8002528:	4b98      	ldr	r3, [pc, #608]	; (800278c <Screens_init+0xc60>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a99      	ldr	r2, [pc, #612]	; (8002794 <Screens_init+0xc68>)
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	4995      	ldr	r1, [pc, #596]	; (8002788 <Screens_init+0xc5c>)
 8002532:	6989      	ldr	r1, [r1, #24]
 8002534:	9102      	str	r1, [sp, #8]
 8002536:	9201      	str	r2, [sp, #4]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	230f      	movs	r3, #15
 800253c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002540:	211a      	movs	r1, #26
 8002542:	4895      	ldr	r0, [pc, #596]	; (8002798 <Screens_init+0xc6c>)
 8002544:	f005 f99e 	bl	8007884 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[6], 800, 480);
 8002548:	4b8f      	ldr	r3, [pc, #572]	; (8002788 <Screens_init+0xc5c>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002550:	9203      	str	r2, [sp, #12]
 8002552:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002556:	9202      	str	r2, [sp, #8]
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	2303      	movs	r3, #3
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002562:	221e      	movs	r2, #30
 8002564:	2100      	movs	r1, #0
 8002566:	2000      	movs	r0, #0
 8002568:	f006 f9e6 	bl	8008938 <Draw_Rectangle>


	// Экран 7
	Zaliv(BackgroundColor, Page[7], 800, 480);
 800256c:	4b87      	ldr	r3, [pc, #540]	; (800278c <Screens_init+0xc60>)
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	4b85      	ldr	r3, [pc, #532]	; (8002788 <Screens_init+0xc5c>)
 8002572:	69d9      	ldr	r1, [r3, #28]
 8002574:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002578:	f44f 7248 	mov.w	r2, #800	; 0x320
 800257c:	f006 f9b0 	bl	80088e0 <Zaliv>
	Short_Centred_RU_DrawString_32("Заводские параметры", 19, 400, 15, BackgroundColor, BasicSymbolColor, Page[7]);
 8002580:	4b82      	ldr	r3, [pc, #520]	; (800278c <Screens_init+0xc60>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a83      	ldr	r2, [pc, #524]	; (8002794 <Screens_init+0xc68>)
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	497f      	ldr	r1, [pc, #508]	; (8002788 <Screens_init+0xc5c>)
 800258a:	69c9      	ldr	r1, [r1, #28]
 800258c:	9102      	str	r1, [sp, #8]
 800258e:	9201      	str	r2, [sp, #4]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	230f      	movs	r3, #15
 8002594:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002598:	2113      	movs	r1, #19
 800259a:	4880      	ldr	r0, [pc, #512]	; (800279c <Screens_init+0xc70>)
 800259c:	f005 f972 	bl	8007884 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[7], 800, 480);
 80025a0:	4b79      	ldr	r3, [pc, #484]	; (8002788 <Screens_init+0xc5c>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80025a8:	9203      	str	r2, [sp, #12]
 80025aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80025ae:	9202      	str	r2, [sp, #8]
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	2303      	movs	r3, #3
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80025ba:	221e      	movs	r2, #30
 80025bc:	2100      	movs	r1, #0
 80025be:	2000      	movs	r0, #0
 80025c0:	f006 f9ba 	bl	8008938 <Draw_Rectangle>


	//Экран 8
	Zaliv(BackgroundColor, Page[8], 800, 480);
 80025c4:	4b71      	ldr	r3, [pc, #452]	; (800278c <Screens_init+0xc60>)
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	4b6f      	ldr	r3, [pc, #444]	; (8002788 <Screens_init+0xc5c>)
 80025ca:	6a19      	ldr	r1, [r3, #32]
 80025cc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80025d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80025d4:	f006 f984 	bl	80088e0 <Zaliv>
	Short_Centred_RU_DrawString_32("Настройки промывки напорного фильтра", 36, 400, 15, BackgroundColor, BasicSymbolColor, Page[8]);
 80025d8:	4b6c      	ldr	r3, [pc, #432]	; (800278c <Screens_init+0xc60>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a6d      	ldr	r2, [pc, #436]	; (8002794 <Screens_init+0xc68>)
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	4969      	ldr	r1, [pc, #420]	; (8002788 <Screens_init+0xc5c>)
 80025e2:	6a09      	ldr	r1, [r1, #32]
 80025e4:	9102      	str	r1, [sp, #8]
 80025e6:	9201      	str	r2, [sp, #4]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	230f      	movs	r3, #15
 80025ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80025f0:	2124      	movs	r1, #36	; 0x24
 80025f2:	486b      	ldr	r0, [pc, #428]	; (80027a0 <Screens_init+0xc74>)
 80025f4:	f005 f946 	bl	8007884 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[8], 800, 480);
 80025f8:	4b63      	ldr	r3, [pc, #396]	; (8002788 <Screens_init+0xc5c>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002600:	9203      	str	r2, [sp, #12]
 8002602:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002606:	9202      	str	r2, [sp, #8]
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	2303      	movs	r3, #3
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002612:	221e      	movs	r2, #30
 8002614:	2100      	movs	r1, #0
 8002616:	2000      	movs	r0, #0
 8002618:	f006 f98e 	bl	8008938 <Draw_Rectangle>
	//Экран 9
	Zaliv(BackgroundColor, Page[9], 800, 480);
 800261c:	4b5b      	ldr	r3, [pc, #364]	; (800278c <Screens_init+0xc60>)
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	4b59      	ldr	r3, [pc, #356]	; (8002788 <Screens_init+0xc5c>)
 8002622:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002624:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002628:	f44f 7248 	mov.w	r2, #800	; 0x320
 800262c:	f006 f958 	bl	80088e0 <Zaliv>
	Short_Centred_RU_DrawString_32("Настройки промывки фильтра воды", 31, 400, 15, BackgroundColor, BasicSymbolColor, Page[9]);
 8002630:	4b56      	ldr	r3, [pc, #344]	; (800278c <Screens_init+0xc60>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a57      	ldr	r2, [pc, #348]	; (8002794 <Screens_init+0xc68>)
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	4953      	ldr	r1, [pc, #332]	; (8002788 <Screens_init+0xc5c>)
 800263a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800263c:	9102      	str	r1, [sp, #8]
 800263e:	9201      	str	r2, [sp, #4]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	230f      	movs	r3, #15
 8002644:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002648:	211f      	movs	r1, #31
 800264a:	4856      	ldr	r0, [pc, #344]	; (80027a4 <Screens_init+0xc78>)
 800264c:	f005 f91a 	bl	8007884 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[9], 800, 480);
 8002650:	4b4d      	ldr	r3, [pc, #308]	; (8002788 <Screens_init+0xc5c>)
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002658:	9203      	str	r2, [sp, #12]
 800265a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800265e:	9202      	str	r2, [sp, #8]
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	2303      	movs	r3, #3
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	f44f 7348 	mov.w	r3, #800	; 0x320
 800266a:	221e      	movs	r2, #30
 800266c:	2100      	movs	r1, #0
 800266e:	2000      	movs	r0, #0
 8002670:	f006 f962 	bl	8008938 <Draw_Rectangle>

	//Экран 14
	Zaliv(BackgroundColor, Page[14], 800, 480);
 8002674:	4b45      	ldr	r3, [pc, #276]	; (800278c <Screens_init+0xc60>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <Screens_init+0xc5c>)
 800267a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800267c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002680:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002684:	f006 f92c 	bl	80088e0 <Zaliv>
	Short_Centred_RU_DrawString_32("Настройки станции насосной", 26, 400, 15, BackgroundColor, BasicSymbolColor, Page[14]);
 8002688:	4b40      	ldr	r3, [pc, #256]	; (800278c <Screens_init+0xc60>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a41      	ldr	r2, [pc, #260]	; (8002794 <Screens_init+0xc68>)
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	493d      	ldr	r1, [pc, #244]	; (8002788 <Screens_init+0xc5c>)
 8002692:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8002694:	9102      	str	r1, [sp, #8]
 8002696:	9201      	str	r2, [sp, #4]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	230f      	movs	r3, #15
 800269c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80026a0:	211a      	movs	r1, #26
 80026a2:	483d      	ldr	r0, [pc, #244]	; (8002798 <Screens_init+0xc6c>)
 80026a4:	f005 f8ee 	bl	8007884 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[14], 800, 480);
 80026a8:	4b37      	ldr	r3, [pc, #220]	; (8002788 <Screens_init+0xc5c>)
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80026b0:	9203      	str	r2, [sp, #12]
 80026b2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80026b6:	9202      	str	r2, [sp, #8]
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2303      	movs	r3, #3
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	f44f 7348 	mov.w	r3, #800	; 0x320
 80026c2:	221e      	movs	r2, #30
 80026c4:	2100      	movs	r1, #0
 80026c6:	2000      	movs	r0, #0
 80026c8:	f006 f936 	bl	8008938 <Draw_Rectangle>

	// Экран 20 (Авария)
	Zaliv(RedColor, Page[20], 800, 480);
 80026cc:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <Screens_init+0xc7c>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <Screens_init+0xc5c>)
 80026d2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80026d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80026d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80026dc:	f006 f900 	bl	80088e0 <Zaliv>
	Short_Centred_RU_DrawString_32("Активные аварийные сообщения", 28, 400, 15, RedColor, BasicSymbolColor, Page[20]);
 80026e0:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <Screens_init+0xc7c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2b      	ldr	r2, [pc, #172]	; (8002794 <Screens_init+0xc68>)
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	4927      	ldr	r1, [pc, #156]	; (8002788 <Screens_init+0xc5c>)
 80026ea:	6d09      	ldr	r1, [r1, #80]	; 0x50
 80026ec:	9102      	str	r1, [sp, #8]
 80026ee:	9201      	str	r2, [sp, #4]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	230f      	movs	r3, #15
 80026f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80026f8:	211c      	movs	r1, #28
 80026fa:	482c      	ldr	r0, [pc, #176]	; (80027ac <Screens_init+0xc80>)
 80026fc:	f005 f8c2 	bl	8007884 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[20], 800, 480);
 8002700:	4b21      	ldr	r3, [pc, #132]	; (8002788 <Screens_init+0xc5c>)
 8002702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002704:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002708:	9203      	str	r2, [sp, #12]
 800270a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800270e:	9202      	str	r2, [sp, #8]
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	2303      	movs	r3, #3
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	f44f 7348 	mov.w	r3, #800	; 0x320
 800271a:	221e      	movs	r2, #30
 800271c:	2100      	movs	r1, #0
 800271e:	2000      	movs	r0, #0
 8002720:	f006 f90a 	bl	8008938 <Draw_Rectangle>


	// Экран_21 (сетевуха)
	Zaliv(BackgroundColor, Page[21], 800, 480);
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <Screens_init+0xc60>)
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <Screens_init+0xc5c>)
 800272a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800272c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002730:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002734:	f006 f8d4 	bl	80088e0 <Zaliv>
	Short_Centred_RU_DrawString_32("настройки пульта", 16, 400, 15, BackgroundColor, BasicSymbolColor, Page[21]);
 8002738:	4b14      	ldr	r3, [pc, #80]	; (800278c <Screens_init+0xc60>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a15      	ldr	r2, [pc, #84]	; (8002794 <Screens_init+0xc68>)
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	4911      	ldr	r1, [pc, #68]	; (8002788 <Screens_init+0xc5c>)
 8002742:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002744:	9102      	str	r1, [sp, #8]
 8002746:	9201      	str	r2, [sp, #4]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	230f      	movs	r3, #15
 800274c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002750:	2110      	movs	r1, #16
 8002752:	4817      	ldr	r0, [pc, #92]	; (80027b0 <Screens_init+0xc84>)
 8002754:	f005 f896 	bl	8007884 <Short_Centred_RU_DrawString_32>
	Draw_Rectangle(0x000000,   0, 30, 800,   3, Page[21], 800, 480);
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <Screens_init+0xc5c>)
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002760:	9203      	str	r2, [sp, #12]
 8002762:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002766:	9202      	str	r2, [sp, #8]
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	2303      	movs	r3, #3
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002772:	221e      	movs	r2, #30
 8002774:	2100      	movs	r1, #0
 8002776:	2000      	movs	r0, #0
 8002778:	f006 f8de 	bl	8008938 <Draw_Rectangle>


}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	0800e1ec 	.word	0x0800e1ec
 8002788:	20000980 	.word	0x20000980
 800278c:	20000008 	.word	0x20000008
 8002790:	20000b70 	.word	0x20000b70
 8002794:	200009f4 	.word	0x200009f4
 8002798:	0800e21c 	.word	0x0800e21c
 800279c:	0800e250 	.word	0x0800e250
 80027a0:	0800e278 	.word	0x0800e278
 80027a4:	0800e2c0 	.word	0x0800e2c0
 80027a8:	20000000 	.word	0x20000000
 80027ac:	0800e2fc 	.word	0x0800e2fc
 80027b0:	0800e334 	.word	0x0800e334

080027b4 <Set_Screen>:




void Set_Screen(uint8_t screen)
{
 80027b4:	b5b0      	push	{r4, r5, r7, lr}
 80027b6:	b092      	sub	sp, #72	; 0x48
 80027b8:	af0c      	add	r7, sp, #48	; 0x30
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < 20;i++)
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e016      	b.n	80027f2 <Set_Screen+0x3e>
	{
		if(i == Control_DB.MenuPointer) {FonColor[i] = SelectionColor;}
 80027c4:	4b9d      	ldr	r3, [pc, #628]	; (8002a3c <Set_Screen+0x288>)
 80027c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ca:	461a      	mov	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d106      	bne.n	80027e0 <Set_Screen+0x2c>
 80027d2:	4b9b      	ldr	r3, [pc, #620]	; (8002a40 <Set_Screen+0x28c>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	499b      	ldr	r1, [pc, #620]	; (8002a44 <Set_Screen+0x290>)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80027de:	e005      	b.n	80027ec <Set_Screen+0x38>
		else {FonColor[i] = BackgroundColor;}
 80027e0:	4b99      	ldr	r3, [pc, #612]	; (8002a48 <Set_Screen+0x294>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4997      	ldr	r1, [pc, #604]	; (8002a44 <Set_Screen+0x290>)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 20;i++)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	3301      	adds	r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b13      	cmp	r3, #19
 80027f6:	dde5      	ble.n	80027c4 <Set_Screen+0x10>
	}

	switch(screen)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	2b14      	cmp	r3, #20
 80027fe:	f202 85d2 	bhi.w	80053a6 <Set_Screen+0x2bf2>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <Set_Screen+0x54>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	0800285d 	.word	0x0800285d
 800280c:	08002e5d 	.word	0x08002e5d
 8002810:	080033e9 	.word	0x080033e9
 8002814:	08003ced 	.word	0x08003ced
 8002818:	08003e99 	.word	0x08003e99
 800281c:	08003f95 	.word	0x08003f95
 8002820:	08004755 	.word	0x08004755
 8002824:	08004a49 	.word	0x08004a49
 8002828:	08004d71 	.word	0x08004d71
 800282c:	080053a7 	.word	0x080053a7
 8002830:	080053a7 	.word	0x080053a7
 8002834:	080053a7 	.word	0x080053a7
 8002838:	080053a7 	.word	0x080053a7
 800283c:	0800507f 	.word	0x0800507f
 8002840:	080053a7 	.word	0x080053a7
 8002844:	080053a7 	.word	0x080053a7
 8002848:	080053a7 	.word	0x080053a7
 800284c:	080053a7 	.word	0x080053a7
 8002850:	080053a7 	.word	0x080053a7
 8002854:	080053a7 	.word	0x080053a7
 8002858:	080050e9 	.word	0x080050e9

		case 1:



			for(int i = 0; i < 3; i++)
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	e17f      	b.n	8002b62 <Set_Screen+0x3ae>
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d04a      	beq.n	80028fe <Set_Screen+0x14a>
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b02      	cmp	r3, #2
 800286c:	dc6a      	bgt.n	8002944 <Set_Screen+0x190>
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <Set_Screen+0xc8>
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d020      	beq.n	80028bc <Set_Screen+0x108>
 800287a:	e063      	b.n	8002944 <Set_Screen+0x190>
			{
				switch(i)
				{
					case 0:
						engine_state = BUV_RT_VALS.ANN_1.Pump.State;
 800287c:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <Set_Screen+0x298>)
 800287e:	7a1a      	ldrb	r2, [r3, #8]
 8002880:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <Set_Screen+0x29c>)
 8002882:	701a      	strb	r2, [r3, #0]
						unload		 = BUV_RT_VALS.ANN_1.Unload;
 8002884:	4b71      	ldr	r3, [pc, #452]	; (8002a4c <Set_Screen+0x298>)
 8002886:	7d9a      	ldrb	r2, [r3, #22]
 8002888:	4b72      	ldr	r3, [pc, #456]	; (8002a54 <Set_Screen+0x2a0>)
 800288a:	701a      	strb	r2, [r3, #0]
						bimetal      = BUV_RT_VALS.ANN_1.Pump.Bimetal;
 800288c:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <Set_Screen+0x298>)
 800288e:	7a5a      	ldrb	r2, [r3, #9]
 8002890:	4b71      	ldr	r3, [pc, #452]	; (8002a58 <Set_Screen+0x2a4>)
 8002892:	701a      	strb	r2, [r3, #0]
						Press_napor  = BUV_RT_VALS.ANN_1.Out_Pressure;
 8002894:	4b6d      	ldr	r3, [pc, #436]	; (8002a4c <Set_Screen+0x298>)
 8002896:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800289a:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <Set_Screen+0x2a8>)
 800289c:	801a      	strh	r2, [r3, #0]
						Press_maslo  = BUV_RT_VALS.ANN_1.Oil_Pressure;
 800289e:	4b6b      	ldr	r3, [pc, #428]	; (8002a4c <Set_Screen+0x298>)
 80028a0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80028a4:	4b6e      	ldr	r3, [pc, #440]	; (8002a60 <Set_Screen+0x2ac>)
 80028a6:	801a      	strh	r2, [r3, #0]
						Temp_maslo   = BUV_RT_VALS.ANN_1.Oil_Temperature;
 80028a8:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <Set_Screen+0x298>)
 80028aa:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80028ae:	4b6d      	ldr	r3, [pc, #436]	; (8002a64 <Set_Screen+0x2b0>)
 80028b0:	801a      	strh	r2, [r3, #0]
						motoclock    = BUV_RT_VALS.ANN_1.Pump.MotoClock;
 80028b2:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <Set_Screen+0x298>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4a6c      	ldr	r2, [pc, #432]	; (8002a68 <Set_Screen+0x2b4>)
 80028b8:	6013      	str	r3, [r2, #0]
					break;
 80028ba:	e043      	b.n	8002944 <Set_Screen+0x190>

					case 1:
						engine_state = BUV_RT_VALS.ANN_2.Pump.State;
 80028bc:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <Set_Screen+0x298>)
 80028be:	7f1a      	ldrb	r2, [r3, #28]
 80028c0:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <Set_Screen+0x29c>)
 80028c2:	701a      	strb	r2, [r3, #0]
						unload		 = BUV_RT_VALS.ANN_2.Unload;
 80028c4:	4b61      	ldr	r3, [pc, #388]	; (8002a4c <Set_Screen+0x298>)
 80028c6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80028ca:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <Set_Screen+0x2a0>)
 80028cc:	701a      	strb	r2, [r3, #0]
						bimetal      = BUV_RT_VALS.ANN_2.Pump.Bimetal;
 80028ce:	4b5f      	ldr	r3, [pc, #380]	; (8002a4c <Set_Screen+0x298>)
 80028d0:	7f5a      	ldrb	r2, [r3, #29]
 80028d2:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <Set_Screen+0x2a4>)
 80028d4:	701a      	strb	r2, [r3, #0]
						Press_napor  = BUV_RT_VALS.ANN_2.Out_Pressure;
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <Set_Screen+0x298>)
 80028d8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80028dc:	4b5f      	ldr	r3, [pc, #380]	; (8002a5c <Set_Screen+0x2a8>)
 80028de:	801a      	strh	r2, [r3, #0]
						Press_maslo  = BUV_RT_VALS.ANN_2.Oil_Pressure;
 80028e0:	4b5a      	ldr	r3, [pc, #360]	; (8002a4c <Set_Screen+0x298>)
 80028e2:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80028e6:	4b5e      	ldr	r3, [pc, #376]	; (8002a60 <Set_Screen+0x2ac>)
 80028e8:	801a      	strh	r2, [r3, #0]
						Temp_maslo   = BUV_RT_VALS.ANN_2.Oil_Temperature;
 80028ea:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <Set_Screen+0x298>)
 80028ec:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80028f0:	4b5c      	ldr	r3, [pc, #368]	; (8002a64 <Set_Screen+0x2b0>)
 80028f2:	801a      	strh	r2, [r3, #0]
						motoclock    = BUV_RT_VALS.ANN_2.Pump.MotoClock;
 80028f4:	4b55      	ldr	r3, [pc, #340]	; (8002a4c <Set_Screen+0x298>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4a5b      	ldr	r2, [pc, #364]	; (8002a68 <Set_Screen+0x2b4>)
 80028fa:	6013      	str	r3, [r2, #0]
					break;
 80028fc:	e022      	b.n	8002944 <Set_Screen+0x190>

					case 2:
						engine_state = BUV_RT_VALS.ANN_3.Pump.State;
 80028fe:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <Set_Screen+0x298>)
 8002900:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002904:	4b52      	ldr	r3, [pc, #328]	; (8002a50 <Set_Screen+0x29c>)
 8002906:	701a      	strb	r2, [r3, #0]
						unload		 = BUV_RT_VALS.ANN_3.Unload;
 8002908:	4b50      	ldr	r3, [pc, #320]	; (8002a4c <Set_Screen+0x298>)
 800290a:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <Set_Screen+0x2a0>)
 8002910:	701a      	strb	r2, [r3, #0]
						bimetal      = BUV_RT_VALS.ANN_3.Pump.Bimetal;
 8002912:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <Set_Screen+0x298>)
 8002914:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <Set_Screen+0x2a4>)
 800291a:	701a      	strb	r2, [r3, #0]
						Press_napor  = BUV_RT_VALS.ANN_3.Out_Pressure;
 800291c:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <Set_Screen+0x298>)
 800291e:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8002922:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <Set_Screen+0x2a8>)
 8002924:	801a      	strh	r2, [r3, #0]
						Press_maslo  = BUV_RT_VALS.ANN_3.Oil_Pressure;
 8002926:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <Set_Screen+0x298>)
 8002928:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 800292c:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <Set_Screen+0x2ac>)
 800292e:	801a      	strh	r2, [r3, #0]
						Temp_maslo   = BUV_RT_VALS.ANN_3.Oil_Temperature;
 8002930:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <Set_Screen+0x298>)
 8002932:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8002936:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <Set_Screen+0x2b0>)
 8002938:	801a      	strh	r2, [r3, #0]
						motoclock    = BUV_RT_VALS.ANN_3.Pump.MotoClock;
 800293a:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <Set_Screen+0x298>)
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293e:	4a4a      	ldr	r2, [pc, #296]	; (8002a68 <Set_Screen+0x2b4>)
 8002940:	6013      	str	r3, [r2, #0]
					break;
 8002942:	bf00      	nop
				}

				uint16_t shift_X = i * 260 + 7;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	b29b      	uxth	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	0192      	lsls	r2, r2, #6
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	b29b      	uxth	r3, r3
 8002952:	3307      	adds	r3, #7
 8002954:	81fb      	strh	r3, [r7, #14]

				if(engine_state)
 8002956:	4b3e      	ldr	r3, [pc, #248]	; (8002a50 <Set_Screen+0x29c>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d012      	beq.n	8002984 <Set_Screen+0x1d0>
				{
					Short_Left_Colored_RU_DrawString_32("   Вкл   ", 		  9,  95 + shift_X,  20,      GreenColor, BasicSymbolColor, Page[1]);
 800295e:	89fb      	ldrh	r3, [r7, #14]
 8002960:	335f      	adds	r3, #95	; 0x5f
 8002962:	b298      	uxth	r0, r3
 8002964:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <Set_Screen+0x2b8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a41      	ldr	r2, [pc, #260]	; (8002a70 <Set_Screen+0x2bc>)
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	4941      	ldr	r1, [pc, #260]	; (8002a74 <Set_Screen+0x2c0>)
 800296e:	6849      	ldr	r1, [r1, #4]
 8002970:	9102      	str	r1, [sp, #8]
 8002972:	9201      	str	r2, [sp, #4]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	2314      	movs	r3, #20
 8002978:	4602      	mov	r2, r0
 800297a:	2109      	movs	r1, #9
 800297c:	483e      	ldr	r0, [pc, #248]	; (8002a78 <Set_Screen+0x2c4>)
 800297e:	f004 fe63 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8002982:	e011      	b.n	80029a8 <Set_Screen+0x1f4>
				}
				else
				{
					Short_Left_Colored_RU_DrawString_32("   Выкл  ", 		  9,  95 + shift_X,  20,        RedColor, BasicSymbolColor, Page[1]);
 8002984:	89fb      	ldrh	r3, [r7, #14]
 8002986:	335f      	adds	r3, #95	; 0x5f
 8002988:	b298      	uxth	r0, r3
 800298a:	4b3c      	ldr	r3, [pc, #240]	; (8002a7c <Set_Screen+0x2c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a38      	ldr	r2, [pc, #224]	; (8002a70 <Set_Screen+0x2bc>)
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	4938      	ldr	r1, [pc, #224]	; (8002a74 <Set_Screen+0x2c0>)
 8002994:	6849      	ldr	r1, [r1, #4]
 8002996:	9102      	str	r1, [sp, #8]
 8002998:	9201      	str	r2, [sp, #4]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2314      	movs	r3, #20
 800299e:	4602      	mov	r2, r0
 80029a0:	2109      	movs	r1, #9
 80029a2:	4837      	ldr	r0, [pc, #220]	; (8002a80 <Set_Screen+0x2cc>)
 80029a4:	f004 fe50 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				}
				Short_Centred_DrawNumber_16(Press_napor, 1, 4, 0, 					 170 + shift_X,  52, 									Page[1]);
 80029a8:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <Set_Screen+0x2a8>)
 80029aa:	f9b3 0000 	ldrsh.w	r0, [r3]
 80029ae:	89fb      	ldrh	r3, [r7, #14]
 80029b0:	33aa      	adds	r3, #170	; 0xaa
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	4a2f      	ldr	r2, [pc, #188]	; (8002a74 <Set_Screen+0x2c0>)
 80029b6:	6852      	ldr	r2, [r2, #4]
 80029b8:	9202      	str	r2, [sp, #8]
 80029ba:	2234      	movs	r2, #52	; 0x34
 80029bc:	9201      	str	r2, [sp, #4]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2300      	movs	r3, #0
 80029c2:	2204      	movs	r2, #4
 80029c4:	2101      	movs	r1, #1
 80029c6:	f005 fe5f 	bl	8008688 <Short_Centred_DrawNumber_16>
				Short_Centred_DrawNumber_16(Press_maslo, 2, 4, 0, 					 170 + shift_X,  82, 									Page[1]);
 80029ca:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <Set_Screen+0x2ac>)
 80029cc:	f9b3 0000 	ldrsh.w	r0, [r3]
 80029d0:	89fb      	ldrh	r3, [r7, #14]
 80029d2:	33aa      	adds	r3, #170	; 0xaa
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	4a27      	ldr	r2, [pc, #156]	; (8002a74 <Set_Screen+0x2c0>)
 80029d8:	6852      	ldr	r2, [r2, #4]
 80029da:	9202      	str	r2, [sp, #8]
 80029dc:	2252      	movs	r2, #82	; 0x52
 80029de:	9201      	str	r2, [sp, #4]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2300      	movs	r3, #0
 80029e4:	2204      	movs	r2, #4
 80029e6:	2102      	movs	r1, #2
 80029e8:	f005 fe4e 	bl	8008688 <Short_Centred_DrawNumber_16>
				Short_Centred_DrawNumber_16(Temp_maslo , 0, 4, 0, 					 170 + shift_X, 112, 									Page[1]);
 80029ec:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <Set_Screen+0x2b0>)
 80029ee:	f9b3 0000 	ldrsh.w	r0, [r3]
 80029f2:	89fb      	ldrh	r3, [r7, #14]
 80029f4:	33aa      	adds	r3, #170	; 0xaa
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <Set_Screen+0x2c0>)
 80029fa:	6852      	ldr	r2, [r2, #4]
 80029fc:	9202      	str	r2, [sp, #8]
 80029fe:	2270      	movs	r2, #112	; 0x70
 8002a00:	9201      	str	r2, [sp, #4]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	2300      	movs	r3, #0
 8002a06:	2204      	movs	r2, #4
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f005 fe3d 	bl	8008688 <Short_Centred_DrawNumber_16>
				if(unload)
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <Set_Screen+0x2a0>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d038      	beq.n	8002a88 <Set_Screen+0x2d4>
				{
					Short_Left_Colored_RU_DrawString_32("  РАЗГРУЗКА   ", 	 14,   5 + shift_X, 140, 	  GreenColor, BasicSymbolColor, Page[1]);
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	3305      	adds	r3, #5
 8002a1a:	b298      	uxth	r0, r3
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <Set_Screen+0x2b8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <Set_Screen+0x2bc>)
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	4913      	ldr	r1, [pc, #76]	; (8002a74 <Set_Screen+0x2c0>)
 8002a26:	6849      	ldr	r1, [r1, #4]
 8002a28:	9102      	str	r1, [sp, #8]
 8002a2a:	9201      	str	r2, [sp, #4]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	238c      	movs	r3, #140	; 0x8c
 8002a30:	4602      	mov	r2, r0
 8002a32:	210e      	movs	r1, #14
 8002a34:	4813      	ldr	r0, [pc, #76]	; (8002a84 <Set_Screen+0x2d0>)
 8002a36:	f004 fe07 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8002a3a:	e037      	b.n	8002aac <Set_Screen+0x2f8>
 8002a3c:	20000b70 	.word	0x20000b70
 8002a40:	20000010 	.word	0x20000010
 8002a44:	200000a4 	.word	0x200000a4
 8002a48:	20000008 	.word	0x20000008
 8002a4c:	20000aa8 	.word	0x20000aa8
 8002a50:	200000f4 	.word	0x200000f4
 8002a54:	200000f5 	.word	0x200000f5
 8002a58:	200000f6 	.word	0x200000f6
 8002a5c:	200000f8 	.word	0x200000f8
 8002a60:	200000fa 	.word	0x200000fa
 8002a64:	200000fc 	.word	0x200000fc
 8002a68:	20000100 	.word	0x20000100
 8002a6c:	20000004 	.word	0x20000004
 8002a70:	200009f4 	.word	0x200009f4
 8002a74:	20000980 	.word	0x20000980
 8002a78:	0800df04 	.word	0x0800df04
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	0800e354 	.word	0x0800e354
 8002a84:	0800df14 	.word	0x0800df14
				}
				else
				{
					Short_Left_Colored_RU_DrawString_32("  РАЗГРУЗКА   ", 	 14,   5 + shift_X, 140, 		RedColor, BasicSymbolColor, Page[1]);
 8002a88:	89fb      	ldrh	r3, [r7, #14]
 8002a8a:	3305      	adds	r3, #5
 8002a8c:	b298      	uxth	r0, r3
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <Set_Screen+0x328>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <Set_Screen+0x32c>)
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	4913      	ldr	r1, [pc, #76]	; (8002ae4 <Set_Screen+0x330>)
 8002a98:	6849      	ldr	r1, [r1, #4]
 8002a9a:	9102      	str	r1, [sp, #8]
 8002a9c:	9201      	str	r2, [sp, #4]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	238c      	movs	r3, #140	; 0x8c
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	210e      	movs	r1, #14
 8002aa6:	4810      	ldr	r0, [pc, #64]	; (8002ae8 <Set_Screen+0x334>)
 8002aa8:	f004 fdce 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				}
				if(bimetal)
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <Set_Screen+0x338>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01f      	beq.n	8002af4 <Set_Screen+0x340>
				{
					Short_Left_Colored_RU_DrawString_32(" тепл. защита ", 	 14,   5 + shift_X, 170, 		RedColor, BasicSymbolColor, Page[1]);
 8002ab4:	89fb      	ldrh	r3, [r7, #14]
 8002ab6:	3305      	adds	r3, #5
 8002ab8:	b298      	uxth	r0, r3
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <Set_Screen+0x328>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <Set_Screen+0x32c>)
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	4908      	ldr	r1, [pc, #32]	; (8002ae4 <Set_Screen+0x330>)
 8002ac4:	6849      	ldr	r1, [r1, #4]
 8002ac6:	9102      	str	r1, [sp, #8]
 8002ac8:	9201      	str	r2, [sp, #4]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	23aa      	movs	r3, #170	; 0xaa
 8002ace:	4602      	mov	r2, r0
 8002ad0:	210e      	movs	r1, #14
 8002ad2:	4807      	ldr	r0, [pc, #28]	; (8002af0 <Set_Screen+0x33c>)
 8002ad4:	f004 fdb8 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8002ad8:	e01e      	b.n	8002b18 <Set_Screen+0x364>
 8002ada:	bf00      	nop
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	200009f4 	.word	0x200009f4
 8002ae4:	20000980 	.word	0x20000980
 8002ae8:	0800df14 	.word	0x0800df14
 8002aec:	200000f6 	.word	0x200000f6
 8002af0:	0800e364 	.word	0x0800e364
				}
				else
				{
					Short_Left_Colored_RU_DrawString_32(" тепл. защита ", 	 14,   5 + shift_X, 170, 	  GreenColor, BasicSymbolColor, Page[1]);
 8002af4:	89fb      	ldrh	r3, [r7, #14]
 8002af6:	3305      	adds	r3, #5
 8002af8:	b298      	uxth	r0, r3
 8002afa:	4baa      	ldr	r3, [pc, #680]	; (8002da4 <Set_Screen+0x5f0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4aaa      	ldr	r2, [pc, #680]	; (8002da8 <Set_Screen+0x5f4>)
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	49aa      	ldr	r1, [pc, #680]	; (8002dac <Set_Screen+0x5f8>)
 8002b04:	6849      	ldr	r1, [r1, #4]
 8002b06:	9102      	str	r1, [sp, #8]
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	23aa      	movs	r3, #170	; 0xaa
 8002b0e:	4602      	mov	r2, r0
 8002b10:	210e      	movs	r1, #14
 8002b12:	48a7      	ldr	r0, [pc, #668]	; (8002db0 <Set_Screen+0x5fc>)
 8002b14:	f004 fd98 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				}

				Centred_DrawNumber_16_32bit(motoclock, 0, 10, 0, 			 200 + shift_X, 205, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002b18:	4ba6      	ldr	r3, [pc, #664]	; (8002db4 <Set_Screen+0x600>)
 8002b1a:	681c      	ldr	r4, [r3, #0]
 8002b1c:	89fb      	ldrh	r3, [r7, #14]
 8002b1e:	33c8      	adds	r3, #200	; 0xc8
 8002b20:	4aa2      	ldr	r2, [pc, #648]	; (8002dac <Set_Screen+0x5f8>)
 8002b22:	6852      	ldr	r2, [r2, #4]
 8002b24:	49a4      	ldr	r1, [pc, #656]	; (8002db8 <Set_Screen+0x604>)
 8002b26:	6809      	ldr	r1, [r1, #0]
 8002b28:	489f      	ldr	r0, [pc, #636]	; (8002da8 <Set_Screen+0x5f4>)
 8002b2a:	6800      	ldr	r0, [r0, #0]
 8002b2c:	2512      	movs	r5, #18
 8002b2e:	9509      	str	r5, [sp, #36]	; 0x24
 8002b30:	250b      	movs	r5, #11
 8002b32:	9508      	str	r5, [sp, #32]
 8002b34:	4da1      	ldr	r5, [pc, #644]	; (8002dbc <Set_Screen+0x608>)
 8002b36:	9507      	str	r5, [sp, #28]
 8002b38:	9006      	str	r0, [sp, #24]
 8002b3a:	9105      	str	r1, [sp, #20]
 8002b3c:	9204      	str	r2, [sp, #16]
 8002b3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b42:	9203      	str	r2, [sp, #12]
 8002b44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002b48:	9202      	str	r2, [sp, #8]
 8002b4a:	22cd      	movs	r2, #205	; 0xcd
 8002b4c:	9201      	str	r2, [sp, #4]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2300      	movs	r3, #0
 8002b52:	220a      	movs	r2, #10
 8002b54:	2100      	movs	r1, #0
 8002b56:	4620      	mov	r0, r4
 8002b58:	f005 f8e4 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			for(int i = 0; i < 3; i++)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	f77f ae7c 	ble.w	8002862 <Set_Screen+0xae>
			}

			Centred_DrawNumber_16(BUV_RT_VALS.Ustauka, 			0, 3, 0, 700, 270, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // Уставка
 8002b6a:	4b95      	ldr	r3, [pc, #596]	; (8002dc0 <Set_Screen+0x60c>)
 8002b6c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002b70:	4b8e      	ldr	r3, [pc, #568]	; (8002dac <Set_Screen+0x5f8>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a90      	ldr	r2, [pc, #576]	; (8002db8 <Set_Screen+0x604>)
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	498b      	ldr	r1, [pc, #556]	; (8002da8 <Set_Screen+0x5f4>)
 8002b7a:	6809      	ldr	r1, [r1, #0]
 8002b7c:	2419      	movs	r4, #25
 8002b7e:	9409      	str	r4, [sp, #36]	; 0x24
 8002b80:	2410      	movs	r4, #16
 8002b82:	9408      	str	r4, [sp, #32]
 8002b84:	4c8f      	ldr	r4, [pc, #572]	; (8002dc4 <Set_Screen+0x610>)
 8002b86:	9407      	str	r4, [sp, #28]
 8002b88:	9106      	str	r1, [sp, #24]
 8002b8a:	9205      	str	r2, [sp, #20]
 8002b8c:	9304      	str	r3, [sp, #16]
 8002b8e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002b92:	9303      	str	r3, [sp, #12]
 8002b94:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002b98:	9302      	str	r3, [sp, #8]
 8002b9a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2203      	movs	r2, #3
 8002baa:	2100      	movs	r1, #0
 8002bac:	f004 fe96 	bl	80078dc <Centred_DrawNumber_16>
			Centred_DrawNumber_16(BUV_RT_VALS.TANK_level, 		0, 3, 0, 700, 330, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // уровень бак
 8002bb0:	4b83      	ldr	r3, [pc, #524]	; (8002dc0 <Set_Screen+0x60c>)
 8002bb2:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8002bb6:	4b7d      	ldr	r3, [pc, #500]	; (8002dac <Set_Screen+0x5f8>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4a7f      	ldr	r2, [pc, #508]	; (8002db8 <Set_Screen+0x604>)
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	497a      	ldr	r1, [pc, #488]	; (8002da8 <Set_Screen+0x5f4>)
 8002bc0:	6809      	ldr	r1, [r1, #0]
 8002bc2:	2419      	movs	r4, #25
 8002bc4:	9409      	str	r4, [sp, #36]	; 0x24
 8002bc6:	2410      	movs	r4, #16
 8002bc8:	9408      	str	r4, [sp, #32]
 8002bca:	4c7e      	ldr	r4, [pc, #504]	; (8002dc4 <Set_Screen+0x610>)
 8002bcc:	9407      	str	r4, [sp, #28]
 8002bce:	9106      	str	r1, [sp, #24]
 8002bd0:	9205      	str	r2, [sp, #20]
 8002bd2:	9304      	str	r3, [sp, #16]
 8002bd4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002bd8:	9303      	str	r3, [sp, #12]
 8002bda:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002bde:	9302      	str	r3, [sp, #8]
 8002be0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	2300      	movs	r3, #0
 8002bee:	2203      	movs	r2, #3
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	f004 fe73 	bl	80078dc <Centred_DrawNumber_16>
			Centred_DrawNumber_16(BUV_RT_VALS.TANK_temperature, 0, 3, 0, 700, 390, 800, 480, Page[1], BackgroundColor, BasicSymbolColor, Arial_16x25_Table, 16, 25); // температура бак
 8002bf6:	4b72      	ldr	r3, [pc, #456]	; (8002dc0 <Set_Screen+0x60c>)
 8002bf8:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8002bfc:	4b6b      	ldr	r3, [pc, #428]	; (8002dac <Set_Screen+0x5f8>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a6d      	ldr	r2, [pc, #436]	; (8002db8 <Set_Screen+0x604>)
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4968      	ldr	r1, [pc, #416]	; (8002da8 <Set_Screen+0x5f4>)
 8002c06:	6809      	ldr	r1, [r1, #0]
 8002c08:	2419      	movs	r4, #25
 8002c0a:	9409      	str	r4, [sp, #36]	; 0x24
 8002c0c:	2410      	movs	r4, #16
 8002c0e:	9408      	str	r4, [sp, #32]
 8002c10:	4c6c      	ldr	r4, [pc, #432]	; (8002dc4 <Set_Screen+0x610>)
 8002c12:	9407      	str	r4, [sp, #28]
 8002c14:	9106      	str	r1, [sp, #24]
 8002c16:	9205      	str	r2, [sp, #20]
 8002c18:	9304      	str	r3, [sp, #16]
 8002c1a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c1e:	9303      	str	r3, [sp, #12]
 8002c20:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002c24:	9302      	str	r3, [sp, #8]
 8002c26:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2300      	movs	r3, #0
 8002c34:	2203      	movs	r2, #3
 8002c36:	2100      	movs	r1, #0
 8002c38:	f004 fe50 	bl	80078dc <Centred_DrawNumber_16>

			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Out_Pressure, 				1, 4, 0, 550, 242, 					 Page[1]); // давл в магистрали
 8002c3c:	4b60      	ldr	r3, [pc, #384]	; (8002dc0 <Set_Screen+0x60c>)
 8002c3e:	f9b3 0044 	ldrsh.w	r0, [r3, #68]	; 0x44
 8002c42:	4b5a      	ldr	r3, [pc, #360]	; (8002dac <Set_Screen+0x5f8>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	9302      	str	r3, [sp, #8]
 8002c48:	23f2      	movs	r3, #242	; 0xf2
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	f240 2326 	movw	r3, #550	; 0x226
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2300      	movs	r3, #0
 8002c54:	2204      	movs	r2, #4
 8002c56:	2101      	movs	r1, #1
 8002c58:	f005 fd16 	bl	8008688 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Pressure_before_press_filter, 1, 4, 0, 550, 272, 					 Page[1]); // перед сливным напорным фильтром
 8002c5c:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <Set_Screen+0x60c>)
 8002c5e:	f9b3 0046 	ldrsh.w	r0, [r3, #70]	; 0x46
 8002c62:	4b52      	ldr	r3, [pc, #328]	; (8002dac <Set_Screen+0x5f8>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	9302      	str	r3, [sp, #8]
 8002c68:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	f240 2326 	movw	r3, #550	; 0x226
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	2204      	movs	r2, #4
 8002c78:	2101      	movs	r1, #1
 8002c7a:	f005 fd05 	bl	8008688 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Pressure_before_filter, 		1, 4, 0, 330, 302, 					 Page[1]); // перед сливным фильтром
 8002c7e:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <Set_Screen+0x60c>)
 8002c80:	f9b3 0048 	ldrsh.w	r0, [r3, #72]	; 0x48
 8002c84:	4b49      	ldr	r3, [pc, #292]	; (8002dac <Set_Screen+0x5f8>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	9302      	str	r3, [sp, #8]
 8002c8a:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2300      	movs	r3, #0
 8002c98:	2204      	movs	r2, #4
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	f005 fcf4 	bl	8008688 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Pressure_behind_filter, 		1, 4, 0, 550, 302, 					 Page[1]); // за сливным фильтром
 8002ca0:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <Set_Screen+0x60c>)
 8002ca2:	f9b3 004a 	ldrsh.w	r0, [r3, #74]	; 0x4a
 8002ca6:	4b41      	ldr	r3, [pc, #260]	; (8002dac <Set_Screen+0x5f8>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	f240 2326 	movw	r3, #550	; 0x226
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2204      	movs	r2, #4
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	f005 fce3 	bl	8008688 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Flow,  1, 6, 0, 310, 334, 					 Page[1]); // расход на сливном фильтре
 8002cc2:	4b3f      	ldr	r3, [pc, #252]	; (8002dc0 <Set_Screen+0x60c>)
 8002cc4:	f9b3 004c 	ldrsh.w	r0, [r3, #76]	; 0x4c
 8002cc8:	4b38      	ldr	r3, [pc, #224]	; (8002dac <Set_Screen+0x5f8>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	9302      	str	r3, [sp, #8]
 8002cce:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2206      	movs	r2, #6
 8002cde:	2101      	movs	r1, #1
 8002ce0:	f005 fcd2 	bl	8008688 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Flow, 		1, 6, 0, 530, 334, 					 Page[1]); // расход эмульсии
 8002ce4:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <Set_Screen+0x60c>)
 8002ce6:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 8002cea:	4b30      	ldr	r3, [pc, #192]	; (8002dac <Set_Screen+0x5f8>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	9302      	str	r3, [sp, #8]
 8002cf0:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	f240 2312 	movw	r3, #530	; 0x212
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2206      	movs	r2, #6
 8002d00:	2101      	movs	r1, #1
 8002d02:	f005 fcc1 	bl	8008688 <Short_Centred_DrawNumber_16>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Volume, 0, 10, 0, 340, 364, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18); // прокачаный объём на сливном фильтре
 8002d06:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <Set_Screen+0x60c>)
 8002d08:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002d0a:	4b28      	ldr	r3, [pc, #160]	; (8002dac <Set_Screen+0x5f8>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a2a      	ldr	r2, [pc, #168]	; (8002db8 <Set_Screen+0x604>)
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	4925      	ldr	r1, [pc, #148]	; (8002da8 <Set_Screen+0x5f4>)
 8002d14:	6809      	ldr	r1, [r1, #0]
 8002d16:	2412      	movs	r4, #18
 8002d18:	9409      	str	r4, [sp, #36]	; 0x24
 8002d1a:	240b      	movs	r4, #11
 8002d1c:	9408      	str	r4, [sp, #32]
 8002d1e:	4c27      	ldr	r4, [pc, #156]	; (8002dbc <Set_Screen+0x608>)
 8002d20:	9407      	str	r4, [sp, #28]
 8002d22:	9106      	str	r1, [sp, #24]
 8002d24:	9205      	str	r2, [sp, #20]
 8002d26:	9304      	str	r3, [sp, #16]
 8002d28:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002d2c:	9303      	str	r3, [sp, #12]
 8002d2e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002d32:	9302      	str	r3, [sp, #8]
 8002d34:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	2300      	movs	r3, #0
 8002d42:	220a      	movs	r2, #10
 8002d44:	2100      	movs	r1, #0
 8002d46:	f004 ffed 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Volume,     0, 10, 0, 560, 364, 800,480,Page[1],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18); // прокачаный объём эмульсии
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <Set_Screen+0x60c>)
 8002d4c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <Set_Screen+0x5f8>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <Set_Screen+0x604>)
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	4914      	ldr	r1, [pc, #80]	; (8002da8 <Set_Screen+0x5f4>)
 8002d58:	6809      	ldr	r1, [r1, #0]
 8002d5a:	2412      	movs	r4, #18
 8002d5c:	9409      	str	r4, [sp, #36]	; 0x24
 8002d5e:	240b      	movs	r4, #11
 8002d60:	9408      	str	r4, [sp, #32]
 8002d62:	4c16      	ldr	r4, [pc, #88]	; (8002dbc <Set_Screen+0x608>)
 8002d64:	9407      	str	r4, [sp, #28]
 8002d66:	9106      	str	r1, [sp, #24]
 8002d68:	9205      	str	r2, [sp, #20]
 8002d6a:	9304      	str	r3, [sp, #16]
 8002d6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002d70:	9303      	str	r3, [sp, #12]
 8002d72:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002d76:	9302      	str	r3, [sp, #8]
 8002d78:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	2300      	movs	r3, #0
 8002d86:	220a      	movs	r2, #10
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f004 ffcb 	bl	8007d24 <Centred_DrawNumber_16_32bit>

			if(BUV_RT_VALS.FILT_NODE.Flush_valve_1)
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <Set_Screen+0x60c>)
 8002d90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d024      	beq.n	8002de2 <Set_Screen+0x62e>
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.1", 	 11,  90, 400, GreenColor, BasicSymbolColor, Page[1]);
 8002d98:	4b02      	ldr	r3, [pc, #8]	; (8002da4 <Set_Screen+0x5f0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a02      	ldr	r2, [pc, #8]	; (8002da8 <Set_Screen+0x5f4>)
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	e012      	b.n	8002dc8 <Set_Screen+0x614>
 8002da2:	bf00      	nop
 8002da4:	20000004 	.word	0x20000004
 8002da8:	200009f4 	.word	0x200009f4
 8002dac:	20000980 	.word	0x20000980
 8002db0:	0800e364 	.word	0x0800e364
 8002db4:	20000100 	.word	0x20000100
 8002db8:	20000008 	.word	0x20000008
 8002dbc:	080117b0 	.word	0x080117b0
 8002dc0:	20000aa8 	.word	0x20000aa8
 8002dc4:	0801250c 	.word	0x0801250c
 8002dc8:	4998      	ldr	r1, [pc, #608]	; (800302c <Set_Screen+0x878>)
 8002dca:	6849      	ldr	r1, [r1, #4]
 8002dcc:	9102      	str	r1, [sp, #8]
 8002dce:	9201      	str	r2, [sp, #4]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002dd6:	225a      	movs	r2, #90	; 0x5a
 8002dd8:	210b      	movs	r1, #11
 8002dda:	4895      	ldr	r0, [pc, #596]	; (8003030 <Set_Screen+0x87c>)
 8002ddc:	f004 fc34 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8002de0:	e00f      	b.n	8002e02 <Set_Screen+0x64e>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.1", 	 11,  90, 400,   RedColor, BasicSymbolColor, Page[1]);
 8002de2:	4b94      	ldr	r3, [pc, #592]	; (8003034 <Set_Screen+0x880>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a94      	ldr	r2, [pc, #592]	; (8003038 <Set_Screen+0x884>)
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	4990      	ldr	r1, [pc, #576]	; (800302c <Set_Screen+0x878>)
 8002dec:	6849      	ldr	r1, [r1, #4]
 8002dee:	9102      	str	r1, [sp, #8]
 8002df0:	9201      	str	r2, [sp, #4]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002df8:	225a      	movs	r2, #90	; 0x5a
 8002dfa:	210b      	movs	r1, #11
 8002dfc:	488c      	ldr	r0, [pc, #560]	; (8003030 <Set_Screen+0x87c>)
 8002dfe:	f004 fc23 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.FILT_NODE.Flush_valve_2)
 8002e02:	4b8e      	ldr	r3, [pc, #568]	; (800303c <Set_Screen+0x888>)
 8002e04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d011      	beq.n	8002e30 <Set_Screen+0x67c>
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.2", 	 11, 340, 400, GreenColor, BasicSymbolColor, Page[1]);
 8002e0c:	4b8c      	ldr	r3, [pc, #560]	; (8003040 <Set_Screen+0x88c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a89      	ldr	r2, [pc, #548]	; (8003038 <Set_Screen+0x884>)
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	4985      	ldr	r1, [pc, #532]	; (800302c <Set_Screen+0x878>)
 8002e16:	6849      	ldr	r1, [r1, #4]
 8002e18:	9102      	str	r1, [sp, #8]
 8002e1a:	9201      	str	r2, [sp, #4]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002e22:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8002e26:	210b      	movs	r1, #11
 8002e28:	4886      	ldr	r0, [pc, #536]	; (8003044 <Set_Screen+0x890>)
 8002e2a:	f004 fc0d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8002e2e:	e010      	b.n	8002e52 <Set_Screen+0x69e>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.промыв.2", 	 11, 340, 400,   RedColor, BasicSymbolColor, Page[1]);
 8002e30:	4b80      	ldr	r3, [pc, #512]	; (8003034 <Set_Screen+0x880>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a80      	ldr	r2, [pc, #512]	; (8003038 <Set_Screen+0x884>)
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	497c      	ldr	r1, [pc, #496]	; (800302c <Set_Screen+0x878>)
 8002e3a:	6849      	ldr	r1, [r1, #4]
 8002e3c:	9102      	str	r1, [sp, #8]
 8002e3e:	9201      	str	r2, [sp, #4]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002e46:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8002e4a:	210b      	movs	r1, #11
 8002e4c:	487d      	ldr	r0, [pc, #500]	; (8003044 <Set_Screen+0x890>)
 8002e4e:	f004 fbfb 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			Control_DB.RazrPointer 		= 0;
 8002e52:	4b7d      	ldr	r3, [pc, #500]	; (8003048 <Set_Screen+0x894>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	805a      	strh	r2, [r3, #2]

		break;
 8002e58:	f002 baa5 	b.w	80053a6 <Set_Screen+0x2bf2>

		case 2:

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.MotoClock,			 0, 10, 0, 730,  94, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002e5c:	4b77      	ldr	r3, [pc, #476]	; (800303c <Set_Screen+0x888>)
 8002e5e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002e60:	4b72      	ldr	r3, [pc, #456]	; (800302c <Set_Screen+0x878>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a79      	ldr	r2, [pc, #484]	; (800304c <Set_Screen+0x898>)
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	4973      	ldr	r1, [pc, #460]	; (8003038 <Set_Screen+0x884>)
 8002e6a:	6809      	ldr	r1, [r1, #0]
 8002e6c:	2412      	movs	r4, #18
 8002e6e:	9409      	str	r4, [sp, #36]	; 0x24
 8002e70:	240b      	movs	r4, #11
 8002e72:	9408      	str	r4, [sp, #32]
 8002e74:	4c76      	ldr	r4, [pc, #472]	; (8003050 <Set_Screen+0x89c>)
 8002e76:	9407      	str	r4, [sp, #28]
 8002e78:	9106      	str	r1, [sp, #24]
 8002e7a:	9205      	str	r2, [sp, #20]
 8002e7c:	9304      	str	r3, [sp, #16]
 8002e7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002e82:	9303      	str	r3, [sp, #12]
 8002e84:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	235e      	movs	r3, #94	; 0x5e
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	f240 23da 	movw	r3, #730	; 0x2da
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	2300      	movs	r3, #0
 8002e96:	220a      	movs	r2, #10
 8002e98:	2100      	movs	r1, #0
 8002e9a:	f004 ff43 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.MotoClock,			 0, 10, 0, 730, 124, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <Set_Screen+0x888>)
 8002ea0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002ea2:	4b62      	ldr	r3, [pc, #392]	; (800302c <Set_Screen+0x878>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	4a69      	ldr	r2, [pc, #420]	; (800304c <Set_Screen+0x898>)
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	4963      	ldr	r1, [pc, #396]	; (8003038 <Set_Screen+0x884>)
 8002eac:	6809      	ldr	r1, [r1, #0]
 8002eae:	2412      	movs	r4, #18
 8002eb0:	9409      	str	r4, [sp, #36]	; 0x24
 8002eb2:	240b      	movs	r4, #11
 8002eb4:	9408      	str	r4, [sp, #32]
 8002eb6:	4c66      	ldr	r4, [pc, #408]	; (8003050 <Set_Screen+0x89c>)
 8002eb8:	9407      	str	r4, [sp, #28]
 8002eba:	9106      	str	r1, [sp, #24]
 8002ebc:	9205      	str	r2, [sp, #20]
 8002ebe:	9304      	str	r3, [sp, #16]
 8002ec0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002ec4:	9303      	str	r3, [sp, #12]
 8002ec6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002eca:	9302      	str	r3, [sp, #8]
 8002ecc:	237c      	movs	r3, #124	; 0x7c
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	f240 23da 	movw	r3, #730	; 0x2da
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	220a      	movs	r2, #10
 8002eda:	2100      	movs	r1, #0
 8002edc:	f004 ff22 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.MotoClock,	 0, 10, 0, 730, 154, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8002ee0:	4b56      	ldr	r3, [pc, #344]	; (800303c <Set_Screen+0x888>)
 8002ee2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002ee4:	4b51      	ldr	r3, [pc, #324]	; (800302c <Set_Screen+0x878>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <Set_Screen+0x898>)
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	4952      	ldr	r1, [pc, #328]	; (8003038 <Set_Screen+0x884>)
 8002eee:	6809      	ldr	r1, [r1, #0]
 8002ef0:	2412      	movs	r4, #18
 8002ef2:	9409      	str	r4, [sp, #36]	; 0x24
 8002ef4:	240b      	movs	r4, #11
 8002ef6:	9408      	str	r4, [sp, #32]
 8002ef8:	4c55      	ldr	r4, [pc, #340]	; (8003050 <Set_Screen+0x89c>)
 8002efa:	9407      	str	r4, [sp, #28]
 8002efc:	9106      	str	r1, [sp, #24]
 8002efe:	9205      	str	r2, [sp, #20]
 8002f00:	9304      	str	r3, [sp, #16]
 8002f02:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f06:	9303      	str	r3, [sp, #12]
 8002f08:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002f0c:	9302      	str	r3, [sp, #8]
 8002f0e:	239a      	movs	r3, #154	; 0x9a
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	f240 23da 	movw	r3, #730	; 0x2da
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	220a      	movs	r2, #10
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f004 ff01 	bl	8007d24 <Centred_DrawNumber_16_32bit>

			if(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.State)
 8002f22:	4b46      	ldr	r3, [pc, #280]	; (800303c <Set_Screen+0x888>)
 8002f24:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00f      	beq.n	8002f4c <Set_Screen+0x798>
			{
				Short_Left_Colored_RU_DrawString_32("Насос циркуляционный ", 				21,  10,  90,      GreenColor, BasicSymbolColor, Page[2]);
 8002f2c:	4b44      	ldr	r3, [pc, #272]	; (8003040 <Set_Screen+0x88c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a41      	ldr	r2, [pc, #260]	; (8003038 <Set_Screen+0x884>)
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	493d      	ldr	r1, [pc, #244]	; (800302c <Set_Screen+0x878>)
 8002f36:	6889      	ldr	r1, [r1, #8]
 8002f38:	9102      	str	r1, [sp, #8]
 8002f3a:	9201      	str	r2, [sp, #4]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	235a      	movs	r3, #90	; 0x5a
 8002f40:	220a      	movs	r2, #10
 8002f42:	2115      	movs	r1, #21
 8002f44:	4843      	ldr	r0, [pc, #268]	; (8003054 <Set_Screen+0x8a0>)
 8002f46:	f004 fb7f 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8002f4a:	e00e      	b.n	8002f6a <Set_Screen+0x7b6>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Насос циркуляционный ", 				21,  10,  90,        RedColor, BasicSymbolColor, Page[2]);
 8002f4c:	4b39      	ldr	r3, [pc, #228]	; (8003034 <Set_Screen+0x880>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a39      	ldr	r2, [pc, #228]	; (8003038 <Set_Screen+0x884>)
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	4935      	ldr	r1, [pc, #212]	; (800302c <Set_Screen+0x878>)
 8002f56:	6889      	ldr	r1, [r1, #8]
 8002f58:	9102      	str	r1, [sp, #8]
 8002f5a:	9201      	str	r2, [sp, #4]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	235a      	movs	r3, #90	; 0x5a
 8002f60:	220a      	movs	r2, #10
 8002f62:	2115      	movs	r1, #21
 8002f64:	483b      	ldr	r0, [pc, #236]	; (8003054 <Set_Screen+0x8a0>)
 8002f66:	f004 fb6f 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.Bimetal)
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <Set_Screen+0x888>)
 8002f6c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <Set_Screen+0x7e2>
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400,  90,      GreenColor, BasicSymbolColor, Page[2]);
 8002f74:	4b32      	ldr	r3, [pc, #200]	; (8003040 <Set_Screen+0x88c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2f      	ldr	r2, [pc, #188]	; (8003038 <Set_Screen+0x884>)
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	492b      	ldr	r1, [pc, #172]	; (800302c <Set_Screen+0x878>)
 8002f7e:	6889      	ldr	r1, [r1, #8]
 8002f80:	9102      	str	r1, [sp, #8]
 8002f82:	9201      	str	r2, [sp, #4]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	235a      	movs	r3, #90	; 0x5a
 8002f88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002f8c:	2108      	movs	r1, #8
 8002f8e:	4832      	ldr	r0, [pc, #200]	; (8003058 <Set_Screen+0x8a4>)
 8002f90:	f004 fb5a 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8002f94:	e00f      	b.n	8002fb6 <Set_Screen+0x802>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400,  90,        RedColor, BasicSymbolColor, Page[2]);
 8002f96:	4b27      	ldr	r3, [pc, #156]	; (8003034 <Set_Screen+0x880>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a27      	ldr	r2, [pc, #156]	; (8003038 <Set_Screen+0x884>)
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4923      	ldr	r1, [pc, #140]	; (800302c <Set_Screen+0x878>)
 8002fa0:	6889      	ldr	r1, [r1, #8]
 8002fa2:	9102      	str	r1, [sp, #8]
 8002fa4:	9201      	str	r2, [sp, #4]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	235a      	movs	r3, #90	; 0x5a
 8002faa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002fae:	2108      	movs	r1, #8
 8002fb0:	4829      	ldr	r0, [pc, #164]	; (8003058 <Set_Screen+0x8a4>)
 8002fb2:	f004 fb49 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}


			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.State)
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <Set_Screen+0x888>)
 8002fb8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00f      	beq.n	8002fe0 <Set_Screen+0x82c>
			{
				Short_Left_Colored_RU_DrawString_32("Насос концентрата    ", 				21,  10, 120,      GreenColor, BasicSymbolColor, Page[2]);
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <Set_Screen+0x88c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <Set_Screen+0x884>)
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	4918      	ldr	r1, [pc, #96]	; (800302c <Set_Screen+0x878>)
 8002fca:	6889      	ldr	r1, [r1, #8]
 8002fcc:	9102      	str	r1, [sp, #8]
 8002fce:	9201      	str	r2, [sp, #4]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2378      	movs	r3, #120	; 0x78
 8002fd4:	220a      	movs	r2, #10
 8002fd6:	2115      	movs	r1, #21
 8002fd8:	4820      	ldr	r0, [pc, #128]	; (800305c <Set_Screen+0x8a8>)
 8002fda:	f004 fb35 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8002fde:	e00e      	b.n	8002ffe <Set_Screen+0x84a>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Насос концентрата    ", 				21,  10, 120,        RedColor, BasicSymbolColor, Page[2]);
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <Set_Screen+0x880>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <Set_Screen+0x884>)
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	4910      	ldr	r1, [pc, #64]	; (800302c <Set_Screen+0x878>)
 8002fea:	6889      	ldr	r1, [r1, #8]
 8002fec:	9102      	str	r1, [sp, #8]
 8002fee:	9201      	str	r2, [sp, #4]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2378      	movs	r3, #120	; 0x78
 8002ff4:	220a      	movs	r2, #10
 8002ff6:	2115      	movs	r1, #21
 8002ff8:	4818      	ldr	r0, [pc, #96]	; (800305c <Set_Screen+0x8a8>)
 8002ffa:	f004 fb25 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.Bimetal)
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <Set_Screen+0x888>)
 8003000:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003004:	2b00      	cmp	r3, #0
 8003006:	d02b      	beq.n	8003060 <Set_Screen+0x8ac>
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 120,      GreenColor, BasicSymbolColor, Page[2]);
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <Set_Screen+0x88c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <Set_Screen+0x884>)
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	4906      	ldr	r1, [pc, #24]	; (800302c <Set_Screen+0x878>)
 8003012:	6889      	ldr	r1, [r1, #8]
 8003014:	9102      	str	r1, [sp, #8]
 8003016:	9201      	str	r2, [sp, #4]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	2378      	movs	r3, #120	; 0x78
 800301c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003020:	2108      	movs	r1, #8
 8003022:	480d      	ldr	r0, [pc, #52]	; (8003058 <Set_Screen+0x8a4>)
 8003024:	f004 fb10 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8003028:	e02a      	b.n	8003080 <Set_Screen+0x8cc>
 800302a:	bf00      	nop
 800302c:	20000980 	.word	0x20000980
 8003030:	0800e380 	.word	0x0800e380
 8003034:	20000000 	.word	0x20000000
 8003038:	200009f4 	.word	0x200009f4
 800303c:	20000aa8 	.word	0x20000aa8
 8003040:	20000004 	.word	0x20000004
 8003044:	0800e394 	.word	0x0800e394
 8003048:	20000b70 	.word	0x20000b70
 800304c:	20000008 	.word	0x20000008
 8003050:	080117b0 	.word	0x080117b0
 8003054:	0800e3a8 	.word	0x0800e3a8
 8003058:	0800e3d4 	.word	0x0800e3d4
 800305c:	0800e3e4 	.word	0x0800e3e4
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 120,        RedColor, BasicSymbolColor, Page[2]);
 8003060:	4ba2      	ldr	r3, [pc, #648]	; (80032ec <Set_Screen+0xb38>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4aa2      	ldr	r2, [pc, #648]	; (80032f0 <Set_Screen+0xb3c>)
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	49a2      	ldr	r1, [pc, #648]	; (80032f4 <Set_Screen+0xb40>)
 800306a:	6889      	ldr	r1, [r1, #8]
 800306c:	9102      	str	r1, [sp, #8]
 800306e:	9201      	str	r2, [sp, #4]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	2378      	movs	r3, #120	; 0x78
 8003074:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003078:	2108      	movs	r1, #8
 800307a:	489f      	ldr	r0, [pc, #636]	; (80032f8 <Set_Screen+0xb44>)
 800307c:	f004 fae4 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.State)
 8003080:	4b9e      	ldr	r3, [pc, #632]	; (80032fc <Set_Screen+0xb48>)
 8003082:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00f      	beq.n	80030aa <Set_Screen+0x8f6>
			{
				Short_Left_Colored_RU_DrawString_32("Насос закач.концентр.", 				21,  10, 150,      GreenColor, BasicSymbolColor, Page[2]);
 800308a:	4b9d      	ldr	r3, [pc, #628]	; (8003300 <Set_Screen+0xb4c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a98      	ldr	r2, [pc, #608]	; (80032f0 <Set_Screen+0xb3c>)
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	4998      	ldr	r1, [pc, #608]	; (80032f4 <Set_Screen+0xb40>)
 8003094:	6889      	ldr	r1, [r1, #8]
 8003096:	9102      	str	r1, [sp, #8]
 8003098:	9201      	str	r2, [sp, #4]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2396      	movs	r3, #150	; 0x96
 800309e:	220a      	movs	r2, #10
 80030a0:	2115      	movs	r1, #21
 80030a2:	4898      	ldr	r0, [pc, #608]	; (8003304 <Set_Screen+0xb50>)
 80030a4:	f004 fad0 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 80030a8:	e00e      	b.n	80030c8 <Set_Screen+0x914>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Насос закач.концентр.", 				21,  10, 150,        RedColor, BasicSymbolColor, Page[2]);
 80030aa:	4b90      	ldr	r3, [pc, #576]	; (80032ec <Set_Screen+0xb38>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a90      	ldr	r2, [pc, #576]	; (80032f0 <Set_Screen+0xb3c>)
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	4990      	ldr	r1, [pc, #576]	; (80032f4 <Set_Screen+0xb40>)
 80030b4:	6889      	ldr	r1, [r1, #8]
 80030b6:	9102      	str	r1, [sp, #8]
 80030b8:	9201      	str	r2, [sp, #4]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2396      	movs	r3, #150	; 0x96
 80030be:	220a      	movs	r2, #10
 80030c0:	2115      	movs	r1, #21
 80030c2:	4890      	ldr	r0, [pc, #576]	; (8003304 <Set_Screen+0xb50>)
 80030c4:	f004 fac0 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.Bimetal)
 80030c8:	4b8c      	ldr	r3, [pc, #560]	; (80032fc <Set_Screen+0xb48>)
 80030ca:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <Set_Screen+0x940>
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 150,      GreenColor, BasicSymbolColor, Page[2]);
 80030d2:	4b8b      	ldr	r3, [pc, #556]	; (8003300 <Set_Screen+0xb4c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a86      	ldr	r2, [pc, #536]	; (80032f0 <Set_Screen+0xb3c>)
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	4986      	ldr	r1, [pc, #536]	; (80032f4 <Set_Screen+0xb40>)
 80030dc:	6889      	ldr	r1, [r1, #8]
 80030de:	9102      	str	r1, [sp, #8]
 80030e0:	9201      	str	r2, [sp, #4]
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2396      	movs	r3, #150	; 0x96
 80030e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80030ea:	2108      	movs	r1, #8
 80030ec:	4882      	ldr	r0, [pc, #520]	; (80032f8 <Set_Screen+0xb44>)
 80030ee:	f004 faab 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 80030f2:	e00f      	b.n	8003114 <Set_Screen+0x960>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("тепл.защ", 							 8, 400, 150,        RedColor, BasicSymbolColor, Page[2]);
 80030f4:	4b7d      	ldr	r3, [pc, #500]	; (80032ec <Set_Screen+0xb38>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a7d      	ldr	r2, [pc, #500]	; (80032f0 <Set_Screen+0xb3c>)
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	497d      	ldr	r1, [pc, #500]	; (80032f4 <Set_Screen+0xb40>)
 80030fe:	6889      	ldr	r1, [r1, #8]
 8003100:	9102      	str	r1, [sp, #8]
 8003102:	9201      	str	r2, [sp, #4]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2396      	movs	r3, #150	; 0x96
 8003108:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800310c:	2108      	movs	r1, #8
 800310e:	487a      	ldr	r0, [pc, #488]	; (80032f8 <Set_Screen+0xb44>)
 8003110:	f004 fa9a 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Flow,   	 1,  6, 0, 470, 184, Page[2]);
 8003114:	4b79      	ldr	r3, [pc, #484]	; (80032fc <Set_Screen+0xb48>)
 8003116:	f9b3 0088 	ldrsh.w	r0, [r3, #136]	; 0x88
 800311a:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <Set_Screen+0xb40>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	9302      	str	r3, [sp, #8]
 8003120:	23b8      	movs	r3, #184	; 0xb8
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	2206      	movs	r2, #6
 800312e:	2101      	movs	r1, #1
 8003130:	f005 faaa 	bl	8008688 <Short_Centred_DrawNumber_16>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Volume, 	 0, 10, 0, 650, 184, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003134:	4b71      	ldr	r3, [pc, #452]	; (80032fc <Set_Screen+0xb48>)
 8003136:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 800313a:	4b6e      	ldr	r3, [pc, #440]	; (80032f4 <Set_Screen+0xb40>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	4a72      	ldr	r2, [pc, #456]	; (8003308 <Set_Screen+0xb54>)
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	496b      	ldr	r1, [pc, #428]	; (80032f0 <Set_Screen+0xb3c>)
 8003144:	6809      	ldr	r1, [r1, #0]
 8003146:	2412      	movs	r4, #18
 8003148:	9409      	str	r4, [sp, #36]	; 0x24
 800314a:	240b      	movs	r4, #11
 800314c:	9408      	str	r4, [sp, #32]
 800314e:	4c6f      	ldr	r4, [pc, #444]	; (800330c <Set_Screen+0xb58>)
 8003150:	9407      	str	r4, [sp, #28]
 8003152:	9106      	str	r1, [sp, #24]
 8003154:	9205      	str	r2, [sp, #20]
 8003156:	9304      	str	r3, [sp, #16]
 8003158:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800315c:	9303      	str	r3, [sp, #12]
 800315e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003162:	9302      	str	r3, [sp, #8]
 8003164:	23b8      	movs	r3, #184	; 0xb8
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	f240 238a 	movw	r3, #650	; 0x28a
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2300      	movs	r3, #0
 8003170:	220a      	movs	r2, #10
 8003172:	2100      	movs	r1, #0
 8003174:	f004 fdd6 	bl	8007d24 <Centred_DrawNumber_16_32bit>

			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Flow, 		 1, 6, 0,  470, 364, Page[2]);
 8003178:	4b60      	ldr	r3, [pc, #384]	; (80032fc <Set_Screen+0xb48>)
 800317a:	f9b3 0080 	ldrsh.w	r0, [r3, #128]	; 0x80
 800317e:	4b5d      	ldr	r3, [pc, #372]	; (80032f4 <Set_Screen+0xb40>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	9302      	str	r3, [sp, #8]
 8003184:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2300      	movs	r3, #0
 8003192:	2206      	movs	r2, #6
 8003194:	2101      	movs	r1, #1
 8003196:	f005 fa77 	bl	8008688 <Short_Centred_DrawNumber_16>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Volume, 		 0, 10, 0, 650, 364, 800,480,Page[2],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800319a:	4b58      	ldr	r3, [pc, #352]	; (80032fc <Set_Screen+0xb48>)
 800319c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80031a0:	4b54      	ldr	r3, [pc, #336]	; (80032f4 <Set_Screen+0xb40>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a58      	ldr	r2, [pc, #352]	; (8003308 <Set_Screen+0xb54>)
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	4951      	ldr	r1, [pc, #324]	; (80032f0 <Set_Screen+0xb3c>)
 80031aa:	6809      	ldr	r1, [r1, #0]
 80031ac:	2412      	movs	r4, #18
 80031ae:	9409      	str	r4, [sp, #36]	; 0x24
 80031b0:	240b      	movs	r4, #11
 80031b2:	9408      	str	r4, [sp, #32]
 80031b4:	4c55      	ldr	r4, [pc, #340]	; (800330c <Set_Screen+0xb58>)
 80031b6:	9407      	str	r4, [sp, #28]
 80031b8:	9106      	str	r1, [sp, #24]
 80031ba:	9205      	str	r2, [sp, #20]
 80031bc:	9304      	str	r3, [sp, #16]
 80031be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80031c2:	9303      	str	r3, [sp, #12]
 80031c4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80031c8:	9302      	str	r3, [sp, #8]
 80031ca:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	f240 238a 	movw	r3, #650	; 0x28a
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2300      	movs	r3, #0
 80031d8:	220a      	movs	r2, #10
 80031da:	2100      	movs	r1, #0
 80031dc:	f004 fda2 	bl	8007d24 <Centred_DrawNumber_16_32bit>

			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Pressure_before_water_filters, 1, 6, 0,  673, 304, Page[2]);
 80031e0:	4b46      	ldr	r3, [pc, #280]	; (80032fc <Set_Screen+0xb48>)
 80031e2:	f9b3 0090 	ldrsh.w	r0, [r3, #144]	; 0x90
 80031e6:	4b43      	ldr	r3, [pc, #268]	; (80032f4 <Set_Screen+0xb40>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	9302      	str	r3, [sp, #8]
 80031ec:	f44f 7398 	mov.w	r3, #304	; 0x130
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	f240 23a1 	movw	r3, #673	; 0x2a1
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2300      	movs	r3, #0
 80031fa:	2206      	movs	r2, #6
 80031fc:	2101      	movs	r1, #1
 80031fe:	f005 fa43 	bl	8008688 <Short_Centred_DrawNumber_16>
			Short_Centred_DrawNumber_16(BUV_RT_VALS.EMULSION_NODE.Pressure_behind_water_filters, 1, 6, 0,  673, 334, Page[2]);
 8003202:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <Set_Screen+0xb48>)
 8003204:	f9b3 0092 	ldrsh.w	r0, [r3, #146]	; 0x92
 8003208:	4b3a      	ldr	r3, [pc, #232]	; (80032f4 <Set_Screen+0xb40>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	9302      	str	r3, [sp, #8]
 800320e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	f240 23a1 	movw	r3, #673	; 0x2a1
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2300      	movs	r3, #0
 800321c:	2206      	movs	r2, #6
 800321e:	2101      	movs	r1, #1
 8003220:	f005 fa32 	bl	8008688 <Short_Centred_DrawNumber_16>

			if(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_1)
 8003224:	4b35      	ldr	r3, [pc, #212]	; (80032fc <Set_Screen+0xb48>)
 8003226:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <Set_Screen+0xa9c>
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.1", 8,  20, 400,      GreenColor, BasicSymbolColor, Page[2]);
 800322e:	4b34      	ldr	r3, [pc, #208]	; (8003300 <Set_Screen+0xb4c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <Set_Screen+0xb3c>)
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	492f      	ldr	r1, [pc, #188]	; (80032f4 <Set_Screen+0xb40>)
 8003238:	6889      	ldr	r1, [r1, #8]
 800323a:	9102      	str	r1, [sp, #8]
 800323c:	9201      	str	r2, [sp, #4]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003244:	2214      	movs	r2, #20
 8003246:	2108      	movs	r1, #8
 8003248:	4831      	ldr	r0, [pc, #196]	; (8003310 <Set_Screen+0xb5c>)
 800324a:	f004 f9fd 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 800324e:	e00f      	b.n	8003270 <Set_Screen+0xabc>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.1", 8,  20, 400,        RedColor, BasicSymbolColor, Page[2]);
 8003250:	4b26      	ldr	r3, [pc, #152]	; (80032ec <Set_Screen+0xb38>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <Set_Screen+0xb3c>)
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	4926      	ldr	r1, [pc, #152]	; (80032f4 <Set_Screen+0xb40>)
 800325a:	6889      	ldr	r1, [r1, #8]
 800325c:	9102      	str	r1, [sp, #8]
 800325e:	9201      	str	r2, [sp, #4]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003266:	2214      	movs	r2, #20
 8003268:	2108      	movs	r1, #8
 800326a:	4829      	ldr	r0, [pc, #164]	; (8003310 <Set_Screen+0xb5c>)
 800326c:	f004 f9ec 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}
			if(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_2)
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <Set_Screen+0xb48>)
 8003272:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8003276:	2b00      	cmp	r3, #0
 8003278:	d010      	beq.n	800329c <Set_Screen+0xae8>
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.2", 8, 170, 400,      GreenColor, BasicSymbolColor, Page[2]);
 800327a:	4b21      	ldr	r3, [pc, #132]	; (8003300 <Set_Screen+0xb4c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <Set_Screen+0xb3c>)
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	491c      	ldr	r1, [pc, #112]	; (80032f4 <Set_Screen+0xb40>)
 8003284:	6889      	ldr	r1, [r1, #8]
 8003286:	9102      	str	r1, [sp, #8]
 8003288:	9201      	str	r2, [sp, #4]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003290:	22aa      	movs	r2, #170	; 0xaa
 8003292:	2108      	movs	r1, #8
 8003294:	481f      	ldr	r0, [pc, #124]	; (8003314 <Set_Screen+0xb60>)
 8003296:	f004 f9d7 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 800329a:	e00f      	b.n	80032bc <Set_Screen+0xb08>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.2", 8, 170, 400,        RedColor, BasicSymbolColor, Page[2]);
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <Set_Screen+0xb38>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <Set_Screen+0xb3c>)
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	4913      	ldr	r1, [pc, #76]	; (80032f4 <Set_Screen+0xb40>)
 80032a6:	6889      	ldr	r1, [r1, #8]
 80032a8:	9102      	str	r1, [sp, #8]
 80032aa:	9201      	str	r2, [sp, #4]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80032b2:	22aa      	movs	r2, #170	; 0xaa
 80032b4:	2108      	movs	r1, #8
 80032b6:	4817      	ldr	r0, [pc, #92]	; (8003314 <Set_Screen+0xb60>)
 80032b8:	f004 f9c6 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}
			if(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_3)
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <Set_Screen+0xb48>)
 80032be:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d02a      	beq.n	800331c <Set_Screen+0xb68>
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.3", 8, 320, 400,      GreenColor, BasicSymbolColor, Page[2]);
 80032c6:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <Set_Screen+0xb4c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <Set_Screen+0xb3c>)
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	4909      	ldr	r1, [pc, #36]	; (80032f4 <Set_Screen+0xb40>)
 80032d0:	6889      	ldr	r1, [r1, #8]
 80032d2:	9102      	str	r1, [sp, #8]
 80032d4:	9201      	str	r2, [sp, #4]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80032dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032e0:	2108      	movs	r1, #8
 80032e2:	480d      	ldr	r0, [pc, #52]	; (8003318 <Set_Screen+0xb64>)
 80032e4:	f004 f9b0 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 80032e8:	e029      	b.n	800333e <Set_Screen+0xb8a>
 80032ea:	bf00      	nop
 80032ec:	20000000 	.word	0x20000000
 80032f0:	200009f4 	.word	0x200009f4
 80032f4:	20000980 	.word	0x20000980
 80032f8:	0800e3d4 	.word	0x0800e3d4
 80032fc:	20000aa8 	.word	0x20000aa8
 8003300:	20000004 	.word	0x20000004
 8003304:	0800e40c 	.word	0x0800e40c
 8003308:	20000008 	.word	0x20000008
 800330c:	080117b0 	.word	0x080117b0
 8003310:	0800e434 	.word	0x0800e434
 8003314:	0800e444 	.word	0x0800e444
 8003318:	0800e454 	.word	0x0800e454
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.фил.3", 8, 320, 400,        RedColor, BasicSymbolColor, Page[2]);
 800331c:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <Set_Screen+0xc64>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a3e      	ldr	r2, [pc, #248]	; (800341c <Set_Screen+0xc68>)
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	493e      	ldr	r1, [pc, #248]	; (8003420 <Set_Screen+0xc6c>)
 8003326:	6889      	ldr	r1, [r1, #8]
 8003328:	9102      	str	r1, [sp, #8]
 800332a:	9201      	str	r2, [sp, #4]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003332:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003336:	2108      	movs	r1, #8
 8003338:	483a      	ldr	r0, [pc, #232]	; (8003424 <Set_Screen+0xc70>)
 800333a:	f004 f985 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Water_valve)
 800333e:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <Set_Screen+0xc74>)
 8003340:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d011      	beq.n	800336c <Set_Screen+0xbb8>
			{
				Short_Left_Colored_RU_DrawString_32("кл.воды ", 8, 470, 400,      GreenColor, BasicSymbolColor, Page[2]);
 8003348:	4b38      	ldr	r3, [pc, #224]	; (800342c <Set_Screen+0xc78>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a33      	ldr	r2, [pc, #204]	; (800341c <Set_Screen+0xc68>)
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	4933      	ldr	r1, [pc, #204]	; (8003420 <Set_Screen+0xc6c>)
 8003352:	6889      	ldr	r1, [r1, #8]
 8003354:	9102      	str	r1, [sp, #8]
 8003356:	9201      	str	r2, [sp, #4]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800335e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003362:	2108      	movs	r1, #8
 8003364:	4832      	ldr	r0, [pc, #200]	; (8003430 <Set_Screen+0xc7c>)
 8003366:	f004 f96f 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 800336a:	e010      	b.n	800338e <Set_Screen+0xbda>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.воды ", 8, 470, 400,        RedColor, BasicSymbolColor, Page[2]);
 800336c:	4b2a      	ldr	r3, [pc, #168]	; (8003418 <Set_Screen+0xc64>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2a      	ldr	r2, [pc, #168]	; (800341c <Set_Screen+0xc68>)
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	492a      	ldr	r1, [pc, #168]	; (8003420 <Set_Screen+0xc6c>)
 8003376:	6889      	ldr	r1, [r1, #8]
 8003378:	9102      	str	r1, [sp, #8]
 800337a:	9201      	str	r2, [sp, #4]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003382:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003386:	2108      	movs	r1, #8
 8003388:	4829      	ldr	r0, [pc, #164]	; (8003430 <Set_Screen+0xc7c>)
 800338a:	f004 f95d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			if(BUV_RT_VALS.EMULSION_NODE.Concentrate_valve)
 800338e:	4b26      	ldr	r3, [pc, #152]	; (8003428 <Set_Screen+0xc74>)
 8003390:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003394:	2b00      	cmp	r3, #0
 8003396:	d011      	beq.n	80033bc <Set_Screen+0xc08>
			{
				Short_Left_Colored_RU_DrawString_32("кл.конц ", 8, 620, 400,      GreenColor, BasicSymbolColor, Page[2]);
 8003398:	4b24      	ldr	r3, [pc, #144]	; (800342c <Set_Screen+0xc78>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1f      	ldr	r2, [pc, #124]	; (800341c <Set_Screen+0xc68>)
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	491f      	ldr	r1, [pc, #124]	; (8003420 <Set_Screen+0xc6c>)
 80033a2:	6889      	ldr	r1, [r1, #8]
 80033a4:	9102      	str	r1, [sp, #8]
 80033a6:	9201      	str	r2, [sp, #4]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80033ae:	f44f 721b 	mov.w	r2, #620	; 0x26c
 80033b2:	2108      	movs	r1, #8
 80033b4:	481f      	ldr	r0, [pc, #124]	; (8003434 <Set_Screen+0xc80>)
 80033b6:	f004 f947 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 80033ba:	e010      	b.n	80033de <Set_Screen+0xc2a>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("кл.конц ", 8, 620, 400,        RedColor, BasicSymbolColor, Page[2]);
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <Set_Screen+0xc64>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a16      	ldr	r2, [pc, #88]	; (800341c <Set_Screen+0xc68>)
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	4916      	ldr	r1, [pc, #88]	; (8003420 <Set_Screen+0xc6c>)
 80033c6:	6889      	ldr	r1, [r1, #8]
 80033c8:	9102      	str	r1, [sp, #8]
 80033ca:	9201      	str	r2, [sp, #4]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80033d2:	f44f 721b 	mov.w	r2, #620	; 0x26c
 80033d6:	2108      	movs	r1, #8
 80033d8:	4816      	ldr	r0, [pc, #88]	; (8003434 <Set_Screen+0xc80>)
 80033da:	f004 f935 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			Control_DB.RazrPointer 		= 0;
 80033de:	4b16      	ldr	r3, [pc, #88]	; (8003438 <Set_Screen+0xc84>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	805a      	strh	r2, [r3, #2]

		break;
 80033e4:	f001 bfdf 	b.w	80053a6 <Set_Screen+0x2bf2>

		case 3: // Окно данные

			if(!PassW_block.DataClearingUnlock)
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <Set_Screen+0xc88>)
 80033ea:	7c1b      	ldrb	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d12b      	bne.n	8003448 <Set_Screen+0xc94>
			{
				Control_DB.MenuPointerMAX 	= 0;
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <Set_Screen+0xc84>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	809a      	strh	r2, [r3, #4]
				Short_Left_Colored_RU_DrawString_32("ввод пароля для возм.обнуления:", 	31,	10,  50, FonColor[0], BasicSymbolColor, Page[3]);
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <Set_Screen+0xc8c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a08      	ldr	r2, [pc, #32]	; (800341c <Set_Screen+0xc68>)
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	4908      	ldr	r1, [pc, #32]	; (8003420 <Set_Screen+0xc6c>)
 8003400:	68c9      	ldr	r1, [r1, #12]
 8003402:	9102      	str	r1, [sp, #8]
 8003404:	9201      	str	r2, [sp, #4]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	2332      	movs	r3, #50	; 0x32
 800340a:	220a      	movs	r2, #10
 800340c:	211f      	movs	r1, #31
 800340e:	480d      	ldr	r0, [pc, #52]	; (8003444 <Set_Screen+0xc90>)
 8003410:	f004 f91a 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8003414:	e02a      	b.n	800346c <Set_Screen+0xcb8>
 8003416:	bf00      	nop
 8003418:	20000000 	.word	0x20000000
 800341c:	200009f4 	.word	0x200009f4
 8003420:	20000980 	.word	0x20000980
 8003424:	0800e454 	.word	0x0800e454
 8003428:	20000aa8 	.word	0x20000aa8
 800342c:	20000004 	.word	0x20000004
 8003430:	0800e464 	.word	0x0800e464
 8003434:	0800e474 	.word	0x0800e474
 8003438:	20000b70 	.word	0x20000b70
 800343c:	200009fc 	.word	0x200009fc
 8003440:	200000a4 	.word	0x200000a4
 8003444:	0800e484 	.word	0x0800e484
			}
			else
			{
				Control_DB.MenuPointerMAX 	= 19;
 8003448:	4b9e      	ldr	r3, [pc, #632]	; (80036c4 <Set_Screen+0xf10>)
 800344a:	2213      	movs	r2, #19
 800344c:	809a      	strh	r2, [r3, #4]
				Short_Left_Colored_RU_DrawString_32("пароль подтвержден             ", 	31,	10,  50, FonColor[0], BasicSymbolColor, Page[3]);
 800344e:	4b9e      	ldr	r3, [pc, #632]	; (80036c8 <Set_Screen+0xf14>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a9e      	ldr	r2, [pc, #632]	; (80036cc <Set_Screen+0xf18>)
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	499e      	ldr	r1, [pc, #632]	; (80036d0 <Set_Screen+0xf1c>)
 8003458:	68c9      	ldr	r1, [r1, #12]
 800345a:	9102      	str	r1, [sp, #8]
 800345c:	9201      	str	r2, [sp, #4]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	2332      	movs	r3, #50	; 0x32
 8003462:	220a      	movs	r2, #10
 8003464:	211f      	movs	r1, #31
 8003466:	489b      	ldr	r0, [pc, #620]	; (80036d4 <Set_Screen+0xf20>)
 8003468:	f004 f8ee 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}
			Short_Left_Colored_RU_DrawString_32("МтЧс Агр.насосного 1", 	20,	10,  80, FonColor[1], BasicSymbolColor, Page[3]);
 800346c:	4b96      	ldr	r3, [pc, #600]	; (80036c8 <Set_Screen+0xf14>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4a96      	ldr	r2, [pc, #600]	; (80036cc <Set_Screen+0xf18>)
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	4996      	ldr	r1, [pc, #600]	; (80036d0 <Set_Screen+0xf1c>)
 8003476:	68c9      	ldr	r1, [r1, #12]
 8003478:	9102      	str	r1, [sp, #8]
 800347a:	9201      	str	r2, [sp, #4]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2350      	movs	r3, #80	; 0x50
 8003480:	220a      	movs	r2, #10
 8003482:	2114      	movs	r1, #20
 8003484:	4894      	ldr	r0, [pc, #592]	; (80036d8 <Set_Screen+0xf24>)
 8003486:	f004 f8df 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс Агр.насосного 2", 	20,	10, 110, FonColor[2], BasicSymbolColor, Page[3]);
 800348a:	4b8f      	ldr	r3, [pc, #572]	; (80036c8 <Set_Screen+0xf14>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4a8f      	ldr	r2, [pc, #572]	; (80036cc <Set_Screen+0xf18>)
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	498f      	ldr	r1, [pc, #572]	; (80036d0 <Set_Screen+0xf1c>)
 8003494:	68c9      	ldr	r1, [r1, #12]
 8003496:	9102      	str	r1, [sp, #8]
 8003498:	9201      	str	r2, [sp, #4]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	236e      	movs	r3, #110	; 0x6e
 800349e:	220a      	movs	r2, #10
 80034a0:	2114      	movs	r1, #20
 80034a2:	488e      	ldr	r0, [pc, #568]	; (80036dc <Set_Screen+0xf28>)
 80034a4:	f004 f8d0 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс Агр.насосного 3", 	20,	10, 140, FonColor[3], BasicSymbolColor, Page[3]);
 80034a8:	4b87      	ldr	r3, [pc, #540]	; (80036c8 <Set_Screen+0xf14>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a87      	ldr	r2, [pc, #540]	; (80036cc <Set_Screen+0xf18>)
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	4987      	ldr	r1, [pc, #540]	; (80036d0 <Set_Screen+0xf1c>)
 80034b2:	68c9      	ldr	r1, [r1, #12]
 80034b4:	9102      	str	r1, [sp, #8]
 80034b6:	9201      	str	r2, [sp, #4]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	238c      	movs	r3, #140	; 0x8c
 80034bc:	220a      	movs	r2, #10
 80034be:	2114      	movs	r1, #20
 80034c0:	4887      	ldr	r0, [pc, #540]	; (80036e0 <Set_Screen+0xf2c>)
 80034c2:	f004 f8c1 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс циркуляц насоса", 	20,	10, 170, FonColor[4], BasicSymbolColor, Page[3]);
 80034c6:	4b80      	ldr	r3, [pc, #512]	; (80036c8 <Set_Screen+0xf14>)
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	4a80      	ldr	r2, [pc, #512]	; (80036cc <Set_Screen+0xf18>)
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4980      	ldr	r1, [pc, #512]	; (80036d0 <Set_Screen+0xf1c>)
 80034d0:	68c9      	ldr	r1, [r1, #12]
 80034d2:	9102      	str	r1, [sp, #8]
 80034d4:	9201      	str	r2, [sp, #4]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	23aa      	movs	r3, #170	; 0xaa
 80034da:	220a      	movs	r2, #10
 80034dc:	2114      	movs	r1, #20
 80034de:	4881      	ldr	r0, [pc, #516]	; (80036e4 <Set_Screen+0xf30>)
 80034e0:	f004 f8b2 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс насоса концентр", 	20,	10, 200, FonColor[5], BasicSymbolColor, Page[3]);
 80034e4:	4b78      	ldr	r3, [pc, #480]	; (80036c8 <Set_Screen+0xf14>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	4a78      	ldr	r2, [pc, #480]	; (80036cc <Set_Screen+0xf18>)
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	4978      	ldr	r1, [pc, #480]	; (80036d0 <Set_Screen+0xf1c>)
 80034ee:	68c9      	ldr	r1, [r1, #12]
 80034f0:	9102      	str	r1, [sp, #8]
 80034f2:	9201      	str	r2, [sp, #4]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	23c8      	movs	r3, #200	; 0xc8
 80034f8:	220a      	movs	r2, #10
 80034fa:	2114      	movs	r1, #20
 80034fc:	487a      	ldr	r0, [pc, #488]	; (80036e8 <Set_Screen+0xf34>)
 80034fe:	f004 f8a3 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МтЧс нас.закач.конц ", 	20,	10, 230, FonColor[6], BasicSymbolColor, Page[3]);
 8003502:	4b71      	ldr	r3, [pc, #452]	; (80036c8 <Set_Screen+0xf14>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	4a71      	ldr	r2, [pc, #452]	; (80036cc <Set_Screen+0xf18>)
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	4971      	ldr	r1, [pc, #452]	; (80036d0 <Set_Screen+0xf1c>)
 800350c:	68c9      	ldr	r1, [r1, #12]
 800350e:	9102      	str	r1, [sp, #8]
 8003510:	9201      	str	r2, [sp, #4]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	23e6      	movs	r3, #230	; 0xe6
 8003516:	220a      	movs	r2, #10
 8003518:	2114      	movs	r1, #20
 800351a:	4874      	ldr	r0, [pc, #464]	; (80036ec <Set_Screen+0xf38>)
 800351c:	f004 f894 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit_controled(&PassW_block.PassWord, 0,  4, Control_DB.RazrPointer, 9999, 0, 620,  50, 800,480, Page[3], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003520:	4b68      	ldr	r3, [pc, #416]	; (80036c4 <Set_Screen+0xf10>)
 8003522:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003526:	461c      	mov	r4, r3
 8003528:	4b69      	ldr	r3, [pc, #420]	; (80036d0 <Set_Screen+0xf1c>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a66      	ldr	r2, [pc, #408]	; (80036c8 <Set_Screen+0xf14>)
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	4966      	ldr	r1, [pc, #408]	; (80036cc <Set_Screen+0xf18>)
 8003532:	6809      	ldr	r1, [r1, #0]
 8003534:	2012      	movs	r0, #18
 8003536:	900b      	str	r0, [sp, #44]	; 0x2c
 8003538:	200b      	movs	r0, #11
 800353a:	900a      	str	r0, [sp, #40]	; 0x28
 800353c:	486c      	ldr	r0, [pc, #432]	; (80036f0 <Set_Screen+0xf3c>)
 800353e:	9009      	str	r0, [sp, #36]	; 0x24
 8003540:	9108      	str	r1, [sp, #32]
 8003542:	9207      	str	r2, [sp, #28]
 8003544:	9306      	str	r3, [sp, #24]
 8003546:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800354a:	9305      	str	r3, [sp, #20]
 800354c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003550:	9304      	str	r3, [sp, #16]
 8003552:	2332      	movs	r3, #50	; 0x32
 8003554:	9303      	str	r3, [sp, #12]
 8003556:	f44f 731b 	mov.w	r3, #620	; 0x26c
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	2300      	movs	r3, #0
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	f242 730f 	movw	r3, #9999	; 0x270f
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	4623      	mov	r3, r4
 8003568:	2204      	movs	r2, #4
 800356a:	2100      	movs	r1, #0
 800356c:	4861      	ldr	r0, [pc, #388]	; (80036f4 <Set_Screen+0xf40>)
 800356e:	f004 fe09 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_1.Pump.MotoClock, 								0, 10, 0,  440,  83, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003572:	4b61      	ldr	r3, [pc, #388]	; (80036f8 <Set_Screen+0xf44>)
 8003574:	68d8      	ldr	r0, [r3, #12]
 8003576:	4b56      	ldr	r3, [pc, #344]	; (80036d0 <Set_Screen+0xf1c>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4a60      	ldr	r2, [pc, #384]	; (80036fc <Set_Screen+0xf48>)
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	4953      	ldr	r1, [pc, #332]	; (80036cc <Set_Screen+0xf18>)
 8003580:	6809      	ldr	r1, [r1, #0]
 8003582:	2412      	movs	r4, #18
 8003584:	9409      	str	r4, [sp, #36]	; 0x24
 8003586:	240b      	movs	r4, #11
 8003588:	9408      	str	r4, [sp, #32]
 800358a:	4c59      	ldr	r4, [pc, #356]	; (80036f0 <Set_Screen+0xf3c>)
 800358c:	9407      	str	r4, [sp, #28]
 800358e:	9106      	str	r1, [sp, #24]
 8003590:	9205      	str	r2, [sp, #20]
 8003592:	9304      	str	r3, [sp, #16]
 8003594:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003598:	9303      	str	r3, [sp, #12]
 800359a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800359e:	9302      	str	r3, [sp, #8]
 80035a0:	2353      	movs	r3, #83	; 0x53
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2300      	movs	r3, #0
 80035ac:	220a      	movs	r2, #10
 80035ae:	2100      	movs	r1, #0
 80035b0:	f004 fbb8 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_2.Pump.MotoClock, 								0, 10, 0,  440, 113, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80035b4:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <Set_Screen+0xf44>)
 80035b6:	6a18      	ldr	r0, [r3, #32]
 80035b8:	4b45      	ldr	r3, [pc, #276]	; (80036d0 <Set_Screen+0xf1c>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4a4f      	ldr	r2, [pc, #316]	; (80036fc <Set_Screen+0xf48>)
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	4942      	ldr	r1, [pc, #264]	; (80036cc <Set_Screen+0xf18>)
 80035c2:	6809      	ldr	r1, [r1, #0]
 80035c4:	2412      	movs	r4, #18
 80035c6:	9409      	str	r4, [sp, #36]	; 0x24
 80035c8:	240b      	movs	r4, #11
 80035ca:	9408      	str	r4, [sp, #32]
 80035cc:	4c48      	ldr	r4, [pc, #288]	; (80036f0 <Set_Screen+0xf3c>)
 80035ce:	9407      	str	r4, [sp, #28]
 80035d0:	9106      	str	r1, [sp, #24]
 80035d2:	9205      	str	r2, [sp, #20]
 80035d4:	9304      	str	r3, [sp, #16]
 80035d6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80035da:	9303      	str	r3, [sp, #12]
 80035dc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80035e0:	9302      	str	r3, [sp, #8]
 80035e2:	2371      	movs	r3, #113	; 0x71
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2300      	movs	r3, #0
 80035ee:	220a      	movs	r2, #10
 80035f0:	2100      	movs	r1, #0
 80035f2:	f004 fb97 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_3.Pump.MotoClock, 								0, 10, 0,  440, 143, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80035f6:	4b40      	ldr	r3, [pc, #256]	; (80036f8 <Set_Screen+0xf44>)
 80035f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80035fa:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <Set_Screen+0xf1c>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4a3f      	ldr	r2, [pc, #252]	; (80036fc <Set_Screen+0xf48>)
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	4932      	ldr	r1, [pc, #200]	; (80036cc <Set_Screen+0xf18>)
 8003604:	6809      	ldr	r1, [r1, #0]
 8003606:	2412      	movs	r4, #18
 8003608:	9409      	str	r4, [sp, #36]	; 0x24
 800360a:	240b      	movs	r4, #11
 800360c:	9408      	str	r4, [sp, #32]
 800360e:	4c38      	ldr	r4, [pc, #224]	; (80036f0 <Set_Screen+0xf3c>)
 8003610:	9407      	str	r4, [sp, #28]
 8003612:	9106      	str	r1, [sp, #24]
 8003614:	9205      	str	r2, [sp, #20]
 8003616:	9304      	str	r3, [sp, #16]
 8003618:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800361c:	9303      	str	r3, [sp, #12]
 800361e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003622:	9302      	str	r3, [sp, #8]
 8003624:	238f      	movs	r3, #143	; 0x8f
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	220a      	movs	r2, #10
 8003632:	2100      	movs	r1, #0
 8003634:	f004 fb76 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_circulation.MotoClock, 			0, 10, 0,  440, 173, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003638:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <Set_Screen+0xf44>)
 800363a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800363c:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <Set_Screen+0xf1c>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a2e      	ldr	r2, [pc, #184]	; (80036fc <Set_Screen+0xf48>)
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	4921      	ldr	r1, [pc, #132]	; (80036cc <Set_Screen+0xf18>)
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	2412      	movs	r4, #18
 800364a:	9409      	str	r4, [sp, #36]	; 0x24
 800364c:	240b      	movs	r4, #11
 800364e:	9408      	str	r4, [sp, #32]
 8003650:	4c27      	ldr	r4, [pc, #156]	; (80036f0 <Set_Screen+0xf3c>)
 8003652:	9407      	str	r4, [sp, #28]
 8003654:	9106      	str	r1, [sp, #24]
 8003656:	9205      	str	r2, [sp, #20]
 8003658:	9304      	str	r3, [sp, #16]
 800365a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800365e:	9303      	str	r3, [sp, #12]
 8003660:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003664:	9302      	str	r3, [sp, #8]
 8003666:	23ad      	movs	r3, #173	; 0xad
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2300      	movs	r3, #0
 8003672:	220a      	movs	r2, #10
 8003674:	2100      	movs	r1, #0
 8003676:	f004 fb55 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.MotoClock, 			0, 10, 0,  440, 203, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <Set_Screen+0xf44>)
 800367c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <Set_Screen+0xf1c>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <Set_Screen+0xf48>)
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	4911      	ldr	r1, [pc, #68]	; (80036cc <Set_Screen+0xf18>)
 8003688:	6809      	ldr	r1, [r1, #0]
 800368a:	2412      	movs	r4, #18
 800368c:	9409      	str	r4, [sp, #36]	; 0x24
 800368e:	240b      	movs	r4, #11
 8003690:	9408      	str	r4, [sp, #32]
 8003692:	4c17      	ldr	r4, [pc, #92]	; (80036f0 <Set_Screen+0xf3c>)
 8003694:	9407      	str	r4, [sp, #28]
 8003696:	9106      	str	r1, [sp, #24]
 8003698:	9205      	str	r2, [sp, #20]
 800369a:	9304      	str	r3, [sp, #16]
 800369c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80036a0:	9303      	str	r3, [sp, #12]
 80036a2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80036a6:	9302      	str	r3, [sp, #8]
 80036a8:	23cb      	movs	r3, #203	; 0xcb
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2300      	movs	r3, #0
 80036b4:	220a      	movs	r2, #10
 80036b6:	2100      	movs	r1, #0
 80036b8:	f004 fb34 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.MotoClock, 0, 10, 0,  440, 233, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80036bc:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <Set_Screen+0xf44>)
 80036be:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80036c0:	e01e      	b.n	8003700 <Set_Screen+0xf4c>
 80036c2:	bf00      	nop
 80036c4:	20000b70 	.word	0x20000b70
 80036c8:	200000a4 	.word	0x200000a4
 80036cc:	200009f4 	.word	0x200009f4
 80036d0:	20000980 	.word	0x20000980
 80036d4:	0800e4c0 	.word	0x0800e4c0
 80036d8:	0800e4f4 	.word	0x0800e4f4
 80036dc:	0800e51c 	.word	0x0800e51c
 80036e0:	0800e544 	.word	0x0800e544
 80036e4:	0800e56c 	.word	0x0800e56c
 80036e8:	0800e594 	.word	0x0800e594
 80036ec:	0800e5bc 	.word	0x0800e5bc
 80036f0:	080117b0 	.word	0x080117b0
 80036f4:	200009fc 	.word	0x200009fc
 80036f8:	20000aa8 	.word	0x20000aa8
 80036fc:	20000008 	.word	0x20000008
 8003700:	4b9f      	ldr	r3, [pc, #636]	; (8003980 <Set_Screen+0x11cc>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a9f      	ldr	r2, [pc, #636]	; (8003984 <Set_Screen+0x11d0>)
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	499f      	ldr	r1, [pc, #636]	; (8003988 <Set_Screen+0x11d4>)
 800370a:	6809      	ldr	r1, [r1, #0]
 800370c:	2412      	movs	r4, #18
 800370e:	9409      	str	r4, [sp, #36]	; 0x24
 8003710:	240b      	movs	r4, #11
 8003712:	9408      	str	r4, [sp, #32]
 8003714:	4c9d      	ldr	r4, [pc, #628]	; (800398c <Set_Screen+0x11d8>)
 8003716:	9407      	str	r4, [sp, #28]
 8003718:	9106      	str	r1, [sp, #24]
 800371a:	9205      	str	r2, [sp, #20]
 800371c:	9304      	str	r3, [sp, #16]
 800371e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003722:	9303      	str	r3, [sp, #12]
 8003724:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003728:	9302      	str	r3, [sp, #8]
 800372a:	23e9      	movs	r3, #233	; 0xe9
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	220a      	movs	r2, #10
 8003738:	2100      	movs	r1, #0
 800373a:	f004 faf3 	bl	8007d24 <Centred_DrawNumber_16_32bit>

			Short_Left_Colored_RU_DrawString_32("Ср-ки авт.разгр АНН1", 	20,	10, 260, FonColor[7], BasicSymbolColor, Page[3]);
 800373e:	4b94      	ldr	r3, [pc, #592]	; (8003990 <Set_Screen+0x11dc>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4a91      	ldr	r2, [pc, #580]	; (8003988 <Set_Screen+0x11d4>)
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	498e      	ldr	r1, [pc, #568]	; (8003980 <Set_Screen+0x11cc>)
 8003748:	68c9      	ldr	r1, [r1, #12]
 800374a:	9102      	str	r1, [sp, #8]
 800374c:	9201      	str	r2, [sp, #4]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003754:	220a      	movs	r2, #10
 8003756:	2114      	movs	r1, #20
 8003758:	488e      	ldr	r0, [pc, #568]	; (8003994 <Set_Screen+0x11e0>)
 800375a:	f003 ff75 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Ср-ки авт.разгр АНН2", 	20,	10, 290, FonColor[8], BasicSymbolColor, Page[3]);
 800375e:	4b8c      	ldr	r3, [pc, #560]	; (8003990 <Set_Screen+0x11dc>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4a89      	ldr	r2, [pc, #548]	; (8003988 <Set_Screen+0x11d4>)
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	4986      	ldr	r1, [pc, #536]	; (8003980 <Set_Screen+0x11cc>)
 8003768:	68c9      	ldr	r1, [r1, #12]
 800376a:	9102      	str	r1, [sp, #8]
 800376c:	9201      	str	r2, [sp, #4]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003774:	220a      	movs	r2, #10
 8003776:	2114      	movs	r1, #20
 8003778:	4887      	ldr	r0, [pc, #540]	; (8003998 <Set_Screen+0x11e4>)
 800377a:	f003 ff65 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Ср-ки авт.разгр АНН3", 	20,	10, 320, FonColor[9], BasicSymbolColor, Page[3]);
 800377e:	4b84      	ldr	r3, [pc, #528]	; (8003990 <Set_Screen+0x11dc>)
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	4a81      	ldr	r2, [pc, #516]	; (8003988 <Set_Screen+0x11d4>)
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	497e      	ldr	r1, [pc, #504]	; (8003980 <Set_Screen+0x11cc>)
 8003788:	68c9      	ldr	r1, [r1, #12]
 800378a:	9102      	str	r1, [sp, #8]
 800378c:	9201      	str	r2, [sp, #4]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003794:	220a      	movs	r2, #10
 8003796:	2114      	movs	r1, #20
 8003798:	4880      	ldr	r0, [pc, #512]	; (800399c <Set_Screen+0x11e8>)
 800379a:	f003 ff55 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_1.Unload_counter, 	 0, 10, 0,  440, 263, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800379e:	4b80      	ldr	r3, [pc, #512]	; (80039a0 <Set_Screen+0x11ec>)
 80037a0:	6998      	ldr	r0, [r3, #24]
 80037a2:	4b77      	ldr	r3, [pc, #476]	; (8003980 <Set_Screen+0x11cc>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	4a77      	ldr	r2, [pc, #476]	; (8003984 <Set_Screen+0x11d0>)
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	4977      	ldr	r1, [pc, #476]	; (8003988 <Set_Screen+0x11d4>)
 80037ac:	6809      	ldr	r1, [r1, #0]
 80037ae:	2412      	movs	r4, #18
 80037b0:	9409      	str	r4, [sp, #36]	; 0x24
 80037b2:	240b      	movs	r4, #11
 80037b4:	9408      	str	r4, [sp, #32]
 80037b6:	4c75      	ldr	r4, [pc, #468]	; (800398c <Set_Screen+0x11d8>)
 80037b8:	9407      	str	r4, [sp, #28]
 80037ba:	9106      	str	r1, [sp, #24]
 80037bc:	9205      	str	r2, [sp, #20]
 80037be:	9304      	str	r3, [sp, #16]
 80037c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80037c4:	9303      	str	r3, [sp, #12]
 80037c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80037ca:	9302      	str	r3, [sp, #8]
 80037cc:	f240 1307 	movw	r3, #263	; 0x107
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2300      	movs	r3, #0
 80037da:	220a      	movs	r2, #10
 80037dc:	2100      	movs	r1, #0
 80037de:	f004 faa1 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_2.Unload_counter, 	 0, 10, 0,  440, 293, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80037e2:	4b6f      	ldr	r3, [pc, #444]	; (80039a0 <Set_Screen+0x11ec>)
 80037e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80037e6:	4b66      	ldr	r3, [pc, #408]	; (8003980 <Set_Screen+0x11cc>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	4a66      	ldr	r2, [pc, #408]	; (8003984 <Set_Screen+0x11d0>)
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	4966      	ldr	r1, [pc, #408]	; (8003988 <Set_Screen+0x11d4>)
 80037f0:	6809      	ldr	r1, [r1, #0]
 80037f2:	2412      	movs	r4, #18
 80037f4:	9409      	str	r4, [sp, #36]	; 0x24
 80037f6:	240b      	movs	r4, #11
 80037f8:	9408      	str	r4, [sp, #32]
 80037fa:	4c64      	ldr	r4, [pc, #400]	; (800398c <Set_Screen+0x11d8>)
 80037fc:	9407      	str	r4, [sp, #28]
 80037fe:	9106      	str	r1, [sp, #24]
 8003800:	9205      	str	r2, [sp, #20]
 8003802:	9304      	str	r3, [sp, #16]
 8003804:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003808:	9303      	str	r3, [sp, #12]
 800380a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800380e:	9302      	str	r3, [sp, #8]
 8003810:	f240 1325 	movw	r3, #293	; 0x125
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	2300      	movs	r3, #0
 800381e:	220a      	movs	r2, #10
 8003820:	2100      	movs	r1, #0
 8003822:	f004 fa7f 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.ANN_3.Unload_counter, 	 0, 10, 0,  440, 323, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003826:	4b5e      	ldr	r3, [pc, #376]	; (80039a0 <Set_Screen+0x11ec>)
 8003828:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800382a:	4b55      	ldr	r3, [pc, #340]	; (8003980 <Set_Screen+0x11cc>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	4a55      	ldr	r2, [pc, #340]	; (8003984 <Set_Screen+0x11d0>)
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	4955      	ldr	r1, [pc, #340]	; (8003988 <Set_Screen+0x11d4>)
 8003834:	6809      	ldr	r1, [r1, #0]
 8003836:	2412      	movs	r4, #18
 8003838:	9409      	str	r4, [sp, #36]	; 0x24
 800383a:	240b      	movs	r4, #11
 800383c:	9408      	str	r4, [sp, #32]
 800383e:	4c53      	ldr	r4, [pc, #332]	; (800398c <Set_Screen+0x11d8>)
 8003840:	9407      	str	r4, [sp, #28]
 8003842:	9106      	str	r1, [sp, #24]
 8003844:	9205      	str	r2, [sp, #20]
 8003846:	9304      	str	r3, [sp, #16]
 8003848:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800384c:	9303      	str	r3, [sp, #12]
 800384e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003852:	9302      	str	r3, [sp, #8]
 8003854:	f240 1343 	movw	r3, #323	; 0x143
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2300      	movs	r3, #0
 8003862:	220a      	movs	r2, #10
 8003864:	2100      	movs	r1, #0
 8003866:	f004 fa5d 	bl	8007d24 <Centred_DrawNumber_16_32bit>

			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.1.эмульс", 	20,	10, 350, FonColor[10], BasicSymbolColor, Page[3]);
 800386a:	4b49      	ldr	r3, [pc, #292]	; (8003990 <Set_Screen+0x11dc>)
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	4a46      	ldr	r2, [pc, #280]	; (8003988 <Set_Screen+0x11d4>)
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	4943      	ldr	r1, [pc, #268]	; (8003980 <Set_Screen+0x11cc>)
 8003874:	68c9      	ldr	r1, [r1, #12]
 8003876:	9102      	str	r1, [sp, #8]
 8003878:	9201      	str	r2, [sp, #4]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003880:	220a      	movs	r2, #10
 8003882:	2114      	movs	r1, #20
 8003884:	4847      	ldr	r0, [pc, #284]	; (80039a4 <Set_Screen+0x11f0>)
 8003886:	f003 fedf 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.2.эмульс", 	20,	10, 380, FonColor[11], BasicSymbolColor, Page[3]);
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <Set_Screen+0x11dc>)
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	4a3e      	ldr	r2, [pc, #248]	; (8003988 <Set_Screen+0x11d4>)
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	493b      	ldr	r1, [pc, #236]	; (8003980 <Set_Screen+0x11cc>)
 8003894:	68c9      	ldr	r1, [r1, #12]
 8003896:	9102      	str	r1, [sp, #8]
 8003898:	9201      	str	r2, [sp, #4]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	f44f 73be 	mov.w	r3, #380	; 0x17c
 80038a0:	220a      	movs	r2, #10
 80038a2:	2114      	movs	r1, #20
 80038a4:	4840      	ldr	r0, [pc, #256]	; (80039a8 <Set_Screen+0x11f4>)
 80038a6:	f003 fecf 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.1.воды  ", 	20,	10, 410, FonColor[12], BasicSymbolColor, Page[3]);
 80038aa:	4b39      	ldr	r3, [pc, #228]	; (8003990 <Set_Screen+0x11dc>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4a36      	ldr	r2, [pc, #216]	; (8003988 <Set_Screen+0x11d4>)
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	4933      	ldr	r1, [pc, #204]	; (8003980 <Set_Screen+0x11cc>)
 80038b4:	68c9      	ldr	r1, [r1, #12]
 80038b6:	9102      	str	r1, [sp, #8]
 80038b8:	9201      	str	r2, [sp, #4]
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80038c0:	220a      	movs	r2, #10
 80038c2:	2114      	movs	r1, #20
 80038c4:	4839      	ldr	r0, [pc, #228]	; (80039ac <Set_Screen+0x11f8>)
 80038c6:	f003 febf 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.2.воды  ", 	20,	10, 440, FonColor[13], BasicSymbolColor, Page[3]);
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <Set_Screen+0x11dc>)
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	4a2e      	ldr	r2, [pc, #184]	; (8003988 <Set_Screen+0x11d4>)
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	492b      	ldr	r1, [pc, #172]	; (8003980 <Set_Screen+0x11cc>)
 80038d4:	68c9      	ldr	r1, [r1, #12]
 80038d6:	9102      	str	r1, [sp, #8]
 80038d8:	9201      	str	r2, [sp, #4]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80038e0:	220a      	movs	r2, #10
 80038e2:	2114      	movs	r1, #20
 80038e4:	4832      	ldr	r0, [pc, #200]	; (80039b0 <Set_Screen+0x11fc>)
 80038e6:	f003 feaf 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Пр-ки фильт.3.воды  ", 	20,	10, 470, FonColor[14], BasicSymbolColor, Page[3]);
 80038ea:	4b29      	ldr	r3, [pc, #164]	; (8003990 <Set_Screen+0x11dc>)
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	4a26      	ldr	r2, [pc, #152]	; (8003988 <Set_Screen+0x11d4>)
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	4923      	ldr	r1, [pc, #140]	; (8003980 <Set_Screen+0x11cc>)
 80038f4:	68c9      	ldr	r1, [r1, #12]
 80038f6:	9102      	str	r1, [sp, #8]
 80038f8:	9201      	str	r2, [sp, #4]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003900:	220a      	movs	r2, #10
 8003902:	2114      	movs	r1, #20
 8003904:	482b      	ldr	r0, [pc, #172]	; (80039b4 <Set_Screen+0x1200>)
 8003906:	f003 fe9f 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Flush_valve_1_counter, 			0, 10, 0,  440, 353, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800390a:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <Set_Screen+0x11ec>)
 800390c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800390e:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <Set_Screen+0x11cc>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <Set_Screen+0x11d0>)
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	491c      	ldr	r1, [pc, #112]	; (8003988 <Set_Screen+0x11d4>)
 8003918:	6809      	ldr	r1, [r1, #0]
 800391a:	2412      	movs	r4, #18
 800391c:	9409      	str	r4, [sp, #36]	; 0x24
 800391e:	240b      	movs	r4, #11
 8003920:	9408      	str	r4, [sp, #32]
 8003922:	4c1a      	ldr	r4, [pc, #104]	; (800398c <Set_Screen+0x11d8>)
 8003924:	9407      	str	r4, [sp, #28]
 8003926:	9106      	str	r1, [sp, #24]
 8003928:	9205      	str	r2, [sp, #20]
 800392a:	9304      	str	r3, [sp, #16]
 800392c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003936:	9302      	str	r3, [sp, #8]
 8003938:	f240 1361 	movw	r3, #353	; 0x161
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	220a      	movs	r2, #10
 8003948:	2100      	movs	r1, #0
 800394a:	f004 f9eb 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Flush_valve_2_counter, 			0, 10, 0,  440, 383, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800394e:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <Set_Screen+0x11ec>)
 8003950:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003952:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <Set_Screen+0x11cc>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4a0b      	ldr	r2, [pc, #44]	; (8003984 <Set_Screen+0x11d0>)
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	490b      	ldr	r1, [pc, #44]	; (8003988 <Set_Screen+0x11d4>)
 800395c:	6809      	ldr	r1, [r1, #0]
 800395e:	2412      	movs	r4, #18
 8003960:	9409      	str	r4, [sp, #36]	; 0x24
 8003962:	240b      	movs	r4, #11
 8003964:	9408      	str	r4, [sp, #32]
 8003966:	4c09      	ldr	r4, [pc, #36]	; (800398c <Set_Screen+0x11d8>)
 8003968:	9407      	str	r4, [sp, #28]
 800396a:	9106      	str	r1, [sp, #24]
 800396c:	9205      	str	r2, [sp, #20]
 800396e:	9304      	str	r3, [sp, #16]
 8003970:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003974:	9303      	str	r3, [sp, #12]
 8003976:	f44f 7348 	mov.w	r3, #800	; 0x320
 800397a:	9302      	str	r3, [sp, #8]
 800397c:	e01c      	b.n	80039b8 <Set_Screen+0x1204>
 800397e:	bf00      	nop
 8003980:	20000980 	.word	0x20000980
 8003984:	20000008 	.word	0x20000008
 8003988:	200009f4 	.word	0x200009f4
 800398c:	080117b0 	.word	0x080117b0
 8003990:	200000a4 	.word	0x200000a4
 8003994:	0800e5e4 	.word	0x0800e5e4
 8003998:	0800e608 	.word	0x0800e608
 800399c:	0800e62c 	.word	0x0800e62c
 80039a0:	20000aa8 	.word	0x20000aa8
 80039a4:	0800e650 	.word	0x0800e650
 80039a8:	0800e674 	.word	0x0800e674
 80039ac:	0800e698 	.word	0x0800e698
 80039b0:	0800e6bc 	.word	0x0800e6bc
 80039b4:	0800e6e0 	.word	0x0800e6e0
 80039b8:	f240 137f 	movw	r3, #383	; 0x17f
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	220a      	movs	r2, #10
 80039c8:	2100      	movs	r1, #0
 80039ca:	f004 f9ab 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_1_counter, 	0, 10, 0,  440, 413, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80039ce:	4ba4      	ldr	r3, [pc, #656]	; (8003c60 <Set_Screen+0x14ac>)
 80039d0:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80039d4:	4ba3      	ldr	r3, [pc, #652]	; (8003c64 <Set_Screen+0x14b0>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4aa3      	ldr	r2, [pc, #652]	; (8003c68 <Set_Screen+0x14b4>)
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	49a3      	ldr	r1, [pc, #652]	; (8003c6c <Set_Screen+0x14b8>)
 80039de:	6809      	ldr	r1, [r1, #0]
 80039e0:	2412      	movs	r4, #18
 80039e2:	9409      	str	r4, [sp, #36]	; 0x24
 80039e4:	240b      	movs	r4, #11
 80039e6:	9408      	str	r4, [sp, #32]
 80039e8:	4ca1      	ldr	r4, [pc, #644]	; (8003c70 <Set_Screen+0x14bc>)
 80039ea:	9407      	str	r4, [sp, #28]
 80039ec:	9106      	str	r1, [sp, #24]
 80039ee:	9205      	str	r2, [sp, #20]
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80039f6:	9303      	str	r3, [sp, #12]
 80039f8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80039fc:	9302      	str	r3, [sp, #8]
 80039fe:	f240 139d 	movw	r3, #413	; 0x19d
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	220a      	movs	r2, #10
 8003a0e:	2100      	movs	r1, #0
 8003a10:	f004 f988 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_2_counter, 	0, 10, 0,  440, 443, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003a14:	4b92      	ldr	r3, [pc, #584]	; (8003c60 <Set_Screen+0x14ac>)
 8003a16:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 8003a1a:	4b92      	ldr	r3, [pc, #584]	; (8003c64 <Set_Screen+0x14b0>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	4a92      	ldr	r2, [pc, #584]	; (8003c68 <Set_Screen+0x14b4>)
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	4992      	ldr	r1, [pc, #584]	; (8003c6c <Set_Screen+0x14b8>)
 8003a24:	6809      	ldr	r1, [r1, #0]
 8003a26:	2412      	movs	r4, #18
 8003a28:	9409      	str	r4, [sp, #36]	; 0x24
 8003a2a:	240b      	movs	r4, #11
 8003a2c:	9408      	str	r4, [sp, #32]
 8003a2e:	4c90      	ldr	r4, [pc, #576]	; (8003c70 <Set_Screen+0x14bc>)
 8003a30:	9407      	str	r4, [sp, #28]
 8003a32:	9106      	str	r1, [sp, #24]
 8003a34:	9205      	str	r2, [sp, #20]
 8003a36:	9304      	str	r3, [sp, #16]
 8003a38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003a3c:	9303      	str	r3, [sp, #12]
 8003a3e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003a42:	9302      	str	r3, [sp, #8]
 8003a44:	f240 13bb 	movw	r3, #443	; 0x1bb
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	220a      	movs	r2, #10
 8003a54:	2100      	movs	r1, #0
 8003a56:	f004 f965 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_3_counter, 	0, 10, 0,  440, 473, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003a5a:	4b81      	ldr	r3, [pc, #516]	; (8003c60 <Set_Screen+0x14ac>)
 8003a5c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8003a60:	4b80      	ldr	r3, [pc, #512]	; (8003c64 <Set_Screen+0x14b0>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a80      	ldr	r2, [pc, #512]	; (8003c68 <Set_Screen+0x14b4>)
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	4980      	ldr	r1, [pc, #512]	; (8003c6c <Set_Screen+0x14b8>)
 8003a6a:	6809      	ldr	r1, [r1, #0]
 8003a6c:	2412      	movs	r4, #18
 8003a6e:	9409      	str	r4, [sp, #36]	; 0x24
 8003a70:	240b      	movs	r4, #11
 8003a72:	9408      	str	r4, [sp, #32]
 8003a74:	4c7e      	ldr	r4, [pc, #504]	; (8003c70 <Set_Screen+0x14bc>)
 8003a76:	9407      	str	r4, [sp, #28]
 8003a78:	9106      	str	r1, [sp, #24]
 8003a7a:	9205      	str	r2, [sp, #20]
 8003a7c:	9304      	str	r3, [sp, #16]
 8003a7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003a82:	9303      	str	r3, [sp, #12]
 8003a84:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003a88:	9302      	str	r3, [sp, #8]
 8003a8a:	f240 13d9 	movw	r3, #473	; 0x1d9
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	2300      	movs	r3, #0
 8003a98:	220a      	movs	r2, #10
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	f004 f942 	bl	8007d24 <Centred_DrawNumber_16_32bit>

			Short_Left_Colored_RU_DrawString_32("Объем сл.фильт  ",     16,	505,  80, FonColor[15], BasicSymbolColor, Page[3]);
 8003aa0:	4b74      	ldr	r3, [pc, #464]	; (8003c74 <Set_Screen+0x14c0>)
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	4a71      	ldr	r2, [pc, #452]	; (8003c6c <Set_Screen+0x14b8>)
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	496e      	ldr	r1, [pc, #440]	; (8003c64 <Set_Screen+0x14b0>)
 8003aaa:	68c9      	ldr	r1, [r1, #12]
 8003aac:	9102      	str	r1, [sp, #8]
 8003aae:	9201      	str	r2, [sp, #4]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2350      	movs	r3, #80	; 0x50
 8003ab4:	f240 12f9 	movw	r2, #505	; 0x1f9
 8003ab8:	2110      	movs	r1, #16
 8003aba:	486f      	ldr	r0, [pc, #444]	; (8003c78 <Set_Screen+0x14c4>)
 8003abc:	f003 fdc4 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Объем пр.эмульс ",     16,	505, 140, FonColor[16], BasicSymbolColor, Page[3]);
 8003ac0:	4b6c      	ldr	r3, [pc, #432]	; (8003c74 <Set_Screen+0x14c0>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	4a69      	ldr	r2, [pc, #420]	; (8003c6c <Set_Screen+0x14b8>)
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	4966      	ldr	r1, [pc, #408]	; (8003c64 <Set_Screen+0x14b0>)
 8003aca:	68c9      	ldr	r1, [r1, #12]
 8003acc:	9102      	str	r1, [sp, #8]
 8003ace:	9201      	str	r2, [sp, #4]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	238c      	movs	r3, #140	; 0x8c
 8003ad4:	f240 12f9 	movw	r2, #505	; 0x1f9
 8003ad8:	2110      	movs	r1, #16
 8003ada:	4868      	ldr	r0, [pc, #416]	; (8003c7c <Set_Screen+0x14c8>)
 8003adc:	f003 fdb4 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Объем пр.концент",     16,	505, 200, FonColor[17], BasicSymbolColor, Page[3]);
 8003ae0:	4b64      	ldr	r3, [pc, #400]	; (8003c74 <Set_Screen+0x14c0>)
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	4a61      	ldr	r2, [pc, #388]	; (8003c6c <Set_Screen+0x14b8>)
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	495e      	ldr	r1, [pc, #376]	; (8003c64 <Set_Screen+0x14b0>)
 8003aea:	68c9      	ldr	r1, [r1, #12]
 8003aec:	9102      	str	r1, [sp, #8]
 8003aee:	9201      	str	r2, [sp, #4]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	23c8      	movs	r3, #200	; 0xc8
 8003af4:	f240 12f9 	movw	r2, #505	; 0x1f9
 8003af8:	2110      	movs	r1, #16
 8003afa:	4861      	ldr	r0, [pc, #388]	; (8003c80 <Set_Screen+0x14cc>)
 8003afc:	f003 fda4 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Объем пр.воды   ",     16,	505, 260, FonColor[18], BasicSymbolColor, Page[3]);
 8003b00:	4b5c      	ldr	r3, [pc, #368]	; (8003c74 <Set_Screen+0x14c0>)
 8003b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b04:	4a59      	ldr	r2, [pc, #356]	; (8003c6c <Set_Screen+0x14b8>)
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	4956      	ldr	r1, [pc, #344]	; (8003c64 <Set_Screen+0x14b0>)
 8003b0a:	68c9      	ldr	r1, [r1, #12]
 8003b0c:	9102      	str	r1, [sp, #8]
 8003b0e:	9201      	str	r2, [sp, #4]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b16:	f240 12f9 	movw	r2, #505	; 0x1f9
 8003b1a:	2110      	movs	r1, #16
 8003b1c:	4859      	ldr	r0, [pc, #356]	; (8003c84 <Set_Screen+0x14d0>)
 8003b1e:	f003 fd93 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Кол-во ср. УПЭ  ",     16,	505, 320, FonColor[19], BasicSymbolColor, Page[3]);
 8003b22:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <Set_Screen+0x14c0>)
 8003b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b26:	4a51      	ldr	r2, [pc, #324]	; (8003c6c <Set_Screen+0x14b8>)
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	494e      	ldr	r1, [pc, #312]	; (8003c64 <Set_Screen+0x14b0>)
 8003b2c:	68c9      	ldr	r1, [r1, #12]
 8003b2e:	9102      	str	r1, [sp, #8]
 8003b30:	9201      	str	r2, [sp, #4]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003b38:	f240 12f9 	movw	r2, #505	; 0x1f9
 8003b3c:	2110      	movs	r1, #16
 8003b3e:	4852      	ldr	r0, [pc, #328]	; (8003c88 <Set_Screen+0x14d4>)
 8003b40:	f003 fd82 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Volume, 	0, 10, 0,  650, 113, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003b44:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <Set_Screen+0x14ac>)
 8003b46:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003b48:	4b46      	ldr	r3, [pc, #280]	; (8003c64 <Set_Screen+0x14b0>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a46      	ldr	r2, [pc, #280]	; (8003c68 <Set_Screen+0x14b4>)
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	4946      	ldr	r1, [pc, #280]	; (8003c6c <Set_Screen+0x14b8>)
 8003b52:	6809      	ldr	r1, [r1, #0]
 8003b54:	2412      	movs	r4, #18
 8003b56:	9409      	str	r4, [sp, #36]	; 0x24
 8003b58:	240b      	movs	r4, #11
 8003b5a:	9408      	str	r4, [sp, #32]
 8003b5c:	4c44      	ldr	r4, [pc, #272]	; (8003c70 <Set_Screen+0x14bc>)
 8003b5e:	9407      	str	r4, [sp, #28]
 8003b60:	9106      	str	r1, [sp, #24]
 8003b62:	9205      	str	r2, [sp, #20]
 8003b64:	9304      	str	r3, [sp, #16]
 8003b66:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003b6a:	9303      	str	r3, [sp, #12]
 8003b6c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003b70:	9302      	str	r3, [sp, #8]
 8003b72:	2371      	movs	r3, #113	; 0x71
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	f240 238a 	movw	r3, #650	; 0x28a
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	220a      	movs	r2, #10
 8003b80:	2100      	movs	r1, #0
 8003b82:	f004 f8cf 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Volume, 		0, 10, 0,  650, 173, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003b86:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <Set_Screen+0x14ac>)
 8003b88:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003b8a:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <Set_Screen+0x14b0>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	4a36      	ldr	r2, [pc, #216]	; (8003c68 <Set_Screen+0x14b4>)
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	4936      	ldr	r1, [pc, #216]	; (8003c6c <Set_Screen+0x14b8>)
 8003b94:	6809      	ldr	r1, [r1, #0]
 8003b96:	2412      	movs	r4, #18
 8003b98:	9409      	str	r4, [sp, #36]	; 0x24
 8003b9a:	240b      	movs	r4, #11
 8003b9c:	9408      	str	r4, [sp, #32]
 8003b9e:	4c34      	ldr	r4, [pc, #208]	; (8003c70 <Set_Screen+0x14bc>)
 8003ba0:	9407      	str	r4, [sp, #28]
 8003ba2:	9106      	str	r1, [sp, #24]
 8003ba4:	9205      	str	r2, [sp, #20]
 8003ba6:	9304      	str	r3, [sp, #16]
 8003ba8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003bac:	9303      	str	r3, [sp, #12]
 8003bae:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003bb2:	9302      	str	r3, [sp, #8]
 8003bb4:	23ad      	movs	r3, #173	; 0xad
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	f240 238a 	movw	r3, #650	; 0x28a
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	220a      	movs	r2, #10
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	f004 f8ae 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Volume, 	0, 10, 0,  650, 233, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <Set_Screen+0x14ac>)
 8003bca:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 8003bce:	4b25      	ldr	r3, [pc, #148]	; (8003c64 <Set_Screen+0x14b0>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4a25      	ldr	r2, [pc, #148]	; (8003c68 <Set_Screen+0x14b4>)
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	4925      	ldr	r1, [pc, #148]	; (8003c6c <Set_Screen+0x14b8>)
 8003bd8:	6809      	ldr	r1, [r1, #0]
 8003bda:	2412      	movs	r4, #18
 8003bdc:	9409      	str	r4, [sp, #36]	; 0x24
 8003bde:	240b      	movs	r4, #11
 8003be0:	9408      	str	r4, [sp, #32]
 8003be2:	4c23      	ldr	r4, [pc, #140]	; (8003c70 <Set_Screen+0x14bc>)
 8003be4:	9407      	str	r4, [sp, #28]
 8003be6:	9106      	str	r1, [sp, #24]
 8003be8:	9205      	str	r2, [sp, #20]
 8003bea:	9304      	str	r3, [sp, #16]
 8003bec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003bf0:	9303      	str	r3, [sp, #12]
 8003bf2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003bf6:	9302      	str	r3, [sp, #8]
 8003bf8:	23e9      	movs	r3, #233	; 0xe9
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	f240 238a 	movw	r3, #650	; 0x28a
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	220a      	movs	r2, #10
 8003c06:	2100      	movs	r1, #0
 8003c08:	f004 f88c 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Volume, 		0, 10, 0,  650, 293, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <Set_Screen+0x14ac>)
 8003c0e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8003c12:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <Set_Screen+0x14b0>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <Set_Screen+0x14b4>)
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	4914      	ldr	r1, [pc, #80]	; (8003c6c <Set_Screen+0x14b8>)
 8003c1c:	6809      	ldr	r1, [r1, #0]
 8003c1e:	2412      	movs	r4, #18
 8003c20:	9409      	str	r4, [sp, #36]	; 0x24
 8003c22:	240b      	movs	r4, #11
 8003c24:	9408      	str	r4, [sp, #32]
 8003c26:	4c12      	ldr	r4, [pc, #72]	; (8003c70 <Set_Screen+0x14bc>)
 8003c28:	9407      	str	r4, [sp, #28]
 8003c2a:	9106      	str	r1, [sp, #24]
 8003c2c:	9205      	str	r2, [sp, #20]
 8003c2e:	9304      	str	r3, [sp, #16]
 8003c30:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003c3a:	9302      	str	r3, [sp, #8]
 8003c3c:	f240 1325 	movw	r3, #293	; 0x125
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	f240 238a 	movw	r3, #650	; 0x28a
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	220a      	movs	r2, #10
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	f004 f869 	bl	8007d24 <Centred_DrawNumber_16_32bit>
			Centred_DrawNumber_16_32bit(BUV_RT_VALS.EMULSION_NODE.Node_work_counter, 			0, 10, 0,  650, 353, 800,480,Page[3],  BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003c52:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <Set_Screen+0x14ac>)
 8003c54:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8003c58:	4b02      	ldr	r3, [pc, #8]	; (8003c64 <Set_Screen+0x14b0>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	e016      	b.n	8003c8c <Set_Screen+0x14d8>
 8003c5e:	bf00      	nop
 8003c60:	20000aa8 	.word	0x20000aa8
 8003c64:	20000980 	.word	0x20000980
 8003c68:	20000008 	.word	0x20000008
 8003c6c:	200009f4 	.word	0x200009f4
 8003c70:	080117b0 	.word	0x080117b0
 8003c74:	200000a4 	.word	0x200000a4
 8003c78:	0800e704 	.word	0x0800e704
 8003c7c:	0800e724 	.word	0x0800e724
 8003c80:	0800e744 	.word	0x0800e744
 8003c84:	0800e764 	.word	0x0800e764
 8003c88:	0800e780 	.word	0x0800e780
 8003c8c:	4a73      	ldr	r2, [pc, #460]	; (8003e5c <Set_Screen+0x16a8>)
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	4973      	ldr	r1, [pc, #460]	; (8003e60 <Set_Screen+0x16ac>)
 8003c92:	6809      	ldr	r1, [r1, #0]
 8003c94:	2412      	movs	r4, #18
 8003c96:	9409      	str	r4, [sp, #36]	; 0x24
 8003c98:	240b      	movs	r4, #11
 8003c9a:	9408      	str	r4, [sp, #32]
 8003c9c:	4c71      	ldr	r4, [pc, #452]	; (8003e64 <Set_Screen+0x16b0>)
 8003c9e:	9407      	str	r4, [sp, #28]
 8003ca0:	9106      	str	r1, [sp, #24]
 8003ca2:	9205      	str	r2, [sp, #20]
 8003ca4:	9304      	str	r3, [sp, #16]
 8003ca6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003caa:	9303      	str	r3, [sp, #12]
 8003cac:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003cb0:	9302      	str	r3, [sp, #8]
 8003cb2:	f240 1361 	movw	r3, #353	; 0x161
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	f240 238a 	movw	r3, #650	; 0x28a
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	220a      	movs	r2, #10
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	f004 f82e 	bl	8007d24 <Centred_DrawNumber_16_32bit>

			if(Control_DB.MenuPointer == 0)
 8003cc8:	4b67      	ldr	r3, [pc, #412]	; (8003e68 <Set_Screen+0x16b4>)
 8003cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <Set_Screen+0x1528>
			{
				Control_DB.RazrPointerMAX   = 4;
 8003cd2:	4b65      	ldr	r3, [pc, #404]	; (8003e68 <Set_Screen+0x16b4>)
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	80da      	strh	r2, [r3, #6]
				Control_DB.RazrPointer 		= 0;
				Control_DB.RazrPointerMAX   = 0;
			}


		break;
 8003cd8:	f001 bb65 	b.w	80053a6 <Set_Screen+0x2bf2>
				Control_DB.RazrPointer 		= 0;
 8003cdc:	4b62      	ldr	r3, [pc, #392]	; (8003e68 <Set_Screen+0x16b4>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	805a      	strh	r2, [r3, #2]
				Control_DB.RazrPointerMAX   = 0;
 8003ce2:	4b61      	ldr	r3, [pc, #388]	; (8003e68 <Set_Screen+0x16b4>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	80da      	strh	r2, [r3, #6]
		break;
 8003ce8:	f001 bb5d 	b.w	80053a6 <Set_Screen+0x2bf2>

		case 4: // Ручное управление

			if(!ALG_DB.clearing_pressure_filter_1.state)
 8003cec:	4b5f      	ldr	r3, [pc, #380]	; (8003e6c <Set_Screen+0x16b8>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10f      	bne.n	8003d14 <Set_Screen+0x1560>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть напорный фильтр 1 ", 27,	100,  70, FonColor[0], BasicSymbolColor, Page[4]);
 8003cf4:	4b5e      	ldr	r3, [pc, #376]	; (8003e70 <Set_Screen+0x16bc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a59      	ldr	r2, [pc, #356]	; (8003e60 <Set_Screen+0x16ac>)
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	495d      	ldr	r1, [pc, #372]	; (8003e74 <Set_Screen+0x16c0>)
 8003cfe:	6909      	ldr	r1, [r1, #16]
 8003d00:	9102      	str	r1, [sp, #8]
 8003d02:	9201      	str	r2, [sp, #4]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	2346      	movs	r3, #70	; 0x46
 8003d08:	2264      	movs	r2, #100	; 0x64
 8003d0a:	211b      	movs	r1, #27
 8003d0c:	485a      	ldr	r0, [pc, #360]	; (8003e78 <Set_Screen+0x16c4>)
 8003d0e:	f003 fc9b 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8003d12:	e00e      	b.n	8003d32 <Set_Screen+0x157e>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  1 ", 27,	100,  70, FonColor[0], BasicSymbolColor, Page[4]);
 8003d14:	4b56      	ldr	r3, [pc, #344]	; (8003e70 <Set_Screen+0x16bc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a51      	ldr	r2, [pc, #324]	; (8003e60 <Set_Screen+0x16ac>)
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	4955      	ldr	r1, [pc, #340]	; (8003e74 <Set_Screen+0x16c0>)
 8003d1e:	6909      	ldr	r1, [r1, #16]
 8003d20:	9102      	str	r1, [sp, #8]
 8003d22:	9201      	str	r2, [sp, #4]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	2346      	movs	r3, #70	; 0x46
 8003d28:	2264      	movs	r2, #100	; 0x64
 8003d2a:	211b      	movs	r1, #27
 8003d2c:	4853      	ldr	r0, [pc, #332]	; (8003e7c <Set_Screen+0x16c8>)
 8003d2e:	f003 fc8b 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_pressure_filter_2.state)
 8003d32:	4b4e      	ldr	r3, [pc, #312]	; (8003e6c <Set_Screen+0x16b8>)
 8003d34:	799b      	ldrb	r3, [r3, #6]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <Set_Screen+0x15a6>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть напорный фильтр 2 ", 27,	100, 110, FonColor[1], BasicSymbolColor, Page[4]);
 8003d3a:	4b4d      	ldr	r3, [pc, #308]	; (8003e70 <Set_Screen+0x16bc>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4a48      	ldr	r2, [pc, #288]	; (8003e60 <Set_Screen+0x16ac>)
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	494c      	ldr	r1, [pc, #304]	; (8003e74 <Set_Screen+0x16c0>)
 8003d44:	6909      	ldr	r1, [r1, #16]
 8003d46:	9102      	str	r1, [sp, #8]
 8003d48:	9201      	str	r2, [sp, #4]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	236e      	movs	r3, #110	; 0x6e
 8003d4e:	2264      	movs	r2, #100	; 0x64
 8003d50:	211b      	movs	r1, #27
 8003d52:	484b      	ldr	r0, [pc, #300]	; (8003e80 <Set_Screen+0x16cc>)
 8003d54:	f003 fc78 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8003d58:	e00e      	b.n	8003d78 <Set_Screen+0x15c4>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  2 ", 27,	100, 110, FonColor[1], BasicSymbolColor, Page[4]);
 8003d5a:	4b45      	ldr	r3, [pc, #276]	; (8003e70 <Set_Screen+0x16bc>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <Set_Screen+0x16ac>)
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	4944      	ldr	r1, [pc, #272]	; (8003e74 <Set_Screen+0x16c0>)
 8003d64:	6909      	ldr	r1, [r1, #16]
 8003d66:	9102      	str	r1, [sp, #8]
 8003d68:	9201      	str	r2, [sp, #4]
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	236e      	movs	r3, #110	; 0x6e
 8003d6e:	2264      	movs	r2, #100	; 0x64
 8003d70:	211b      	movs	r1, #27
 8003d72:	4844      	ldr	r0, [pc, #272]	; (8003e84 <Set_Screen+0x16d0>)
 8003d74:	f003 fc68 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_water_filter_1.state)
 8003d78:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <Set_Screen+0x16b8>)
 8003d7a:	7b1b      	ldrb	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10f      	bne.n	8003da0 <Set_Screen+0x15ec>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть фильтр воды     1 ", 27,	100, 150, FonColor[2], BasicSymbolColor, Page[4]);
 8003d80:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <Set_Screen+0x16bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a36      	ldr	r2, [pc, #216]	; (8003e60 <Set_Screen+0x16ac>)
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	493a      	ldr	r1, [pc, #232]	; (8003e74 <Set_Screen+0x16c0>)
 8003d8a:	6909      	ldr	r1, [r1, #16]
 8003d8c:	9102      	str	r1, [sp, #8]
 8003d8e:	9201      	str	r2, [sp, #4]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2396      	movs	r3, #150	; 0x96
 8003d94:	2264      	movs	r2, #100	; 0x64
 8003d96:	211b      	movs	r1, #27
 8003d98:	483b      	ldr	r0, [pc, #236]	; (8003e88 <Set_Screen+0x16d4>)
 8003d9a:	f003 fc55 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8003d9e:	e00e      	b.n	8003dbe <Set_Screen+0x160a>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  1 ", 27,	100, 150, FonColor[2], BasicSymbolColor, Page[4]);
 8003da0:	4b33      	ldr	r3, [pc, #204]	; (8003e70 <Set_Screen+0x16bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a2e      	ldr	r2, [pc, #184]	; (8003e60 <Set_Screen+0x16ac>)
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	4932      	ldr	r1, [pc, #200]	; (8003e74 <Set_Screen+0x16c0>)
 8003daa:	6909      	ldr	r1, [r1, #16]
 8003dac:	9102      	str	r1, [sp, #8]
 8003dae:	9201      	str	r2, [sp, #4]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2396      	movs	r3, #150	; 0x96
 8003db4:	2264      	movs	r2, #100	; 0x64
 8003db6:	211b      	movs	r1, #27
 8003db8:	4830      	ldr	r0, [pc, #192]	; (8003e7c <Set_Screen+0x16c8>)
 8003dba:	f003 fc45 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_water_filter_2.state)
 8003dbe:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <Set_Screen+0x16b8>)
 8003dc0:	7c9b      	ldrb	r3, [r3, #18]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10f      	bne.n	8003de6 <Set_Screen+0x1632>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть фильтр воды     2 ", 27,	100, 190, FonColor[3], BasicSymbolColor, Page[4]);
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <Set_Screen+0x16bc>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4a25      	ldr	r2, [pc, #148]	; (8003e60 <Set_Screen+0x16ac>)
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	4929      	ldr	r1, [pc, #164]	; (8003e74 <Set_Screen+0x16c0>)
 8003dd0:	6909      	ldr	r1, [r1, #16]
 8003dd2:	9102      	str	r1, [sp, #8]
 8003dd4:	9201      	str	r2, [sp, #4]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	23be      	movs	r3, #190	; 0xbe
 8003dda:	2264      	movs	r2, #100	; 0x64
 8003ddc:	211b      	movs	r1, #27
 8003dde:	482b      	ldr	r0, [pc, #172]	; (8003e8c <Set_Screen+0x16d8>)
 8003de0:	f003 fc32 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8003de4:	e00e      	b.n	8003e04 <Set_Screen+0x1650>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  2 ", 27,	100, 190, FonColor[3], BasicSymbolColor, Page[4]);
 8003de6:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <Set_Screen+0x16bc>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <Set_Screen+0x16ac>)
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	4921      	ldr	r1, [pc, #132]	; (8003e74 <Set_Screen+0x16c0>)
 8003df0:	6909      	ldr	r1, [r1, #16]
 8003df2:	9102      	str	r1, [sp, #8]
 8003df4:	9201      	str	r2, [sp, #4]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	23be      	movs	r3, #190	; 0xbe
 8003dfa:	2264      	movs	r2, #100	; 0x64
 8003dfc:	211b      	movs	r1, #27
 8003dfe:	4821      	ldr	r0, [pc, #132]	; (8003e84 <Set_Screen+0x16d0>)
 8003e00:	f003 fc22 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			if(!ALG_DB.clearing_water_filter_3.state)
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <Set_Screen+0x16b8>)
 8003e06:	7e1b      	ldrb	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10f      	bne.n	8003e2c <Set_Screen+0x1678>
			{
				Short_Left_Colored_RU_DrawString_32(" Промыть фильтр воды     3 ", 27,	100, 230, FonColor[4], BasicSymbolColor, Page[4]);
 8003e0c:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <Set_Screen+0x16bc>)
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <Set_Screen+0x16ac>)
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	4917      	ldr	r1, [pc, #92]	; (8003e74 <Set_Screen+0x16c0>)
 8003e16:	6909      	ldr	r1, [r1, #16]
 8003e18:	9102      	str	r1, [sp, #8]
 8003e1a:	9201      	str	r2, [sp, #4]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	23e6      	movs	r3, #230	; 0xe6
 8003e20:	2264      	movs	r2, #100	; 0x64
 8003e22:	211b      	movs	r1, #27
 8003e24:	481a      	ldr	r0, [pc, #104]	; (8003e90 <Set_Screen+0x16dc>)
 8003e26:	f003 fc0f 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 8003e2a:	e00e      	b.n	8003e4a <Set_Screen+0x1696>
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32(" Промывка фильтра......  3 ", 27,	100, 230, FonColor[4], BasicSymbolColor, Page[4]);
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <Set_Screen+0x16bc>)
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	4a0b      	ldr	r2, [pc, #44]	; (8003e60 <Set_Screen+0x16ac>)
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	490f      	ldr	r1, [pc, #60]	; (8003e74 <Set_Screen+0x16c0>)
 8003e36:	6909      	ldr	r1, [r1, #16]
 8003e38:	9102      	str	r1, [sp, #8]
 8003e3a:	9201      	str	r2, [sp, #4]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	23e6      	movs	r3, #230	; 0xe6
 8003e40:	2264      	movs	r2, #100	; 0x64
 8003e42:	211b      	movs	r1, #27
 8003e44:	4813      	ldr	r0, [pc, #76]	; (8003e94 <Set_Screen+0x16e0>)
 8003e46:	f003 fbff 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			Control_DB.MenuPointerMAX 	= 4;
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <Set_Screen+0x16b4>)
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	809a      	strh	r2, [r3, #4]
			Control_DB.RazrPointer 		= 0;
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <Set_Screen+0x16b4>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	805a      	strh	r2, [r3, #2]

		break;
 8003e56:	f001 baa6 	b.w	80053a6 <Set_Screen+0x2bf2>
 8003e5a:	bf00      	nop
 8003e5c:	20000008 	.word	0x20000008
 8003e60:	200009f4 	.word	0x200009f4
 8003e64:	080117b0 	.word	0x080117b0
 8003e68:	20000b70 	.word	0x20000b70
 8003e6c:	20000a10 	.word	0x20000a10
 8003e70:	200000a4 	.word	0x200000a4
 8003e74:	20000980 	.word	0x20000980
 8003e78:	0800e79c 	.word	0x0800e79c
 8003e7c:	0800e7d0 	.word	0x0800e7d0
 8003e80:	0800e7fc 	.word	0x0800e7fc
 8003e84:	0800e830 	.word	0x0800e830
 8003e88:	0800e85c 	.word	0x0800e85c
 8003e8c:	0800e88c 	.word	0x0800e88c
 8003e90:	0800e8bc 	.word	0x0800e8bc
 8003e94:	0800e8ec 	.word	0x0800e8ec



		case 5:

			Short_Centred_RU_DrawString_32("Введите пароль", 14, 	  		400, 190, BackgroundColor, BasicSymbolColor, Page[5]);
 8003e98:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <Set_Screen+0x17b4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a33      	ldr	r2, [pc, #204]	; (8003f6c <Set_Screen+0x17b8>)
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	4933      	ldr	r1, [pc, #204]	; (8003f70 <Set_Screen+0x17bc>)
 8003ea2:	6949      	ldr	r1, [r1, #20]
 8003ea4:	9102      	str	r1, [sp, #8]
 8003ea6:	9201      	str	r2, [sp, #4]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	23be      	movs	r3, #190	; 0xbe
 8003eac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003eb0:	210e      	movs	r1, #14
 8003eb2:	4830      	ldr	r0, [pc, #192]	; (8003f74 <Set_Screen+0x17c0>)
 8003eb4:	f003 fce6 	bl	8007884 <Short_Centred_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&PassW_block.PassWord, 0,   4, Control_DB.RazrPointer, 9999, 0, 400,  240, 800,480, Page[5], GrayColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003eb8:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <Set_Screen+0x17c4>)
 8003eba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ebe:	461c      	mov	r4, r3
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <Set_Screen+0x17bc>)
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	4a2d      	ldr	r2, [pc, #180]	; (8003f7c <Set_Screen+0x17c8>)
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	4928      	ldr	r1, [pc, #160]	; (8003f6c <Set_Screen+0x17b8>)
 8003eca:	6809      	ldr	r1, [r1, #0]
 8003ecc:	2012      	movs	r0, #18
 8003ece:	900b      	str	r0, [sp, #44]	; 0x2c
 8003ed0:	200b      	movs	r0, #11
 8003ed2:	900a      	str	r0, [sp, #40]	; 0x28
 8003ed4:	482a      	ldr	r0, [pc, #168]	; (8003f80 <Set_Screen+0x17cc>)
 8003ed6:	9009      	str	r0, [sp, #36]	; 0x24
 8003ed8:	9108      	str	r1, [sp, #32]
 8003eda:	9207      	str	r2, [sp, #28]
 8003edc:	9306      	str	r3, [sp, #24]
 8003ede:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003ee2:	9305      	str	r3, [sp, #20]
 8003ee4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003ee8:	9304      	str	r3, [sp, #16]
 8003eea:	23f0      	movs	r3, #240	; 0xf0
 8003eec:	9303      	str	r3, [sp, #12]
 8003eee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003ef2:	9302      	str	r3, [sp, #8]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	f242 730f 	movw	r3, #9999	; 0x270f
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	4623      	mov	r3, r4
 8003f00:	2204      	movs	r2, #4
 8003f02:	2100      	movs	r1, #0
 8003f04:	481f      	ldr	r0, [pc, #124]	; (8003f84 <Set_Screen+0x17d0>)
 8003f06:	f004 f93d 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
			if(PassW_block.PassFalseTimer)
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <Set_Screen+0x17d0>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d011      	beq.n	8003f36 <Set_Screen+0x1782>
			{
				Short_Centred_RU_DrawString_32("Пароль неверный", 15, 		400, 290,        RedColor, BasicSymbolColor, Page[5]);
 8003f12:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <Set_Screen+0x17d4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <Set_Screen+0x17b8>)
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	4915      	ldr	r1, [pc, #84]	; (8003f70 <Set_Screen+0x17bc>)
 8003f1c:	6949      	ldr	r1, [r1, #20]
 8003f1e:	9102      	str	r1, [sp, #8]
 8003f20:	9201      	str	r2, [sp, #4]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003f28:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003f2c:	210f      	movs	r1, #15
 8003f2e:	4817      	ldr	r0, [pc, #92]	; (8003f8c <Set_Screen+0x17d8>)
 8003f30:	f003 fca8 	bl	8007884 <Short_Centred_RU_DrawString_32>
 8003f34:	e010      	b.n	8003f58 <Set_Screen+0x17a4>
			}
			else
			{
				Short_Centred_RU_DrawString_32("               ", 15, 		400, 290, BackgroundColor, BasicSymbolColor, Page[5]);
 8003f36:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <Set_Screen+0x17b4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a0c      	ldr	r2, [pc, #48]	; (8003f6c <Set_Screen+0x17b8>)
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	490c      	ldr	r1, [pc, #48]	; (8003f70 <Set_Screen+0x17bc>)
 8003f40:	6949      	ldr	r1, [r1, #20]
 8003f42:	9102      	str	r1, [sp, #8]
 8003f44:	9201      	str	r2, [sp, #4]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003f4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003f50:	210f      	movs	r1, #15
 8003f52:	480f      	ldr	r0, [pc, #60]	; (8003f90 <Set_Screen+0x17dc>)
 8003f54:	f003 fc96 	bl	8007884 <Short_Centred_RU_DrawString_32>
			}

			Control_DB.RazrPointerMAX 	= 4;
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <Set_Screen+0x17c4>)
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	80da      	strh	r2, [r3, #6]
			Control_DB.MenuPointerMAX 	= 0;
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <Set_Screen+0x17c4>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	809a      	strh	r2, [r3, #4]

		break;
 8003f64:	f001 ba1f 	b.w	80053a6 <Set_Screen+0x2bf2>
 8003f68:	20000008 	.word	0x20000008
 8003f6c:	200009f4 	.word	0x200009f4
 8003f70:	20000980 	.word	0x20000980
 8003f74:	0800e918 	.word	0x0800e918
 8003f78:	20000b70 	.word	0x20000b70
 8003f7c:	2000000c 	.word	0x2000000c
 8003f80:	080117b0 	.word	0x080117b0
 8003f84:	200009fc 	.word	0x200009fc
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	0800e934 	.word	0x0800e934
 8003f90:	0800e954 	.word	0x0800e954

		case 6:
			Short_Left_Colored_RU_DrawString_32("Режим работы    ", 16,	30,  50, FonColor[0], BasicSymbolColor, Page[6]);
 8003f94:	4ba2      	ldr	r3, [pc, #648]	; (8004220 <Set_Screen+0x1a6c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4aa2      	ldr	r2, [pc, #648]	; (8004224 <Set_Screen+0x1a70>)
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	49a2      	ldr	r1, [pc, #648]	; (8004228 <Set_Screen+0x1a74>)
 8003f9e:	6989      	ldr	r1, [r1, #24]
 8003fa0:	9102      	str	r1, [sp, #8]
 8003fa2:	9201      	str	r2, [sp, #4]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2332      	movs	r3, #50	; 0x32
 8003fa8:	221e      	movs	r2, #30
 8003faa:	2110      	movs	r1, #16
 8003fac:	489f      	ldr	r0, [pc, #636]	; (800422c <Set_Screen+0x1a78>)
 8003fae:	f003 fb4b 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings.pump_mode,0, 1, Control_DB.RazrPointer, 1,   0, 470, 50, 800,480, Page[6], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8003fb2:	4b9f      	ldr	r3, [pc, #636]	; (8004230 <Set_Screen+0x1a7c>)
 8003fb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003fb8:	461c      	mov	r4, r3
 8003fba:	4b9b      	ldr	r3, [pc, #620]	; (8004228 <Set_Screen+0x1a74>)
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	4a98      	ldr	r2, [pc, #608]	; (8004220 <Set_Screen+0x1a6c>)
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	4998      	ldr	r1, [pc, #608]	; (8004224 <Set_Screen+0x1a70>)
 8003fc4:	6809      	ldr	r1, [r1, #0]
 8003fc6:	2012      	movs	r0, #18
 8003fc8:	900b      	str	r0, [sp, #44]	; 0x2c
 8003fca:	200b      	movs	r0, #11
 8003fcc:	900a      	str	r0, [sp, #40]	; 0x28
 8003fce:	4899      	ldr	r0, [pc, #612]	; (8004234 <Set_Screen+0x1a80>)
 8003fd0:	9009      	str	r0, [sp, #36]	; 0x24
 8003fd2:	9108      	str	r1, [sp, #32]
 8003fd4:	9207      	str	r2, [sp, #28]
 8003fd6:	9306      	str	r3, [sp, #24]
 8003fd8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003fdc:	9305      	str	r3, [sp, #20]
 8003fde:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003fe2:	9304      	str	r3, [sp, #16]
 8003fe4:	2332      	movs	r3, #50	; 0x32
 8003fe6:	9303      	str	r3, [sp, #12]
 8003fe8:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8003fec:	9302      	str	r3, [sp, #8]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	488e      	ldr	r0, [pc, #568]	; (8004238 <Set_Screen+0x1a84>)
 8003ffe:	f004 f8c1 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

			if(BUV_settings.pump_mode)
 8004002:	4b8e      	ldr	r3, [pc, #568]	; (800423c <Set_Screen+0x1a88>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8376 	beq.w	80046f8 <Set_Screen+0x1f44>
			{

				Short_Left_Colored_RU_DrawString_32("Авто", 4,600,  50, BackgroundColor, BasicSymbolColor, Page[6]);
 800400c:	4b8c      	ldr	r3, [pc, #560]	; (8004240 <Set_Screen+0x1a8c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a84      	ldr	r2, [pc, #528]	; (8004224 <Set_Screen+0x1a70>)
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	4984      	ldr	r1, [pc, #528]	; (8004228 <Set_Screen+0x1a74>)
 8004016:	6989      	ldr	r1, [r1, #24]
 8004018:	9102      	str	r1, [sp, #8]
 800401a:	9201      	str	r2, [sp, #4]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2332      	movs	r3, #50	; 0x32
 8004020:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004024:	2104      	movs	r1, #4
 8004026:	4887      	ldr	r0, [pc, #540]	; (8004244 <Set_Screen+0x1a90>)
 8004028:	f003 fb0e 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				
				Short_Left_Colored_RU_DrawString_32("Насос АНН1", 10,30,  80, FonColor[1], BasicSymbolColor, Page[6]);
 800402c:	4b7c      	ldr	r3, [pc, #496]	; (8004220 <Set_Screen+0x1a6c>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a7c      	ldr	r2, [pc, #496]	; (8004224 <Set_Screen+0x1a70>)
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	497c      	ldr	r1, [pc, #496]	; (8004228 <Set_Screen+0x1a74>)
 8004036:	6989      	ldr	r1, [r1, #24]
 8004038:	9102      	str	r1, [sp, #8]
 800403a:	9201      	str	r2, [sp, #4]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	2350      	movs	r3, #80	; 0x50
 8004040:	221e      	movs	r2, #30
 8004042:	210a      	movs	r1, #10
 8004044:	4880      	ldr	r0, [pc, #512]	; (8004248 <Set_Screen+0x1a94>)
 8004046:	f003 faff 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.work_pump1,0, 1, Control_DB.RazrPointer, 3,   1, 470, 80, 800,480, Page[6], FonColor[1], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800404a:	4b79      	ldr	r3, [pc, #484]	; (8004230 <Set_Screen+0x1a7c>)
 800404c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004050:	461c      	mov	r4, r3
 8004052:	4b75      	ldr	r3, [pc, #468]	; (8004228 <Set_Screen+0x1a74>)
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	4a72      	ldr	r2, [pc, #456]	; (8004220 <Set_Screen+0x1a6c>)
 8004058:	6852      	ldr	r2, [r2, #4]
 800405a:	4972      	ldr	r1, [pc, #456]	; (8004224 <Set_Screen+0x1a70>)
 800405c:	6809      	ldr	r1, [r1, #0]
 800405e:	2012      	movs	r0, #18
 8004060:	900b      	str	r0, [sp, #44]	; 0x2c
 8004062:	200b      	movs	r0, #11
 8004064:	900a      	str	r0, [sp, #40]	; 0x28
 8004066:	4873      	ldr	r0, [pc, #460]	; (8004234 <Set_Screen+0x1a80>)
 8004068:	9009      	str	r0, [sp, #36]	; 0x24
 800406a:	9108      	str	r1, [sp, #32]
 800406c:	9207      	str	r2, [sp, #28]
 800406e:	9306      	str	r3, [sp, #24]
 8004070:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004074:	9305      	str	r3, [sp, #20]
 8004076:	f44f 7348 	mov.w	r3, #800	; 0x320
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	2350      	movs	r3, #80	; 0x50
 800407e:	9303      	str	r3, [sp, #12]
 8004080:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004084:	9302      	str	r3, [sp, #8]
 8004086:	2301      	movs	r3, #1
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	2303      	movs	r3, #3
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	4623      	mov	r3, r4
 8004090:	2201      	movs	r2, #1
 8004092:	2100      	movs	r1, #0
 8004094:	486d      	ldr	r0, [pc, #436]	; (800424c <Set_Screen+0x1a98>)
 8004096:	f004 f875 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
				update_station_pump(BUV_settings.work_pump1,80);
 800409a:	4b68      	ldr	r3, [pc, #416]	; (800423c <Set_Screen+0x1a88>)
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2150      	movs	r1, #80	; 0x50
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fc feb7 	bl	8000e14 <update_station_pump>

				Short_Left_Colored_RU_DrawString_32("Насос АНН2", 10,30,  110,FonColor[2], BasicSymbolColor, Page[6]);
 80040a6:	4b5e      	ldr	r3, [pc, #376]	; (8004220 <Set_Screen+0x1a6c>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4a5e      	ldr	r2, [pc, #376]	; (8004224 <Set_Screen+0x1a70>)
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	495e      	ldr	r1, [pc, #376]	; (8004228 <Set_Screen+0x1a74>)
 80040b0:	6989      	ldr	r1, [r1, #24]
 80040b2:	9102      	str	r1, [sp, #8]
 80040b4:	9201      	str	r2, [sp, #4]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	236e      	movs	r3, #110	; 0x6e
 80040ba:	221e      	movs	r2, #30
 80040bc:	210a      	movs	r1, #10
 80040be:	4864      	ldr	r0, [pc, #400]	; (8004250 <Set_Screen+0x1a9c>)
 80040c0:	f003 fac2 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.work_pump2,0, 1, Control_DB.RazrPointer, 3,   1, 470, 110, 800,480, Page[6], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80040c4:	4b5a      	ldr	r3, [pc, #360]	; (8004230 <Set_Screen+0x1a7c>)
 80040c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80040ca:	461c      	mov	r4, r3
 80040cc:	4b56      	ldr	r3, [pc, #344]	; (8004228 <Set_Screen+0x1a74>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4a53      	ldr	r2, [pc, #332]	; (8004220 <Set_Screen+0x1a6c>)
 80040d2:	6892      	ldr	r2, [r2, #8]
 80040d4:	4953      	ldr	r1, [pc, #332]	; (8004224 <Set_Screen+0x1a70>)
 80040d6:	6809      	ldr	r1, [r1, #0]
 80040d8:	2012      	movs	r0, #18
 80040da:	900b      	str	r0, [sp, #44]	; 0x2c
 80040dc:	200b      	movs	r0, #11
 80040de:	900a      	str	r0, [sp, #40]	; 0x28
 80040e0:	4854      	ldr	r0, [pc, #336]	; (8004234 <Set_Screen+0x1a80>)
 80040e2:	9009      	str	r0, [sp, #36]	; 0x24
 80040e4:	9108      	str	r1, [sp, #32]
 80040e6:	9207      	str	r2, [sp, #28]
 80040e8:	9306      	str	r3, [sp, #24]
 80040ea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80040ee:	9305      	str	r3, [sp, #20]
 80040f0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80040f4:	9304      	str	r3, [sp, #16]
 80040f6:	236e      	movs	r3, #110	; 0x6e
 80040f8:	9303      	str	r3, [sp, #12]
 80040fa:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80040fe:	9302      	str	r3, [sp, #8]
 8004100:	2301      	movs	r3, #1
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	2303      	movs	r3, #3
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	4623      	mov	r3, r4
 800410a:	2201      	movs	r2, #1
 800410c:	2100      	movs	r1, #0
 800410e:	4851      	ldr	r0, [pc, #324]	; (8004254 <Set_Screen+0x1aa0>)
 8004110:	f004 f838 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
				update_station_pump(BUV_settings.work_pump2,110);
 8004114:	4b49      	ldr	r3, [pc, #292]	; (800423c <Set_Screen+0x1a88>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	216e      	movs	r1, #110	; 0x6e
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fe7a 	bl	8000e14 <update_station_pump>
				Short_Left_Colored_RU_DrawString_32("Насос АНН3", 10,30,  140, FonColor[3], BasicSymbolColor, Page[6]);
 8004120:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <Set_Screen+0x1a6c>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4a3f      	ldr	r2, [pc, #252]	; (8004224 <Set_Screen+0x1a70>)
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	493f      	ldr	r1, [pc, #252]	; (8004228 <Set_Screen+0x1a74>)
 800412a:	6989      	ldr	r1, [r1, #24]
 800412c:	9102      	str	r1, [sp, #8]
 800412e:	9201      	str	r2, [sp, #4]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	238c      	movs	r3, #140	; 0x8c
 8004134:	221e      	movs	r2, #30
 8004136:	210a      	movs	r1, #10
 8004138:	4847      	ldr	r0, [pc, #284]	; (8004258 <Set_Screen+0x1aa4>)
 800413a:	f003 fa85 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.work_pump3,0, 1, Control_DB.RazrPointer, 3,   1, 470, 140, 800,480, Page[6], FonColor[3], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800413e:	4b3c      	ldr	r3, [pc, #240]	; (8004230 <Set_Screen+0x1a7c>)
 8004140:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004144:	461c      	mov	r4, r3
 8004146:	4b38      	ldr	r3, [pc, #224]	; (8004228 <Set_Screen+0x1a74>)
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	4a35      	ldr	r2, [pc, #212]	; (8004220 <Set_Screen+0x1a6c>)
 800414c:	68d2      	ldr	r2, [r2, #12]
 800414e:	4935      	ldr	r1, [pc, #212]	; (8004224 <Set_Screen+0x1a70>)
 8004150:	6809      	ldr	r1, [r1, #0]
 8004152:	2012      	movs	r0, #18
 8004154:	900b      	str	r0, [sp, #44]	; 0x2c
 8004156:	200b      	movs	r0, #11
 8004158:	900a      	str	r0, [sp, #40]	; 0x28
 800415a:	4836      	ldr	r0, [pc, #216]	; (8004234 <Set_Screen+0x1a80>)
 800415c:	9009      	str	r0, [sp, #36]	; 0x24
 800415e:	9108      	str	r1, [sp, #32]
 8004160:	9207      	str	r2, [sp, #28]
 8004162:	9306      	str	r3, [sp, #24]
 8004164:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004168:	9305      	str	r3, [sp, #20]
 800416a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800416e:	9304      	str	r3, [sp, #16]
 8004170:	238c      	movs	r3, #140	; 0x8c
 8004172:	9303      	str	r3, [sp, #12]
 8004174:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004178:	9302      	str	r3, [sp, #8]
 800417a:	2301      	movs	r3, #1
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	2303      	movs	r3, #3
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	4623      	mov	r3, r4
 8004184:	2201      	movs	r2, #1
 8004186:	2100      	movs	r1, #0
 8004188:	4834      	ldr	r0, [pc, #208]	; (800425c <Set_Screen+0x1aa8>)
 800418a:	f003 fffb 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
				update_station_pump(BUV_settings.work_pump3,140);
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <Set_Screen+0x1a88>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	218c      	movs	r1, #140	; 0x8c
 8004194:	4618      	mov	r0, r3
 8004196:	f7fc fe3d 	bl	8000e14 <update_station_pump>
				
				Short_Left_Colored_RU_DrawString_32("Время раб нас", 13,30,  170, FonColor[4], BasicSymbolColor, Page[6]);
 800419a:	4b21      	ldr	r3, [pc, #132]	; (8004220 <Set_Screen+0x1a6c>)
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	4a21      	ldr	r2, [pc, #132]	; (8004224 <Set_Screen+0x1a70>)
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	4921      	ldr	r1, [pc, #132]	; (8004228 <Set_Screen+0x1a74>)
 80041a4:	6989      	ldr	r1, [r1, #24]
 80041a6:	9102      	str	r1, [sp, #8]
 80041a8:	9201      	str	r2, [sp, #4]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	23aa      	movs	r3, #170	; 0xaa
 80041ae:	221e      	movs	r2, #30
 80041b0:	210d      	movs	r1, #13
 80041b2:	482b      	ldr	r0, [pc, #172]	; (8004260 <Set_Screen+0x1aac>)
 80041b4:	f003 fa48 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Ч", 1,585,  170, BackgroundColor, BasicSymbolColor, Page[6]);
 80041b8:	4b21      	ldr	r3, [pc, #132]	; (8004240 <Set_Screen+0x1a8c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a19      	ldr	r2, [pc, #100]	; (8004224 <Set_Screen+0x1a70>)
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	4919      	ldr	r1, [pc, #100]	; (8004228 <Set_Screen+0x1a74>)
 80041c2:	6989      	ldr	r1, [r1, #24]
 80041c4:	9102      	str	r1, [sp, #8]
 80041c6:	9201      	str	r2, [sp, #4]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	23aa      	movs	r3, #170	; 0xaa
 80041cc:	f240 2249 	movw	r2, #585	; 0x249
 80041d0:	2101      	movs	r1, #1
 80041d2:	4824      	ldr	r0, [pc, #144]	; (8004264 <Set_Screen+0x1ab0>)
 80041d4:	f003 fa38 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.time_of_work_pump,0, 3, Control_DB.RazrPointer, 120,  5, 470, 170, 800,480, Page[6], FonColor[4], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80041d8:	4b15      	ldr	r3, [pc, #84]	; (8004230 <Set_Screen+0x1a7c>)
 80041da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041de:	461c      	mov	r4, r3
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <Set_Screen+0x1a74>)
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	4a0e      	ldr	r2, [pc, #56]	; (8004220 <Set_Screen+0x1a6c>)
 80041e6:	6912      	ldr	r2, [r2, #16]
 80041e8:	490e      	ldr	r1, [pc, #56]	; (8004224 <Set_Screen+0x1a70>)
 80041ea:	6809      	ldr	r1, [r1, #0]
 80041ec:	2012      	movs	r0, #18
 80041ee:	900b      	str	r0, [sp, #44]	; 0x2c
 80041f0:	200b      	movs	r0, #11
 80041f2:	900a      	str	r0, [sp, #40]	; 0x28
 80041f4:	480f      	ldr	r0, [pc, #60]	; (8004234 <Set_Screen+0x1a80>)
 80041f6:	9009      	str	r0, [sp, #36]	; 0x24
 80041f8:	9108      	str	r1, [sp, #32]
 80041fa:	9207      	str	r2, [sp, #28]
 80041fc:	9306      	str	r3, [sp, #24]
 80041fe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004208:	9304      	str	r3, [sp, #16]
 800420a:	23aa      	movs	r3, #170	; 0xaa
 800420c:	9303      	str	r3, [sp, #12]
 800420e:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004212:	9302      	str	r3, [sp, #8]
 8004214:	2305      	movs	r3, #5
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	2378      	movs	r3, #120	; 0x78
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	4623      	mov	r3, r4
 800421e:	e023      	b.n	8004268 <Set_Screen+0x1ab4>
 8004220:	200000a4 	.word	0x200000a4
 8004224:	200009f4 	.word	0x200009f4
 8004228:	20000980 	.word	0x20000980
 800422c:	0800e964 	.word	0x0800e964
 8004230:	20000b70 	.word	0x20000b70
 8004234:	080117b0 	.word	0x080117b0
 8004238:	20000b88 	.word	0x20000b88
 800423c:	20000b84 	.word	0x20000b84
 8004240:	20000008 	.word	0x20000008
 8004244:	0800e980 	.word	0x0800e980
 8004248:	0800e98c 	.word	0x0800e98c
 800424c:	20000b98 	.word	0x20000b98
 8004250:	0800e9a0 	.word	0x0800e9a0
 8004254:	20000b9c 	.word	0x20000b9c
 8004258:	0800e9b4 	.word	0x0800e9b4
 800425c:	20000ba0 	.word	0x20000ba0
 8004260:	0800e9c8 	.word	0x0800e9c8
 8004264:	0800e9e4 	.word	0x0800e9e4
 8004268:	2203      	movs	r2, #3
 800426a:	2100      	movs	r1, #0
 800426c:	48a2      	ldr	r0, [pc, #648]	; (80044f8 <Set_Screen+0x1d44>)
 800426e:	f003 ff89 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

				Short_Left_Colored_RU_DrawString_32("Настр кол раб нас", 17, 30, 200, FonColor[5], BasicSymbolColor, Page[6]);
 8004272:	4ba2      	ldr	r3, [pc, #648]	; (80044fc <Set_Screen+0x1d48>)
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	4aa2      	ldr	r2, [pc, #648]	; (8004500 <Set_Screen+0x1d4c>)
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	49a2      	ldr	r1, [pc, #648]	; (8004504 <Set_Screen+0x1d50>)
 800427c:	6989      	ldr	r1, [r1, #24]
 800427e:	9102      	str	r1, [sp, #8]
 8004280:	9201      	str	r2, [sp, #4]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	23c8      	movs	r3, #200	; 0xc8
 8004286:	221e      	movs	r2, #30
 8004288:	2111      	movs	r1, #17
 800428a:	489f      	ldr	r0, [pc, #636]	; (8004508 <Set_Screen+0x1d54>)
 800428c:	f003 f9dc 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.count_work_pump,0, 1, Control_DB.RazrPointer, 3,   1, 470, 200, 800,480, Page[6], FonColor[5], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004290:	4b9e      	ldr	r3, [pc, #632]	; (800450c <Set_Screen+0x1d58>)
 8004292:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004296:	461c      	mov	r4, r3
 8004298:	4b9a      	ldr	r3, [pc, #616]	; (8004504 <Set_Screen+0x1d50>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	4a97      	ldr	r2, [pc, #604]	; (80044fc <Set_Screen+0x1d48>)
 800429e:	6952      	ldr	r2, [r2, #20]
 80042a0:	4997      	ldr	r1, [pc, #604]	; (8004500 <Set_Screen+0x1d4c>)
 80042a2:	6809      	ldr	r1, [r1, #0]
 80042a4:	2012      	movs	r0, #18
 80042a6:	900b      	str	r0, [sp, #44]	; 0x2c
 80042a8:	200b      	movs	r0, #11
 80042aa:	900a      	str	r0, [sp, #40]	; 0x28
 80042ac:	4898      	ldr	r0, [pc, #608]	; (8004510 <Set_Screen+0x1d5c>)
 80042ae:	9009      	str	r0, [sp, #36]	; 0x24
 80042b0:	9108      	str	r1, [sp, #32]
 80042b2:	9207      	str	r2, [sp, #28]
 80042b4:	9306      	str	r3, [sp, #24]
 80042b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80042ba:	9305      	str	r3, [sp, #20]
 80042bc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80042c0:	9304      	str	r3, [sp, #16]
 80042c2:	23c8      	movs	r3, #200	; 0xc8
 80042c4:	9303      	str	r3, [sp, #12]
 80042c6:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80042ca:	9302      	str	r3, [sp, #8]
 80042cc:	2301      	movs	r3, #1
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	2303      	movs	r3, #3
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	4623      	mov	r3, r4
 80042d6:	2201      	movs	r2, #1
 80042d8:	2100      	movs	r1, #0
 80042da:	488e      	ldr	r0, [pc, #568]	; (8004514 <Set_Screen+0x1d60>)
 80042dc:	f003 ff52 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

				Short_Left_Colored_RU_DrawString_32("Конц эмульсии    ", 17,30,  230, FonColor[6], BasicSymbolColor, Page[6]);
 80042e0:	4b86      	ldr	r3, [pc, #536]	; (80044fc <Set_Screen+0x1d48>)
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	4a86      	ldr	r2, [pc, #536]	; (8004500 <Set_Screen+0x1d4c>)
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	4986      	ldr	r1, [pc, #536]	; (8004504 <Set_Screen+0x1d50>)
 80042ea:	6989      	ldr	r1, [r1, #24]
 80042ec:	9102      	str	r1, [sp, #8]
 80042ee:	9201      	str	r2, [sp, #4]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	23e6      	movs	r3, #230	; 0xe6
 80042f4:	221e      	movs	r2, #30
 80042f6:	2111      	movs	r1, #17
 80042f8:	4887      	ldr	r0, [pc, #540]	; (8004518 <Set_Screen+0x1d64>)
 80042fa:	f003 f9a5 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.conc_emul,1, 3, Control_DB.RazrPointer, 50,   10, 470, 230, 800,480, Page[6], FonColor[6], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80042fe:	4b83      	ldr	r3, [pc, #524]	; (800450c <Set_Screen+0x1d58>)
 8004300:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004304:	461c      	mov	r4, r3
 8004306:	4b7f      	ldr	r3, [pc, #508]	; (8004504 <Set_Screen+0x1d50>)
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	4a7c      	ldr	r2, [pc, #496]	; (80044fc <Set_Screen+0x1d48>)
 800430c:	6992      	ldr	r2, [r2, #24]
 800430e:	497c      	ldr	r1, [pc, #496]	; (8004500 <Set_Screen+0x1d4c>)
 8004310:	6809      	ldr	r1, [r1, #0]
 8004312:	2012      	movs	r0, #18
 8004314:	900b      	str	r0, [sp, #44]	; 0x2c
 8004316:	200b      	movs	r0, #11
 8004318:	900a      	str	r0, [sp, #40]	; 0x28
 800431a:	487d      	ldr	r0, [pc, #500]	; (8004510 <Set_Screen+0x1d5c>)
 800431c:	9009      	str	r0, [sp, #36]	; 0x24
 800431e:	9108      	str	r1, [sp, #32]
 8004320:	9207      	str	r2, [sp, #28]
 8004322:	9306      	str	r3, [sp, #24]
 8004324:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004328:	9305      	str	r3, [sp, #20]
 800432a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800432e:	9304      	str	r3, [sp, #16]
 8004330:	23e6      	movs	r3, #230	; 0xe6
 8004332:	9303      	str	r3, [sp, #12]
 8004334:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004338:	9302      	str	r3, [sp, #8]
 800433a:	230a      	movs	r3, #10
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	2332      	movs	r3, #50	; 0x32
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4623      	mov	r3, r4
 8004344:	2203      	movs	r2, #3
 8004346:	2101      	movs	r1, #1
 8004348:	4874      	ldr	r0, [pc, #464]	; (800451c <Set_Screen+0x1d68>)
 800434a:	f003 ff1b 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
				Short_Left_Colored_RU_DrawString_32("моль/л", 6,600,  230, BackgroundColor, BasicSymbolColor, Page[6]);
 800434e:	4b74      	ldr	r3, [pc, #464]	; (8004520 <Set_Screen+0x1d6c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6b      	ldr	r2, [pc, #428]	; (8004500 <Set_Screen+0x1d4c>)
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	496b      	ldr	r1, [pc, #428]	; (8004504 <Set_Screen+0x1d50>)
 8004358:	6989      	ldr	r1, [r1, #24]
 800435a:	9102      	str	r1, [sp, #8]
 800435c:	9201      	str	r2, [sp, #4]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	23e6      	movs	r3, #230	; 0xe6
 8004362:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004366:	2106      	movs	r1, #6
 8004368:	486e      	ldr	r0, [pc, #440]	; (8004524 <Set_Screen+0x1d70>)
 800436a:	f003 f96d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

				Short_Left_Colored_RU_DrawString_32("Настр промыв нап фильт", 22, 30, 260, FonColor[7], BasicSymbolColor, Page[6]);
 800436e:	4b63      	ldr	r3, [pc, #396]	; (80044fc <Set_Screen+0x1d48>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	4a63      	ldr	r2, [pc, #396]	; (8004500 <Set_Screen+0x1d4c>)
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	4963      	ldr	r1, [pc, #396]	; (8004504 <Set_Screen+0x1d50>)
 8004378:	6989      	ldr	r1, [r1, #24]
 800437a:	9102      	str	r1, [sp, #8]
 800437c:	9201      	str	r2, [sp, #4]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004384:	221e      	movs	r2, #30
 8004386:	2116      	movs	r1, #22
 8004388:	4867      	ldr	r0, [pc, #412]	; (8004528 <Set_Screen+0x1d74>)
 800438a:	f003 f95d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

				Short_Left_Colored_RU_DrawString_32("Настр промыв фильт воды", 23, 30, 290, FonColor[8], BasicSymbolColor, Page[6]);
 800438e:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <Set_Screen+0x1d48>)
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	4a5b      	ldr	r2, [pc, #364]	; (8004500 <Set_Screen+0x1d4c>)
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	495b      	ldr	r1, [pc, #364]	; (8004504 <Set_Screen+0x1d50>)
 8004398:	6989      	ldr	r1, [r1, #24]
 800439a:	9102      	str	r1, [sp, #8]
 800439c:	9201      	str	r2, [sp, #4]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	f44f 7391 	mov.w	r3, #290	; 0x122
 80043a4:	221e      	movs	r2, #30
 80043a6:	2117      	movs	r1, #23
 80043a8:	4860      	ldr	r0, [pc, #384]	; (800452c <Set_Screen+0x1d78>)
 80043aa:	f003 f94d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

				Short_Left_Colored_RU_DrawString_32("Настр мин уровн конц", 20, 30, 320, FonColor[9], BasicSymbolColor, Page[6]);
 80043ae:	4b53      	ldr	r3, [pc, #332]	; (80044fc <Set_Screen+0x1d48>)
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	4a53      	ldr	r2, [pc, #332]	; (8004500 <Set_Screen+0x1d4c>)
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	4953      	ldr	r1, [pc, #332]	; (8004504 <Set_Screen+0x1d50>)
 80043b8:	6989      	ldr	r1, [r1, #24]
 80043ba:	9102      	str	r1, [sp, #8]
 80043bc:	9201      	str	r2, [sp, #4]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80043c4:	221e      	movs	r2, #30
 80043c6:	2114      	movs	r1, #20
 80043c8:	4859      	ldr	r0, [pc, #356]	; (8004530 <Set_Screen+0x1d7c>)
 80043ca:	f003 f93d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.min_level_conc,0, 3, Control_DB.RazrPointer, 100,   0, 470, 320, 800,480, Page[6], FonColor[9], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80043ce:	4b4f      	ldr	r3, [pc, #316]	; (800450c <Set_Screen+0x1d58>)
 80043d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043d4:	461c      	mov	r4, r3
 80043d6:	4b4b      	ldr	r3, [pc, #300]	; (8004504 <Set_Screen+0x1d50>)
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	4a48      	ldr	r2, [pc, #288]	; (80044fc <Set_Screen+0x1d48>)
 80043dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043de:	4948      	ldr	r1, [pc, #288]	; (8004500 <Set_Screen+0x1d4c>)
 80043e0:	6809      	ldr	r1, [r1, #0]
 80043e2:	2012      	movs	r0, #18
 80043e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80043e6:	200b      	movs	r0, #11
 80043e8:	900a      	str	r0, [sp, #40]	; 0x28
 80043ea:	4849      	ldr	r0, [pc, #292]	; (8004510 <Set_Screen+0x1d5c>)
 80043ec:	9009      	str	r0, [sp, #36]	; 0x24
 80043ee:	9108      	str	r1, [sp, #32]
 80043f0:	9207      	str	r2, [sp, #28]
 80043f2:	9306      	str	r3, [sp, #24]
 80043f4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80043f8:	9305      	str	r3, [sp, #20]
 80043fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80043fe:	9304      	str	r3, [sp, #16]
 8004400:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004404:	9303      	str	r3, [sp, #12]
 8004406:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800440a:	9302      	str	r3, [sp, #8]
 800440c:	2300      	movs	r3, #0
 800440e:	9301      	str	r3, [sp, #4]
 8004410:	2364      	movs	r3, #100	; 0x64
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	4623      	mov	r3, r4
 8004416:	2203      	movs	r2, #3
 8004418:	2100      	movs	r1, #0
 800441a:	4846      	ldr	r0, [pc, #280]	; (8004534 <Set_Screen+0x1d80>)
 800441c:	f003 feb2 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
				Short_Left_Colored_RU_DrawString_32("Процент", 7,600,  320, BackgroundColor, BasicSymbolColor, Page[6]);
 8004420:	4b3f      	ldr	r3, [pc, #252]	; (8004520 <Set_Screen+0x1d6c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a36      	ldr	r2, [pc, #216]	; (8004500 <Set_Screen+0x1d4c>)
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	4936      	ldr	r1, [pc, #216]	; (8004504 <Set_Screen+0x1d50>)
 800442a:	6989      	ldr	r1, [r1, #24]
 800442c:	9102      	str	r1, [sp, #8]
 800442e:	9201      	str	r2, [sp, #4]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004436:	f44f 7216 	mov.w	r2, #600	; 0x258
 800443a:	2107      	movs	r1, #7
 800443c:	483e      	ldr	r0, [pc, #248]	; (8004538 <Set_Screen+0x1d84>)
 800443e:	f003 f903 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

				Short_Left_Colored_RU_DrawString_32("Настр уровн авт разгр", 21, 30, 350, FonColor[10], BasicSymbolColor, Page[6]);
 8004442:	4b2e      	ldr	r3, [pc, #184]	; (80044fc <Set_Screen+0x1d48>)
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	4a2e      	ldr	r2, [pc, #184]	; (8004500 <Set_Screen+0x1d4c>)
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	492e      	ldr	r1, [pc, #184]	; (8004504 <Set_Screen+0x1d50>)
 800444c:	6989      	ldr	r1, [r1, #24]
 800444e:	9102      	str	r1, [sp, #8]
 8004450:	9201      	str	r2, [sp, #4]
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004458:	221e      	movs	r2, #30
 800445a:	2115      	movs	r1, #21
 800445c:	4837      	ldr	r0, [pc, #220]	; (800453c <Set_Screen+0x1d88>)
 800445e:	f003 f8f3 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.work_auto_unload,0, 1, Control_DB.RazrPointer, 1,   0, 470, 350, 800,480, Page[6], FonColor[10], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <Set_Screen+0x1d58>)
 8004464:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004468:	461c      	mov	r4, r3
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <Set_Screen+0x1d50>)
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	4a23      	ldr	r2, [pc, #140]	; (80044fc <Set_Screen+0x1d48>)
 8004470:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004472:	4923      	ldr	r1, [pc, #140]	; (8004500 <Set_Screen+0x1d4c>)
 8004474:	6809      	ldr	r1, [r1, #0]
 8004476:	2012      	movs	r0, #18
 8004478:	900b      	str	r0, [sp, #44]	; 0x2c
 800447a:	200b      	movs	r0, #11
 800447c:	900a      	str	r0, [sp, #40]	; 0x28
 800447e:	4824      	ldr	r0, [pc, #144]	; (8004510 <Set_Screen+0x1d5c>)
 8004480:	9009      	str	r0, [sp, #36]	; 0x24
 8004482:	9108      	str	r1, [sp, #32]
 8004484:	9207      	str	r2, [sp, #28]
 8004486:	9306      	str	r3, [sp, #24]
 8004488:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800448c:	9305      	str	r3, [sp, #20]
 800448e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004492:	9304      	str	r3, [sp, #16]
 8004494:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004498:	9303      	str	r3, [sp, #12]
 800449a:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800449e:	9302      	str	r3, [sp, #8]
 80044a0:	2300      	movs	r3, #0
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	2301      	movs	r3, #1
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	4623      	mov	r3, r4
 80044aa:	2201      	movs	r2, #1
 80044ac:	2100      	movs	r1, #0
 80044ae:	4824      	ldr	r0, [pc, #144]	; (8004540 <Set_Screen+0x1d8c>)
 80044b0:	f003 fe68 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
				setting_auto_unload(BUV_settings.work_auto_unload);
 80044b4:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <Set_Screen+0x1d44>)
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fc fd07 	bl	8000ecc <setting_auto_unload>

				Short_Left_Colored_RU_DrawString_32("Настр мин уровн эмул", 20, 30, 380, FonColor[11], BasicSymbolColor, Page[6]);
 80044be:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <Set_Screen+0x1d48>)
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	4a0f      	ldr	r2, [pc, #60]	; (8004500 <Set_Screen+0x1d4c>)
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	490f      	ldr	r1, [pc, #60]	; (8004504 <Set_Screen+0x1d50>)
 80044c8:	6989      	ldr	r1, [r1, #24]
 80044ca:	9102      	str	r1, [sp, #8]
 80044cc:	9201      	str	r2, [sp, #4]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	f44f 73be 	mov.w	r3, #380	; 0x17c
 80044d4:	221e      	movs	r2, #30
 80044d6:	2114      	movs	r1, #20
 80044d8:	481a      	ldr	r0, [pc, #104]	; (8004544 <Set_Screen+0x1d90>)
 80044da:	f003 f8b5 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.min_level_emul,0, 3, Control_DB.RazrPointer, 100,   0, 470, 380, 800,480, Page[6], FonColor[11], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <Set_Screen+0x1d58>)
 80044e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80044e4:	461c      	mov	r4, r3
 80044e6:	4b07      	ldr	r3, [pc, #28]	; (8004504 <Set_Screen+0x1d50>)
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	4a04      	ldr	r2, [pc, #16]	; (80044fc <Set_Screen+0x1d48>)
 80044ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044ee:	4904      	ldr	r1, [pc, #16]	; (8004500 <Set_Screen+0x1d4c>)
 80044f0:	6809      	ldr	r1, [r1, #0]
 80044f2:	2012      	movs	r0, #18
 80044f4:	e028      	b.n	8004548 <Set_Screen+0x1d94>
 80044f6:	bf00      	nop
 80044f8:	20000b84 	.word	0x20000b84
 80044fc:	200000a4 	.word	0x200000a4
 8004500:	200009f4 	.word	0x200009f4
 8004504:	20000980 	.word	0x20000980
 8004508:	0800e9e8 	.word	0x0800e9e8
 800450c:	20000b70 	.word	0x20000b70
 8004510:	080117b0 	.word	0x080117b0
 8004514:	20000ba4 	.word	0x20000ba4
 8004518:	0800ea08 	.word	0x0800ea08
 800451c:	20000b90 	.word	0x20000b90
 8004520:	20000008 	.word	0x20000008
 8004524:	0800ea28 	.word	0x0800ea28
 8004528:	0800ea34 	.word	0x0800ea34
 800452c:	0800ea60 	.word	0x0800ea60
 8004530:	0800ea8c 	.word	0x0800ea8c
 8004534:	20000bb0 	.word	0x20000bb0
 8004538:	0800eab4 	.word	0x0800eab4
 800453c:	0800eac4 	.word	0x0800eac4
 8004540:	20000ba8 	.word	0x20000ba8
 8004544:	0800eaec 	.word	0x0800eaec
 8004548:	900b      	str	r0, [sp, #44]	; 0x2c
 800454a:	200b      	movs	r0, #11
 800454c:	900a      	str	r0, [sp, #40]	; 0x28
 800454e:	4873      	ldr	r0, [pc, #460]	; (800471c <Set_Screen+0x1f68>)
 8004550:	9009      	str	r0, [sp, #36]	; 0x24
 8004552:	9108      	str	r1, [sp, #32]
 8004554:	9207      	str	r2, [sp, #28]
 8004556:	9306      	str	r3, [sp, #24]
 8004558:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800455c:	9305      	str	r3, [sp, #20]
 800455e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004562:	9304      	str	r3, [sp, #16]
 8004564:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8004568:	9303      	str	r3, [sp, #12]
 800456a:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800456e:	9302      	str	r3, [sp, #8]
 8004570:	2300      	movs	r3, #0
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	2364      	movs	r3, #100	; 0x64
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	4623      	mov	r3, r4
 800457a:	2203      	movs	r2, #3
 800457c:	2100      	movs	r1, #0
 800457e:	4868      	ldr	r0, [pc, #416]	; (8004720 <Set_Screen+0x1f6c>)
 8004580:	f003 fe00 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
				Short_Left_Colored_RU_DrawString_32("Процент", 7,600,  380, BackgroundColor, BasicSymbolColor, Page[6]);
 8004584:	4b67      	ldr	r3, [pc, #412]	; (8004724 <Set_Screen+0x1f70>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a67      	ldr	r2, [pc, #412]	; (8004728 <Set_Screen+0x1f74>)
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	4967      	ldr	r1, [pc, #412]	; (800472c <Set_Screen+0x1f78>)
 800458e:	6989      	ldr	r1, [r1, #24]
 8004590:	9102      	str	r1, [sp, #8]
 8004592:	9201      	str	r2, [sp, #4]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800459a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800459e:	2107      	movs	r1, #7
 80045a0:	4863      	ldr	r0, [pc, #396]	; (8004730 <Set_Screen+0x1f7c>)
 80045a2:	f003 f851 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

				Short_Left_Colored_RU_DrawString_32("Мин уровн эмул УПЭ", 18, 30, 410, FonColor[12], BasicSymbolColor, Page[6]);
 80045a6:	4b63      	ldr	r3, [pc, #396]	; (8004734 <Set_Screen+0x1f80>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	4a5f      	ldr	r2, [pc, #380]	; (8004728 <Set_Screen+0x1f74>)
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	495f      	ldr	r1, [pc, #380]	; (800472c <Set_Screen+0x1f78>)
 80045b0:	6989      	ldr	r1, [r1, #24]
 80045b2:	9102      	str	r1, [sp, #8]
 80045b4:	9201      	str	r2, [sp, #4]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80045bc:	221e      	movs	r2, #30
 80045be:	2112      	movs	r1, #18
 80045c0:	485d      	ldr	r0, [pc, #372]	; (8004738 <Set_Screen+0x1f84>)
 80045c2:	f003 f841 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.min_level_emul_UP,0, 3, Control_DB.RazrPointer, 100,   0, 470, 410, 800,480, Page[6], FonColor[12], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80045c6:	4b5d      	ldr	r3, [pc, #372]	; (800473c <Set_Screen+0x1f88>)
 80045c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80045cc:	461c      	mov	r4, r3
 80045ce:	4b57      	ldr	r3, [pc, #348]	; (800472c <Set_Screen+0x1f78>)
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	4a58      	ldr	r2, [pc, #352]	; (8004734 <Set_Screen+0x1f80>)
 80045d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045d6:	4954      	ldr	r1, [pc, #336]	; (8004728 <Set_Screen+0x1f74>)
 80045d8:	6809      	ldr	r1, [r1, #0]
 80045da:	2012      	movs	r0, #18
 80045dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80045de:	200b      	movs	r0, #11
 80045e0:	900a      	str	r0, [sp, #40]	; 0x28
 80045e2:	484e      	ldr	r0, [pc, #312]	; (800471c <Set_Screen+0x1f68>)
 80045e4:	9009      	str	r0, [sp, #36]	; 0x24
 80045e6:	9108      	str	r1, [sp, #32]
 80045e8:	9207      	str	r2, [sp, #28]
 80045ea:	9306      	str	r3, [sp, #24]
 80045ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80045f0:	9305      	str	r3, [sp, #20]
 80045f2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80045f6:	9304      	str	r3, [sp, #16]
 80045f8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80045fc:	9303      	str	r3, [sp, #12]
 80045fe:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004602:	9302      	str	r3, [sp, #8]
 8004604:	2300      	movs	r3, #0
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	2364      	movs	r3, #100	; 0x64
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4623      	mov	r3, r4
 800460e:	2203      	movs	r2, #3
 8004610:	2100      	movs	r1, #0
 8004612:	484b      	ldr	r0, [pc, #300]	; (8004740 <Set_Screen+0x1f8c>)
 8004614:	f003 fdb6 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
				Short_Left_Colored_RU_DrawString_32("Процент", 7,600,  410, BackgroundColor, BasicSymbolColor, Page[6]);
 8004618:	4b42      	ldr	r3, [pc, #264]	; (8004724 <Set_Screen+0x1f70>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a42      	ldr	r2, [pc, #264]	; (8004728 <Set_Screen+0x1f74>)
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	4942      	ldr	r1, [pc, #264]	; (800472c <Set_Screen+0x1f78>)
 8004622:	6989      	ldr	r1, [r1, #24]
 8004624:	9102      	str	r1, [sp, #8]
 8004626:	9201      	str	r2, [sp, #4]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800462e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004632:	2107      	movs	r1, #7
 8004634:	483e      	ldr	r0, [pc, #248]	; (8004730 <Set_Screen+0x1f7c>)
 8004636:	f003 f807 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>


				Short_Left_Colored_RU_DrawString_32("Макс уровн эмул УПЭ", 19, 30, 440, FonColor[13], BasicSymbolColor, Page[6]);
 800463a:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <Set_Screen+0x1f80>)
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	4a3a      	ldr	r2, [pc, #232]	; (8004728 <Set_Screen+0x1f74>)
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	493a      	ldr	r1, [pc, #232]	; (800472c <Set_Screen+0x1f78>)
 8004644:	6989      	ldr	r1, [r1, #24]
 8004646:	9102      	str	r1, [sp, #8]
 8004648:	9201      	str	r2, [sp, #4]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8004650:	221e      	movs	r2, #30
 8004652:	2113      	movs	r1, #19
 8004654:	483b      	ldr	r0, [pc, #236]	; (8004744 <Set_Screen+0x1f90>)
 8004656:	f002 fff7 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.max_level_emul_UP,0, 3, Control_DB.RazrPointer, 100,   0, 470, 440, 800,480, Page[6], FonColor[13], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800465a:	4b38      	ldr	r3, [pc, #224]	; (800473c <Set_Screen+0x1f88>)
 800465c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004660:	461c      	mov	r4, r3
 8004662:	4b32      	ldr	r3, [pc, #200]	; (800472c <Set_Screen+0x1f78>)
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	4a33      	ldr	r2, [pc, #204]	; (8004734 <Set_Screen+0x1f80>)
 8004668:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800466a:	492f      	ldr	r1, [pc, #188]	; (8004728 <Set_Screen+0x1f74>)
 800466c:	6809      	ldr	r1, [r1, #0]
 800466e:	2012      	movs	r0, #18
 8004670:	900b      	str	r0, [sp, #44]	; 0x2c
 8004672:	200b      	movs	r0, #11
 8004674:	900a      	str	r0, [sp, #40]	; 0x28
 8004676:	4829      	ldr	r0, [pc, #164]	; (800471c <Set_Screen+0x1f68>)
 8004678:	9009      	str	r0, [sp, #36]	; 0x24
 800467a:	9108      	str	r1, [sp, #32]
 800467c:	9207      	str	r2, [sp, #28]
 800467e:	9306      	str	r3, [sp, #24]
 8004680:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004684:	9305      	str	r3, [sp, #20]
 8004686:	f44f 7348 	mov.w	r3, #800	; 0x320
 800468a:	9304      	str	r3, [sp, #16]
 800468c:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8004690:	9303      	str	r3, [sp, #12]
 8004692:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	2300      	movs	r3, #0
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	2364      	movs	r3, #100	; 0x64
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4623      	mov	r3, r4
 80046a2:	2203      	movs	r2, #3
 80046a4:	2100      	movs	r1, #0
 80046a6:	4828      	ldr	r0, [pc, #160]	; (8004748 <Set_Screen+0x1f94>)
 80046a8:	f003 fd6c 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
				Short_Left_Colored_RU_DrawString_32("Процент", 7,600,  440, BackgroundColor, BasicSymbolColor, Page[6]);
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <Set_Screen+0x1f70>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <Set_Screen+0x1f74>)
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	491d      	ldr	r1, [pc, #116]	; (800472c <Set_Screen+0x1f78>)
 80046b6:	6989      	ldr	r1, [r1, #24]
 80046b8:	9102      	str	r1, [sp, #8]
 80046ba:	9201      	str	r2, [sp, #4]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80046c2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80046c6:	2107      	movs	r1, #7
 80046c8:	4819      	ldr	r0, [pc, #100]	; (8004730 <Set_Screen+0x1f7c>)
 80046ca:	f002 ffbd 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

				Short_Left_Colored_RU_DrawString_32("Далее", 5, 30, 470, FonColor[14], BasicSymbolColor, Page[6]);
 80046ce:	4b19      	ldr	r3, [pc, #100]	; (8004734 <Set_Screen+0x1f80>)
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	4a15      	ldr	r2, [pc, #84]	; (8004728 <Set_Screen+0x1f74>)
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	4915      	ldr	r1, [pc, #84]	; (800472c <Set_Screen+0x1f78>)
 80046d8:	6989      	ldr	r1, [r1, #24]
 80046da:	9102      	str	r1, [sp, #8]
 80046dc:	9201      	str	r2, [sp, #4]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80046e4:	221e      	movs	r2, #30
 80046e6:	2105      	movs	r1, #5
 80046e8:	4818      	ldr	r0, [pc, #96]	; (800474c <Set_Screen+0x1f98>)
 80046ea:	f002 ffad 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Control_DB.MenuPointerMAX = 14;
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <Set_Screen+0x1f88>)
 80046f0:	220e      	movs	r2, #14
 80046f2:	809a      	strh	r2, [r3, #4]

			}
	


		break;
 80046f4:	f000 be57 	b.w	80053a6 <Set_Screen+0x2bf2>
				Short_Left_Colored_RU_DrawString_32("Ручн", 4,600,  50, BackgroundColor, BasicSymbolColor, Page[6]);
 80046f8:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <Set_Screen+0x1f70>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <Set_Screen+0x1f74>)
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	490a      	ldr	r1, [pc, #40]	; (800472c <Set_Screen+0x1f78>)
 8004702:	6989      	ldr	r1, [r1, #24]
 8004704:	9102      	str	r1, [sp, #8]
 8004706:	9201      	str	r2, [sp, #4]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2332      	movs	r3, #50	; 0x32
 800470c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004710:	2104      	movs	r1, #4
 8004712:	480f      	ldr	r0, [pc, #60]	; (8004750 <Set_Screen+0x1f9c>)
 8004714:	f002 ff98 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
		break;
 8004718:	f000 be45 	b.w	80053a6 <Set_Screen+0x2bf2>
 800471c:	080117b0 	.word	0x080117b0
 8004720:	20000bac 	.word	0x20000bac
 8004724:	20000008 	.word	0x20000008
 8004728:	200009f4 	.word	0x200009f4
 800472c:	20000980 	.word	0x20000980
 8004730:	0800eab4 	.word	0x0800eab4
 8004734:	200000a4 	.word	0x200000a4
 8004738:	0800eb14 	.word	0x0800eb14
 800473c:	20000b70 	.word	0x20000b70
 8004740:	20000bb4 	.word	0x20000bb4
 8004744:	0800eb38 	.word	0x0800eb38
 8004748:	20000bb8 	.word	0x20000bb8
 800474c:	0800eb5c 	.word	0x0800eb5c
 8004750:	0800eb68 	.word	0x0800eb68

		case 7: // Заводские настройки

			Short_Left_Colored_RU_DrawString_32("Макс кол-во одновр. раб. АНН :", 30,	20,  70, FonColor[0], BasicSymbolColor, Page[7]);
 8004754:	4b79      	ldr	r3, [pc, #484]	; (800493c <Set_Screen+0x2188>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a79      	ldr	r2, [pc, #484]	; (8004940 <Set_Screen+0x218c>)
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	4979      	ldr	r1, [pc, #484]	; (8004944 <Set_Screen+0x2190>)
 800475e:	69c9      	ldr	r1, [r1, #28]
 8004760:	9102      	str	r1, [sp, #8]
 8004762:	9201      	str	r2, [sp, #4]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	2346      	movs	r3, #70	; 0x46
 8004768:	2214      	movs	r2, #20
 800476a:	211e      	movs	r1, #30
 800476c:	4876      	ldr	r0, [pc, #472]	; (8004948 <Set_Screen+0x2194>)
 800476e:	f002 ff6b 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.Max_ANN_operation,   0, 1, Control_DB.RazrPointer,     3,      1, 700,  70, 800,480, Page[7], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004772:	4b76      	ldr	r3, [pc, #472]	; (800494c <Set_Screen+0x2198>)
 8004774:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004778:	461c      	mov	r4, r3
 800477a:	4b72      	ldr	r3, [pc, #456]	; (8004944 <Set_Screen+0x2190>)
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	4a6f      	ldr	r2, [pc, #444]	; (800493c <Set_Screen+0x2188>)
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	496f      	ldr	r1, [pc, #444]	; (8004940 <Set_Screen+0x218c>)
 8004784:	6809      	ldr	r1, [r1, #0]
 8004786:	2012      	movs	r0, #18
 8004788:	900b      	str	r0, [sp, #44]	; 0x2c
 800478a:	200b      	movs	r0, #11
 800478c:	900a      	str	r0, [sp, #40]	; 0x28
 800478e:	4870      	ldr	r0, [pc, #448]	; (8004950 <Set_Screen+0x219c>)
 8004790:	9009      	str	r0, [sp, #36]	; 0x24
 8004792:	9108      	str	r1, [sp, #32]
 8004794:	9207      	str	r2, [sp, #28]
 8004796:	9306      	str	r3, [sp, #24]
 8004798:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800479c:	9305      	str	r3, [sp, #20]
 800479e:	f44f 7348 	mov.w	r3, #800	; 0x320
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	2346      	movs	r3, #70	; 0x46
 80047a6:	9303      	str	r3, [sp, #12]
 80047a8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80047ac:	9302      	str	r3, [sp, #8]
 80047ae:	2301      	movs	r3, #1
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	2303      	movs	r3, #3
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	4623      	mov	r3, r4
 80047b8:	2201      	movs	r2, #1
 80047ba:	2100      	movs	r1, #0
 80047bc:	4865      	ldr	r0, [pc, #404]	; (8004954 <Set_Screen+0x21a0>)
 80047be:	f003 fce1 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Макс выставляемое давление   :", 30,	20, 110, FonColor[1], BasicSymbolColor, Page[7]);
 80047c2:	4b5e      	ldr	r3, [pc, #376]	; (800493c <Set_Screen+0x2188>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4a5e      	ldr	r2, [pc, #376]	; (8004940 <Set_Screen+0x218c>)
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	495e      	ldr	r1, [pc, #376]	; (8004944 <Set_Screen+0x2190>)
 80047cc:	69c9      	ldr	r1, [r1, #28]
 80047ce:	9102      	str	r1, [sp, #8]
 80047d0:	9201      	str	r2, [sp, #4]
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	236e      	movs	r3, #110	; 0x6e
 80047d6:	2214      	movs	r2, #20
 80047d8:	211e      	movs	r1, #30
 80047da:	485f      	ldr	r0, [pc, #380]	; (8004958 <Set_Screen+0x21a4>)
 80047dc:	f002 ff34 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.Max_Pressure, 	    0, 2, Control_DB.RazrPointer,    60,     10, 700, 110, 800,480, Page[7], FonColor[1], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80047e0:	4b5a      	ldr	r3, [pc, #360]	; (800494c <Set_Screen+0x2198>)
 80047e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047e6:	461c      	mov	r4, r3
 80047e8:	4b56      	ldr	r3, [pc, #344]	; (8004944 <Set_Screen+0x2190>)
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	4a53      	ldr	r2, [pc, #332]	; (800493c <Set_Screen+0x2188>)
 80047ee:	6852      	ldr	r2, [r2, #4]
 80047f0:	4953      	ldr	r1, [pc, #332]	; (8004940 <Set_Screen+0x218c>)
 80047f2:	6809      	ldr	r1, [r1, #0]
 80047f4:	2012      	movs	r0, #18
 80047f6:	900b      	str	r0, [sp, #44]	; 0x2c
 80047f8:	200b      	movs	r0, #11
 80047fa:	900a      	str	r0, [sp, #40]	; 0x28
 80047fc:	4854      	ldr	r0, [pc, #336]	; (8004950 <Set_Screen+0x219c>)
 80047fe:	9009      	str	r0, [sp, #36]	; 0x24
 8004800:	9108      	str	r1, [sp, #32]
 8004802:	9207      	str	r2, [sp, #28]
 8004804:	9306      	str	r3, [sp, #24]
 8004806:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800480a:	9305      	str	r3, [sp, #20]
 800480c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004810:	9304      	str	r3, [sp, #16]
 8004812:	236e      	movs	r3, #110	; 0x6e
 8004814:	9303      	str	r3, [sp, #12]
 8004816:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800481a:	9302      	str	r3, [sp, #8]
 800481c:	230a      	movs	r3, #10
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	233c      	movs	r3, #60	; 0x3c
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	4623      	mov	r3, r4
 8004826:	2202      	movs	r2, #2
 8004828:	2100      	movs	r1, #0
 800482a:	484c      	ldr	r0, [pc, #304]	; (800495c <Set_Screen+0x21a8>)
 800482c:	f003 fcaa 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Срок кап ремонта АНН (ч)     :", 30,	20, 150, FonColor[2], BasicSymbolColor, Page[7]);
 8004830:	4b42      	ldr	r3, [pc, #264]	; (800493c <Set_Screen+0x2188>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	4a42      	ldr	r2, [pc, #264]	; (8004940 <Set_Screen+0x218c>)
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	4942      	ldr	r1, [pc, #264]	; (8004944 <Set_Screen+0x2190>)
 800483a:	69c9      	ldr	r1, [r1, #28]
 800483c:	9102      	str	r1, [sp, #8]
 800483e:	9201      	str	r2, [sp, #4]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	2396      	movs	r3, #150	; 0x96
 8004844:	2214      	movs	r2, #20
 8004846:	211e      	movs	r1, #30
 8004848:	4845      	ldr	r0, [pc, #276]	; (8004960 <Set_Screen+0x21ac>)
 800484a:	f002 fefd 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.Major_repear_period, 0, 5, Control_DB.RazrPointer, 50000,   5000, 700, 150, 800,480, Page[7], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800484e:	4b3f      	ldr	r3, [pc, #252]	; (800494c <Set_Screen+0x2198>)
 8004850:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004854:	461c      	mov	r4, r3
 8004856:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <Set_Screen+0x2190>)
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	4a38      	ldr	r2, [pc, #224]	; (800493c <Set_Screen+0x2188>)
 800485c:	6892      	ldr	r2, [r2, #8]
 800485e:	4938      	ldr	r1, [pc, #224]	; (8004940 <Set_Screen+0x218c>)
 8004860:	6809      	ldr	r1, [r1, #0]
 8004862:	2012      	movs	r0, #18
 8004864:	900b      	str	r0, [sp, #44]	; 0x2c
 8004866:	200b      	movs	r0, #11
 8004868:	900a      	str	r0, [sp, #40]	; 0x28
 800486a:	4839      	ldr	r0, [pc, #228]	; (8004950 <Set_Screen+0x219c>)
 800486c:	9009      	str	r0, [sp, #36]	; 0x24
 800486e:	9108      	str	r1, [sp, #32]
 8004870:	9207      	str	r2, [sp, #28]
 8004872:	9306      	str	r3, [sp, #24]
 8004874:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004878:	9305      	str	r3, [sp, #20]
 800487a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800487e:	9304      	str	r3, [sp, #16]
 8004880:	2396      	movs	r3, #150	; 0x96
 8004882:	9303      	str	r3, [sp, #12]
 8004884:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8004888:	9302      	str	r3, [sp, #8]
 800488a:	f241 3388 	movw	r3, #5000	; 0x1388
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	4623      	mov	r3, r4
 8004898:	2205      	movs	r2, #5
 800489a:	2100      	movs	r1, #0
 800489c:	4831      	ldr	r0, [pc, #196]	; (8004964 <Set_Screen+0x21b0>)
 800489e:	f003 fc71 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Ур.эмульсии при котором откл :", 30,	20, 190, FonColor[3], BasicSymbolColor, Page[7]);
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <Set_Screen+0x2188>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	4a26      	ldr	r2, [pc, #152]	; (8004940 <Set_Screen+0x218c>)
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4926      	ldr	r1, [pc, #152]	; (8004944 <Set_Screen+0x2190>)
 80048ac:	69c9      	ldr	r1, [r1, #28]
 80048ae:	9102      	str	r1, [sp, #8]
 80048b0:	9201      	str	r2, [sp, #4]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	23be      	movs	r3, #190	; 0xbe
 80048b6:	2214      	movs	r2, #20
 80048b8:	211e      	movs	r1, #30
 80048ba:	482b      	ldr	r0, [pc, #172]	; (8004968 <Set_Screen+0x21b4>)
 80048bc:	f002 fec4 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.emulsion_off_level, 0, 3, Control_DB.RazrPointer,    900,    100, 700, 190, 800,480, Page[7], FonColor[3], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <Set_Screen+0x2198>)
 80048c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80048c6:	461c      	mov	r4, r3
 80048c8:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <Set_Screen+0x2190>)
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	4a1b      	ldr	r2, [pc, #108]	; (800493c <Set_Screen+0x2188>)
 80048ce:	68d2      	ldr	r2, [r2, #12]
 80048d0:	491b      	ldr	r1, [pc, #108]	; (8004940 <Set_Screen+0x218c>)
 80048d2:	6809      	ldr	r1, [r1, #0]
 80048d4:	2012      	movs	r0, #18
 80048d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80048d8:	200b      	movs	r0, #11
 80048da:	900a      	str	r0, [sp, #40]	; 0x28
 80048dc:	481c      	ldr	r0, [pc, #112]	; (8004950 <Set_Screen+0x219c>)
 80048de:	9009      	str	r0, [sp, #36]	; 0x24
 80048e0:	9108      	str	r1, [sp, #32]
 80048e2:	9207      	str	r2, [sp, #28]
 80048e4:	9306      	str	r3, [sp, #24]
 80048e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80048ea:	9305      	str	r3, [sp, #20]
 80048ec:	f44f 7348 	mov.w	r3, #800	; 0x320
 80048f0:	9304      	str	r3, [sp, #16]
 80048f2:	23be      	movs	r3, #190	; 0xbe
 80048f4:	9303      	str	r3, [sp, #12]
 80048f6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80048fa:	9302      	str	r3, [sp, #8]
 80048fc:	2364      	movs	r3, #100	; 0x64
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	f44f 7361 	mov.w	r3, #900	; 0x384
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	4623      	mov	r3, r4
 8004908:	2203      	movs	r2, #3
 800490a:	2100      	movs	r1, #0
 800490c:	4817      	ldr	r0, [pc, #92]	; (800496c <Set_Screen+0x21b8>)
 800490e:	f003 fc39 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

			if(!BUV_settings_global.work_on_water_enable)
 8004912:	4b17      	ldr	r3, [pc, #92]	; (8004970 <Set_Screen+0x21bc>)
 8004914:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004918:	2b00      	cmp	r3, #0
 800491a:	d12d      	bne.n	8004978 <Set_Screen+0x21c4>
			{
				Short_Left_Colored_RU_DrawString_32("Работа на воде запрещена      ", 30,	20, 230, FonColor[4], BasicSymbolColor, Page[7]);
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <Set_Screen+0x2188>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	4a07      	ldr	r2, [pc, #28]	; (8004940 <Set_Screen+0x218c>)
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	4907      	ldr	r1, [pc, #28]	; (8004944 <Set_Screen+0x2190>)
 8004926:	69c9      	ldr	r1, [r1, #28]
 8004928:	9102      	str	r1, [sp, #8]
 800492a:	9201      	str	r2, [sp, #4]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	23e6      	movs	r3, #230	; 0xe6
 8004930:	2214      	movs	r2, #20
 8004932:	211e      	movs	r1, #30
 8004934:	480f      	ldr	r0, [pc, #60]	; (8004974 <Set_Screen+0x21c0>)
 8004936:	f002 fe87 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
 800493a:	e02c      	b.n	8004996 <Set_Screen+0x21e2>
 800493c:	200000a4 	.word	0x200000a4
 8004940:	200009f4 	.word	0x200009f4
 8004944:	20000980 	.word	0x20000980
 8004948:	0800eb74 	.word	0x0800eb74
 800494c:	20000b70 	.word	0x20000b70
 8004950:	080117b0 	.word	0x080117b0
 8004954:	20000a90 	.word	0x20000a90
 8004958:	0800eba8 	.word	0x0800eba8
 800495c:	20000a94 	.word	0x20000a94
 8004960:	0800ebe0 	.word	0x0800ebe0
 8004964:	20000a98 	.word	0x20000a98
 8004968:	0800ec14 	.word	0x0800ec14
 800496c:	20000a9c 	.word	0x20000a9c
 8004970:	20000a30 	.word	0x20000a30
 8004974:	0800ec4c 	.word	0x0800ec4c
			}
			else
			{
				Short_Left_Colored_RU_DrawString_32("Работа на воде разрешена      ", 30,	20, 230, FonColor[4], BasicSymbolColor, Page[7]);
 8004978:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <Set_Screen+0x2274>)
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	4a2b      	ldr	r2, [pc, #172]	; (8004a2c <Set_Screen+0x2278>)
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	492b      	ldr	r1, [pc, #172]	; (8004a30 <Set_Screen+0x227c>)
 8004982:	69c9      	ldr	r1, [r1, #28]
 8004984:	9102      	str	r1, [sp, #8]
 8004986:	9201      	str	r2, [sp, #4]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	23e6      	movs	r3, #230	; 0xe6
 800498c:	2214      	movs	r2, #20
 800498e:	211e      	movs	r1, #30
 8004990:	4828      	ldr	r0, [pc, #160]	; (8004a34 <Set_Screen+0x2280>)
 8004992:	f002 fe59 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			}

			Short_Left_Colored_RU_DrawString_32("Ур.конц-та при котором предупр",    30,	20, 270, FonColor[5], BasicSymbolColor, Page[7]);
 8004996:	4b24      	ldr	r3, [pc, #144]	; (8004a28 <Set_Screen+0x2274>)
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	4a24      	ldr	r2, [pc, #144]	; (8004a2c <Set_Screen+0x2278>)
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	4924      	ldr	r1, [pc, #144]	; (8004a30 <Set_Screen+0x227c>)
 80049a0:	69c9      	ldr	r1, [r1, #28]
 80049a2:	9102      	str	r1, [sp, #8]
 80049a4:	9201      	str	r2, [sp, #4]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80049ac:	2214      	movs	r2, #20
 80049ae:	211e      	movs	r1, #30
 80049b0:	4821      	ldr	r0, [pc, #132]	; (8004a38 <Set_Screen+0x2284>)
 80049b2:	f002 fe49 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings_global.water_work_conconcentrate_level, 0, 3, Control_DB.RazrPointer,    900,    100, 700, 270, 800,480, Page[7], FonColor[5], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80049b6:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <Set_Screen+0x2288>)
 80049b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80049bc:	461c      	mov	r4, r3
 80049be:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <Set_Screen+0x227c>)
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <Set_Screen+0x2274>)
 80049c4:	6952      	ldr	r2, [r2, #20]
 80049c6:	4919      	ldr	r1, [pc, #100]	; (8004a2c <Set_Screen+0x2278>)
 80049c8:	6809      	ldr	r1, [r1, #0]
 80049ca:	2012      	movs	r0, #18
 80049cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80049ce:	200b      	movs	r0, #11
 80049d0:	900a      	str	r0, [sp, #40]	; 0x28
 80049d2:	481b      	ldr	r0, [pc, #108]	; (8004a40 <Set_Screen+0x228c>)
 80049d4:	9009      	str	r0, [sp, #36]	; 0x24
 80049d6:	9108      	str	r1, [sp, #32]
 80049d8:	9207      	str	r2, [sp, #28]
 80049da:	9306      	str	r3, [sp, #24]
 80049dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80049e0:	9305      	str	r3, [sp, #20]
 80049e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80049e6:	9304      	str	r3, [sp, #16]
 80049e8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80049ec:	9303      	str	r3, [sp, #12]
 80049ee:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80049f2:	9302      	str	r3, [sp, #8]
 80049f4:	2364      	movs	r3, #100	; 0x64
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	f44f 7361 	mov.w	r3, #900	; 0x384
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	4623      	mov	r3, r4
 8004a00:	2203      	movs	r2, #3
 8004a02:	2100      	movs	r1, #0
 8004a04:	480f      	ldr	r0, [pc, #60]	; (8004a44 <Set_Screen+0x2290>)
 8004a06:	f003 fbbd 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>


			Control_DB.MenuPointerMAX 	= 5;
 8004a0a:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <Set_Screen+0x2288>)
 8004a0c:	2205      	movs	r2, #5
 8004a0e:	809a      	strh	r2, [r3, #4]
			if(Control_DB.MenuPointer == 4)
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <Set_Screen+0x2288>)
 8004a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	f040 84c4 	bne.w	80053a4 <Set_Screen+0x2bf0>
			{
				Control_DB.RazrPointer = 0;
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <Set_Screen+0x2288>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	805a      	strh	r2, [r3, #2]
			}

		break;
 8004a22:	f000 bcbf 	b.w	80053a4 <Set_Screen+0x2bf0>
 8004a26:	bf00      	nop
 8004a28:	200000a4 	.word	0x200000a4
 8004a2c:	200009f4 	.word	0x200009f4
 8004a30:	20000980 	.word	0x20000980
 8004a34:	0800ec80 	.word	0x0800ec80
 8004a38:	0800ecb4 	.word	0x0800ecb4
 8004a3c:	20000b70 	.word	0x20000b70
 8004a40:	080117b0 	.word	0x080117b0
 8004a44:	20000aa4 	.word	0x20000aa4
		case 8:
				Short_Left_Colored_RU_DrawString_32("Режим промывки", 14,	30,  50, FonColor[0], BasicSymbolColor, Page[8]);
 8004a48:	4ba1      	ldr	r3, [pc, #644]	; (8004cd0 <Set_Screen+0x251c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4aa1      	ldr	r2, [pc, #644]	; (8004cd4 <Set_Screen+0x2520>)
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	49a1      	ldr	r1, [pc, #644]	; (8004cd8 <Set_Screen+0x2524>)
 8004a52:	6a09      	ldr	r1, [r1, #32]
 8004a54:	9102      	str	r1, [sp, #8]
 8004a56:	9201      	str	r2, [sp, #4]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2332      	movs	r3, #50	; 0x32
 8004a5c:	221e      	movs	r2, #30
 8004a5e:	210e      	movs	r1, #14
 8004a60:	489e      	ldr	r0, [pc, #632]	; (8004cdc <Set_Screen+0x2528>)
 8004a62:	f002 fdf1 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.flushing_mode_pressure_filter,0, 1, Control_DB.RazrPointer, 4,   1, 470, 50, 800,480, Page[8], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004a66:	4b9e      	ldr	r3, [pc, #632]	; (8004ce0 <Set_Screen+0x252c>)
 8004a68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a6c:	461c      	mov	r4, r3
 8004a6e:	4b9a      	ldr	r3, [pc, #616]	; (8004cd8 <Set_Screen+0x2524>)
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	4a97      	ldr	r2, [pc, #604]	; (8004cd0 <Set_Screen+0x251c>)
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	4997      	ldr	r1, [pc, #604]	; (8004cd4 <Set_Screen+0x2520>)
 8004a78:	6809      	ldr	r1, [r1, #0]
 8004a7a:	2012      	movs	r0, #18
 8004a7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004a7e:	200b      	movs	r0, #11
 8004a80:	900a      	str	r0, [sp, #40]	; 0x28
 8004a82:	4898      	ldr	r0, [pc, #608]	; (8004ce4 <Set_Screen+0x2530>)
 8004a84:	9009      	str	r0, [sp, #36]	; 0x24
 8004a86:	9108      	str	r1, [sp, #32]
 8004a88:	9207      	str	r2, [sp, #28]
 8004a8a:	9306      	str	r3, [sp, #24]
 8004a8c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004a90:	9305      	str	r3, [sp, #20]
 8004a92:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004a96:	9304      	str	r3, [sp, #16]
 8004a98:	2332      	movs	r3, #50	; 0x32
 8004a9a:	9303      	str	r3, [sp, #12]
 8004a9c:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004aa0:	9302      	str	r3, [sp, #8]
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	4623      	mov	r3, r4
 8004aac:	2201      	movs	r2, #1
 8004aae:	2100      	movs	r1, #0
 8004ab0:	488d      	ldr	r0, [pc, #564]	; (8004ce8 <Set_Screen+0x2534>)
 8004ab2:	f003 fb67 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
				update_mode_flushing(BUV_settings.flushing_mode_pressure_filter,Page[8]);
 8004ab6:	4b8d      	ldr	r3, [pc, #564]	; (8004cec <Set_Screen+0x2538>)
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	4a87      	ldr	r2, [pc, #540]	; (8004cd8 <Set_Screen+0x2524>)
 8004abc:	6a12      	ldr	r2, [r2, #32]
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fc fa3b 	bl	8000f3c <update_mode_flushing>


				Short_Left_Colored_RU_DrawString_32("Период промывки", 13,30,  80, FonColor[1], BasicSymbolColor, Page[8]);
 8004ac6:	4b82      	ldr	r3, [pc, #520]	; (8004cd0 <Set_Screen+0x251c>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4a82      	ldr	r2, [pc, #520]	; (8004cd4 <Set_Screen+0x2520>)
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	4982      	ldr	r1, [pc, #520]	; (8004cd8 <Set_Screen+0x2524>)
 8004ad0:	6a09      	ldr	r1, [r1, #32]
 8004ad2:	9102      	str	r1, [sp, #8]
 8004ad4:	9201      	str	r2, [sp, #4]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2350      	movs	r3, #80	; 0x50
 8004ada:	221e      	movs	r2, #30
 8004adc:	210d      	movs	r1, #13
 8004ade:	4884      	ldr	r0, [pc, #528]	; (8004cf0 <Set_Screen+0x253c>)
 8004ae0:	f002 fdb2 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Ч", 1,585,  80, BackgroundColor, BasicSymbolColor, Page[8]);
 8004ae4:	4b83      	ldr	r3, [pc, #524]	; (8004cf4 <Set_Screen+0x2540>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a7a      	ldr	r2, [pc, #488]	; (8004cd4 <Set_Screen+0x2520>)
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	497a      	ldr	r1, [pc, #488]	; (8004cd8 <Set_Screen+0x2524>)
 8004aee:	6a09      	ldr	r1, [r1, #32]
 8004af0:	9102      	str	r1, [sp, #8]
 8004af2:	9201      	str	r2, [sp, #4]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	2350      	movs	r3, #80	; 0x50
 8004af8:	f240 2249 	movw	r2, #585	; 0x249
 8004afc:	2101      	movs	r1, #1
 8004afe:	487e      	ldr	r0, [pc, #504]	; (8004cf8 <Set_Screen+0x2544>)
 8004b00:	f002 fda2 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.period_flushing_pressure_filter,0, 3, Control_DB.RazrPointer, 120,  5, 470, 80, 800,480, Page[8], FonColor[1], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004b04:	4b76      	ldr	r3, [pc, #472]	; (8004ce0 <Set_Screen+0x252c>)
 8004b06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b0a:	461c      	mov	r4, r3
 8004b0c:	4b72      	ldr	r3, [pc, #456]	; (8004cd8 <Set_Screen+0x2524>)
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	4a6f      	ldr	r2, [pc, #444]	; (8004cd0 <Set_Screen+0x251c>)
 8004b12:	6852      	ldr	r2, [r2, #4]
 8004b14:	496f      	ldr	r1, [pc, #444]	; (8004cd4 <Set_Screen+0x2520>)
 8004b16:	6809      	ldr	r1, [r1, #0]
 8004b18:	2012      	movs	r0, #18
 8004b1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8004b1c:	200b      	movs	r0, #11
 8004b1e:	900a      	str	r0, [sp, #40]	; 0x28
 8004b20:	4870      	ldr	r0, [pc, #448]	; (8004ce4 <Set_Screen+0x2530>)
 8004b22:	9009      	str	r0, [sp, #36]	; 0x24
 8004b24:	9108      	str	r1, [sp, #32]
 8004b26:	9207      	str	r2, [sp, #28]
 8004b28:	9306      	str	r3, [sp, #24]
 8004b2a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004b2e:	9305      	str	r3, [sp, #20]
 8004b30:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004b34:	9304      	str	r3, [sp, #16]
 8004b36:	2350      	movs	r3, #80	; 0x50
 8004b38:	9303      	str	r3, [sp, #12]
 8004b3a:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004b3e:	9302      	str	r3, [sp, #8]
 8004b40:	2305      	movs	r3, #5
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	2378      	movs	r3, #120	; 0x78
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	4623      	mov	r3, r4
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	486b      	ldr	r0, [pc, #428]	; (8004cfc <Set_Screen+0x2548>)
 8004b50:	f003 fb18 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
			
				Short_Left_Colored_RU_DrawString_32("Время промывки", 14,30,  110, FonColor[2], BasicSymbolColor, Page[8]);
 8004b54:	4b5e      	ldr	r3, [pc, #376]	; (8004cd0 <Set_Screen+0x251c>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a5e      	ldr	r2, [pc, #376]	; (8004cd4 <Set_Screen+0x2520>)
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	495e      	ldr	r1, [pc, #376]	; (8004cd8 <Set_Screen+0x2524>)
 8004b5e:	6a09      	ldr	r1, [r1, #32]
 8004b60:	9102      	str	r1, [sp, #8]
 8004b62:	9201      	str	r2, [sp, #4]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	236e      	movs	r3, #110	; 0x6e
 8004b68:	221e      	movs	r2, #30
 8004b6a:	210e      	movs	r1, #14
 8004b6c:	4864      	ldr	r0, [pc, #400]	; (8004d00 <Set_Screen+0x254c>)
 8004b6e:	f002 fd6b 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Сек", 3,585,  110, BackgroundColor, BasicSymbolColor, Page[8]);
 8004b72:	4b60      	ldr	r3, [pc, #384]	; (8004cf4 <Set_Screen+0x2540>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a57      	ldr	r2, [pc, #348]	; (8004cd4 <Set_Screen+0x2520>)
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	4957      	ldr	r1, [pc, #348]	; (8004cd8 <Set_Screen+0x2524>)
 8004b7c:	6a09      	ldr	r1, [r1, #32]
 8004b7e:	9102      	str	r1, [sp, #8]
 8004b80:	9201      	str	r2, [sp, #4]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	236e      	movs	r3, #110	; 0x6e
 8004b86:	f240 2249 	movw	r2, #585	; 0x249
 8004b8a:	2103      	movs	r1, #3
 8004b8c:	485d      	ldr	r0, [pc, #372]	; (8004d04 <Set_Screen+0x2550>)
 8004b8e:	f002 fd5b 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.time_flushing_pressure_filter,0, 2, Control_DB.RazrPointer, 10,  1, 470, 110, 800,480, Page[8], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004b92:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <Set_Screen+0x252c>)
 8004b94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b98:	461c      	mov	r4, r3
 8004b9a:	4b4f      	ldr	r3, [pc, #316]	; (8004cd8 <Set_Screen+0x2524>)
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	4a4c      	ldr	r2, [pc, #304]	; (8004cd0 <Set_Screen+0x251c>)
 8004ba0:	6892      	ldr	r2, [r2, #8]
 8004ba2:	494c      	ldr	r1, [pc, #304]	; (8004cd4 <Set_Screen+0x2520>)
 8004ba4:	6809      	ldr	r1, [r1, #0]
 8004ba6:	2012      	movs	r0, #18
 8004ba8:	900b      	str	r0, [sp, #44]	; 0x2c
 8004baa:	200b      	movs	r0, #11
 8004bac:	900a      	str	r0, [sp, #40]	; 0x28
 8004bae:	484d      	ldr	r0, [pc, #308]	; (8004ce4 <Set_Screen+0x2530>)
 8004bb0:	9009      	str	r0, [sp, #36]	; 0x24
 8004bb2:	9108      	str	r1, [sp, #32]
 8004bb4:	9207      	str	r2, [sp, #28]
 8004bb6:	9306      	str	r3, [sp, #24]
 8004bb8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004bbc:	9305      	str	r3, [sp, #20]
 8004bbe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004bc2:	9304      	str	r3, [sp, #16]
 8004bc4:	236e      	movs	r3, #110	; 0x6e
 8004bc6:	9303      	str	r3, [sp, #12]
 8004bc8:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004bcc:	9302      	str	r3, [sp, #8]
 8004bce:	2301      	movs	r3, #1
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	230a      	movs	r3, #10
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4623      	mov	r3, r4
 8004bd8:	2202      	movs	r2, #2
 8004bda:	2100      	movs	r1, #0
 8004bdc:	484a      	ldr	r0, [pc, #296]	; (8004d08 <Set_Screen+0x2554>)
 8004bde:	f003 fad1 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

				Short_Left_Colored_RU_DrawString_32("Перепад Давления", 16,30,  140, FonColor[3], BasicSymbolColor, Page[8]);
 8004be2:	4b3b      	ldr	r3, [pc, #236]	; (8004cd0 <Set_Screen+0x251c>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	4a3b      	ldr	r2, [pc, #236]	; (8004cd4 <Set_Screen+0x2520>)
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	493b      	ldr	r1, [pc, #236]	; (8004cd8 <Set_Screen+0x2524>)
 8004bec:	6a09      	ldr	r1, [r1, #32]
 8004bee:	9102      	str	r1, [sp, #8]
 8004bf0:	9201      	str	r2, [sp, #4]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	238c      	movs	r3, #140	; 0x8c
 8004bf6:	221e      	movs	r2, #30
 8004bf8:	2110      	movs	r1, #16
 8004bfa:	4844      	ldr	r0, [pc, #272]	; (8004d0c <Set_Screen+0x2558>)
 8004bfc:	f002 fd24 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("МПа", 3,585,  140, BackgroundColor, BasicSymbolColor, Page[8]);
 8004c00:	4b3c      	ldr	r3, [pc, #240]	; (8004cf4 <Set_Screen+0x2540>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a33      	ldr	r2, [pc, #204]	; (8004cd4 <Set_Screen+0x2520>)
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	4933      	ldr	r1, [pc, #204]	; (8004cd8 <Set_Screen+0x2524>)
 8004c0a:	6a09      	ldr	r1, [r1, #32]
 8004c0c:	9102      	str	r1, [sp, #8]
 8004c0e:	9201      	str	r2, [sp, #4]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	238c      	movs	r3, #140	; 0x8c
 8004c14:	f240 2249 	movw	r2, #585	; 0x249
 8004c18:	2103      	movs	r1, #3
 8004c1a:	483d      	ldr	r0, [pc, #244]	; (8004d10 <Set_Screen+0x255c>)
 8004c1c:	f002 fd14 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.difference_pressure_filter,1, 3, Control_DB.RazrPointer, 10,  1, 470, 140, 800,480, Page[8], FonColor[3], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004c20:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <Set_Screen+0x252c>)
 8004c22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c26:	461c      	mov	r4, r3
 8004c28:	4b2b      	ldr	r3, [pc, #172]	; (8004cd8 <Set_Screen+0x2524>)
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <Set_Screen+0x251c>)
 8004c2e:	68d2      	ldr	r2, [r2, #12]
 8004c30:	4928      	ldr	r1, [pc, #160]	; (8004cd4 <Set_Screen+0x2520>)
 8004c32:	6809      	ldr	r1, [r1, #0]
 8004c34:	2012      	movs	r0, #18
 8004c36:	900b      	str	r0, [sp, #44]	; 0x2c
 8004c38:	200b      	movs	r0, #11
 8004c3a:	900a      	str	r0, [sp, #40]	; 0x28
 8004c3c:	4829      	ldr	r0, [pc, #164]	; (8004ce4 <Set_Screen+0x2530>)
 8004c3e:	9009      	str	r0, [sp, #36]	; 0x24
 8004c40:	9108      	str	r1, [sp, #32]
 8004c42:	9207      	str	r2, [sp, #28]
 8004c44:	9306      	str	r3, [sp, #24]
 8004c46:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004c4a:	9305      	str	r3, [sp, #20]
 8004c4c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004c50:	9304      	str	r3, [sp, #16]
 8004c52:	238c      	movs	r3, #140	; 0x8c
 8004c54:	9303      	str	r3, [sp, #12]
 8004c56:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004c5a:	9302      	str	r3, [sp, #8]
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	9301      	str	r3, [sp, #4]
 8004c60:	230a      	movs	r3, #10
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	4623      	mov	r3, r4
 8004c66:	2203      	movs	r2, #3
 8004c68:	2101      	movs	r1, #1
 8004c6a:	482a      	ldr	r0, [pc, #168]	; (8004d14 <Set_Screen+0x2560>)
 8004c6c:	f003 fa8a 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

				Short_Left_Colored_RU_DrawString_32("Вр кон знач при перепад", 23,30,  170, FonColor[4], BasicSymbolColor, Page[8]);
 8004c70:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <Set_Screen+0x251c>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <Set_Screen+0x2520>)
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	4917      	ldr	r1, [pc, #92]	; (8004cd8 <Set_Screen+0x2524>)
 8004c7a:	6a09      	ldr	r1, [r1, #32]
 8004c7c:	9102      	str	r1, [sp, #8]
 8004c7e:	9201      	str	r2, [sp, #4]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	23aa      	movs	r3, #170	; 0xaa
 8004c84:	221e      	movs	r2, #30
 8004c86:	2117      	movs	r1, #23
 8004c88:	4823      	ldr	r0, [pc, #140]	; (8004d18 <Set_Screen+0x2564>)
 8004c8a:	f002 fcdd 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Centred_DrawNumber_16_32bit_controled(&BUV_settings.time_control_pressure_filter,0, 2, Control_DB.RazrPointer, 10,  1, 470, 170, 800,480, Page[8], FonColor[4], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004c8e:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <Set_Screen+0x252c>)
 8004c90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c94:	461c      	mov	r4, r3
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <Set_Screen+0x2524>)
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	4a0d      	ldr	r2, [pc, #52]	; (8004cd0 <Set_Screen+0x251c>)
 8004c9c:	6912      	ldr	r2, [r2, #16]
 8004c9e:	490d      	ldr	r1, [pc, #52]	; (8004cd4 <Set_Screen+0x2520>)
 8004ca0:	6809      	ldr	r1, [r1, #0]
 8004ca2:	2012      	movs	r0, #18
 8004ca4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004ca6:	200b      	movs	r0, #11
 8004ca8:	900a      	str	r0, [sp, #40]	; 0x28
 8004caa:	480e      	ldr	r0, [pc, #56]	; (8004ce4 <Set_Screen+0x2530>)
 8004cac:	9009      	str	r0, [sp, #36]	; 0x24
 8004cae:	9108      	str	r1, [sp, #32]
 8004cb0:	9207      	str	r2, [sp, #28]
 8004cb2:	9306      	str	r3, [sp, #24]
 8004cb4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004cb8:	9305      	str	r3, [sp, #20]
 8004cba:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004cbe:	9304      	str	r3, [sp, #16]
 8004cc0:	23aa      	movs	r3, #170	; 0xaa
 8004cc2:	9303      	str	r3, [sp, #12]
 8004cc4:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004cc8:	9302      	str	r3, [sp, #8]
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e026      	b.n	8004d1c <Set_Screen+0x2568>
 8004cce:	bf00      	nop
 8004cd0:	200000a4 	.word	0x200000a4
 8004cd4:	200009f4 	.word	0x200009f4
 8004cd8:	20000980 	.word	0x20000980
 8004cdc:	0800ecec 	.word	0x0800ecec
 8004ce0:	20000b70 	.word	0x20000b70
 8004ce4:	080117b0 	.word	0x080117b0
 8004ce8:	20000bbc 	.word	0x20000bbc
 8004cec:	20000b84 	.word	0x20000b84
 8004cf0:	0800ed08 	.word	0x0800ed08
 8004cf4:	20000008 	.word	0x20000008
 8004cf8:	0800e9e4 	.word	0x0800e9e4
 8004cfc:	20000bc0 	.word	0x20000bc0
 8004d00:	0800ed28 	.word	0x0800ed28
 8004d04:	0800ed44 	.word	0x0800ed44
 8004d08:	20000bc4 	.word	0x20000bc4
 8004d0c:	0800ed4c 	.word	0x0800ed4c
 8004d10:	0800dec8 	.word	0x0800dec8
 8004d14:	20000bc8 	.word	0x20000bc8
 8004d18:	0800ed6c 	.word	0x0800ed6c
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	230a      	movs	r3, #10
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	4623      	mov	r3, r4
 8004d24:	2202      	movs	r2, #2
 8004d26:	2100      	movs	r1, #0
 8004d28:	480b      	ldr	r0, [pc, #44]	; (8004d58 <Set_Screen+0x25a4>)
 8004d2a:	f003 fa2b 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
				Short_Left_Colored_RU_DrawString_32("Сек", 3,585,  170, BackgroundColor, BasicSymbolColor, Page[8]);
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <Set_Screen+0x25a8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <Set_Screen+0x25ac>)
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	490b      	ldr	r1, [pc, #44]	; (8004d64 <Set_Screen+0x25b0>)
 8004d38:	6a09      	ldr	r1, [r1, #32]
 8004d3a:	9102      	str	r1, [sp, #8]
 8004d3c:	9201      	str	r2, [sp, #4]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	23aa      	movs	r3, #170	; 0xaa
 8004d42:	f240 2249 	movw	r2, #585	; 0x249
 8004d46:	2103      	movs	r1, #3
 8004d48:	4807      	ldr	r0, [pc, #28]	; (8004d68 <Set_Screen+0x25b4>)
 8004d4a:	f002 fc7d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

				Control_DB.MenuPointerMAX 	= 5;
 8004d4e:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <Set_Screen+0x25b8>)
 8004d50:	2205      	movs	r2, #5
 8004d52:	809a      	strh	r2, [r3, #4]
			break;
 8004d54:	e327      	b.n	80053a6 <Set_Screen+0x2bf2>
 8004d56:	bf00      	nop
 8004d58:	20000bcc 	.word	0x20000bcc
 8004d5c:	20000008 	.word	0x20000008
 8004d60:	200009f4 	.word	0x200009f4
 8004d64:	20000980 	.word	0x20000980
 8004d68:	0800ed44 	.word	0x0800ed44
 8004d6c:	20000b70 	.word	0x20000b70
		case 9:

			Short_Left_Colored_RU_DrawString_32("Режим промывки", 14,	30,  50, FonColor[0], BasicSymbolColor, Page[9]);
 8004d70:	4ba1      	ldr	r3, [pc, #644]	; (8004ff8 <Set_Screen+0x2844>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4aa1      	ldr	r2, [pc, #644]	; (8004ffc <Set_Screen+0x2848>)
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	49a1      	ldr	r1, [pc, #644]	; (8005000 <Set_Screen+0x284c>)
 8004d7a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8004d7c:	9102      	str	r1, [sp, #8]
 8004d7e:	9201      	str	r2, [sp, #4]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	2332      	movs	r3, #50	; 0x32
 8004d84:	221e      	movs	r2, #30
 8004d86:	210e      	movs	r1, #14
 8004d88:	489e      	ldr	r0, [pc, #632]	; (8005004 <Set_Screen+0x2850>)
 8004d8a:	f002 fc5d 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings.flushing_mode_water_filter,0, 1, Control_DB.RazrPointer, 4,   1, 470, 50, 800,480, Page[9], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004d8e:	4b9e      	ldr	r3, [pc, #632]	; (8005008 <Set_Screen+0x2854>)
 8004d90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d94:	461c      	mov	r4, r3
 8004d96:	4b9a      	ldr	r3, [pc, #616]	; (8005000 <Set_Screen+0x284c>)
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	4a97      	ldr	r2, [pc, #604]	; (8004ff8 <Set_Screen+0x2844>)
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	4997      	ldr	r1, [pc, #604]	; (8004ffc <Set_Screen+0x2848>)
 8004da0:	6809      	ldr	r1, [r1, #0]
 8004da2:	2012      	movs	r0, #18
 8004da4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004da6:	200b      	movs	r0, #11
 8004da8:	900a      	str	r0, [sp, #40]	; 0x28
 8004daa:	4898      	ldr	r0, [pc, #608]	; (800500c <Set_Screen+0x2858>)
 8004dac:	9009      	str	r0, [sp, #36]	; 0x24
 8004dae:	9108      	str	r1, [sp, #32]
 8004db0:	9207      	str	r2, [sp, #28]
 8004db2:	9306      	str	r3, [sp, #24]
 8004db4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004db8:	9305      	str	r3, [sp, #20]
 8004dba:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004dbe:	9304      	str	r3, [sp, #16]
 8004dc0:	2332      	movs	r3, #50	; 0x32
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004dc8:	9302      	str	r3, [sp, #8]
 8004dca:	2301      	movs	r3, #1
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	2304      	movs	r3, #4
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	488d      	ldr	r0, [pc, #564]	; (8005010 <Set_Screen+0x285c>)
 8004dda:	f003 f9d3 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
			update_mode_flushing(BUV_settings.flushing_mode_water_filter,Page[9]);
 8004dde:	4b8d      	ldr	r3, [pc, #564]	; (8005014 <Set_Screen+0x2860>)
 8004de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de2:	4a87      	ldr	r2, [pc, #540]	; (8005000 <Set_Screen+0x284c>)
 8004de4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fc f8a7 	bl	8000f3c <update_mode_flushing>

			Short_Left_Colored_RU_DrawString_32("Период промывки", 13,30,  80, FonColor[1], BasicSymbolColor, Page[9]);
 8004dee:	4b82      	ldr	r3, [pc, #520]	; (8004ff8 <Set_Screen+0x2844>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4a82      	ldr	r2, [pc, #520]	; (8004ffc <Set_Screen+0x2848>)
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	4982      	ldr	r1, [pc, #520]	; (8005000 <Set_Screen+0x284c>)
 8004df8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8004dfa:	9102      	str	r1, [sp, #8]
 8004dfc:	9201      	str	r2, [sp, #4]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2350      	movs	r3, #80	; 0x50
 8004e02:	221e      	movs	r2, #30
 8004e04:	210d      	movs	r1, #13
 8004e06:	4884      	ldr	r0, [pc, #528]	; (8005018 <Set_Screen+0x2864>)
 8004e08:	f002 fc1e 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Ч", 1,585,  80, BackgroundColor, BasicSymbolColor, Page[9]);
 8004e0c:	4b83      	ldr	r3, [pc, #524]	; (800501c <Set_Screen+0x2868>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a7a      	ldr	r2, [pc, #488]	; (8004ffc <Set_Screen+0x2848>)
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	497a      	ldr	r1, [pc, #488]	; (8005000 <Set_Screen+0x284c>)
 8004e16:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8004e18:	9102      	str	r1, [sp, #8]
 8004e1a:	9201      	str	r2, [sp, #4]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2350      	movs	r3, #80	; 0x50
 8004e20:	f240 2249 	movw	r2, #585	; 0x249
 8004e24:	2101      	movs	r1, #1
 8004e26:	487e      	ldr	r0, [pc, #504]	; (8005020 <Set_Screen+0x286c>)
 8004e28:	f002 fc0e 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings.period_flushing_water_filter,0, 3, Control_DB.RazrPointer, 120,  5, 470, 80, 800,480, Page[9], FonColor[1], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004e2c:	4b76      	ldr	r3, [pc, #472]	; (8005008 <Set_Screen+0x2854>)
 8004e2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e32:	461c      	mov	r4, r3
 8004e34:	4b72      	ldr	r3, [pc, #456]	; (8005000 <Set_Screen+0x284c>)
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	4a6f      	ldr	r2, [pc, #444]	; (8004ff8 <Set_Screen+0x2844>)
 8004e3a:	6852      	ldr	r2, [r2, #4]
 8004e3c:	496f      	ldr	r1, [pc, #444]	; (8004ffc <Set_Screen+0x2848>)
 8004e3e:	6809      	ldr	r1, [r1, #0]
 8004e40:	2012      	movs	r0, #18
 8004e42:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e44:	200b      	movs	r0, #11
 8004e46:	900a      	str	r0, [sp, #40]	; 0x28
 8004e48:	4870      	ldr	r0, [pc, #448]	; (800500c <Set_Screen+0x2858>)
 8004e4a:	9009      	str	r0, [sp, #36]	; 0x24
 8004e4c:	9108      	str	r1, [sp, #32]
 8004e4e:	9207      	str	r2, [sp, #28]
 8004e50:	9306      	str	r3, [sp, #24]
 8004e52:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004e56:	9305      	str	r3, [sp, #20]
 8004e58:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004e5c:	9304      	str	r3, [sp, #16]
 8004e5e:	2350      	movs	r3, #80	; 0x50
 8004e60:	9303      	str	r3, [sp, #12]
 8004e62:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004e66:	9302      	str	r3, [sp, #8]
 8004e68:	2305      	movs	r3, #5
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	2378      	movs	r3, #120	; 0x78
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	4623      	mov	r3, r4
 8004e72:	2203      	movs	r2, #3
 8004e74:	2100      	movs	r1, #0
 8004e76:	486b      	ldr	r0, [pc, #428]	; (8005024 <Set_Screen+0x2870>)
 8004e78:	f003 f984 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Время промывки", 14,30,  110, FonColor[2], BasicSymbolColor, Page[9]);
 8004e7c:	4b5e      	ldr	r3, [pc, #376]	; (8004ff8 <Set_Screen+0x2844>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4a5e      	ldr	r2, [pc, #376]	; (8004ffc <Set_Screen+0x2848>)
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	495e      	ldr	r1, [pc, #376]	; (8005000 <Set_Screen+0x284c>)
 8004e86:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8004e88:	9102      	str	r1, [sp, #8]
 8004e8a:	9201      	str	r2, [sp, #4]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	236e      	movs	r3, #110	; 0x6e
 8004e90:	221e      	movs	r2, #30
 8004e92:	210e      	movs	r1, #14
 8004e94:	4864      	ldr	r0, [pc, #400]	; (8005028 <Set_Screen+0x2874>)
 8004e96:	f002 fbd7 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Сек", 3,585,  110, BackgroundColor, BasicSymbolColor, Page[9]);
 8004e9a:	4b60      	ldr	r3, [pc, #384]	; (800501c <Set_Screen+0x2868>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a57      	ldr	r2, [pc, #348]	; (8004ffc <Set_Screen+0x2848>)
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	4957      	ldr	r1, [pc, #348]	; (8005000 <Set_Screen+0x284c>)
 8004ea4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8004ea6:	9102      	str	r1, [sp, #8]
 8004ea8:	9201      	str	r2, [sp, #4]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	236e      	movs	r3, #110	; 0x6e
 8004eae:	f240 2249 	movw	r2, #585	; 0x249
 8004eb2:	2103      	movs	r1, #3
 8004eb4:	485d      	ldr	r0, [pc, #372]	; (800502c <Set_Screen+0x2878>)
 8004eb6:	f002 fbc7 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings.time_flushing_water_filter,0, 2, Control_DB.RazrPointer, 10,  1, 470, 110, 800,480, Page[9], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004eba:	4b53      	ldr	r3, [pc, #332]	; (8005008 <Set_Screen+0x2854>)
 8004ebc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ec0:	461c      	mov	r4, r3
 8004ec2:	4b4f      	ldr	r3, [pc, #316]	; (8005000 <Set_Screen+0x284c>)
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	4a4c      	ldr	r2, [pc, #304]	; (8004ff8 <Set_Screen+0x2844>)
 8004ec8:	6892      	ldr	r2, [r2, #8]
 8004eca:	494c      	ldr	r1, [pc, #304]	; (8004ffc <Set_Screen+0x2848>)
 8004ecc:	6809      	ldr	r1, [r1, #0]
 8004ece:	2012      	movs	r0, #18
 8004ed0:	900b      	str	r0, [sp, #44]	; 0x2c
 8004ed2:	200b      	movs	r0, #11
 8004ed4:	900a      	str	r0, [sp, #40]	; 0x28
 8004ed6:	484d      	ldr	r0, [pc, #308]	; (800500c <Set_Screen+0x2858>)
 8004ed8:	9009      	str	r0, [sp, #36]	; 0x24
 8004eda:	9108      	str	r1, [sp, #32]
 8004edc:	9207      	str	r2, [sp, #28]
 8004ede:	9306      	str	r3, [sp, #24]
 8004ee0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004ee4:	9305      	str	r3, [sp, #20]
 8004ee6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004eea:	9304      	str	r3, [sp, #16]
 8004eec:	236e      	movs	r3, #110	; 0x6e
 8004eee:	9303      	str	r3, [sp, #12]
 8004ef0:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004ef4:	9302      	str	r3, [sp, #8]
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	230a      	movs	r3, #10
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	4623      	mov	r3, r4
 8004f00:	2202      	movs	r2, #2
 8004f02:	2100      	movs	r1, #0
 8004f04:	484a      	ldr	r0, [pc, #296]	; (8005030 <Set_Screen+0x287c>)
 8004f06:	f003 f93d 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Перепад Давления", 16,30,  140, FonColor[3], BasicSymbolColor, Page[9]);
 8004f0a:	4b3b      	ldr	r3, [pc, #236]	; (8004ff8 <Set_Screen+0x2844>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	4a3b      	ldr	r2, [pc, #236]	; (8004ffc <Set_Screen+0x2848>)
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	493b      	ldr	r1, [pc, #236]	; (8005000 <Set_Screen+0x284c>)
 8004f14:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8004f16:	9102      	str	r1, [sp, #8]
 8004f18:	9201      	str	r2, [sp, #4]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	238c      	movs	r3, #140	; 0x8c
 8004f1e:	221e      	movs	r2, #30
 8004f20:	2110      	movs	r1, #16
 8004f22:	4844      	ldr	r0, [pc, #272]	; (8005034 <Set_Screen+0x2880>)
 8004f24:	f002 fb90 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("МПа", 3,585,  140, BackgroundColor, BasicSymbolColor, Page[9]);
 8004f28:	4b3c      	ldr	r3, [pc, #240]	; (800501c <Set_Screen+0x2868>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a33      	ldr	r2, [pc, #204]	; (8004ffc <Set_Screen+0x2848>)
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	4933      	ldr	r1, [pc, #204]	; (8005000 <Set_Screen+0x284c>)
 8004f32:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8004f34:	9102      	str	r1, [sp, #8]
 8004f36:	9201      	str	r2, [sp, #4]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	238c      	movs	r3, #140	; 0x8c
 8004f3c:	f240 2249 	movw	r2, #585	; 0x249
 8004f40:	2103      	movs	r1, #3
 8004f42:	483d      	ldr	r0, [pc, #244]	; (8005038 <Set_Screen+0x2884>)
 8004f44:	f002 fb80 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings.difference_water_filter,1, 3, Control_DB.RazrPointer, 10,  1, 470, 140, 800,480, Page[9], FonColor[3], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004f48:	4b2f      	ldr	r3, [pc, #188]	; (8005008 <Set_Screen+0x2854>)
 8004f4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f4e:	461c      	mov	r4, r3
 8004f50:	4b2b      	ldr	r3, [pc, #172]	; (8005000 <Set_Screen+0x284c>)
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	4a28      	ldr	r2, [pc, #160]	; (8004ff8 <Set_Screen+0x2844>)
 8004f56:	68d2      	ldr	r2, [r2, #12]
 8004f58:	4928      	ldr	r1, [pc, #160]	; (8004ffc <Set_Screen+0x2848>)
 8004f5a:	6809      	ldr	r1, [r1, #0]
 8004f5c:	2012      	movs	r0, #18
 8004f5e:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f60:	200b      	movs	r0, #11
 8004f62:	900a      	str	r0, [sp, #40]	; 0x28
 8004f64:	4829      	ldr	r0, [pc, #164]	; (800500c <Set_Screen+0x2858>)
 8004f66:	9009      	str	r0, [sp, #36]	; 0x24
 8004f68:	9108      	str	r1, [sp, #32]
 8004f6a:	9207      	str	r2, [sp, #28]
 8004f6c:	9306      	str	r3, [sp, #24]
 8004f6e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004f72:	9305      	str	r3, [sp, #20]
 8004f74:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004f78:	9304      	str	r3, [sp, #16]
 8004f7a:	238c      	movs	r3, #140	; 0x8c
 8004f7c:	9303      	str	r3, [sp, #12]
 8004f7e:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004f82:	9302      	str	r3, [sp, #8]
 8004f84:	2301      	movs	r3, #1
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	230a      	movs	r3, #10
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	4623      	mov	r3, r4
 8004f8e:	2203      	movs	r2, #3
 8004f90:	2101      	movs	r1, #1
 8004f92:	482a      	ldr	r0, [pc, #168]	; (800503c <Set_Screen+0x2888>)
 8004f94:	f003 f8f6 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

			Short_Left_Colored_RU_DrawString_32("Вр кон знач при перепад", 23,30,  170, FonColor[4], BasicSymbolColor, Page[9]);
 8004f98:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <Set_Screen+0x2844>)
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <Set_Screen+0x2848>)
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	4917      	ldr	r1, [pc, #92]	; (8005000 <Set_Screen+0x284c>)
 8004fa2:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8004fa4:	9102      	str	r1, [sp, #8]
 8004fa6:	9201      	str	r2, [sp, #4]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	23aa      	movs	r3, #170	; 0xaa
 8004fac:	221e      	movs	r2, #30
 8004fae:	2117      	movs	r1, #23
 8004fb0:	4823      	ldr	r0, [pc, #140]	; (8005040 <Set_Screen+0x288c>)
 8004fb2:	f002 fb49 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Centred_DrawNumber_16_32bit_controled(&BUV_settings.time_control_water_filter,0, 2, Control_DB.RazrPointer, 10,  1, 470, 170, 800,480, Page[9], FonColor[4], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8004fb6:	4b14      	ldr	r3, [pc, #80]	; (8005008 <Set_Screen+0x2854>)
 8004fb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fbc:	461c      	mov	r4, r3
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <Set_Screen+0x284c>)
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <Set_Screen+0x2844>)
 8004fc4:	6912      	ldr	r2, [r2, #16]
 8004fc6:	490d      	ldr	r1, [pc, #52]	; (8004ffc <Set_Screen+0x2848>)
 8004fc8:	6809      	ldr	r1, [r1, #0]
 8004fca:	2012      	movs	r0, #18
 8004fcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8004fce:	200b      	movs	r0, #11
 8004fd0:	900a      	str	r0, [sp, #40]	; 0x28
 8004fd2:	480e      	ldr	r0, [pc, #56]	; (800500c <Set_Screen+0x2858>)
 8004fd4:	9009      	str	r0, [sp, #36]	; 0x24
 8004fd6:	9108      	str	r1, [sp, #32]
 8004fd8:	9207      	str	r2, [sp, #28]
 8004fda:	9306      	str	r3, [sp, #24]
 8004fdc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004fe0:	9305      	str	r3, [sp, #20]
 8004fe2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004fe6:	9304      	str	r3, [sp, #16]
 8004fe8:	23aa      	movs	r3, #170	; 0xaa
 8004fea:	9303      	str	r3, [sp, #12]
 8004fec:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8004ff0:	9302      	str	r3, [sp, #8]
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e026      	b.n	8005044 <Set_Screen+0x2890>
 8004ff6:	bf00      	nop
 8004ff8:	200000a4 	.word	0x200000a4
 8004ffc:	200009f4 	.word	0x200009f4
 8005000:	20000980 	.word	0x20000980
 8005004:	0800ecec 	.word	0x0800ecec
 8005008:	20000b70 	.word	0x20000b70
 800500c:	080117b0 	.word	0x080117b0
 8005010:	20000bd0 	.word	0x20000bd0
 8005014:	20000b84 	.word	0x20000b84
 8005018:	0800ed08 	.word	0x0800ed08
 800501c:	20000008 	.word	0x20000008
 8005020:	0800e9e4 	.word	0x0800e9e4
 8005024:	20000bd4 	.word	0x20000bd4
 8005028:	0800ed28 	.word	0x0800ed28
 800502c:	0800ed44 	.word	0x0800ed44
 8005030:	20000bd8 	.word	0x20000bd8
 8005034:	0800ed4c 	.word	0x0800ed4c
 8005038:	0800dec8 	.word	0x0800dec8
 800503c:	20000bdc 	.word	0x20000bdc
 8005040:	0800ed6c 	.word	0x0800ed6c
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	230a      	movs	r3, #10
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	4623      	mov	r3, r4
 800504c:	2202      	movs	r2, #2
 800504e:	2100      	movs	r1, #0
 8005050:	481c      	ldr	r0, [pc, #112]	; (80050c4 <Set_Screen+0x2910>)
 8005052:	f003 f897 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
			Short_Left_Colored_RU_DrawString_32("Сек", 3,585,  170, BackgroundColor, BasicSymbolColor, Page[9]);
 8005056:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <Set_Screen+0x2914>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1c      	ldr	r2, [pc, #112]	; (80050cc <Set_Screen+0x2918>)
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	491c      	ldr	r1, [pc, #112]	; (80050d0 <Set_Screen+0x291c>)
 8005060:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8005062:	9102      	str	r1, [sp, #8]
 8005064:	9201      	str	r2, [sp, #4]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	23aa      	movs	r3, #170	; 0xaa
 800506a:	f240 2249 	movw	r2, #585	; 0x249
 800506e:	2103      	movs	r1, #3
 8005070:	4818      	ldr	r0, [pc, #96]	; (80050d4 <Set_Screen+0x2920>)
 8005072:	f002 fae9 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

			Control_DB.MenuPointerMAX 	= 5;
 8005076:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <Set_Screen+0x2924>)
 8005078:	2205      	movs	r2, #5
 800507a:	809a      	strh	r2, [r3, #4]
			break;
 800507c:	e193      	b.n	80053a6 <Set_Screen+0x2bf2>
		case 14:
				Short_Left_Colored_RU_DrawString_32("Сброс настроек по умол", 22,	30,  50, FonColor[0], BasicSymbolColor, Page[14]);
 800507e:	4b17      	ldr	r3, [pc, #92]	; (80050dc <Set_Screen+0x2928>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a12      	ldr	r2, [pc, #72]	; (80050cc <Set_Screen+0x2918>)
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	4912      	ldr	r1, [pc, #72]	; (80050d0 <Set_Screen+0x291c>)
 8005088:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800508a:	9102      	str	r1, [sp, #8]
 800508c:	9201      	str	r2, [sp, #4]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	2332      	movs	r3, #50	; 0x32
 8005092:	221e      	movs	r2, #30
 8005094:	2116      	movs	r1, #22
 8005096:	4812      	ldr	r0, [pc, #72]	; (80050e0 <Set_Screen+0x292c>)
 8005098:	f002 fad6 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Short_Left_Colored_RU_DrawString_32("Заводские настройки", 19,	30,  80, FonColor[1], BasicSymbolColor, Page[14]);
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <Set_Screen+0x2928>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <Set_Screen+0x2918>)
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	490a      	ldr	r1, [pc, #40]	; (80050d0 <Set_Screen+0x291c>)
 80050a6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80050a8:	9102      	str	r1, [sp, #8]
 80050aa:	9201      	str	r2, [sp, #4]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	2350      	movs	r3, #80	; 0x50
 80050b0:	221e      	movs	r2, #30
 80050b2:	2113      	movs	r1, #19
 80050b4:	480b      	ldr	r0, [pc, #44]	; (80050e4 <Set_Screen+0x2930>)
 80050b6:	f002 fac7 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
				Control_DB.MenuPointerMAX = 2;
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <Set_Screen+0x2924>)
 80050bc:	2202      	movs	r2, #2
 80050be:	809a      	strh	r2, [r3, #4]

			break;
 80050c0:	e171      	b.n	80053a6 <Set_Screen+0x2bf2>
 80050c2:	bf00      	nop
 80050c4:	20000be0 	.word	0x20000be0
 80050c8:	20000008 	.word	0x20000008
 80050cc:	200009f4 	.word	0x200009f4
 80050d0:	20000980 	.word	0x20000980
 80050d4:	0800ed44 	.word	0x0800ed44
 80050d8:	20000b70 	.word	0x20000b70
 80050dc:	200000a4 	.word	0x200000a4
 80050e0:	0800ed98 	.word	0x0800ed98
 80050e4:	0800edc4 	.word	0x0800edc4
		case 21:

			Short_Left_Colored_RU_DrawString_32("Адрес            ", 17,	100,  70, FonColor[0], BasicSymbolColor, Page[21]);
 80050e8:	4b9c      	ldr	r3, [pc, #624]	; (800535c <Set_Screen+0x2ba8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a9c      	ldr	r2, [pc, #624]	; (8005360 <Set_Screen+0x2bac>)
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	499c      	ldr	r1, [pc, #624]	; (8005364 <Set_Screen+0x2bb0>)
 80050f2:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80050f4:	9102      	str	r1, [sp, #8]
 80050f6:	9201      	str	r2, [sp, #4]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	2346      	movs	r3, #70	; 0x46
 80050fc:	2264      	movs	r2, #100	; 0x64
 80050fe:	2111      	movs	r1, #17
 8005100:	4899      	ldr	r0, [pc, #612]	; (8005368 <Set_Screen+0x2bb4>)
 8005102:	f002 faa1 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Скорость         ", 17, 	100, 110, FonColor[1], BasicSymbolColor, Page[21]);
 8005106:	4b95      	ldr	r3, [pc, #596]	; (800535c <Set_Screen+0x2ba8>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4a95      	ldr	r2, [pc, #596]	; (8005360 <Set_Screen+0x2bac>)
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	4995      	ldr	r1, [pc, #596]	; (8005364 <Set_Screen+0x2bb0>)
 8005110:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005112:	9102      	str	r1, [sp, #8]
 8005114:	9201      	str	r2, [sp, #4]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	236e      	movs	r3, #110	; 0x6e
 800511a:	2264      	movs	r2, #100	; 0x64
 800511c:	2111      	movs	r1, #17
 800511e:	4893      	ldr	r0, [pc, #588]	; (800536c <Set_Screen+0x2bb8>)
 8005120:	f002 fa92 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Стоп биты        ", 17, 	100, 150, FonColor[2], BasicSymbolColor, Page[21]);
 8005124:	4b8d      	ldr	r3, [pc, #564]	; (800535c <Set_Screen+0x2ba8>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	4a8d      	ldr	r2, [pc, #564]	; (8005360 <Set_Screen+0x2bac>)
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	498d      	ldr	r1, [pc, #564]	; (8005364 <Set_Screen+0x2bb0>)
 800512e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005130:	9102      	str	r1, [sp, #8]
 8005132:	9201      	str	r2, [sp, #4]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	2396      	movs	r3, #150	; 0x96
 8005138:	2264      	movs	r2, #100	; 0x64
 800513a:	2111      	movs	r1, #17
 800513c:	488c      	ldr	r0, [pc, #560]	; (8005370 <Set_Screen+0x2bbc>)
 800513e:	f002 fa83 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Яркость дисплея  ", 17, 	100, 190, FonColor[3], BasicSymbolColor, Page[21]);
 8005142:	4b86      	ldr	r3, [pc, #536]	; (800535c <Set_Screen+0x2ba8>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	4a86      	ldr	r2, [pc, #536]	; (8005360 <Set_Screen+0x2bac>)
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	4986      	ldr	r1, [pc, #536]	; (8005364 <Set_Screen+0x2bb0>)
 800514c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800514e:	9102      	str	r1, [sp, #8]
 8005150:	9201      	str	r2, [sp, #4]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	23be      	movs	r3, #190	; 0xbe
 8005156:	2264      	movs	r2, #100	; 0x64
 8005158:	2111      	movs	r1, #17
 800515a:	4886      	ldr	r0, [pc, #536]	; (8005374 <Set_Screen+0x2bc0>)
 800515c:	f002 fa74 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Яркость клав-ры  ", 17, 	100, 230, FonColor[4], BasicSymbolColor, Page[21]);
 8005160:	4b7e      	ldr	r3, [pc, #504]	; (800535c <Set_Screen+0x2ba8>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	4a7e      	ldr	r2, [pc, #504]	; (8005360 <Set_Screen+0x2bac>)
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	497e      	ldr	r1, [pc, #504]	; (8005364 <Set_Screen+0x2bb0>)
 800516a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800516c:	9102      	str	r1, [sp, #8]
 800516e:	9201      	str	r2, [sp, #4]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	23e6      	movs	r3, #230	; 0xe6
 8005174:	2264      	movs	r2, #100	; 0x64
 8005176:	2111      	movs	r1, #17
 8005178:	487f      	ldr	r0, [pc, #508]	; (8005378 <Set_Screen+0x2bc4>)
 800517a:	f002 fa65 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>
			Short_Left_Colored_RU_DrawString_32("Сохранить во флеш", 17, 	100, 270, FonColor[5], BasicSymbolColor, Page[21]);
 800517e:	4b77      	ldr	r3, [pc, #476]	; (800535c <Set_Screen+0x2ba8>)
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	4a77      	ldr	r2, [pc, #476]	; (8005360 <Set_Screen+0x2bac>)
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	4977      	ldr	r1, [pc, #476]	; (8005364 <Set_Screen+0x2bb0>)
 8005188:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800518a:	9102      	str	r1, [sp, #8]
 800518c:	9201      	str	r2, [sp, #4]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8005194:	2264      	movs	r2, #100	; 0x64
 8005196:	2111      	movs	r1, #17
 8005198:	4878      	ldr	r0, [pc, #480]	; (800537c <Set_Screen+0x2bc8>)
 800519a:	f002 fa55 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_ADDR, 			0, 3, Control_DB.RazrPointer,    255,      0, 470,  70, 800,480, Page[21], FonColor[0], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 800519e:	4b78      	ldr	r3, [pc, #480]	; (8005380 <Set_Screen+0x2bcc>)
 80051a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80051a4:	461c      	mov	r4, r3
 80051a6:	4b6f      	ldr	r3, [pc, #444]	; (8005364 <Set_Screen+0x2bb0>)
 80051a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051aa:	4a6c      	ldr	r2, [pc, #432]	; (800535c <Set_Screen+0x2ba8>)
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	496c      	ldr	r1, [pc, #432]	; (8005360 <Set_Screen+0x2bac>)
 80051b0:	6809      	ldr	r1, [r1, #0]
 80051b2:	2012      	movs	r0, #18
 80051b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80051b6:	200b      	movs	r0, #11
 80051b8:	900a      	str	r0, [sp, #40]	; 0x28
 80051ba:	4872      	ldr	r0, [pc, #456]	; (8005384 <Set_Screen+0x2bd0>)
 80051bc:	9009      	str	r0, [sp, #36]	; 0x24
 80051be:	9108      	str	r1, [sp, #32]
 80051c0:	9207      	str	r2, [sp, #28]
 80051c2:	9306      	str	r3, [sp, #24]
 80051c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80051c8:	9305      	str	r3, [sp, #20]
 80051ca:	f44f 7348 	mov.w	r3, #800	; 0x320
 80051ce:	9304      	str	r3, [sp, #16]
 80051d0:	2346      	movs	r3, #70	; 0x46
 80051d2:	9303      	str	r3, [sp, #12]
 80051d4:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80051d8:	9302      	str	r3, [sp, #8]
 80051da:	2300      	movs	r3, #0
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	23ff      	movs	r3, #255	; 0xff
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	4623      	mov	r3, r4
 80051e4:	2203      	movs	r2, #3
 80051e6:	2100      	movs	r1, #0
 80051e8:	4867      	ldr	r0, [pc, #412]	; (8005388 <Set_Screen+0x2bd4>)
 80051ea:	f002 ffcb 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_Speed, 		0, 6, Control_DB.RazrPointer, 115200,   9600, 470, 110, 800,480, Page[21], FonColor[1], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80051ee:	4b64      	ldr	r3, [pc, #400]	; (8005380 <Set_Screen+0x2bcc>)
 80051f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80051f4:	461c      	mov	r4, r3
 80051f6:	4b5b      	ldr	r3, [pc, #364]	; (8005364 <Set_Screen+0x2bb0>)
 80051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fa:	4a58      	ldr	r2, [pc, #352]	; (800535c <Set_Screen+0x2ba8>)
 80051fc:	6852      	ldr	r2, [r2, #4]
 80051fe:	4958      	ldr	r1, [pc, #352]	; (8005360 <Set_Screen+0x2bac>)
 8005200:	6809      	ldr	r1, [r1, #0]
 8005202:	2012      	movs	r0, #18
 8005204:	900b      	str	r0, [sp, #44]	; 0x2c
 8005206:	200b      	movs	r0, #11
 8005208:	900a      	str	r0, [sp, #40]	; 0x28
 800520a:	485e      	ldr	r0, [pc, #376]	; (8005384 <Set_Screen+0x2bd0>)
 800520c:	9009      	str	r0, [sp, #36]	; 0x24
 800520e:	9108      	str	r1, [sp, #32]
 8005210:	9207      	str	r2, [sp, #28]
 8005212:	9306      	str	r3, [sp, #24]
 8005214:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005218:	9305      	str	r3, [sp, #20]
 800521a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	236e      	movs	r3, #110	; 0x6e
 8005222:	9303      	str	r3, [sp, #12]
 8005224:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8005228:	9302      	str	r3, [sp, #8]
 800522a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	4623      	mov	r3, r4
 8005238:	2206      	movs	r2, #6
 800523a:	2100      	movs	r1, #0
 800523c:	4853      	ldr	r0, [pc, #332]	; (800538c <Set_Screen+0x2bd8>)
 800523e:	f002 ffa1 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.RS485_Stops, 		0, 1, Control_DB.RazrPointer,      2,      1, 470, 150, 800,480, Page[21], FonColor[2], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8005242:	4b4f      	ldr	r3, [pc, #316]	; (8005380 <Set_Screen+0x2bcc>)
 8005244:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005248:	461c      	mov	r4, r3
 800524a:	4b46      	ldr	r3, [pc, #280]	; (8005364 <Set_Screen+0x2bb0>)
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	4a43      	ldr	r2, [pc, #268]	; (800535c <Set_Screen+0x2ba8>)
 8005250:	6892      	ldr	r2, [r2, #8]
 8005252:	4943      	ldr	r1, [pc, #268]	; (8005360 <Set_Screen+0x2bac>)
 8005254:	6809      	ldr	r1, [r1, #0]
 8005256:	2012      	movs	r0, #18
 8005258:	900b      	str	r0, [sp, #44]	; 0x2c
 800525a:	200b      	movs	r0, #11
 800525c:	900a      	str	r0, [sp, #40]	; 0x28
 800525e:	4849      	ldr	r0, [pc, #292]	; (8005384 <Set_Screen+0x2bd0>)
 8005260:	9009      	str	r0, [sp, #36]	; 0x24
 8005262:	9108      	str	r1, [sp, #32]
 8005264:	9207      	str	r2, [sp, #28]
 8005266:	9306      	str	r3, [sp, #24]
 8005268:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800526c:	9305      	str	r3, [sp, #20]
 800526e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	2396      	movs	r3, #150	; 0x96
 8005276:	9303      	str	r3, [sp, #12]
 8005278:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800527c:	9302      	str	r3, [sp, #8]
 800527e:	2301      	movs	r3, #1
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	2302      	movs	r3, #2
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	4623      	mov	r3, r4
 8005288:	2201      	movs	r2, #1
 800528a:	2100      	movs	r1, #0
 800528c:	4840      	ldr	r0, [pc, #256]	; (8005390 <Set_Screen+0x2bdc>)
 800528e:	f002 ff79 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.brightness_disp, 	0, 3, Control_DB.RazrPointer,    100,     10, 470, 190, 800,480, Page[21], FonColor[3], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 8005292:	4b3b      	ldr	r3, [pc, #236]	; (8005380 <Set_Screen+0x2bcc>)
 8005294:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005298:	461c      	mov	r4, r3
 800529a:	4b32      	ldr	r3, [pc, #200]	; (8005364 <Set_Screen+0x2bb0>)
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	4a2f      	ldr	r2, [pc, #188]	; (800535c <Set_Screen+0x2ba8>)
 80052a0:	68d2      	ldr	r2, [r2, #12]
 80052a2:	492f      	ldr	r1, [pc, #188]	; (8005360 <Set_Screen+0x2bac>)
 80052a4:	6809      	ldr	r1, [r1, #0]
 80052a6:	2012      	movs	r0, #18
 80052a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80052aa:	200b      	movs	r0, #11
 80052ac:	900a      	str	r0, [sp, #40]	; 0x28
 80052ae:	4835      	ldr	r0, [pc, #212]	; (8005384 <Set_Screen+0x2bd0>)
 80052b0:	9009      	str	r0, [sp, #36]	; 0x24
 80052b2:	9108      	str	r1, [sp, #32]
 80052b4:	9207      	str	r2, [sp, #28]
 80052b6:	9306      	str	r3, [sp, #24]
 80052b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80052bc:	9305      	str	r3, [sp, #20]
 80052be:	f44f 7348 	mov.w	r3, #800	; 0x320
 80052c2:	9304      	str	r3, [sp, #16]
 80052c4:	23be      	movs	r3, #190	; 0xbe
 80052c6:	9303      	str	r3, [sp, #12]
 80052c8:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80052cc:	9302      	str	r3, [sp, #8]
 80052ce:	230a      	movs	r3, #10
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	2364      	movs	r3, #100	; 0x64
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4623      	mov	r3, r4
 80052d8:	2203      	movs	r2, #3
 80052da:	2100      	movs	r1, #0
 80052dc:	482d      	ldr	r0, [pc, #180]	; (8005394 <Set_Screen+0x2be0>)
 80052de:	f002 ff51 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>
			Centred_DrawNumber_16_32bit_controled(&Settings_DB.brightness_clav, 	0, 3, Control_DB.RazrPointer,    100,     10, 470, 230, 800,480, Page[21], FonColor[4], BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80052e2:	4b27      	ldr	r3, [pc, #156]	; (8005380 <Set_Screen+0x2bcc>)
 80052e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80052e8:	461c      	mov	r4, r3
 80052ea:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <Set_Screen+0x2bb0>)
 80052ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ee:	4a1b      	ldr	r2, [pc, #108]	; (800535c <Set_Screen+0x2ba8>)
 80052f0:	6912      	ldr	r2, [r2, #16]
 80052f2:	491b      	ldr	r1, [pc, #108]	; (8005360 <Set_Screen+0x2bac>)
 80052f4:	6809      	ldr	r1, [r1, #0]
 80052f6:	2012      	movs	r0, #18
 80052f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80052fa:	200b      	movs	r0, #11
 80052fc:	900a      	str	r0, [sp, #40]	; 0x28
 80052fe:	4821      	ldr	r0, [pc, #132]	; (8005384 <Set_Screen+0x2bd0>)
 8005300:	9009      	str	r0, [sp, #36]	; 0x24
 8005302:	9108      	str	r1, [sp, #32]
 8005304:	9207      	str	r2, [sp, #28]
 8005306:	9306      	str	r3, [sp, #24]
 8005308:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800530c:	9305      	str	r3, [sp, #20]
 800530e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005312:	9304      	str	r3, [sp, #16]
 8005314:	23e6      	movs	r3, #230	; 0xe6
 8005316:	9303      	str	r3, [sp, #12]
 8005318:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800531c:	9302      	str	r3, [sp, #8]
 800531e:	230a      	movs	r3, #10
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	2364      	movs	r3, #100	; 0x64
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	4623      	mov	r3, r4
 8005328:	2203      	movs	r2, #3
 800532a:	2100      	movs	r1, #0
 800532c:	481a      	ldr	r0, [pc, #104]	; (8005398 <Set_Screen+0x2be4>)
 800532e:	f002 ff29 	bl	8008184 <Centred_DrawNumber_16_32bit_controled>

			Control_DB.MenuPointerMAX = 5;
 8005332:	4b13      	ldr	r3, [pc, #76]	; (8005380 <Set_Screen+0x2bcc>)
 8005334:	2205      	movs	r2, #5
 8005336:	809a      	strh	r2, [r3, #4]

			Short_Left_Colored_RU_DrawString_32("бод/с", 5,					585, 110, BackgroundColor, BasicSymbolColor, Page[21]);
 8005338:	4b18      	ldr	r3, [pc, #96]	; (800539c <Set_Screen+0x2be8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a08      	ldr	r2, [pc, #32]	; (8005360 <Set_Screen+0x2bac>)
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	4908      	ldr	r1, [pc, #32]	; (8005364 <Set_Screen+0x2bb0>)
 8005342:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005344:	9102      	str	r1, [sp, #8]
 8005346:	9201      	str	r2, [sp, #4]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	236e      	movs	r3, #110	; 0x6e
 800534c:	f240 2249 	movw	r2, #585	; 0x249
 8005350:	2105      	movs	r1, #5
 8005352:	4813      	ldr	r0, [pc, #76]	; (80053a0 <Set_Screen+0x2bec>)
 8005354:	f002 f978 	bl	8007648 <Short_Left_Colored_RU_DrawString_32>

		break;
 8005358:	e025      	b.n	80053a6 <Set_Screen+0x2bf2>
 800535a:	bf00      	nop
 800535c:	200000a4 	.word	0x200000a4
 8005360:	200009f4 	.word	0x200009f4
 8005364:	20000980 	.word	0x20000980
 8005368:	0800edec 	.word	0x0800edec
 800536c:	0800ee04 	.word	0x0800ee04
 8005370:	0800ee20 	.word	0x0800ee20
 8005374:	0800ee3c 	.word	0x0800ee3c
 8005378:	0800ee5c 	.word	0x0800ee5c
 800537c:	0800ee7c 	.word	0x0800ee7c
 8005380:	20000b70 	.word	0x20000b70
 8005384:	080117b0 	.word	0x080117b0
 8005388:	20000b54 	.word	0x20000b54
 800538c:	20000b58 	.word	0x20000b58
 8005390:	20000b5c 	.word	0x20000b5c
 8005394:	20000b68 	.word	0x20000b68
 8005398:	20000b6c 	.word	0x20000b6c
 800539c:	20000008 	.word	0x20000008
 80053a0:	0800eea0 	.word	0x0800eea0
		break;
 80053a4:	bf00      	nop

	}


	if(screen_event)
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <Set_Screen+0x2c34>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00e      	beq.n	80053cc <Set_Screen+0x2c18>
	{

		Control_DB.MenuPointer  		= 0;
 80053ae:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <Set_Screen+0x2c38>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	801a      	strh	r2, [r3, #0]
		Control_DB.RazrPointer 			= 0;
 80053b4:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <Set_Screen+0x2c38>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	805a      	strh	r2, [r3, #2]
		PassW_block.PassWord   			= 0;
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <Set_Screen+0x2c3c>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
		PassW_block.DataClearingUnlock	= 0;
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <Set_Screen+0x2c3c>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	741a      	strb	r2, [r3, #16]
		screen_event 					= 0;
 80053c6:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <Set_Screen+0x2c34>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]

	}

	HAL_LTDC_SetAddress(&hltdc, Page[screen], 0);
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <Set_Screen+0x2c40>)
 80053d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d4:	2200      	movs	r2, #0
 80053d6:	4619      	mov	r1, r3
 80053d8:	4807      	ldr	r0, [pc, #28]	; (80053f8 <Set_Screen+0x2c44>)
 80053da:	f004 fb5b 	bl	8009a94 <HAL_LTDC_SetAddress>
}
 80053de:	bf00      	nop
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bdb0      	pop	{r4, r5, r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200009f8 	.word	0x200009f8
 80053ec:	20000b70 	.word	0x20000b70
 80053f0:	200009fc 	.word	0x200009fc
 80053f4:	20000980 	.word	0x20000980
 80053f8:	20000144 	.word	0x20000144

080053fc <TimedBitValue_handler>:




void TimedBitValue_handler(TimedBitValue *Var)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	if(Var->state & !Var->state_mirror)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	2b00      	cmp	r3, #0
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	4013      	ands	r3, r2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <TimedBitValue_handler+0x2a>
	{
		Var->timer = Var->default_timer; // Запуск таймера при переходе 0 -> 1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	889a      	ldrh	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	805a      	strh	r2, [r3, #2]
	}
	Var->state_mirror = Var->state;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	781a      	ldrb	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	705a      	strb	r2, [r3, #1]

	if(!Var->state)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d103      	bne.n	800543e <TimedBitValue_handler+0x42>
	{
		Var->timer = 0; // Обнуление таймера при принудительном сбросе
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	805a      	strh	r2, [r3, #2]
		{
			Var->state = 0;
		}
		Var->timer--;
	}
}
 800543c:	e00c      	b.n	8005458 <TimedBitValue_handler+0x5c>
		if(!Var->timer)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	885b      	ldrh	r3, [r3, #2]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <TimedBitValue_handler+0x50>
			Var->state = 0;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]
		Var->timer--;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	885b      	ldrh	r3, [r3, #2]
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	805a      	strh	r2, [r3, #2]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005464:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005468:	b08a      	sub	sp, #40	; 0x28
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	PassW_block.PassWord 		=    0;
 800546c:	4b5d      	ldr	r3, [pc, #372]	; (80055e4 <main+0x180>)
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
	PassW_block.PassWord_true 	= 1234;
 8005472:	4b5c      	ldr	r3, [pc, #368]	; (80055e4 <main+0x180>)
 8005474:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8005478:	605a      	str	r2, [r3, #4]
	PassW_block.PassWord_DATA   = 3850;
 800547a:	4b5a      	ldr	r3, [pc, #360]	; (80055e4 <main+0x180>)
 800547c:	f640 720a 	movw	r2, #3850	; 0xf0a
 8005480:	60da      	str	r2, [r3, #12]
  BUV_settings.time_of_work_pump = 5;
 8005482:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <main+0x184>)
 8005484:	2205      	movs	r2, #5
 8005486:	601a      	str	r2, [r3, #0]
  BUV_settings.flushing_filter = 1;
 8005488:	4b57      	ldr	r3, [pc, #348]	; (80055e8 <main+0x184>)
 800548a:	2201      	movs	r2, #1
 800548c:	609a      	str	r2, [r3, #8]
  BUV_settings.conc_emul = 15;
 800548e:	4b56      	ldr	r3, [pc, #344]	; (80055e8 <main+0x184>)
 8005490:	220f      	movs	r2, #15
 8005492:	60da      	str	r2, [r3, #12]
  BUV_settings.pump_mode = 1;
 8005494:	4b54      	ldr	r3, [pc, #336]	; (80055e8 <main+0x184>)
 8005496:	2201      	movs	r2, #1
 8005498:	605a      	str	r2, [r3, #4]
  BUV_settings.time_flushing = 2;
 800549a:	4b53      	ldr	r3, [pc, #332]	; (80055e8 <main+0x184>)
 800549c:	2202      	movs	r2, #2
 800549e:	611a      	str	r2, [r3, #16]
  BUV_settings.work_pump1 = 1;
 80054a0:	4b51      	ldr	r3, [pc, #324]	; (80055e8 <main+0x184>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	615a      	str	r2, [r3, #20]
  BUV_settings.work_pump2 = 1;
 80054a6:	4b50      	ldr	r3, [pc, #320]	; (80055e8 <main+0x184>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	619a      	str	r2, [r3, #24]
  BUV_settings.work_pump3 = 1;
 80054ac:	4b4e      	ldr	r3, [pc, #312]	; (80055e8 <main+0x184>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	61da      	str	r2, [r3, #28]
  BUV_settings.count_work_pump = 1;
 80054b2:	4b4d      	ldr	r3, [pc, #308]	; (80055e8 <main+0x184>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	621a      	str	r2, [r3, #32]
  BUV_settings.work_auto_unload = 1;
 80054b8:	4b4b      	ldr	r3, [pc, #300]	; (80055e8 <main+0x184>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24
  BUV_settings.min_level_emul = 50;
 80054be:	4b4a      	ldr	r3, [pc, #296]	; (80055e8 <main+0x184>)
 80054c0:	2232      	movs	r2, #50	; 0x32
 80054c2:	629a      	str	r2, [r3, #40]	; 0x28
  BUV_settings.min_level_conc = 10;
 80054c4:	4b48      	ldr	r3, [pc, #288]	; (80055e8 <main+0x184>)
 80054c6:	220a      	movs	r2, #10
 80054c8:	62da      	str	r2, [r3, #44]	; 0x2c
  BUV_settings.min_level_emul_UP = 50;
 80054ca:	4b47      	ldr	r3, [pc, #284]	; (80055e8 <main+0x184>)
 80054cc:	2232      	movs	r2, #50	; 0x32
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
  BUV_settings.max_level_emul_UP = 50;
 80054d0:	4b45      	ldr	r3, [pc, #276]	; (80055e8 <main+0x184>)
 80054d2:	2232      	movs	r2, #50	; 0x32
 80054d4:	635a      	str	r2, [r3, #52]	; 0x34
  BUV_settings.flushing_mode_pressure_filter = 1;
 80054d6:	4b44      	ldr	r3, [pc, #272]	; (80055e8 <main+0x184>)
 80054d8:	2201      	movs	r2, #1
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
  BUV_settings.period_flushing_pressure_filter = 10;
 80054dc:	4b42      	ldr	r3, [pc, #264]	; (80055e8 <main+0x184>)
 80054de:	220a      	movs	r2, #10
 80054e0:	63da      	str	r2, [r3, #60]	; 0x3c
  BUV_settings.time_flushing_pressure_filter = 2;
 80054e2:	4b41      	ldr	r3, [pc, #260]	; (80055e8 <main+0x184>)
 80054e4:	2202      	movs	r2, #2
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40
  BUV_settings.difference_pressure_filter = 02;
 80054e8:	4b3f      	ldr	r3, [pc, #252]	; (80055e8 <main+0x184>)
 80054ea:	2202      	movs	r2, #2
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
  BUV_settings.time_control_pressure_filter = 3;
 80054ee:	4b3e      	ldr	r3, [pc, #248]	; (80055e8 <main+0x184>)
 80054f0:	2203      	movs	r2, #3
 80054f2:	649a      	str	r2, [r3, #72]	; 0x48
  BUV_settings.flushing_mode_water_filter = 1;
 80054f4:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <main+0x184>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	64da      	str	r2, [r3, #76]	; 0x4c
  BUV_settings.period_flushing_water_filter = 10;
 80054fa:	4b3b      	ldr	r3, [pc, #236]	; (80055e8 <main+0x184>)
 80054fc:	220a      	movs	r2, #10
 80054fe:	651a      	str	r2, [r3, #80]	; 0x50
  BUV_settings.time_flushing_water_filter = 2;
 8005500:	4b39      	ldr	r3, [pc, #228]	; (80055e8 <main+0x184>)
 8005502:	2202      	movs	r2, #2
 8005504:	655a      	str	r2, [r3, #84]	; 0x54
  BUV_settings.difference_water_filter = 02;
 8005506:	4b38      	ldr	r3, [pc, #224]	; (80055e8 <main+0x184>)
 8005508:	2202      	movs	r2, #2
 800550a:	659a      	str	r2, [r3, #88]	; 0x58
  BUV_settings.time_control_water_filter = 3;
 800550c:	4b36      	ldr	r3, [pc, #216]	; (80055e8 <main+0x184>)
 800550e:	2203      	movs	r2, #3
 8005510:	65da      	str	r2, [r3, #92]	; 0x5c


	memcpy(&Settings_DB, 0x08060000, sizeof(Settings_DB)); // чтение настроек с флеш
 8005512:	4a36      	ldr	r2, [pc, #216]	; (80055ec <main+0x188>)
 8005514:	4b36      	ldr	r3, [pc, #216]	; (80055f0 <main+0x18c>)
 8005516:	4614      	mov	r4, r2
 8005518:	461d      	mov	r5, r3
 800551a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800551c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800551e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Settings_DB.FlashWriteFlag	 = 0;
 8005526:	4b31      	ldr	r3, [pc, #196]	; (80055ec <main+0x188>)
 8005528:	2200      	movs	r2, #0
 800552a:	741a      	strb	r2, [r3, #16]
	Settings_DB.RS485_Parity	 = 0;
 800552c:	4b2f      	ldr	r3, [pc, #188]	; (80055ec <main+0x188>)
 800552e:	2200      	movs	r2, #0
 8005530:	60da      	str	r2, [r3, #12]

	if(Settings_DB.RS485_ADDR == -1)
 8005532:	4b2e      	ldr	r3, [pc, #184]	; (80055ec <main+0x188>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d10f      	bne.n	800555c <main+0xf8>
	{
		Settings_DB.RS485_ADDR  = 1;
 800553c:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <main+0x188>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
		Settings_DB.RS485_Speed = 115200;
 8005542:	4b2a      	ldr	r3, [pc, #168]	; (80055ec <main+0x188>)
 8005544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005548:	605a      	str	r2, [r3, #4]
		Settings_DB.RS485_Stops = 1;
 800554a:	4b28      	ldr	r3, [pc, #160]	; (80055ec <main+0x188>)
 800554c:	2201      	movs	r2, #1
 800554e:	609a      	str	r2, [r3, #8]
		Settings_DB.brightness_disp = 100;
 8005550:	4b26      	ldr	r3, [pc, #152]	; (80055ec <main+0x188>)
 8005552:	2264      	movs	r2, #100	; 0x64
 8005554:	615a      	str	r2, [r3, #20]
		Settings_DB.brightness_clav = 100;
 8005556:	4b25      	ldr	r3, [pc, #148]	; (80055ec <main+0x188>)
 8005558:	2264      	movs	r2, #100	; 0x64
 800555a:	619a      	str	r2, [r3, #24]
	}

	Slave_1.PORT    		= UART7_BASE;
 800555c:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <main+0x190>)
 800555e:	4a26      	ldr	r2, [pc, #152]	; (80055f8 <main+0x194>)
 8005560:	601a      	str	r2, [r3, #0]
	Slave_1.MB_Addr 		= Settings_DB.RS485_ADDR;
 8005562:	4b22      	ldr	r3, [pc, #136]	; (80055ec <main+0x188>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	b2da      	uxtb	r2, r3
 8005568:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <main+0x190>)
 800556a:	711a      	strb	r2, [r3, #4]
	Slave_1.Roll_max 		= 0;
 800556c:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <main+0x190>)
 800556e:	2200      	movs	r2, #0
 8005570:	81da      	strh	r2, [r3, #14]
	Slave_1.Transmit_delay 	= 2;
 8005572:	4b20      	ldr	r3, [pc, #128]	; (80055f4 <main+0x190>)
 8005574:	2202      	movs	r2, #2
 8005576:	f8a3 2616 	strh.w	r2, [r3, #1558]	; 0x616
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800557a:	f003 fa1d 	bl	80089b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800557e:	f000 f94f 	bl	8005820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005582:	f000 fc23 	bl	8005dcc <MX_GPIO_Init>
  MX_DMA2D_Init();
 8005586:	f000 f9bb 	bl	8005900 <MX_DMA2D_Init>
  MX_FMC_Init();
 800558a:	f000 fbcd 	bl	8005d28 <MX_FMC_Init>
  MX_LTDC_Init();
 800558e:	f000 f9e9 	bl	8005964 <MX_LTDC_Init>
  MX_SPI1_Init();
 8005592:	f000 fa69 	bl	8005a68 <MX_SPI1_Init>
  MX_UART7_Init();
 8005596:	f000 fb6d 	bl	8005c74 <MX_UART7_Init>
  MX_TIM4_Init();
 800559a:	f000 fa9b 	bl	8005ad4 <MX_TIM4_Init>
  MX_TIM5_Init();
 800559e:	f000 fb1b 	bl	8005bd8 <MX_TIM5_Init>





	TIM4->CCR3 = 0;
 80055a2:	4b16      	ldr	r3, [pc, #88]	; (80055fc <main+0x198>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 0;
 80055a8:	4b14      	ldr	r3, [pc, #80]	; (80055fc <main+0x198>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80055ae:	2108      	movs	r1, #8
 80055b0:	4813      	ldr	r0, [pc, #76]	; (8005600 <main+0x19c>)
 80055b2:	f005 fcf1 	bl	800af98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80055b6:	210c      	movs	r1, #12
 80055b8:	4811      	ldr	r0, [pc, #68]	; (8005600 <main+0x19c>)
 80055ba:	f005 fced 	bl	800af98 <HAL_TIM_PWM_Start>


	BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 80055be:	4911      	ldr	r1, [pc, #68]	; (8005604 <main+0x1a0>)
 80055c0:	4811      	ldr	r0, [pc, #68]	; (8005608 <main+0x1a4>)
 80055c2:	f000 fd29 	bl	8006018 <BSP_SDRAM_Initialization_Sequence>

	HAL_DMA2D_ConfigDeadTime(&hdma2d, 100);
 80055c6:	2164      	movs	r1, #100	; 0x64
 80055c8:	4810      	ldr	r0, [pc, #64]	; (800560c <main+0x1a8>)
 80055ca:	f003 fd33 	bl	8009034 <HAL_DMA2D_ConfigDeadTime>
	HAL_DMA2D_EnableDeadTime(&hdma2d);
 80055ce:	480f      	ldr	r0, [pc, #60]	; (800560c <main+0x1a8>)
 80055d0:	f003 fd06 	bl	8008fe0 <HAL_DMA2D_EnableDeadTime>

	Page[0] = SDRAM_BANK_ADDR;
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <main+0x1ac>)
 80055d6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80055da:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 29; i++)
 80055dc:	2301      	movs	r3, #1
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	e028      	b.n	8005634 <main+0x1d0>
 80055e2:	bf00      	nop
 80055e4:	200009fc 	.word	0x200009fc
 80055e8:	20000b84 	.word	0x20000b84
 80055ec:	20000b54 	.word	0x20000b54
 80055f0:	08060000 	.word	0x08060000
 80055f4:	20000354 	.word	0x20000354
 80055f8:	40007800 	.word	0x40007800
 80055fc:	40000800 	.word	0x40000800
 8005600:	20000244 	.word	0x20000244
 8005604:	2000096c 	.word	0x2000096c
 8005608:	20000318 	.word	0x20000318
 800560c:	20000104 	.word	0x20000104
 8005610:	20000980 	.word	0x20000980
	{
		Page[i] = Page[i-1] + (800*480*3);
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	3b01      	subs	r3, #1
 8005618:	4a72      	ldr	r2, [pc, #456]	; (80057e4 <main+0x380>)
 800561a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561e:	f503 138c 	add.w	r3, r3, #1146880	; 0x118000
 8005622:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8005626:	496f      	ldr	r1, [pc, #444]	; (80057e4 <main+0x380>)
 8005628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for(int i = 1; i < 29; i++)
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	3301      	adds	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	2b1c      	cmp	r3, #28
 8005638:	ddec      	ble.n	8005614 <main+0x1b0>
	}

	Screens_init();
 800563a:	f7fc fa77 	bl	8001b2c <Screens_init>
	HAL_GPIO_WritePin(LTDC_DISP_GPIO_Port, LTDC_DISP_Pin, GPIO_PIN_SET);
 800563e:	2201      	movs	r2, #1
 8005640:	2108      	movs	r1, #8
 8005642:	4869      	ldr	r0, [pc, #420]	; (80057e8 <main+0x384>)
 8005644:	f004 f8fe 	bl	8009844 <HAL_GPIO_WritePin>
	PWM_launch = 1;
 8005648:	4b68      	ldr	r3, [pc, #416]	; (80057ec <main+0x388>)
 800564a:	2201      	movs	r2, #1
 800564c:	701a      	strb	r2, [r3, #0]


	screen = 1;
 800564e:	4b68      	ldr	r3, [pc, #416]	; (80057f0 <main+0x38c>)
 8005650:	2201      	movs	r2, #1
 8005652:	701a      	strb	r2, [r3, #0]


	HAL_TIM_Base_Start_IT(&htim5);
 8005654:	4867      	ldr	r0, [pc, #412]	; (80057f4 <main+0x390>)
 8005656:	f005 fbd5 	bl	800ae04 <HAL_TIM_Base_Start_IT>





	ALG_DB.clearing_pressure_filter_1.default_timer = 1000;
 800565a:	4b67      	ldr	r3, [pc, #412]	; (80057f8 <main+0x394>)
 800565c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005660:	809a      	strh	r2, [r3, #4]
	ALG_DB.clearing_pressure_filter_2.default_timer = 1000;
 8005662:	4b65      	ldr	r3, [pc, #404]	; (80057f8 <main+0x394>)
 8005664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005668:	815a      	strh	r2, [r3, #10]
	ALG_DB.clearing_water_filter_1.default_timer	= 1000;
 800566a:	4b63      	ldr	r3, [pc, #396]	; (80057f8 <main+0x394>)
 800566c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005670:	821a      	strh	r2, [r3, #16]
	ALG_DB.clearing_water_filter_2.default_timer	= 1000;
 8005672:	4b61      	ldr	r3, [pc, #388]	; (80057f8 <main+0x394>)
 8005674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005678:	82da      	strh	r2, [r3, #22]
	ALG_DB.clearing_water_filter_3.default_timer	= 1000;
 800567a:	4b5f      	ldr	r3, [pc, #380]	; (80057f8 <main+0x394>)
 800567c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005680:	839a      	strh	r2, [r3, #28]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(PWM_launch)
 8005682:	4b5a      	ldr	r3, [pc, #360]	; (80057ec <main+0x388>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d04f      	beq.n	800572a <main+0x2c6>
	{
		float temp  = brightness_disp;
 800568a:	4b5c      	ldr	r3, [pc, #368]	; (80057fc <main+0x398>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	edc7 7a08 	vstr	s15, [r7, #32]
		float temp2 = Settings_DB.brightness_disp;
 800569a:	4b59      	ldr	r3, [pc, #356]	; (8005800 <main+0x39c>)
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056a6:	edc7 7a07 	vstr	s15, [r7, #28]
		temp2 /= 100;
 80056aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80056ae:	eddf 6a55 	vldr	s13, [pc, #340]	; 8005804 <main+0x3a0>
 80056b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056b6:	edc7 7a07 	vstr	s15, [r7, #28]
		temp *= temp2;
 80056ba:	ed97 7a08 	vldr	s14, [r7, #32]
 80056be:	edd7 7a07 	vldr	s15, [r7, #28]
 80056c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c6:	edc7 7a08 	vstr	s15, [r7, #32]
		TIM4->CCR3 = temp;
 80056ca:	4b4f      	ldr	r3, [pc, #316]	; (8005808 <main+0x3a4>)
 80056cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80056d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d4:	ee17 2a90 	vmov	r2, s15
 80056d8:	63da      	str	r2, [r3, #60]	; 0x3c

		temp  = brightness_clav;
 80056da:	4b4c      	ldr	r3, [pc, #304]	; (800580c <main+0x3a8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e6:	edc7 7a08 	vstr	s15, [r7, #32]
		temp2 = Settings_DB.brightness_clav;
 80056ea:	4b45      	ldr	r3, [pc, #276]	; (8005800 <main+0x39c>)
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f6:	edc7 7a07 	vstr	s15, [r7, #28]
		temp2 /= 100;
 80056fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80056fe:	eddf 6a41 	vldr	s13, [pc, #260]	; 8005804 <main+0x3a0>
 8005702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005706:	edc7 7a07 	vstr	s15, [r7, #28]
		temp *= temp2;
 800570a:	ed97 7a08 	vldr	s14, [r7, #32]
 800570e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005716:	edc7 7a08 	vstr	s15, [r7, #32]
		TIM4->CCR4 = temp;
 800571a:	4b3b      	ldr	r3, [pc, #236]	; (8005808 <main+0x3a4>)
 800571c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005724:	ee17 2a90 	vmov	r2, s15
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
	} // работа с подсветкой

	if(Settings_DB.FlashWriteFlag)
 800572a:	4b35      	ldr	r3, [pc, #212]	; (8005800 <main+0x39c>)
 800572c:	7c1b      	ldrb	r3, [r3, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d051      	beq.n	80057d6 <main+0x372>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005732:	b672      	cpsid	i
}
 8005734:	bf00      	nop
	{

		__disable_irq (); // запретить прерывания

		HAL_FLASH_Unlock();
 8005736:	f003 fd01 	bl	800913c <HAL_FLASH_Unlock>

		FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_1); // стирание сектора 7 (0x08060000)
 800573a:	2100      	movs	r1, #0
 800573c:	2007      	movs	r0, #7
 800573e:	f003 fe6f 	bl	8009420 <FLASH_Erase_Sector>

		while(FLASH->SR & 0x01){;} // Ждем пока снимется флаг BSY=
 8005742:	bf00      	nop
 8005744:	4b32      	ldr	r3, [pc, #200]	; (8005810 <main+0x3ac>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f9      	bne.n	8005744 <main+0x2e0>

		uint8_t massive[sizeof(Settings_DB)];
		memcpy(&massive, &Settings_DB, sizeof(Settings_DB));
 8005750:	4b2b      	ldr	r3, [pc, #172]	; (8005800 <main+0x39c>)
 8005752:	463c      	mov	r4, r7
 8005754:	461d      	mov	r5, r3
 8005756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800575a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800575e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		for(flash_i = 0; flash_i < sizeof(Settings_DB); flash_i++)
 8005762:	4b2c      	ldr	r3, [pc, #176]	; (8005814 <main+0x3b0>)
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e01a      	b.n	80057a0 <main+0x33c>
		{
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x08060000 + flash_i, massive[flash_i]);
 800576a:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <main+0x3b0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005772:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 8005776:	4619      	mov	r1, r3
 8005778:	4b26      	ldr	r3, [pc, #152]	; (8005814 <main+0x3b0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3328      	adds	r3, #40	; 0x28
 800577e:	443b      	add	r3, r7
 8005780:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2200      	movs	r2, #0
 8005788:	4698      	mov	r8, r3
 800578a:	4691      	mov	r9, r2
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	2000      	movs	r0, #0
 8005792:	f003 fc7f 	bl	8009094 <HAL_FLASH_Program>
		for(flash_i = 0; flash_i < sizeof(Settings_DB); flash_i++)
 8005796:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <main+0x3b0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3301      	adds	r3, #1
 800579c:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <main+0x3b0>)
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <main+0x3b0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b1b      	cmp	r3, #27
 80057a6:	d9e0      	bls.n	800576a <main+0x306>
		}

		HAL_FLASH_Lock();
 80057a8:	f003 fcea 	bl	8009180 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80057ac:	b662      	cpsie	i
}
 80057ae:	bf00      	nop
		__enable_irq ();  // разрешить прерывания

		MX_UART7_Init();
 80057b0:	f000 fa60 	bl	8005c74 <MX_UART7_Init>

		screen 						= 1;
 80057b4:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <main+0x38c>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]
		Control_DB.MenuPointer 		= 0;
 80057ba:	4b17      	ldr	r3, [pc, #92]	; (8005818 <main+0x3b4>)
 80057bc:	2200      	movs	r2, #0
 80057be:	801a      	strh	r2, [r3, #0]
		Settings_DB.FlashWriteFlag 	= 0;
 80057c0:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <main+0x39c>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	741a      	strb	r2, [r3, #16]
		Control_DB.RazrPointer      = 0;
 80057c6:	4b14      	ldr	r3, [pc, #80]	; (8005818 <main+0x3b4>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	805a      	strh	r2, [r3, #2]
		Slave_1.MB_Addr 			= Settings_DB.RS485_ADDR;
 80057cc:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <main+0x39c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	4b12      	ldr	r3, [pc, #72]	; (800581c <main+0x3b8>)
 80057d4:	711a      	strb	r2, [r3, #4]

	} // перепись настроек flash

	Set_Screen(screen);
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <main+0x38c>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fc ffea 	bl	80027b4 <Set_Screen>
  {
 80057e0:	e74f      	b.n	8005682 <main+0x21e>
 80057e2:	bf00      	nop
 80057e4:	20000980 	.word	0x20000980
 80057e8:	40021000 	.word	0x40021000
 80057ec:	200009f9 	.word	0x200009f9
 80057f0:	20000018 	.word	0x20000018
 80057f4:	2000028c 	.word	0x2000028c
 80057f8:	20000a10 	.word	0x20000a10
 80057fc:	2000034c 	.word	0x2000034c
 8005800:	20000b54 	.word	0x20000b54
 8005804:	42c80000 	.word	0x42c80000
 8005808:	40000800 	.word	0x40000800
 800580c:	20000350 	.word	0x20000350
 8005810:	40023c00 	.word	0x40023c00
 8005814:	2000097c 	.word	0x2000097c
 8005818:	20000b70 	.word	0x20000b70
 800581c:	20000354 	.word	0x20000354

08005820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b094      	sub	sp, #80	; 0x50
 8005824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005826:	f107 0320 	add.w	r3, r7, #32
 800582a:	2230      	movs	r2, #48	; 0x30
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f007 fb52 	bl	800ced8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005834:	f107 030c 	add.w	r3, r7, #12
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	609a      	str	r2, [r3, #8]
 8005840:	60da      	str	r2, [r3, #12]
 8005842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005844:	2300      	movs	r3, #0
 8005846:	60bb      	str	r3, [r7, #8]
 8005848:	4b2b      	ldr	r3, [pc, #172]	; (80058f8 <SystemClock_Config+0xd8>)
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <SystemClock_Config+0xd8>)
 800584e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005852:	6413      	str	r3, [r2, #64]	; 0x40
 8005854:	4b28      	ldr	r3, [pc, #160]	; (80058f8 <SystemClock_Config+0xd8>)
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005860:	2300      	movs	r3, #0
 8005862:	607b      	str	r3, [r7, #4]
 8005864:	4b25      	ldr	r3, [pc, #148]	; (80058fc <SystemClock_Config+0xdc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a24      	ldr	r2, [pc, #144]	; (80058fc <SystemClock_Config+0xdc>)
 800586a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	4b22      	ldr	r3, [pc, #136]	; (80058fc <SystemClock_Config+0xdc>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800587c:	2301      	movs	r3, #1
 800587e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005886:	2302      	movs	r3, #2
 8005888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800588a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005890:	2304      	movs	r3, #4
 8005892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005894:	23b4      	movs	r3, #180	; 0xb4
 8005896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005898:	2302      	movs	r3, #2
 800589a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800589c:	2304      	movs	r3, #4
 800589e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058a0:	f107 0320 	add.w	r3, r7, #32
 80058a4:	4618      	mov	r0, r3
 80058a6:	f004 fb13 	bl	8009ed0 <HAL_RCC_OscConfig>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80058b0:	f000 fc10 	bl	80060d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80058b4:	f004 fabc 	bl	8009e30 <HAL_PWREx_EnableOverDrive>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80058be:	f000 fc09 	bl	80060d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058c2:	230f      	movs	r3, #15
 80058c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058c6:	2302      	movs	r3, #2
 80058c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80058ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80058d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80058d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80058da:	f107 030c 	add.w	r3, r7, #12
 80058de:	2105      	movs	r1, #5
 80058e0:	4618      	mov	r0, r3
 80058e2:	f004 fd6d 	bl	800a3c0 <HAL_RCC_ClockConfig>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80058ec:	f000 fbf2 	bl	80060d4 <Error_Handler>
  }
}
 80058f0:	bf00      	nop
 80058f2:	3750      	adds	r7, #80	; 0x50
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40023800 	.word	0x40023800
 80058fc:	40007000 	.word	0x40007000

08005900 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8005904:	4b15      	ldr	r3, [pc, #84]	; (800595c <MX_DMA2D_Init+0x5c>)
 8005906:	4a16      	ldr	r2, [pc, #88]	; (8005960 <MX_DMA2D_Init+0x60>)
 8005908:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800590a:	4b14      	ldr	r3, [pc, #80]	; (800595c <MX_DMA2D_Init+0x5c>)
 800590c:	2200      	movs	r2, #0
 800590e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8005910:	4b12      	ldr	r3, [pc, #72]	; (800595c <MX_DMA2D_Init+0x5c>)
 8005912:	2201      	movs	r2, #1
 8005914:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8005916:	4b11      	ldr	r3, [pc, #68]	; (800595c <MX_DMA2D_Init+0x5c>)
 8005918:	2200      	movs	r2, #0
 800591a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800591c:	4b0f      	ldr	r3, [pc, #60]	; (800595c <MX_DMA2D_Init+0x5c>)
 800591e:	2200      	movs	r2, #0
 8005920:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8005922:	4b0e      	ldr	r3, [pc, #56]	; (800595c <MX_DMA2D_Init+0x5c>)
 8005924:	2201      	movs	r2, #1
 8005926:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005928:	4b0c      	ldr	r3, [pc, #48]	; (800595c <MX_DMA2D_Init+0x5c>)
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800592e:	4b0b      	ldr	r3, [pc, #44]	; (800595c <MX_DMA2D_Init+0x5c>)
 8005930:	2200      	movs	r2, #0
 8005932:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8005934:	4809      	ldr	r0, [pc, #36]	; (800595c <MX_DMA2D_Init+0x5c>)
 8005936:	f003 fa78 	bl	8008e2a <HAL_DMA2D_Init>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8005940:	f000 fbc8 	bl	80060d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8005944:	2101      	movs	r1, #1
 8005946:	4805      	ldr	r0, [pc, #20]	; (800595c <MX_DMA2D_Init+0x5c>)
 8005948:	f003 fab8 	bl	8008ebc <HAL_DMA2D_ConfigLayer>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8005952:	f000 fbbf 	bl	80060d4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8005956:	bf00      	nop
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000104 	.word	0x20000104
 8005960:	4002b000 	.word	0x4002b000

08005964 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08e      	sub	sp, #56	; 0x38
 8005968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800596a:	1d3b      	adds	r3, r7, #4
 800596c:	2234      	movs	r2, #52	; 0x34
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f007 fab1 	bl	800ced8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8005976:	4b3a      	ldr	r3, [pc, #232]	; (8005a60 <MX_LTDC_Init+0xfc>)
 8005978:	4a3a      	ldr	r2, [pc, #232]	; (8005a64 <MX_LTDC_Init+0x100>)
 800597a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800597c:	4b38      	ldr	r3, [pc, #224]	; (8005a60 <MX_LTDC_Init+0xfc>)
 800597e:	2200      	movs	r2, #0
 8005980:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005982:	4b37      	ldr	r3, [pc, #220]	; (8005a60 <MX_LTDC_Init+0xfc>)
 8005984:	2200      	movs	r2, #0
 8005986:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005988:	4b35      	ldr	r3, [pc, #212]	; (8005a60 <MX_LTDC_Init+0xfc>)
 800598a:	2200      	movs	r2, #0
 800598c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800598e:	4b34      	ldr	r3, [pc, #208]	; (8005a60 <MX_LTDC_Init+0xfc>)
 8005990:	2200      	movs	r2, #0
 8005992:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 47;
 8005994:	4b32      	ldr	r3, [pc, #200]	; (8005a60 <MX_LTDC_Init+0xfc>)
 8005996:	222f      	movs	r2, #47	; 0x2f
 8005998:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800599a:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <MX_LTDC_Init+0xfc>)
 800599c:	2200      	movs	r2, #0
 800599e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 87;
 80059a0:	4b2f      	ldr	r3, [pc, #188]	; (8005a60 <MX_LTDC_Init+0xfc>)
 80059a2:	2257      	movs	r2, #87	; 0x57
 80059a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 80059a6:	4b2e      	ldr	r3, [pc, #184]	; (8005a60 <MX_LTDC_Init+0xfc>)
 80059a8:	221f      	movs	r2, #31
 80059aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 887;
 80059ac:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <MX_LTDC_Init+0xfc>)
 80059ae:	f240 3277 	movw	r2, #887	; 0x377
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 511;
 80059b4:	4b2a      	ldr	r3, [pc, #168]	; (8005a60 <MX_LTDC_Init+0xfc>)
 80059b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 927;
 80059bc:	4b28      	ldr	r3, [pc, #160]	; (8005a60 <MX_LTDC_Init+0xfc>)
 80059be:	f240 329f 	movw	r2, #927	; 0x39f
 80059c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 524;
 80059c4:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <MX_LTDC_Init+0xfc>)
 80059c6:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80059cc:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <MX_LTDC_Init+0xfc>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80059d4:	4b22      	ldr	r3, [pc, #136]	; (8005a60 <MX_LTDC_Init+0xfc>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80059dc:	4b20      	ldr	r3, [pc, #128]	; (8005a60 <MX_LTDC_Init+0xfc>)
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80059e4:	481e      	ldr	r0, [pc, #120]	; (8005a60 <MX_LTDC_Init+0xfc>)
 80059e6:	f003 ff47 	bl	8009878 <HAL_LTDC_Init>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80059f0:	f000 fb70 	bl	80060d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80059f8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80059fc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8005a02:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005a06:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8005a0c:	23ff      	movs	r3, #255	; 0xff
 8005a0e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005a14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a18:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005a1a:	2307      	movs	r3, #7
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8005a1e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8005a22:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8005a24:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8005a2a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005a42:	1d3b      	adds	r3, r7, #4
 8005a44:	2200      	movs	r2, #0
 8005a46:	4619      	mov	r1, r3
 8005a48:	4805      	ldr	r0, [pc, #20]	; (8005a60 <MX_LTDC_Init+0xfc>)
 8005a4a:	f003 ffe5 	bl	8009a18 <HAL_LTDC_ConfigLayer>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8005a54:	f000 fb3e 	bl	80060d4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8005a58:	bf00      	nop
 8005a5a:	3738      	adds	r7, #56	; 0x38
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20000144 	.word	0x20000144
 8005a64:	40016800 	.word	0x40016800

08005a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005a6c:	4b17      	ldr	r3, [pc, #92]	; (8005acc <MX_SPI1_Init+0x64>)
 8005a6e:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <MX_SPI1_Init+0x68>)
 8005a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <MX_SPI1_Init+0x64>)
 8005a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a7a:	4b14      	ldr	r3, [pc, #80]	; (8005acc <MX_SPI1_Init+0x64>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005a80:	4b12      	ldr	r3, [pc, #72]	; (8005acc <MX_SPI1_Init+0x64>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <MX_SPI1_Init+0x64>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <MX_SPI1_Init+0x64>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005a92:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <MX_SPI1_Init+0x64>)
 8005a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <MX_SPI1_Init+0x64>)
 8005a9c:	2218      	movs	r2, #24
 8005a9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <MX_SPI1_Init+0x64>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <MX_SPI1_Init+0x64>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aac:	4b07      	ldr	r3, [pc, #28]	; (8005acc <MX_SPI1_Init+0x64>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <MX_SPI1_Init+0x64>)
 8005ab4:	220a      	movs	r2, #10
 8005ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005ab8:	4804      	ldr	r0, [pc, #16]	; (8005acc <MX_SPI1_Init+0x64>)
 8005aba:	f005 f8ca 	bl	800ac52 <HAL_SPI_Init>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005ac4:	f000 fb06 	bl	80060d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005ac8:	bf00      	nop
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	200001ec 	.word	0x200001ec
 8005ad0:	40013000 	.word	0x40013000

08005ad4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08e      	sub	sp, #56	; 0x38
 8005ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	605a      	str	r2, [r3, #4]
 8005ae4:	609a      	str	r2, [r3, #8]
 8005ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ae8:	f107 0320 	add.w	r3, r7, #32
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005af2:	1d3b      	adds	r3, r7, #4
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	605a      	str	r2, [r3, #4]
 8005afa:	609a      	str	r2, [r3, #8]
 8005afc:	60da      	str	r2, [r3, #12]
 8005afe:	611a      	str	r2, [r3, #16]
 8005b00:	615a      	str	r2, [r3, #20]
 8005b02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b04:	4b32      	ldr	r3, [pc, #200]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005b06:	4a33      	ldr	r2, [pc, #204]	; (8005bd4 <MX_TIM4_Init+0x100>)
 8005b08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005b0a:	4b31      	ldr	r3, [pc, #196]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b10:	4b2f      	ldr	r3, [pc, #188]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8005b16:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005b18:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b24:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005b2a:	4829      	ldr	r0, [pc, #164]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005b2c:	f005 f91a 	bl	800ad64 <HAL_TIM_Base_Init>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8005b36:	f000 facd 	bl	80060d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005b40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b44:	4619      	mov	r1, r3
 8005b46:	4822      	ldr	r0, [pc, #136]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005b48:	f005 fcb8 	bl	800b4bc <HAL_TIM_ConfigClockSource>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8005b52:	f000 fabf 	bl	80060d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005b56:	481e      	ldr	r0, [pc, #120]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005b58:	f005 f9c4 	bl	800aee4 <HAL_TIM_PWM_Init>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8005b62:	f000 fab7 	bl	80060d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b66:	2300      	movs	r3, #0
 8005b68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005b6e:	f107 0320 	add.w	r3, r7, #32
 8005b72:	4619      	mov	r1, r3
 8005b74:	4816      	ldr	r0, [pc, #88]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005b76:	f006 f8ab 	bl	800bcd0 <HAL_TIMEx_MasterConfigSynchronization>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005b80:	f000 faa8 	bl	80060d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b84:	2360      	movs	r3, #96	; 0x60
 8005b86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005b94:	1d3b      	adds	r3, r7, #4
 8005b96:	2208      	movs	r2, #8
 8005b98:	4619      	mov	r1, r3
 8005b9a:	480d      	ldr	r0, [pc, #52]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005b9c:	f005 fbcc 	bl	800b338 <HAL_TIM_PWM_ConfigChannel>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005ba6:	f000 fa95 	bl	80060d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005baa:	1d3b      	adds	r3, r7, #4
 8005bac:	220c      	movs	r2, #12
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4807      	ldr	r0, [pc, #28]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005bb2:	f005 fbc1 	bl	800b338 <HAL_TIM_PWM_ConfigChannel>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8005bbc:	f000 fa8a 	bl	80060d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005bc0:	4803      	ldr	r0, [pc, #12]	; (8005bd0 <MX_TIM4_Init+0xfc>)
 8005bc2:	f000 fc53 	bl	800646c <HAL_TIM_MspPostInit>

}
 8005bc6:	bf00      	nop
 8005bc8:	3738      	adds	r7, #56	; 0x38
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000244 	.word	0x20000244
 8005bd4:	40000800 	.word	0x40000800

08005bd8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bde:	f107 0308 	add.w	r3, r7, #8
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	605a      	str	r2, [r3, #4]
 8005be8:	609a      	str	r2, [r3, #8]
 8005bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bec:	463b      	mov	r3, r7
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005bf4:	4b1c      	ldr	r3, [pc, #112]	; (8005c68 <MX_TIM5_Init+0x90>)
 8005bf6:	4a1d      	ldr	r2, [pc, #116]	; (8005c6c <MX_TIM5_Init+0x94>)
 8005bf8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8005bfa:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <MX_TIM5_Init+0x90>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c00:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <MX_TIM5_Init+0x90>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90000;
 8005c06:	4b18      	ldr	r3, [pc, #96]	; (8005c68 <MX_TIM5_Init+0x90>)
 8005c08:	4a19      	ldr	r2, [pc, #100]	; (8005c70 <MX_TIM5_Init+0x98>)
 8005c0a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c0c:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <MX_TIM5_Init+0x90>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <MX_TIM5_Init+0x90>)
 8005c14:	2280      	movs	r2, #128	; 0x80
 8005c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005c18:	4813      	ldr	r0, [pc, #76]	; (8005c68 <MX_TIM5_Init+0x90>)
 8005c1a:	f005 f8a3 	bl	800ad64 <HAL_TIM_Base_Init>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8005c24:	f000 fa56 	bl	80060d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005c2e:	f107 0308 	add.w	r3, r7, #8
 8005c32:	4619      	mov	r1, r3
 8005c34:	480c      	ldr	r0, [pc, #48]	; (8005c68 <MX_TIM5_Init+0x90>)
 8005c36:	f005 fc41 	bl	800b4bc <HAL_TIM_ConfigClockSource>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8005c40:	f000 fa48 	bl	80060d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c44:	2300      	movs	r3, #0
 8005c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005c4c:	463b      	mov	r3, r7
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4805      	ldr	r0, [pc, #20]	; (8005c68 <MX_TIM5_Init+0x90>)
 8005c52:	f006 f83d 	bl	800bcd0 <HAL_TIMEx_MasterConfigSynchronization>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8005c5c:	f000 fa3a 	bl	80060d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005c60:	bf00      	nop
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	2000028c 	.word	0x2000028c
 8005c6c:	40000c00 	.word	0x40000c00
 8005c70:	00015f90 	.word	0x00015f90

08005c74 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */

	  huart7.Instance = UART7;
 8005c78:	4b28      	ldr	r3, [pc, #160]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005c7a:	4a29      	ldr	r2, [pc, #164]	; (8005d20 <MX_UART7_Init+0xac>)
 8005c7c:	601a      	str	r2, [r3, #0]

	  huart7.Init.BaudRate = Settings_DB.RS485_Speed;
 8005c7e:	4b29      	ldr	r3, [pc, #164]	; (8005d24 <MX_UART7_Init+0xb0>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	461a      	mov	r2, r3
 8005c84:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005c86:	605a      	str	r2, [r3, #4]

	  if(Settings_DB.RS485_Parity)
 8005c88:	4b26      	ldr	r3, [pc, #152]	; (8005d24 <MX_UART7_Init+0xb0>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <MX_UART7_Init+0x26>
	  {
		  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8005c90:	4b22      	ldr	r3, [pc, #136]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005c92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	e002      	b.n	8005ca0 <MX_UART7_Init+0x2c>
	  }
	  else
	  {
		  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005c9a:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	609a      	str	r2, [r3, #8]
	  }

	  if(Settings_DB.RS485_Stops == 1)
 8005ca0:	4b20      	ldr	r3, [pc, #128]	; (8005d24 <MX_UART7_Init+0xb0>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d103      	bne.n	8005cb0 <MX_UART7_Init+0x3c>
	  {
		  huart7.Init.StopBits = UART_STOPBITS_1;
 8005ca8:	4b1c      	ldr	r3, [pc, #112]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	e003      	b.n	8005cb8 <MX_UART7_Init+0x44>
	  }
	  else
	  {
		  huart7.Init.StopBits = UART_STOPBITS_2;
 8005cb0:	4b1a      	ldr	r3, [pc, #104]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cb6:	60da      	str	r2, [r3, #12]
	  }

	  switch(Settings_DB.RS485_Parity)
 8005cb8:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <MX_UART7_Init+0xb0>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d00f      	beq.n	8005ce0 <MX_UART7_Init+0x6c>
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	dc12      	bgt.n	8005cea <MX_UART7_Init+0x76>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <MX_UART7_Init+0x5a>
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d004      	beq.n	8005cd6 <MX_UART7_Init+0x62>
 8005ccc:	e00d      	b.n	8005cea <MX_UART7_Init+0x76>
	  {
	  	  case 0:
	  		  huart7.Init.Parity = UART_PARITY_NONE;
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	611a      	str	r2, [r3, #16]
	      break;
 8005cd4:	e009      	b.n	8005cea <MX_UART7_Init+0x76>
	  	  case 1:
	  		  huart7.Init.Parity = UART_PARITY_EVEN;
 8005cd6:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cdc:	611a      	str	r2, [r3, #16]
	      break;
 8005cde:	e004      	b.n	8005cea <MX_UART7_Init+0x76>
	  	  case 2:
	  		  huart7.Init.Parity = UART_PARITY_ODD;
 8005ce0:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005ce2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005ce6:	611a      	str	r2, [r3, #16]
	      break;
 8005ce8:	bf00      	nop
	  }

	  huart7.Init.Mode = UART_MODE_TX_RX;
 8005cea:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005cec:	220c      	movs	r2, #12
 8005cee:	615a      	str	r2, [r3, #20]
	  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	619a      	str	r2, [r3, #24]
	  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cf6:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005cfc:	4807      	ldr	r0, [pc, #28]	; (8005d1c <MX_UART7_Init+0xa8>)
 8005cfe:	f006 f877 	bl	800bdf0 <HAL_UART_Init>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <MX_UART7_Init+0x98>
	  {
	    Error_Handler();
 8005d08:	f000 f9e4 	bl	80060d4 <Error_Handler>
	  }

  /* USER CODE BEGIN UART7_Init 2 */
  UART7->CR1 |= 0x20;
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <MX_UART7_Init+0xac>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4a03      	ldr	r2, [pc, #12]	; (8005d20 <MX_UART7_Init+0xac>)
 8005d12:	f043 0320 	orr.w	r3, r3, #32
 8005d16:	60d3      	str	r3, [r2, #12]
  /* USER CODE END UART7_Init 2 */

}
 8005d18:	bf00      	nop
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	200002d4 	.word	0x200002d4
 8005d20:	40007800 	.word	0x40007800
 8005d24:	20000b54 	.word	0x20000b54

08005d28 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8005d2e:	1d3b      	adds	r3, r7, #4
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	605a      	str	r2, [r3, #4]
 8005d36:	609a      	str	r2, [r3, #8]
 8005d38:	60da      	str	r2, [r3, #12]
 8005d3a:	611a      	str	r2, [r3, #16]
 8005d3c:	615a      	str	r2, [r3, #20]
 8005d3e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005d40:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005d42:	4a21      	ldr	r2, [pc, #132]	; (8005dc8 <MX_FMC_Init+0xa0>)
 8005d44:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8005d46:	4b1f      	ldr	r3, [pc, #124]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005d4c:	4b1d      	ldr	r3, [pc, #116]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8005d52:	4b1c      	ldr	r3, [pc, #112]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005d54:	2208      	movs	r2, #8
 8005d56:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8005d58:	4b1a      	ldr	r3, [pc, #104]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005d5a:	2210      	movs	r2, #16
 8005d5c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005d5e:	4b19      	ldr	r3, [pc, #100]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005d60:	2240      	movs	r2, #64	; 0x40
 8005d62:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8005d64:	4b17      	ldr	r3, [pc, #92]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d6a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005d6c:	4b15      	ldr	r3, [pc, #84]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8005d72:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d78:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8005d7a:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005d7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8005d82:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005d84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d88:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8005d8e:	2308      	movs	r3, #8
 8005d90:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 5;
 8005d92:	2305      	movs	r3, #5
 8005d94:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 8;
 8005d96:	2308      	movs	r3, #8
 8005d98:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 8005d9a:	2304      	movs	r3, #4
 8005d9c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8005da2:	2302      	movs	r3, #2
 8005da4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005da6:	1d3b      	adds	r3, r7, #4
 8005da8:	4619      	mov	r1, r3
 8005daa:	4806      	ldr	r0, [pc, #24]	; (8005dc4 <MX_FMC_Init+0x9c>)
 8005dac:	f004 fee8 	bl	800ab80 <HAL_SDRAM_Init>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8005db6:	f000 f98d 	bl	80060d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8005dba:	bf00      	nop
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000318 	.word	0x20000318
 8005dc8:	a0000140 	.word	0xa0000140

08005dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b090      	sub	sp, #64	; 0x40
 8005dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
 8005dde:	60da      	str	r2, [r3, #12]
 8005de0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005de2:	2300      	movs	r3, #0
 8005de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de6:	4b84      	ldr	r3, [pc, #528]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	4a83      	ldr	r2, [pc, #524]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005dec:	f043 0310 	orr.w	r3, r3, #16
 8005df0:	6313      	str	r3, [r2, #48]	; 0x30
 8005df2:	4b81      	ldr	r3, [pc, #516]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005dfe:	2300      	movs	r3, #0
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
 8005e02:	4b7d      	ldr	r3, [pc, #500]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	4a7c      	ldr	r2, [pc, #496]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e0e:	4b7a      	ldr	r3, [pc, #488]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	623b      	str	r3, [r7, #32]
 8005e1e:	4b76      	ldr	r3, [pc, #472]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	4a75      	ldr	r2, [pc, #468]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e24:	f043 0320 	orr.w	r3, r3, #32
 8005e28:	6313      	str	r3, [r2, #48]	; 0x30
 8005e2a:	4b73      	ldr	r3, [pc, #460]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	623b      	str	r3, [r7, #32]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
 8005e3a:	4b6f      	ldr	r3, [pc, #444]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	4a6e      	ldr	r2, [pc, #440]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e44:	6313      	str	r3, [r2, #48]	; 0x30
 8005e46:	4b6c      	ldr	r3, [pc, #432]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e52:	2300      	movs	r3, #0
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	4b68      	ldr	r3, [pc, #416]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	4a67      	ldr	r2, [pc, #412]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e5c:	f043 0304 	orr.w	r3, r3, #4
 8005e60:	6313      	str	r3, [r2, #48]	; 0x30
 8005e62:	4b65      	ldr	r3, [pc, #404]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	f003 0304 	and.w	r3, r3, #4
 8005e6a:	61bb      	str	r3, [r7, #24]
 8005e6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	4b61      	ldr	r3, [pc, #388]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	4a60      	ldr	r2, [pc, #384]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e7e:	4b5e      	ldr	r3, [pc, #376]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	4b5a      	ldr	r3, [pc, #360]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	4a59      	ldr	r2, [pc, #356]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e94:	f043 0302 	orr.w	r3, r3, #2
 8005e98:	6313      	str	r3, [r2, #48]	; 0x30
 8005e9a:	4b57      	ldr	r3, [pc, #348]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	4b53      	ldr	r3, [pc, #332]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	4a52      	ldr	r2, [pc, #328]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005eb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005eb6:	4b50      	ldr	r3, [pc, #320]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	4b4c      	ldr	r3, [pc, #304]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	4a4b      	ldr	r2, [pc, #300]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ed2:	4b49      	ldr	r3, [pc, #292]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ede:	2300      	movs	r3, #0
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	4b45      	ldr	r3, [pc, #276]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	4a44      	ldr	r2, [pc, #272]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005ee8:	f043 0308 	orr.w	r3, r3, #8
 8005eec:	6313      	str	r3, [r2, #48]	; 0x30
 8005eee:	4b42      	ldr	r3, [pc, #264]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	607b      	str	r3, [r7, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005efa:	2300      	movs	r3, #0
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	4b3e      	ldr	r3, [pc, #248]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	4a3d      	ldr	r2, [pc, #244]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005f04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f08:	6313      	str	r3, [r2, #48]	; 0x30
 8005f0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ff8 <MX_GPIO_Init+0x22c>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_DISP_GPIO_Port, LTDC_DISP_Pin, GPIO_PIN_RESET);
 8005f16:	2200      	movs	r2, #0
 8005f18:	2108      	movs	r1, #8
 8005f1a:	4838      	ldr	r0, [pc, #224]	; (8005ffc <MX_GPIO_Init+0x230>)
 8005f1c:	f003 fc92 	bl	8009844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485DE_GPIO_Port, RS485DE_Pin, GPIO_PIN_RESET);
 8005f20:	2200      	movs	r2, #0
 8005f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f26:	4836      	ldr	r0, [pc, #216]	; (8006000 <MX_GPIO_Init+0x234>)
 8005f28:	f003 fc8c 	bl	8009844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	2110      	movs	r1, #16
 8005f30:	4834      	ldr	r0, [pc, #208]	; (8006004 <MX_GPIO_Init+0x238>)
 8005f32:	f003 fc87 	bl	8009844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_DISP_Pin */
  GPIO_InitStruct.Pin = LTDC_DISP_Pin;
 8005f36:	2308      	movs	r3, #8
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f42:	2300      	movs	r3, #0
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LTDC_DISP_GPIO_Port, &GPIO_InitStruct);
 8005f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	482b      	ldr	r0, [pc, #172]	; (8005ffc <MX_GPIO_Init+0x230>)
 8005f4e:	f003 fab5 	bl	80094bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485DE_Pin */
  GPIO_InitStruct.Pin = RS485DE_Pin;
 8005f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f60:	2303      	movs	r3, #3
 8005f62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(RS485DE_GPIO_Port, &GPIO_InitStruct);
 8005f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4825      	ldr	r0, [pc, #148]	; (8006000 <MX_GPIO_Init+0x234>)
 8005f6c:	f003 faa6 	bl	80094bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8005f70:	2310      	movs	r3, #16
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f74:	2301      	movs	r3, #1
 8005f76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8005f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f84:	4619      	mov	r1, r3
 8005f86:	481f      	ldr	r0, [pc, #124]	; (8006004 <MX_GPIO_Init+0x238>)
 8005f88:	f003 fa98 	bl	80094bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 8005f8c:	2320      	movs	r3, #32
 8005f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f90:	2300      	movs	r3, #0
 8005f92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f94:	2301      	movs	r3, #1
 8005f96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8005f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	481a      	ldr	r0, [pc, #104]	; (8006008 <MX_GPIO_Init+0x23c>)
 8005fa0:	f003 fa8c 	bl	80094bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin BUTTON_4_Pin BUTTON_5_Pin
                           BUTTON_6_Pin BUTTON_7_Pin BUTTON_8_Pin BUTTON_16_Pin
                           BUTTON_15_Pin BUTTON_14_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_4_Pin|BUTTON_5_Pin
 8005fa4:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BUTTON_6_Pin|BUTTON_7_Pin|BUTTON_8_Pin|BUTTON_16_Pin
                          |BUTTON_15_Pin|BUTTON_14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005faa:	2300      	movs	r3, #0
 8005fac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4814      	ldr	r0, [pc, #80]	; (800600c <MX_GPIO_Init+0x240>)
 8005fba:	f003 fa7f 	bl	80094bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_12_Pin BUTTON_11_Pin BUTTON_10_Pin BUTTON_9_Pin */
  GPIO_InitStruct.Pin = BUTTON_12_Pin|BUTTON_11_Pin|BUTTON_10_Pin|BUTTON_9_Pin;
 8005fbe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	480f      	ldr	r0, [pc, #60]	; (8006010 <MX_GPIO_Init+0x244>)
 8005fd4:	f003 fa72 	bl	80094bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_13_Pin */
  GPIO_InitStruct.Pin = BUTTON_13_Pin;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_13_GPIO_Port, &GPIO_InitStruct);
 8005fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fe8:	4619      	mov	r1, r3
 8005fea:	480a      	ldr	r0, [pc, #40]	; (8006014 <MX_GPIO_Init+0x248>)
 8005fec:	f003 fa66 	bl	80094bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005ff0:	bf00      	nop
 8005ff2:	3740      	adds	r7, #64	; 0x40
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	40021000 	.word	0x40021000
 8006000:	40021400 	.word	0x40021400
 8006004:	40020000 	.word	0x40020000
 8006008:	40022400 	.word	0x40022400
 800600c:	40021c00 	.word	0x40021c00
 8006010:	40020800 	.word	0x40020800
 8006014:	40022000 	.word	0x40022000

08006018 <BSP_SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */

void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command){
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2201      	movs	r2, #1
 800602a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2210      	movs	r2, #16
 8006030:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2201      	movs	r2, #1
 8006036:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2200      	movs	r2, #0
 800603c:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800603e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f004 fdcf 	bl	800abe8 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800604a:	2001      	movs	r0, #1
 800604c:	f002 fd26 	bl	8008a9c <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2202      	movs	r2, #2
 8006054:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2210      	movs	r2, #16
 800605a:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2201      	movs	r2, #1
 8006060:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2200      	movs	r2, #0
 8006066:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8006068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f004 fdba 	bl	800abe8 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2203      	movs	r2, #3
 8006078:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2210      	movs	r2, #16
 800607e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2208      	movs	r2, #8
 8006084:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2200      	movs	r2, #0
 800608a:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800608c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f004 fda8 	bl	800abe8 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8006098:	f44f 7308 	mov.w	r3, #544	; 0x220
 800609c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2204      	movs	r2, #4
 80060a2:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2210      	movs	r2, #16
 80060a8:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2201      	movs	r2, #1
 80060ae:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	60da      	str	r2, [r3, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80060b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f004 fd93 	bl	800abe8 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  //hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
  hsdram->Instance->SDRTR = ((uint32_t)(64000*65/4096-20) << 1);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80060ca:	615a      	str	r2, [r3, #20]
};
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80060d8:	b672      	cpsid	i
}
 80060da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80060dc:	e7fe      	b.n	80060dc <Error_Handler+0x8>
	...

080060e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060e6:	2300      	movs	r3, #0
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	4b10      	ldr	r3, [pc, #64]	; (800612c <HAL_MspInit+0x4c>)
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	4a0f      	ldr	r2, [pc, #60]	; (800612c <HAL_MspInit+0x4c>)
 80060f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060f4:	6453      	str	r3, [r2, #68]	; 0x44
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <HAL_MspInit+0x4c>)
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006102:	2300      	movs	r3, #0
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_MspInit+0x4c>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	4a08      	ldr	r2, [pc, #32]	; (800612c <HAL_MspInit+0x4c>)
 800610c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006110:	6413      	str	r3, [r2, #64]	; 0x40
 8006112:	4b06      	ldr	r3, [pc, #24]	; (800612c <HAL_MspInit+0x4c>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40023800 	.word	0x40023800

08006130 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a0b      	ldr	r2, [pc, #44]	; (800616c <HAL_DMA2D_MspInit+0x3c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d10d      	bne.n	800615e <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <HAL_DMA2D_MspInit+0x40>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	4a09      	ldr	r2, [pc, #36]	; (8006170 <HAL_DMA2D_MspInit+0x40>)
 800614c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006150:	6313      	str	r3, [r2, #48]	; 0x30
 8006152:	4b07      	ldr	r3, [pc, #28]	; (8006170 <HAL_DMA2D_MspInit+0x40>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	4002b000 	.word	0x4002b000
 8006170:	40023800 	.word	0x40023800

08006174 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b09a      	sub	sp, #104	; 0x68
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800617c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	609a      	str	r2, [r3, #8]
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800618c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006190:	2230      	movs	r2, #48	; 0x30
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f006 fe9f 	bl	800ced8 <memset>
  if(hltdc->Instance==LTDC)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a69      	ldr	r2, [pc, #420]	; (8006344 <HAL_LTDC_MspInit+0x1d0>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	f040 80ca 	bne.w	800633a <HAL_LTDC_MspInit+0x1c6>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80061a6:	2308      	movs	r3, #8
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80061aa:	2332      	movs	r3, #50	; 0x32
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80061ae:	2302      	movs	r3, #2
 80061b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80061b2:	2300      	movs	r3, #0
 80061b4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061ba:	4618      	mov	r0, r3
 80061bc:	f004 fb20 	bl	800a800 <HAL_RCCEx_PeriphCLKConfig>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80061c6:	f7ff ff85 	bl	80060d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80061ca:	2300      	movs	r3, #0
 80061cc:	623b      	str	r3, [r7, #32]
 80061ce:	4b5e      	ldr	r3, [pc, #376]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	4a5d      	ldr	r2, [pc, #372]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 80061d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061d8:	6453      	str	r3, [r2, #68]	; 0x44
 80061da:	4b5b      	ldr	r3, [pc, #364]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061e2:	623b      	str	r3, [r7, #32]
 80061e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	4b57      	ldr	r3, [pc, #348]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	4a56      	ldr	r2, [pc, #344]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 80061f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f4:	6313      	str	r3, [r2, #48]	; 0x30
 80061f6:	4b54      	ldr	r3, [pc, #336]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006202:	2300      	movs	r3, #0
 8006204:	61bb      	str	r3, [r7, #24]
 8006206:	4b50      	ldr	r3, [pc, #320]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	4a4f      	ldr	r2, [pc, #316]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 800620c:	f043 0320 	orr.w	r3, r3, #32
 8006210:	6313      	str	r3, [r2, #48]	; 0x30
 8006212:	4b4d      	ldr	r3, [pc, #308]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	4b49      	ldr	r3, [pc, #292]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	4a48      	ldr	r2, [pc, #288]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 8006228:	f043 0302 	orr.w	r3, r3, #2
 800622c:	6313      	str	r3, [r2, #48]	; 0x30
 800622e:	4b46      	ldr	r3, [pc, #280]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800623a:	2300      	movs	r3, #0
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	4b42      	ldr	r3, [pc, #264]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	4a41      	ldr	r2, [pc, #260]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 8006244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006248:	6313      	str	r3, [r2, #48]	; 0x30
 800624a:	4b3f      	ldr	r3, [pc, #252]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006252:	613b      	str	r3, [r7, #16]
 8006254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	4b3b      	ldr	r3, [pc, #236]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	4a3a      	ldr	r2, [pc, #232]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 8006260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006264:	6313      	str	r3, [r2, #48]	; 0x30
 8006266:	4b38      	ldr	r3, [pc, #224]	; (8006348 <HAL_LTDC_MspInit+0x1d4>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
    PK3     ------> LTDC_B4
    PK4     ------> LTDC_B5
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8006272:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8006276:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006278:	2302      	movs	r3, #2
 800627a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800627c:	2300      	movs	r3, #0
 800627e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006280:	2303      	movs	r3, #3
 8006282:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006284:	230e      	movs	r3, #14
 8006286:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006288:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800628c:	4619      	mov	r1, r3
 800628e:	482f      	ldr	r0, [pc, #188]	; (800634c <HAL_LTDC_MspInit+0x1d8>)
 8006290:	f003 f914 	bl	80094bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006298:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800629a:	2302      	movs	r3, #2
 800629c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062a2:	2303      	movs	r3, #3
 80062a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80062a6:	230e      	movs	r3, #14
 80062a8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80062aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80062ae:	4619      	mov	r1, r3
 80062b0:	4827      	ldr	r0, [pc, #156]	; (8006350 <HAL_LTDC_MspInit+0x1dc>)
 80062b2:	f003 f903 	bl	80094bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80062b6:	2302      	movs	r3, #2
 80062b8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ba:	2302      	movs	r3, #2
 80062bc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062c2:	2303      	movs	r3, #3
 80062c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80062c6:	2309      	movs	r3, #9
 80062c8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80062ce:	4619      	mov	r1, r3
 80062d0:	4820      	ldr	r0, [pc, #128]	; (8006354 <HAL_LTDC_MspInit+0x1e0>)
 80062d2:	f003 f8f3 	bl	80094bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80062d6:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80062da:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062dc:	2302      	movs	r3, #2
 80062de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062e4:	2303      	movs	r3, #3
 80062e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80062e8:	230e      	movs	r3, #14
 80062ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80062ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80062f0:	4619      	mov	r1, r3
 80062f2:	4819      	ldr	r0, [pc, #100]	; (8006358 <HAL_LTDC_MspInit+0x1e4>)
 80062f4:	f003 f8e2 	bl	80094bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80062f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062fc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062fe:	2302      	movs	r3, #2
 8006300:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006302:	2300      	movs	r3, #0
 8006304:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006306:	2303      	movs	r3, #3
 8006308:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800630a:	230e      	movs	r3, #14
 800630c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800630e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006312:	4619      	mov	r1, r3
 8006314:	480f      	ldr	r0, [pc, #60]	; (8006354 <HAL_LTDC_MspInit+0x1e0>)
 8006316:	f003 f8d1 	bl	80094bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800631a:	237f      	movs	r3, #127	; 0x7f
 800631c:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800631e:	2302      	movs	r3, #2
 8006320:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006322:	2300      	movs	r3, #0
 8006324:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006326:	2303      	movs	r3, #3
 8006328:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800632a:	230e      	movs	r3, #14
 800632c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800632e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006332:	4619      	mov	r1, r3
 8006334:	4809      	ldr	r0, [pc, #36]	; (800635c <HAL_LTDC_MspInit+0x1e8>)
 8006336:	f003 f8c1 	bl	80094bc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800633a:	bf00      	nop
 800633c:	3768      	adds	r7, #104	; 0x68
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40016800 	.word	0x40016800
 8006348:	40023800 	.word	0x40023800
 800634c:	40022000 	.word	0x40022000
 8006350:	40021400 	.word	0x40021400
 8006354:	40020400 	.word	0x40020400
 8006358:	40022400 	.word	0x40022400
 800635c:	40022800 	.word	0x40022800

08006360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a19      	ldr	r2, [pc, #100]	; (80063e4 <HAL_SPI_MspInit+0x84>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d12b      	bne.n	80063da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <HAL_SPI_MspInit+0x88>)
 8006388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638a:	4a17      	ldr	r2, [pc, #92]	; (80063e8 <HAL_SPI_MspInit+0x88>)
 800638c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006390:	6453      	str	r3, [r2, #68]	; 0x44
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <HAL_SPI_MspInit+0x88>)
 8006394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <HAL_SPI_MspInit+0x88>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	4a10      	ldr	r2, [pc, #64]	; (80063e8 <HAL_SPI_MspInit+0x88>)
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	6313      	str	r3, [r2, #48]	; 0x30
 80063ae:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <HAL_SPI_MspInit+0x88>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80063ba:	23e0      	movs	r3, #224	; 0xe0
 80063bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063be:	2302      	movs	r3, #2
 80063c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c6:	2303      	movs	r3, #3
 80063c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80063ca:	2305      	movs	r3, #5
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	4619      	mov	r1, r3
 80063d4:	4805      	ldr	r0, [pc, #20]	; (80063ec <HAL_SPI_MspInit+0x8c>)
 80063d6:	f003 f871 	bl	80094bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80063da:	bf00      	nop
 80063dc:	3728      	adds	r7, #40	; 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40013000 	.word	0x40013000
 80063e8:	40023800 	.word	0x40023800
 80063ec:	40020000 	.word	0x40020000

080063f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a18      	ldr	r2, [pc, #96]	; (8006460 <HAL_TIM_Base_MspInit+0x70>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d10e      	bne.n	8006420 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	4b17      	ldr	r3, [pc, #92]	; (8006464 <HAL_TIM_Base_MspInit+0x74>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	4a16      	ldr	r2, [pc, #88]	; (8006464 <HAL_TIM_Base_MspInit+0x74>)
 800640c:	f043 0304 	orr.w	r3, r3, #4
 8006410:	6413      	str	r3, [r2, #64]	; 0x40
 8006412:	4b14      	ldr	r3, [pc, #80]	; (8006464 <HAL_TIM_Base_MspInit+0x74>)
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800641e:	e01a      	b.n	8006456 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a10      	ldr	r2, [pc, #64]	; (8006468 <HAL_TIM_Base_MspInit+0x78>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d115      	bne.n	8006456 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800642a:	2300      	movs	r3, #0
 800642c:	60bb      	str	r3, [r7, #8]
 800642e:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <HAL_TIM_Base_MspInit+0x74>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	4a0c      	ldr	r2, [pc, #48]	; (8006464 <HAL_TIM_Base_MspInit+0x74>)
 8006434:	f043 0308 	orr.w	r3, r3, #8
 8006438:	6413      	str	r3, [r2, #64]	; 0x40
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <HAL_TIM_Base_MspInit+0x74>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8006446:	2200      	movs	r2, #0
 8006448:	2101      	movs	r1, #1
 800644a:	2032      	movs	r0, #50	; 0x32
 800644c:	f002 fc25 	bl	8008c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006450:	2032      	movs	r0, #50	; 0x32
 8006452:	f002 fc3e 	bl	8008cd2 <HAL_NVIC_EnableIRQ>
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40000800 	.word	0x40000800
 8006464:	40023800 	.word	0x40023800
 8006468:	40000c00 	.word	0x40000c00

0800646c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006474:	f107 030c 	add.w	r3, r7, #12
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	60da      	str	r2, [r3, #12]
 8006482:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a12      	ldr	r2, [pc, #72]	; (80064d4 <HAL_TIM_MspPostInit+0x68>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d11e      	bne.n	80064cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800648e:	2300      	movs	r3, #0
 8006490:	60bb      	str	r3, [r7, #8]
 8006492:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <HAL_TIM_MspPostInit+0x6c>)
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	4a10      	ldr	r2, [pc, #64]	; (80064d8 <HAL_TIM_MspPostInit+0x6c>)
 8006498:	f043 0302 	orr.w	r3, r3, #2
 800649c:	6313      	str	r3, [r2, #48]	; 0x30
 800649e:	4b0e      	ldr	r3, [pc, #56]	; (80064d8 <HAL_TIM_MspPostInit+0x6c>)
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80064aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b0:	2302      	movs	r3, #2
 80064b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80064bc:	2302      	movs	r3, #2
 80064be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064c0:	f107 030c 	add.w	r3, r7, #12
 80064c4:	4619      	mov	r1, r3
 80064c6:	4805      	ldr	r0, [pc, #20]	; (80064dc <HAL_TIM_MspPostInit+0x70>)
 80064c8:	f002 fff8 	bl	80094bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80064cc:	bf00      	nop
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40000800 	.word	0x40000800
 80064d8:	40023800 	.word	0x40023800
 80064dc:	40020400 	.word	0x40020400

080064e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064e8:	f107 0314 	add.w	r3, r7, #20
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	605a      	str	r2, [r3, #4]
 80064f2:	609a      	str	r2, [r3, #8]
 80064f4:	60da      	str	r2, [r3, #12]
 80064f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <HAL_UART_MspInit+0x94>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d133      	bne.n	800656a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	4b1c      	ldr	r3, [pc, #112]	; (8006578 <HAL_UART_MspInit+0x98>)
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	4a1b      	ldr	r2, [pc, #108]	; (8006578 <HAL_UART_MspInit+0x98>)
 800650c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006510:	6413      	str	r3, [r2, #64]	; 0x40
 8006512:	4b19      	ldr	r3, [pc, #100]	; (8006578 <HAL_UART_MspInit+0x98>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	4b15      	ldr	r3, [pc, #84]	; (8006578 <HAL_UART_MspInit+0x98>)
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006526:	4a14      	ldr	r2, [pc, #80]	; (8006578 <HAL_UART_MspInit+0x98>)
 8006528:	f043 0320 	orr.w	r3, r3, #32
 800652c:	6313      	str	r3, [r2, #48]	; 0x30
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <HAL_UART_MspInit+0x98>)
 8006530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800653a:	23c0      	movs	r3, #192	; 0xc0
 800653c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800653e:	2302      	movs	r3, #2
 8006540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006542:	2300      	movs	r3, #0
 8006544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006546:	2303      	movs	r3, #3
 8006548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800654a:	2308      	movs	r3, #8
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800654e:	f107 0314 	add.w	r3, r7, #20
 8006552:	4619      	mov	r1, r3
 8006554:	4809      	ldr	r0, [pc, #36]	; (800657c <HAL_UART_MspInit+0x9c>)
 8006556:	f002 ffb1 	bl	80094bc <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800655a:	2200      	movs	r2, #0
 800655c:	2100      	movs	r1, #0
 800655e:	2052      	movs	r0, #82	; 0x52
 8006560:	f002 fb9b 	bl	8008c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006564:	2052      	movs	r0, #82	; 0x52
 8006566:	f002 fbb4 	bl	8008cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800656a:	bf00      	nop
 800656c:	3728      	adds	r7, #40	; 0x28
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40007800 	.word	0x40007800
 8006578:	40023800 	.word	0x40023800
 800657c:	40021400 	.word	0x40021400

08006580 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006586:	1d3b      	adds	r3, r7, #4
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	605a      	str	r2, [r3, #4]
 800658e:	609a      	str	r2, [r3, #8]
 8006590:	60da      	str	r2, [r3, #12]
 8006592:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006594:	4b34      	ldr	r3, [pc, #208]	; (8006668 <HAL_FMC_MspInit+0xe8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d160      	bne.n	800665e <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 800659c:	4b32      	ldr	r3, [pc, #200]	; (8006668 <HAL_FMC_MspInit+0xe8>)
 800659e:	2201      	movs	r2, #1
 80065a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	603b      	str	r3, [r7, #0]
 80065a6:	4b31      	ldr	r3, [pc, #196]	; (800666c <HAL_FMC_MspInit+0xec>)
 80065a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065aa:	4a30      	ldr	r2, [pc, #192]	; (800666c <HAL_FMC_MspInit+0xec>)
 80065ac:	f043 0301 	orr.w	r3, r3, #1
 80065b0:	6393      	str	r3, [r2, #56]	; 0x38
 80065b2:	4b2e      	ldr	r3, [pc, #184]	; (800666c <HAL_FMC_MspInit+0xec>)
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80065be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80065c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065c4:	2302      	movs	r3, #2
 80065c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065cc:	2303      	movs	r3, #3
 80065ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80065d0:	230c      	movs	r3, #12
 80065d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80065d4:	1d3b      	adds	r3, r7, #4
 80065d6:	4619      	mov	r1, r3
 80065d8:	4825      	ldr	r0, [pc, #148]	; (8006670 <HAL_FMC_MspInit+0xf0>)
 80065da:	f002 ff6f 	bl	80094bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80065de:	230d      	movs	r3, #13
 80065e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e2:	2302      	movs	r3, #2
 80065e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065ea:	2303      	movs	r3, #3
 80065ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80065ee:	230c      	movs	r3, #12
 80065f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065f2:	1d3b      	adds	r3, r7, #4
 80065f4:	4619      	mov	r1, r3
 80065f6:	481f      	ldr	r0, [pc, #124]	; (8006674 <HAL_FMC_MspInit+0xf4>)
 80065f8:	f002 ff60 	bl	80094bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80065fc:	f248 1337 	movw	r3, #33079	; 0x8137
 8006600:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006602:	2302      	movs	r3, #2
 8006604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800660a:	2303      	movs	r3, #3
 800660c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800660e:	230c      	movs	r3, #12
 8006610:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006612:	1d3b      	adds	r3, r7, #4
 8006614:	4619      	mov	r1, r3
 8006616:	4818      	ldr	r0, [pc, #96]	; (8006678 <HAL_FMC_MspInit+0xf8>)
 8006618:	f002 ff50 	bl	80094bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800661c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006620:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006622:	2302      	movs	r3, #2
 8006624:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800662a:	2303      	movs	r3, #3
 800662c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800662e:	230c      	movs	r3, #12
 8006630:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006632:	1d3b      	adds	r3, r7, #4
 8006634:	4619      	mov	r1, r3
 8006636:	4811      	ldr	r0, [pc, #68]	; (800667c <HAL_FMC_MspInit+0xfc>)
 8006638:	f002 ff40 	bl	80094bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800663c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006640:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006642:	2302      	movs	r3, #2
 8006644:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800664a:	2303      	movs	r3, #3
 800664c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800664e:	230c      	movs	r3, #12
 8006650:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006652:	1d3b      	adds	r3, r7, #4
 8006654:	4619      	mov	r1, r3
 8006656:	480a      	ldr	r0, [pc, #40]	; (8006680 <HAL_FMC_MspInit+0x100>)
 8006658:	f002 ff30 	bl	80094bc <HAL_GPIO_Init>
 800665c:	e000      	b.n	8006660 <HAL_FMC_MspInit+0xe0>
    return;
 800665e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000bfc 	.word	0x20000bfc
 800666c:	40023800 	.word	0x40023800
 8006670:	40021400 	.word	0x40021400
 8006674:	40020800 	.word	0x40020800
 8006678:	40021800 	.word	0x40021800
 800667c:	40021000 	.word	0x40021000
 8006680:	40020c00 	.word	0x40020c00

08006684 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800668c:	f7ff ff78 	bl	8006580 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800669c:	e7fe      	b.n	800669c <NMI_Handler+0x4>

0800669e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800669e:	b480      	push	{r7}
 80066a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066a2:	e7fe      	b.n	80066a2 <HardFault_Handler+0x4>

080066a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066a4:	b480      	push	{r7}
 80066a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066a8:	e7fe      	b.n	80066a8 <MemManage_Handler+0x4>

080066aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066aa:	b480      	push	{r7}
 80066ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066ae:	e7fe      	b.n	80066ae <BusFault_Handler+0x4>

080066b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066b4:	e7fe      	b.n	80066b4 <UsageFault_Handler+0x4>

080066b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066b6:	b480      	push	{r7}
 80066b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80066ba:	bf00      	nop
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066c8:	bf00      	nop
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80066d2:	b480      	push	{r7}
 80066d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	timer_1++;
 80066e4:	4b1f      	ldr	r3, [pc, #124]	; (8006764 <SysTick_Handler+0x84>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3301      	adds	r3, #1
 80066ea:	4a1e      	ldr	r2, [pc, #120]	; (8006764 <SysTick_Handler+0x84>)
 80066ec:	6013      	str	r3, [r2, #0]

	if(PassW_block.PassFalseTimer){PassW_block.PassFalseTimer--;}
 80066ee:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <SysTick_Handler+0x88>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d004      	beq.n	8006700 <SysTick_Handler+0x20>
 80066f6:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <SysTick_Handler+0x88>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	4a1a      	ldr	r2, [pc, #104]	; (8006768 <SysTick_Handler+0x88>)
 80066fe:	6093      	str	r3, [r2, #8]

	if(PWM_launch)
 8006700:	4b1a      	ldr	r3, [pc, #104]	; (800676c <SysTick_Handler+0x8c>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d015      	beq.n	8006734 <SysTick_Handler+0x54>
	{
		if(brightness_disp < 10000){brightness_disp += 1;}
 8006708:	4b19      	ldr	r3, [pc, #100]	; (8006770 <SysTick_Handler+0x90>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006710:	4293      	cmp	r3, r2
 8006712:	d804      	bhi.n	800671e <SysTick_Handler+0x3e>
 8006714:	4b16      	ldr	r3, [pc, #88]	; (8006770 <SysTick_Handler+0x90>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	4a15      	ldr	r2, [pc, #84]	; (8006770 <SysTick_Handler+0x90>)
 800671c:	6013      	str	r3, [r2, #0]
		if(brightness_clav < 10000){brightness_clav += 1;}
 800671e:	4b15      	ldr	r3, [pc, #84]	; (8006774 <SysTick_Handler+0x94>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f242 720f 	movw	r2, #9999	; 0x270f
 8006726:	4293      	cmp	r3, r2
 8006728:	d804      	bhi.n	8006734 <SysTick_Handler+0x54>
 800672a:	4b12      	ldr	r3, [pc, #72]	; (8006774 <SysTick_Handler+0x94>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3301      	adds	r3, #1
 8006730:	4a10      	ldr	r2, [pc, #64]	; (8006774 <SysTick_Handler+0x94>)
 8006732:	6013      	str	r3, [r2, #0]
	}

	TimedBitValue_handler(&ALG_DB.clearing_pressure_filter_1);
 8006734:	4810      	ldr	r0, [pc, #64]	; (8006778 <SysTick_Handler+0x98>)
 8006736:	f7fe fe61 	bl	80053fc <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_pressure_filter_2);
 800673a:	4810      	ldr	r0, [pc, #64]	; (800677c <SysTick_Handler+0x9c>)
 800673c:	f7fe fe5e 	bl	80053fc <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_water_filter_1);
 8006740:	480f      	ldr	r0, [pc, #60]	; (8006780 <SysTick_Handler+0xa0>)
 8006742:	f7fe fe5b 	bl	80053fc <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_water_filter_2);
 8006746:	480f      	ldr	r0, [pc, #60]	; (8006784 <SysTick_Handler+0xa4>)
 8006748:	f7fe fe58 	bl	80053fc <TimedBitValue_handler>
	TimedBitValue_handler(&ALG_DB.clearing_water_filter_3);
 800674c:	480e      	ldr	r0, [pc, #56]	; (8006788 <SysTick_Handler+0xa8>)
 800674e:	f7fe fe55 	bl	80053fc <TimedBitValue_handler>

	KeyboardCheck();
 8006752:	f000 fb7f 	bl	8006e54 <KeyboardCheck>

	KeyboardWork();
 8006756:	f000 f841 	bl	80067dc <KeyboardWork>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800675a:	f002 f97f 	bl	8008a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800675e:	bf00      	nop
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000c30 	.word	0x20000c30
 8006768:	200009fc 	.word	0x200009fc
 800676c:	200009f9 	.word	0x200009f9
 8006770:	2000034c 	.word	0x2000034c
 8006774:	20000350 	.word	0x20000350
 8006778:	20000a10 	.word	0x20000a10
 800677c:	20000a16 	.word	0x20000a16
 8006780:	20000a1c 	.word	0x20000a1c
 8006784:	20000a22 	.word	0x20000a22
 8006788:	20000a28 	.word	0x20000a28

0800678c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

	timer_2++;
 8006790:	4b06      	ldr	r3, [pc, #24]	; (80067ac <TIM5_IRQHandler+0x20>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	4a05      	ldr	r2, [pc, #20]	; (80067ac <TIM5_IRQHandler+0x20>)
 8006798:	6013      	str	r3, [r2, #0]
	Slave_Clock_1ms(&Slave_1);
 800679a:	4805      	ldr	r0, [pc, #20]	; (80067b0 <TIM5_IRQHandler+0x24>)
 800679c:	f7fb f9a0 	bl	8001ae0 <Slave_Clock_1ms>

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80067a0:	4804      	ldr	r0, [pc, #16]	; (80067b4 <TIM5_IRQHandler+0x28>)
 80067a2:	f004 fcc1 	bl	800b128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80067a6:	bf00      	nop
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000c34 	.word	0x20000c34
 80067b0:	20000354 	.word	0x20000354
 80067b4:	2000028c 	.word	0x2000028c

080067b8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

	  Slave_PORT_Processor(&Slave_1);
 80067bc:	4805      	ldr	r0, [pc, #20]	; (80067d4 <UART7_IRQHandler+0x1c>)
 80067be:	f7fa fc9b 	bl	80010f8 <Slave_PORT_Processor>

	  Slave_Processor(&Slave_1);
 80067c2:	4804      	ldr	r0, [pc, #16]	; (80067d4 <UART7_IRQHandler+0x1c>)
 80067c4:	f7fa fd12 	bl	80011ec <Slave_Processor>

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80067c8:	4803      	ldr	r0, [pc, #12]	; (80067d8 <UART7_IRQHandler+0x20>)
 80067ca:	f005 fb5f 	bl	800be8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80067ce:	bf00      	nop
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000354 	.word	0x20000354
 80067d8:	200002d4 	.word	0x200002d4

080067dc <KeyboardWork>:

/* USER CODE BEGIN 1 */

void KeyboardWork(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af02      	add	r7, sp, #8

	uint8_t scr_plus  = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	71fb      	strb	r3, [r7, #7]
	uint8_t scr_minus = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	71bb      	strb	r3, [r7, #6]


	if(KeysRetain.Up & KeysRetain.Down)
 80067ea:	4b9f      	ldr	r3, [pc, #636]	; (8006a68 <KeyboardWork+0x28c>)
 80067ec:	795a      	ldrb	r2, [r3, #5]
 80067ee:	4b9e      	ldr	r3, [pc, #632]	; (8006a68 <KeyboardWork+0x28c>)
 80067f0:	791b      	ldrb	r3, [r3, #4]
 80067f2:	4013      	ands	r3, r2
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d008      	beq.n	800680c <KeyboardWork+0x30>
	{
		screen 					= 21;
 80067fa:	4b9c      	ldr	r3, [pc, #624]	; (8006a6c <KeyboardWork+0x290>)
 80067fc:	2215      	movs	r2, #21
 80067fe:	701a      	strb	r2, [r3, #0]
		Control_DB.MenuPointer  = 0;
 8006800:	4b9b      	ldr	r3, [pc, #620]	; (8006a70 <KeyboardWork+0x294>)
 8006802:	2200      	movs	r2, #0
 8006804:	801a      	strh	r2, [r3, #0]
		Control_DB.RazrPointer 	= 0;
 8006806:	4b9a      	ldr	r3, [pc, #616]	; (8006a70 <KeyboardWork+0x294>)
 8006808:	2200      	movs	r2, #0
 800680a:	805a      	strh	r2, [r3, #2]
	}
	if(KeysFlash.ESC & (screen < 5))
 800680c:	4b99      	ldr	r3, [pc, #612]	; (8006a74 <KeyboardWork+0x298>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	4b96      	ldr	r3, [pc, #600]	; (8006a6c <KeyboardWork+0x290>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b04      	cmp	r3, #4
 8006818:	bf94      	ite	ls
 800681a:	2301      	movls	r3, #1
 800681c:	2300      	movhi	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	4013      	ands	r3, r2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <KeyboardWork+0x5e>
	{
		screen_save 	= screen;
 8006826:	4b91      	ldr	r3, [pc, #580]	; (8006a6c <KeyboardWork+0x290>)
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	4b93      	ldr	r3, [pc, #588]	; (8006a78 <KeyboardWork+0x29c>)
 800682c:	701a      	strb	r2, [r3, #0]
		screen 			= 20;
 800682e:	4b8f      	ldr	r3, [pc, #572]	; (8006a6c <KeyboardWork+0x290>)
 8006830:	2214      	movs	r2, #20
 8006832:	701a      	strb	r2, [r3, #0]
		KeysFlash.ESC 	= 0;
 8006834:	4b8f      	ldr	r3, [pc, #572]	; (8006a74 <KeyboardWork+0x298>)
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
	}
	if(KeysFlash.ESC & (screen == 20))
 800683a:	4b8e      	ldr	r3, [pc, #568]	; (8006a74 <KeyboardWork+0x298>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	4b8a      	ldr	r3, [pc, #552]	; (8006a6c <KeyboardWork+0x290>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b14      	cmp	r3, #20
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	4013      	ands	r3, r2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <KeyboardWork+0x86>
	{
		screen = screen_save;
 8006854:	4b88      	ldr	r3, [pc, #544]	; (8006a78 <KeyboardWork+0x29c>)
 8006856:	781a      	ldrb	r2, [r3, #0]
 8006858:	4b84      	ldr	r3, [pc, #528]	; (8006a6c <KeyboardWork+0x290>)
 800685a:	701a      	strb	r2, [r3, #0]
		KeysFlash.ESC 	= 0;
 800685c:	4b85      	ldr	r3, [pc, #532]	; (8006a74 <KeyboardWork+0x298>)
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
	}
	if (KeysFlash.ESC & (screen == 8))
 8006862:	4b84      	ldr	r3, [pc, #528]	; (8006a74 <KeyboardWork+0x298>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	4b80      	ldr	r3, [pc, #512]	; (8006a6c <KeyboardWork+0x290>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b08      	cmp	r3, #8
 800686e:	bf0c      	ite	eq
 8006870:	2301      	moveq	r3, #1
 8006872:	2300      	movne	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	4013      	ands	r3, r2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <KeyboardWork+0xac>
	{
		screen = 6;
 800687c:	4b7b      	ldr	r3, [pc, #492]	; (8006a6c <KeyboardWork+0x290>)
 800687e:	2206      	movs	r2, #6
 8006880:	701a      	strb	r2, [r3, #0]
		KeysFlash.ESC 	= 0;
 8006882:	4b7c      	ldr	r3, [pc, #496]	; (8006a74 <KeyboardWork+0x298>)
 8006884:	2200      	movs	r2, #0
 8006886:	701a      	strb	r2, [r3, #0]
	}
	if (KeysFlash.ESC & (screen == 9))
 8006888:	4b7a      	ldr	r3, [pc, #488]	; (8006a74 <KeyboardWork+0x298>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	4b77      	ldr	r3, [pc, #476]	; (8006a6c <KeyboardWork+0x290>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b09      	cmp	r3, #9
 8006894:	bf0c      	ite	eq
 8006896:	2301      	moveq	r3, #1
 8006898:	2300      	movne	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	4013      	ands	r3, r2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <KeyboardWork+0xd2>
		{
			screen = 6;
 80068a2:	4b72      	ldr	r3, [pc, #456]	; (8006a6c <KeyboardWork+0x290>)
 80068a4:	2206      	movs	r2, #6
 80068a6:	701a      	strb	r2, [r3, #0]
			KeysFlash.ESC 	= 0;
 80068a8:	4b72      	ldr	r3, [pc, #456]	; (8006a74 <KeyboardWork+0x298>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
		}
	if (KeysFlash.ESC & (screen == 14))
 80068ae:	4b71      	ldr	r3, [pc, #452]	; (8006a74 <KeyboardWork+0x298>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	4b6d      	ldr	r3, [pc, #436]	; (8006a6c <KeyboardWork+0x290>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b0e      	cmp	r3, #14
 80068ba:	bf0c      	ite	eq
 80068bc:	2301      	moveq	r3, #1
 80068be:	2300      	movne	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	4013      	ands	r3, r2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <KeyboardWork+0xf8>
		{
			screen = 6;
 80068c8:	4b68      	ldr	r3, [pc, #416]	; (8006a6c <KeyboardWork+0x290>)
 80068ca:	2206      	movs	r2, #6
 80068cc:	701a      	strb	r2, [r3, #0]
			KeysFlash.ESC 	= 0;
 80068ce:	4b69      	ldr	r3, [pc, #420]	; (8006a74 <KeyboardWork+0x298>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
		}
	if(KeysFlash.ESC & (((screen >= 5) & (screen <= 7)) | (screen == 21)))
 80068d4:	4b67      	ldr	r3, [pc, #412]	; (8006a74 <KeyboardWork+0x298>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	4619      	mov	r1, r3
 80068da:	4b64      	ldr	r3, [pc, #400]	; (8006a6c <KeyboardWork+0x290>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b04      	cmp	r3, #4
 80068e0:	bf8c      	ite	hi
 80068e2:	2301      	movhi	r3, #1
 80068e4:	2300      	movls	r3, #0
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	4b60      	ldr	r3, [pc, #384]	; (8006a6c <KeyboardWork+0x290>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b07      	cmp	r3, #7
 80068ee:	bf94      	ite	ls
 80068f0:	2301      	movls	r3, #1
 80068f2:	2300      	movhi	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	4013      	ands	r3, r2
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	4b5b      	ldr	r3, [pc, #364]	; (8006a6c <KeyboardWork+0x290>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b15      	cmp	r3, #21
 8006902:	bf0c      	ite	eq
 8006904:	2301      	moveq	r3, #1
 8006906:	2300      	movne	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	4313      	orrs	r3, r2
 800690c:	400b      	ands	r3, r1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d008      	beq.n	8006924 <KeyboardWork+0x148>
	{
		screen 			= 1;
 8006912:	4b56      	ldr	r3, [pc, #344]	; (8006a6c <KeyboardWork+0x290>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
		screen_save 	= 1;
 8006918:	4b57      	ldr	r3, [pc, #348]	; (8006a78 <KeyboardWork+0x29c>)
 800691a:	2201      	movs	r2, #1
 800691c:	701a      	strb	r2, [r3, #0]
		Control_DB.RazrPointer 	= 0;
 800691e:	4b54      	ldr	r3, [pc, #336]	; (8006a70 <KeyboardWork+0x294>)
 8006920:	2200      	movs	r2, #0
 8006922:	805a      	strh	r2, [r3, #2]
	}

	if(KeysFlash.Right)
 8006924:	4b53      	ldr	r3, [pc, #332]	; (8006a74 <KeyboardWork+0x298>)
 8006926:	789b      	ldrb	r3, [r3, #2]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01a      	beq.n	8006962 <KeyboardWork+0x186>
	{
		if(Control_DB.RazrPointer)
 800692c:	4b50      	ldr	r3, [pc, #320]	; (8006a70 <KeyboardWork+0x294>)
 800692e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d013      	beq.n	800695e <KeyboardWork+0x182>
		{
			Control_DB.RazrPointer--;
 8006936:	4b4e      	ldr	r3, [pc, #312]	; (8006a70 <KeyboardWork+0x294>)
 8006938:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29b      	uxth	r3, r3
 8006942:	b21a      	sxth	r2, r3
 8006944:	4b4a      	ldr	r3, [pc, #296]	; (8006a70 <KeyboardWork+0x294>)
 8006946:	805a      	strh	r2, [r3, #2]
			if(Control_DB.RazrPointer == 0)
 8006948:	4b49      	ldr	r3, [pc, #292]	; (8006a70 <KeyboardWork+0x294>)
 800694a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d107      	bne.n	8006962 <KeyboardWork+0x186>
			{
				Control_DB.RazrPointer = Control_DB.RazrPointerMAX;
 8006952:	4b47      	ldr	r3, [pc, #284]	; (8006a70 <KeyboardWork+0x294>)
 8006954:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006958:	4b45      	ldr	r3, [pc, #276]	; (8006a70 <KeyboardWork+0x294>)
 800695a:	805a      	strh	r2, [r3, #2]
 800695c:	e001      	b.n	8006962 <KeyboardWork+0x186>
			}
		}
		else
		{
			scr_plus = 1;
 800695e:	2301      	movs	r3, #1
 8006960:	71fb      	strb	r3, [r7, #7]
		}
	}
	if(KeysFlash.Left)
 8006962:	4b44      	ldr	r3, [pc, #272]	; (8006a74 <KeyboardWork+0x298>)
 8006964:	78db      	ldrb	r3, [r3, #3]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d01b      	beq.n	80069a2 <KeyboardWork+0x1c6>
	{
		if(Control_DB.RazrPointer)
 800696a:	4b41      	ldr	r3, [pc, #260]	; (8006a70 <KeyboardWork+0x294>)
 800696c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d014      	beq.n	800699e <KeyboardWork+0x1c2>
		{
			Control_DB.RazrPointer++;
 8006974:	4b3e      	ldr	r3, [pc, #248]	; (8006a70 <KeyboardWork+0x294>)
 8006976:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800697a:	b29b      	uxth	r3, r3
 800697c:	3301      	adds	r3, #1
 800697e:	b29b      	uxth	r3, r3
 8006980:	b21a      	sxth	r2, r3
 8006982:	4b3b      	ldr	r3, [pc, #236]	; (8006a70 <KeyboardWork+0x294>)
 8006984:	805a      	strh	r2, [r3, #2]
			if(Control_DB.RazrPointer > Control_DB.RazrPointerMAX)
 8006986:	4b3a      	ldr	r3, [pc, #232]	; (8006a70 <KeyboardWork+0x294>)
 8006988:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800698c:	4b38      	ldr	r3, [pc, #224]	; (8006a70 <KeyboardWork+0x294>)
 800698e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006992:	429a      	cmp	r2, r3
 8006994:	dd05      	ble.n	80069a2 <KeyboardWork+0x1c6>
			{
				Control_DB.RazrPointer = 1;
 8006996:	4b36      	ldr	r3, [pc, #216]	; (8006a70 <KeyboardWork+0x294>)
 8006998:	2201      	movs	r2, #1
 800699a:	805a      	strh	r2, [r3, #2]
 800699c:	e001      	b.n	80069a2 <KeyboardWork+0x1c6>
			}
		}
		else
		{
			scr_minus = 1;
 800699e:	2301      	movs	r3, #1
 80069a0:	71bb      	strb	r3, [r7, #6]
		}
	}

	if(KeysFlash.ENT)
 80069a2:	4b34      	ldr	r3, [pc, #208]	; (8006a74 <KeyboardWork+0x298>)
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 81af 	beq.w	8006d0a <KeyboardWork+0x52e>
	{



		if(screen == 3)
 80069ac:	4b2f      	ldr	r3, [pc, #188]	; (8006a6c <KeyboardWork+0x290>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	f040 80a5 	bne.w	8006b00 <KeyboardWork+0x324>
		{

			if(PassW_block.DataClearingUnlock)
 80069b6:	4b31      	ldr	r3, [pc, #196]	; (8006a7c <KeyboardWork+0x2a0>)
 80069b8:	7c1b      	ldrb	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8090 	beq.w	8006ae0 <KeyboardWork+0x304>
			{
				switch(Control_DB.MenuPointer)
 80069c0:	4b2b      	ldr	r3, [pc, #172]	; (8006a70 <KeyboardWork+0x294>)
 80069c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	2b12      	cmp	r3, #18
 80069ca:	f200 8089 	bhi.w	8006ae0 <KeyboardWork+0x304>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <KeyboardWork+0x1f8>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	08006a21 	.word	0x08006a21
 80069d8:	08006a29 	.word	0x08006a29
 80069dc:	08006a31 	.word	0x08006a31
 80069e0:	08006a39 	.word	0x08006a39
 80069e4:	08006a41 	.word	0x08006a41
 80069e8:	08006a49 	.word	0x08006a49
 80069ec:	08006a51 	.word	0x08006a51
 80069f0:	08006a59 	.word	0x08006a59
 80069f4:	08006a61 	.word	0x08006a61
 80069f8:	08006a85 	.word	0x08006a85
 80069fc:	08006a8d 	.word	0x08006a8d
 8006a00:	08006a95 	.word	0x08006a95
 8006a04:	08006a9f 	.word	0x08006a9f
 8006a08:	08006aa9 	.word	0x08006aa9
 8006a0c:	08006ab3 	.word	0x08006ab3
 8006a10:	08006abb 	.word	0x08006abb
 8006a14:	08006ac3 	.word	0x08006ac3
 8006a18:	08006acd 	.word	0x08006acd
 8006a1c:	08006ad7 	.word	0x08006ad7
				{
					case 1:
						BUV_RT_VALS.ANN_1.Pump.MotoClock = 0;
 8006a20:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <KeyboardWork+0x2a4>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	60da      	str	r2, [r3, #12]
					break;
 8006a26:	e05b      	b.n	8006ae0 <KeyboardWork+0x304>
					case 2:
						BUV_RT_VALS.ANN_2.Pump.MotoClock = 0;
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <KeyboardWork+0x2a4>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	621a      	str	r2, [r3, #32]
					break;
 8006a2e:	e057      	b.n	8006ae0 <KeyboardWork+0x304>
					case 3:
						BUV_RT_VALS.ANN_3.Pump.MotoClock = 0;
 8006a30:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <KeyboardWork+0x2a4>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8006a36:	e053      	b.n	8006ae0 <KeyboardWork+0x304>
					case 4:
						BUV_RT_VALS.EMULSION_NODE.Pump_circulation.MotoClock = 0;
 8006a38:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <KeyboardWork+0x2a4>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	66da      	str	r2, [r3, #108]	; 0x6c
					break;
 8006a3e:	e04f      	b.n	8006ae0 <KeyboardWork+0x304>
					case 5:
						BUV_RT_VALS.EMULSION_NODE.Pump_concentrate.MotoClock = 0;
 8006a40:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <KeyboardWork+0x2a4>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	675a      	str	r2, [r3, #116]	; 0x74
					break;
 8006a46:	e04b      	b.n	8006ae0 <KeyboardWork+0x304>
					case 6:
						BUV_RT_VALS.EMULSION_NODE.Pump_concentrate_injection.MotoClock = 0;
 8006a48:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <KeyboardWork+0x2a4>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	67da      	str	r2, [r3, #124]	; 0x7c
					break;
 8006a4e:	e047      	b.n	8006ae0 <KeyboardWork+0x304>
					case 7:
						BUV_RT_VALS.ANN_1.Unload_counter = 0;
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <KeyboardWork+0x2a4>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	619a      	str	r2, [r3, #24]
					break;
 8006a56:	e043      	b.n	8006ae0 <KeyboardWork+0x304>
					case 8:
						BUV_RT_VALS.ANN_2.Unload_counter = 0;
 8006a58:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <KeyboardWork+0x2a4>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8006a5e:	e03f      	b.n	8006ae0 <KeyboardWork+0x304>
					case 9:
						BUV_RT_VALS.ANN_3.Unload_counter = 0;
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <KeyboardWork+0x2a4>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	641a      	str	r2, [r3, #64]	; 0x40
					break;
 8006a66:	e03b      	b.n	8006ae0 <KeyboardWork+0x304>
 8006a68:	20000c00 	.word	0x20000c00
 8006a6c:	20000018 	.word	0x20000018
 8006a70:	20000b70 	.word	0x20000b70
 8006a74:	20000c10 	.word	0x20000c10
 8006a78:	2000001a 	.word	0x2000001a
 8006a7c:	200009fc 	.word	0x200009fc
 8006a80:	20000aa8 	.word	0x20000aa8
					case 10:
						BUV_RT_VALS.FILT_NODE.Flush_valve_1_counter = 0;
 8006a84:	4b8e      	ldr	r3, [pc, #568]	; (8006cc0 <KeyboardWork+0x4e4>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	661a      	str	r2, [r3, #96]	; 0x60
					break;
 8006a8a:	e029      	b.n	8006ae0 <KeyboardWork+0x304>
					case 11:
						BUV_RT_VALS.FILT_NODE.Flush_valve_2_counter = 0;
 8006a8c:	4b8c      	ldr	r3, [pc, #560]	; (8006cc0 <KeyboardWork+0x4e4>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 8006a92:	e025      	b.n	8006ae0 <KeyboardWork+0x304>
					case 12:
						BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_1_counter = 0;
 8006a94:	4b8a      	ldr	r3, [pc, #552]	; (8006cc0 <KeyboardWork+0x4e4>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8006a9c:	e020      	b.n	8006ae0 <KeyboardWork+0x304>
					case 13:
						BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_2_counter = 0;
 8006a9e:	4b88      	ldr	r3, [pc, #544]	; (8006cc0 <KeyboardWork+0x4e4>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					break;
 8006aa6:	e01b      	b.n	8006ae0 <KeyboardWork+0x304>
					case 14:
						BUV_RT_VALS.EMULSION_NODE.Filter_flow_valve_3_counter = 0;
 8006aa8:	4b85      	ldr	r3, [pc, #532]	; (8006cc0 <KeyboardWork+0x4e4>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8006ab0:	e016      	b.n	8006ae0 <KeyboardWork+0x304>
					case 15:
						BUV_RT_VALS.FILT_NODE.Drain_filter_flowmeter.Volume = 0;
 8006ab2:	4b83      	ldr	r3, [pc, #524]	; (8006cc0 <KeyboardWork+0x4e4>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8006ab8:	e012      	b.n	8006ae0 <KeyboardWork+0x304>
					case 16:
						BUV_RT_VALS.FILT_NODE.Emulsion_flowmeter.Volume = 0;
 8006aba:	4b81      	ldr	r3, [pc, #516]	; (8006cc0 <KeyboardWork+0x4e4>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8006ac0:	e00e      	b.n	8006ae0 <KeyboardWork+0x304>
					case 17:
						BUV_RT_VALS.EMULSION_NODE.Flowmeter_concent.Volume = 0;
 8006ac2:	4b7f      	ldr	r3, [pc, #508]	; (8006cc0 <KeyboardWork+0x4e4>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					break;
 8006aca:	e009      	b.n	8006ae0 <KeyboardWork+0x304>
					case 18:
						BUV_RT_VALS.EMULSION_NODE.Flowmeter_water.Volume = 0;
 8006acc:	4b7c      	ldr	r3, [pc, #496]	; (8006cc0 <KeyboardWork+0x4e4>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					break;
 8006ad4:	e004      	b.n	8006ae0 <KeyboardWork+0x304>
					case 19:
						BUV_RT_VALS.EMULSION_NODE.Node_work_counter = 0;
 8006ad6:	4b7a      	ldr	r3, [pc, #488]	; (8006cc0 <KeyboardWork+0x4e4>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8006ade:	bf00      	nop
				}
			}

			if(PassW_block.PassWord != PassW_block.PassWord_DATA)
 8006ae0:	4b78      	ldr	r3, [pc, #480]	; (8006cc4 <KeyboardWork+0x4e8>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	4b77      	ldr	r3, [pc, #476]	; (8006cc4 <KeyboardWork+0x4e8>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d003      	beq.n	8006af4 <KeyboardWork+0x318>
			{
				PassW_block.PassWord = 0;
 8006aec:	4b75      	ldr	r3, [pc, #468]	; (8006cc4 <KeyboardWork+0x4e8>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e005      	b.n	8006b00 <KeyboardWork+0x324>
			}
			else
			{
				PassW_block.PassWord = 0;
 8006af4:	4b73      	ldr	r3, [pc, #460]	; (8006cc4 <KeyboardWork+0x4e8>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
				PassW_block.DataClearingUnlock = 1;
 8006afa:	4b72      	ldr	r3, [pc, #456]	; (8006cc4 <KeyboardWork+0x4e8>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	741a      	strb	r2, [r3, #16]
			}
		}

		if(screen == 4)
 8006b00:	4b71      	ldr	r3, [pc, #452]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d125      	bne.n	8006b54 <KeyboardWork+0x378>
		{
			switch(Control_DB.MenuPointer)
 8006b08:	4b70      	ldr	r3, [pc, #448]	; (8006ccc <KeyboardWork+0x4f0>)
 8006b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d820      	bhi.n	8006b54 <KeyboardWork+0x378>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <KeyboardWork+0x33c>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b2d 	.word	0x08006b2d
 8006b1c:	08006b35 	.word	0x08006b35
 8006b20:	08006b3d 	.word	0x08006b3d
 8006b24:	08006b45 	.word	0x08006b45
 8006b28:	08006b4d 	.word	0x08006b4d
			{
				case 0:
					ALG_DB.clearing_pressure_filter_1.state = 1;
 8006b2c:	4b68      	ldr	r3, [pc, #416]	; (8006cd0 <KeyboardWork+0x4f4>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	701a      	strb	r2, [r3, #0]
				break;
 8006b32:	e00f      	b.n	8006b54 <KeyboardWork+0x378>
				case 1:
					ALG_DB.clearing_pressure_filter_2.state = 1;
 8006b34:	4b66      	ldr	r3, [pc, #408]	; (8006cd0 <KeyboardWork+0x4f4>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	719a      	strb	r2, [r3, #6]
				break;
 8006b3a:	e00b      	b.n	8006b54 <KeyboardWork+0x378>
				case 2:
					ALG_DB.clearing_water_filter_1.state = 1;
 8006b3c:	4b64      	ldr	r3, [pc, #400]	; (8006cd0 <KeyboardWork+0x4f4>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	731a      	strb	r2, [r3, #12]
				break;
 8006b42:	e007      	b.n	8006b54 <KeyboardWork+0x378>
				case 3:
					ALG_DB.clearing_water_filter_2.state = 1;
 8006b44:	4b62      	ldr	r3, [pc, #392]	; (8006cd0 <KeyboardWork+0x4f4>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	749a      	strb	r2, [r3, #18]
				break;
 8006b4a:	e003      	b.n	8006b54 <KeyboardWork+0x378>
				case 4:
					ALG_DB.clearing_water_filter_3.state = 1;
 8006b4c:	4b60      	ldr	r3, [pc, #384]	; (8006cd0 <KeyboardWork+0x4f4>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	761a      	strb	r2, [r3, #24]
				break;
 8006b52:	bf00      	nop
			}
		}

		if(screen == 5)
 8006b54:	4b5c      	ldr	r3, [pc, #368]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b05      	cmp	r3, #5
 8006b5a:	d115      	bne.n	8006b88 <KeyboardWork+0x3ac>
		{
			if(PassW_block.PassWord != PassW_block.PassWord_true)
 8006b5c:	4b59      	ldr	r3, [pc, #356]	; (8006cc4 <KeyboardWork+0x4e8>)
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	4b58      	ldr	r3, [pc, #352]	; (8006cc4 <KeyboardWork+0x4e8>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d00c      	beq.n	8006b82 <KeyboardWork+0x3a6>
			{
				if(Control_DB.RazrPointer)
 8006b68:	4b58      	ldr	r3, [pc, #352]	; (8006ccc <KeyboardWork+0x4f0>)
 8006b6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <KeyboardWork+0x3ac>
				{
					PassW_block.PassFalseTimer = 1000;
 8006b72:	4b54      	ldr	r3, [pc, #336]	; (8006cc4 <KeyboardWork+0x4e8>)
 8006b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b78:	609a      	str	r2, [r3, #8]
					PassW_block.PassWord       =    0;
 8006b7a:	4b52      	ldr	r3, [pc, #328]	; (8006cc4 <KeyboardWork+0x4e8>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	e002      	b.n	8006b88 <KeyboardWork+0x3ac>
				}
			}
			else
			{
				screen = 6; // переход после ввода правильного пароля
 8006b82:	4b51      	ldr	r3, [pc, #324]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006b84:	2206      	movs	r2, #6
 8006b86:	701a      	strb	r2, [r3, #0]
			}
		}

		if ((screen==6) & (Control_DB.MenuPointer == 7))
 8006b88:	4b4f      	ldr	r3, [pc, #316]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b06      	cmp	r3, #6
 8006b8e:	bf0c      	ite	eq
 8006b90:	2301      	moveq	r3, #1
 8006b92:	2300      	movne	r3, #0
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	4b4d      	ldr	r3, [pc, #308]	; (8006ccc <KeyboardWork+0x4f0>)
 8006b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b9c:	2b07      	cmp	r3, #7
 8006b9e:	bf0c      	ite	eq
 8006ba0:	2301      	moveq	r3, #1
 8006ba2:	2300      	movne	r3, #0
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <KeyboardWork+0x3d8>
		{
				screen = 8;
 8006bae:	4b46      	ldr	r3, [pc, #280]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	701a      	strb	r2, [r3, #0]
		}
		if((screen == 6) &(Control_DB.MenuPointer == 8))
 8006bb4:	4b44      	ldr	r3, [pc, #272]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b06      	cmp	r3, #6
 8006bba:	bf0c      	ite	eq
 8006bbc:	2301      	moveq	r3, #1
 8006bbe:	2300      	movne	r3, #0
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	4b42      	ldr	r3, [pc, #264]	; (8006ccc <KeyboardWork+0x4f0>)
 8006bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	bf0c      	ite	eq
 8006bcc:	2301      	moveq	r3, #1
 8006bce:	2300      	movne	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <KeyboardWork+0x404>
			{
				screen = 9;
 8006bda:	4b3b      	ldr	r3, [pc, #236]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006bdc:	2209      	movs	r2, #9
 8006bde:	701a      	strb	r2, [r3, #0]
			}
		if((screen == 6) &(Control_DB.MenuPointer == 14))
 8006be0:	4b39      	ldr	r3, [pc, #228]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b06      	cmp	r3, #6
 8006be6:	bf0c      	ite	eq
 8006be8:	2301      	moveq	r3, #1
 8006bea:	2300      	movne	r3, #0
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	4b37      	ldr	r3, [pc, #220]	; (8006ccc <KeyboardWork+0x4f0>)
 8006bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bf4:	2b0e      	cmp	r3, #14
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2301      	moveq	r3, #1
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	4013      	ands	r3, r2
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <KeyboardWork+0x430>
		{
			screen = 14;
 8006c06:	4b30      	ldr	r3, [pc, #192]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006c08:	220e      	movs	r2, #14
 8006c0a:	701a      	strb	r2, [r3, #0]
		}


		if((screen == 7) & (Control_DB.MenuPointer == 4))
 8006c0c:	4b2e      	ldr	r3, [pc, #184]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b07      	cmp	r3, #7
 8006c12:	bf0c      	ite	eq
 8006c14:	2301      	moveq	r3, #1
 8006c16:	2300      	movne	r3, #0
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	4b2c      	ldr	r3, [pc, #176]	; (8006ccc <KeyboardWork+0x4f0>)
 8006c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	bf0c      	ite	eq
 8006c24:	2301      	moveq	r3, #1
 8006c26:	2300      	movne	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00b      	beq.n	8006c4a <KeyboardWork+0x46e>
		{
			BUV_settings_global.work_on_water_enable = !BUV_settings_global.work_on_water_enable;
 8006c32:	4b28      	ldr	r3, [pc, #160]	; (8006cd4 <KeyboardWork+0x4f8>)
 8006c34:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	bf0c      	ite	eq
 8006c3c:	2301      	moveq	r3, #1
 8006c3e:	2300      	movne	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	4b23      	ldr	r3, [pc, #140]	; (8006cd4 <KeyboardWork+0x4f8>)
 8006c46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		}

		if ((screen==14)&(Control_DB.MenuPointer == 1))
 8006c4a:	4b1f      	ldr	r3, [pc, #124]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b0e      	cmp	r3, #14
 8006c50:	bf0c      	ite	eq
 8006c52:	2301      	moveq	r3, #1
 8006c54:	2300      	movne	r3, #0
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	4b1c      	ldr	r3, [pc, #112]	; (8006ccc <KeyboardWork+0x4f0>)
 8006c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	bf0c      	ite	eq
 8006c62:	2301      	moveq	r3, #1
 8006c64:	2300      	movne	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	4013      	ands	r3, r2
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <KeyboardWork+0x49a>
		{
			screen =7;
 8006c70:	4b15      	ldr	r3, [pc, #84]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006c72:	2207      	movs	r2, #7
 8006c74:	701a      	strb	r2, [r3, #0]
		}
		if(Control_DB.RazrPointerMAX)
 8006c76:	4b15      	ldr	r3, [pc, #84]	; (8006ccc <KeyboardWork+0x4f0>)
 8006c78:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d02e      	beq.n	8006cde <KeyboardWork+0x502>
		{
			if(Control_DB.RazrPointer)
 8006c80:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <KeyboardWork+0x4f0>)
 8006c82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <KeyboardWork+0x4b6>
			{
				Control_DB.RazrPointer = 0;
 8006c8a:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <KeyboardWork+0x4f0>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	805a      	strh	r2, [r3, #2]
 8006c90:	e025      	b.n	8006cde <KeyboardWork+0x502>
			}
			else
			{
				if((screen == 3) | (screen == 5))
 8006c92:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	bf0c      	ite	eq
 8006c9a:	2301      	moveq	r3, #1
 8006c9c:	2300      	movne	r3, #0
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <KeyboardWork+0x4ec>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b05      	cmp	r3, #5
 8006ca6:	bf0c      	ite	eq
 8006ca8:	2301      	moveq	r3, #1
 8006caa:	2300      	movne	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d010      	beq.n	8006cd8 <KeyboardWork+0x4fc>
				{
					Control_DB.RazrPointer = 4;
 8006cb6:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <KeyboardWork+0x4f0>)
 8006cb8:	2204      	movs	r2, #4
 8006cba:	805a      	strh	r2, [r3, #2]
 8006cbc:	e00f      	b.n	8006cde <KeyboardWork+0x502>
 8006cbe:	bf00      	nop
 8006cc0:	20000aa8 	.word	0x20000aa8
 8006cc4:	200009fc 	.word	0x200009fc
 8006cc8:	20000018 	.word	0x20000018
 8006ccc:	20000b70 	.word	0x20000b70
 8006cd0:	20000a10 	.word	0x20000a10
 8006cd4:	20000a30 	.word	0x20000a30
				}
				else
				{
					Control_DB.RazrPointer = 1;
 8006cd8:	4b58      	ldr	r3, [pc, #352]	; (8006e3c <KeyboardWork+0x660>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	805a      	strh	r2, [r3, #2]
				}
			}
		}

		if((screen == 21) & (Control_DB.MenuPointer == 5))
 8006cde:	4b58      	ldr	r3, [pc, #352]	; (8006e40 <KeyboardWork+0x664>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b15      	cmp	r3, #21
 8006ce4:	bf0c      	ite	eq
 8006ce6:	2301      	moveq	r3, #1
 8006ce8:	2300      	movne	r3, #0
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	4b53      	ldr	r3, [pc, #332]	; (8006e3c <KeyboardWork+0x660>)
 8006cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	bf0c      	ite	eq
 8006cf6:	2301      	moveq	r3, #1
 8006cf8:	2300      	movne	r3, #0
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <KeyboardWork+0x52e>
		{
			Settings_DB.FlashWriteFlag = 1;
 8006d04:	4b4f      	ldr	r3, [pc, #316]	; (8006e44 <KeyboardWork+0x668>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	741a      	strb	r2, [r3, #16]



	}

	if(KeysFlash.Down)
 8006d0a:	4b4f      	ldr	r3, [pc, #316]	; (8006e48 <KeyboardWork+0x66c>)
 8006d0c:	791b      	ldrb	r3, [r3, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d028      	beq.n	8006d64 <KeyboardWork+0x588>
	{
		if(Control_DB.RazrPointer == 0)
 8006d12:	4b4a      	ldr	r3, [pc, #296]	; (8006e3c <KeyboardWork+0x660>)
 8006d14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d114      	bne.n	8006d46 <KeyboardWork+0x56a>
		{
			Control_DB.MenuPointer++;
 8006d1c:	4b47      	ldr	r3, [pc, #284]	; (8006e3c <KeyboardWork+0x660>)
 8006d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3301      	adds	r3, #1
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	b21a      	sxth	r2, r3
 8006d2a:	4b44      	ldr	r3, [pc, #272]	; (8006e3c <KeyboardWork+0x660>)
 8006d2c:	801a      	strh	r2, [r3, #0]
			if(Control_DB.MenuPointer > Control_DB.MenuPointerMAX){Control_DB.MenuPointer = 0;}
 8006d2e:	4b43      	ldr	r3, [pc, #268]	; (8006e3c <KeyboardWork+0x660>)
 8006d30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006d34:	4b41      	ldr	r3, [pc, #260]	; (8006e3c <KeyboardWork+0x660>)
 8006d36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	dd12      	ble.n	8006d64 <KeyboardWork+0x588>
 8006d3e:	4b3f      	ldr	r3, [pc, #252]	; (8006e3c <KeyboardWork+0x660>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	801a      	strh	r2, [r3, #0]
 8006d44:	e00e      	b.n	8006d64 <KeyboardWork+0x588>
		}
		else
		{
			NumberChange(Control_DB.VauePointer, Control_DB.RazrPointer, Control_DB.RazrPointerMAX, 0, 1);
 8006d46:	4b3d      	ldr	r3, [pc, #244]	; (8006e3c <KeyboardWork+0x660>)
 8006d48:	6898      	ldr	r0, [r3, #8]
 8006d4a:	4b3c      	ldr	r3, [pc, #240]	; (8006e3c <KeyboardWork+0x660>)
 8006d4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006d50:	4619      	mov	r1, r3
 8006d52:	4b3a      	ldr	r3, [pc, #232]	; (8006e3c <KeyboardWork+0x660>)
 8006d54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f001 fcce 	bl	8008700 <NumberChange>
		}
	}
	if(KeysFlash.Up)
 8006d64:	4b38      	ldr	r3, [pc, #224]	; (8006e48 <KeyboardWork+0x66c>)
 8006d66:	795b      	ldrb	r3, [r3, #5]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d027      	beq.n	8006dbc <KeyboardWork+0x5e0>
	{
		if(Control_DB.RazrPointer == 0)
 8006d6c:	4b33      	ldr	r3, [pc, #204]	; (8006e3c <KeyboardWork+0x660>)
 8006d6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d113      	bne.n	8006d9e <KeyboardWork+0x5c2>
		{
			Control_DB.MenuPointer--;
 8006d76:	4b31      	ldr	r3, [pc, #196]	; (8006e3c <KeyboardWork+0x660>)
 8006d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	b21a      	sxth	r2, r3
 8006d84:	4b2d      	ldr	r3, [pc, #180]	; (8006e3c <KeyboardWork+0x660>)
 8006d86:	801a      	strh	r2, [r3, #0]
			if(Control_DB.MenuPointer < 0){Control_DB.MenuPointer = Control_DB.MenuPointerMAX;}
 8006d88:	4b2c      	ldr	r3, [pc, #176]	; (8006e3c <KeyboardWork+0x660>)
 8006d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	da14      	bge.n	8006dbc <KeyboardWork+0x5e0>
 8006d92:	4b2a      	ldr	r3, [pc, #168]	; (8006e3c <KeyboardWork+0x660>)
 8006d94:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8006d98:	4b28      	ldr	r3, [pc, #160]	; (8006e3c <KeyboardWork+0x660>)
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	e00e      	b.n	8006dbc <KeyboardWork+0x5e0>
		}
		else
		{
			NumberChange(Control_DB.VauePointer, Control_DB.RazrPointer, Control_DB.RazrPointerMAX, 1, 0);
 8006d9e:	4b27      	ldr	r3, [pc, #156]	; (8006e3c <KeyboardWork+0x660>)
 8006da0:	6898      	ldr	r0, [r3, #8]
 8006da2:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <KeyboardWork+0x660>)
 8006da4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006da8:	4619      	mov	r1, r3
 8006daa:	4b24      	ldr	r3, [pc, #144]	; (8006e3c <KeyboardWork+0x660>)
 8006dac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006db0:	461a      	mov	r2, r3
 8006db2:	2300      	movs	r3, #0
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	2301      	movs	r3, #1
 8006db8:	f001 fca2 	bl	8008700 <NumberChange>
		}
	}


	if(screen <= 5)
 8006dbc:	4b20      	ldr	r3, [pc, #128]	; (8006e40 <KeyboardWork+0x664>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b05      	cmp	r3, #5
 8006dc2:	d827      	bhi.n	8006e14 <KeyboardWork+0x638>
	{
		if(scr_plus) {screen++;}
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <KeyboardWork+0x5fa>
 8006dca:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <KeyboardWork+0x664>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <KeyboardWork+0x664>)
 8006dd4:	701a      	strb	r2, [r3, #0]
		if(scr_minus){screen--;}
 8006dd6:	79bb      	ldrb	r3, [r7, #6]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <KeyboardWork+0x60c>
 8006ddc:	4b18      	ldr	r3, [pc, #96]	; (8006e40 <KeyboardWork+0x664>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	4b16      	ldr	r3, [pc, #88]	; (8006e40 <KeyboardWork+0x664>)
 8006de6:	701a      	strb	r2, [r3, #0]

		if(KeysFlash.Right | KeysFlash.Left)
 8006de8:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <KeyboardWork+0x66c>)
 8006dea:	789a      	ldrb	r2, [r3, #2]
 8006dec:	4b16      	ldr	r3, [pc, #88]	; (8006e48 <KeyboardWork+0x66c>)
 8006dee:	78db      	ldrb	r3, [r3, #3]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00d      	beq.n	8006e14 <KeyboardWork+0x638>
		{
			if(screen > 5){screen = 1;}
 8006df8:	4b11      	ldr	r3, [pc, #68]	; (8006e40 <KeyboardWork+0x664>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b05      	cmp	r3, #5
 8006dfe:	d902      	bls.n	8006e06 <KeyboardWork+0x62a>
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <KeyboardWork+0x664>)
 8006e02:	2201      	movs	r2, #1
 8006e04:	701a      	strb	r2, [r3, #0]
			if(screen < 1){screen = 5;}
 8006e06:	4b0e      	ldr	r3, [pc, #56]	; (8006e40 <KeyboardWork+0x664>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <KeyboardWork+0x638>
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <KeyboardWork+0x664>)
 8006e10:	2205      	movs	r2, #5
 8006e12:	701a      	strb	r2, [r3, #0]
		}
	}

	if(screen != screen_mirror)
 8006e14:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <KeyboardWork+0x664>)
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <KeyboardWork+0x670>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d006      	beq.n	8006e2e <KeyboardWork+0x652>
	{
		screen_mirror = screen;
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <KeyboardWork+0x664>)
 8006e22:	781a      	ldrb	r2, [r3, #0]
 8006e24:	4b09      	ldr	r3, [pc, #36]	; (8006e4c <KeyboardWork+0x670>)
 8006e26:	701a      	strb	r2, [r3, #0]
		screen_event  = 1;
 8006e28:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <KeyboardWork+0x674>)
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	701a      	strb	r2, [r3, #0]
	}

	KeyboardClear();
 8006e2e:	f000 fa45 	bl	80072bc <KeyboardClear>
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000b70 	.word	0x20000b70
 8006e40:	20000018 	.word	0x20000018
 8006e44:	20000b54 	.word	0x20000b54
 8006e48:	20000c10 	.word	0x20000c10
 8006e4c:	20000019 	.word	0x20000019
 8006e50:	200009f8 	.word	0x200009f8

08006e54 <KeyboardCheck>:

void KeyboardCheck(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0

	KeysRetain.ESC 			= !HAL_GPIO_ReadPin( BUTTON_1_GPIO_Port,  BUTTON_1_Pin);
 8006e58:	2120      	movs	r1, #32
 8006e5a:	48a6      	ldr	r0, [pc, #664]	; (80070f4 <KeyboardCheck+0x2a0>)
 8006e5c:	f002 fcda 	bl	8009814 <HAL_GPIO_ReadPin>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4ba2      	ldr	r3, [pc, #648]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006e70:	701a      	strb	r2, [r3, #0]
	KeysRetain.ENT 			= !HAL_GPIO_ReadPin( BUTTON_2_GPIO_Port,  BUTTON_2_Pin);
 8006e72:	2140      	movs	r1, #64	; 0x40
 8006e74:	48a1      	ldr	r0, [pc, #644]	; (80070fc <KeyboardCheck+0x2a8>)
 8006e76:	f002 fccd 	bl	8009814 <HAL_GPIO_ReadPin>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	461a      	mov	r2, r3
 8006e88:	4b9b      	ldr	r3, [pc, #620]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006e8a:	705a      	strb	r2, [r3, #1]
	KeysRetain.Right 		= !HAL_GPIO_ReadPin( BUTTON_3_GPIO_Port,  BUTTON_3_Pin);
 8006e8c:	2180      	movs	r1, #128	; 0x80
 8006e8e:	489b      	ldr	r0, [pc, #620]	; (80070fc <KeyboardCheck+0x2a8>)
 8006e90:	f002 fcc0 	bl	8009814 <HAL_GPIO_ReadPin>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bf0c      	ite	eq
 8006e9a:	2301      	moveq	r3, #1
 8006e9c:	2300      	movne	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4b95      	ldr	r3, [pc, #596]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006ea4:	709a      	strb	r2, [r3, #2]
	KeysRetain.Left 		= !HAL_GPIO_ReadPin( BUTTON_4_GPIO_Port,  BUTTON_4_Pin);
 8006ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eaa:	4894      	ldr	r0, [pc, #592]	; (80070fc <KeyboardCheck+0x2a8>)
 8006eac:	f002 fcb2 	bl	8009814 <HAL_GPIO_ReadPin>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bf0c      	ite	eq
 8006eb6:	2301      	moveq	r3, #1
 8006eb8:	2300      	movne	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	4b8e      	ldr	r3, [pc, #568]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006ec0:	70da      	strb	r2, [r3, #3]
	KeysRetain.Down 		= !HAL_GPIO_ReadPin( BUTTON_5_GPIO_Port,  BUTTON_5_Pin);
 8006ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ec6:	488d      	ldr	r0, [pc, #564]	; (80070fc <KeyboardCheck+0x2a8>)
 8006ec8:	f002 fca4 	bl	8009814 <HAL_GPIO_ReadPin>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	bf0c      	ite	eq
 8006ed2:	2301      	moveq	r3, #1
 8006ed4:	2300      	movne	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4b87      	ldr	r3, [pc, #540]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006edc:	711a      	strb	r2, [r3, #4]
	KeysRetain.Up 			= !HAL_GPIO_ReadPin( BUTTON_6_GPIO_Port,  BUTTON_6_Pin);
 8006ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ee2:	4886      	ldr	r0, [pc, #536]	; (80070fc <KeyboardCheck+0x2a8>)
 8006ee4:	f002 fc96 	bl	8009814 <HAL_GPIO_ReadPin>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bf0c      	ite	eq
 8006eee:	2301      	moveq	r3, #1
 8006ef0:	2300      	movne	r3, #0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4b80      	ldr	r3, [pc, #512]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006ef8:	715a      	strb	r2, [r3, #5]
	KeysRetain.PressDown 	= !HAL_GPIO_ReadPin( BUTTON_7_GPIO_Port,  BUTTON_7_Pin);
 8006efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006efe:	487f      	ldr	r0, [pc, #508]	; (80070fc <KeyboardCheck+0x2a8>)
 8006f00:	f002 fc88 	bl	8009814 <HAL_GPIO_ReadPin>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	bf0c      	ite	eq
 8006f0a:	2301      	moveq	r3, #1
 8006f0c:	2300      	movne	r3, #0
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	4b79      	ldr	r3, [pc, #484]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006f14:	719a      	strb	r2, [r3, #6]
	KeysRetain.AHH3_Stop 	= !HAL_GPIO_ReadPin( BUTTON_8_GPIO_Port,  BUTTON_8_Pin);
 8006f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f1a:	4878      	ldr	r0, [pc, #480]	; (80070fc <KeyboardCheck+0x2a8>)
 8006f1c:	f002 fc7a 	bl	8009814 <HAL_GPIO_ReadPin>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bf0c      	ite	eq
 8006f26:	2301      	moveq	r3, #1
 8006f28:	2300      	movne	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4b72      	ldr	r3, [pc, #456]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006f30:	71da      	strb	r2, [r3, #7]
	KeysRetain.AutoPusk 	= !HAL_GPIO_ReadPin( BUTTON_9_GPIO_Port,  BUTTON_9_Pin);
 8006f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f36:	4872      	ldr	r0, [pc, #456]	; (8007100 <KeyboardCheck+0x2ac>)
 8006f38:	f002 fc6c 	bl	8009814 <HAL_GPIO_ReadPin>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bf0c      	ite	eq
 8006f42:	2301      	moveq	r3, #1
 8006f44:	2300      	movne	r3, #0
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	4b6b      	ldr	r3, [pc, #428]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006f4c:	721a      	strb	r2, [r3, #8]
	KeysRetain.AutoStop 	= !HAL_GPIO_ReadPin(BUTTON_10_GPIO_Port, BUTTON_10_Pin);
 8006f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f52:	486b      	ldr	r0, [pc, #428]	; (8007100 <KeyboardCheck+0x2ac>)
 8006f54:	f002 fc5e 	bl	8009814 <HAL_GPIO_ReadPin>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	bf0c      	ite	eq
 8006f5e:	2301      	moveq	r3, #1
 8006f60:	2300      	movne	r3, #0
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	4b64      	ldr	r3, [pc, #400]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006f68:	725a      	strb	r2, [r3, #9]
	KeysRetain.AHH1_Stop 	= !HAL_GPIO_ReadPin(BUTTON_11_GPIO_Port, BUTTON_11_Pin);
 8006f6a:	2180      	movs	r1, #128	; 0x80
 8006f6c:	4864      	ldr	r0, [pc, #400]	; (8007100 <KeyboardCheck+0x2ac>)
 8006f6e:	f002 fc51 	bl	8009814 <HAL_GPIO_ReadPin>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	bf0c      	ite	eq
 8006f78:	2301      	moveq	r3, #1
 8006f7a:	2300      	movne	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	4b5d      	ldr	r3, [pc, #372]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006f82:	729a      	strb	r2, [r3, #10]
	KeysRetain.AHH2_Stop 	= !HAL_GPIO_ReadPin(BUTTON_12_GPIO_Port, BUTTON_12_Pin);
 8006f84:	2140      	movs	r1, #64	; 0x40
 8006f86:	485e      	ldr	r0, [pc, #376]	; (8007100 <KeyboardCheck+0x2ac>)
 8006f88:	f002 fc44 	bl	8009814 <HAL_GPIO_ReadPin>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	bf0c      	ite	eq
 8006f92:	2301      	moveq	r3, #1
 8006f94:	2300      	movne	r3, #0
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4b57      	ldr	r3, [pc, #348]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006f9c:	72da      	strb	r2, [r3, #11]
	KeysRetain.PressUp 		= !HAL_GPIO_ReadPin(BUTTON_13_GPIO_Port, BUTTON_13_Pin);
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	4858      	ldr	r0, [pc, #352]	; (8007104 <KeyboardCheck+0x2b0>)
 8006fa2:	f002 fc37 	bl	8009814 <HAL_GPIO_ReadPin>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	4b50      	ldr	r3, [pc, #320]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006fb6:	731a      	strb	r2, [r3, #12]
	KeysRetain.AHH3_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_14_GPIO_Port, BUTTON_14_Pin);
 8006fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fbc:	484f      	ldr	r0, [pc, #316]	; (80070fc <KeyboardCheck+0x2a8>)
 8006fbe:	f002 fc29 	bl	8009814 <HAL_GPIO_ReadPin>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bf0c      	ite	eq
 8006fc8:	2301      	moveq	r3, #1
 8006fca:	2300      	movne	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	4b49      	ldr	r3, [pc, #292]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006fd2:	735a      	strb	r2, [r3, #13]
	KeysRetain.AHH2_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_15_GPIO_Port, BUTTON_15_Pin);
 8006fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006fd8:	4848      	ldr	r0, [pc, #288]	; (80070fc <KeyboardCheck+0x2a8>)
 8006fda:	f002 fc1b 	bl	8009814 <HAL_GPIO_ReadPin>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	4b42      	ldr	r3, [pc, #264]	; (80070f8 <KeyboardCheck+0x2a4>)
 8006fee:	739a      	strb	r2, [r3, #14]
	KeysRetain.AHH1_Pusk 	= !HAL_GPIO_ReadPin(BUTTON_16_GPIO_Port, BUTTON_16_Pin);
 8006ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ff4:	4841      	ldr	r0, [pc, #260]	; (80070fc <KeyboardCheck+0x2a8>)
 8006ff6:	f002 fc0d 	bl	8009814 <HAL_GPIO_ReadPin>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bf0c      	ite	eq
 8007000:	2301      	moveq	r3, #1
 8007002:	2300      	movne	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	4b3b      	ldr	r3, [pc, #236]	; (80070f8 <KeyboardCheck+0x2a4>)
 800700a:	73da      	strb	r2, [r3, #15]

	if(KeysRetain.ESC 		& !KeysMirror.ESC)			{KeysFlash.ESC 			= 1;}
 800700c:	4b3a      	ldr	r3, [pc, #232]	; (80070f8 <KeyboardCheck+0x2a4>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	4b3d      	ldr	r3, [pc, #244]	; (8007108 <KeyboardCheck+0x2b4>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	bf0c      	ite	eq
 800701a:	2301      	moveq	r3, #1
 800701c:	2300      	movne	r3, #0
 800701e:	b2db      	uxtb	r3, r3
 8007020:	4013      	ands	r3, r2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <KeyboardCheck+0x1d8>
 8007026:	4b39      	ldr	r3, [pc, #228]	; (800710c <KeyboardCheck+0x2b8>)
 8007028:	2201      	movs	r2, #1
 800702a:	701a      	strb	r2, [r3, #0]
	if(KeysRetain.ENT 		& !KeysMirror.ENT)			{KeysFlash.ENT 			= 1;}
 800702c:	4b32      	ldr	r3, [pc, #200]	; (80070f8 <KeyboardCheck+0x2a4>)
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	461a      	mov	r2, r3
 8007032:	4b35      	ldr	r3, [pc, #212]	; (8007108 <KeyboardCheck+0x2b4>)
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	2b00      	cmp	r3, #0
 8007038:	bf0c      	ite	eq
 800703a:	2301      	moveq	r3, #1
 800703c:	2300      	movne	r3, #0
 800703e:	b2db      	uxtb	r3, r3
 8007040:	4013      	ands	r3, r2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <KeyboardCheck+0x1f8>
 8007046:	4b31      	ldr	r3, [pc, #196]	; (800710c <KeyboardCheck+0x2b8>)
 8007048:	2201      	movs	r2, #1
 800704a:	705a      	strb	r2, [r3, #1]
	if(KeysRetain.Right 	& !KeysMirror.Right)		{KeysFlash.Right 		= 1;}
 800704c:	4b2a      	ldr	r3, [pc, #168]	; (80070f8 <KeyboardCheck+0x2a4>)
 800704e:	789b      	ldrb	r3, [r3, #2]
 8007050:	461a      	mov	r2, r3
 8007052:	4b2d      	ldr	r3, [pc, #180]	; (8007108 <KeyboardCheck+0x2b4>)
 8007054:	789b      	ldrb	r3, [r3, #2]
 8007056:	2b00      	cmp	r3, #0
 8007058:	bf0c      	ite	eq
 800705a:	2301      	moveq	r3, #1
 800705c:	2300      	movne	r3, #0
 800705e:	b2db      	uxtb	r3, r3
 8007060:	4013      	ands	r3, r2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <KeyboardCheck+0x218>
 8007066:	4b29      	ldr	r3, [pc, #164]	; (800710c <KeyboardCheck+0x2b8>)
 8007068:	2201      	movs	r2, #1
 800706a:	709a      	strb	r2, [r3, #2]
	if(KeysRetain.Left 		& !KeysMirror.Left)			{KeysFlash.Left 		= 1;}
 800706c:	4b22      	ldr	r3, [pc, #136]	; (80070f8 <KeyboardCheck+0x2a4>)
 800706e:	78db      	ldrb	r3, [r3, #3]
 8007070:	461a      	mov	r2, r3
 8007072:	4b25      	ldr	r3, [pc, #148]	; (8007108 <KeyboardCheck+0x2b4>)
 8007074:	78db      	ldrb	r3, [r3, #3]
 8007076:	2b00      	cmp	r3, #0
 8007078:	bf0c      	ite	eq
 800707a:	2301      	moveq	r3, #1
 800707c:	2300      	movne	r3, #0
 800707e:	b2db      	uxtb	r3, r3
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <KeyboardCheck+0x238>
 8007086:	4b21      	ldr	r3, [pc, #132]	; (800710c <KeyboardCheck+0x2b8>)
 8007088:	2201      	movs	r2, #1
 800708a:	70da      	strb	r2, [r3, #3]
	if(KeysRetain.Down 		& !KeysMirror.Down)			{KeysFlash.Down 		= 1;}
 800708c:	4b1a      	ldr	r3, [pc, #104]	; (80070f8 <KeyboardCheck+0x2a4>)
 800708e:	791b      	ldrb	r3, [r3, #4]
 8007090:	461a      	mov	r2, r3
 8007092:	4b1d      	ldr	r3, [pc, #116]	; (8007108 <KeyboardCheck+0x2b4>)
 8007094:	791b      	ldrb	r3, [r3, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	bf0c      	ite	eq
 800709a:	2301      	moveq	r3, #1
 800709c:	2300      	movne	r3, #0
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	4013      	ands	r3, r2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <KeyboardCheck+0x258>
 80070a6:	4b19      	ldr	r3, [pc, #100]	; (800710c <KeyboardCheck+0x2b8>)
 80070a8:	2201      	movs	r2, #1
 80070aa:	711a      	strb	r2, [r3, #4]
	if(KeysRetain.Up 		& !KeysMirror.Up)			{KeysFlash.Up 			= 1;}
 80070ac:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <KeyboardCheck+0x2a4>)
 80070ae:	795b      	ldrb	r3, [r3, #5]
 80070b0:	461a      	mov	r2, r3
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <KeyboardCheck+0x2b4>)
 80070b4:	795b      	ldrb	r3, [r3, #5]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	bf0c      	ite	eq
 80070ba:	2301      	moveq	r3, #1
 80070bc:	2300      	movne	r3, #0
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	4013      	ands	r3, r2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <KeyboardCheck+0x278>
 80070c6:	4b11      	ldr	r3, [pc, #68]	; (800710c <KeyboardCheck+0x2b8>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	715a      	strb	r2, [r3, #5]
	if(KeysRetain.PressDown & !KeysMirror.PressDown)	{KeysFlash.PressDown 	= 1;}
 80070cc:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <KeyboardCheck+0x2a4>)
 80070ce:	799b      	ldrb	r3, [r3, #6]
 80070d0:	461a      	mov	r2, r3
 80070d2:	4b0d      	ldr	r3, [pc, #52]	; (8007108 <KeyboardCheck+0x2b4>)
 80070d4:	799b      	ldrb	r3, [r3, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	bf0c      	ite	eq
 80070da:	2301      	moveq	r3, #1
 80070dc:	2300      	movne	r3, #0
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	4013      	ands	r3, r2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <KeyboardCheck+0x298>
 80070e6:	4b09      	ldr	r3, [pc, #36]	; (800710c <KeyboardCheck+0x2b8>)
 80070e8:	2201      	movs	r2, #1
 80070ea:	719a      	strb	r2, [r3, #6]
	if(KeysRetain.AHH3_Stop & !KeysMirror.AHH3_Stop)	{KeysFlash.AHH3_Stop 	= 1;}
 80070ec:	4b02      	ldr	r3, [pc, #8]	; (80070f8 <KeyboardCheck+0x2a4>)
 80070ee:	79db      	ldrb	r3, [r3, #7]
 80070f0:	461a      	mov	r2, r3
 80070f2:	e00d      	b.n	8007110 <KeyboardCheck+0x2bc>
 80070f4:	40022400 	.word	0x40022400
 80070f8:	20000c00 	.word	0x20000c00
 80070fc:	40021c00 	.word	0x40021c00
 8007100:	40020800 	.word	0x40020800
 8007104:	40022000 	.word	0x40022000
 8007108:	20000c20 	.word	0x20000c20
 800710c:	20000c10 	.word	0x20000c10
 8007110:	4b67      	ldr	r3, [pc, #412]	; (80072b0 <KeyboardCheck+0x45c>)
 8007112:	79db      	ldrb	r3, [r3, #7]
 8007114:	2b00      	cmp	r3, #0
 8007116:	bf0c      	ite	eq
 8007118:	2301      	moveq	r3, #1
 800711a:	2300      	movne	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	4013      	ands	r3, r2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <KeyboardCheck+0x2d6>
 8007124:	4b63      	ldr	r3, [pc, #396]	; (80072b4 <KeyboardCheck+0x460>)
 8007126:	2201      	movs	r2, #1
 8007128:	71da      	strb	r2, [r3, #7]
	if(KeysRetain.AutoPusk 	& !KeysMirror.AutoPusk)		{KeysFlash.AutoPusk 	= 1;}
 800712a:	4b63      	ldr	r3, [pc, #396]	; (80072b8 <KeyboardCheck+0x464>)
 800712c:	7a1b      	ldrb	r3, [r3, #8]
 800712e:	461a      	mov	r2, r3
 8007130:	4b5f      	ldr	r3, [pc, #380]	; (80072b0 <KeyboardCheck+0x45c>)
 8007132:	7a1b      	ldrb	r3, [r3, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	bf0c      	ite	eq
 8007138:	2301      	moveq	r3, #1
 800713a:	2300      	movne	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <KeyboardCheck+0x2f6>
 8007144:	4b5b      	ldr	r3, [pc, #364]	; (80072b4 <KeyboardCheck+0x460>)
 8007146:	2201      	movs	r2, #1
 8007148:	721a      	strb	r2, [r3, #8]
	if(KeysRetain.AutoStop 	& !KeysMirror.AutoStop)		{KeysFlash.AutoStop 	= 1;}
 800714a:	4b5b      	ldr	r3, [pc, #364]	; (80072b8 <KeyboardCheck+0x464>)
 800714c:	7a5b      	ldrb	r3, [r3, #9]
 800714e:	461a      	mov	r2, r3
 8007150:	4b57      	ldr	r3, [pc, #348]	; (80072b0 <KeyboardCheck+0x45c>)
 8007152:	7a5b      	ldrb	r3, [r3, #9]
 8007154:	2b00      	cmp	r3, #0
 8007156:	bf0c      	ite	eq
 8007158:	2301      	moveq	r3, #1
 800715a:	2300      	movne	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	4013      	ands	r3, r2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <KeyboardCheck+0x316>
 8007164:	4b53      	ldr	r3, [pc, #332]	; (80072b4 <KeyboardCheck+0x460>)
 8007166:	2201      	movs	r2, #1
 8007168:	725a      	strb	r2, [r3, #9]
	if(KeysRetain.AHH1_Stop & !KeysMirror.AHH1_Stop)	{KeysFlash.AHH1_Stop 	= 1;}
 800716a:	4b53      	ldr	r3, [pc, #332]	; (80072b8 <KeyboardCheck+0x464>)
 800716c:	7a9b      	ldrb	r3, [r3, #10]
 800716e:	461a      	mov	r2, r3
 8007170:	4b4f      	ldr	r3, [pc, #316]	; (80072b0 <KeyboardCheck+0x45c>)
 8007172:	7a9b      	ldrb	r3, [r3, #10]
 8007174:	2b00      	cmp	r3, #0
 8007176:	bf0c      	ite	eq
 8007178:	2301      	moveq	r3, #1
 800717a:	2300      	movne	r3, #0
 800717c:	b2db      	uxtb	r3, r3
 800717e:	4013      	ands	r3, r2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <KeyboardCheck+0x336>
 8007184:	4b4b      	ldr	r3, [pc, #300]	; (80072b4 <KeyboardCheck+0x460>)
 8007186:	2201      	movs	r2, #1
 8007188:	729a      	strb	r2, [r3, #10]
	if(KeysRetain.AHH2_Stop & !KeysMirror.AHH2_Stop)	{KeysFlash.AHH2_Stop 	= 1;}
 800718a:	4b4b      	ldr	r3, [pc, #300]	; (80072b8 <KeyboardCheck+0x464>)
 800718c:	7adb      	ldrb	r3, [r3, #11]
 800718e:	461a      	mov	r2, r3
 8007190:	4b47      	ldr	r3, [pc, #284]	; (80072b0 <KeyboardCheck+0x45c>)
 8007192:	7adb      	ldrb	r3, [r3, #11]
 8007194:	2b00      	cmp	r3, #0
 8007196:	bf0c      	ite	eq
 8007198:	2301      	moveq	r3, #1
 800719a:	2300      	movne	r3, #0
 800719c:	b2db      	uxtb	r3, r3
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <KeyboardCheck+0x356>
 80071a4:	4b43      	ldr	r3, [pc, #268]	; (80072b4 <KeyboardCheck+0x460>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	72da      	strb	r2, [r3, #11]
	if(KeysRetain.PressUp 	& !KeysMirror.PressUp)		{KeysFlash.PressUp 		= 1;}
 80071aa:	4b43      	ldr	r3, [pc, #268]	; (80072b8 <KeyboardCheck+0x464>)
 80071ac:	7b1b      	ldrb	r3, [r3, #12]
 80071ae:	461a      	mov	r2, r3
 80071b0:	4b3f      	ldr	r3, [pc, #252]	; (80072b0 <KeyboardCheck+0x45c>)
 80071b2:	7b1b      	ldrb	r3, [r3, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	bf0c      	ite	eq
 80071b8:	2301      	moveq	r3, #1
 80071ba:	2300      	movne	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	4013      	ands	r3, r2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <KeyboardCheck+0x376>
 80071c4:	4b3b      	ldr	r3, [pc, #236]	; (80072b4 <KeyboardCheck+0x460>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	731a      	strb	r2, [r3, #12]
	if(KeysRetain.AHH3_Pusk & !KeysMirror.AHH3_Pusk)	{KeysFlash.AHH3_Pusk 	= 1;}
 80071ca:	4b3b      	ldr	r3, [pc, #236]	; (80072b8 <KeyboardCheck+0x464>)
 80071cc:	7b5b      	ldrb	r3, [r3, #13]
 80071ce:	461a      	mov	r2, r3
 80071d0:	4b37      	ldr	r3, [pc, #220]	; (80072b0 <KeyboardCheck+0x45c>)
 80071d2:	7b5b      	ldrb	r3, [r3, #13]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf0c      	ite	eq
 80071d8:	2301      	moveq	r3, #1
 80071da:	2300      	movne	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	4013      	ands	r3, r2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <KeyboardCheck+0x396>
 80071e4:	4b33      	ldr	r3, [pc, #204]	; (80072b4 <KeyboardCheck+0x460>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	735a      	strb	r2, [r3, #13]
	if(KeysRetain.AHH2_Pusk & !KeysMirror.AHH2_Pusk)	{KeysFlash.AHH2_Pusk 	= 1;}
 80071ea:	4b33      	ldr	r3, [pc, #204]	; (80072b8 <KeyboardCheck+0x464>)
 80071ec:	7b9b      	ldrb	r3, [r3, #14]
 80071ee:	461a      	mov	r2, r3
 80071f0:	4b2f      	ldr	r3, [pc, #188]	; (80072b0 <KeyboardCheck+0x45c>)
 80071f2:	7b9b      	ldrb	r3, [r3, #14]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bf0c      	ite	eq
 80071f8:	2301      	moveq	r3, #1
 80071fa:	2300      	movne	r3, #0
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	4013      	ands	r3, r2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <KeyboardCheck+0x3b6>
 8007204:	4b2b      	ldr	r3, [pc, #172]	; (80072b4 <KeyboardCheck+0x460>)
 8007206:	2201      	movs	r2, #1
 8007208:	739a      	strb	r2, [r3, #14]
	if(KeysRetain.AHH1_Pusk & !KeysMirror.AHH1_Pusk)	{KeysFlash.AHH1_Pusk 	= 1;}
 800720a:	4b2b      	ldr	r3, [pc, #172]	; (80072b8 <KeyboardCheck+0x464>)
 800720c:	7bdb      	ldrb	r3, [r3, #15]
 800720e:	461a      	mov	r2, r3
 8007210:	4b27      	ldr	r3, [pc, #156]	; (80072b0 <KeyboardCheck+0x45c>)
 8007212:	7bdb      	ldrb	r3, [r3, #15]
 8007214:	2b00      	cmp	r3, #0
 8007216:	bf0c      	ite	eq
 8007218:	2301      	moveq	r3, #1
 800721a:	2300      	movne	r3, #0
 800721c:	b2db      	uxtb	r3, r3
 800721e:	4013      	ands	r3, r2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <KeyboardCheck+0x3d6>
 8007224:	4b23      	ldr	r3, [pc, #140]	; (80072b4 <KeyboardCheck+0x460>)
 8007226:	2201      	movs	r2, #1
 8007228:	73da      	strb	r2, [r3, #15]

	KeysMirror.ESC 			= KeysRetain.ESC;
 800722a:	4b23      	ldr	r3, [pc, #140]	; (80072b8 <KeyboardCheck+0x464>)
 800722c:	781a      	ldrb	r2, [r3, #0]
 800722e:	4b20      	ldr	r3, [pc, #128]	; (80072b0 <KeyboardCheck+0x45c>)
 8007230:	701a      	strb	r2, [r3, #0]
	KeysMirror.ENT 			= KeysRetain.ENT;
 8007232:	4b21      	ldr	r3, [pc, #132]	; (80072b8 <KeyboardCheck+0x464>)
 8007234:	785a      	ldrb	r2, [r3, #1]
 8007236:	4b1e      	ldr	r3, [pc, #120]	; (80072b0 <KeyboardCheck+0x45c>)
 8007238:	705a      	strb	r2, [r3, #1]
	KeysMirror.Right 		= KeysRetain.Right;
 800723a:	4b1f      	ldr	r3, [pc, #124]	; (80072b8 <KeyboardCheck+0x464>)
 800723c:	789a      	ldrb	r2, [r3, #2]
 800723e:	4b1c      	ldr	r3, [pc, #112]	; (80072b0 <KeyboardCheck+0x45c>)
 8007240:	709a      	strb	r2, [r3, #2]
	KeysMirror.Left 		= KeysRetain.Left;
 8007242:	4b1d      	ldr	r3, [pc, #116]	; (80072b8 <KeyboardCheck+0x464>)
 8007244:	78da      	ldrb	r2, [r3, #3]
 8007246:	4b1a      	ldr	r3, [pc, #104]	; (80072b0 <KeyboardCheck+0x45c>)
 8007248:	70da      	strb	r2, [r3, #3]
	KeysMirror.Down 		= KeysRetain.Down;
 800724a:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <KeyboardCheck+0x464>)
 800724c:	791a      	ldrb	r2, [r3, #4]
 800724e:	4b18      	ldr	r3, [pc, #96]	; (80072b0 <KeyboardCheck+0x45c>)
 8007250:	711a      	strb	r2, [r3, #4]
	KeysMirror.Up 			= KeysRetain.Up;
 8007252:	4b19      	ldr	r3, [pc, #100]	; (80072b8 <KeyboardCheck+0x464>)
 8007254:	795a      	ldrb	r2, [r3, #5]
 8007256:	4b16      	ldr	r3, [pc, #88]	; (80072b0 <KeyboardCheck+0x45c>)
 8007258:	715a      	strb	r2, [r3, #5]
	KeysMirror.PressDown 	= KeysRetain.PressDown;
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <KeyboardCheck+0x464>)
 800725c:	799a      	ldrb	r2, [r3, #6]
 800725e:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <KeyboardCheck+0x45c>)
 8007260:	719a      	strb	r2, [r3, #6]
	KeysMirror.AHH3_Stop 	= KeysRetain.AHH3_Stop;
 8007262:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <KeyboardCheck+0x464>)
 8007264:	79da      	ldrb	r2, [r3, #7]
 8007266:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <KeyboardCheck+0x45c>)
 8007268:	71da      	strb	r2, [r3, #7]
	KeysMirror.AutoPusk 	= KeysRetain.AutoPusk;
 800726a:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <KeyboardCheck+0x464>)
 800726c:	7a1a      	ldrb	r2, [r3, #8]
 800726e:	4b10      	ldr	r3, [pc, #64]	; (80072b0 <KeyboardCheck+0x45c>)
 8007270:	721a      	strb	r2, [r3, #8]
	KeysMirror.AutoStop 	= KeysRetain.AutoStop;
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <KeyboardCheck+0x464>)
 8007274:	7a5a      	ldrb	r2, [r3, #9]
 8007276:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <KeyboardCheck+0x45c>)
 8007278:	725a      	strb	r2, [r3, #9]
	KeysMirror.AHH1_Stop 	= KeysRetain.AHH1_Stop;
 800727a:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <KeyboardCheck+0x464>)
 800727c:	7a9a      	ldrb	r2, [r3, #10]
 800727e:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <KeyboardCheck+0x45c>)
 8007280:	729a      	strb	r2, [r3, #10]
	KeysMirror.AHH2_Stop 	= KeysRetain.AHH2_Stop;
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <KeyboardCheck+0x464>)
 8007284:	7ada      	ldrb	r2, [r3, #11]
 8007286:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <KeyboardCheck+0x45c>)
 8007288:	72da      	strb	r2, [r3, #11]
	KeysMirror.PressUp 		= KeysRetain.PressUp;
 800728a:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <KeyboardCheck+0x464>)
 800728c:	7b1a      	ldrb	r2, [r3, #12]
 800728e:	4b08      	ldr	r3, [pc, #32]	; (80072b0 <KeyboardCheck+0x45c>)
 8007290:	731a      	strb	r2, [r3, #12]
	KeysMirror.AHH3_Pusk 	= KeysRetain.AHH3_Pusk;
 8007292:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <KeyboardCheck+0x464>)
 8007294:	7b5a      	ldrb	r2, [r3, #13]
 8007296:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <KeyboardCheck+0x45c>)
 8007298:	735a      	strb	r2, [r3, #13]
	KeysMirror.AHH2_Pusk 	= KeysRetain.AHH2_Pusk;
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <KeyboardCheck+0x464>)
 800729c:	7b9a      	ldrb	r2, [r3, #14]
 800729e:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <KeyboardCheck+0x45c>)
 80072a0:	739a      	strb	r2, [r3, #14]
	KeysMirror.AHH1_Pusk 	= KeysRetain.AHH1_Pusk;
 80072a2:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <KeyboardCheck+0x464>)
 80072a4:	7bda      	ldrb	r2, [r3, #15]
 80072a6:	4b02      	ldr	r3, [pc, #8]	; (80072b0 <KeyboardCheck+0x45c>)
 80072a8:	73da      	strb	r2, [r3, #15]

}
 80072aa:	bf00      	nop
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000c20 	.word	0x20000c20
 80072b4:	20000c10 	.word	0x20000c10
 80072b8:	20000c00 	.word	0x20000c00

080072bc <KeyboardClear>:

void KeyboardClear(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
	KeysFlash.ESC 			= 0;
 80072c0:	4b1a      	ldr	r3, [pc, #104]	; (800732c <KeyboardClear+0x70>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	701a      	strb	r2, [r3, #0]
	KeysFlash.ENT 			= 0;
 80072c6:	4b19      	ldr	r3, [pc, #100]	; (800732c <KeyboardClear+0x70>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	705a      	strb	r2, [r3, #1]
	KeysFlash.Right 		= 0;
 80072cc:	4b17      	ldr	r3, [pc, #92]	; (800732c <KeyboardClear+0x70>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	709a      	strb	r2, [r3, #2]
	KeysFlash.Left 			= 0;
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <KeyboardClear+0x70>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	70da      	strb	r2, [r3, #3]
	KeysFlash.Down 			= 0;
 80072d8:	4b14      	ldr	r3, [pc, #80]	; (800732c <KeyboardClear+0x70>)
 80072da:	2200      	movs	r2, #0
 80072dc:	711a      	strb	r2, [r3, #4]
	KeysFlash.Up 			= 0;
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <KeyboardClear+0x70>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	715a      	strb	r2, [r3, #5]
	KeysFlash.PressDown 	= 0;
 80072e4:	4b11      	ldr	r3, [pc, #68]	; (800732c <KeyboardClear+0x70>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	719a      	strb	r2, [r3, #6]
	KeysFlash.AHH3_Stop 	= 0;
 80072ea:	4b10      	ldr	r3, [pc, #64]	; (800732c <KeyboardClear+0x70>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	71da      	strb	r2, [r3, #7]
	KeysFlash.AutoPusk 		= 0;
 80072f0:	4b0e      	ldr	r3, [pc, #56]	; (800732c <KeyboardClear+0x70>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	721a      	strb	r2, [r3, #8]
	KeysFlash.AutoStop 		= 0;
 80072f6:	4b0d      	ldr	r3, [pc, #52]	; (800732c <KeyboardClear+0x70>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	725a      	strb	r2, [r3, #9]
	KeysFlash.AHH1_Stop 	= 0;
 80072fc:	4b0b      	ldr	r3, [pc, #44]	; (800732c <KeyboardClear+0x70>)
 80072fe:	2200      	movs	r2, #0
 8007300:	729a      	strb	r2, [r3, #10]
	KeysFlash.AHH2_Stop 	= 0;
 8007302:	4b0a      	ldr	r3, [pc, #40]	; (800732c <KeyboardClear+0x70>)
 8007304:	2200      	movs	r2, #0
 8007306:	72da      	strb	r2, [r3, #11]
	KeysFlash.PressUp 		= 0;
 8007308:	4b08      	ldr	r3, [pc, #32]	; (800732c <KeyboardClear+0x70>)
 800730a:	2200      	movs	r2, #0
 800730c:	731a      	strb	r2, [r3, #12]
	KeysFlash.AHH3_Pusk 	= 0;
 800730e:	4b07      	ldr	r3, [pc, #28]	; (800732c <KeyboardClear+0x70>)
 8007310:	2200      	movs	r2, #0
 8007312:	735a      	strb	r2, [r3, #13]
	KeysFlash.AHH2_Pusk 	= 0;
 8007314:	4b05      	ldr	r3, [pc, #20]	; (800732c <KeyboardClear+0x70>)
 8007316:	2200      	movs	r2, #0
 8007318:	739a      	strb	r2, [r3, #14]
	KeysFlash.AHH1_Pusk 	= 0;
 800731a:	4b04      	ldr	r3, [pc, #16]	; (800732c <KeyboardClear+0x70>)
 800731c:	2200      	movs	r2, #0
 800731e:	73da      	strb	r2, [r3, #15]
}
 8007320:	bf00      	nop
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20000c10 	.word	0x20000c10

08007330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <SystemInit+0x20>)
 8007336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800733a:	4a05      	ldr	r2, [pc, #20]	; (8007350 <SystemInit+0x20>)
 800733c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007344:	bf00      	nop
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	e000ed00 	.word	0xe000ed00

08007354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800738c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007358:	480d      	ldr	r0, [pc, #52]	; (8007390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800735a:	490e      	ldr	r1, [pc, #56]	; (8007394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800735c:	4a0e      	ldr	r2, [pc, #56]	; (8007398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800735e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007360:	e002      	b.n	8007368 <LoopCopyDataInit>

08007362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007366:	3304      	adds	r3, #4

08007368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800736a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800736c:	d3f9      	bcc.n	8007362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800736e:	4a0b      	ldr	r2, [pc, #44]	; (800739c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007370:	4c0b      	ldr	r4, [pc, #44]	; (80073a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007374:	e001      	b.n	800737a <LoopFillZerobss>

08007376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007378:	3204      	adds	r2, #4

0800737a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800737a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800737c:	d3fb      	bcc.n	8007376 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800737e:	f7ff ffd7 	bl	8007330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007382:	f005 fdb7 	bl	800cef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007386:	f7fe f86d 	bl	8005464 <main>
  bx  lr    
 800738a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800738c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8007390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007394:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8007398:	08013800 	.word	0x08013800
  ldr r2, =_sbss
 800739c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80073a0:	20000d94 	.word	0x20000d94

080073a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80073a4:	e7fe      	b.n	80073a4 <ADC_IRQHandler>

080073a6 <DrawChar_16>:
//extern Settings Settings_DB;
extern InterfaceControlDB Control_DB;


void DrawChar_16(uint8_t Char, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint16_t Table[], uint16_t width_char, uint16_t height_char)
{
 80073a6:	b590      	push	{r4, r7, lr}
 80073a8:	b089      	sub	sp, #36	; 0x24
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	4604      	mov	r4, r0
 80073ae:	4608      	mov	r0, r1
 80073b0:	4611      	mov	r1, r2
 80073b2:	461a      	mov	r2, r3
 80073b4:	4623      	mov	r3, r4
 80073b6:	71fb      	strb	r3, [r7, #7]
 80073b8:	4603      	mov	r3, r0
 80073ba:	80bb      	strh	r3, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	807b      	strh	r3, [r7, #2]
 80073c0:	4613      	mov	r3, r2
 80073c2:	803b      	strh	r3, [r7, #0]
	uint32_t Color_RGB;
	uint16_t Horizontal_line;
	struct {uint8_t b,g,r;} *vbuf=Video_buffer_pointer;
 80073c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c6:	613b      	str	r3, [r7, #16]

	for(int j=0;j<height_char;j++)
 80073c8:	2300      	movs	r3, #0
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	e044      	b.n	8007458 <DrawChar_16+0xb2>
	{
		Horizontal_line = Table[(Char * height_char) + j];
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80073d4:	fb03 f202 	mul.w	r2, r3, r2
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	4413      	add	r3, r2
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073e0:	4413      	add	r3, r2
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	83fb      	strh	r3, [r7, #30]
		Horizontal_line = Horizontal_line >> (16 - width_char);
 80073e6:	8bfa      	ldrh	r2, [r7, #30]
 80073e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80073ec:	f1c3 0310 	rsb	r3, r3, #16
 80073f0:	fa42 f303 	asr.w	r3, r2, r3
 80073f4:	83fb      	strh	r3, [r7, #30]

		for(int i=width_char;i>0;i--)
 80073f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	e026      	b.n	800744c <DrawChar_16+0xa6>
		{

			if(Horizontal_line & 0x1)
 80073fe:	8bfb      	ldrh	r3, [r7, #30]
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <DrawChar_16+0x68>
			{
				Color_RGB = Symbol_Color;
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	e001      	b.n	8007412 <DrawChar_16+0x6c>
			}
			else
			{
				Color_RGB = Font_Color;
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	60fb      	str	r3, [r7, #12]
			}

			memcpy(&vbuf[Coord_X + ((Coord_Y+j) * Resolution_X) + i].b, &Color_RGB, 3);
 8007412:	88ba      	ldrh	r2, [r7, #4]
 8007414:	8879      	ldrh	r1, [r7, #2]
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	440b      	add	r3, r1
 800741a:	8839      	ldrh	r1, [r7, #0]
 800741c:	fb01 f303 	mul.w	r3, r1, r3
 8007420:	441a      	add	r2, r3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	4413      	add	r3, r2
 8007426:	461a      	mov	r2, r3
 8007428:	4613      	mov	r3, r2
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	4413      	add	r3, r2
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4413      	add	r3, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f107 030c 	add.w	r3, r7, #12
 8007438:	2203      	movs	r2, #3
 800743a:	4619      	mov	r1, r3
 800743c:	f005 fd7e 	bl	800cf3c <memcpy>
			Horizontal_line = Horizontal_line >> 1;
 8007440:	8bfb      	ldrh	r3, [r7, #30]
 8007442:	085b      	lsrs	r3, r3, #1
 8007444:	83fb      	strh	r3, [r7, #30]
		for(int i=width_char;i>0;i--)
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	3b01      	subs	r3, #1
 800744a:	617b      	str	r3, [r7, #20]
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	dcd5      	bgt.n	80073fe <DrawChar_16+0x58>
	for(int j=0;j<height_char;j++)
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	3301      	adds	r3, #1
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	429a      	cmp	r2, r3
 8007460:	dbb5      	blt.n	80073ce <DrawChar_16+0x28>
		}

	}

}
 8007462:	bf00      	nop
 8007464:	bf00      	nop
 8007466:	3724      	adds	r7, #36	; 0x24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd90      	pop	{r4, r7, pc}

0800746c <DrawChar_32>:


void DrawChar_32(uint8_t Char, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 800746c:	b590      	push	{r4, r7, lr}
 800746e:	b089      	sub	sp, #36	; 0x24
 8007470:	af00      	add	r7, sp, #0
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	4611      	mov	r1, r2
 8007478:	461a      	mov	r2, r3
 800747a:	4623      	mov	r3, r4
 800747c:	71fb      	strb	r3, [r7, #7]
 800747e:	4603      	mov	r3, r0
 8007480:	80bb      	strh	r3, [r7, #4]
 8007482:	460b      	mov	r3, r1
 8007484:	807b      	strh	r3, [r7, #2]
 8007486:	4613      	mov	r3, r2
 8007488:	803b      	strh	r3, [r7, #0]
	uint32_t Color_RGB;
	uint32_t Horizontal_line;
	struct {uint8_t b,g,r;} *vbuf=Video_buffer_pointer;
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748c:	613b      	str	r3, [r7, #16]
	Char = Char - 32;
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	3b20      	subs	r3, #32
 8007492:	71fb      	strb	r3, [r7, #7]

	for(int j=0;j<height_char;j++)
 8007494:	2300      	movs	r3, #0
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	e044      	b.n	8007524 <DrawChar_32+0xb8>
	{
		Horizontal_line = Table[(Char * height_char) + j];
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80074a0:	fb03 f202 	mul.w	r2, r3, r2
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074ac:	4413      	add	r3, r2
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	61fb      	str	r3, [r7, #28]
		Horizontal_line = Horizontal_line >> (32 - width_char);
 80074b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80074b6:	f1c3 0320 	rsb	r3, r3, #32
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	fa22 f303 	lsr.w	r3, r2, r3
 80074c0:	61fb      	str	r3, [r7, #28]

		for(int i=width_char;i>0;i--)
 80074c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	e026      	b.n	8007518 <DrawChar_32+0xac>
		{

			if(Horizontal_line & 0x1)
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <DrawChar_32+0x6e>
			{
				Color_RGB = Symbol_Color;
 80074d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	e001      	b.n	80074de <DrawChar_32+0x72>
			}
			else
			{
				Color_RGB = Font_Color;
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	60fb      	str	r3, [r7, #12]
			}

			memcpy(&vbuf[Coord_X + ((Coord_Y+j) * Resolution_X) + i].b, &Color_RGB, 3);
 80074de:	88ba      	ldrh	r2, [r7, #4]
 80074e0:	8879      	ldrh	r1, [r7, #2]
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	440b      	add	r3, r1
 80074e6:	8839      	ldrh	r1, [r7, #0]
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	441a      	add	r2, r3
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	4413      	add	r3, r2
 80074f2:	461a      	mov	r2, r3
 80074f4:	4613      	mov	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4413      	add	r3, r2
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	4413      	add	r3, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f107 030c 	add.w	r3, r7, #12
 8007504:	2203      	movs	r2, #3
 8007506:	4619      	mov	r1, r3
 8007508:	f005 fd18 	bl	800cf3c <memcpy>
			Horizontal_line = Horizontal_line >> 1;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	085b      	lsrs	r3, r3, #1
 8007510:	61fb      	str	r3, [r7, #28]
		for(int i=width_char;i>0;i--)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	3b01      	subs	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	dcd5      	bgt.n	80074ca <DrawChar_32+0x5e>
	for(int j=0;j<height_char;j++)
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	3301      	adds	r3, #1
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	429a      	cmp	r2, r3
 800752c:	dbb5      	blt.n	800749a <DrawChar_32+0x2e>
		}
	}
}
 800752e:	bf00      	nop
 8007530:	bf00      	nop
 8007532:	3724      	adds	r7, #36	; 0x24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd90      	pop	{r4, r7, pc}

08007538 <DrawString_16>:


void DrawString_16(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8007538:	b590      	push	{r4, r7, lr}
 800753a:	b09b      	sub	sp, #108	; 0x6c
 800753c:	af08      	add	r7, sp, #32
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	4608      	mov	r0, r1
 8007542:	4611      	mov	r1, r2
 8007544:	461a      	mov	r2, r3
 8007546:	4603      	mov	r3, r0
 8007548:	817b      	strh	r3, [r7, #10]
 800754a:	460b      	mov	r3, r1
 800754c:	813b      	strh	r3, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	80fb      	strh	r3, [r7, #6]
	char String2[50];
	for(int i=0;i<Len;i++)
 8007552:	2300      	movs	r3, #0
 8007554:	647b      	str	r3, [r7, #68]	; 0x44
 8007556:	e034      	b.n	80075c2 <DrawString_16+0x8a>
	{
	String2[i] = String[i] - 32;
 8007558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	3b20      	subs	r3, #32
 8007562:	b2d9      	uxtb	r1, r3
 8007564:	f107 0210 	add.w	r2, r7, #16
 8007568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756a:	4413      	add	r3, r2
 800756c:	460a      	mov	r2, r1
 800756e:	701a      	strb	r2, [r3, #0]
	DrawChar_16(String2[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8007570:	f107 0210 	add.w	r2, r7, #16
 8007574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007576:	4413      	add	r3, r2
 8007578:	7818      	ldrb	r0, [r3, #0]
 800757a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800757c:	b29b      	uxth	r3, r3
 800757e:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8007582:	fb12 f303 	smulbb	r3, r2, r3
 8007586:	b29a      	uxth	r2, r3
 8007588:	893b      	ldrh	r3, [r7, #8]
 800758a:	4413      	add	r3, r2
 800758c:	b299      	uxth	r1, r3
 800758e:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 8007592:	88fa      	ldrh	r2, [r7, #6]
 8007594:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8007598:	9306      	str	r3, [sp, #24]
 800759a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800759e:	9305      	str	r3, [sp, #20]
 80075a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075a6:	9303      	str	r3, [sp, #12]
 80075a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075aa:	9302      	str	r3, [sp, #8]
 80075ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	4623      	mov	r3, r4
 80075b8:	f7ff fef5 	bl	80073a6 <DrawChar_16>
	for(int i=0;i<Len;i++)
 80075bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075be:	3301      	adds	r3, #1
 80075c0:	647b      	str	r3, [r7, #68]	; 0x44
 80075c2:	897b      	ldrh	r3, [r7, #10]
 80075c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075c6:	429a      	cmp	r2, r3
 80075c8:	dbc6      	blt.n	8007558 <DrawString_16+0x20>
	}
}
 80075ca:	bf00      	nop
 80075cc:	bf00      	nop
 80075ce:	374c      	adds	r7, #76	; 0x4c
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd90      	pop	{r4, r7, pc}

080075d4 <Centred_DrawString_16>:

void Centred_DrawString_16(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08c      	sub	sp, #48	; 0x30
 80075d8:	af08      	add	r7, sp, #32
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	4608      	mov	r0, r1
 80075de:	4611      	mov	r1, r2
 80075e0:	461a      	mov	r2, r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	817b      	strh	r3, [r7, #10]
 80075e6:	460b      	mov	r3, r1
 80075e8:	813b      	strh	r3, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (height_char / 2);
 80075ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80075f0:	085b      	lsrs	r3, r3, #1
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	88fa      	ldrh	r2, [r7, #6]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	80fb      	strh	r3, [r7, #6]
	Coord_X = Coord_X - ((width_char * Len) / 2);
 80075fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80075fc:	897a      	ldrh	r2, [r7, #10]
 80075fe:	fb02 f303 	mul.w	r3, r2, r3
 8007602:	0fda      	lsrs	r2, r3, #31
 8007604:	4413      	add	r3, r2
 8007606:	105b      	asrs	r3, r3, #1
 8007608:	425b      	negs	r3, r3
 800760a:	b29a      	uxth	r2, r3
 800760c:	893b      	ldrh	r3, [r7, #8]
 800760e:	4413      	add	r3, r2
 8007610:	813b      	strh	r3, [r7, #8]
	DrawString_16(String, Len, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8007612:	88f8      	ldrh	r0, [r7, #6]
 8007614:	893a      	ldrh	r2, [r7, #8]
 8007616:	8979      	ldrh	r1, [r7, #10]
 8007618:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800761a:	9307      	str	r3, [sp, #28]
 800761c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800761e:	9306      	str	r3, [sp, #24]
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	9304      	str	r3, [sp, #16]
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	9303      	str	r3, [sp, #12]
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	9302      	str	r3, [sp, #8]
 8007630:	8bbb      	ldrh	r3, [r7, #28]
 8007632:	9301      	str	r3, [sp, #4]
 8007634:	8b3b      	ldrh	r3, [r7, #24]
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	4603      	mov	r3, r0
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f7ff ff7c 	bl	8007538 <DrawString_16>
}
 8007640:	bf00      	nop
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <Short_Left_Colored_RU_DrawString_32>:
	Coord_Y = Coord_Y - (27 / 2);
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, BackgroundColor, BasicSymbolColor, RU_18x27_Table, 18, 27);
}

void Short_Left_Colored_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t PageNumber)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08c      	sub	sp, #48	; 0x30
 800764c:	af08      	add	r7, sp, #32
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	4608      	mov	r0, r1
 8007652:	4611      	mov	r1, r2
 8007654:	461a      	mov	r2, r3
 8007656:	4603      	mov	r3, r0
 8007658:	817b      	strh	r3, [r7, #10]
 800765a:	460b      	mov	r3, r1
 800765c:	813b      	strh	r3, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (27 / 2);
 8007662:	88fb      	ldrh	r3, [r7, #6]
 8007664:	3b0d      	subs	r3, #13
 8007666:	80fb      	strh	r3, [r7, #6]
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
 8007668:	88f8      	ldrh	r0, [r7, #6]
 800766a:	893a      	ldrh	r2, [r7, #8]
 800766c:	8979      	ldrh	r1, [r7, #10]
 800766e:	231b      	movs	r3, #27
 8007670:	9307      	str	r3, [sp, #28]
 8007672:	2312      	movs	r3, #18
 8007674:	9306      	str	r3, [sp, #24]
 8007676:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <Short_Left_Colored_RU_DrawString_32+0x5c>)
 8007678:	9305      	str	r3, [sp, #20]
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	9304      	str	r3, [sp, #16]
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	9303      	str	r3, [sp, #12]
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	9302      	str	r3, [sp, #8]
 8007686:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	4603      	mov	r3, r0
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f807 	bl	80076a8 <RU_DrawString_32>
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	0800eec4 	.word	0x0800eec4

080076a8 <RU_DrawString_32>:
	DrawChar_32(String[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
	}
}

void RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80076a8:	b590      	push	{r4, r7, lr}
 80076aa:	b0ab      	sub	sp, #172	; 0xac
 80076ac:	af08      	add	r7, sp, #32
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	4608      	mov	r0, r1
 80076b2:	4611      	mov	r1, r2
 80076b4:	461a      	mov	r2, r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	817b      	strh	r3, [r7, #10]
 80076ba:	460b      	mov	r3, r1
 80076bc:	813b      	strh	r3, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	80fb      	strh	r3, [r7, #6]

	uint8_t String_OUT[100];
	uint16_t num = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint16_t limit = Len*2;
 80076c8:	897b      	ldrh	r3, [r7, #10]
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	for(int i=0;i<limit;i++)
 80076d0:	2300      	movs	r3, #0
 80076d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076d6:	e04a      	b.n	800776e <RU_DrawString_32+0xc6>
	{
		if(String[i]>=208)
 80076d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2bcf      	cmp	r3, #207	; 0xcf
 80076e4:	d929      	bls.n	800773a <RU_DrawString_32+0x92>
		{
			if(String[i]==208){String_OUT[num] = (String[i+1] - 79);}
 80076e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2bd0      	cmp	r3, #208	; 0xd0
 80076f2:	d10e      	bne.n	8007712 <RU_DrawString_32+0x6a>
 80076f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076f8:	3301      	adds	r3, #1
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4413      	add	r3, r2
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007704:	3a4f      	subs	r2, #79	; 0x4f
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	3388      	adds	r3, #136	; 0x88
 800770a:	443b      	add	r3, r7
 800770c:	f803 2c74 	strb.w	r2, [r3, #-116]
 8007710:	e00d      	b.n	800772e <RU_DrawString_32+0x86>
			else{String_OUT[num] = (String[i+1] - 15);}
 8007712:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007716:	3301      	adds	r3, #1
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	781a      	ldrb	r2, [r3, #0]
 800771e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007722:	3a0f      	subs	r2, #15
 8007724:	b2d2      	uxtb	r2, r2
 8007726:	3388      	adds	r3, #136	; 0x88
 8007728:	443b      	add	r3, r7
 800772a:	f803 2c74 	strb.w	r2, [r3, #-116]
			i++;
 800772e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007732:	3301      	adds	r3, #1
 8007734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007738:	e00f      	b.n	800775a <RU_DrawString_32+0xb2>
		}
		else
		{
			String_OUT[num] = (String[i]);
 800773a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	441a      	add	r2, r3
 8007742:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007746:	7812      	ldrb	r2, [r2, #0]
 8007748:	3388      	adds	r3, #136	; 0x88
 800774a:	443b      	add	r3, r7
 800774c:	f803 2c74 	strb.w	r2, [r3, #-116]
			limit--;
 8007750:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007754:	3b01      	subs	r3, #1
 8007756:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		}
		num++;
 800775a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800775e:	3301      	adds	r3, #1
 8007760:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	for(int i=0;i<limit;i++)
 8007764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007768:	3301      	adds	r3, #1
 800776a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800776e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007772:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007776:	429a      	cmp	r2, r3
 8007778:	dbae      	blt.n	80076d8 <RU_DrawString_32+0x30>
	}

	for(int i=num;i<(Len*2);i++){String_OUT[i]=0;}
 800777a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800777e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007780:	e008      	b.n	8007794 <RU_DrawString_32+0xec>
 8007782:	f107 0214 	add.w	r2, r7, #20
 8007786:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007788:	4413      	add	r3, r2
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007790:	3301      	adds	r3, #1
 8007792:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007794:	897b      	ldrh	r3, [r7, #10]
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800779a:	429a      	cmp	r2, r3
 800779c:	dbf1      	blt.n	8007782 <RU_DrawString_32+0xda>


	for(int i=0;i<Len;i++)
 800779e:	2300      	movs	r3, #0
 80077a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80077a2:	e02c      	b.n	80077fe <RU_DrawString_32+0x156>
	{
		DrawChar_32(String_OUT[i], (Coord_X + (width_char * i)), Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color,
 80077a4:	f107 0214 	add.w	r2, r7, #20
 80077a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077aa:	4413      	add	r3, r2
 80077ac:	7818      	ldrb	r0, [r3, #0]
 80077ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80077b6:	fb12 f303 	smulbb	r3, r2, r3
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	893b      	ldrh	r3, [r7, #8]
 80077be:	4413      	add	r3, r2
 80077c0:	b299      	uxth	r1, r3
 80077c2:	f8b7 4098 	ldrh.w	r4, [r7, #152]	; 0x98
 80077c6:	88fa      	ldrh	r2, [r7, #6]
 80077c8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80077cc:	9306      	str	r3, [sp, #24]
 80077ce:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80077d2:	9305      	str	r3, [sp, #20]
 80077d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077d8:	9304      	str	r3, [sp, #16]
 80077da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077de:	9303      	str	r3, [sp, #12]
 80077e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077e4:	9302      	str	r3, [sp, #8]
 80077e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	4623      	mov	r3, r4
 80077f4:	f7ff fe3a 	bl	800746c <DrawChar_32>
	for(int i=0;i<Len;i++)
 80077f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077fa:	3301      	adds	r3, #1
 80077fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80077fe:	897b      	ldrh	r3, [r7, #10]
 8007800:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007802:	429a      	cmp	r2, r3
 8007804:	dbce      	blt.n	80077a4 <RU_DrawString_32+0xfc>
				Table, width_char, height_char);
	}
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	378c      	adds	r7, #140	; 0x8c
 800780c:	46bd      	mov	sp, r7
 800780e:	bd90      	pop	{r4, r7, pc}

08007810 <Centred_RU_DrawString_32>:

void Centred_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08c      	sub	sp, #48	; 0x30
 8007814:	af08      	add	r7, sp, #32
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	4608      	mov	r0, r1
 800781a:	4611      	mov	r1, r2
 800781c:	461a      	mov	r2, r3
 800781e:	4603      	mov	r3, r0
 8007820:	817b      	strh	r3, [r7, #10]
 8007822:	460b      	mov	r3, r1
 8007824:	813b      	strh	r3, [r7, #8]
 8007826:	4613      	mov	r3, r2
 8007828:	80fb      	strh	r3, [r7, #6]
	Coord_Y = Coord_Y - (height_char / 2);
 800782a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	b29b      	uxth	r3, r3
 8007830:	88fa      	ldrh	r2, [r7, #6]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	80fb      	strh	r3, [r7, #6]
	Coord_X = Coord_X - ((width_char * Len) / 2);
 8007836:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007838:	897a      	ldrh	r2, [r7, #10]
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	0fda      	lsrs	r2, r3, #31
 8007840:	4413      	add	r3, r2
 8007842:	105b      	asrs	r3, r3, #1
 8007844:	425b      	negs	r3, r3
 8007846:	b29a      	uxth	r2, r3
 8007848:	893b      	ldrh	r3, [r7, #8]
 800784a:	4413      	add	r3, r2
 800784c:	813b      	strh	r3, [r7, #8]
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 800784e:	88f8      	ldrh	r0, [r7, #6]
 8007850:	893a      	ldrh	r2, [r7, #8]
 8007852:	8979      	ldrh	r1, [r7, #10]
 8007854:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007856:	9307      	str	r3, [sp, #28]
 8007858:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800785a:	9306      	str	r3, [sp, #24]
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	9303      	str	r3, [sp, #12]
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	9302      	str	r3, [sp, #8]
 800786c:	8bbb      	ldrh	r3, [r7, #28]
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	8b3b      	ldrh	r3, [r7, #24]
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	4603      	mov	r3, r0
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7ff ff16 	bl	80076a8 <RU_DrawString_32>
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <Short_Centred_RU_DrawString_32>:

void Short_Centred_RU_DrawString_32(char String[], uint16_t Len, uint16_t Coord_X,
		uint16_t Coord_Y, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t PageNumber)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08c      	sub	sp, #48	; 0x30
 8007888:	af08      	add	r7, sp, #32
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	4608      	mov	r0, r1
 800788e:	4611      	mov	r1, r2
 8007890:	461a      	mov	r2, r3
 8007892:	4603      	mov	r3, r0
 8007894:	817b      	strh	r3, [r7, #10]
 8007896:	460b      	mov	r3, r1
 8007898:	813b      	strh	r3, [r7, #8]
 800789a:	4613      	mov	r3, r2
 800789c:	80fb      	strh	r3, [r7, #6]
	Centred_RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, PageNumber, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
 800789e:	88f8      	ldrh	r0, [r7, #6]
 80078a0:	893a      	ldrh	r2, [r7, #8]
 80078a2:	8979      	ldrh	r1, [r7, #10]
 80078a4:	231b      	movs	r3, #27
 80078a6:	9307      	str	r3, [sp, #28]
 80078a8:	2312      	movs	r3, #18
 80078aa:	9306      	str	r3, [sp, #24]
 80078ac:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <Short_Centred_RU_DrawString_32+0x54>)
 80078ae:	9305      	str	r3, [sp, #20]
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	9303      	str	r3, [sp, #12]
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	9302      	str	r3, [sp, #8]
 80078bc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	4603      	mov	r3, r0
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f7ff ffa0 	bl	8007810 <Centred_RU_DrawString_32>
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	0800eec4 	.word	0x0800eec4

080078dc <Centred_DrawNumber_16>:
{
	RU_DrawString_32(String, Len, Coord_X, Coord_Y, 800, 480, VideoBuffer, Font_Color, Symbol_Color, RU_18x27_Table, 18, 27);
}

void Centred_DrawNumber_16(int16_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 80078dc:	b590      	push	{r4, r7, lr}
 80078de:	b09d      	sub	sp, #116	; 0x74
 80078e0:	af08      	add	r7, sp, #32
 80078e2:	4604      	mov	r4, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	4611      	mov	r1, r2
 80078e8:	461a      	mov	r2, r3
 80078ea:	4623      	mov	r3, r4
 80078ec:	80fb      	strh	r3, [r7, #6]
 80078ee:	4603      	mov	r3, r0
 80078f0:	80bb      	strh	r3, [r7, #4]
 80078f2:	460b      	mov	r3, r1
 80078f4:	807b      	strh	r3, [r7, #2]
 80078f6:	4613      	mov	r3, r2
 80078f8:	803b      	strh	r3, [r7, #0]
	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 80078fa:	2300      	movs	r3, #0
 80078fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078fe:	e008      	b.n	8007912 <Centred_DrawNumber_16+0x36>
 8007900:	f107 0208 	add.w	r2, r7, #8
 8007904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007906:	4413      	add	r3, r2
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790e:	3301      	adds	r3, #1
 8007910:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007914:	2b09      	cmp	r3, #9
 8007916:	ddf3      	ble.n	8007900 <Centred_DrawNumber_16+0x24>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	  if(Register < 0)
 8007924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007928:	2b00      	cmp	r3, #0
 800792a:	da06      	bge.n	800793a <Centred_DrawNumber_16+0x5e>
	  {
		  BelowZero = 1;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		  Register = 0 - Register;
 8007932:	88fb      	ldrh	r3, [r7, #6]
 8007934:	425b      	negs	r3, r3
 8007936:	b29b      	uxth	r3, r3
 8007938:	80fb      	strh	r3, [r7, #6]
	  }

	  if(Comma>5){Comma=5;}
 800793a:	88bb      	ldrh	r3, [r7, #4]
 800793c:	2b05      	cmp	r3, #5
 800793e:	d901      	bls.n	8007944 <Centred_DrawNumber_16+0x68>
 8007940:	2305      	movs	r3, #5
 8007942:	80bb      	strh	r3, [r7, #4]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 8007944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007948:	f107 0114 	add.w	r1, r7, #20
 800794c:	220a      	movs	r2, #10
 800794e:	4618      	mov	r0, r3
 8007950:	f005 fa7d 	bl	800ce4e <itoa>

	  Cycle_Pointer = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 800795a:	e004      	b.n	8007966 <Centred_DrawNumber_16+0x8a>
	  {
		  Cycle_Pointer++;
 800795c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007960:	3301      	adds	r3, #1
 8007962:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8007966:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800796a:	3350      	adds	r3, #80	; 0x50
 800796c:	443b      	add	r3, r7
 800796e:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f2      	bne.n	800795c <Centred_DrawNumber_16+0x80>
	  }

	  TemporaryLenPointer = Numbers;
 8007976:	887b      	ldrh	r3, [r7, #2]
 8007978:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  for(int i=TemporaryLenPointer;i;i--)
 800797c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007980:	643b      	str	r3, [r7, #64]	; 0x40
 8007982:	e00f      	b.n	80079a4 <Centred_DrawNumber_16+0xc8>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 8007984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007986:	3b01      	subs	r3, #1
 8007988:	3350      	adds	r3, #80	; 0x50
 800798a:	443b      	add	r3, r7
 800798c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8007990:	f803 2c48 	strb.w	r2, [r3, #-72]
		  TemporaryLenPointer--;
 8007994:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007998:	3b01      	subs	r3, #1
 800799a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  for(int i=TemporaryLenPointer;i;i--)
 800799e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a0:	3b01      	subs	r3, #1
 80079a2:	643b      	str	r3, [r7, #64]	; 0x40
 80079a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1ec      	bne.n	8007984 <Centred_DrawNumber_16+0xa8>
	  }


	  if(Comma>0)
 80079aa:	88bb      	ldrh	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d06b      	beq.n	8007a88 <Centred_DrawNumber_16+0x1ac>
	  {
		  if(Comma>=Cycle_Pointer)
 80079b0:	88ba      	ldrh	r2, [r7, #4]
 80079b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d338      	bcc.n	8007a2c <Centred_DrawNumber_16+0x150>
		  {
			  Final_Len = Comma + 2;
 80079ba:	88bb      	ldrh	r3, [r7, #4]
 80079bc:	3302      	adds	r3, #2
 80079be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			  int8_t temp = Cycle_Pointer;
 80079c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80079c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  for(int i=(Final_Len-1);i>=0;i--)
 80079ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80079ce:	3b01      	subs	r3, #1
 80079d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80079d2:	e020      	b.n	8007a16 <Centred_DrawNumber_16+0x13a>
			  {
				  if(temp)
 80079d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d013      	beq.n	8007a04 <Centred_DrawNumber_16+0x128>
				  {
					  temp--;
 80079dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					  String[i] = String[temp];
 80079ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80079ee:	3350      	adds	r3, #80	; 0x50
 80079f0:	443b      	add	r3, r7
 80079f2:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 80079f6:	f107 0214 	add.w	r2, r7, #20
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	4413      	add	r3, r2
 80079fe:	460a      	mov	r2, r1
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	e005      	b.n	8007a10 <Centred_DrawNumber_16+0x134>
				  }
				  else
				  {
					  String[i] = '0';
 8007a04:	f107 0214 	add.w	r2, r7, #20
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	4413      	add	r3, r2
 8007a0c:	2230      	movs	r2, #48	; 0x30
 8007a0e:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	3b01      	subs	r3, #1
 8007a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	dadb      	bge.n	80079d4 <Centred_DrawNumber_16+0xf8>
				  }
			  }
			  String[1] = ',';
 8007a1c:	232c      	movs	r3, #44	; 0x2c
 8007a1e:	757b      	strb	r3, [r7, #21]
			  Cycle_Pointer--;
 8007a20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a24:	3b01      	subs	r3, #1
 8007a26:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007a2a:	e031      	b.n	8007a90 <Centred_DrawNumber_16+0x1b4>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 8007a2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a30:	3301      	adds	r3, #1
 8007a32:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			  for(int i=(Final_Len-1);i>=0;i--)
 8007a36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3e:	e015      	b.n	8007a6c <Centred_DrawNumber_16+0x190>
			  {
				  if( i > (Final_Len - Comma - 1))
 8007a40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007a44:	88bb      	ldrh	r3, [r7, #4]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	db0b      	blt.n	8007a66 <Centred_DrawNumber_16+0x18a>
				  {
					  String[i] = String[i-1];
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a50:	3b01      	subs	r3, #1
 8007a52:	3350      	adds	r3, #80	; 0x50
 8007a54:	443b      	add	r3, r7
 8007a56:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8007a5a:	f107 0214 	add.w	r2, r7, #20
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a60:	4413      	add	r3, r2
 8007a62:	460a      	mov	r2, r1
 8007a64:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8007a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dae6      	bge.n	8007a40 <Centred_DrawNumber_16+0x164>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 8007a72:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007a76:	88bb      	ldrh	r3, [r7, #4]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	3350      	adds	r3, #80	; 0x50
 8007a7e:	443b      	add	r3, r7
 8007a80:	222c      	movs	r2, #44	; 0x2c
 8007a82:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8007a86:	e003      	b.n	8007a90 <Centred_DrawNumber_16+0x1b4>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 8007a88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46


	  if(BelowZero)
 8007a90:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01c      	beq.n	8007ad2 <Centred_DrawNumber_16+0x1f6>
	  {
		  for(int i=Final_Len;i>=0;i--)
 8007a98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a9e:	e00e      	b.n	8007abe <Centred_DrawNumber_16+0x1e2>
		  {
			  String[i] = String[i - 1];
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	3350      	adds	r3, #80	; 0x50
 8007aa6:	443b      	add	r3, r7
 8007aa8:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8007aac:	f107 0214 	add.w	r2, r7, #20
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	4413      	add	r3, r2
 8007ab4:	460a      	mov	r2, r1
 8007ab6:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	3b01      	subs	r3, #1
 8007abc:	633b      	str	r3, [r7, #48]	; 0x30
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	daed      	bge.n	8007aa0 <Centred_DrawNumber_16+0x1c4>
		  }
		  String[0] = '-';
 8007ac4:	232d      	movs	r3, #45	; 0x2d
 8007ac6:	753b      	strb	r3, [r7, #20]
		  Final_Len++;
 8007ac8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007acc:	3301      	adds	r3, #1
 8007ace:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  }

		uint8_t StandartLen = Numbers;
 8007ad2:	887b      	ldrh	r3, [r7, #2]
 8007ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t IschLen = Final_Len - 1;
 8007ad8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(Final_Len < StandartLen)
 8007ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d236      	bcs.n	8007b60 <Centred_DrawNumber_16+0x284>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 8007af2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007af6:	3b01      	subs	r3, #1
 8007af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007afa:	e02e      	b.n	8007b5a <Centred_DrawNumber_16+0x27e>
			{
				if(IschLen)
 8007afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d011      	beq.n	8007b28 <Centred_DrawNumber_16+0x24c>
				{
					String[i] = String[IschLen];
 8007b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b08:	3350      	adds	r3, #80	; 0x50
 8007b0a:	443b      	add	r3, r7
 8007b0c:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8007b10:	f107 0214 	add.w	r2, r7, #20
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	4413      	add	r3, r2
 8007b18:	460a      	mov	r2, r1
 8007b1a:	701a      	strb	r2, [r3, #0]
					IschLen--;
 8007b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b20:	3b01      	subs	r3, #1
 8007b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b26:	e015      	b.n	8007b54 <Centred_DrawNumber_16+0x278>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 8007b28:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007b2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d107      	bne.n	8007b48 <Centred_DrawNumber_16+0x26c>
					{
						String[i] = String[0];
 8007b38:	7d39      	ldrb	r1, [r7, #20]
 8007b3a:	f107 0214 	add.w	r2, r7, #20
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	4413      	add	r3, r2
 8007b42:	460a      	mov	r2, r1
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	e005      	b.n	8007b54 <Centred_DrawNumber_16+0x278>
					}
					else
					{
						String[i] = ' ';
 8007b48:	f107 0214 	add.w	r2, r7, #20
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	4413      	add	r3, r2
 8007b50:	2220      	movs	r2, #32
 8007b52:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	3b01      	subs	r3, #1
 8007b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	dacd      	bge.n	8007afc <Centred_DrawNumber_16+0x220>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 8007b60:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007b64:	085b      	lsrs	r3, r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b6c:	4413      	add	r3, r2
 8007b6e:	843b      	strh	r3, [r7, #32]
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 8007b70:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8007b74:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007b78:	fb02 f303 	mul.w	r3, r2, r3
 8007b7c:	0fda      	lsrs	r2, r3, #31
 8007b7e:	4413      	add	r3, r2
 8007b80:	105b      	asrs	r3, r3, #1
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8007b88:	4413      	add	r3, r2
 8007b8a:	83fb      	strh	r3, [r7, #30]

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 8007b8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	da01      	bge.n	8007b98 <Centred_DrawNumber_16+0x2bc>
 8007b94:	2300      	movs	r3, #0
 8007b96:	803b      	strh	r3, [r7, #0]

		for(int i=0;i<Numbers;i++)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9c:	e095      	b.n	8007cca <Centred_DrawNumber_16+0x3ee>
		{
			if(Pointer_Razr == RazrPointerArray[i])
 8007b9e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007ba2:	f107 0108 	add.w	r1, r7, #8
 8007ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba8:	440a      	add	r2, r1
 8007baa:	7812      	ldrb	r2, [r2, #0]
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d147      	bne.n	8007c40 <Centred_DrawNumber_16+0x364>
			{
				if(Pointer_Razr)
 8007bb0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8085 	beq.w	8007cc4 <Centred_DrawNumber_16+0x3e8>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8007bba:	4b58      	ldr	r3, [pc, #352]	; (8007d1c <Centred_DrawNumber_16+0x440>)
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8007bc8:	fb12 f303 	smulbb	r3, r2, r3
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	8bfa      	ldrh	r2, [r7, #30]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	b299      	uxth	r1, r3
 8007bd4:	8c3b      	ldrh	r3, [r7, #32]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8007bde:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007be2:	9303      	str	r3, [sp, #12]
 8007be4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007be8:	9302      	str	r3, [sp, #8]
 8007bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	2304      	movs	r3, #4
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	4623      	mov	r3, r4
 8007bf4:	f000 fea0 	bl	8008938 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8007bf8:	4b48      	ldr	r3, [pc, #288]	; (8007d1c <Centred_DrawNumber_16+0x440>)
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	3301      	adds	r3, #1
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8007c06:	fb12 f303 	smulbb	r3, r2, r3
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	8bfa      	ldrh	r2, [r7, #30]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	b299      	uxth	r1, r3
 8007c12:	8c3a      	ldrh	r2, [r7, #32]
 8007c14:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	3b04      	subs	r3, #4
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8007c24:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007c28:	9303      	str	r3, [sp, #12]
 8007c2a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007c2e:	9302      	str	r3, [sp, #8]
 8007c30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c32:	9301      	str	r3, [sp, #4]
 8007c34:	2304      	movs	r3, #4
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	4623      	mov	r3, r4
 8007c3a:	f000 fe7d 	bl	8008938 <Draw_Rectangle>
 8007c3e:	e041      	b.n	8007cc4 <Centred_DrawNumber_16+0x3e8>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8007c40:	4b37      	ldr	r3, [pc, #220]	; (8007d20 <Centred_DrawNumber_16+0x444>)
 8007c42:	6818      	ldr	r0, [r3, #0]
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	3301      	adds	r3, #1
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8007c4e:	fb12 f303 	smulbb	r3, r2, r3
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	8bfa      	ldrh	r2, [r7, #30]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	b299      	uxth	r1, r3
 8007c5a:	8c3b      	ldrh	r3, [r7, #32]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8007c64:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007c68:	9303      	str	r3, [sp, #12]
 8007c6a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007c6e:	9302      	str	r3, [sp, #8]
 8007c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c72:	9301      	str	r3, [sp, #4]
 8007c74:	2304      	movs	r3, #4
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	4623      	mov	r3, r4
 8007c7a:	f000 fe5d 	bl	8008938 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8007c7e:	4b28      	ldr	r3, [pc, #160]	; (8007d20 <Centred_DrawNumber_16+0x444>)
 8007c80:	6818      	ldr	r0, [r3, #0]
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	3301      	adds	r3, #1
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8007c8c:	fb12 f303 	smulbb	r3, r2, r3
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	8bfa      	ldrh	r2, [r7, #30]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	b299      	uxth	r1, r3
 8007c98:	8c3a      	ldrh	r2, [r7, #32]
 8007c9a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b04      	subs	r3, #4
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	f8b7 4080 	ldrh.w	r4, [r7, #128]	; 0x80
 8007caa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007cae:	9303      	str	r3, [sp, #12]
 8007cb0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007cb4:	9302      	str	r3, [sp, #8]
 8007cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	2304      	movs	r3, #4
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	4623      	mov	r3, r4
 8007cc0:	f000 fe3a 	bl	8008938 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cca:	887b      	ldrh	r3, [r7, #2]
 8007ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	f6ff af65 	blt.w	8007b9e <Centred_DrawNumber_16+0x2c2>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8007cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cd8:	b299      	uxth	r1, r3
 8007cda:	f8b7 4064 	ldrh.w	r4, [r7, #100]	; 0x64
 8007cde:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8007ce2:	f107 0014 	add.w	r0, r7, #20
 8007ce6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007cea:	9307      	str	r3, [sp, #28]
 8007cec:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8007cf0:	9306      	str	r3, [sp, #24]
 8007cf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cf4:	9305      	str	r3, [sp, #20]
 8007cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cfc:	9303      	str	r3, [sp, #12]
 8007cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d00:	9302      	str	r3, [sp, #8]
 8007d02:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	4623      	mov	r3, r4
 8007d10:	f7ff fc60 	bl	80075d4 <Centred_DrawString_16>
}
 8007d14:	bf00      	nop
 8007d16:	3754      	adds	r7, #84	; 0x54
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd90      	pop	{r4, r7, pc}
 8007d1c:	20000014 	.word	0x20000014
 8007d20:	20000008 	.word	0x20000008

08007d24 <Centred_DrawNumber_16_32bit>:

void Centred_DrawNumber_16_32bit(int32_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8007d24:	b590      	push	{r4, r7, lr}
 8007d26:	b09f      	sub	sp, #124	; 0x7c
 8007d28:	af08      	add	r7, sp, #32
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	4608      	mov	r0, r1
 8007d2e:	4611      	mov	r1, r2
 8007d30:	461a      	mov	r2, r3
 8007d32:	4603      	mov	r3, r0
 8007d34:	817b      	strh	r3, [r7, #10]
 8007d36:	460b      	mov	r3, r1
 8007d38:	813b      	strh	r3, [r7, #8]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	80fb      	strh	r3, [r7, #6]

	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 8007d3e:	2300      	movs	r3, #0
 8007d40:	657b      	str	r3, [r7, #84]	; 0x54
 8007d42:	e008      	b.n	8007d56 <Centred_DrawNumber_16_32bit+0x32>
 8007d44:	f107 0210 	add.w	r2, r7, #16
 8007d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d4a:	4413      	add	r3, r2
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	701a      	strb	r2, [r3, #0]
 8007d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d52:	3301      	adds	r3, #1
 8007d54:	657b      	str	r3, [r7, #84]	; 0x54
 8007d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d58:	2b09      	cmp	r3, #9
 8007d5a:	ddf3      	ble.n	8007d44 <Centred_DrawNumber_16_32bit+0x20>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d




	  if(Register < 0)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	da05      	bge.n	8007d7a <Centred_DrawNumber_16_32bit+0x56>
	  {
		  BelowZero = 1;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		  Register = 0 - Register;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	425b      	negs	r3, r3
 8007d78:	60fb      	str	r3, [r7, #12]
	  }

	  if(Comma>5){Comma=5;}
 8007d7a:	897b      	ldrh	r3, [r7, #10]
 8007d7c:	2b05      	cmp	r3, #5
 8007d7e:	d901      	bls.n	8007d84 <Centred_DrawNumber_16_32bit+0x60>
 8007d80:	2305      	movs	r3, #5
 8007d82:	817b      	strh	r3, [r7, #10]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 8007d84:	f107 031c 	add.w	r3, r7, #28
 8007d88:	220a      	movs	r2, #10
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f005 f85e 	bl	800ce4e <itoa>

	  Cycle_Pointer = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8007d98:	e004      	b.n	8007da4 <Centred_DrawNumber_16_32bit+0x80>
	  {
		  Cycle_Pointer++;
 8007d9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007d9e:	3301      	adds	r3, #1
 8007da0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8007da4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007da8:	3358      	adds	r3, #88	; 0x58
 8007daa:	443b      	add	r3, r7
 8007dac:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1f2      	bne.n	8007d9a <Centred_DrawNumber_16_32bit+0x76>
	  }

	  TemporaryLenPointer = Numbers;
 8007db4:	893b      	ldrh	r3, [r7, #8]
 8007db6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  for(int i=TemporaryLenPointer;i;i--)
 8007dba:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dc0:	e00f      	b.n	8007de2 <Centred_DrawNumber_16_32bit+0xbe>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 8007dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	3358      	adds	r3, #88	; 0x58
 8007dc8:	443b      	add	r3, r7
 8007dca:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8007dce:	f803 2c48 	strb.w	r2, [r3, #-72]
		  TemporaryLenPointer--;
 8007dd2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  for(int i=TemporaryLenPointer;i;i--)
 8007ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dde:	3b01      	subs	r3, #1
 8007de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1ec      	bne.n	8007dc2 <Centred_DrawNumber_16_32bit+0x9e>
	  }


	  if(Comma>0)
 8007de8:	897b      	ldrh	r3, [r7, #10]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d06b      	beq.n	8007ec6 <Centred_DrawNumber_16_32bit+0x1a2>
	  {
		  if(Comma>=Cycle_Pointer)
 8007dee:	897a      	ldrh	r2, [r7, #10]
 8007df0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d338      	bcc.n	8007e6a <Centred_DrawNumber_16_32bit+0x146>
		  {
			  Final_Len = Comma + 2;
 8007df8:	897b      	ldrh	r3, [r7, #10]
 8007dfa:	3302      	adds	r3, #2
 8007dfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			  int8_t temp = Cycle_Pointer;
 8007e00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007e04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  for(int i=(Final_Len-1);i>=0;i--)
 8007e08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	643b      	str	r3, [r7, #64]	; 0x40
 8007e10:	e020      	b.n	8007e54 <Centred_DrawNumber_16_32bit+0x130>
			  {
				  if(temp)
 8007e12:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d013      	beq.n	8007e42 <Centred_DrawNumber_16_32bit+0x11e>
				  {
					  temp--;
 8007e1a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  String[i] = String[temp];
 8007e28:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007e2c:	3358      	adds	r3, #88	; 0x58
 8007e2e:	443b      	add	r3, r7
 8007e30:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8007e34:	f107 021c 	add.w	r2, r7, #28
 8007e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e3a:	4413      	add	r3, r2
 8007e3c:	460a      	mov	r2, r1
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	e005      	b.n	8007e4e <Centred_DrawNumber_16_32bit+0x12a>
				  }
				  else
				  {
					  String[i] = '0';
 8007e42:	f107 021c 	add.w	r2, r7, #28
 8007e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e48:	4413      	add	r3, r2
 8007e4a:	2230      	movs	r2, #48	; 0x30
 8007e4c:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8007e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e50:	3b01      	subs	r3, #1
 8007e52:	643b      	str	r3, [r7, #64]	; 0x40
 8007e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	dadb      	bge.n	8007e12 <Centred_DrawNumber_16_32bit+0xee>
				  }
			  }
			  String[1] = ',';
 8007e5a:	232c      	movs	r3, #44	; 0x2c
 8007e5c:	777b      	strb	r3, [r7, #29]
			  Cycle_Pointer--;
 8007e5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007e62:	3b01      	subs	r3, #1
 8007e64:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007e68:	e031      	b.n	8007ece <Centred_DrawNumber_16_32bit+0x1aa>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 8007e6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007e6e:	3301      	adds	r3, #1
 8007e70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			  for(int i=(Final_Len-1);i>=0;i--)
 8007e74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e7c:	e015      	b.n	8007eaa <Centred_DrawNumber_16_32bit+0x186>
			  {
				  if( i > (Final_Len - Comma - 1))
 8007e7e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007e82:	897b      	ldrh	r3, [r7, #10]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	db0b      	blt.n	8007ea4 <Centred_DrawNumber_16_32bit+0x180>
				  {
					  String[i] = String[i-1];
 8007e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	3358      	adds	r3, #88	; 0x58
 8007e92:	443b      	add	r3, r7
 8007e94:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8007e98:	f107 021c 	add.w	r2, r7, #28
 8007e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9e:	4413      	add	r3, r2
 8007ea0:	460a      	mov	r2, r1
 8007ea2:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8007ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dae6      	bge.n	8007e7e <Centred_DrawNumber_16_32bit+0x15a>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 8007eb0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007eb4:	897b      	ldrh	r3, [r7, #10]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	3358      	adds	r3, #88	; 0x58
 8007ebc:	443b      	add	r3, r7
 8007ebe:	222c      	movs	r2, #44	; 0x2c
 8007ec0:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8007ec4:	e003      	b.n	8007ece <Centred_DrawNumber_16_32bit+0x1aa>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 8007ec6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007eca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e


	  if(BelowZero)
 8007ece:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d01c      	beq.n	8007f10 <Centred_DrawNumber_16_32bit+0x1ec>
	  {
		  for(int i=Final_Len;i>=0;i--)
 8007ed6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8007edc:	e00e      	b.n	8007efc <Centred_DrawNumber_16_32bit+0x1d8>
		  {
			  String[i] = String[i - 1];
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	3358      	adds	r3, #88	; 0x58
 8007ee4:	443b      	add	r3, r7
 8007ee6:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8007eea:	f107 021c 	add.w	r2, r7, #28
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef0:	4413      	add	r3, r2
 8007ef2:	460a      	mov	r2, r1
 8007ef4:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	daed      	bge.n	8007ede <Centred_DrawNumber_16_32bit+0x1ba>
		  }
		  String[0] = '-';
 8007f02:	232d      	movs	r3, #45	; 0x2d
 8007f04:	773b      	strb	r3, [r7, #28]
		  Final_Len++;
 8007f06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  }

		uint8_t StandartLen = Numbers;
 8007f10:	893b      	ldrh	r3, [r7, #8]
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		uint8_t IschLen = Final_Len - 1;
 8007f16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(Final_Len < StandartLen)
 8007f22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d236      	bcs.n	8007f9e <Centred_DrawNumber_16_32bit+0x27a>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 8007f30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f34:	3b01      	subs	r3, #1
 8007f36:	633b      	str	r3, [r7, #48]	; 0x30
 8007f38:	e02e      	b.n	8007f98 <Centred_DrawNumber_16_32bit+0x274>
			{
				if(IschLen)
 8007f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d011      	beq.n	8007f66 <Centred_DrawNumber_16_32bit+0x242>
				{
					String[i] = String[IschLen];
 8007f42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f46:	3358      	adds	r3, #88	; 0x58
 8007f48:	443b      	add	r3, r7
 8007f4a:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8007f4e:	f107 021c 	add.w	r2, r7, #28
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	4413      	add	r3, r2
 8007f56:	460a      	mov	r2, r1
 8007f58:	701a      	strb	r2, [r3, #0]
					IschLen--;
 8007f5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f64:	e015      	b.n	8007f92 <Centred_DrawNumber_16_32bit+0x26e>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 8007f66:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007f6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d107      	bne.n	8007f86 <Centred_DrawNumber_16_32bit+0x262>
					{
						String[i] = String[0];
 8007f76:	7f39      	ldrb	r1, [r7, #28]
 8007f78:	f107 021c 	add.w	r2, r7, #28
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	4413      	add	r3, r2
 8007f80:	460a      	mov	r2, r1
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	e005      	b.n	8007f92 <Centred_DrawNumber_16_32bit+0x26e>
					}
					else
					{
						String[i] = ' ';
 8007f86:	f107 021c 	add.w	r2, r7, #28
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	4413      	add	r3, r2
 8007f8e:	2220      	movs	r2, #32
 8007f90:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	3b01      	subs	r3, #1
 8007f96:	633b      	str	r3, [r7, #48]	; 0x30
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dacd      	bge.n	8007f3a <Centred_DrawNumber_16_32bit+0x216>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 8007f9e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007fa2:	085b      	lsrs	r3, r3, #1
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007faa:	4413      	add	r3, r2
 8007fac:	853b      	strh	r3, [r7, #40]	; 0x28
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 8007fae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8007fb2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007fb6:	fb02 f303 	mul.w	r3, r2, r3
 8007fba:	0fda      	lsrs	r2, r3, #31
 8007fbc:	4413      	add	r3, r2
 8007fbe:	105b      	asrs	r3, r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007fc6:	4413      	add	r3, r2
 8007fc8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 8007fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	da01      	bge.n	8007fd6 <Centred_DrawNumber_16_32bit+0x2b2>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	80fb      	strh	r3, [r7, #6]

		for(int i=0;i<Numbers;i++)
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fda:	e0a4      	b.n	8008126 <Centred_DrawNumber_16_32bit+0x402>
		{
			if((Pointer_Razr == RazrPointerArray[i]) & (Font_Color != BackgroundColor))
 8007fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fe0:	f107 0110 	add.w	r1, r7, #16
 8007fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe6:	440a      	add	r2, r1
 8007fe8:	7812      	ldrb	r2, [r2, #0]
 8007fea:	4293      	cmp	r3, r2
 8007fec:	bf0c      	ite	eq
 8007fee:	2301      	moveq	r3, #1
 8007ff0:	2300      	movne	r3, #0
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	4b61      	ldr	r3, [pc, #388]	; (800817c <Centred_DrawNumber_16_32bit+0x458>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ffa:	4299      	cmp	r1, r3
 8007ffc:	bf14      	ite	ne
 8007ffe:	2301      	movne	r3, #1
 8008000:	2300      	moveq	r3, #0
 8008002:	b2db      	uxtb	r3, r3
 8008004:	4013      	ands	r3, r2
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	d047      	beq.n	800809c <Centred_DrawNumber_16_32bit+0x378>
			{
				if(Pointer_Razr)
 800800c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8085 	beq.w	8008120 <Centred_DrawNumber_16_32bit+0x3fc>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8008016:	4b5a      	ldr	r3, [pc, #360]	; (8008180 <Centred_DrawNumber_16_32bit+0x45c>)
 8008018:	6818      	ldr	r0, [r3, #0]
 800801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801c:	3301      	adds	r3, #1
 800801e:	b29b      	uxth	r3, r3
 8008020:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8008024:	fb12 f303 	smulbb	r3, r2, r3
 8008028:	b29b      	uxth	r3, r3
 800802a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	b299      	uxth	r1, r3
 8008030:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008032:	3301      	adds	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 800803a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800803e:	9303      	str	r3, [sp, #12]
 8008040:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008044:	9302      	str	r3, [sp, #8]
 8008046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	2304      	movs	r3, #4
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	4623      	mov	r3, r4
 8008050:	f000 fc72 	bl	8008938 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 8008054:	4b4a      	ldr	r3, [pc, #296]	; (8008180 <Centred_DrawNumber_16_32bit+0x45c>)
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	3301      	adds	r3, #1
 800805c:	b29b      	uxth	r3, r3
 800805e:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8008062:	fb12 f303 	smulbb	r3, r2, r3
 8008066:	b29b      	uxth	r3, r3
 8008068:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	b299      	uxth	r1, r3
 800806e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008070:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	b29b      	uxth	r3, r3
 8008078:	3b04      	subs	r3, #4
 800807a:	b29a      	uxth	r2, r3
 800807c:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 8008080:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008084:	9303      	str	r3, [sp, #12]
 8008086:	f44f 7348 	mov.w	r3, #800	; 0x320
 800808a:	9302      	str	r3, [sp, #8]
 800808c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	2304      	movs	r3, #4
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	4623      	mov	r3, r4
 8008096:	f000 fc4f 	bl	8008938 <Draw_Rectangle>
 800809a:	e041      	b.n	8008120 <Centred_DrawNumber_16_32bit+0x3fc>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 800809c:	4b37      	ldr	r3, [pc, #220]	; (800817c <Centred_DrawNumber_16_32bit+0x458>)
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a2:	3301      	adds	r3, #1
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80080aa:	fb12 f303 	smulbb	r3, r2, r3
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	b299      	uxth	r1, r3
 80080b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080b8:	3301      	adds	r3, #1
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 80080c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80080c4:	9303      	str	r3, [sp, #12]
 80080c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80080ca:	9302      	str	r3, [sp, #8]
 80080cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	2304      	movs	r3, #4
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	4623      	mov	r3, r4
 80080d6:	f000 fc2f 	bl	8008938 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 80080da:	4b28      	ldr	r3, [pc, #160]	; (800817c <Centred_DrawNumber_16_32bit+0x458>)
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e0:	3301      	adds	r3, #1
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80080e8:	fb12 f303 	smulbb	r3, r2, r3
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	b299      	uxth	r1, r3
 80080f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80080f6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3b04      	subs	r3, #4
 8008100:	b29a      	uxth	r2, r3
 8008102:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 8008106:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800810a:	9303      	str	r3, [sp, #12]
 800810c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008110:	9302      	str	r3, [sp, #8]
 8008112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	2304      	movs	r3, #4
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	4623      	mov	r3, r4
 800811c:	f000 fc0c 	bl	8008938 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	3301      	adds	r3, #1
 8008124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008126:	893b      	ldrh	r3, [r7, #8]
 8008128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800812a:	429a      	cmp	r2, r3
 800812c:	f6ff af56 	blt.w	8007fdc <Centred_DrawNumber_16_32bit+0x2b8>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8008130:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008134:	b299      	uxth	r1, r3
 8008136:	f8b7 406c 	ldrh.w	r4, [r7, #108]	; 0x6c
 800813a:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 800813e:	f107 001c 	add.w	r0, r7, #28
 8008142:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8008146:	9307      	str	r3, [sp, #28]
 8008148:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800814c:	9306      	str	r3, [sp, #24]
 800814e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008152:	9305      	str	r3, [sp, #20]
 8008154:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800815c:	9303      	str	r3, [sp, #12]
 800815e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008160:	9302      	str	r3, [sp, #8]
 8008162:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	4623      	mov	r3, r4
 8008170:	f7ff fa30 	bl	80075d4 <Centred_DrawString_16>
}
 8008174:	bf00      	nop
 8008176:	375c      	adds	r7, #92	; 0x5c
 8008178:	46bd      	mov	sp, r7
 800817a:	bd90      	pop	{r4, r7, pc}
 800817c:	20000008 	.word	0x20000008
 8008180:	20000014 	.word	0x20000014

08008184 <Centred_DrawNumber_16_32bit_controled>:


void Centred_DrawNumber_16_32bit_controled(uint32_t ValPointer, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr, int32_t Max, int32_t Min, uint16_t Coord_X, uint16_t Coord_Y, uint16_t Resolution_X, uint16_t Resolution_Y, uint32_t Video_buffer_pointer, uint32_t Font_Color, uint32_t Symbol_Color, uint32_t Table[], uint16_t width_char, uint16_t height_char)
{
 8008184:	b590      	push	{r4, r7, lr}
 8008186:	b0a3      	sub	sp, #140	; 0x8c
 8008188:	af08      	add	r7, sp, #32
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	4608      	mov	r0, r1
 800818e:	4611      	mov	r1, r2
 8008190:	461a      	mov	r2, r3
 8008192:	4603      	mov	r3, r0
 8008194:	817b      	strh	r3, [r7, #10]
 8008196:	460b      	mov	r3, r1
 8008198:	813b      	strh	r3, [r7, #8]
 800819a:	4613      	mov	r3, r2
 800819c:	80fb      	strh	r3, [r7, #6]


	  int32_t Register;
	  memcpy(&Register, ValPointer, 4);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if((Pointer_Razr > 0) & (Font_Color != BackgroundColor))
 80081a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	bfcc      	ite	gt
 80081ac:	2301      	movgt	r3, #1
 80081ae:	2300      	movle	r3, #0
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	4bb0      	ldr	r3, [pc, #704]	; (8008474 <Centred_DrawNumber_16_32bit_controled+0x2f0>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80081ba:	4299      	cmp	r1, r3
 80081bc:	bf14      	ite	ne
 80081be:	2301      	movne	r3, #1
 80081c0:	2300      	moveq	r3, #0
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	4013      	ands	r3, r2
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d02c      	beq.n	8008226 <Centred_DrawNumber_16_32bit_controled+0xa2>
	  {
		  Control_DB.VauePointer    = ValPointer;
 80081cc:	4aaa      	ldr	r2, [pc, #680]	; (8008478 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6093      	str	r3, [r2, #8]
		  Control_DB.RazrPointerMAX = Numbers;
 80081d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80081d6:	4ba8      	ldr	r3, [pc, #672]	; (8008478 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80081d8:	80da      	strh	r2, [r3, #6]
		  Control_DB.ValueMax		= Max;
 80081da:	4aa7      	ldr	r2, [pc, #668]	; (8008478 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80081dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081de:	60d3      	str	r3, [r2, #12]
		  Control_DB.ValueMin		= Min;
 80081e0:	4aa5      	ldr	r2, [pc, #660]	; (8008478 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80081e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081e4:	6113      	str	r3, [r2, #16]

		  uint8_t BackWriteFlag = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  if(Register > Control_DB.ValueMax)
 80081ec:	4ba2      	ldr	r3, [pc, #648]	; (8008478 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	429a      	cmp	r2, r3
 80081f4:	da05      	bge.n	8008202 <Centred_DrawNumber_16_32bit_controled+0x7e>
		  {
			  BackWriteFlag = 1;
 80081f6:	2301      	movs	r3, #1
 80081f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  Register = Control_DB.ValueMax;
 80081fc:	4b9e      	ldr	r3, [pc, #632]	; (8008478 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
		  if(Register < Control_DB.ValueMin)
 8008202:	4b9d      	ldr	r3, [pc, #628]	; (8008478 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8008204:	691a      	ldr	r2, [r3, #16]
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	429a      	cmp	r2, r3
 800820a:	dd05      	ble.n	8008218 <Centred_DrawNumber_16_32bit_controled+0x94>
		  {
			  BackWriteFlag = 1;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  Register = Control_DB.ValueMin;
 8008212:	4b99      	ldr	r3, [pc, #612]	; (8008478 <Centred_DrawNumber_16_32bit_controled+0x2f4>)
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
		  if(BackWriteFlag)
 8008218:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <Centred_DrawNumber_16_32bit_controled+0xa2>
		  {
			  memcpy(ValPointer, &Register, 4);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008224:	601a      	str	r2, [r3, #0]


	  char 		String[10];

	  uint8_t 	RazrPointerArray[10];
	  for(int i=0;i<10;i++)	{RazrPointerArray[i] = 0;}
 8008226:	2300      	movs	r3, #0
 8008228:	663b      	str	r3, [r7, #96]	; 0x60
 800822a:	e008      	b.n	800823e <Centred_DrawNumber_16_32bit_controled+0xba>
 800822c:	f107 0214 	add.w	r2, r7, #20
 8008230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008232:	4413      	add	r3, r2
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800823a:	3301      	adds	r3, #1
 800823c:	663b      	str	r3, [r7, #96]	; 0x60
 800823e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008240:	2b09      	cmp	r3, #9
 8008242:	ddf3      	ble.n	800822c <Centred_DrawNumber_16_32bit_controled+0xa8>

	  uint8_t	TemporaryLenPointer;

	  uint16_t Cycle_Pointer;
	  uint16_t Final_Len = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  uint16_t Number_Len;
	  uint8_t BelowZero = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59



	  if(Register < 0)
 8008250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008252:	2b00      	cmp	r3, #0
 8008254:	da05      	bge.n	8008262 <Centred_DrawNumber_16_32bit_controled+0xde>
	  {
		  BelowZero = 1;
 8008256:	2301      	movs	r3, #1
 8008258:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		  Register = 0 - Register;
 800825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825e:	425b      	negs	r3, r3
 8008260:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }

	  if(Comma>5){Comma=5;}
 8008262:	897b      	ldrh	r3, [r7, #10]
 8008264:	2b05      	cmp	r3, #5
 8008266:	d901      	bls.n	800826c <Centred_DrawNumber_16_32bit_controled+0xe8>
 8008268:	2305      	movs	r3, #5
 800826a:	817b      	strh	r3, [r7, #10]
	  if(Comma<0){Comma=0;}

	  itoa(Register, String, 10);
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826e:	f107 0120 	add.w	r1, r7, #32
 8008272:	220a      	movs	r2, #10
 8008274:	4618      	mov	r0, r3
 8008276:	f004 fdea 	bl	800ce4e <itoa>

	  Cycle_Pointer = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 8008280:	e004      	b.n	800828c <Centred_DrawNumber_16_32bit_controled+0x108>
	  {
		  Cycle_Pointer++;
 8008282:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008286:	3301      	adds	r3, #1
 8008288:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  while(String[Cycle_Pointer] > 0) //подсчёт длинны числа
 800828c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008290:	3368      	adds	r3, #104	; 0x68
 8008292:	443b      	add	r3, r7
 8008294:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1f2      	bne.n	8008282 <Centred_DrawNumber_16_32bit_controled+0xfe>
	  }

	  TemporaryLenPointer = Numbers;
 800829c:	893b      	ldrh	r3, [r7, #8]
 800829e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  for(int i=TemporaryLenPointer;i;i--)
 80082a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082a6:	657b      	str	r3, [r7, #84]	; 0x54
 80082a8:	e00f      	b.n	80082ca <Centred_DrawNumber_16_32bit_controled+0x146>
	  {
		  RazrPointerArray[i-1] = TemporaryLenPointer;
 80082aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ac:	3b01      	subs	r3, #1
 80082ae:	3368      	adds	r3, #104	; 0x68
 80082b0:	443b      	add	r3, r7
 80082b2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80082b6:	f803 2c54 	strb.w	r2, [r3, #-84]
		  TemporaryLenPointer--;
 80082ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082be:	3b01      	subs	r3, #1
 80082c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  for(int i=TemporaryLenPointer;i;i--)
 80082c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082c6:	3b01      	subs	r3, #1
 80082c8:	657b      	str	r3, [r7, #84]	; 0x54
 80082ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1ec      	bne.n	80082aa <Centred_DrawNumber_16_32bit_controled+0x126>
	  }


	  if(Comma>0)
 80082d0:	897b      	ldrh	r3, [r7, #10]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d06c      	beq.n	80083b0 <Centred_DrawNumber_16_32bit_controled+0x22c>
	  {
		  if(Comma>=Cycle_Pointer)
 80082d6:	897a      	ldrh	r2, [r7, #10]
 80082d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80082dc:	429a      	cmp	r2, r3
 80082de:	d339      	bcc.n	8008354 <Centred_DrawNumber_16_32bit_controled+0x1d0>
		  {
			  Final_Len = Comma + 2;
 80082e0:	897b      	ldrh	r3, [r7, #10]
 80082e2:	3302      	adds	r3, #2
 80082e4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

			  int8_t temp = Cycle_Pointer;
 80082e8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80082ec:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			  for(int i=(Final_Len-1);i>=0;i--)
 80082f0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80082f4:	3b01      	subs	r3, #1
 80082f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082f8:	e020      	b.n	800833c <Centred_DrawNumber_16_32bit_controled+0x1b8>
			  {
				  if(temp)
 80082fa:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d013      	beq.n	800832a <Centred_DrawNumber_16_32bit_controled+0x1a6>
				  {
					  temp--;
 8008302:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8008306:	b2db      	uxtb	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b2db      	uxtb	r3, r3
 800830c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					  String[i] = String[temp];
 8008310:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8008314:	3368      	adds	r3, #104	; 0x68
 8008316:	443b      	add	r3, r7
 8008318:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 800831c:	f107 0220 	add.w	r2, r7, #32
 8008320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008322:	4413      	add	r3, r2
 8008324:	460a      	mov	r2, r1
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	e005      	b.n	8008336 <Centred_DrawNumber_16_32bit_controled+0x1b2>
				  }
				  else
				  {
					  String[i] = '0';
 800832a:	f107 0220 	add.w	r2, r7, #32
 800832e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008330:	4413      	add	r3, r2
 8008332:	2230      	movs	r2, #48	; 0x30
 8008334:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 8008336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008338:	3b01      	subs	r3, #1
 800833a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800833c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833e:	2b00      	cmp	r3, #0
 8008340:	dadb      	bge.n	80082fa <Centred_DrawNumber_16_32bit_controled+0x176>
				  }
			  }
			  String[1] = ',';
 8008342:	232c      	movs	r3, #44	; 0x2c
 8008344:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			  Cycle_Pointer--;
 8008348:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800834c:	3b01      	subs	r3, #1
 800834e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008352:	e031      	b.n	80083b8 <Centred_DrawNumber_16_32bit_controled+0x234>
		  }
		  else
		  {
			  Final_Len = Cycle_Pointer + 1;
 8008354:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008358:	3301      	adds	r3, #1
 800835a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

			  for(int i=(Final_Len-1);i>=0;i--)
 800835e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008362:	3b01      	subs	r3, #1
 8008364:	64bb      	str	r3, [r7, #72]	; 0x48
 8008366:	e015      	b.n	8008394 <Centred_DrawNumber_16_32bit_controled+0x210>
			  {
				  if( i > (Final_Len - Comma - 1))
 8008368:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 800836c:	897b      	ldrh	r3, [r7, #10]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008372:	429a      	cmp	r2, r3
 8008374:	db0b      	blt.n	800838e <Centred_DrawNumber_16_32bit_controled+0x20a>
				  {
					  String[i] = String[i-1];
 8008376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008378:	3b01      	subs	r3, #1
 800837a:	3368      	adds	r3, #104	; 0x68
 800837c:	443b      	add	r3, r7
 800837e:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 8008382:	f107 0220 	add.w	r2, r7, #32
 8008386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008388:	4413      	add	r3, r2
 800838a:	460a      	mov	r2, r1
 800838c:	701a      	strb	r2, [r3, #0]
			  for(int i=(Final_Len-1);i>=0;i--)
 800838e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008390:	3b01      	subs	r3, #1
 8008392:	64bb      	str	r3, [r7, #72]	; 0x48
 8008394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008396:	2b00      	cmp	r3, #0
 8008398:	dae6      	bge.n	8008368 <Centred_DrawNumber_16_32bit_controled+0x1e4>
				  }
			  }
			  String[Final_Len - Comma - 1] = ',';
 800839a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 800839e:	897b      	ldrh	r3, [r7, #10]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	3b01      	subs	r3, #1
 80083a4:	3368      	adds	r3, #104	; 0x68
 80083a6:	443b      	add	r3, r7
 80083a8:	222c      	movs	r2, #44	; 0x2c
 80083aa:	f803 2c48 	strb.w	r2, [r3, #-72]
 80083ae:	e003      	b.n	80083b8 <Centred_DrawNumber_16_32bit_controled+0x234>
		  }
	  }
	  else{Final_Len = Cycle_Pointer;}
 80083b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80083b4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a


	  if(BelowZero)
 80083b8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d01d      	beq.n	80083fc <Centred_DrawNumber_16_32bit_controled+0x278>
	  {
		  for(int i=Final_Len;i>=0;i--)
 80083c0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80083c4:	647b      	str	r3, [r7, #68]	; 0x44
 80083c6:	e00e      	b.n	80083e6 <Centred_DrawNumber_16_32bit_controled+0x262>
		  {
			  String[i] = String[i - 1];
 80083c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ca:	3b01      	subs	r3, #1
 80083cc:	3368      	adds	r3, #104	; 0x68
 80083ce:	443b      	add	r3, r7
 80083d0:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 80083d4:	f107 0220 	add.w	r2, r7, #32
 80083d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083da:	4413      	add	r3, r2
 80083dc:	460a      	mov	r2, r1
 80083de:	701a      	strb	r2, [r3, #0]
		  for(int i=Final_Len;i>=0;i--)
 80083e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e2:	3b01      	subs	r3, #1
 80083e4:	647b      	str	r3, [r7, #68]	; 0x44
 80083e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	daed      	bge.n	80083c8 <Centred_DrawNumber_16_32bit_controled+0x244>
		  }
		  String[0] = '-';
 80083ec:	232d      	movs	r3, #45	; 0x2d
 80083ee:	f887 3020 	strb.w	r3, [r7, #32]
		  Final_Len++;
 80083f2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80083f6:	3301      	adds	r3, #1
 80083f8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  }

		uint8_t StandartLen = Numbers;
 80083fc:	893b      	ldrh	r3, [r7, #8]
 80083fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint8_t IschLen = Final_Len - 1;
 8008402:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008406:	b2db      	uxtb	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if(Final_Len < StandartLen)
 800840e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008412:	b29b      	uxth	r3, r3
 8008414:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8008418:	429a      	cmp	r2, r3
 800841a:	d23b      	bcs.n	8008494 <Centred_DrawNumber_16_32bit_controled+0x310>
		{
			for(int i=(StandartLen - 1); i>=0;i--)
 800841c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008420:	3b01      	subs	r3, #1
 8008422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008424:	e033      	b.n	800848e <Centred_DrawNumber_16_32bit_controled+0x30a>
			{
				if(IschLen)
 8008426:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800842a:	2b00      	cmp	r3, #0
 800842c:	d011      	beq.n	8008452 <Centred_DrawNumber_16_32bit_controled+0x2ce>
				{
					String[i] = String[IschLen];
 800842e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008432:	3368      	adds	r3, #104	; 0x68
 8008434:	443b      	add	r3, r7
 8008436:	f813 1c48 	ldrb.w	r1, [r3, #-72]
 800843a:	f107 0220 	add.w	r2, r7, #32
 800843e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008440:	4413      	add	r3, r2
 8008442:	460a      	mov	r2, r1
 8008444:	701a      	strb	r2, [r3, #0]
					IschLen--;
 8008446:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800844a:	3b01      	subs	r3, #1
 800844c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008450:	e01a      	b.n	8008488 <Centred_DrawNumber_16_32bit_controled+0x304>
				}
				else
				{
					if(i==(StandartLen - Final_Len))
 8008452:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008456:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800845e:	429a      	cmp	r2, r3
 8008460:	d10c      	bne.n	800847c <Centred_DrawNumber_16_32bit_controled+0x2f8>
					{
						String[i] = String[0];
 8008462:	f897 1020 	ldrb.w	r1, [r7, #32]
 8008466:	f107 0220 	add.w	r2, r7, #32
 800846a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846c:	4413      	add	r3, r2
 800846e:	460a      	mov	r2, r1
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	e009      	b.n	8008488 <Centred_DrawNumber_16_32bit_controled+0x304>
 8008474:	20000008 	.word	0x20000008
 8008478:	20000b70 	.word	0x20000b70
					}
					else
					{
						String[i] = ' ';
 800847c:	f107 0220 	add.w	r2, r7, #32
 8008480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008482:	4413      	add	r3, r2
 8008484:	2220      	movs	r2, #32
 8008486:	701a      	strb	r2, [r3, #0]
			for(int i=(StandartLen - 1); i>=0;i--)
 8008488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848a:	3b01      	subs	r3, #1
 800848c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800848e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008490:	2b00      	cmp	r3, #0
 8008492:	dac8      	bge.n	8008426 <Centred_DrawNumber_16_32bit_controled+0x2a2>
		}

		uint16_t StartX;
		uint16_t StartY;

		StartY = Coord_Y + (height_char / 2);
 8008494:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8008498:	085b      	lsrs	r3, r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80084a0:	4413      	add	r3, r2
 80084a2:	86bb      	strh	r3, [r7, #52]	; 0x34
		StartX = Coord_X + ((width_char * StandartLen) / 2);
 80084a4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80084a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80084ac:	fb02 f303 	mul.w	r3, r2, r3
 80084b0:	0fda      	lsrs	r2, r3, #31
 80084b2:	4413      	add	r3, r2
 80084b4:	105b      	asrs	r3, r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80084bc:	4413      	add	r3, r2
 80084be:	867b      	strh	r3, [r7, #50]	; 0x32

		if(Pointer_Razr<0){Pointer_Razr = 0;}
 80084c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	da01      	bge.n	80084cc <Centred_DrawNumber_16_32bit_controled+0x348>
 80084c8:	2300      	movs	r3, #0
 80084ca:	80fb      	strh	r3, [r7, #6]

		for(int i=0;i<Numbers;i++)
 80084cc:	2300      	movs	r3, #0
 80084ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80084d0:	e0a9      	b.n	8008626 <Centred_DrawNumber_16_32bit_controled+0x4a2>
		{
			if((Pointer_Razr == RazrPointerArray[i]) & (Font_Color != BackgroundColor))
 80084d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084d6:	f107 0114 	add.w	r1, r7, #20
 80084da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084dc:	440a      	add	r2, r1
 80084de:	7812      	ldrb	r2, [r2, #0]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	bf0c      	ite	eq
 80084e4:	2301      	moveq	r3, #1
 80084e6:	2300      	movne	r3, #0
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	4b65      	ldr	r3, [pc, #404]	; (8008680 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80084f2:	4299      	cmp	r1, r3
 80084f4:	bf14      	ite	ne
 80084f6:	2301      	movne	r3, #1
 80084f8:	2300      	moveq	r3, #0
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	4013      	ands	r3, r2
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d049      	beq.n	8008598 <Centred_DrawNumber_16_32bit_controled+0x414>
			{
				if(Pointer_Razr)
 8008504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 8089 	beq.w	8008620 <Centred_DrawNumber_16_32bit_controled+0x49c>
				{
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 800850e:	4b5d      	ldr	r3, [pc, #372]	; (8008684 <Centred_DrawNumber_16_32bit_controled+0x500>)
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	3301      	adds	r3, #1
 8008516:	b29b      	uxth	r3, r3
 8008518:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800851c:	fb12 f303 	smulbb	r3, r2, r3
 8008520:	b29b      	uxth	r3, r3
 8008522:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	b299      	uxth	r1, r3
 8008528:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800852a:	3301      	adds	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 8008532:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008536:	9303      	str	r3, [sp, #12]
 8008538:	f44f 7348 	mov.w	r3, #800	; 0x320
 800853c:	9302      	str	r3, [sp, #8]
 800853e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	2304      	movs	r3, #4
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	4623      	mov	r3, r4
 800854a:	f000 f9f5 	bl	8008938 <Draw_Rectangle>
					Draw_Rectangle( RasrPointerColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 800854e:	4b4d      	ldr	r3, [pc, #308]	; (8008684 <Centred_DrawNumber_16_32bit_controled+0x500>)
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	3301      	adds	r3, #1
 8008556:	b29b      	uxth	r3, r3
 8008558:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800855c:	fb12 f303 	smulbb	r3, r2, r3
 8008560:	b29b      	uxth	r3, r3
 8008562:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	b299      	uxth	r1, r3
 8008568:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800856a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	b29b      	uxth	r3, r3
 8008572:	3b04      	subs	r3, #4
 8008574:	b29a      	uxth	r2, r3
 8008576:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 800857a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800857e:	9303      	str	r3, [sp, #12]
 8008580:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008584:	9302      	str	r3, [sp, #8]
 8008586:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	2304      	movs	r3, #4
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	4623      	mov	r3, r4
 8008592:	f000 f9d1 	bl	8008938 <Draw_Rectangle>
 8008596:	e043      	b.n	8008620 <Centred_DrawNumber_16_32bit_controled+0x49c>
				}
			}
			else
			{
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), StartY + 1				 , width_char, 4, Video_buffer_pointer, 800, 480);
 8008598:	4b39      	ldr	r3, [pc, #228]	; (8008680 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	3301      	adds	r3, #1
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80085a6:	fb12 f303 	smulbb	r3, r2, r3
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	b299      	uxth	r1, r3
 80085b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80085b4:	3301      	adds	r3, #1
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 80085bc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80085c0:	9303      	str	r3, [sp, #12]
 80085c2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80085c6:	9302      	str	r3, [sp, #8]
 80085c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	2304      	movs	r3, #4
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	4623      	mov	r3, r4
 80085d4:	f000 f9b0 	bl	8008938 <Draw_Rectangle>
				Draw_Rectangle( BackgroundColor, (StartX - ((i+1) * width_char)), (StartY - height_char - 4), width_char, 4, Video_buffer_pointer, 800, 480);
 80085d8:	4b29      	ldr	r3, [pc, #164]	; (8008680 <Centred_DrawNumber_16_32bit_controled+0x4fc>)
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	3301      	adds	r3, #1
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80085e6:	fb12 f303 	smulbb	r3, r2, r3
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	b299      	uxth	r1, r3
 80085f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80085f4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	3b04      	subs	r3, #4
 80085fe:	b29a      	uxth	r2, r3
 8008600:	f8b7 40a0 	ldrh.w	r4, [r7, #160]	; 0xa0
 8008604:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008608:	9303      	str	r3, [sp, #12]
 800860a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800860e:	9302      	str	r3, [sp, #8]
 8008610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	2304      	movs	r3, #4
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	4623      	mov	r3, r4
 800861c:	f000 f98c 	bl	8008938 <Draw_Rectangle>
		for(int i=0;i<Numbers;i++)
 8008620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008622:	3301      	adds	r3, #1
 8008624:	63bb      	str	r3, [r7, #56]	; 0x38
 8008626:	893b      	ldrh	r3, [r7, #8]
 8008628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800862a:	429a      	cmp	r2, r3
 800862c:	f6ff af51 	blt.w	80084d2 <Centred_DrawNumber_16_32bit_controled+0x34e>
			}
		}

		Centred_DrawString_16(String, StandartLen, Coord_X, Coord_Y, Resolution_X, Resolution_Y, Video_buffer_pointer, Font_Color, Symbol_Color, Table, width_char, height_char);
 8008630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008634:	b299      	uxth	r1, r3
 8008636:	f8b7 4084 	ldrh.w	r4, [r7, #132]	; 0x84
 800863a:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800863e:	f107 0020 	add.w	r0, r7, #32
 8008642:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8008646:	9307      	str	r3, [sp, #28]
 8008648:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800864c:	9306      	str	r3, [sp, #24]
 800864e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008652:	9305      	str	r3, [sp, #20]
 8008654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008658:	9304      	str	r3, [sp, #16]
 800865a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800865e:	9303      	str	r3, [sp, #12]
 8008660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008664:	9302      	str	r3, [sp, #8]
 8008666:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800866a:	9301      	str	r3, [sp, #4]
 800866c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	4623      	mov	r3, r4
 8008674:	f7fe ffae 	bl	80075d4 <Centred_DrawString_16>
}
 8008678:	bf00      	nop
 800867a:	376c      	adds	r7, #108	; 0x6c
 800867c:	46bd      	mov	sp, r7
 800867e:	bd90      	pop	{r4, r7, pc}
 8008680:	20000008 	.word	0x20000008
 8008684:	20000014 	.word	0x20000014

08008688 <Short_Centred_DrawNumber_16>:


void Short_Centred_DrawNumber_16(int16_t Register, uint16_t Comma, uint16_t Numbers, int16_t Pointer_Razr,
		uint16_t Coord_X, uint16_t Coord_Y,  uint32_t PageNumber)
{
 8008688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800868a:	b08d      	sub	sp, #52	; 0x34
 800868c:	af0a      	add	r7, sp, #40	; 0x28
 800868e:	4604      	mov	r4, r0
 8008690:	4608      	mov	r0, r1
 8008692:	4611      	mov	r1, r2
 8008694:	461a      	mov	r2, r3
 8008696:	4623      	mov	r3, r4
 8008698:	80fb      	strh	r3, [r7, #6]
 800869a:	4603      	mov	r3, r0
 800869c:	80bb      	strh	r3, [r7, #4]
 800869e:	460b      	mov	r3, r1
 80086a0:	807b      	strh	r3, [r7, #2]
 80086a2:	4613      	mov	r3, r2
 80086a4:	803b      	strh	r3, [r7, #0]
	Centred_DrawNumber_16(Register, Comma, Numbers, Pointer_Razr, Coord_X, Coord_Y, 800, 480, PageNumber, BackgroundColor, BasicSymbolColor, Arial_11x18_Table, 11, 18);
 80086a6:	4b13      	ldr	r3, [pc, #76]	; (80086f4 <Short_Centred_DrawNumber_16+0x6c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a13      	ldr	r2, [pc, #76]	; (80086f8 <Short_Centred_DrawNumber_16+0x70>)
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	f9b7 5000 	ldrsh.w	r5, [r7]
 80086b2:	887c      	ldrh	r4, [r7, #2]
 80086b4:	88b9      	ldrh	r1, [r7, #4]
 80086b6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80086ba:	2612      	movs	r6, #18
 80086bc:	9609      	str	r6, [sp, #36]	; 0x24
 80086be:	260b      	movs	r6, #11
 80086c0:	9608      	str	r6, [sp, #32]
 80086c2:	4e0e      	ldr	r6, [pc, #56]	; (80086fc <Short_Centred_DrawNumber_16+0x74>)
 80086c4:	9607      	str	r6, [sp, #28]
 80086c6:	9206      	str	r2, [sp, #24]
 80086c8:	9305      	str	r3, [sp, #20]
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80086d2:	9303      	str	r3, [sp, #12]
 80086d4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80086d8:	9302      	str	r3, [sp, #8]
 80086da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	8c3b      	ldrh	r3, [r7, #32]
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	462b      	mov	r3, r5
 80086e4:	4622      	mov	r2, r4
 80086e6:	f7ff f8f9 	bl	80078dc <Centred_DrawNumber_16>
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20000008 	.word	0x20000008
 80086f8:	200009f4 	.word	0x200009f4
 80086fc:	080117b0 	.word	0x080117b0

08008700 <NumberChange>:




void NumberChange(uint32_t pointer, uint8_t razr, uint8_t len, uint8_t Up, uint8_t Down)
{
 8008700:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008704:	b08c      	sub	sp, #48	; 0x30
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	4608      	mov	r0, r1
 800870c:	4611      	mov	r1, r2
 800870e:	461a      	mov	r2, r3
 8008710:	4603      	mov	r3, r0
 8008712:	70fb      	strb	r3, [r7, #3]
 8008714:	460b      	mov	r3, r1
 8008716:	70bb      	strb	r3, [r7, #2]
 8008718:	4613      	mov	r3, r2
 800871a:	707b      	strb	r3, [r7, #1]
	struct {int32_t a;} *Number = pointer;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t temp2;
	int16_t Tpoint = razr - 1;
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29b      	uxth	r3, r3
 8008728:	847b      	strh	r3, [r7, #34]	; 0x22

	int16_t Symbols[10];

	for(int i= (len-1);i>=0;i--)
 800872a:	78bb      	ldrb	r3, [r7, #2]
 800872c:	3b01      	subs	r3, #1
 800872e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008730:	e03d      	b.n	80087ae <NumberChange+0xae>
	{
		temp2 = pow(10,i);
 8008732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008734:	f7f7 feae 	bl	8000494 <__aeabi_i2d>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	ec43 2b11 	vmov	d1, r2, r3
 8008740:	ed9f 0b65 	vldr	d0, [pc, #404]	; 80088d8 <NumberChange+0x1d8>
 8008744:	f004 fc08 	bl	800cf58 <pow>
 8008748:	ec53 2b10 	vmov	r2, r3, d0
 800874c:	4610      	mov	r0, r2
 800874e:	4619      	mov	r1, r3
 8008750:	f7f8 f9ba 	bl	8000ac8 <__aeabi_d2iz>
 8008754:	4603      	mov	r3, r0
 8008756:	61fb      	str	r3, [r7, #28]
		if(Number->a >= temp2)
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	69fa      	ldr	r2, [r7, #28]
 800875e:	429a      	cmp	r2, r3
 8008760:	dc1b      	bgt.n	800879a <NumberChange+0x9a>
		{
			Symbols[i] = Number->a / temp2;
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	fb92 f3f3 	sdiv	r3, r2, r3
 800876c:	b21a      	sxth	r2, r3
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	3330      	adds	r3, #48	; 0x30
 8008774:	443b      	add	r3, r7
 8008776:	f823 2c28 	strh.w	r2, [r3, #-40]
			Number->a = Number->a - (temp2 * Symbols[i]);
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	3330      	adds	r3, #48	; 0x30
 8008784:	443b      	add	r3, r7
 8008786:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 800878a:	4619      	mov	r1, r3
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	fb01 f303 	mul.w	r3, r1, r3
 8008792:	1ad2      	subs	r2, r2, r3
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	e006      	b.n	80087a8 <NumberChange+0xa8>
		}
		else
		{
			Symbols[i] = 0;
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	3330      	adds	r3, #48	; 0x30
 80087a0:	443b      	add	r3, r7
 80087a2:	2200      	movs	r2, #0
 80087a4:	f823 2c28 	strh.w	r2, [r3, #-40]
	for(int i= (len-1);i>=0;i--)
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	3b01      	subs	r3, #1
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dabe      	bge.n	8008732 <NumberChange+0x32>
		}
	}	// Разделение числа на разряды



	if(Up)
 80087b4:	787b      	ldrb	r3, [r7, #1]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d021      	beq.n	80087fe <NumberChange+0xfe>
	{
		Symbols[Tpoint]++;
 80087ba:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80087be:	0053      	lsls	r3, r2, #1
 80087c0:	3330      	adds	r3, #48	; 0x30
 80087c2:	443b      	add	r3, r7
 80087c4:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	3301      	adds	r3, #1
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	b219      	sxth	r1, r3
 80087d0:	0053      	lsls	r3, r2, #1
 80087d2:	3330      	adds	r3, #48	; 0x30
 80087d4:	443b      	add	r3, r7
 80087d6:	460a      	mov	r2, r1
 80087d8:	f823 2c28 	strh.w	r2, [r3, #-40]
		if(Symbols[Tpoint] > 9){Symbols[Tpoint] = 0;}
 80087dc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	3330      	adds	r3, #48	; 0x30
 80087e4:	443b      	add	r3, r7
 80087e6:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 80087ea:	2b09      	cmp	r3, #9
 80087ec:	dd07      	ble.n	80087fe <NumberChange+0xfe>
 80087ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	3330      	adds	r3, #48	; 0x30
 80087f6:	443b      	add	r3, r7
 80087f8:	2200      	movs	r2, #0
 80087fa:	f823 2c28 	strh.w	r2, [r3, #-40]
	}

	if(Down)
 80087fe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8008802:	2b00      	cmp	r3, #0
 8008804:	d021      	beq.n	800884a <NumberChange+0x14a>
	{
		Symbols[Tpoint]--;
 8008806:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800880a:	0053      	lsls	r3, r2, #1
 800880c:	3330      	adds	r3, #48	; 0x30
 800880e:	443b      	add	r3, r7
 8008810:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8008814:	b29b      	uxth	r3, r3
 8008816:	3b01      	subs	r3, #1
 8008818:	b29b      	uxth	r3, r3
 800881a:	b219      	sxth	r1, r3
 800881c:	0053      	lsls	r3, r2, #1
 800881e:	3330      	adds	r3, #48	; 0x30
 8008820:	443b      	add	r3, r7
 8008822:	460a      	mov	r2, r1
 8008824:	f823 2c28 	strh.w	r2, [r3, #-40]
		if(Symbols[Tpoint] < 0){Symbols[Tpoint] = 9;}
 8008828:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	3330      	adds	r3, #48	; 0x30
 8008830:	443b      	add	r3, r7
 8008832:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8008836:	2b00      	cmp	r3, #0
 8008838:	da07      	bge.n	800884a <NumberChange+0x14a>
 800883a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	3330      	adds	r3, #48	; 0x30
 8008842:	443b      	add	r3, r7
 8008844:	2209      	movs	r2, #9
 8008846:	f823 2c28 	strh.w	r2, [r3, #-40]
	}



	Number->a = 0;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
	for(int i=(len-1);i>=0;i--)
 8008850:	78bb      	ldrb	r3, [r7, #2]
 8008852:	3b01      	subs	r3, #1
 8008854:	62bb      	str	r3, [r7, #40]	; 0x28
 8008856:	e034      	b.n	80088c2 <NumberChange+0x1c2>
	{
		Number->a = Number->a + Symbols[i] * pow(10,i);
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f7f7 fe19 	bl	8000494 <__aeabi_i2d>
 8008862:	4604      	mov	r4, r0
 8008864:	460d      	mov	r5, r1
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	3330      	adds	r3, #48	; 0x30
 800886c:	443b      	add	r3, r7
 800886e:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8008872:	4618      	mov	r0, r3
 8008874:	f7f7 fe0e 	bl	8000494 <__aeabi_i2d>
 8008878:	4680      	mov	r8, r0
 800887a:	4689      	mov	r9, r1
 800887c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800887e:	f7f7 fe09 	bl	8000494 <__aeabi_i2d>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	ec43 2b11 	vmov	d1, r2, r3
 800888a:	ed9f 0b13 	vldr	d0, [pc, #76]	; 80088d8 <NumberChange+0x1d8>
 800888e:	f004 fb63 	bl	800cf58 <pow>
 8008892:	ec53 2b10 	vmov	r2, r3, d0
 8008896:	4640      	mov	r0, r8
 8008898:	4649      	mov	r1, r9
 800889a:	f7f7 fe65 	bl	8000568 <__aeabi_dmul>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4620      	mov	r0, r4
 80088a4:	4629      	mov	r1, r5
 80088a6:	f7f7 fca9 	bl	80001fc <__adddf3>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4610      	mov	r0, r2
 80088b0:	4619      	mov	r1, r3
 80088b2:	f7f8 f909 	bl	8000ac8 <__aeabi_d2iz>
 80088b6:	4602      	mov	r2, r0
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	601a      	str	r2, [r3, #0]
	for(int i=(len-1);i>=0;i--)
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	3b01      	subs	r3, #1
 80088c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dac7      	bge.n	8008858 <NumberChange+0x158>
	}	// Сборка числа обратно
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	3730      	adds	r7, #48	; 0x30
 80088ce:	46bd      	mov	sp, r7
 80088d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80088d4:	f3af 8000 	nop.w
 80088d8:	00000000 	.word	0x00000000
 80088dc:	40240000 	.word	0x40240000

080088e0 <Zaliv>:
extern uint32_t VideoBuffer;
extern __IO uint32_t BasicFon;
extern __IO uint8_t  temporary_line_buffer;

void Zaliv(uint32_t Color, uint32_t Bufer_Pointer, uint16_t Resolution_X, uint16_t Resolution_Y)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	4611      	mov	r1, r2
 80088ec:	461a      	mov	r2, r3
 80088ee:	460b      	mov	r3, r1
 80088f0:	80fb      	strh	r3, [r7, #6]
 80088f2:	4613      	mov	r3, r2
 80088f4:	80bb      	strh	r3, [r7, #4]
	struct {uint8_t b,g,r;} *TempBuf=Bufer_Pointer;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	613b      	str	r3, [r7, #16]
	for(int i=0;i<(Resolution_X*Resolution_Y);i++){memcpy(&TempBuf[i].b, &Color, 3);} //Заливка всего экрана
 80088fa:	2300      	movs	r3, #0
 80088fc:	617b      	str	r3, [r7, #20]
 80088fe:	e00f      	b.n	8008920 <Zaliv+0x40>
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	4613      	mov	r3, r2
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4413      	add	r3, r2
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	4413      	add	r3, r2
 800890c:	4618      	mov	r0, r3
 800890e:	f107 030c 	add.w	r3, r7, #12
 8008912:	2203      	movs	r2, #3
 8008914:	4619      	mov	r1, r3
 8008916:	f004 fb11 	bl	800cf3c <memcpy>
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	3301      	adds	r3, #1
 800891e:	617b      	str	r3, [r7, #20]
 8008920:	88fb      	ldrh	r3, [r7, #6]
 8008922:	88ba      	ldrh	r2, [r7, #4]
 8008924:	fb02 f303 	mul.w	r3, r2, r3
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	429a      	cmp	r2, r3
 800892c:	dbe8      	blt.n	8008900 <Zaliv+0x20>
} // Заливка экрана
 800892e:	bf00      	nop
 8008930:	bf00      	nop
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <Draw_Rectangle>:
	struct {uint8_t a,b,g,r;} *TempBuf=Bufer_Pointer;
	for(int i=0;i<(Resolution_X*Resolution_Y);i++){memcpy(&TempBuf[i].b, &Color, 4);} //Заливка всего экрана
} // Заливка экрана

void Draw_Rectangle(uint32_t Color, uint16_t Start_X, uint16_t Start_Y, uint16_t Size_X, uint16_t Size_Y, uint32_t Bufer_Pointer, uint16_t Resolution_X, uint16_t Resolution_Y)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	4608      	mov	r0, r1
 8008942:	4611      	mov	r1, r2
 8008944:	461a      	mov	r2, r3
 8008946:	4603      	mov	r3, r0
 8008948:	817b      	strh	r3, [r7, #10]
 800894a:	460b      	mov	r3, r1
 800894c:	813b      	strh	r3, [r7, #8]
 800894e:	4613      	mov	r3, r2
 8008950:	80fb      	strh	r3, [r7, #6]
	struct {uint8_t b,g,r;} *TempBuf=Bufer_Pointer;
 8008952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008954:	617b      	str	r3, [r7, #20]
	for(int i=Start_Y;i<(Start_Y + Size_Y);i++)
 8008956:	893b      	ldrh	r3, [r7, #8]
 8008958:	61fb      	str	r3, [r7, #28]
 800895a:	e021      	b.n	80089a0 <Draw_Rectangle+0x68>
	{
		for(int j=Start_X;j<(Start_X + Size_X);j++)
 800895c:	897b      	ldrh	r3, [r7, #10]
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	e015      	b.n	800898e <Draw_Rectangle+0x56>
		{
			memcpy(&TempBuf[(i * Resolution_X) + j].b, &Color, 3);
 8008962:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008964:	69fa      	ldr	r2, [r7, #28]
 8008966:	fb03 f202 	mul.w	r2, r3, r2
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	4413      	add	r3, r2
 800896e:	461a      	mov	r2, r3
 8008970:	4613      	mov	r3, r2
 8008972:	005b      	lsls	r3, r3, #1
 8008974:	4413      	add	r3, r2
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4413      	add	r3, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f107 030c 	add.w	r3, r7, #12
 8008980:	2203      	movs	r2, #3
 8008982:	4619      	mov	r1, r3
 8008984:	f004 fada 	bl	800cf3c <memcpy>
		for(int j=Start_X;j<(Start_X + Size_X);j++)
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	3301      	adds	r3, #1
 800898c:	61bb      	str	r3, [r7, #24]
 800898e:	897a      	ldrh	r2, [r7, #10]
 8008990:	88fb      	ldrh	r3, [r7, #6]
 8008992:	4413      	add	r3, r2
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	429a      	cmp	r2, r3
 8008998:	dbe3      	blt.n	8008962 <Draw_Rectangle+0x2a>
	for(int i=Start_Y;i<(Start_Y + Size_Y);i++)
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	3301      	adds	r3, #1
 800899e:	61fb      	str	r3, [r7, #28]
 80089a0:	893a      	ldrh	r2, [r7, #8]
 80089a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089a4:	4413      	add	r3, r2
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	dbd7      	blt.n	800895c <Draw_Rectangle+0x24>
		}
	}
}
 80089ac:	bf00      	nop
 80089ae:	bf00      	nop
 80089b0:	3720      	adds	r7, #32
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80089bc:	4b0e      	ldr	r3, [pc, #56]	; (80089f8 <HAL_Init+0x40>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a0d      	ldr	r2, [pc, #52]	; (80089f8 <HAL_Init+0x40>)
 80089c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80089c8:	4b0b      	ldr	r3, [pc, #44]	; (80089f8 <HAL_Init+0x40>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a0a      	ldr	r2, [pc, #40]	; (80089f8 <HAL_Init+0x40>)
 80089ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80089d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80089d4:	4b08      	ldr	r3, [pc, #32]	; (80089f8 <HAL_Init+0x40>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a07      	ldr	r2, [pc, #28]	; (80089f8 <HAL_Init+0x40>)
 80089da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089e0:	2003      	movs	r0, #3
 80089e2:	f000 f94f 	bl	8008c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80089e6:	200f      	movs	r0, #15
 80089e8:	f000 f808 	bl	80089fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80089ec:	f7fd fb78 	bl	80060e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	40023c00 	.word	0x40023c00

080089fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a04:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <HAL_InitTick+0x54>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	4b12      	ldr	r3, [pc, #72]	; (8008a54 <HAL_InitTick+0x58>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 f967 	bl	8008cee <HAL_SYSTICK_Config>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e00e      	b.n	8008a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b0f      	cmp	r3, #15
 8008a2e:	d80a      	bhi.n	8008a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a30:	2200      	movs	r2, #0
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	f000 f92f 	bl	8008c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a3c:	4a06      	ldr	r2, [pc, #24]	; (8008a58 <HAL_InitTick+0x5c>)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	e000      	b.n	8008a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	2000001c 	.word	0x2000001c
 8008a54:	20000024 	.word	0x20000024
 8008a58:	20000020 	.word	0x20000020

08008a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a60:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <HAL_IncTick+0x20>)
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	461a      	mov	r2, r3
 8008a66:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <HAL_IncTick+0x24>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	4a04      	ldr	r2, [pc, #16]	; (8008a80 <HAL_IncTick+0x24>)
 8008a6e:	6013      	str	r3, [r2, #0]
}
 8008a70:	bf00      	nop
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	20000024 	.word	0x20000024
 8008a80:	20000c38 	.word	0x20000c38

08008a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
  return uwTick;
 8008a88:	4b03      	ldr	r3, [pc, #12]	; (8008a98 <HAL_GetTick+0x14>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000c38 	.word	0x20000c38

08008a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008aa4:	f7ff ffee 	bl	8008a84 <HAL_GetTick>
 8008aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab4:	d005      	beq.n	8008ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008ab6:	4b0a      	ldr	r3, [pc, #40]	; (8008ae0 <HAL_Delay+0x44>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008ac2:	bf00      	nop
 8008ac4:	f7ff ffde 	bl	8008a84 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d8f7      	bhi.n	8008ac4 <HAL_Delay+0x28>
  {
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	20000024 	.word	0x20000024

08008ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008af4:	4b0c      	ldr	r3, [pc, #48]	; (8008b28 <__NVIC_SetPriorityGrouping+0x44>)
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b00:	4013      	ands	r3, r2
 8008b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b16:	4a04      	ldr	r2, [pc, #16]	; (8008b28 <__NVIC_SetPriorityGrouping+0x44>)
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	60d3      	str	r3, [r2, #12]
}
 8008b1c:	bf00      	nop
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	e000ed00 	.word	0xe000ed00

08008b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b30:	4b04      	ldr	r3, [pc, #16]	; (8008b44 <__NVIC_GetPriorityGrouping+0x18>)
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	0a1b      	lsrs	r3, r3, #8
 8008b36:	f003 0307 	and.w	r3, r3, #7
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	e000ed00 	.word	0xe000ed00

08008b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	db0b      	blt.n	8008b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
 8008b5c:	f003 021f 	and.w	r2, r3, #31
 8008b60:	4907      	ldr	r1, [pc, #28]	; (8008b80 <__NVIC_EnableIRQ+0x38>)
 8008b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b66:	095b      	lsrs	r3, r3, #5
 8008b68:	2001      	movs	r0, #1
 8008b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8008b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	e000e100 	.word	0xe000e100

08008b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	6039      	str	r1, [r7, #0]
 8008b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	db0a      	blt.n	8008bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	490c      	ldr	r1, [pc, #48]	; (8008bd0 <__NVIC_SetPriority+0x4c>)
 8008b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ba2:	0112      	lsls	r2, r2, #4
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	440b      	add	r3, r1
 8008ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008bac:	e00a      	b.n	8008bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	4908      	ldr	r1, [pc, #32]	; (8008bd4 <__NVIC_SetPriority+0x50>)
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	3b04      	subs	r3, #4
 8008bbc:	0112      	lsls	r2, r2, #4
 8008bbe:	b2d2      	uxtb	r2, r2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	761a      	strb	r2, [r3, #24]
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	e000e100 	.word	0xe000e100
 8008bd4:	e000ed00 	.word	0xe000ed00

08008bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b089      	sub	sp, #36	; 0x24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f003 0307 	and.w	r3, r3, #7
 8008bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	f1c3 0307 	rsb	r3, r3, #7
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	bf28      	it	cs
 8008bf6:	2304      	movcs	r3, #4
 8008bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	2b06      	cmp	r3, #6
 8008c00:	d902      	bls.n	8008c08 <NVIC_EncodePriority+0x30>
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	3b03      	subs	r3, #3
 8008c06:	e000      	b.n	8008c0a <NVIC_EncodePriority+0x32>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	fa02 f303 	lsl.w	r3, r2, r3
 8008c16:	43da      	mvns	r2, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	401a      	ands	r2, r3
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c20:	f04f 31ff 	mov.w	r1, #4294967295
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	fa01 f303 	lsl.w	r3, r1, r3
 8008c2a:	43d9      	mvns	r1, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c30:	4313      	orrs	r3, r2
         );
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3724      	adds	r7, #36	; 0x24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
	...

08008c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c50:	d301      	bcc.n	8008c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c52:	2301      	movs	r3, #1
 8008c54:	e00f      	b.n	8008c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c56:	4a0a      	ldr	r2, [pc, #40]	; (8008c80 <SysTick_Config+0x40>)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c5e:	210f      	movs	r1, #15
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	f7ff ff8e 	bl	8008b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c68:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <SysTick_Config+0x40>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c6e:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <SysTick_Config+0x40>)
 8008c70:	2207      	movs	r2, #7
 8008c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	e000e010 	.word	0xe000e010

08008c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff ff29 	bl	8008ae4 <__NVIC_SetPriorityGrouping>
}
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b086      	sub	sp, #24
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	607a      	str	r2, [r7, #4]
 8008ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008cac:	f7ff ff3e 	bl	8008b2c <__NVIC_GetPriorityGrouping>
 8008cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	68b9      	ldr	r1, [r7, #8]
 8008cb6:	6978      	ldr	r0, [r7, #20]
 8008cb8:	f7ff ff8e 	bl	8008bd8 <NVIC_EncodePriority>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff ff5d 	bl	8008b84 <__NVIC_SetPriority>
}
 8008cca:	bf00      	nop
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	4603      	mov	r3, r0
 8008cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff ff31 	bl	8008b48 <__NVIC_EnableIRQ>
}
 8008ce6:	bf00      	nop
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b082      	sub	sp, #8
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7ff ffa2 	bl	8008c40 <SysTick_Config>
 8008cfc:	4603      	mov	r3, r0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008d14:	f7ff feb6 	bl	8008a84 <HAL_GetTick>
 8008d18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d008      	beq.n	8008d38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2280      	movs	r2, #128	; 0x80
 8008d2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e052      	b.n	8008dde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 0216 	bic.w	r2, r2, #22
 8008d46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	695a      	ldr	r2, [r3, #20]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d103      	bne.n	8008d68 <HAL_DMA_Abort+0x62>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d007      	beq.n	8008d78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 0208 	bic.w	r2, r2, #8
 8008d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 0201 	bic.w	r2, r2, #1
 8008d86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d88:	e013      	b.n	8008db2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008d8a:	f7ff fe7b 	bl	8008a84 <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	2b05      	cmp	r3, #5
 8008d96:	d90c      	bls.n	8008db2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2203      	movs	r2, #3
 8008da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e015      	b.n	8008dde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e4      	bne.n	8008d8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc4:	223f      	movs	r2, #63	; 0x3f
 8008dc6:	409a      	lsls	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d004      	beq.n	8008e04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2280      	movs	r2, #128	; 0x80
 8008dfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e00c      	b.n	8008e1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2205      	movs	r2, #5
 8008e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 0201 	bic.w	r2, r2, #1
 8008e1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e03b      	b.n	8008eb4 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d106      	bne.n	8008e56 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7fd f96d 	bl	8006130 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7a:	f023 0107 	bic.w	r1, r3, #7
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689a      	ldr	r2, [r3, #8]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	68d1      	ldr	r1, [r2, #12]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6812      	ldr	r2, [r2, #0]
 8008ea0:	430b      	orrs	r3, r1
 8008ea2:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d101      	bne.n	8008edc <HAL_DMA2D_ConfigLayer+0x20>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e079      	b.n	8008fd0 <HAL_DMA2D_ConfigLayer+0x114>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	011b      	lsls	r3, r3, #4
 8008ef0:	3318      	adds	r3, #24
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	041b      	lsls	r3, r3, #16
 8008f02:	4313      	orrs	r3, r2
 8008f04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8008f06:	4b35      	ldr	r3, [pc, #212]	; (8008fdc <HAL_DMA2D_ConfigLayer+0x120>)
 8008f08:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	2b0a      	cmp	r3, #10
 8008f10:	d003      	beq.n	8008f1a <HAL_DMA2D_ConfigLayer+0x5e>
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2b09      	cmp	r3, #9
 8008f18:	d107      	bne.n	8008f2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	617b      	str	r3, [r7, #20]
 8008f28:	e005      	b.n	8008f36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	061b      	lsls	r3, r3, #24
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d120      	bne.n	8008f7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	43db      	mvns	r3, r3
 8008f46:	ea02 0103 	and.w	r1, r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	6812      	ldr	r2, [r2, #0]
 8008f5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	2b0a      	cmp	r3, #10
 8008f64:	d003      	beq.n	8008f6e <HAL_DMA2D_ConfigLayer+0xb2>
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	2b09      	cmp	r3, #9
 8008f6c:	d127      	bne.n	8008fbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8008f7c:	e01f      	b.n	8008fbe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69da      	ldr	r2, [r3, #28]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	43db      	mvns	r3, r3
 8008f88:	ea02 0103 	and.w	r1, r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	6812      	ldr	r2, [r2, #0]
 8008f9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2b0a      	cmp	r3, #10
 8008fa6:	d003      	beq.n	8008fb0 <HAL_DMA2D_ConfigLayer+0xf4>
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	2b09      	cmp	r3, #9
 8008fae:	d106      	bne.n	8008fbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008fbc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	371c      	adds	r7, #28
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	ff03000f 	.word	0xff03000f

08008fe0 <HAL_DMA2D_EnableDeadTime>:
  * @brief Enable DMA2D dead time feature.
  * @param hdma2d DMA2D handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_EnableDeadTime(DMA2D_HandleTypeDef *hdma2d)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdma2d);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d101      	bne.n	8008ff6 <HAL_DMA2D_EnableDeadTime+0x16>
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	e018      	b.n	8009028 <HAL_DMA2D_EnableDeadTime+0x48>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2202      	movs	r2, #2
 8009002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set DMA2D_AMTCR EN bit */
  SET_BIT(hdma2d->Instance->AMTCR, DMA2D_AMTCR_EN);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f042 0201 	orr.w	r2, r2, #1
 8009014:	64da      	str	r2, [r3, #76]	; 0x4c

  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_DMA2D_ConfigDeadTime>:
  * @param hdma2d DMA2D handle.
  * @param DeadTime dead time value.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigDeadTime(DMA2D_HandleTypeDef *hdma2d, uint8_t DeadTime)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  /* Process Locked */
  __HAL_LOCK(hdma2d);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009046:	2b01      	cmp	r3, #1
 8009048:	d101      	bne.n	800904e <HAL_DMA2D_ConfigDeadTime+0x1a>
 800904a:	2302      	movs	r3, #2
 800904c:	e01b      	b.n	8009086 <HAL_DMA2D_ConfigDeadTime+0x52>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2202      	movs	r2, #2
 800905a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set DMA2D_AMTCR DT field */
  MODIFY_REG(hdma2d->Instance->AMTCR, DMA2D_AMTCR_DT, (((uint32_t) DeadTime) << DMA2D_AMTCR_DT_Pos));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009064:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	021a      	lsls	r2, r3, #8
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	430a      	orrs	r2, r1
 8009072:	64da      	str	r2, [r3, #76]	; 0x4c

  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
	...

08009094 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80090a6:	4b23      	ldr	r3, [pc, #140]	; (8009134 <HAL_FLASH_Program+0xa0>)
 80090a8:	7e1b      	ldrb	r3, [r3, #24]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d101      	bne.n	80090b2 <HAL_FLASH_Program+0x1e>
 80090ae:	2302      	movs	r3, #2
 80090b0:	e03b      	b.n	800912a <HAL_FLASH_Program+0x96>
 80090b2:	4b20      	ldr	r3, [pc, #128]	; (8009134 <HAL_FLASH_Program+0xa0>)
 80090b4:	2201      	movs	r2, #1
 80090b6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80090bc:	f000 f870 	bl	80091a0 <FLASH_WaitForLastOperation>
 80090c0:	4603      	mov	r3, r0
 80090c2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d12b      	bne.n	8009122 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d105      	bne.n	80090dc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80090d0:	783b      	ldrb	r3, [r7, #0]
 80090d2:	4619      	mov	r1, r3
 80090d4:	68b8      	ldr	r0, [r7, #8]
 80090d6:	f000 f91b 	bl	8009310 <FLASH_Program_Byte>
 80090da:	e016      	b.n	800910a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d105      	bne.n	80090ee <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80090e2:	883b      	ldrh	r3, [r7, #0]
 80090e4:	4619      	mov	r1, r3
 80090e6:	68b8      	ldr	r0, [r7, #8]
 80090e8:	f000 f8ee 	bl	80092c8 <FLASH_Program_HalfWord>
 80090ec:	e00d      	b.n	800910a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d105      	bne.n	8009100 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	4619      	mov	r1, r3
 80090f8:	68b8      	ldr	r0, [r7, #8]
 80090fa:	f000 f8c3 	bl	8009284 <FLASH_Program_Word>
 80090fe:	e004      	b.n	800910a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009104:	68b8      	ldr	r0, [r7, #8]
 8009106:	f000 f88b 	bl	8009220 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800910a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800910e:	f000 f847 	bl	80091a0 <FLASH_WaitForLastOperation>
 8009112:	4603      	mov	r3, r0
 8009114:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009116:	4b08      	ldr	r3, [pc, #32]	; (8009138 <HAL_FLASH_Program+0xa4>)
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	4a07      	ldr	r2, [pc, #28]	; (8009138 <HAL_FLASH_Program+0xa4>)
 800911c:	f023 0301 	bic.w	r3, r3, #1
 8009120:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009122:	4b04      	ldr	r3, [pc, #16]	; (8009134 <HAL_FLASH_Program+0xa0>)
 8009124:	2200      	movs	r2, #0
 8009126:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20000c3c 	.word	0x20000c3c
 8009138:	40023c00 	.word	0x40023c00

0800913c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009146:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <HAL_FLASH_Unlock+0x38>)
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da0b      	bge.n	8009166 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800914e:	4b09      	ldr	r3, [pc, #36]	; (8009174 <HAL_FLASH_Unlock+0x38>)
 8009150:	4a09      	ldr	r2, [pc, #36]	; (8009178 <HAL_FLASH_Unlock+0x3c>)
 8009152:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009154:	4b07      	ldr	r3, [pc, #28]	; (8009174 <HAL_FLASH_Unlock+0x38>)
 8009156:	4a09      	ldr	r2, [pc, #36]	; (800917c <HAL_FLASH_Unlock+0x40>)
 8009158:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800915a:	4b06      	ldr	r3, [pc, #24]	; (8009174 <HAL_FLASH_Unlock+0x38>)
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	da01      	bge.n	8009166 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009166:	79fb      	ldrb	r3, [r7, #7]
}
 8009168:	4618      	mov	r0, r3
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	40023c00 	.word	0x40023c00
 8009178:	45670123 	.word	0x45670123
 800917c:	cdef89ab 	.word	0xcdef89ab

08009180 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009180:	b480      	push	{r7}
 8009182:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8009184:	4b05      	ldr	r3, [pc, #20]	; (800919c <HAL_FLASH_Lock+0x1c>)
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	4a04      	ldr	r2, [pc, #16]	; (800919c <HAL_FLASH_Lock+0x1c>)
 800918a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800918e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	40023c00 	.word	0x40023c00

080091a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091ac:	4b1a      	ldr	r3, [pc, #104]	; (8009218 <FLASH_WaitForLastOperation+0x78>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80091b2:	f7ff fc67 	bl	8008a84 <HAL_GetTick>
 80091b6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80091b8:	e010      	b.n	80091dc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c0:	d00c      	beq.n	80091dc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d007      	beq.n	80091d8 <FLASH_WaitForLastOperation+0x38>
 80091c8:	f7ff fc5c 	bl	8008a84 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d201      	bcs.n	80091dc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e019      	b.n	8009210 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80091dc:	4b0f      	ldr	r3, [pc, #60]	; (800921c <FLASH_WaitForLastOperation+0x7c>)
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1e8      	bne.n	80091ba <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80091e8:	4b0c      	ldr	r3, [pc, #48]	; (800921c <FLASH_WaitForLastOperation+0x7c>)
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80091f4:	4b09      	ldr	r3, [pc, #36]	; (800921c <FLASH_WaitForLastOperation+0x7c>)
 80091f6:	2201      	movs	r2, #1
 80091f8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80091fa:	4b08      	ldr	r3, [pc, #32]	; (800921c <FLASH_WaitForLastOperation+0x7c>)
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009206:	f000 f8a5 	bl	8009354 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e000      	b.n	8009210 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800920e:	2300      	movs	r3, #0
  
}  
 8009210:	4618      	mov	r0, r3
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20000c3c 	.word	0x20000c3c
 800921c:	40023c00 	.word	0x40023c00

08009220 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800922c:	4b14      	ldr	r3, [pc, #80]	; (8009280 <FLASH_Program_DoubleWord+0x60>)
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	4a13      	ldr	r2, [pc, #76]	; (8009280 <FLASH_Program_DoubleWord+0x60>)
 8009232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009236:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009238:	4b11      	ldr	r3, [pc, #68]	; (8009280 <FLASH_Program_DoubleWord+0x60>)
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	4a10      	ldr	r2, [pc, #64]	; (8009280 <FLASH_Program_DoubleWord+0x60>)
 800923e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009242:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009244:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <FLASH_Program_DoubleWord+0x60>)
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	4a0d      	ldr	r2, [pc, #52]	; (8009280 <FLASH_Program_DoubleWord+0x60>)
 800924a:	f043 0301 	orr.w	r3, r3, #1
 800924e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8009256:	f3bf 8f6f 	isb	sy
}
 800925a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800925c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009260:	f04f 0200 	mov.w	r2, #0
 8009264:	f04f 0300 	mov.w	r3, #0
 8009268:	000a      	movs	r2, r1
 800926a:	2300      	movs	r3, #0
 800926c:	68f9      	ldr	r1, [r7, #12]
 800926e:	3104      	adds	r1, #4
 8009270:	4613      	mov	r3, r2
 8009272:	600b      	str	r3, [r1, #0]
}
 8009274:	bf00      	nop
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	40023c00 	.word	0x40023c00

08009284 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800928e:	4b0d      	ldr	r3, [pc, #52]	; (80092c4 <FLASH_Program_Word+0x40>)
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	4a0c      	ldr	r2, [pc, #48]	; (80092c4 <FLASH_Program_Word+0x40>)
 8009294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009298:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800929a:	4b0a      	ldr	r3, [pc, #40]	; (80092c4 <FLASH_Program_Word+0x40>)
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	4a09      	ldr	r2, [pc, #36]	; (80092c4 <FLASH_Program_Word+0x40>)
 80092a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80092a6:	4b07      	ldr	r3, [pc, #28]	; (80092c4 <FLASH_Program_Word+0x40>)
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	4a06      	ldr	r2, [pc, #24]	; (80092c4 <FLASH_Program_Word+0x40>)
 80092ac:	f043 0301 	orr.w	r3, r3, #1
 80092b0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	601a      	str	r2, [r3, #0]
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	40023c00 	.word	0x40023c00

080092c8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092d4:	4b0d      	ldr	r3, [pc, #52]	; (800930c <FLASH_Program_HalfWord+0x44>)
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	4a0c      	ldr	r2, [pc, #48]	; (800930c <FLASH_Program_HalfWord+0x44>)
 80092da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80092e0:	4b0a      	ldr	r3, [pc, #40]	; (800930c <FLASH_Program_HalfWord+0x44>)
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	4a09      	ldr	r2, [pc, #36]	; (800930c <FLASH_Program_HalfWord+0x44>)
 80092e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80092ec:	4b07      	ldr	r3, [pc, #28]	; (800930c <FLASH_Program_HalfWord+0x44>)
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	4a06      	ldr	r2, [pc, #24]	; (800930c <FLASH_Program_HalfWord+0x44>)
 80092f2:	f043 0301 	orr.w	r3, r3, #1
 80092f6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	887a      	ldrh	r2, [r7, #2]
 80092fc:	801a      	strh	r2, [r3, #0]
}
 80092fe:	bf00      	nop
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	40023c00 	.word	0x40023c00

08009310 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800931c:	4b0c      	ldr	r3, [pc, #48]	; (8009350 <FLASH_Program_Byte+0x40>)
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	4a0b      	ldr	r2, [pc, #44]	; (8009350 <FLASH_Program_Byte+0x40>)
 8009322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009326:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009328:	4b09      	ldr	r3, [pc, #36]	; (8009350 <FLASH_Program_Byte+0x40>)
 800932a:	4a09      	ldr	r2, [pc, #36]	; (8009350 <FLASH_Program_Byte+0x40>)
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009330:	4b07      	ldr	r3, [pc, #28]	; (8009350 <FLASH_Program_Byte+0x40>)
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	4a06      	ldr	r2, [pc, #24]	; (8009350 <FLASH_Program_Byte+0x40>)
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	78fa      	ldrb	r2, [r7, #3]
 8009340:	701a      	strb	r2, [r3, #0]
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	40023c00 	.word	0x40023c00

08009354 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009358:	4b2f      	ldr	r3, [pc, #188]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	f003 0310 	and.w	r3, r3, #16
 8009360:	2b00      	cmp	r3, #0
 8009362:	d008      	beq.n	8009376 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009364:	4b2d      	ldr	r3, [pc, #180]	; (800941c <FLASH_SetErrorCode+0xc8>)
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	f043 0310 	orr.w	r3, r3, #16
 800936c:	4a2b      	ldr	r2, [pc, #172]	; (800941c <FLASH_SetErrorCode+0xc8>)
 800936e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009370:	4b29      	ldr	r3, [pc, #164]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 8009372:	2210      	movs	r2, #16
 8009374:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009376:	4b28      	ldr	r3, [pc, #160]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	f003 0320 	and.w	r3, r3, #32
 800937e:	2b00      	cmp	r3, #0
 8009380:	d008      	beq.n	8009394 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009382:	4b26      	ldr	r3, [pc, #152]	; (800941c <FLASH_SetErrorCode+0xc8>)
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	f043 0308 	orr.w	r3, r3, #8
 800938a:	4a24      	ldr	r2, [pc, #144]	; (800941c <FLASH_SetErrorCode+0xc8>)
 800938c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800938e:	4b22      	ldr	r3, [pc, #136]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 8009390:	2220      	movs	r2, #32
 8009392:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009394:	4b20      	ldr	r3, [pc, #128]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939c:	2b00      	cmp	r3, #0
 800939e:	d008      	beq.n	80093b2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80093a0:	4b1e      	ldr	r3, [pc, #120]	; (800941c <FLASH_SetErrorCode+0xc8>)
 80093a2:	69db      	ldr	r3, [r3, #28]
 80093a4:	f043 0304 	orr.w	r3, r3, #4
 80093a8:	4a1c      	ldr	r2, [pc, #112]	; (800941c <FLASH_SetErrorCode+0xc8>)
 80093aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80093ac:	4b1a      	ldr	r3, [pc, #104]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 80093ae:	2240      	movs	r2, #64	; 0x40
 80093b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80093b2:	4b19      	ldr	r3, [pc, #100]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d008      	beq.n	80093d0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80093be:	4b17      	ldr	r3, [pc, #92]	; (800941c <FLASH_SetErrorCode+0xc8>)
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	f043 0302 	orr.w	r3, r3, #2
 80093c6:	4a15      	ldr	r2, [pc, #84]	; (800941c <FLASH_SetErrorCode+0xc8>)
 80093c8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80093ca:	4b13      	ldr	r3, [pc, #76]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 80093cc:	2280      	movs	r2, #128	; 0x80
 80093ce:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80093d0:	4b11      	ldr	r3, [pc, #68]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d009      	beq.n	80093f0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80093dc:	4b0f      	ldr	r3, [pc, #60]	; (800941c <FLASH_SetErrorCode+0xc8>)
 80093de:	69db      	ldr	r3, [r3, #28]
 80093e0:	f043 0301 	orr.w	r3, r3, #1
 80093e4:	4a0d      	ldr	r2, [pc, #52]	; (800941c <FLASH_SetErrorCode+0xc8>)
 80093e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80093e8:	4b0b      	ldr	r3, [pc, #44]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 80093ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093ee:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80093f0:	4b09      	ldr	r3, [pc, #36]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0302 	and.w	r3, r3, #2
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d008      	beq.n	800940e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80093fc:	4b07      	ldr	r3, [pc, #28]	; (800941c <FLASH_SetErrorCode+0xc8>)
 80093fe:	69db      	ldr	r3, [r3, #28]
 8009400:	f043 0320 	orr.w	r3, r3, #32
 8009404:	4a05      	ldr	r2, [pc, #20]	; (800941c <FLASH_SetErrorCode+0xc8>)
 8009406:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009408:	4b03      	ldr	r3, [pc, #12]	; (8009418 <FLASH_SetErrorCode+0xc4>)
 800940a:	2202      	movs	r2, #2
 800940c:	60da      	str	r2, [r3, #12]
  }
}
 800940e:	bf00      	nop
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	40023c00 	.word	0x40023c00
 800941c:	20000c3c 	.word	0x20000c3c

08009420 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800942c:	2300      	movs	r3, #0
 800942e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d102      	bne.n	800943c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8009436:	2300      	movs	r3, #0
 8009438:	60fb      	str	r3, [r7, #12]
 800943a:	e010      	b.n	800945e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d103      	bne.n	800944a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	e009      	b.n	800945e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d103      	bne.n	8009458 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	e002      	b.n	800945e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009458:	f44f 7340 	mov.w	r3, #768	; 0x300
 800945c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b0b      	cmp	r3, #11
 8009462:	d902      	bls.n	800946a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3304      	adds	r3, #4
 8009468:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800946a:	4b13      	ldr	r3, [pc, #76]	; (80094b8 <FLASH_Erase_Sector+0x98>)
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	4a12      	ldr	r2, [pc, #72]	; (80094b8 <FLASH_Erase_Sector+0x98>)
 8009470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009474:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8009476:	4b10      	ldr	r3, [pc, #64]	; (80094b8 <FLASH_Erase_Sector+0x98>)
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	490f      	ldr	r1, [pc, #60]	; (80094b8 <FLASH_Erase_Sector+0x98>)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4313      	orrs	r3, r2
 8009480:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009482:	4b0d      	ldr	r3, [pc, #52]	; (80094b8 <FLASH_Erase_Sector+0x98>)
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	4a0c      	ldr	r2, [pc, #48]	; (80094b8 <FLASH_Erase_Sector+0x98>)
 8009488:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800948c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800948e:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <FLASH_Erase_Sector+0x98>)
 8009490:	691a      	ldr	r2, [r3, #16]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	00db      	lsls	r3, r3, #3
 8009496:	4313      	orrs	r3, r2
 8009498:	4a07      	ldr	r2, [pc, #28]	; (80094b8 <FLASH_Erase_Sector+0x98>)
 800949a:	f043 0302 	orr.w	r3, r3, #2
 800949e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80094a0:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <FLASH_Erase_Sector+0x98>)
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	4a04      	ldr	r2, [pc, #16]	; (80094b8 <FLASH_Erase_Sector+0x98>)
 80094a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094aa:	6113      	str	r3, [r2, #16]
}
 80094ac:	bf00      	nop
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	40023c00 	.word	0x40023c00

080094bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094bc:	b480      	push	{r7}
 80094be:	b089      	sub	sp, #36	; 0x24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094d2:	2300      	movs	r3, #0
 80094d4:	61fb      	str	r3, [r7, #28]
 80094d6:	e177      	b.n	80097c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80094d8:	2201      	movs	r2, #1
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	fa02 f303 	lsl.w	r3, r2, r3
 80094e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	4013      	ands	r3, r2
 80094ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	f040 8166 	bne.w	80097c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f003 0303 	and.w	r3, r3, #3
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d005      	beq.n	800950e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800950a:	2b02      	cmp	r3, #2
 800950c:	d130      	bne.n	8009570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	005b      	lsls	r3, r3, #1
 8009518:	2203      	movs	r2, #3
 800951a:	fa02 f303 	lsl.w	r3, r2, r3
 800951e:	43db      	mvns	r3, r3
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	4013      	ands	r3, r2
 8009524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	68da      	ldr	r2, [r3, #12]
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	fa02 f303 	lsl.w	r3, r2, r3
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	4313      	orrs	r3, r2
 8009536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009544:	2201      	movs	r2, #1
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	fa02 f303 	lsl.w	r3, r2, r3
 800954c:	43db      	mvns	r3, r3
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	4013      	ands	r3, r2
 8009552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	091b      	lsrs	r3, r3, #4
 800955a:	f003 0201 	and.w	r2, r3, #1
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	fa02 f303 	lsl.w	r3, r2, r3
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	4313      	orrs	r3, r2
 8009568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	69ba      	ldr	r2, [r7, #24]
 800956e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f003 0303 	and.w	r3, r3, #3
 8009578:	2b03      	cmp	r3, #3
 800957a:	d017      	beq.n	80095ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	005b      	lsls	r3, r3, #1
 8009586:	2203      	movs	r2, #3
 8009588:	fa02 f303 	lsl.w	r3, r2, r3
 800958c:	43db      	mvns	r3, r3
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	4013      	ands	r3, r2
 8009592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	005b      	lsls	r3, r3, #1
 800959c:	fa02 f303 	lsl.w	r3, r2, r3
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f003 0303 	and.w	r3, r3, #3
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d123      	bne.n	8009600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	08da      	lsrs	r2, r3, #3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3208      	adds	r2, #8
 80095c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	f003 0307 	and.w	r3, r3, #7
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	220f      	movs	r2, #15
 80095d0:	fa02 f303 	lsl.w	r3, r2, r3
 80095d4:	43db      	mvns	r3, r3
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	4013      	ands	r3, r2
 80095da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	f003 0307 	and.w	r3, r3, #7
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	fa02 f303 	lsl.w	r3, r2, r3
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	08da      	lsrs	r2, r3, #3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3208      	adds	r2, #8
 80095fa:	69b9      	ldr	r1, [r7, #24]
 80095fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	2203      	movs	r2, #3
 800960c:	fa02 f303 	lsl.w	r3, r2, r3
 8009610:	43db      	mvns	r3, r3
 8009612:	69ba      	ldr	r2, [r7, #24]
 8009614:	4013      	ands	r3, r2
 8009616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f003 0203 	and.w	r2, r3, #3
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	005b      	lsls	r3, r3, #1
 8009624:	fa02 f303 	lsl.w	r3, r2, r3
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	4313      	orrs	r3, r2
 800962c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 80c0 	beq.w	80097c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	4b66      	ldr	r3, [pc, #408]	; (80097e0 <HAL_GPIO_Init+0x324>)
 8009648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964a:	4a65      	ldr	r2, [pc, #404]	; (80097e0 <HAL_GPIO_Init+0x324>)
 800964c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009650:	6453      	str	r3, [r2, #68]	; 0x44
 8009652:	4b63      	ldr	r3, [pc, #396]	; (80097e0 <HAL_GPIO_Init+0x324>)
 8009654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800965e:	4a61      	ldr	r2, [pc, #388]	; (80097e4 <HAL_GPIO_Init+0x328>)
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	089b      	lsrs	r3, r3, #2
 8009664:	3302      	adds	r3, #2
 8009666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800966a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	f003 0303 	and.w	r3, r3, #3
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	220f      	movs	r2, #15
 8009676:	fa02 f303 	lsl.w	r3, r2, r3
 800967a:	43db      	mvns	r3, r3
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	4013      	ands	r3, r2
 8009680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a58      	ldr	r2, [pc, #352]	; (80097e8 <HAL_GPIO_Init+0x32c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d037      	beq.n	80096fa <HAL_GPIO_Init+0x23e>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a57      	ldr	r2, [pc, #348]	; (80097ec <HAL_GPIO_Init+0x330>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d031      	beq.n	80096f6 <HAL_GPIO_Init+0x23a>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a56      	ldr	r2, [pc, #344]	; (80097f0 <HAL_GPIO_Init+0x334>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d02b      	beq.n	80096f2 <HAL_GPIO_Init+0x236>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a55      	ldr	r2, [pc, #340]	; (80097f4 <HAL_GPIO_Init+0x338>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d025      	beq.n	80096ee <HAL_GPIO_Init+0x232>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a54      	ldr	r2, [pc, #336]	; (80097f8 <HAL_GPIO_Init+0x33c>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d01f      	beq.n	80096ea <HAL_GPIO_Init+0x22e>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a53      	ldr	r2, [pc, #332]	; (80097fc <HAL_GPIO_Init+0x340>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d019      	beq.n	80096e6 <HAL_GPIO_Init+0x22a>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a52      	ldr	r2, [pc, #328]	; (8009800 <HAL_GPIO_Init+0x344>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d013      	beq.n	80096e2 <HAL_GPIO_Init+0x226>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a51      	ldr	r2, [pc, #324]	; (8009804 <HAL_GPIO_Init+0x348>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d00d      	beq.n	80096de <HAL_GPIO_Init+0x222>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a50      	ldr	r2, [pc, #320]	; (8009808 <HAL_GPIO_Init+0x34c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d007      	beq.n	80096da <HAL_GPIO_Init+0x21e>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a4f      	ldr	r2, [pc, #316]	; (800980c <HAL_GPIO_Init+0x350>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d101      	bne.n	80096d6 <HAL_GPIO_Init+0x21a>
 80096d2:	2309      	movs	r3, #9
 80096d4:	e012      	b.n	80096fc <HAL_GPIO_Init+0x240>
 80096d6:	230a      	movs	r3, #10
 80096d8:	e010      	b.n	80096fc <HAL_GPIO_Init+0x240>
 80096da:	2308      	movs	r3, #8
 80096dc:	e00e      	b.n	80096fc <HAL_GPIO_Init+0x240>
 80096de:	2307      	movs	r3, #7
 80096e0:	e00c      	b.n	80096fc <HAL_GPIO_Init+0x240>
 80096e2:	2306      	movs	r3, #6
 80096e4:	e00a      	b.n	80096fc <HAL_GPIO_Init+0x240>
 80096e6:	2305      	movs	r3, #5
 80096e8:	e008      	b.n	80096fc <HAL_GPIO_Init+0x240>
 80096ea:	2304      	movs	r3, #4
 80096ec:	e006      	b.n	80096fc <HAL_GPIO_Init+0x240>
 80096ee:	2303      	movs	r3, #3
 80096f0:	e004      	b.n	80096fc <HAL_GPIO_Init+0x240>
 80096f2:	2302      	movs	r3, #2
 80096f4:	e002      	b.n	80096fc <HAL_GPIO_Init+0x240>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e000      	b.n	80096fc <HAL_GPIO_Init+0x240>
 80096fa:	2300      	movs	r3, #0
 80096fc:	69fa      	ldr	r2, [r7, #28]
 80096fe:	f002 0203 	and.w	r2, r2, #3
 8009702:	0092      	lsls	r2, r2, #2
 8009704:	4093      	lsls	r3, r2
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	4313      	orrs	r3, r2
 800970a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800970c:	4935      	ldr	r1, [pc, #212]	; (80097e4 <HAL_GPIO_Init+0x328>)
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	089b      	lsrs	r3, r3, #2
 8009712:	3302      	adds	r3, #2
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800971a:	4b3d      	ldr	r3, [pc, #244]	; (8009810 <HAL_GPIO_Init+0x354>)
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	43db      	mvns	r3, r3
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	4013      	ands	r3, r2
 8009728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d003      	beq.n	800973e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	4313      	orrs	r3, r2
 800973c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800973e:	4a34      	ldr	r2, [pc, #208]	; (8009810 <HAL_GPIO_Init+0x354>)
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009744:	4b32      	ldr	r3, [pc, #200]	; (8009810 <HAL_GPIO_Init+0x354>)
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	43db      	mvns	r3, r3
 800974e:	69ba      	ldr	r2, [r7, #24]
 8009750:	4013      	ands	r3, r2
 8009752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d003      	beq.n	8009768 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	4313      	orrs	r3, r2
 8009766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009768:	4a29      	ldr	r2, [pc, #164]	; (8009810 <HAL_GPIO_Init+0x354>)
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800976e:	4b28      	ldr	r3, [pc, #160]	; (8009810 <HAL_GPIO_Init+0x354>)
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	43db      	mvns	r3, r3
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	4013      	ands	r3, r2
 800977c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	4313      	orrs	r3, r2
 8009790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009792:	4a1f      	ldr	r2, [pc, #124]	; (8009810 <HAL_GPIO_Init+0x354>)
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009798:	4b1d      	ldr	r3, [pc, #116]	; (8009810 <HAL_GPIO_Init+0x354>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	43db      	mvns	r3, r3
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	4013      	ands	r3, r2
 80097a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d003      	beq.n	80097bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80097bc:	4a14      	ldr	r2, [pc, #80]	; (8009810 <HAL_GPIO_Init+0x354>)
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	3301      	adds	r3, #1
 80097c6:	61fb      	str	r3, [r7, #28]
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	2b0f      	cmp	r3, #15
 80097cc:	f67f ae84 	bls.w	80094d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80097d0:	bf00      	nop
 80097d2:	bf00      	nop
 80097d4:	3724      	adds	r7, #36	; 0x24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	40023800 	.word	0x40023800
 80097e4:	40013800 	.word	0x40013800
 80097e8:	40020000 	.word	0x40020000
 80097ec:	40020400 	.word	0x40020400
 80097f0:	40020800 	.word	0x40020800
 80097f4:	40020c00 	.word	0x40020c00
 80097f8:	40021000 	.word	0x40021000
 80097fc:	40021400 	.word	0x40021400
 8009800:	40021800 	.word	0x40021800
 8009804:	40021c00 	.word	0x40021c00
 8009808:	40022000 	.word	0x40022000
 800980c:	40022400 	.word	0x40022400
 8009810:	40013c00 	.word	0x40013c00

08009814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	691a      	ldr	r2, [r3, #16]
 8009824:	887b      	ldrh	r3, [r7, #2]
 8009826:	4013      	ands	r3, r2
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800982c:	2301      	movs	r3, #1
 800982e:	73fb      	strb	r3, [r7, #15]
 8009830:	e001      	b.n	8009836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009832:	2300      	movs	r3, #0
 8009834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	807b      	strh	r3, [r7, #2]
 8009850:	4613      	mov	r3, r2
 8009852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009854:	787b      	ldrb	r3, [r7, #1]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800985a:	887a      	ldrh	r2, [r7, #2]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009860:	e003      	b.n	800986a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009862:	887b      	ldrh	r3, [r7, #2]
 8009864:	041a      	lsls	r2, r3, #16
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	619a      	str	r2, [r3, #24]
}
 800986a:	bf00      	nop
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
	...

08009878 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e0bf      	b.n	8009a0a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d106      	bne.n	80098a4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7fc fc68 	bl	8006174 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2202      	movs	r2, #2
 80098a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699a      	ldr	r2, [r3, #24]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80098ba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6999      	ldr	r1, [r3, #24]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80098d0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	430a      	orrs	r2, r1
 80098de:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6899      	ldr	r1, [r3, #8]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	4b4a      	ldr	r3, [pc, #296]	; (8009a14 <HAL_LTDC_Init+0x19c>)
 80098ec:	400b      	ands	r3, r1
 80098ee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	041b      	lsls	r3, r3, #16
 80098f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6899      	ldr	r1, [r3, #8]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699a      	ldr	r2, [r3, #24]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	431a      	orrs	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68d9      	ldr	r1, [r3, #12]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	4b3e      	ldr	r3, [pc, #248]	; (8009a14 <HAL_LTDC_Init+0x19c>)
 800991a:	400b      	ands	r3, r1
 800991c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	041b      	lsls	r3, r3, #16
 8009924:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68d9      	ldr	r1, [r3, #12]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a1a      	ldr	r2, [r3, #32]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	431a      	orrs	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6919      	ldr	r1, [r3, #16]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	4b33      	ldr	r3, [pc, #204]	; (8009a14 <HAL_LTDC_Init+0x19c>)
 8009948:	400b      	ands	r3, r1
 800994a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	041b      	lsls	r3, r3, #16
 8009952:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6919      	ldr	r1, [r3, #16]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	431a      	orrs	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	430a      	orrs	r2, r1
 8009968:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6959      	ldr	r1, [r3, #20]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	4b27      	ldr	r3, [pc, #156]	; (8009a14 <HAL_LTDC_Init+0x19c>)
 8009976:	400b      	ands	r3, r1
 8009978:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	041b      	lsls	r3, r3, #16
 8009980:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6959      	ldr	r1, [r3, #20]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800999e:	021b      	lsls	r3, r3, #8
 80099a0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80099a8:	041b      	lsls	r3, r3, #16
 80099aa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80099ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80099ce:	431a      	orrs	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	430a      	orrs	r2, r1
 80099d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f042 0206 	orr.w	r2, r2, #6
 80099e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0201 	orr.w	r2, r2, #1
 80099f6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	f000f800 	.word	0xf000f800

08009a18 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009a18:	b5b0      	push	{r4, r5, r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d101      	bne.n	8009a32 <HAL_LTDC_ConfigLayer+0x1a>
 8009a2e:	2302      	movs	r3, #2
 8009a30:	e02c      	b.n	8009a8c <HAL_LTDC_ConfigLayer+0x74>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2134      	movs	r1, #52	; 0x34
 8009a48:	fb01 f303 	mul.w	r3, r1, r3
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	4614      	mov	r4, r2
 8009a56:	461d      	mov	r5, r3
 8009a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	68b9      	ldr	r1, [r7, #8]
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f000 f847 	bl	8009b00 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2201      	movs	r2, #1
 8009a78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bdb0      	pop	{r4, r5, r7, pc}

08009a94 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d101      	bne.n	8009aae <HAL_LTDC_SetAddress+0x1a>
 8009aaa:	2302      	movs	r3, #2
 8009aac:	e024      	b.n	8009af8 <HAL_LTDC_SetAddress+0x64>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2202      	movs	r2, #2
 8009aba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2234      	movs	r2, #52	; 0x34
 8009ac2:	fb02 f303 	mul.w	r3, r2, r3
 8009ac6:	3338      	adds	r3, #56	; 0x38
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	6979      	ldr	r1, [r7, #20]
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 f811 	bl	8009b00 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b089      	sub	sp, #36	; 0x24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	0c1b      	lsrs	r3, r3, #16
 8009b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b1c:	4413      	add	r3, r2
 8009b1e:	041b      	lsls	r3, r3, #16
 8009b20:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	01db      	lsls	r3, r3, #7
 8009b2c:	4413      	add	r3, r2
 8009b2e:	3384      	adds	r3, #132	; 0x84
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	6812      	ldr	r2, [r2, #0]
 8009b36:	4611      	mov	r1, r2
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	01d2      	lsls	r2, r2, #7
 8009b3c:	440a      	add	r2, r1
 8009b3e:	3284      	adds	r2, #132	; 0x84
 8009b40:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009b44:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	0c1b      	lsrs	r3, r3, #16
 8009b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009b56:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009b58:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	01db      	lsls	r3, r3, #7
 8009b64:	440b      	add	r3, r1
 8009b66:	3384      	adds	r3, #132	; 0x84
 8009b68:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009b6e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b7e:	4413      	add	r3, r2
 8009b80:	041b      	lsls	r3, r3, #16
 8009b82:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	01db      	lsls	r3, r3, #7
 8009b8e:	4413      	add	r3, r2
 8009b90:	3384      	adds	r3, #132	; 0x84
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	6812      	ldr	r2, [r2, #0]
 8009b98:	4611      	mov	r1, r2
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	01d2      	lsls	r2, r2, #7
 8009b9e:	440a      	add	r2, r1
 8009ba0:	3284      	adds	r2, #132	; 0x84
 8009ba2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009ba6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bb6:	4413      	add	r3, r2
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	01db      	lsls	r3, r3, #7
 8009bc4:	440b      	add	r3, r1
 8009bc6:	3384      	adds	r3, #132	; 0x84
 8009bc8:	4619      	mov	r1, r3
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	01db      	lsls	r3, r3, #7
 8009bda:	4413      	add	r3, r2
 8009bdc:	3384      	adds	r3, #132	; 0x84
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	6812      	ldr	r2, [r2, #0]
 8009be4:	4611      	mov	r1, r2
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	01d2      	lsls	r2, r2, #7
 8009bea:	440a      	add	r2, r1
 8009bec:	3284      	adds	r2, #132	; 0x84
 8009bee:	f023 0307 	bic.w	r3, r3, #7
 8009bf2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	01db      	lsls	r3, r3, #7
 8009bfe:	4413      	add	r3, r2
 8009c00:	3384      	adds	r3, #132	; 0x84
 8009c02:	461a      	mov	r2, r3
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009c10:	021b      	lsls	r3, r3, #8
 8009c12:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009c1a:	041b      	lsls	r3, r3, #16
 8009c1c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	061b      	lsls	r3, r3, #24
 8009c24:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	01db      	lsls	r3, r3, #7
 8009c30:	4413      	add	r3, r2
 8009c32:	3384      	adds	r3, #132	; 0x84
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	01db      	lsls	r3, r3, #7
 8009c40:	4413      	add	r3, r2
 8009c42:	3384      	adds	r3, #132	; 0x84
 8009c44:	461a      	mov	r2, r3
 8009c46:	2300      	movs	r3, #0
 8009c48:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c50:	461a      	mov	r2, r3
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	431a      	orrs	r2, r3
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	01db      	lsls	r3, r3, #7
 8009c64:	440b      	add	r3, r1
 8009c66:	3384      	adds	r3, #132	; 0x84
 8009c68:	4619      	mov	r1, r3
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	461a      	mov	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	01db      	lsls	r3, r3, #7
 8009c7a:	4413      	add	r3, r2
 8009c7c:	3384      	adds	r3, #132	; 0x84
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	6812      	ldr	r2, [r2, #0]
 8009c84:	4611      	mov	r1, r2
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	01d2      	lsls	r2, r2, #7
 8009c8a:	440a      	add	r2, r1
 8009c8c:	3284      	adds	r2, #132	; 0x84
 8009c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009c92:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	01db      	lsls	r3, r3, #7
 8009c9e:	4413      	add	r3, r2
 8009ca0:	3384      	adds	r3, #132	; 0x84
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	01db      	lsls	r3, r3, #7
 8009cb4:	4413      	add	r3, r2
 8009cb6:	3384      	adds	r3, #132	; 0x84
 8009cb8:	69db      	ldr	r3, [r3, #28]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	6812      	ldr	r2, [r2, #0]
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	01d2      	lsls	r2, r2, #7
 8009cc4:	440a      	add	r2, r1
 8009cc6:	3284      	adds	r2, #132	; 0x84
 8009cc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009ccc:	f023 0307 	bic.w	r3, r3, #7
 8009cd0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	69da      	ldr	r2, [r3, #28]
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	68f9      	ldr	r1, [r7, #12]
 8009cdc:	6809      	ldr	r1, [r1, #0]
 8009cde:	4608      	mov	r0, r1
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	01c9      	lsls	r1, r1, #7
 8009ce4:	4401      	add	r1, r0
 8009ce6:	3184      	adds	r1, #132	; 0x84
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	01db      	lsls	r3, r3, #7
 8009cf6:	4413      	add	r3, r2
 8009cf8:	3384      	adds	r3, #132	; 0x84
 8009cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	01db      	lsls	r3, r3, #7
 8009d06:	4413      	add	r3, r2
 8009d08:	3384      	adds	r3, #132	; 0x84
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	01db      	lsls	r3, r3, #7
 8009d1a:	4413      	add	r3, r2
 8009d1c:	3384      	adds	r3, #132	; 0x84
 8009d1e:	461a      	mov	r2, r3
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d24:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8009d2e:	2304      	movs	r3, #4
 8009d30:	61fb      	str	r3, [r7, #28]
 8009d32:	e01b      	b.n	8009d6c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d102      	bne.n	8009d42 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	61fb      	str	r3, [r7, #28]
 8009d40:	e014      	b.n	8009d6c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	d00b      	beq.n	8009d62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d007      	beq.n	8009d62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d003      	beq.n	8009d62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009d5e:	2b07      	cmp	r3, #7
 8009d60:	d102      	bne.n	8009d68 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8009d62:	2302      	movs	r3, #2
 8009d64:	61fb      	str	r3, [r7, #28]
 8009d66:	e001      	b.n	8009d6c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	461a      	mov	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	01db      	lsls	r3, r3, #7
 8009d76:	4413      	add	r3, r2
 8009d78:	3384      	adds	r3, #132	; 0x84
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	6812      	ldr	r2, [r2, #0]
 8009d80:	4611      	mov	r1, r2
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	01d2      	lsls	r2, r2, #7
 8009d86:	440a      	add	r2, r1
 8009d88:	3284      	adds	r2, #132	; 0x84
 8009d8a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d94:	69fa      	ldr	r2, [r7, #28]
 8009d96:	fb02 f303 	mul.w	r3, r2, r3
 8009d9a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	6859      	ldr	r1, [r3, #4]
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	1acb      	subs	r3, r1, r3
 8009da6:	69f9      	ldr	r1, [r7, #28]
 8009da8:	fb01 f303 	mul.w	r3, r1, r3
 8009dac:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009dae:	68f9      	ldr	r1, [r7, #12]
 8009db0:	6809      	ldr	r1, [r1, #0]
 8009db2:	4608      	mov	r0, r1
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	01c9      	lsls	r1, r1, #7
 8009db8:	4401      	add	r1, r0
 8009dba:	3184      	adds	r1, #132	; 0x84
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	01db      	lsls	r3, r3, #7
 8009dca:	4413      	add	r3, r2
 8009dcc:	3384      	adds	r3, #132	; 0x84
 8009dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	6812      	ldr	r2, [r2, #0]
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	01d2      	lsls	r2, r2, #7
 8009dda:	440a      	add	r2, r1
 8009ddc:	3284      	adds	r2, #132	; 0x84
 8009dde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009de2:	f023 0307 	bic.w	r3, r3, #7
 8009de6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	461a      	mov	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	01db      	lsls	r3, r3, #7
 8009df2:	4413      	add	r3, r2
 8009df4:	3384      	adds	r3, #132	; 0x84
 8009df6:	461a      	mov	r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	01db      	lsls	r3, r3, #7
 8009e08:	4413      	add	r3, r2
 8009e0a:	3384      	adds	r3, #132	; 0x84
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	6812      	ldr	r2, [r2, #0]
 8009e12:	4611      	mov	r1, r2
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	01d2      	lsls	r2, r2, #7
 8009e18:	440a      	add	r2, r1
 8009e1a:	3284      	adds	r2, #132	; 0x84
 8009e1c:	f043 0301 	orr.w	r3, r3, #1
 8009e20:	6013      	str	r3, [r2, #0]
}
 8009e22:	bf00      	nop
 8009e24:	3724      	adds	r7, #36	; 0x24
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
	...

08009e30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	603b      	str	r3, [r7, #0]
 8009e3e:	4b20      	ldr	r3, [pc, #128]	; (8009ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e42:	4a1f      	ldr	r2, [pc, #124]	; (8009ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e48:	6413      	str	r3, [r2, #64]	; 0x40
 8009e4a:	4b1d      	ldr	r3, [pc, #116]	; (8009ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e52:	603b      	str	r3, [r7, #0]
 8009e54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009e56:	4b1b      	ldr	r3, [pc, #108]	; (8009ec4 <HAL_PWREx_EnableOverDrive+0x94>)
 8009e58:	2201      	movs	r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e5c:	f7fe fe12 	bl	8008a84 <HAL_GetTick>
 8009e60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009e62:	e009      	b.n	8009e78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009e64:	f7fe fe0e 	bl	8008a84 <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e72:	d901      	bls.n	8009e78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e01f      	b.n	8009eb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009e78:	4b13      	ldr	r3, [pc, #76]	; (8009ec8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e84:	d1ee      	bne.n	8009e64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009e86:	4b11      	ldr	r3, [pc, #68]	; (8009ecc <HAL_PWREx_EnableOverDrive+0x9c>)
 8009e88:	2201      	movs	r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e8c:	f7fe fdfa 	bl	8008a84 <HAL_GetTick>
 8009e90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009e92:	e009      	b.n	8009ea8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009e94:	f7fe fdf6 	bl	8008a84 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ea2:	d901      	bls.n	8009ea8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e007      	b.n	8009eb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ea8:	4b07      	ldr	r3, [pc, #28]	; (8009ec8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eb4:	d1ee      	bne.n	8009e94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	40023800 	.word	0x40023800
 8009ec4:	420e0040 	.word	0x420e0040
 8009ec8:	40007000 	.word	0x40007000
 8009ecc:	420e0044 	.word	0x420e0044

08009ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e267      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d075      	beq.n	8009fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009eee:	4b88      	ldr	r3, [pc, #544]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f003 030c 	and.w	r3, r3, #12
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	d00c      	beq.n	8009f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009efa:	4b85      	ldr	r3, [pc, #532]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009f02:	2b08      	cmp	r3, #8
 8009f04:	d112      	bne.n	8009f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f06:	4b82      	ldr	r3, [pc, #520]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f12:	d10b      	bne.n	8009f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f14:	4b7e      	ldr	r3, [pc, #504]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d05b      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x108>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d157      	bne.n	8009fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e242      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f34:	d106      	bne.n	8009f44 <HAL_RCC_OscConfig+0x74>
 8009f36:	4b76      	ldr	r3, [pc, #472]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a75      	ldr	r2, [pc, #468]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f40:	6013      	str	r3, [r2, #0]
 8009f42:	e01d      	b.n	8009f80 <HAL_RCC_OscConfig+0xb0>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f4c:	d10c      	bne.n	8009f68 <HAL_RCC_OscConfig+0x98>
 8009f4e:	4b70      	ldr	r3, [pc, #448]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a6f      	ldr	r2, [pc, #444]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	4b6d      	ldr	r3, [pc, #436]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a6c      	ldr	r2, [pc, #432]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f64:	6013      	str	r3, [r2, #0]
 8009f66:	e00b      	b.n	8009f80 <HAL_RCC_OscConfig+0xb0>
 8009f68:	4b69      	ldr	r3, [pc, #420]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a68      	ldr	r2, [pc, #416]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	4b66      	ldr	r3, [pc, #408]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a65      	ldr	r2, [pc, #404]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d013      	beq.n	8009fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f88:	f7fe fd7c 	bl	8008a84 <HAL_GetTick>
 8009f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f8e:	e008      	b.n	8009fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f90:	f7fe fd78 	bl	8008a84 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b64      	cmp	r3, #100	; 0x64
 8009f9c:	d901      	bls.n	8009fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e207      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fa2:	4b5b      	ldr	r3, [pc, #364]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d0f0      	beq.n	8009f90 <HAL_RCC_OscConfig+0xc0>
 8009fae:	e014      	b.n	8009fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fb0:	f7fe fd68 	bl	8008a84 <HAL_GetTick>
 8009fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fb6:	e008      	b.n	8009fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fb8:	f7fe fd64 	bl	8008a84 <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b64      	cmp	r3, #100	; 0x64
 8009fc4:	d901      	bls.n	8009fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e1f3      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fca:	4b51      	ldr	r3, [pc, #324]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1f0      	bne.n	8009fb8 <HAL_RCC_OscConfig+0xe8>
 8009fd6:	e000      	b.n	8009fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0302 	and.w	r3, r3, #2
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d063      	beq.n	800a0ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009fe6:	4b4a      	ldr	r3, [pc, #296]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	f003 030c 	and.w	r3, r3, #12
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00b      	beq.n	800a00a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ff2:	4b47      	ldr	r3, [pc, #284]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ffa:	2b08      	cmp	r3, #8
 8009ffc:	d11c      	bne.n	800a038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ffe:	4b44      	ldr	r3, [pc, #272]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d116      	bne.n	800a038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a00a:	4b41      	ldr	r3, [pc, #260]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	2b00      	cmp	r3, #0
 800a014:	d005      	beq.n	800a022 <HAL_RCC_OscConfig+0x152>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d001      	beq.n	800a022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e1c7      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a022:	4b3b      	ldr	r3, [pc, #236]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	4937      	ldr	r1, [pc, #220]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 800a032:	4313      	orrs	r3, r2
 800a034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a036:	e03a      	b.n	800a0ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d020      	beq.n	800a082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a040:	4b34      	ldr	r3, [pc, #208]	; (800a114 <HAL_RCC_OscConfig+0x244>)
 800a042:	2201      	movs	r2, #1
 800a044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a046:	f7fe fd1d 	bl	8008a84 <HAL_GetTick>
 800a04a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a04c:	e008      	b.n	800a060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a04e:	f7fe fd19 	bl	8008a84 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d901      	bls.n	800a060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e1a8      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a060:	4b2b      	ldr	r3, [pc, #172]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0f0      	beq.n	800a04e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a06c:	4b28      	ldr	r3, [pc, #160]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	4925      	ldr	r1, [pc, #148]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	600b      	str	r3, [r1, #0]
 800a080:	e015      	b.n	800a0ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a082:	4b24      	ldr	r3, [pc, #144]	; (800a114 <HAL_RCC_OscConfig+0x244>)
 800a084:	2200      	movs	r2, #0
 800a086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a088:	f7fe fcfc 	bl	8008a84 <HAL_GetTick>
 800a08c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a08e:	e008      	b.n	800a0a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a090:	f7fe fcf8 	bl	8008a84 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d901      	bls.n	800a0a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e187      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a0a2:	4b1b      	ldr	r3, [pc, #108]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 0302 	and.w	r3, r3, #2
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1f0      	bne.n	800a090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0308 	and.w	r3, r3, #8
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d036      	beq.n	800a128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d016      	beq.n	800a0f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0c2:	4b15      	ldr	r3, [pc, #84]	; (800a118 <HAL_RCC_OscConfig+0x248>)
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0c8:	f7fe fcdc 	bl	8008a84 <HAL_GetTick>
 800a0cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0ce:	e008      	b.n	800a0e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0d0:	f7fe fcd8 	bl	8008a84 <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d901      	bls.n	800a0e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e167      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0e2:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <HAL_RCC_OscConfig+0x240>)
 800a0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0f0      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x200>
 800a0ee:	e01b      	b.n	800a128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0f0:	4b09      	ldr	r3, [pc, #36]	; (800a118 <HAL_RCC_OscConfig+0x248>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0f6:	f7fe fcc5 	bl	8008a84 <HAL_GetTick>
 800a0fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0fc:	e00e      	b.n	800a11c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0fe:	f7fe fcc1 	bl	8008a84 <HAL_GetTick>
 800a102:	4602      	mov	r2, r0
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d907      	bls.n	800a11c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e150      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
 800a110:	40023800 	.word	0x40023800
 800a114:	42470000 	.word	0x42470000
 800a118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a11c:	4b88      	ldr	r3, [pc, #544]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a11e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a120:	f003 0302 	and.w	r3, r3, #2
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1ea      	bne.n	800a0fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 8097 	beq.w	800a264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a136:	2300      	movs	r3, #0
 800a138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a13a:	4b81      	ldr	r3, [pc, #516]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10f      	bne.n	800a166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a146:	2300      	movs	r3, #0
 800a148:	60bb      	str	r3, [r7, #8]
 800a14a:	4b7d      	ldr	r3, [pc, #500]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14e:	4a7c      	ldr	r2, [pc, #496]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a154:	6413      	str	r3, [r2, #64]	; 0x40
 800a156:	4b7a      	ldr	r3, [pc, #488]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a15e:	60bb      	str	r3, [r7, #8]
 800a160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a162:	2301      	movs	r3, #1
 800a164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a166:	4b77      	ldr	r3, [pc, #476]	; (800a344 <HAL_RCC_OscConfig+0x474>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d118      	bne.n	800a1a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a172:	4b74      	ldr	r3, [pc, #464]	; (800a344 <HAL_RCC_OscConfig+0x474>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a73      	ldr	r2, [pc, #460]	; (800a344 <HAL_RCC_OscConfig+0x474>)
 800a178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a17c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a17e:	f7fe fc81 	bl	8008a84 <HAL_GetTick>
 800a182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a184:	e008      	b.n	800a198 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a186:	f7fe fc7d 	bl	8008a84 <HAL_GetTick>
 800a18a:	4602      	mov	r2, r0
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	2b02      	cmp	r3, #2
 800a192:	d901      	bls.n	800a198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a194:	2303      	movs	r3, #3
 800a196:	e10c      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a198:	4b6a      	ldr	r3, [pc, #424]	; (800a344 <HAL_RCC_OscConfig+0x474>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0f0      	beq.n	800a186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d106      	bne.n	800a1ba <HAL_RCC_OscConfig+0x2ea>
 800a1ac:	4b64      	ldr	r3, [pc, #400]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b0:	4a63      	ldr	r2, [pc, #396]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a1b8:	e01c      	b.n	800a1f4 <HAL_RCC_OscConfig+0x324>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	2b05      	cmp	r3, #5
 800a1c0:	d10c      	bne.n	800a1dc <HAL_RCC_OscConfig+0x30c>
 800a1c2:	4b5f      	ldr	r3, [pc, #380]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c6:	4a5e      	ldr	r2, [pc, #376]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a1c8:	f043 0304 	orr.w	r3, r3, #4
 800a1cc:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ce:	4b5c      	ldr	r3, [pc, #368]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d2:	4a5b      	ldr	r2, [pc, #364]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a1d4:	f043 0301 	orr.w	r3, r3, #1
 800a1d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a1da:	e00b      	b.n	800a1f4 <HAL_RCC_OscConfig+0x324>
 800a1dc:	4b58      	ldr	r3, [pc, #352]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a1de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e0:	4a57      	ldr	r2, [pc, #348]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a1e2:	f023 0301 	bic.w	r3, r3, #1
 800a1e6:	6713      	str	r3, [r2, #112]	; 0x70
 800a1e8:	4b55      	ldr	r3, [pc, #340]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ec:	4a54      	ldr	r2, [pc, #336]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a1ee:	f023 0304 	bic.w	r3, r3, #4
 800a1f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d015      	beq.n	800a228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1fc:	f7fe fc42 	bl	8008a84 <HAL_GetTick>
 800a200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a202:	e00a      	b.n	800a21a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a204:	f7fe fc3e 	bl	8008a84 <HAL_GetTick>
 800a208:	4602      	mov	r2, r0
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a212:	4293      	cmp	r3, r2
 800a214:	d901      	bls.n	800a21a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a216:	2303      	movs	r3, #3
 800a218:	e0cb      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a21a:	4b49      	ldr	r3, [pc, #292]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21e:	f003 0302 	and.w	r3, r3, #2
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0ee      	beq.n	800a204 <HAL_RCC_OscConfig+0x334>
 800a226:	e014      	b.n	800a252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a228:	f7fe fc2c 	bl	8008a84 <HAL_GetTick>
 800a22c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a22e:	e00a      	b.n	800a246 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a230:	f7fe fc28 	bl	8008a84 <HAL_GetTick>
 800a234:	4602      	mov	r2, r0
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a23e:	4293      	cmp	r3, r2
 800a240:	d901      	bls.n	800a246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a242:	2303      	movs	r3, #3
 800a244:	e0b5      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a246:	4b3e      	ldr	r3, [pc, #248]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24a:	f003 0302 	and.w	r3, r3, #2
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1ee      	bne.n	800a230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a252:	7dfb      	ldrb	r3, [r7, #23]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d105      	bne.n	800a264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a258:	4b39      	ldr	r3, [pc, #228]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25c:	4a38      	ldr	r2, [pc, #224]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a25e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a262:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 80a1 	beq.w	800a3b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a26e:	4b34      	ldr	r3, [pc, #208]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f003 030c 	and.w	r3, r3, #12
 800a276:	2b08      	cmp	r3, #8
 800a278:	d05c      	beq.n	800a334 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d141      	bne.n	800a306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a282:	4b31      	ldr	r3, [pc, #196]	; (800a348 <HAL_RCC_OscConfig+0x478>)
 800a284:	2200      	movs	r2, #0
 800a286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a288:	f7fe fbfc 	bl	8008a84 <HAL_GetTick>
 800a28c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a28e:	e008      	b.n	800a2a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a290:	f7fe fbf8 	bl	8008a84 <HAL_GetTick>
 800a294:	4602      	mov	r2, r0
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d901      	bls.n	800a2a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e087      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2a2:	4b27      	ldr	r3, [pc, #156]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1f0      	bne.n	800a290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	69da      	ldr	r2, [r3, #28]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2bc:	019b      	lsls	r3, r3, #6
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c4:	085b      	lsrs	r3, r3, #1
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	041b      	lsls	r3, r3, #16
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d0:	061b      	lsls	r3, r3, #24
 800a2d2:	491b      	ldr	r1, [pc, #108]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2d8:	4b1b      	ldr	r3, [pc, #108]	; (800a348 <HAL_RCC_OscConfig+0x478>)
 800a2da:	2201      	movs	r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2de:	f7fe fbd1 	bl	8008a84 <HAL_GetTick>
 800a2e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2e4:	e008      	b.n	800a2f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2e6:	f7fe fbcd 	bl	8008a84 <HAL_GetTick>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d901      	bls.n	800a2f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e05c      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2f8:	4b11      	ldr	r3, [pc, #68]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d0f0      	beq.n	800a2e6 <HAL_RCC_OscConfig+0x416>
 800a304:	e054      	b.n	800a3b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a306:	4b10      	ldr	r3, [pc, #64]	; (800a348 <HAL_RCC_OscConfig+0x478>)
 800a308:	2200      	movs	r2, #0
 800a30a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a30c:	f7fe fbba 	bl	8008a84 <HAL_GetTick>
 800a310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a312:	e008      	b.n	800a326 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a314:	f7fe fbb6 	bl	8008a84 <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d901      	bls.n	800a326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e045      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a326:	4b06      	ldr	r3, [pc, #24]	; (800a340 <HAL_RCC_OscConfig+0x470>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1f0      	bne.n	800a314 <HAL_RCC_OscConfig+0x444>
 800a332:	e03d      	b.n	800a3b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d107      	bne.n	800a34c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e038      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
 800a340:	40023800 	.word	0x40023800
 800a344:	40007000 	.word	0x40007000
 800a348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a34c:	4b1b      	ldr	r3, [pc, #108]	; (800a3bc <HAL_RCC_OscConfig+0x4ec>)
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d028      	beq.n	800a3ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a364:	429a      	cmp	r2, r3
 800a366:	d121      	bne.n	800a3ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a372:	429a      	cmp	r2, r3
 800a374:	d11a      	bne.n	800a3ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a37c:	4013      	ands	r3, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a384:	4293      	cmp	r3, r2
 800a386:	d111      	bne.n	800a3ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a392:	085b      	lsrs	r3, r3, #1
 800a394:	3b01      	subs	r3, #1
 800a396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a398:	429a      	cmp	r2, r3
 800a39a:	d107      	bne.n	800a3ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d001      	beq.n	800a3b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e000      	b.n	800a3b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	40023800 	.word	0x40023800

0800a3c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e0cc      	b.n	800a56e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a3d4:	4b68      	ldr	r3, [pc, #416]	; (800a578 <HAL_RCC_ClockConfig+0x1b8>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 030f 	and.w	r3, r3, #15
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d90c      	bls.n	800a3fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3e2:	4b65      	ldr	r3, [pc, #404]	; (800a578 <HAL_RCC_ClockConfig+0x1b8>)
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	b2d2      	uxtb	r2, r2
 800a3e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3ea:	4b63      	ldr	r3, [pc, #396]	; (800a578 <HAL_RCC_ClockConfig+0x1b8>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 030f 	and.w	r3, r3, #15
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d001      	beq.n	800a3fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e0b8      	b.n	800a56e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0302 	and.w	r3, r3, #2
 800a404:	2b00      	cmp	r3, #0
 800a406:	d020      	beq.n	800a44a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	d005      	beq.n	800a420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a414:	4b59      	ldr	r3, [pc, #356]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	4a58      	ldr	r2, [pc, #352]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a41a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a41e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0308 	and.w	r3, r3, #8
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d005      	beq.n	800a438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a42c:	4b53      	ldr	r3, [pc, #332]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	4a52      	ldr	r2, [pc, #328]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a438:	4b50      	ldr	r3, [pc, #320]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	494d      	ldr	r1, [pc, #308]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a446:	4313      	orrs	r3, r2
 800a448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	2b00      	cmp	r3, #0
 800a454:	d044      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d107      	bne.n	800a46e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a45e:	4b47      	ldr	r3, [pc, #284]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d119      	bne.n	800a49e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e07f      	b.n	800a56e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	2b02      	cmp	r3, #2
 800a474:	d003      	beq.n	800a47e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	d107      	bne.n	800a48e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a47e:	4b3f      	ldr	r3, [pc, #252]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d109      	bne.n	800a49e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e06f      	b.n	800a56e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a48e:	4b3b      	ldr	r3, [pc, #236]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0302 	and.w	r3, r3, #2
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e067      	b.n	800a56e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a49e:	4b37      	ldr	r3, [pc, #220]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f023 0203 	bic.w	r2, r3, #3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	4934      	ldr	r1, [pc, #208]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a4b0:	f7fe fae8 	bl	8008a84 <HAL_GetTick>
 800a4b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4b6:	e00a      	b.n	800a4ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4b8:	f7fe fae4 	bl	8008a84 <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d901      	bls.n	800a4ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e04f      	b.n	800a56e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4ce:	4b2b      	ldr	r3, [pc, #172]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	f003 020c 	and.w	r2, r3, #12
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d1eb      	bne.n	800a4b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a4e0:	4b25      	ldr	r3, [pc, #148]	; (800a578 <HAL_RCC_ClockConfig+0x1b8>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 030f 	and.w	r3, r3, #15
 800a4e8:	683a      	ldr	r2, [r7, #0]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d20c      	bcs.n	800a508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4ee:	4b22      	ldr	r3, [pc, #136]	; (800a578 <HAL_RCC_ClockConfig+0x1b8>)
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	b2d2      	uxtb	r2, r2
 800a4f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4f6:	4b20      	ldr	r3, [pc, #128]	; (800a578 <HAL_RCC_ClockConfig+0x1b8>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 030f 	and.w	r3, r3, #15
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	429a      	cmp	r2, r3
 800a502:	d001      	beq.n	800a508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e032      	b.n	800a56e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b00      	cmp	r3, #0
 800a512:	d008      	beq.n	800a526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a514:	4b19      	ldr	r3, [pc, #100]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	4916      	ldr	r1, [pc, #88]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a522:	4313      	orrs	r3, r2
 800a524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 0308 	and.w	r3, r3, #8
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d009      	beq.n	800a546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a532:	4b12      	ldr	r3, [pc, #72]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	490e      	ldr	r1, [pc, #56]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a542:	4313      	orrs	r3, r2
 800a544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a546:	f000 f821 	bl	800a58c <HAL_RCC_GetSysClockFreq>
 800a54a:	4602      	mov	r2, r0
 800a54c:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <HAL_RCC_ClockConfig+0x1bc>)
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	091b      	lsrs	r3, r3, #4
 800a552:	f003 030f 	and.w	r3, r3, #15
 800a556:	490a      	ldr	r1, [pc, #40]	; (800a580 <HAL_RCC_ClockConfig+0x1c0>)
 800a558:	5ccb      	ldrb	r3, [r1, r3]
 800a55a:	fa22 f303 	lsr.w	r3, r2, r3
 800a55e:	4a09      	ldr	r2, [pc, #36]	; (800a584 <HAL_RCC_ClockConfig+0x1c4>)
 800a560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a562:	4b09      	ldr	r3, [pc, #36]	; (800a588 <HAL_RCC_ClockConfig+0x1c8>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe fa48 	bl	80089fc <HAL_InitTick>

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	40023c00 	.word	0x40023c00
 800a57c:	40023800 	.word	0x40023800
 800a580:	0800eeac 	.word	0x0800eeac
 800a584:	2000001c 	.word	0x2000001c
 800a588:	20000020 	.word	0x20000020

0800a58c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a58c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a590:	b094      	sub	sp, #80	; 0x50
 800a592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a594:	2300      	movs	r3, #0
 800a596:	647b      	str	r3, [r7, #68]	; 0x44
 800a598:	2300      	movs	r3, #0
 800a59a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a59c:	2300      	movs	r3, #0
 800a59e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a5a4:	4b79      	ldr	r3, [pc, #484]	; (800a78c <HAL_RCC_GetSysClockFreq+0x200>)
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	f003 030c 	and.w	r3, r3, #12
 800a5ac:	2b08      	cmp	r3, #8
 800a5ae:	d00d      	beq.n	800a5cc <HAL_RCC_GetSysClockFreq+0x40>
 800a5b0:	2b08      	cmp	r3, #8
 800a5b2:	f200 80e1 	bhi.w	800a778 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d002      	beq.n	800a5c0 <HAL_RCC_GetSysClockFreq+0x34>
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	d003      	beq.n	800a5c6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a5be:	e0db      	b.n	800a778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a5c0:	4b73      	ldr	r3, [pc, #460]	; (800a790 <HAL_RCC_GetSysClockFreq+0x204>)
 800a5c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a5c4:	e0db      	b.n	800a77e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a5c6:	4b73      	ldr	r3, [pc, #460]	; (800a794 <HAL_RCC_GetSysClockFreq+0x208>)
 800a5c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a5ca:	e0d8      	b.n	800a77e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a5cc:	4b6f      	ldr	r3, [pc, #444]	; (800a78c <HAL_RCC_GetSysClockFreq+0x200>)
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a5d6:	4b6d      	ldr	r3, [pc, #436]	; (800a78c <HAL_RCC_GetSysClockFreq+0x200>)
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d063      	beq.n	800a6aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5e2:	4b6a      	ldr	r3, [pc, #424]	; (800a78c <HAL_RCC_GetSysClockFreq+0x200>)
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	099b      	lsrs	r3, r3, #6
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f4:	633b      	str	r3, [r7, #48]	; 0x30
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a5fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a5fe:	4622      	mov	r2, r4
 800a600:	462b      	mov	r3, r5
 800a602:	f04f 0000 	mov.w	r0, #0
 800a606:	f04f 0100 	mov.w	r1, #0
 800a60a:	0159      	lsls	r1, r3, #5
 800a60c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a610:	0150      	lsls	r0, r2, #5
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	4621      	mov	r1, r4
 800a618:	1a51      	subs	r1, r2, r1
 800a61a:	6139      	str	r1, [r7, #16]
 800a61c:	4629      	mov	r1, r5
 800a61e:	eb63 0301 	sbc.w	r3, r3, r1
 800a622:	617b      	str	r3, [r7, #20]
 800a624:	f04f 0200 	mov.w	r2, #0
 800a628:	f04f 0300 	mov.w	r3, #0
 800a62c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a630:	4659      	mov	r1, fp
 800a632:	018b      	lsls	r3, r1, #6
 800a634:	4651      	mov	r1, sl
 800a636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a63a:	4651      	mov	r1, sl
 800a63c:	018a      	lsls	r2, r1, #6
 800a63e:	4651      	mov	r1, sl
 800a640:	ebb2 0801 	subs.w	r8, r2, r1
 800a644:	4659      	mov	r1, fp
 800a646:	eb63 0901 	sbc.w	r9, r3, r1
 800a64a:	f04f 0200 	mov.w	r2, #0
 800a64e:	f04f 0300 	mov.w	r3, #0
 800a652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a65a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a65e:	4690      	mov	r8, r2
 800a660:	4699      	mov	r9, r3
 800a662:	4623      	mov	r3, r4
 800a664:	eb18 0303 	adds.w	r3, r8, r3
 800a668:	60bb      	str	r3, [r7, #8]
 800a66a:	462b      	mov	r3, r5
 800a66c:	eb49 0303 	adc.w	r3, r9, r3
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	f04f 0200 	mov.w	r2, #0
 800a676:	f04f 0300 	mov.w	r3, #0
 800a67a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a67e:	4629      	mov	r1, r5
 800a680:	024b      	lsls	r3, r1, #9
 800a682:	4621      	mov	r1, r4
 800a684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a688:	4621      	mov	r1, r4
 800a68a:	024a      	lsls	r2, r1, #9
 800a68c:	4610      	mov	r0, r2
 800a68e:	4619      	mov	r1, r3
 800a690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a692:	2200      	movs	r2, #0
 800a694:	62bb      	str	r3, [r7, #40]	; 0x28
 800a696:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a69c:	f7f6 fa3c 	bl	8000b18 <__aeabi_uldivmod>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6a8:	e058      	b.n	800a75c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6aa:	4b38      	ldr	r3, [pc, #224]	; (800a78c <HAL_RCC_GetSysClockFreq+0x200>)
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	099b      	lsrs	r3, r3, #6
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a6ba:	623b      	str	r3, [r7, #32]
 800a6bc:	2300      	movs	r3, #0
 800a6be:	627b      	str	r3, [r7, #36]	; 0x24
 800a6c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a6c4:	4642      	mov	r2, r8
 800a6c6:	464b      	mov	r3, r9
 800a6c8:	f04f 0000 	mov.w	r0, #0
 800a6cc:	f04f 0100 	mov.w	r1, #0
 800a6d0:	0159      	lsls	r1, r3, #5
 800a6d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a6d6:	0150      	lsls	r0, r2, #5
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4641      	mov	r1, r8
 800a6de:	ebb2 0a01 	subs.w	sl, r2, r1
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	eb63 0b01 	sbc.w	fp, r3, r1
 800a6e8:	f04f 0200 	mov.w	r2, #0
 800a6ec:	f04f 0300 	mov.w	r3, #0
 800a6f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a6f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a6f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a6fc:	ebb2 040a 	subs.w	r4, r2, sl
 800a700:	eb63 050b 	sbc.w	r5, r3, fp
 800a704:	f04f 0200 	mov.w	r2, #0
 800a708:	f04f 0300 	mov.w	r3, #0
 800a70c:	00eb      	lsls	r3, r5, #3
 800a70e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a712:	00e2      	lsls	r2, r4, #3
 800a714:	4614      	mov	r4, r2
 800a716:	461d      	mov	r5, r3
 800a718:	4643      	mov	r3, r8
 800a71a:	18e3      	adds	r3, r4, r3
 800a71c:	603b      	str	r3, [r7, #0]
 800a71e:	464b      	mov	r3, r9
 800a720:	eb45 0303 	adc.w	r3, r5, r3
 800a724:	607b      	str	r3, [r7, #4]
 800a726:	f04f 0200 	mov.w	r2, #0
 800a72a:	f04f 0300 	mov.w	r3, #0
 800a72e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a732:	4629      	mov	r1, r5
 800a734:	028b      	lsls	r3, r1, #10
 800a736:	4621      	mov	r1, r4
 800a738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a73c:	4621      	mov	r1, r4
 800a73e:	028a      	lsls	r2, r1, #10
 800a740:	4610      	mov	r0, r2
 800a742:	4619      	mov	r1, r3
 800a744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a746:	2200      	movs	r2, #0
 800a748:	61bb      	str	r3, [r7, #24]
 800a74a:	61fa      	str	r2, [r7, #28]
 800a74c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a750:	f7f6 f9e2 	bl	8000b18 <__aeabi_uldivmod>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	4613      	mov	r3, r2
 800a75a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a75c:	4b0b      	ldr	r3, [pc, #44]	; (800a78c <HAL_RCC_GetSysClockFreq+0x200>)
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	0c1b      	lsrs	r3, r3, #16
 800a762:	f003 0303 	and.w	r3, r3, #3
 800a766:	3301      	adds	r3, #1
 800a768:	005b      	lsls	r3, r3, #1
 800a76a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a76c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a76e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a770:	fbb2 f3f3 	udiv	r3, r2, r3
 800a774:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a776:	e002      	b.n	800a77e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a778:	4b05      	ldr	r3, [pc, #20]	; (800a790 <HAL_RCC_GetSysClockFreq+0x204>)
 800a77a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a77c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a77e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a780:	4618      	mov	r0, r3
 800a782:	3750      	adds	r7, #80	; 0x50
 800a784:	46bd      	mov	sp, r7
 800a786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a78a:	bf00      	nop
 800a78c:	40023800 	.word	0x40023800
 800a790:	00f42400 	.word	0x00f42400
 800a794:	007a1200 	.word	0x007a1200

0800a798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a798:	b480      	push	{r7}
 800a79a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a79c:	4b03      	ldr	r3, [pc, #12]	; (800a7ac <HAL_RCC_GetHCLKFreq+0x14>)
 800a79e:	681b      	ldr	r3, [r3, #0]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	2000001c 	.word	0x2000001c

0800a7b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a7b4:	f7ff fff0 	bl	800a798 <HAL_RCC_GetHCLKFreq>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	4b05      	ldr	r3, [pc, #20]	; (800a7d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	0a9b      	lsrs	r3, r3, #10
 800a7c0:	f003 0307 	and.w	r3, r3, #7
 800a7c4:	4903      	ldr	r1, [pc, #12]	; (800a7d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7c6:	5ccb      	ldrb	r3, [r1, r3]
 800a7c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	40023800 	.word	0x40023800
 800a7d4:	0800eebc 	.word	0x0800eebc

0800a7d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a7dc:	f7ff ffdc 	bl	800a798 <HAL_RCC_GetHCLKFreq>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	4b05      	ldr	r3, [pc, #20]	; (800a7f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	0b5b      	lsrs	r3, r3, #13
 800a7e8:	f003 0307 	and.w	r3, r3, #7
 800a7ec:	4903      	ldr	r1, [pc, #12]	; (800a7fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7ee:	5ccb      	ldrb	r3, [r1, r3]
 800a7f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	40023800 	.word	0x40023800
 800a7fc:	0800eebc 	.word	0x0800eebc

0800a800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a80c:	2300      	movs	r3, #0
 800a80e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10b      	bne.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a824:	2b00      	cmp	r3, #0
 800a826:	d105      	bne.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a830:	2b00      	cmp	r3, #0
 800a832:	d075      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a834:	4b91      	ldr	r3, [pc, #580]	; (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a83a:	f7fe f923 	bl	8008a84 <HAL_GetTick>
 800a83e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a840:	e008      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a842:	f7fe f91f 	bl	8008a84 <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d901      	bls.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e189      	b.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a854:	4b8a      	ldr	r3, [pc, #552]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1f0      	bne.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d009      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	019a      	lsls	r2, r3, #6
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	071b      	lsls	r3, r3, #28
 800a878:	4981      	ldr	r1, [pc, #516]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a87a:	4313      	orrs	r3, r2
 800a87c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0302 	and.w	r3, r3, #2
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d01f      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a88c:	4b7c      	ldr	r3, [pc, #496]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a892:	0f1b      	lsrs	r3, r3, #28
 800a894:	f003 0307 	and.w	r3, r3, #7
 800a898:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	019a      	lsls	r2, r3, #6
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	061b      	lsls	r3, r3, #24
 800a8a6:	431a      	orrs	r2, r3
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	071b      	lsls	r3, r3, #28
 800a8ac:	4974      	ldr	r1, [pc, #464]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a8b4:	4b72      	ldr	r3, [pc, #456]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a8b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8ba:	f023 021f 	bic.w	r2, r3, #31
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	496e      	ldr	r1, [pc, #440]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00d      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	019a      	lsls	r2, r3, #6
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	061b      	lsls	r3, r3, #24
 800a8e4:	431a      	orrs	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	071b      	lsls	r3, r3, #28
 800a8ec:	4964      	ldr	r1, [pc, #400]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a8f4:	4b61      	ldr	r3, [pc, #388]	; (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a8fa:	f7fe f8c3 	bl	8008a84 <HAL_GetTick>
 800a8fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a900:	e008      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a902:	f7fe f8bf 	bl	8008a84 <HAL_GetTick>
 800a906:	4602      	mov	r2, r0
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d901      	bls.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e129      	b.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a914:	4b5a      	ldr	r3, [pc, #360]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d0f0      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0304 	and.w	r3, r3, #4
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d105      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a934:	2b00      	cmp	r3, #0
 800a936:	d079      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a938:	4b52      	ldr	r3, [pc, #328]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a93e:	f7fe f8a1 	bl	8008a84 <HAL_GetTick>
 800a942:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a944:	e008      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a946:	f7fe f89d 	bl	8008a84 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	2b02      	cmp	r3, #2
 800a952:	d901      	bls.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e107      	b.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a958:	4b49      	ldr	r3, [pc, #292]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a964:	d0ef      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 0304 	and.w	r3, r3, #4
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d020      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a972:	4b43      	ldr	r3, [pc, #268]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a978:	0f1b      	lsrs	r3, r3, #28
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	019a      	lsls	r2, r3, #6
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	061b      	lsls	r3, r3, #24
 800a98c:	431a      	orrs	r2, r3
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	071b      	lsls	r3, r3, #28
 800a992:	493b      	ldr	r1, [pc, #236]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a994:	4313      	orrs	r3, r2
 800a996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a99a:	4b39      	ldr	r3, [pc, #228]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a99c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	021b      	lsls	r3, r3, #8
 800a9ac:	4934      	ldr	r1, [pc, #208]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0308 	and.w	r3, r3, #8
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d01e      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a9c0:	4b2f      	ldr	r3, [pc, #188]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c6:	0e1b      	lsrs	r3, r3, #24
 800a9c8:	f003 030f 	and.w	r3, r3, #15
 800a9cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	019a      	lsls	r2, r3, #6
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	061b      	lsls	r3, r3, #24
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	071b      	lsls	r3, r3, #28
 800a9e0:	4927      	ldr	r1, [pc, #156]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a9e8:	4b25      	ldr	r3, [pc, #148]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a9ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	4922      	ldr	r1, [pc, #136]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a9fe:	4b21      	ldr	r3, [pc, #132]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800aa00:	2201      	movs	r2, #1
 800aa02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aa04:	f7fe f83e 	bl	8008a84 <HAL_GetTick>
 800aa08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa0a:	e008      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800aa0c:	f7fe f83a 	bl	8008a84 <HAL_GetTick>
 800aa10:	4602      	mov	r2, r0
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d901      	bls.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e0a4      	b.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa1e:	4b18      	ldr	r3, [pc, #96]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa2a:	d1ef      	bne.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0320 	and.w	r3, r3, #32
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 808b 	beq.w	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa42:	4a0f      	ldr	r2, [pc, #60]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aa44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa48:	6413      	str	r3, [r2, #64]	; 0x40
 800aa4a:	4b0d      	ldr	r3, [pc, #52]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800aa56:	4b0c      	ldr	r3, [pc, #48]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a0b      	ldr	r2, [pc, #44]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800aa5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aa62:	f7fe f80f 	bl	8008a84 <HAL_GetTick>
 800aa66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800aa68:	e010      	b.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800aa6a:	f7fe f80b 	bl	8008a84 <HAL_GetTick>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d909      	bls.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	e075      	b.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800aa7c:	42470068 	.word	0x42470068
 800aa80:	40023800 	.word	0x40023800
 800aa84:	42470070 	.word	0x42470070
 800aa88:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800aa8c:	4b38      	ldr	r3, [pc, #224]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d0e8      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aa98:	4b36      	ldr	r3, [pc, #216]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800aa9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaa0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d02f      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d028      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aab6:	4b2f      	ldr	r3, [pc, #188]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800aab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aabe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aac0:	4b2d      	ldr	r3, [pc, #180]	; (800ab78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800aac2:	2201      	movs	r2, #1
 800aac4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aac6:	4b2c      	ldr	r3, [pc, #176]	; (800ab78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800aacc:	4a29      	ldr	r2, [pc, #164]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800aad2:	4b28      	ldr	r3, [pc, #160]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800aad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d114      	bne.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800aade:	f7fd ffd1 	bl	8008a84 <HAL_GetTick>
 800aae2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aae4:	e00a      	b.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aae6:	f7fd ffcd 	bl	8008a84 <HAL_GetTick>
 800aaea:	4602      	mov	r2, r0
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d901      	bls.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e035      	b.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aafc:	4b1d      	ldr	r3, [pc, #116]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800aafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab00:	f003 0302 	and.w	r3, r3, #2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d0ee      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab14:	d10d      	bne.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800ab16:	4b17      	ldr	r3, [pc, #92]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ab26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab2a:	4912      	ldr	r1, [pc, #72]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	608b      	str	r3, [r1, #8]
 800ab30:	e005      	b.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800ab32:	4b10      	ldr	r3, [pc, #64]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	4a0f      	ldr	r2, [pc, #60]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ab3c:	6093      	str	r3, [r2, #8]
 800ab3e:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab4a:	490a      	ldr	r1, [pc, #40]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 0310 	and.w	r3, r3, #16
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d004      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ab62:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800ab64:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	40007000 	.word	0x40007000
 800ab74:	40023800 	.word	0x40023800
 800ab78:	42470e40 	.word	0x42470e40
 800ab7c:	424711e0 	.word	0x424711e0

0800ab80 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e025      	b.n	800abe0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d106      	bne.n	800abae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7fb fd6b 	bl	8006684 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2202      	movs	r2, #2
 800abb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	3304      	adds	r3, #4
 800abbe:	4619      	mov	r1, r3
 800abc0:	4610      	mov	r0, r2
 800abc2:	f002 f829 	bl	800cc18 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6818      	ldr	r0, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	461a      	mov	r2, r3
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	f002 f87e 	bl	800ccd2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800abfa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800abfc:	7dfb      	ldrb	r3, [r7, #23]
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d101      	bne.n	800ac06 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800ac02:	2302      	movs	r3, #2
 800ac04:	e021      	b.n	800ac4a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d002      	beq.n	800ac12 <HAL_SDRAM_SendCommand+0x2a>
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
 800ac0e:	2b05      	cmp	r3, #5
 800ac10:	d118      	bne.n	800ac44 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2202      	movs	r2, #2
 800ac16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	68b9      	ldr	r1, [r7, #8]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f002 f8be 	bl	800cda4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d104      	bne.n	800ac3a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2205      	movs	r2, #5
 800ac34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ac38:	e006      	b.n	800ac48 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ac42:	e001      	b.n	800ac48 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e000      	b.n	800ac4a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e07b      	b.n	800ad5c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d108      	bne.n	800ac7e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac74:	d009      	beq.n	800ac8a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	61da      	str	r2, [r3, #28]
 800ac7c:	e005      	b.n	800ac8a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d106      	bne.n	800acaa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f7fb fb5b 	bl	8006360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2202      	movs	r2, #2
 800acae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acc0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800acd2:	431a      	orrs	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acdc:	431a      	orrs	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	f003 0302 	and.w	r3, r3, #2
 800ace6:	431a      	orrs	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	431a      	orrs	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acfa:	431a      	orrs	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad04:	431a      	orrs	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad0e:	ea42 0103 	orr.w	r1, r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	0c1b      	lsrs	r3, r3, #16
 800ad28:	f003 0104 	and.w	r1, r3, #4
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	f003 0210 	and.w	r2, r3, #16
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	430a      	orrs	r2, r1
 800ad3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	69da      	ldr	r2, [r3, #28]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d101      	bne.n	800ad76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e041      	b.n	800adfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7fb fb30 	bl	80063f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2202      	movs	r2, #2
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	3304      	adds	r3, #4
 800ada0:	4619      	mov	r1, r3
 800ada2:	4610      	mov	r0, r2
 800ada4:	f000 fc84 	bl	800b6b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d001      	beq.n	800ae1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e04e      	b.n	800aeba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2202      	movs	r2, #2
 800ae20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68da      	ldr	r2, [r3, #12]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f042 0201 	orr.w	r2, r2, #1
 800ae32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a23      	ldr	r2, [pc, #140]	; (800aec8 <HAL_TIM_Base_Start_IT+0xc4>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d022      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x80>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae46:	d01d      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x80>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a1f      	ldr	r2, [pc, #124]	; (800aecc <HAL_TIM_Base_Start_IT+0xc8>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d018      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x80>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a1e      	ldr	r2, [pc, #120]	; (800aed0 <HAL_TIM_Base_Start_IT+0xcc>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d013      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x80>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a1c      	ldr	r2, [pc, #112]	; (800aed4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d00e      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x80>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a1b      	ldr	r2, [pc, #108]	; (800aed8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d009      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x80>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a19      	ldr	r2, [pc, #100]	; (800aedc <HAL_TIM_Base_Start_IT+0xd8>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d004      	beq.n	800ae84 <HAL_TIM_Base_Start_IT+0x80>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a18      	ldr	r2, [pc, #96]	; (800aee0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d111      	bne.n	800aea8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	f003 0307 	and.w	r3, r3, #7
 800ae8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b06      	cmp	r3, #6
 800ae94:	d010      	beq.n	800aeb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f042 0201 	orr.w	r2, r2, #1
 800aea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aea6:	e007      	b.n	800aeb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f042 0201 	orr.w	r2, r2, #1
 800aeb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	40010000 	.word	0x40010000
 800aecc:	40000400 	.word	0x40000400
 800aed0:	40000800 	.word	0x40000800
 800aed4:	40000c00 	.word	0x40000c00
 800aed8:	40010400 	.word	0x40010400
 800aedc:	40014000 	.word	0x40014000
 800aee0:	40001800 	.word	0x40001800

0800aee4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e041      	b.n	800af7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f839 	bl	800af82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3304      	adds	r3, #4
 800af20:	4619      	mov	r1, r3
 800af22:	4610      	mov	r0, r2
 800af24:	f000 fbc4 	bl	800b6b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800af82:	b480      	push	{r7}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800af8a:	bf00      	nop
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
	...

0800af98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d109      	bne.n	800afbc <HAL_TIM_PWM_Start+0x24>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	bf14      	ite	ne
 800afb4:	2301      	movne	r3, #1
 800afb6:	2300      	moveq	r3, #0
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	e022      	b.n	800b002 <HAL_TIM_PWM_Start+0x6a>
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b04      	cmp	r3, #4
 800afc0:	d109      	bne.n	800afd6 <HAL_TIM_PWM_Start+0x3e>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b01      	cmp	r3, #1
 800afcc:	bf14      	ite	ne
 800afce:	2301      	movne	r3, #1
 800afd0:	2300      	moveq	r3, #0
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	e015      	b.n	800b002 <HAL_TIM_PWM_Start+0x6a>
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d109      	bne.n	800aff0 <HAL_TIM_PWM_Start+0x58>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	bf14      	ite	ne
 800afe8:	2301      	movne	r3, #1
 800afea:	2300      	moveq	r3, #0
 800afec:	b2db      	uxtb	r3, r3
 800afee:	e008      	b.n	800b002 <HAL_TIM_PWM_Start+0x6a>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b01      	cmp	r3, #1
 800affa:	bf14      	ite	ne
 800affc:	2301      	movne	r3, #1
 800affe:	2300      	moveq	r3, #0
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	e07c      	b.n	800b104 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d104      	bne.n	800b01a <HAL_TIM_PWM_Start+0x82>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2202      	movs	r2, #2
 800b014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b018:	e013      	b.n	800b042 <HAL_TIM_PWM_Start+0xaa>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b04      	cmp	r3, #4
 800b01e:	d104      	bne.n	800b02a <HAL_TIM_PWM_Start+0x92>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2202      	movs	r2, #2
 800b024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b028:	e00b      	b.n	800b042 <HAL_TIM_PWM_Start+0xaa>
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	2b08      	cmp	r3, #8
 800b02e:	d104      	bne.n	800b03a <HAL_TIM_PWM_Start+0xa2>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2202      	movs	r2, #2
 800b034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b038:	e003      	b.n	800b042 <HAL_TIM_PWM_Start+0xaa>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2202      	movs	r2, #2
 800b03e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2201      	movs	r2, #1
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 fe1a 	bl	800bc84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a2d      	ldr	r2, [pc, #180]	; (800b10c <HAL_TIM_PWM_Start+0x174>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d004      	beq.n	800b064 <HAL_TIM_PWM_Start+0xcc>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a2c      	ldr	r2, [pc, #176]	; (800b110 <HAL_TIM_PWM_Start+0x178>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d101      	bne.n	800b068 <HAL_TIM_PWM_Start+0xd0>
 800b064:	2301      	movs	r3, #1
 800b066:	e000      	b.n	800b06a <HAL_TIM_PWM_Start+0xd2>
 800b068:	2300      	movs	r3, #0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d007      	beq.n	800b07e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b07c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a22      	ldr	r2, [pc, #136]	; (800b10c <HAL_TIM_PWM_Start+0x174>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d022      	beq.n	800b0ce <HAL_TIM_PWM_Start+0x136>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b090:	d01d      	beq.n	800b0ce <HAL_TIM_PWM_Start+0x136>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a1f      	ldr	r2, [pc, #124]	; (800b114 <HAL_TIM_PWM_Start+0x17c>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d018      	beq.n	800b0ce <HAL_TIM_PWM_Start+0x136>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a1d      	ldr	r2, [pc, #116]	; (800b118 <HAL_TIM_PWM_Start+0x180>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d013      	beq.n	800b0ce <HAL_TIM_PWM_Start+0x136>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a1c      	ldr	r2, [pc, #112]	; (800b11c <HAL_TIM_PWM_Start+0x184>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d00e      	beq.n	800b0ce <HAL_TIM_PWM_Start+0x136>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a16      	ldr	r2, [pc, #88]	; (800b110 <HAL_TIM_PWM_Start+0x178>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d009      	beq.n	800b0ce <HAL_TIM_PWM_Start+0x136>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a18      	ldr	r2, [pc, #96]	; (800b120 <HAL_TIM_PWM_Start+0x188>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d004      	beq.n	800b0ce <HAL_TIM_PWM_Start+0x136>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a16      	ldr	r2, [pc, #88]	; (800b124 <HAL_TIM_PWM_Start+0x18c>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d111      	bne.n	800b0f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f003 0307 	and.w	r3, r3, #7
 800b0d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2b06      	cmp	r3, #6
 800b0de:	d010      	beq.n	800b102 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f042 0201 	orr.w	r2, r2, #1
 800b0ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0f0:	e007      	b.n	800b102 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f042 0201 	orr.w	r2, r2, #1
 800b100:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	40010000 	.word	0x40010000
 800b110:	40010400 	.word	0x40010400
 800b114:	40000400 	.word	0x40000400
 800b118:	40000800 	.word	0x40000800
 800b11c:	40000c00 	.word	0x40000c00
 800b120:	40014000 	.word	0x40014000
 800b124:	40001800 	.word	0x40001800

0800b128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d122      	bne.n	800b184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	f003 0302 	and.w	r3, r3, #2
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d11b      	bne.n	800b184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f06f 0202 	mvn.w	r2, #2
 800b154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2201      	movs	r2, #1
 800b15a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	f003 0303 	and.w	r3, r3, #3
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fa81 	bl	800b672 <HAL_TIM_IC_CaptureCallback>
 800b170:	e005      	b.n	800b17e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fa73 	bl	800b65e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fa84 	bl	800b686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	f003 0304 	and.w	r3, r3, #4
 800b18e:	2b04      	cmp	r3, #4
 800b190:	d122      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	f003 0304 	and.w	r3, r3, #4
 800b19c:	2b04      	cmp	r3, #4
 800b19e:	d11b      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f06f 0204 	mvn.w	r2, #4
 800b1a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fa57 	bl	800b672 <HAL_TIM_IC_CaptureCallback>
 800b1c4:	e005      	b.n	800b1d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fa49 	bl	800b65e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fa5a 	bl	800b686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f003 0308 	and.w	r3, r3, #8
 800b1e2:	2b08      	cmp	r3, #8
 800b1e4:	d122      	bne.n	800b22c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f003 0308 	and.w	r3, r3, #8
 800b1f0:	2b08      	cmp	r3, #8
 800b1f2:	d11b      	bne.n	800b22c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f06f 0208 	mvn.w	r2, #8
 800b1fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2204      	movs	r2, #4
 800b202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	69db      	ldr	r3, [r3, #28]
 800b20a:	f003 0303 	and.w	r3, r3, #3
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa2d 	bl	800b672 <HAL_TIM_IC_CaptureCallback>
 800b218:	e005      	b.n	800b226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fa1f 	bl	800b65e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fa30 	bl	800b686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	f003 0310 	and.w	r3, r3, #16
 800b236:	2b10      	cmp	r3, #16
 800b238:	d122      	bne.n	800b280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f003 0310 	and.w	r3, r3, #16
 800b244:	2b10      	cmp	r3, #16
 800b246:	d11b      	bne.n	800b280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f06f 0210 	mvn.w	r2, #16
 800b250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2208      	movs	r2, #8
 800b256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	69db      	ldr	r3, [r3, #28]
 800b25e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fa03 	bl	800b672 <HAL_TIM_IC_CaptureCallback>
 800b26c:	e005      	b.n	800b27a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f9f5 	bl	800b65e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 fa06 	bl	800b686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d10e      	bne.n	800b2ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f003 0301 	and.w	r3, r3, #1
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d107      	bne.n	800b2ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f06f 0201 	mvn.w	r2, #1
 800b2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f9cf 	bl	800b64a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b6:	2b80      	cmp	r3, #128	; 0x80
 800b2b8:	d10e      	bne.n	800b2d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c4:	2b80      	cmp	r3, #128	; 0x80
 800b2c6:	d107      	bne.n	800b2d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fd82 	bl	800bddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2e2:	2b40      	cmp	r3, #64	; 0x40
 800b2e4:	d10e      	bne.n	800b304 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f0:	2b40      	cmp	r3, #64	; 0x40
 800b2f2:	d107      	bne.n	800b304 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b2fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f9cb 	bl	800b69a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	f003 0320 	and.w	r3, r3, #32
 800b30e:	2b20      	cmp	r3, #32
 800b310:	d10e      	bne.n	800b330 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	f003 0320 	and.w	r3, r3, #32
 800b31c:	2b20      	cmp	r3, #32
 800b31e:	d107      	bne.n	800b330 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f06f 0220 	mvn.w	r2, #32
 800b328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fd4c 	bl	800bdc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d101      	bne.n	800b356 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b352:	2302      	movs	r3, #2
 800b354:	e0ae      	b.n	800b4b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2201      	movs	r2, #1
 800b35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b0c      	cmp	r3, #12
 800b362:	f200 809f 	bhi.w	800b4a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b366:	a201      	add	r2, pc, #4	; (adr r2, 800b36c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b3a1 	.word	0x0800b3a1
 800b370:	0800b4a5 	.word	0x0800b4a5
 800b374:	0800b4a5 	.word	0x0800b4a5
 800b378:	0800b4a5 	.word	0x0800b4a5
 800b37c:	0800b3e1 	.word	0x0800b3e1
 800b380:	0800b4a5 	.word	0x0800b4a5
 800b384:	0800b4a5 	.word	0x0800b4a5
 800b388:	0800b4a5 	.word	0x0800b4a5
 800b38c:	0800b423 	.word	0x0800b423
 800b390:	0800b4a5 	.word	0x0800b4a5
 800b394:	0800b4a5 	.word	0x0800b4a5
 800b398:	0800b4a5 	.word	0x0800b4a5
 800b39c:	0800b463 	.word	0x0800b463
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68b9      	ldr	r1, [r7, #8]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f000 fa22 	bl	800b7f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	699a      	ldr	r2, [r3, #24]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f042 0208 	orr.w	r2, r2, #8
 800b3ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	699a      	ldr	r2, [r3, #24]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f022 0204 	bic.w	r2, r2, #4
 800b3ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6999      	ldr	r1, [r3, #24]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	691a      	ldr	r2, [r3, #16]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	619a      	str	r2, [r3, #24]
      break;
 800b3de:	e064      	b.n	800b4aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68b9      	ldr	r1, [r7, #8]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f000 fa72 	bl	800b8d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	699a      	ldr	r2, [r3, #24]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	699a      	ldr	r2, [r3, #24]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b40a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6999      	ldr	r1, [r3, #24]
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	021a      	lsls	r2, r3, #8
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	430a      	orrs	r2, r1
 800b41e:	619a      	str	r2, [r3, #24]
      break;
 800b420:	e043      	b.n	800b4aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68b9      	ldr	r1, [r7, #8]
 800b428:	4618      	mov	r0, r3
 800b42a:	f000 fac7 	bl	800b9bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	69da      	ldr	r2, [r3, #28]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f042 0208 	orr.w	r2, r2, #8
 800b43c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	69da      	ldr	r2, [r3, #28]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f022 0204 	bic.w	r2, r2, #4
 800b44c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	69d9      	ldr	r1, [r3, #28]
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	691a      	ldr	r2, [r3, #16]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	430a      	orrs	r2, r1
 800b45e:	61da      	str	r2, [r3, #28]
      break;
 800b460:	e023      	b.n	800b4aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68b9      	ldr	r1, [r7, #8]
 800b468:	4618      	mov	r0, r3
 800b46a:	f000 fb1b 	bl	800baa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	69da      	ldr	r2, [r3, #28]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b47c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	69da      	ldr	r2, [r3, #28]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b48c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	69d9      	ldr	r1, [r3, #28]
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	021a      	lsls	r2, r3, #8
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	61da      	str	r2, [r3, #28]
      break;
 800b4a2:	e002      	b.n	800b4aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	75fb      	strb	r3, [r7, #23]
      break;
 800b4a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d101      	bne.n	800b4d8 <HAL_TIM_ConfigClockSource+0x1c>
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	e0b4      	b.n	800b642 <HAL_TIM_ConfigClockSource+0x186>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b4f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b510:	d03e      	beq.n	800b590 <HAL_TIM_ConfigClockSource+0xd4>
 800b512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b516:	f200 8087 	bhi.w	800b628 <HAL_TIM_ConfigClockSource+0x16c>
 800b51a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b51e:	f000 8086 	beq.w	800b62e <HAL_TIM_ConfigClockSource+0x172>
 800b522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b526:	d87f      	bhi.n	800b628 <HAL_TIM_ConfigClockSource+0x16c>
 800b528:	2b70      	cmp	r3, #112	; 0x70
 800b52a:	d01a      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0xa6>
 800b52c:	2b70      	cmp	r3, #112	; 0x70
 800b52e:	d87b      	bhi.n	800b628 <HAL_TIM_ConfigClockSource+0x16c>
 800b530:	2b60      	cmp	r3, #96	; 0x60
 800b532:	d050      	beq.n	800b5d6 <HAL_TIM_ConfigClockSource+0x11a>
 800b534:	2b60      	cmp	r3, #96	; 0x60
 800b536:	d877      	bhi.n	800b628 <HAL_TIM_ConfigClockSource+0x16c>
 800b538:	2b50      	cmp	r3, #80	; 0x50
 800b53a:	d03c      	beq.n	800b5b6 <HAL_TIM_ConfigClockSource+0xfa>
 800b53c:	2b50      	cmp	r3, #80	; 0x50
 800b53e:	d873      	bhi.n	800b628 <HAL_TIM_ConfigClockSource+0x16c>
 800b540:	2b40      	cmp	r3, #64	; 0x40
 800b542:	d058      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x13a>
 800b544:	2b40      	cmp	r3, #64	; 0x40
 800b546:	d86f      	bhi.n	800b628 <HAL_TIM_ConfigClockSource+0x16c>
 800b548:	2b30      	cmp	r3, #48	; 0x30
 800b54a:	d064      	beq.n	800b616 <HAL_TIM_ConfigClockSource+0x15a>
 800b54c:	2b30      	cmp	r3, #48	; 0x30
 800b54e:	d86b      	bhi.n	800b628 <HAL_TIM_ConfigClockSource+0x16c>
 800b550:	2b20      	cmp	r3, #32
 800b552:	d060      	beq.n	800b616 <HAL_TIM_ConfigClockSource+0x15a>
 800b554:	2b20      	cmp	r3, #32
 800b556:	d867      	bhi.n	800b628 <HAL_TIM_ConfigClockSource+0x16c>
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d05c      	beq.n	800b616 <HAL_TIM_ConfigClockSource+0x15a>
 800b55c:	2b10      	cmp	r3, #16
 800b55e:	d05a      	beq.n	800b616 <HAL_TIM_ConfigClockSource+0x15a>
 800b560:	e062      	b.n	800b628 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6818      	ldr	r0, [r3, #0]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	6899      	ldr	r1, [r3, #8]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	f000 fb67 	bl	800bc44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b584:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	609a      	str	r2, [r3, #8]
      break;
 800b58e:	e04f      	b.n	800b630 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6818      	ldr	r0, [r3, #0]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	6899      	ldr	r1, [r3, #8]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	f000 fb50 	bl	800bc44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	689a      	ldr	r2, [r3, #8]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5b2:	609a      	str	r2, [r3, #8]
      break;
 800b5b4:	e03c      	b.n	800b630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6818      	ldr	r0, [r3, #0]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	6859      	ldr	r1, [r3, #4]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f000 fac4 	bl	800bb50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2150      	movs	r1, #80	; 0x50
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 fb1d 	bl	800bc0e <TIM_ITRx_SetConfig>
      break;
 800b5d4:	e02c      	b.n	800b630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6818      	ldr	r0, [r3, #0]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	6859      	ldr	r1, [r3, #4]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f000 fae3 	bl	800bbae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2160      	movs	r1, #96	; 0x60
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 fb0d 	bl	800bc0e <TIM_ITRx_SetConfig>
      break;
 800b5f4:	e01c      	b.n	800b630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	6859      	ldr	r1, [r3, #4]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	461a      	mov	r2, r3
 800b604:	f000 faa4 	bl	800bb50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2140      	movs	r1, #64	; 0x40
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fafd 	bl	800bc0e <TIM_ITRx_SetConfig>
      break;
 800b614:	e00c      	b.n	800b630 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4619      	mov	r1, r3
 800b620:	4610      	mov	r0, r2
 800b622:	f000 faf4 	bl	800bc0e <TIM_ITRx_SetConfig>
      break;
 800b626:	e003      	b.n	800b630 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	73fb      	strb	r3, [r7, #15]
      break;
 800b62c:	e000      	b.n	800b630 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b62e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b640:	7bfb      	ldrb	r3, [r7, #15]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b64a:	b480      	push	{r7}
 800b64c:	b083      	sub	sp, #12
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b652:	bf00      	nop
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr

0800b65e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b65e:	b480      	push	{r7}
 800b660:	b083      	sub	sp, #12
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b672:	b480      	push	{r7}
 800b674:	b083      	sub	sp, #12
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b67a:	bf00      	nop
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b68e:	bf00      	nop
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b083      	sub	sp, #12
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6a2:	bf00      	nop
 800b6a4:	370c      	adds	r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
	...

0800b6b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a40      	ldr	r2, [pc, #256]	; (800b7c4 <TIM_Base_SetConfig+0x114>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d013      	beq.n	800b6f0 <TIM_Base_SetConfig+0x40>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ce:	d00f      	beq.n	800b6f0 <TIM_Base_SetConfig+0x40>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a3d      	ldr	r2, [pc, #244]	; (800b7c8 <TIM_Base_SetConfig+0x118>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d00b      	beq.n	800b6f0 <TIM_Base_SetConfig+0x40>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a3c      	ldr	r2, [pc, #240]	; (800b7cc <TIM_Base_SetConfig+0x11c>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d007      	beq.n	800b6f0 <TIM_Base_SetConfig+0x40>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a3b      	ldr	r2, [pc, #236]	; (800b7d0 <TIM_Base_SetConfig+0x120>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d003      	beq.n	800b6f0 <TIM_Base_SetConfig+0x40>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a3a      	ldr	r2, [pc, #232]	; (800b7d4 <TIM_Base_SetConfig+0x124>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d108      	bne.n	800b702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a2f      	ldr	r2, [pc, #188]	; (800b7c4 <TIM_Base_SetConfig+0x114>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d02b      	beq.n	800b762 <TIM_Base_SetConfig+0xb2>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b710:	d027      	beq.n	800b762 <TIM_Base_SetConfig+0xb2>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a2c      	ldr	r2, [pc, #176]	; (800b7c8 <TIM_Base_SetConfig+0x118>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d023      	beq.n	800b762 <TIM_Base_SetConfig+0xb2>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a2b      	ldr	r2, [pc, #172]	; (800b7cc <TIM_Base_SetConfig+0x11c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d01f      	beq.n	800b762 <TIM_Base_SetConfig+0xb2>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a2a      	ldr	r2, [pc, #168]	; (800b7d0 <TIM_Base_SetConfig+0x120>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d01b      	beq.n	800b762 <TIM_Base_SetConfig+0xb2>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a29      	ldr	r2, [pc, #164]	; (800b7d4 <TIM_Base_SetConfig+0x124>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d017      	beq.n	800b762 <TIM_Base_SetConfig+0xb2>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a28      	ldr	r2, [pc, #160]	; (800b7d8 <TIM_Base_SetConfig+0x128>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d013      	beq.n	800b762 <TIM_Base_SetConfig+0xb2>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a27      	ldr	r2, [pc, #156]	; (800b7dc <TIM_Base_SetConfig+0x12c>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d00f      	beq.n	800b762 <TIM_Base_SetConfig+0xb2>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a26      	ldr	r2, [pc, #152]	; (800b7e0 <TIM_Base_SetConfig+0x130>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00b      	beq.n	800b762 <TIM_Base_SetConfig+0xb2>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a25      	ldr	r2, [pc, #148]	; (800b7e4 <TIM_Base_SetConfig+0x134>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d007      	beq.n	800b762 <TIM_Base_SetConfig+0xb2>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a24      	ldr	r2, [pc, #144]	; (800b7e8 <TIM_Base_SetConfig+0x138>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d003      	beq.n	800b762 <TIM_Base_SetConfig+0xb2>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a23      	ldr	r2, [pc, #140]	; (800b7ec <TIM_Base_SetConfig+0x13c>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d108      	bne.n	800b774 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	4313      	orrs	r3, r2
 800b772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	4313      	orrs	r3, r2
 800b780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	689a      	ldr	r2, [r3, #8]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a0a      	ldr	r2, [pc, #40]	; (800b7c4 <TIM_Base_SetConfig+0x114>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d003      	beq.n	800b7a8 <TIM_Base_SetConfig+0xf8>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a0c      	ldr	r2, [pc, #48]	; (800b7d4 <TIM_Base_SetConfig+0x124>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d103      	bne.n	800b7b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	691a      	ldr	r2, [r3, #16]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	615a      	str	r2, [r3, #20]
}
 800b7b6:	bf00      	nop
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	40010000 	.word	0x40010000
 800b7c8:	40000400 	.word	0x40000400
 800b7cc:	40000800 	.word	0x40000800
 800b7d0:	40000c00 	.word	0x40000c00
 800b7d4:	40010400 	.word	0x40010400
 800b7d8:	40014000 	.word	0x40014000
 800b7dc:	40014400 	.word	0x40014400
 800b7e0:	40014800 	.word	0x40014800
 800b7e4:	40001800 	.word	0x40001800
 800b7e8:	40001c00 	.word	0x40001c00
 800b7ec:	40002000 	.word	0x40002000

0800b7f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b087      	sub	sp, #28
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	f023 0201 	bic.w	r2, r3, #1
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	699b      	ldr	r3, [r3, #24]
 800b816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b81e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f023 0303 	bic.w	r3, r3, #3
 800b826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f023 0302 	bic.w	r3, r3, #2
 800b838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	4313      	orrs	r3, r2
 800b842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a20      	ldr	r2, [pc, #128]	; (800b8c8 <TIM_OC1_SetConfig+0xd8>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d003      	beq.n	800b854 <TIM_OC1_SetConfig+0x64>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a1f      	ldr	r2, [pc, #124]	; (800b8cc <TIM_OC1_SetConfig+0xdc>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d10c      	bne.n	800b86e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f023 0308 	bic.w	r3, r3, #8
 800b85a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	4313      	orrs	r3, r2
 800b864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f023 0304 	bic.w	r3, r3, #4
 800b86c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a15      	ldr	r2, [pc, #84]	; (800b8c8 <TIM_OC1_SetConfig+0xd8>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d003      	beq.n	800b87e <TIM_OC1_SetConfig+0x8e>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a14      	ldr	r2, [pc, #80]	; (800b8cc <TIM_OC1_SetConfig+0xdc>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d111      	bne.n	800b8a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b88c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	4313      	orrs	r3, r2
 800b896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	697a      	ldr	r2, [r7, #20]
 800b8ba:	621a      	str	r2, [r3, #32]
}
 800b8bc:	bf00      	nop
 800b8be:	371c      	adds	r7, #28
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	40010000 	.word	0x40010000
 800b8cc:	40010400 	.word	0x40010400

0800b8d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a1b      	ldr	r3, [r3, #32]
 800b8de:	f023 0210 	bic.w	r2, r3, #16
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	021b      	lsls	r3, r3, #8
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	4313      	orrs	r3, r2
 800b912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	f023 0320 	bic.w	r3, r3, #32
 800b91a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	011b      	lsls	r3, r3, #4
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	4313      	orrs	r3, r2
 800b926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a22      	ldr	r2, [pc, #136]	; (800b9b4 <TIM_OC2_SetConfig+0xe4>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d003      	beq.n	800b938 <TIM_OC2_SetConfig+0x68>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a21      	ldr	r2, [pc, #132]	; (800b9b8 <TIM_OC2_SetConfig+0xe8>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d10d      	bne.n	800b954 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b93e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	011b      	lsls	r3, r3, #4
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	4313      	orrs	r3, r2
 800b94a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b952:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a17      	ldr	r2, [pc, #92]	; (800b9b4 <TIM_OC2_SetConfig+0xe4>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d003      	beq.n	800b964 <TIM_OC2_SetConfig+0x94>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a16      	ldr	r2, [pc, #88]	; (800b9b8 <TIM_OC2_SetConfig+0xe8>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d113      	bne.n	800b98c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b96a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	695b      	ldr	r3, [r3, #20]
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	4313      	orrs	r3, r2
 800b98a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	693a      	ldr	r2, [r7, #16]
 800b990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	685a      	ldr	r2, [r3, #4]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	621a      	str	r2, [r3, #32]
}
 800b9a6:	bf00      	nop
 800b9a8:	371c      	adds	r7, #28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	40010000 	.word	0x40010000
 800b9b8:	40010400 	.word	0x40010400

0800b9bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a1b      	ldr	r3, [r3, #32]
 800b9d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	69db      	ldr	r3, [r3, #28]
 800b9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f023 0303 	bic.w	r3, r3, #3
 800b9f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	021b      	lsls	r3, r3, #8
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a21      	ldr	r2, [pc, #132]	; (800ba9c <TIM_OC3_SetConfig+0xe0>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d003      	beq.n	800ba22 <TIM_OC3_SetConfig+0x66>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a20      	ldr	r2, [pc, #128]	; (800baa0 <TIM_OC3_SetConfig+0xe4>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d10d      	bne.n	800ba3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	021b      	lsls	r3, r3, #8
 800ba30:	697a      	ldr	r2, [r7, #20]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a16      	ldr	r2, [pc, #88]	; (800ba9c <TIM_OC3_SetConfig+0xe0>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d003      	beq.n	800ba4e <TIM_OC3_SetConfig+0x92>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a15      	ldr	r2, [pc, #84]	; (800baa0 <TIM_OC3_SetConfig+0xe4>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d113      	bne.n	800ba76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	695b      	ldr	r3, [r3, #20]
 800ba62:	011b      	lsls	r3, r3, #4
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	011b      	lsls	r3, r3, #4
 800ba70:	693a      	ldr	r2, [r7, #16]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	697a      	ldr	r2, [r7, #20]
 800ba8e:	621a      	str	r2, [r3, #32]
}
 800ba90:	bf00      	nop
 800ba92:	371c      	adds	r7, #28
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr
 800ba9c:	40010000 	.word	0x40010000
 800baa0:	40010400 	.word	0x40010400

0800baa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a1b      	ldr	r3, [r3, #32]
 800babe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	021b      	lsls	r3, r3, #8
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800baee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	031b      	lsls	r3, r3, #12
 800baf6:	693a      	ldr	r2, [r7, #16]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a12      	ldr	r2, [pc, #72]	; (800bb48 <TIM_OC4_SetConfig+0xa4>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d003      	beq.n	800bb0c <TIM_OC4_SetConfig+0x68>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a11      	ldr	r2, [pc, #68]	; (800bb4c <TIM_OC4_SetConfig+0xa8>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d109      	bne.n	800bb20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	019b      	lsls	r3, r3, #6
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	697a      	ldr	r2, [r7, #20]
 800bb24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	621a      	str	r2, [r3, #32]
}
 800bb3a:	bf00      	nop
 800bb3c:	371c      	adds	r7, #28
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	40010000 	.word	0x40010000
 800bb4c:	40010400 	.word	0x40010400

0800bb50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b087      	sub	sp, #28
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6a1b      	ldr	r3, [r3, #32]
 800bb60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	f023 0201 	bic.w	r2, r3, #1
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	011b      	lsls	r3, r3, #4
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f023 030a 	bic.w	r3, r3, #10
 800bb8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	621a      	str	r2, [r3, #32]
}
 800bba2:	bf00      	nop
 800bba4:	371c      	adds	r7, #28
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b087      	sub	sp, #28
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	60f8      	str	r0, [r7, #12]
 800bbb6:	60b9      	str	r1, [r7, #8]
 800bbb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6a1b      	ldr	r3, [r3, #32]
 800bbbe:	f023 0210 	bic.w	r2, r3, #16
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	699b      	ldr	r3, [r3, #24]
 800bbca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6a1b      	ldr	r3, [r3, #32]
 800bbd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	031b      	lsls	r3, r3, #12
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bbea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	011b      	lsls	r3, r3, #4
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	693a      	ldr	r2, [r7, #16]
 800bc00:	621a      	str	r2, [r3, #32]
}
 800bc02:	bf00      	nop
 800bc04:	371c      	adds	r7, #28
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b085      	sub	sp, #20
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	f043 0307 	orr.w	r3, r3, #7
 800bc30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	609a      	str	r2, [r3, #8]
}
 800bc38:	bf00      	nop
 800bc3a:	3714      	adds	r7, #20
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b087      	sub	sp, #28
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	607a      	str	r2, [r7, #4]
 800bc50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	021a      	lsls	r2, r3, #8
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	431a      	orrs	r2, r3
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	697a      	ldr	r2, [r7, #20]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	697a      	ldr	r2, [r7, #20]
 800bc76:	609a      	str	r2, [r3, #8]
}
 800bc78:	bf00      	nop
 800bc7a:	371c      	adds	r7, #28
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	f003 031f 	and.w	r3, r3, #31
 800bc96:	2201      	movs	r2, #1
 800bc98:	fa02 f303 	lsl.w	r3, r2, r3
 800bc9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6a1a      	ldr	r2, [r3, #32]
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	43db      	mvns	r3, r3
 800bca6:	401a      	ands	r2, r3
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6a1a      	ldr	r2, [r3, #32]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	f003 031f 	and.w	r3, r3, #31
 800bcb6:	6879      	ldr	r1, [r7, #4]
 800bcb8:	fa01 f303 	lsl.w	r3, r1, r3
 800bcbc:	431a      	orrs	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	621a      	str	r2, [r3, #32]
}
 800bcc2:	bf00      	nop
 800bcc4:	371c      	adds	r7, #28
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
	...

0800bcd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d101      	bne.n	800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bce4:	2302      	movs	r3, #2
 800bce6:	e05a      	b.n	800bd9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a21      	ldr	r2, [pc, #132]	; (800bdac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d022      	beq.n	800bd72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd34:	d01d      	beq.n	800bd72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a1d      	ldr	r2, [pc, #116]	; (800bdb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d018      	beq.n	800bd72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a1b      	ldr	r2, [pc, #108]	; (800bdb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d013      	beq.n	800bd72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a1a      	ldr	r2, [pc, #104]	; (800bdb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d00e      	beq.n	800bd72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a18      	ldr	r2, [pc, #96]	; (800bdbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d009      	beq.n	800bd72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a17      	ldr	r2, [pc, #92]	; (800bdc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d004      	beq.n	800bd72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a15      	ldr	r2, [pc, #84]	; (800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d10c      	bne.n	800bd8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	40010000 	.word	0x40010000
 800bdb0:	40000400 	.word	0x40000400
 800bdb4:	40000800 	.word	0x40000800
 800bdb8:	40000c00 	.word	0x40000c00
 800bdbc:	40010400 	.word	0x40010400
 800bdc0:	40014000 	.word	0x40014000
 800bdc4:	40001800 	.word	0x40001800

0800bdc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d101      	bne.n	800be02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	e03f      	b.n	800be82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d106      	bne.n	800be1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f7fa fb62 	bl	80064e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2224      	movs	r2, #36	; 0x24
 800be20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68da      	ldr	r2, [r3, #12]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fc7b 	bl	800c730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	691a      	ldr	r2, [r3, #16]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	695a      	ldr	r2, [r3, #20]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68da      	ldr	r2, [r3, #12]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2220      	movs	r2, #32
 800be74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2220      	movs	r2, #32
 800be7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3708      	adds	r7, #8
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
	...

0800be8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b0ba      	sub	sp, #232	; 0xe8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800beb2:	2300      	movs	r3, #0
 800beb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800beb8:	2300      	movs	r3, #0
 800beba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bec2:	f003 030f 	and.w	r3, r3, #15
 800bec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800beca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10f      	bne.n	800bef2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed6:	f003 0320 	and.w	r3, r3, #32
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d009      	beq.n	800bef2 <HAL_UART_IRQHandler+0x66>
 800bede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee2:	f003 0320 	and.w	r3, r3, #32
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d003      	beq.n	800bef2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fb65 	bl	800c5ba <UART_Receive_IT>
      return;
 800bef0:	e256      	b.n	800c3a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 80de 	beq.w	800c0b8 <HAL_UART_IRQHandler+0x22c>
 800befc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf00:	f003 0301 	and.w	r3, r3, #1
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d106      	bne.n	800bf16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bf08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	f000 80d1 	beq.w	800c0b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bf16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf1a:	f003 0301 	and.w	r3, r3, #1
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00b      	beq.n	800bf3a <HAL_UART_IRQHandler+0xae>
 800bf22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d005      	beq.n	800bf3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	f043 0201 	orr.w	r2, r3, #1
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf3e:	f003 0304 	and.w	r3, r3, #4
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00b      	beq.n	800bf5e <HAL_UART_IRQHandler+0xd2>
 800bf46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d005      	beq.n	800bf5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf56:	f043 0202 	orr.w	r2, r3, #2
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf62:	f003 0302 	and.w	r3, r3, #2
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00b      	beq.n	800bf82 <HAL_UART_IRQHandler+0xf6>
 800bf6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf6e:	f003 0301 	and.w	r3, r3, #1
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d005      	beq.n	800bf82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7a:	f043 0204 	orr.w	r2, r3, #4
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bf82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf86:	f003 0308 	and.w	r3, r3, #8
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d011      	beq.n	800bfb2 <HAL_UART_IRQHandler+0x126>
 800bf8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf92:	f003 0320 	and.w	r3, r3, #32
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d105      	bne.n	800bfa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bf9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf9e:	f003 0301 	and.w	r3, r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d005      	beq.n	800bfb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfaa:	f043 0208 	orr.w	r2, r3, #8
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f000 81ed 	beq.w	800c396 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bfbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfc0:	f003 0320 	and.w	r3, r3, #32
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d008      	beq.n	800bfda <HAL_UART_IRQHandler+0x14e>
 800bfc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfcc:	f003 0320 	and.w	r3, r3, #32
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d002      	beq.n	800bfda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 faf0 	bl	800c5ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	695b      	ldr	r3, [r3, #20]
 800bfe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe4:	2b40      	cmp	r3, #64	; 0x40
 800bfe6:	bf0c      	ite	eq
 800bfe8:	2301      	moveq	r3, #1
 800bfea:	2300      	movne	r3, #0
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff6:	f003 0308 	and.w	r3, r3, #8
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d103      	bne.n	800c006 <HAL_UART_IRQHandler+0x17a>
 800bffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c002:	2b00      	cmp	r3, #0
 800c004:	d04f      	beq.n	800c0a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f9f8 	bl	800c3fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c016:	2b40      	cmp	r3, #64	; 0x40
 800c018:	d141      	bne.n	800c09e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3314      	adds	r3, #20
 800c020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c028:	e853 3f00 	ldrex	r3, [r3]
 800c02c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	3314      	adds	r3, #20
 800c042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c04a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c056:	e841 2300 	strex	r3, r2, [r1]
 800c05a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c05e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d1d9      	bne.n	800c01a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d013      	beq.n	800c096 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c072:	4a7d      	ldr	r2, [pc, #500]	; (800c268 <HAL_UART_IRQHandler+0x3dc>)
 800c074:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fc feb3 	bl	8008de6 <HAL_DMA_Abort_IT>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d016      	beq.n	800c0b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c08a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c090:	4610      	mov	r0, r2
 800c092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c094:	e00e      	b.n	800c0b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f99a 	bl	800c3d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c09c:	e00a      	b.n	800c0b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f996 	bl	800c3d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0a4:	e006      	b.n	800c0b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 f992 	bl	800c3d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c0b2:	e170      	b.n	800c396 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0b4:	bf00      	nop
    return;
 800c0b6:	e16e      	b.n	800c396 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	f040 814a 	bne.w	800c356 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0c6:	f003 0310 	and.w	r3, r3, #16
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f000 8143 	beq.w	800c356 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c0d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0d4:	f003 0310 	and.w	r3, r3, #16
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f000 813c 	beq.w	800c356 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0de:	2300      	movs	r3, #0
 800c0e0:	60bb      	str	r3, [r7, #8]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	60bb      	str	r3, [r7, #8]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	60bb      	str	r3, [r7, #8]
 800c0f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	695b      	ldr	r3, [r3, #20]
 800c0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0fe:	2b40      	cmp	r3, #64	; 0x40
 800c100:	f040 80b4 	bne.w	800c26c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c110:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c114:	2b00      	cmp	r3, #0
 800c116:	f000 8140 	beq.w	800c39a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c11e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c122:	429a      	cmp	r2, r3
 800c124:	f080 8139 	bcs.w	800c39a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c12e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c134:	69db      	ldr	r3, [r3, #28]
 800c136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c13a:	f000 8088 	beq.w	800c24e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	330c      	adds	r3, #12
 800c144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c14c:	e853 3f00 	ldrex	r3, [r3]
 800c150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c15c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	330c      	adds	r3, #12
 800c166:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c16a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c16e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c172:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c176:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c17a:	e841 2300 	strex	r3, r2, [r1]
 800c17e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1d9      	bne.n	800c13e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	3314      	adds	r3, #20
 800c190:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c194:	e853 3f00 	ldrex	r3, [r3]
 800c198:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c19a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c19c:	f023 0301 	bic.w	r3, r3, #1
 800c1a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	3314      	adds	r3, #20
 800c1aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c1ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c1b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c1b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c1ba:	e841 2300 	strex	r3, r2, [r1]
 800c1be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c1c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d1e1      	bne.n	800c18a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	3314      	adds	r3, #20
 800c1cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1d0:	e853 3f00 	ldrex	r3, [r3]
 800c1d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c1d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3314      	adds	r3, #20
 800c1e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c1ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c1ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c1f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c1f2:	e841 2300 	strex	r3, r2, [r1]
 800c1f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c1f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1e3      	bne.n	800c1c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2220      	movs	r2, #32
 800c202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	330c      	adds	r3, #12
 800c212:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c216:	e853 3f00 	ldrex	r3, [r3]
 800c21a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c21c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c21e:	f023 0310 	bic.w	r3, r3, #16
 800c222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	330c      	adds	r3, #12
 800c22c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c230:	65ba      	str	r2, [r7, #88]	; 0x58
 800c232:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c234:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c236:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c238:	e841 2300 	strex	r3, r2, [r1]
 800c23c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c23e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1e3      	bne.n	800c20c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c248:	4618      	mov	r0, r3
 800c24a:	f7fc fd5c 	bl	8008d06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c256:	b29b      	uxth	r3, r3
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f8c0 	bl	800c3e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c264:	e099      	b.n	800c39a <HAL_UART_IRQHandler+0x50e>
 800c266:	bf00      	nop
 800c268:	0800c4c3 	.word	0x0800c4c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c274:	b29b      	uxth	r3, r3
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c280:	b29b      	uxth	r3, r3
 800c282:	2b00      	cmp	r3, #0
 800c284:	f000 808b 	beq.w	800c39e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f000 8086 	beq.w	800c39e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	330c      	adds	r3, #12
 800c298:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29c:	e853 3f00 	ldrex	r3, [r3]
 800c2a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	330c      	adds	r3, #12
 800c2b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c2b6:	647a      	str	r2, [r7, #68]	; 0x44
 800c2b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c2bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2be:	e841 2300 	strex	r3, r2, [r1]
 800c2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1e3      	bne.n	800c292 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	3314      	adds	r3, #20
 800c2d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	e853 3f00 	ldrex	r3, [r3]
 800c2d8:	623b      	str	r3, [r7, #32]
   return(result);
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	f023 0301 	bic.w	r3, r3, #1
 800c2e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3314      	adds	r3, #20
 800c2ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c2ee:	633a      	str	r2, [r7, #48]	; 0x30
 800c2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2f6:	e841 2300 	strex	r3, r2, [r1]
 800c2fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1e3      	bne.n	800c2ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2220      	movs	r2, #32
 800c306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	330c      	adds	r3, #12
 800c316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	e853 3f00 	ldrex	r3, [r3]
 800c31e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f023 0310 	bic.w	r3, r3, #16
 800c326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	330c      	adds	r3, #12
 800c330:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c334:	61fa      	str	r2, [r7, #28]
 800c336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c338:	69b9      	ldr	r1, [r7, #24]
 800c33a:	69fa      	ldr	r2, [r7, #28]
 800c33c:	e841 2300 	strex	r3, r2, [r1]
 800c340:	617b      	str	r3, [r7, #20]
   return(result);
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1e3      	bne.n	800c310 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c34c:	4619      	mov	r1, r3
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f848 	bl	800c3e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c354:	e023      	b.n	800c39e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d009      	beq.n	800c376 <HAL_UART_IRQHandler+0x4ea>
 800c362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d003      	beq.n	800c376 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 f8bb 	bl	800c4ea <UART_Transmit_IT>
    return;
 800c374:	e014      	b.n	800c3a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00e      	beq.n	800c3a0 <HAL_UART_IRQHandler+0x514>
 800c382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d008      	beq.n	800c3a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 f8fb 	bl	800c58a <UART_EndTransmit_IT>
    return;
 800c394:	e004      	b.n	800c3a0 <HAL_UART_IRQHandler+0x514>
    return;
 800c396:	bf00      	nop
 800c398:	e002      	b.n	800c3a0 <HAL_UART_IRQHandler+0x514>
      return;
 800c39a:	bf00      	nop
 800c39c:	e000      	b.n	800c3a0 <HAL_UART_IRQHandler+0x514>
      return;
 800c39e:	bf00      	nop
  }
}
 800c3a0:	37e8      	adds	r7, #232	; 0xe8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop

0800c3a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b095      	sub	sp, #84	; 0x54
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	330c      	adds	r3, #12
 800c40a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40e:	e853 3f00 	ldrex	r3, [r3]
 800c412:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c41a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	330c      	adds	r3, #12
 800c422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c424:	643a      	str	r2, [r7, #64]	; 0x40
 800c426:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c42a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c42c:	e841 2300 	strex	r3, r2, [r1]
 800c430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1e5      	bne.n	800c404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	3314      	adds	r3, #20
 800c43e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	e853 3f00 	ldrex	r3, [r3]
 800c446:	61fb      	str	r3, [r7, #28]
   return(result);
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	f023 0301 	bic.w	r3, r3, #1
 800c44e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	3314      	adds	r3, #20
 800c456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c458:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c45a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c45e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c460:	e841 2300 	strex	r3, r2, [r1]
 800c464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1e5      	bne.n	800c438 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c470:	2b01      	cmp	r3, #1
 800c472:	d119      	bne.n	800c4a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	330c      	adds	r3, #12
 800c47a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	e853 3f00 	ldrex	r3, [r3]
 800c482:	60bb      	str	r3, [r7, #8]
   return(result);
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	f023 0310 	bic.w	r3, r3, #16
 800c48a:	647b      	str	r3, [r7, #68]	; 0x44
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	330c      	adds	r3, #12
 800c492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c494:	61ba      	str	r2, [r7, #24]
 800c496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c498:	6979      	ldr	r1, [r7, #20]
 800c49a:	69ba      	ldr	r2, [r7, #24]
 800c49c:	e841 2300 	strex	r3, r2, [r1]
 800c4a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1e5      	bne.n	800c474 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2220      	movs	r2, #32
 800c4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c4b6:	bf00      	nop
 800c4b8:	3754      	adds	r7, #84	; 0x54
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr

0800c4c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b084      	sub	sp, #16
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f7ff ff77 	bl	800c3d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4e2:	bf00      	nop
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c4ea:	b480      	push	{r7}
 800c4ec:	b085      	sub	sp, #20
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	2b21      	cmp	r3, #33	; 0x21
 800c4fc:	d13e      	bne.n	800c57c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c506:	d114      	bne.n	800c532 <UART_Transmit_IT+0x48>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d110      	bne.n	800c532 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6a1b      	ldr	r3, [r3, #32]
 800c514:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	461a      	mov	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c524:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a1b      	ldr	r3, [r3, #32]
 800c52a:	1c9a      	adds	r2, r3, #2
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	621a      	str	r2, [r3, #32]
 800c530:	e008      	b.n	800c544 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a1b      	ldr	r3, [r3, #32]
 800c536:	1c59      	adds	r1, r3, #1
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	6211      	str	r1, [r2, #32]
 800c53c:	781a      	ldrb	r2, [r3, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c548:	b29b      	uxth	r3, r3
 800c54a:	3b01      	subs	r3, #1
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	4619      	mov	r1, r3
 800c552:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10f      	bne.n	800c578 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68da      	ldr	r2, [r3, #12]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c566:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	68da      	ldr	r2, [r3, #12]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c576:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c578:	2300      	movs	r3, #0
 800c57a:	e000      	b.n	800c57e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c57c:	2302      	movs	r3, #2
  }
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr

0800c58a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b082      	sub	sp, #8
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68da      	ldr	r2, [r3, #12]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2220      	movs	r2, #32
 800c5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f7ff fefc 	bl	800c3a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c5b0:	2300      	movs	r3, #0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b08c      	sub	sp, #48	; 0x30
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b22      	cmp	r3, #34	; 0x22
 800c5cc:	f040 80ab 	bne.w	800c726 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5d8:	d117      	bne.n	800c60a <UART_Receive_IT+0x50>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d113      	bne.n	800c60a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c602:	1c9a      	adds	r2, r3, #2
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	629a      	str	r2, [r3, #40]	; 0x28
 800c608:	e026      	b.n	800c658 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c610:	2300      	movs	r3, #0
 800c612:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c61c:	d007      	beq.n	800c62e <UART_Receive_IT+0x74>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10a      	bne.n	800c63c <UART_Receive_IT+0x82>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d106      	bne.n	800c63c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	b2da      	uxtb	r2, r3
 800c636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c638:	701a      	strb	r2, [r3, #0]
 800c63a:	e008      	b.n	800c64e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	b2db      	uxtb	r3, r3
 800c644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c652:	1c5a      	adds	r2, r3, #1
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	3b01      	subs	r3, #1
 800c660:	b29b      	uxth	r3, r3
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	4619      	mov	r1, r3
 800c666:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d15a      	bne.n	800c722 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	68da      	ldr	r2, [r3, #12]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f022 0220 	bic.w	r2, r2, #32
 800c67a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68da      	ldr	r2, [r3, #12]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c68a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	695a      	ldr	r2, [r3, #20]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f022 0201 	bic.w	r2, r2, #1
 800c69a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d135      	bne.n	800c718 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	330c      	adds	r3, #12
 800c6b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	e853 3f00 	ldrex	r3, [r3]
 800c6c0:	613b      	str	r3, [r7, #16]
   return(result);
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	f023 0310 	bic.w	r3, r3, #16
 800c6c8:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	330c      	adds	r3, #12
 800c6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6d2:	623a      	str	r2, [r7, #32]
 800c6d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d6:	69f9      	ldr	r1, [r7, #28]
 800c6d8:	6a3a      	ldr	r2, [r7, #32]
 800c6da:	e841 2300 	strex	r3, r2, [r1]
 800c6de:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1e5      	bne.n	800c6b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 0310 	and.w	r3, r3, #16
 800c6f0:	2b10      	cmp	r3, #16
 800c6f2:	d10a      	bne.n	800c70a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	60fb      	str	r3, [r7, #12]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7ff fe67 	bl	800c3e4 <HAL_UARTEx_RxEventCallback>
 800c716:	e002      	b.n	800c71e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff fe4f 	bl	800c3bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	e002      	b.n	800c728 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c722:	2300      	movs	r3, #0
 800c724:	e000      	b.n	800c728 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c726:	2302      	movs	r3, #2
  }
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3730      	adds	r7, #48	; 0x30
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c734:	b0c0      	sub	sp, #256	; 0x100
 800c736:	af00      	add	r7, sp, #0
 800c738:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c73c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c74c:	68d9      	ldr	r1, [r3, #12]
 800c74e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	ea40 0301 	orr.w	r3, r0, r1
 800c758:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c75a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	431a      	orrs	r2, r3
 800c768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	431a      	orrs	r2, r3
 800c770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c774:	69db      	ldr	r3, [r3, #28]
 800c776:	4313      	orrs	r3, r2
 800c778:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c788:	f021 010c 	bic.w	r1, r1, #12
 800c78c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c796:	430b      	orrs	r3, r1
 800c798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c7a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7aa:	6999      	ldr	r1, [r3, #24]
 800c7ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	ea40 0301 	orr.w	r3, r0, r1
 800c7b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c7b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	4b8f      	ldr	r3, [pc, #572]	; (800c9fc <UART_SetConfig+0x2cc>)
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d005      	beq.n	800c7d0 <UART_SetConfig+0xa0>
 800c7c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	4b8d      	ldr	r3, [pc, #564]	; (800ca00 <UART_SetConfig+0x2d0>)
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d104      	bne.n	800c7da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c7d0:	f7fe f802 	bl	800a7d8 <HAL_RCC_GetPCLK2Freq>
 800c7d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c7d8:	e003      	b.n	800c7e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c7da:	f7fd ffe9 	bl	800a7b0 <HAL_RCC_GetPCLK1Freq>
 800c7de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7e6:	69db      	ldr	r3, [r3, #28]
 800c7e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7ec:	f040 810c 	bne.w	800ca08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c7f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c7fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c7fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c802:	4622      	mov	r2, r4
 800c804:	462b      	mov	r3, r5
 800c806:	1891      	adds	r1, r2, r2
 800c808:	65b9      	str	r1, [r7, #88]	; 0x58
 800c80a:	415b      	adcs	r3, r3
 800c80c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c80e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c812:	4621      	mov	r1, r4
 800c814:	eb12 0801 	adds.w	r8, r2, r1
 800c818:	4629      	mov	r1, r5
 800c81a:	eb43 0901 	adc.w	r9, r3, r1
 800c81e:	f04f 0200 	mov.w	r2, #0
 800c822:	f04f 0300 	mov.w	r3, #0
 800c826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c82a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c82e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c832:	4690      	mov	r8, r2
 800c834:	4699      	mov	r9, r3
 800c836:	4623      	mov	r3, r4
 800c838:	eb18 0303 	adds.w	r3, r8, r3
 800c83c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c840:	462b      	mov	r3, r5
 800c842:	eb49 0303 	adc.w	r3, r9, r3
 800c846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c84a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c856:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c85a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c85e:	460b      	mov	r3, r1
 800c860:	18db      	adds	r3, r3, r3
 800c862:	653b      	str	r3, [r7, #80]	; 0x50
 800c864:	4613      	mov	r3, r2
 800c866:	eb42 0303 	adc.w	r3, r2, r3
 800c86a:	657b      	str	r3, [r7, #84]	; 0x54
 800c86c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c870:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c874:	f7f4 f950 	bl	8000b18 <__aeabi_uldivmod>
 800c878:	4602      	mov	r2, r0
 800c87a:	460b      	mov	r3, r1
 800c87c:	4b61      	ldr	r3, [pc, #388]	; (800ca04 <UART_SetConfig+0x2d4>)
 800c87e:	fba3 2302 	umull	r2, r3, r3, r2
 800c882:	095b      	lsrs	r3, r3, #5
 800c884:	011c      	lsls	r4, r3, #4
 800c886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c88a:	2200      	movs	r2, #0
 800c88c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c890:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c894:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c898:	4642      	mov	r2, r8
 800c89a:	464b      	mov	r3, r9
 800c89c:	1891      	adds	r1, r2, r2
 800c89e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c8a0:	415b      	adcs	r3, r3
 800c8a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c8a8:	4641      	mov	r1, r8
 800c8aa:	eb12 0a01 	adds.w	sl, r2, r1
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	eb43 0b01 	adc.w	fp, r3, r1
 800c8b4:	f04f 0200 	mov.w	r2, #0
 800c8b8:	f04f 0300 	mov.w	r3, #0
 800c8bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c8c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c8c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8c8:	4692      	mov	sl, r2
 800c8ca:	469b      	mov	fp, r3
 800c8cc:	4643      	mov	r3, r8
 800c8ce:	eb1a 0303 	adds.w	r3, sl, r3
 800c8d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c8d6:	464b      	mov	r3, r9
 800c8d8:	eb4b 0303 	adc.w	r3, fp, r3
 800c8dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c8e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c8ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c8f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	18db      	adds	r3, r3, r3
 800c8f8:	643b      	str	r3, [r7, #64]	; 0x40
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	eb42 0303 	adc.w	r3, r2, r3
 800c900:	647b      	str	r3, [r7, #68]	; 0x44
 800c902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c906:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c90a:	f7f4 f905 	bl	8000b18 <__aeabi_uldivmod>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	4611      	mov	r1, r2
 800c914:	4b3b      	ldr	r3, [pc, #236]	; (800ca04 <UART_SetConfig+0x2d4>)
 800c916:	fba3 2301 	umull	r2, r3, r3, r1
 800c91a:	095b      	lsrs	r3, r3, #5
 800c91c:	2264      	movs	r2, #100	; 0x64
 800c91e:	fb02 f303 	mul.w	r3, r2, r3
 800c922:	1acb      	subs	r3, r1, r3
 800c924:	00db      	lsls	r3, r3, #3
 800c926:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c92a:	4b36      	ldr	r3, [pc, #216]	; (800ca04 <UART_SetConfig+0x2d4>)
 800c92c:	fba3 2302 	umull	r2, r3, r3, r2
 800c930:	095b      	lsrs	r3, r3, #5
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c938:	441c      	add	r4, r3
 800c93a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c93e:	2200      	movs	r2, #0
 800c940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c944:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c948:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c94c:	4642      	mov	r2, r8
 800c94e:	464b      	mov	r3, r9
 800c950:	1891      	adds	r1, r2, r2
 800c952:	63b9      	str	r1, [r7, #56]	; 0x38
 800c954:	415b      	adcs	r3, r3
 800c956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c95c:	4641      	mov	r1, r8
 800c95e:	1851      	adds	r1, r2, r1
 800c960:	6339      	str	r1, [r7, #48]	; 0x30
 800c962:	4649      	mov	r1, r9
 800c964:	414b      	adcs	r3, r1
 800c966:	637b      	str	r3, [r7, #52]	; 0x34
 800c968:	f04f 0200 	mov.w	r2, #0
 800c96c:	f04f 0300 	mov.w	r3, #0
 800c970:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c974:	4659      	mov	r1, fp
 800c976:	00cb      	lsls	r3, r1, #3
 800c978:	4651      	mov	r1, sl
 800c97a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c97e:	4651      	mov	r1, sl
 800c980:	00ca      	lsls	r2, r1, #3
 800c982:	4610      	mov	r0, r2
 800c984:	4619      	mov	r1, r3
 800c986:	4603      	mov	r3, r0
 800c988:	4642      	mov	r2, r8
 800c98a:	189b      	adds	r3, r3, r2
 800c98c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c990:	464b      	mov	r3, r9
 800c992:	460a      	mov	r2, r1
 800c994:	eb42 0303 	adc.w	r3, r2, r3
 800c998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c99c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c9a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c9ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	18db      	adds	r3, r3, r3
 800c9b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	eb42 0303 	adc.w	r3, r2, r3
 800c9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c9c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c9c6:	f7f4 f8a7 	bl	8000b18 <__aeabi_uldivmod>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ca04 <UART_SetConfig+0x2d4>)
 800c9d0:	fba3 1302 	umull	r1, r3, r3, r2
 800c9d4:	095b      	lsrs	r3, r3, #5
 800c9d6:	2164      	movs	r1, #100	; 0x64
 800c9d8:	fb01 f303 	mul.w	r3, r1, r3
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	00db      	lsls	r3, r3, #3
 800c9e0:	3332      	adds	r3, #50	; 0x32
 800c9e2:	4a08      	ldr	r2, [pc, #32]	; (800ca04 <UART_SetConfig+0x2d4>)
 800c9e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c9e8:	095b      	lsrs	r3, r3, #5
 800c9ea:	f003 0207 	and.w	r2, r3, #7
 800c9ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4422      	add	r2, r4
 800c9f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c9f8:	e106      	b.n	800cc08 <UART_SetConfig+0x4d8>
 800c9fa:	bf00      	nop
 800c9fc:	40011000 	.word	0x40011000
 800ca00:	40011400 	.word	0x40011400
 800ca04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ca12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ca16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ca1a:	4642      	mov	r2, r8
 800ca1c:	464b      	mov	r3, r9
 800ca1e:	1891      	adds	r1, r2, r2
 800ca20:	6239      	str	r1, [r7, #32]
 800ca22:	415b      	adcs	r3, r3
 800ca24:	627b      	str	r3, [r7, #36]	; 0x24
 800ca26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ca2a:	4641      	mov	r1, r8
 800ca2c:	1854      	adds	r4, r2, r1
 800ca2e:	4649      	mov	r1, r9
 800ca30:	eb43 0501 	adc.w	r5, r3, r1
 800ca34:	f04f 0200 	mov.w	r2, #0
 800ca38:	f04f 0300 	mov.w	r3, #0
 800ca3c:	00eb      	lsls	r3, r5, #3
 800ca3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca42:	00e2      	lsls	r2, r4, #3
 800ca44:	4614      	mov	r4, r2
 800ca46:	461d      	mov	r5, r3
 800ca48:	4643      	mov	r3, r8
 800ca4a:	18e3      	adds	r3, r4, r3
 800ca4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca50:	464b      	mov	r3, r9
 800ca52:	eb45 0303 	adc.w	r3, r5, r3
 800ca56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca6a:	f04f 0200 	mov.w	r2, #0
 800ca6e:	f04f 0300 	mov.w	r3, #0
 800ca72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ca76:	4629      	mov	r1, r5
 800ca78:	008b      	lsls	r3, r1, #2
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca80:	4621      	mov	r1, r4
 800ca82:	008a      	lsls	r2, r1, #2
 800ca84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ca88:	f7f4 f846 	bl	8000b18 <__aeabi_uldivmod>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	4b60      	ldr	r3, [pc, #384]	; (800cc14 <UART_SetConfig+0x4e4>)
 800ca92:	fba3 2302 	umull	r2, r3, r3, r2
 800ca96:	095b      	lsrs	r3, r3, #5
 800ca98:	011c      	lsls	r4, r3, #4
 800ca9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800caa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800caa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800caac:	4642      	mov	r2, r8
 800caae:	464b      	mov	r3, r9
 800cab0:	1891      	adds	r1, r2, r2
 800cab2:	61b9      	str	r1, [r7, #24]
 800cab4:	415b      	adcs	r3, r3
 800cab6:	61fb      	str	r3, [r7, #28]
 800cab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cabc:	4641      	mov	r1, r8
 800cabe:	1851      	adds	r1, r2, r1
 800cac0:	6139      	str	r1, [r7, #16]
 800cac2:	4649      	mov	r1, r9
 800cac4:	414b      	adcs	r3, r1
 800cac6:	617b      	str	r3, [r7, #20]
 800cac8:	f04f 0200 	mov.w	r2, #0
 800cacc:	f04f 0300 	mov.w	r3, #0
 800cad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cad4:	4659      	mov	r1, fp
 800cad6:	00cb      	lsls	r3, r1, #3
 800cad8:	4651      	mov	r1, sl
 800cada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cade:	4651      	mov	r1, sl
 800cae0:	00ca      	lsls	r2, r1, #3
 800cae2:	4610      	mov	r0, r2
 800cae4:	4619      	mov	r1, r3
 800cae6:	4603      	mov	r3, r0
 800cae8:	4642      	mov	r2, r8
 800caea:	189b      	adds	r3, r3, r2
 800caec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800caf0:	464b      	mov	r3, r9
 800caf2:	460a      	mov	r2, r1
 800caf4:	eb42 0303 	adc.w	r3, r2, r3
 800caf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cafc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb06:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cb08:	f04f 0200 	mov.w	r2, #0
 800cb0c:	f04f 0300 	mov.w	r3, #0
 800cb10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cb14:	4649      	mov	r1, r9
 800cb16:	008b      	lsls	r3, r1, #2
 800cb18:	4641      	mov	r1, r8
 800cb1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb1e:	4641      	mov	r1, r8
 800cb20:	008a      	lsls	r2, r1, #2
 800cb22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cb26:	f7f3 fff7 	bl	8000b18 <__aeabi_uldivmod>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	4611      	mov	r1, r2
 800cb30:	4b38      	ldr	r3, [pc, #224]	; (800cc14 <UART_SetConfig+0x4e4>)
 800cb32:	fba3 2301 	umull	r2, r3, r3, r1
 800cb36:	095b      	lsrs	r3, r3, #5
 800cb38:	2264      	movs	r2, #100	; 0x64
 800cb3a:	fb02 f303 	mul.w	r3, r2, r3
 800cb3e:	1acb      	subs	r3, r1, r3
 800cb40:	011b      	lsls	r3, r3, #4
 800cb42:	3332      	adds	r3, #50	; 0x32
 800cb44:	4a33      	ldr	r2, [pc, #204]	; (800cc14 <UART_SetConfig+0x4e4>)
 800cb46:	fba2 2303 	umull	r2, r3, r2, r3
 800cb4a:	095b      	lsrs	r3, r3, #5
 800cb4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb50:	441c      	add	r4, r3
 800cb52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb56:	2200      	movs	r2, #0
 800cb58:	673b      	str	r3, [r7, #112]	; 0x70
 800cb5a:	677a      	str	r2, [r7, #116]	; 0x74
 800cb5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cb60:	4642      	mov	r2, r8
 800cb62:	464b      	mov	r3, r9
 800cb64:	1891      	adds	r1, r2, r2
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	415b      	adcs	r3, r3
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb70:	4641      	mov	r1, r8
 800cb72:	1851      	adds	r1, r2, r1
 800cb74:	6039      	str	r1, [r7, #0]
 800cb76:	4649      	mov	r1, r9
 800cb78:	414b      	adcs	r3, r1
 800cb7a:	607b      	str	r3, [r7, #4]
 800cb7c:	f04f 0200 	mov.w	r2, #0
 800cb80:	f04f 0300 	mov.w	r3, #0
 800cb84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cb88:	4659      	mov	r1, fp
 800cb8a:	00cb      	lsls	r3, r1, #3
 800cb8c:	4651      	mov	r1, sl
 800cb8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb92:	4651      	mov	r1, sl
 800cb94:	00ca      	lsls	r2, r1, #3
 800cb96:	4610      	mov	r0, r2
 800cb98:	4619      	mov	r1, r3
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	4642      	mov	r2, r8
 800cb9e:	189b      	adds	r3, r3, r2
 800cba0:	66bb      	str	r3, [r7, #104]	; 0x68
 800cba2:	464b      	mov	r3, r9
 800cba4:	460a      	mov	r2, r1
 800cba6:	eb42 0303 	adc.w	r3, r2, r3
 800cbaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cbac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	663b      	str	r3, [r7, #96]	; 0x60
 800cbb6:	667a      	str	r2, [r7, #100]	; 0x64
 800cbb8:	f04f 0200 	mov.w	r2, #0
 800cbbc:	f04f 0300 	mov.w	r3, #0
 800cbc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cbc4:	4649      	mov	r1, r9
 800cbc6:	008b      	lsls	r3, r1, #2
 800cbc8:	4641      	mov	r1, r8
 800cbca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbce:	4641      	mov	r1, r8
 800cbd0:	008a      	lsls	r2, r1, #2
 800cbd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cbd6:	f7f3 ff9f 	bl	8000b18 <__aeabi_uldivmod>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	460b      	mov	r3, r1
 800cbde:	4b0d      	ldr	r3, [pc, #52]	; (800cc14 <UART_SetConfig+0x4e4>)
 800cbe0:	fba3 1302 	umull	r1, r3, r3, r2
 800cbe4:	095b      	lsrs	r3, r3, #5
 800cbe6:	2164      	movs	r1, #100	; 0x64
 800cbe8:	fb01 f303 	mul.w	r3, r1, r3
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	011b      	lsls	r3, r3, #4
 800cbf0:	3332      	adds	r3, #50	; 0x32
 800cbf2:	4a08      	ldr	r2, [pc, #32]	; (800cc14 <UART_SetConfig+0x4e4>)
 800cbf4:	fba2 2303 	umull	r2, r3, r2, r3
 800cbf8:	095b      	lsrs	r3, r3, #5
 800cbfa:	f003 020f 	and.w	r2, r3, #15
 800cbfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4422      	add	r2, r4
 800cc06:	609a      	str	r2, [r3, #8]
}
 800cc08:	bf00      	nop
 800cc0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc14:	51eb851f 	.word	0x51eb851f

0800cc18 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d123      	bne.n	800cc72 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cc32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cc36:	683a      	ldr	r2, [r7, #0]
 800cc38:	6851      	ldr	r1, [r2, #4]
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	6892      	ldr	r2, [r2, #8]
 800cc3e:	4311      	orrs	r1, r2
 800cc40:	683a      	ldr	r2, [r7, #0]
 800cc42:	68d2      	ldr	r2, [r2, #12]
 800cc44:	4311      	orrs	r1, r2
 800cc46:	683a      	ldr	r2, [r7, #0]
 800cc48:	6912      	ldr	r2, [r2, #16]
 800cc4a:	4311      	orrs	r1, r2
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	6952      	ldr	r2, [r2, #20]
 800cc50:	4311      	orrs	r1, r2
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	6992      	ldr	r2, [r2, #24]
 800cc56:	4311      	orrs	r1, r2
 800cc58:	683a      	ldr	r2, [r7, #0]
 800cc5a:	69d2      	ldr	r2, [r2, #28]
 800cc5c:	4311      	orrs	r1, r2
 800cc5e:	683a      	ldr	r2, [r7, #0]
 800cc60:	6a12      	ldr	r2, [r2, #32]
 800cc62:	4311      	orrs	r1, r2
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cc68:	430a      	orrs	r2, r1
 800cc6a:	431a      	orrs	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	601a      	str	r2, [r3, #0]
 800cc70:	e028      	b.n	800ccc4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	69d9      	ldr	r1, [r3, #28]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	4319      	orrs	r1, r3
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc88:	430b      	orrs	r3, r1
 800cc8a:	431a      	orrs	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cc98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	6851      	ldr	r1, [r2, #4]
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	6892      	ldr	r2, [r2, #8]
 800cca4:	4311      	orrs	r1, r2
 800cca6:	683a      	ldr	r2, [r7, #0]
 800cca8:	68d2      	ldr	r2, [r2, #12]
 800ccaa:	4311      	orrs	r1, r2
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	6912      	ldr	r2, [r2, #16]
 800ccb0:	4311      	orrs	r1, r2
 800ccb2:	683a      	ldr	r2, [r7, #0]
 800ccb4:	6952      	ldr	r2, [r2, #20]
 800ccb6:	4311      	orrs	r1, r2
 800ccb8:	683a      	ldr	r2, [r7, #0]
 800ccba:	6992      	ldr	r2, [r2, #24]
 800ccbc:	430a      	orrs	r2, r1
 800ccbe:	431a      	orrs	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	370c      	adds	r7, #12
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b085      	sub	sp, #20
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	60f8      	str	r0, [r7, #12]
 800ccda:	60b9      	str	r1, [r7, #8]
 800ccdc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d128      	bne.n	800cd36 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	1e59      	subs	r1, r3, #1
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	011b      	lsls	r3, r3, #4
 800ccfa:	4319      	orrs	r1, r3
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	021b      	lsls	r3, r3, #8
 800cd04:	4319      	orrs	r1, r3
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	031b      	lsls	r3, r3, #12
 800cd0e:	4319      	orrs	r1, r3
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	691b      	ldr	r3, [r3, #16]
 800cd14:	3b01      	subs	r3, #1
 800cd16:	041b      	lsls	r3, r3, #16
 800cd18:	4319      	orrs	r1, r3
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	051b      	lsls	r3, r3, #20
 800cd22:	4319      	orrs	r1, r3
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	699b      	ldr	r3, [r3, #24]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	061b      	lsls	r3, r3, #24
 800cd2c:	430b      	orrs	r3, r1
 800cd2e:	431a      	orrs	r2, r3
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	609a      	str	r2, [r3, #8]
 800cd34:	e02f      	b.n	800cd96 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	68d2      	ldr	r2, [r2, #12]
 800cd46:	3a01      	subs	r2, #1
 800cd48:	0311      	lsls	r1, r2, #12
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	6952      	ldr	r2, [r2, #20]
 800cd4e:	3a01      	subs	r2, #1
 800cd50:	0512      	lsls	r2, r2, #20
 800cd52:	430a      	orrs	r2, r1
 800cd54:	431a      	orrs	r2, r3
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	1e59      	subs	r1, r3, #1
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	011b      	lsls	r3, r3, #4
 800cd70:	4319      	orrs	r1, r3
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	3b01      	subs	r3, #1
 800cd78:	021b      	lsls	r3, r3, #8
 800cd7a:	4319      	orrs	r1, r3
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	3b01      	subs	r3, #1
 800cd82:	041b      	lsls	r3, r3, #16
 800cd84:	4319      	orrs	r1, r3
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	061b      	lsls	r3, r3, #24
 800cd8e:	430b      	orrs	r3, r1
 800cd90:	431a      	orrs	r2, r3
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3714      	adds	r7, #20
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b086      	sub	sp, #24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	0d9b      	lsrs	r3, r3, #22
 800cdba:	059b      	lsls	r3, r3, #22
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	6811      	ldr	r1, [r2, #0]
 800cdc0:	68ba      	ldr	r2, [r7, #8]
 800cdc2:	6852      	ldr	r2, [r2, #4]
 800cdc4:	4311      	orrs	r1, r2
 800cdc6:	68ba      	ldr	r2, [r7, #8]
 800cdc8:	6892      	ldr	r2, [r2, #8]
 800cdca:	3a01      	subs	r2, #1
 800cdcc:	0152      	lsls	r2, r2, #5
 800cdce:	4311      	orrs	r1, r2
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	68d2      	ldr	r2, [r2, #12]
 800cdd4:	0252      	lsls	r2, r2, #9
 800cdd6:	430a      	orrs	r2, r1
 800cdd8:	431a      	orrs	r2, r3
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800cdde:	f7fb fe51 	bl	8008a84 <HAL_GetTick>
 800cde2:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800cde4:	e010      	b.n	800ce08 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdec:	d00c      	beq.n	800ce08 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d007      	beq.n	800ce04 <FMC_SDRAM_SendCommand+0x60>
 800cdf4:	f7fb fe46 	bl	8008a84 <HAL_GetTick>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d201      	bcs.n	800ce08 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800ce04:	2303      	movs	r3, #3
 800ce06:	e006      	b.n	800ce16 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	699b      	ldr	r3, [r3, #24]
 800ce0c:	f003 0320 	and.w	r3, r3, #32
 800ce10:	2b20      	cmp	r3, #32
 800ce12:	d0e8      	beq.n	800cde6 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3718      	adds	r7, #24
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <__itoa>:
 800ce1e:	1e93      	subs	r3, r2, #2
 800ce20:	2b22      	cmp	r3, #34	; 0x22
 800ce22:	b510      	push	{r4, lr}
 800ce24:	460c      	mov	r4, r1
 800ce26:	d904      	bls.n	800ce32 <__itoa+0x14>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	700b      	strb	r3, [r1, #0]
 800ce2c:	461c      	mov	r4, r3
 800ce2e:	4620      	mov	r0, r4
 800ce30:	bd10      	pop	{r4, pc}
 800ce32:	2a0a      	cmp	r2, #10
 800ce34:	d109      	bne.n	800ce4a <__itoa+0x2c>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	da07      	bge.n	800ce4a <__itoa+0x2c>
 800ce3a:	232d      	movs	r3, #45	; 0x2d
 800ce3c:	700b      	strb	r3, [r1, #0]
 800ce3e:	4240      	negs	r0, r0
 800ce40:	2101      	movs	r1, #1
 800ce42:	4421      	add	r1, r4
 800ce44:	f000 f806 	bl	800ce54 <__utoa>
 800ce48:	e7f1      	b.n	800ce2e <__itoa+0x10>
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	e7f9      	b.n	800ce42 <__itoa+0x24>

0800ce4e <itoa>:
 800ce4e:	f7ff bfe6 	b.w	800ce1e <__itoa>
	...

0800ce54 <__utoa>:
 800ce54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce56:	4c1f      	ldr	r4, [pc, #124]	; (800ced4 <__utoa+0x80>)
 800ce58:	b08b      	sub	sp, #44	; 0x2c
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	466e      	mov	r6, sp
 800ce60:	f104 0c20 	add.w	ip, r4, #32
 800ce64:	6820      	ldr	r0, [r4, #0]
 800ce66:	6861      	ldr	r1, [r4, #4]
 800ce68:	4637      	mov	r7, r6
 800ce6a:	c703      	stmia	r7!, {r0, r1}
 800ce6c:	3408      	adds	r4, #8
 800ce6e:	4564      	cmp	r4, ip
 800ce70:	463e      	mov	r6, r7
 800ce72:	d1f7      	bne.n	800ce64 <__utoa+0x10>
 800ce74:	7921      	ldrb	r1, [r4, #4]
 800ce76:	7139      	strb	r1, [r7, #4]
 800ce78:	1e91      	subs	r1, r2, #2
 800ce7a:	6820      	ldr	r0, [r4, #0]
 800ce7c:	6038      	str	r0, [r7, #0]
 800ce7e:	2922      	cmp	r1, #34	; 0x22
 800ce80:	f04f 0100 	mov.w	r1, #0
 800ce84:	d904      	bls.n	800ce90 <__utoa+0x3c>
 800ce86:	7019      	strb	r1, [r3, #0]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	b00b      	add	sp, #44	; 0x2c
 800ce8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce90:	1e58      	subs	r0, r3, #1
 800ce92:	4684      	mov	ip, r0
 800ce94:	fbb5 f7f2 	udiv	r7, r5, r2
 800ce98:	fb02 5617 	mls	r6, r2, r7, r5
 800ce9c:	3628      	adds	r6, #40	; 0x28
 800ce9e:	446e      	add	r6, sp
 800cea0:	460c      	mov	r4, r1
 800cea2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cea6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ceaa:	462e      	mov	r6, r5
 800ceac:	42b2      	cmp	r2, r6
 800ceae:	f101 0101 	add.w	r1, r1, #1
 800ceb2:	463d      	mov	r5, r7
 800ceb4:	d9ee      	bls.n	800ce94 <__utoa+0x40>
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	545a      	strb	r2, [r3, r1]
 800ceba:	1919      	adds	r1, r3, r4
 800cebc:	1aa5      	subs	r5, r4, r2
 800cebe:	42aa      	cmp	r2, r5
 800cec0:	dae3      	bge.n	800ce8a <__utoa+0x36>
 800cec2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cec6:	780e      	ldrb	r6, [r1, #0]
 800cec8:	7006      	strb	r6, [r0, #0]
 800ceca:	3201      	adds	r2, #1
 800cecc:	f801 5901 	strb.w	r5, [r1], #-1
 800ced0:	e7f4      	b.n	800cebc <__utoa+0x68>
 800ced2:	bf00      	nop
 800ced4:	0801379a 	.word	0x0801379a

0800ced8 <memset>:
 800ced8:	4402      	add	r2, r0
 800ceda:	4603      	mov	r3, r0
 800cedc:	4293      	cmp	r3, r2
 800cede:	d100      	bne.n	800cee2 <memset+0xa>
 800cee0:	4770      	bx	lr
 800cee2:	f803 1b01 	strb.w	r1, [r3], #1
 800cee6:	e7f9      	b.n	800cedc <memset+0x4>

0800cee8 <__errno>:
 800cee8:	4b01      	ldr	r3, [pc, #4]	; (800cef0 <__errno+0x8>)
 800ceea:	6818      	ldr	r0, [r3, #0]
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	20000074 	.word	0x20000074

0800cef4 <__libc_init_array>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	4d0d      	ldr	r5, [pc, #52]	; (800cf2c <__libc_init_array+0x38>)
 800cef8:	4c0d      	ldr	r4, [pc, #52]	; (800cf30 <__libc_init_array+0x3c>)
 800cefa:	1b64      	subs	r4, r4, r5
 800cefc:	10a4      	asrs	r4, r4, #2
 800cefe:	2600      	movs	r6, #0
 800cf00:	42a6      	cmp	r6, r4
 800cf02:	d109      	bne.n	800cf18 <__libc_init_array+0x24>
 800cf04:	4d0b      	ldr	r5, [pc, #44]	; (800cf34 <__libc_init_array+0x40>)
 800cf06:	4c0c      	ldr	r4, [pc, #48]	; (800cf38 <__libc_init_array+0x44>)
 800cf08:	f000 ff5e 	bl	800ddc8 <_init>
 800cf0c:	1b64      	subs	r4, r4, r5
 800cf0e:	10a4      	asrs	r4, r4, #2
 800cf10:	2600      	movs	r6, #0
 800cf12:	42a6      	cmp	r6, r4
 800cf14:	d105      	bne.n	800cf22 <__libc_init_array+0x2e>
 800cf16:	bd70      	pop	{r4, r5, r6, pc}
 800cf18:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf1c:	4798      	blx	r3
 800cf1e:	3601      	adds	r6, #1
 800cf20:	e7ee      	b.n	800cf00 <__libc_init_array+0xc>
 800cf22:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf26:	4798      	blx	r3
 800cf28:	3601      	adds	r6, #1
 800cf2a:	e7f2      	b.n	800cf12 <__libc_init_array+0x1e>
 800cf2c:	080137f8 	.word	0x080137f8
 800cf30:	080137f8 	.word	0x080137f8
 800cf34:	080137f8 	.word	0x080137f8
 800cf38:	080137fc 	.word	0x080137fc

0800cf3c <memcpy>:
 800cf3c:	440a      	add	r2, r1
 800cf3e:	4291      	cmp	r1, r2
 800cf40:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf44:	d100      	bne.n	800cf48 <memcpy+0xc>
 800cf46:	4770      	bx	lr
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf52:	4291      	cmp	r1, r2
 800cf54:	d1f9      	bne.n	800cf4a <memcpy+0xe>
 800cf56:	bd10      	pop	{r4, pc}

0800cf58 <pow>:
 800cf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5a:	ed2d 8b02 	vpush	{d8}
 800cf5e:	eeb0 8a40 	vmov.f32	s16, s0
 800cf62:	eef0 8a60 	vmov.f32	s17, s1
 800cf66:	ec55 4b11 	vmov	r4, r5, d1
 800cf6a:	f000 f871 	bl	800d050 <__ieee754_pow>
 800cf6e:	4622      	mov	r2, r4
 800cf70:	462b      	mov	r3, r5
 800cf72:	4620      	mov	r0, r4
 800cf74:	4629      	mov	r1, r5
 800cf76:	ec57 6b10 	vmov	r6, r7, d0
 800cf7a:	f7f3 fd8f 	bl	8000a9c <__aeabi_dcmpun>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d13b      	bne.n	800cffa <pow+0xa2>
 800cf82:	ec51 0b18 	vmov	r0, r1, d8
 800cf86:	2200      	movs	r2, #0
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f7f3 fd55 	bl	8000a38 <__aeabi_dcmpeq>
 800cf8e:	b1b8      	cbz	r0, 800cfc0 <pow+0x68>
 800cf90:	2200      	movs	r2, #0
 800cf92:	2300      	movs	r3, #0
 800cf94:	4620      	mov	r0, r4
 800cf96:	4629      	mov	r1, r5
 800cf98:	f7f3 fd4e 	bl	8000a38 <__aeabi_dcmpeq>
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	d146      	bne.n	800d02e <pow+0xd6>
 800cfa0:	ec45 4b10 	vmov	d0, r4, r5
 800cfa4:	f000 f848 	bl	800d038 <finite>
 800cfa8:	b338      	cbz	r0, 800cffa <pow+0xa2>
 800cfaa:	2200      	movs	r2, #0
 800cfac:	2300      	movs	r3, #0
 800cfae:	4620      	mov	r0, r4
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	f7f3 fd4b 	bl	8000a4c <__aeabi_dcmplt>
 800cfb6:	b300      	cbz	r0, 800cffa <pow+0xa2>
 800cfb8:	f7ff ff96 	bl	800cee8 <__errno>
 800cfbc:	2322      	movs	r3, #34	; 0x22
 800cfbe:	e01b      	b.n	800cff8 <pow+0xa0>
 800cfc0:	ec47 6b10 	vmov	d0, r6, r7
 800cfc4:	f000 f838 	bl	800d038 <finite>
 800cfc8:	b9e0      	cbnz	r0, 800d004 <pow+0xac>
 800cfca:	eeb0 0a48 	vmov.f32	s0, s16
 800cfce:	eef0 0a68 	vmov.f32	s1, s17
 800cfd2:	f000 f831 	bl	800d038 <finite>
 800cfd6:	b1a8      	cbz	r0, 800d004 <pow+0xac>
 800cfd8:	ec45 4b10 	vmov	d0, r4, r5
 800cfdc:	f000 f82c 	bl	800d038 <finite>
 800cfe0:	b180      	cbz	r0, 800d004 <pow+0xac>
 800cfe2:	4632      	mov	r2, r6
 800cfe4:	463b      	mov	r3, r7
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	4639      	mov	r1, r7
 800cfea:	f7f3 fd57 	bl	8000a9c <__aeabi_dcmpun>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d0e2      	beq.n	800cfb8 <pow+0x60>
 800cff2:	f7ff ff79 	bl	800cee8 <__errno>
 800cff6:	2321      	movs	r3, #33	; 0x21
 800cff8:	6003      	str	r3, [r0, #0]
 800cffa:	ecbd 8b02 	vpop	{d8}
 800cffe:	ec47 6b10 	vmov	d0, r6, r7
 800d002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d004:	2200      	movs	r2, #0
 800d006:	2300      	movs	r3, #0
 800d008:	4630      	mov	r0, r6
 800d00a:	4639      	mov	r1, r7
 800d00c:	f7f3 fd14 	bl	8000a38 <__aeabi_dcmpeq>
 800d010:	2800      	cmp	r0, #0
 800d012:	d0f2      	beq.n	800cffa <pow+0xa2>
 800d014:	eeb0 0a48 	vmov.f32	s0, s16
 800d018:	eef0 0a68 	vmov.f32	s1, s17
 800d01c:	f000 f80c 	bl	800d038 <finite>
 800d020:	2800      	cmp	r0, #0
 800d022:	d0ea      	beq.n	800cffa <pow+0xa2>
 800d024:	ec45 4b10 	vmov	d0, r4, r5
 800d028:	f000 f806 	bl	800d038 <finite>
 800d02c:	e7c3      	b.n	800cfb6 <pow+0x5e>
 800d02e:	4f01      	ldr	r7, [pc, #4]	; (800d034 <pow+0xdc>)
 800d030:	2600      	movs	r6, #0
 800d032:	e7e2      	b.n	800cffa <pow+0xa2>
 800d034:	3ff00000 	.word	0x3ff00000

0800d038 <finite>:
 800d038:	b082      	sub	sp, #8
 800d03a:	ed8d 0b00 	vstr	d0, [sp]
 800d03e:	9801      	ldr	r0, [sp, #4]
 800d040:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d044:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d048:	0fc0      	lsrs	r0, r0, #31
 800d04a:	b002      	add	sp, #8
 800d04c:	4770      	bx	lr
	...

0800d050 <__ieee754_pow>:
 800d050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d054:	ed2d 8b06 	vpush	{d8-d10}
 800d058:	b089      	sub	sp, #36	; 0x24
 800d05a:	ed8d 1b00 	vstr	d1, [sp]
 800d05e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d062:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d066:	ea58 0102 	orrs.w	r1, r8, r2
 800d06a:	ec57 6b10 	vmov	r6, r7, d0
 800d06e:	d115      	bne.n	800d09c <__ieee754_pow+0x4c>
 800d070:	19b3      	adds	r3, r6, r6
 800d072:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d076:	4152      	adcs	r2, r2
 800d078:	4299      	cmp	r1, r3
 800d07a:	4b89      	ldr	r3, [pc, #548]	; (800d2a0 <__ieee754_pow+0x250>)
 800d07c:	4193      	sbcs	r3, r2
 800d07e:	f080 84d1 	bcs.w	800da24 <__ieee754_pow+0x9d4>
 800d082:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d086:	4630      	mov	r0, r6
 800d088:	4639      	mov	r1, r7
 800d08a:	f7f3 f8b7 	bl	80001fc <__adddf3>
 800d08e:	ec41 0b10 	vmov	d0, r0, r1
 800d092:	b009      	add	sp, #36	; 0x24
 800d094:	ecbd 8b06 	vpop	{d8-d10}
 800d098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09c:	4b81      	ldr	r3, [pc, #516]	; (800d2a4 <__ieee754_pow+0x254>)
 800d09e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d0a2:	429c      	cmp	r4, r3
 800d0a4:	ee10 aa10 	vmov	sl, s0
 800d0a8:	463d      	mov	r5, r7
 800d0aa:	dc06      	bgt.n	800d0ba <__ieee754_pow+0x6a>
 800d0ac:	d101      	bne.n	800d0b2 <__ieee754_pow+0x62>
 800d0ae:	2e00      	cmp	r6, #0
 800d0b0:	d1e7      	bne.n	800d082 <__ieee754_pow+0x32>
 800d0b2:	4598      	cmp	r8, r3
 800d0b4:	dc01      	bgt.n	800d0ba <__ieee754_pow+0x6a>
 800d0b6:	d10f      	bne.n	800d0d8 <__ieee754_pow+0x88>
 800d0b8:	b172      	cbz	r2, 800d0d8 <__ieee754_pow+0x88>
 800d0ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d0be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d0c2:	ea55 050a 	orrs.w	r5, r5, sl
 800d0c6:	d1dc      	bne.n	800d082 <__ieee754_pow+0x32>
 800d0c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d0cc:	18db      	adds	r3, r3, r3
 800d0ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d0d2:	4152      	adcs	r2, r2
 800d0d4:	429d      	cmp	r5, r3
 800d0d6:	e7d0      	b.n	800d07a <__ieee754_pow+0x2a>
 800d0d8:	2d00      	cmp	r5, #0
 800d0da:	da3b      	bge.n	800d154 <__ieee754_pow+0x104>
 800d0dc:	4b72      	ldr	r3, [pc, #456]	; (800d2a8 <__ieee754_pow+0x258>)
 800d0de:	4598      	cmp	r8, r3
 800d0e0:	dc51      	bgt.n	800d186 <__ieee754_pow+0x136>
 800d0e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d0e6:	4598      	cmp	r8, r3
 800d0e8:	f340 84ab 	ble.w	800da42 <__ieee754_pow+0x9f2>
 800d0ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d0f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0f4:	2b14      	cmp	r3, #20
 800d0f6:	dd0f      	ble.n	800d118 <__ieee754_pow+0xc8>
 800d0f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d0fc:	fa22 f103 	lsr.w	r1, r2, r3
 800d100:	fa01 f303 	lsl.w	r3, r1, r3
 800d104:	4293      	cmp	r3, r2
 800d106:	f040 849c 	bne.w	800da42 <__ieee754_pow+0x9f2>
 800d10a:	f001 0101 	and.w	r1, r1, #1
 800d10e:	f1c1 0302 	rsb	r3, r1, #2
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	b182      	cbz	r2, 800d138 <__ieee754_pow+0xe8>
 800d116:	e05f      	b.n	800d1d8 <__ieee754_pow+0x188>
 800d118:	2a00      	cmp	r2, #0
 800d11a:	d15b      	bne.n	800d1d4 <__ieee754_pow+0x184>
 800d11c:	f1c3 0314 	rsb	r3, r3, #20
 800d120:	fa48 f103 	asr.w	r1, r8, r3
 800d124:	fa01 f303 	lsl.w	r3, r1, r3
 800d128:	4543      	cmp	r3, r8
 800d12a:	f040 8487 	bne.w	800da3c <__ieee754_pow+0x9ec>
 800d12e:	f001 0101 	and.w	r1, r1, #1
 800d132:	f1c1 0302 	rsb	r3, r1, #2
 800d136:	9304      	str	r3, [sp, #16]
 800d138:	4b5c      	ldr	r3, [pc, #368]	; (800d2ac <__ieee754_pow+0x25c>)
 800d13a:	4598      	cmp	r8, r3
 800d13c:	d132      	bne.n	800d1a4 <__ieee754_pow+0x154>
 800d13e:	f1b9 0f00 	cmp.w	r9, #0
 800d142:	f280 8477 	bge.w	800da34 <__ieee754_pow+0x9e4>
 800d146:	4959      	ldr	r1, [pc, #356]	; (800d2ac <__ieee754_pow+0x25c>)
 800d148:	4632      	mov	r2, r6
 800d14a:	463b      	mov	r3, r7
 800d14c:	2000      	movs	r0, #0
 800d14e:	f7f3 fb35 	bl	80007bc <__aeabi_ddiv>
 800d152:	e79c      	b.n	800d08e <__ieee754_pow+0x3e>
 800d154:	2300      	movs	r3, #0
 800d156:	9304      	str	r3, [sp, #16]
 800d158:	2a00      	cmp	r2, #0
 800d15a:	d13d      	bne.n	800d1d8 <__ieee754_pow+0x188>
 800d15c:	4b51      	ldr	r3, [pc, #324]	; (800d2a4 <__ieee754_pow+0x254>)
 800d15e:	4598      	cmp	r8, r3
 800d160:	d1ea      	bne.n	800d138 <__ieee754_pow+0xe8>
 800d162:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d166:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d16a:	ea53 030a 	orrs.w	r3, r3, sl
 800d16e:	f000 8459 	beq.w	800da24 <__ieee754_pow+0x9d4>
 800d172:	4b4f      	ldr	r3, [pc, #316]	; (800d2b0 <__ieee754_pow+0x260>)
 800d174:	429c      	cmp	r4, r3
 800d176:	dd08      	ble.n	800d18a <__ieee754_pow+0x13a>
 800d178:	f1b9 0f00 	cmp.w	r9, #0
 800d17c:	f2c0 8456 	blt.w	800da2c <__ieee754_pow+0x9dc>
 800d180:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d184:	e783      	b.n	800d08e <__ieee754_pow+0x3e>
 800d186:	2302      	movs	r3, #2
 800d188:	e7e5      	b.n	800d156 <__ieee754_pow+0x106>
 800d18a:	f1b9 0f00 	cmp.w	r9, #0
 800d18e:	f04f 0000 	mov.w	r0, #0
 800d192:	f04f 0100 	mov.w	r1, #0
 800d196:	f6bf af7a 	bge.w	800d08e <__ieee754_pow+0x3e>
 800d19a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d19e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d1a2:	e774      	b.n	800d08e <__ieee754_pow+0x3e>
 800d1a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d1a8:	d106      	bne.n	800d1b8 <__ieee754_pow+0x168>
 800d1aa:	4632      	mov	r2, r6
 800d1ac:	463b      	mov	r3, r7
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	4639      	mov	r1, r7
 800d1b2:	f7f3 f9d9 	bl	8000568 <__aeabi_dmul>
 800d1b6:	e76a      	b.n	800d08e <__ieee754_pow+0x3e>
 800d1b8:	4b3e      	ldr	r3, [pc, #248]	; (800d2b4 <__ieee754_pow+0x264>)
 800d1ba:	4599      	cmp	r9, r3
 800d1bc:	d10c      	bne.n	800d1d8 <__ieee754_pow+0x188>
 800d1be:	2d00      	cmp	r5, #0
 800d1c0:	db0a      	blt.n	800d1d8 <__ieee754_pow+0x188>
 800d1c2:	ec47 6b10 	vmov	d0, r6, r7
 800d1c6:	b009      	add	sp, #36	; 0x24
 800d1c8:	ecbd 8b06 	vpop	{d8-d10}
 800d1cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d0:	f000 bd20 	b.w	800dc14 <__ieee754_sqrt>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	9304      	str	r3, [sp, #16]
 800d1d8:	ec47 6b10 	vmov	d0, r6, r7
 800d1dc:	f000 fc62 	bl	800daa4 <fabs>
 800d1e0:	ec51 0b10 	vmov	r0, r1, d0
 800d1e4:	f1ba 0f00 	cmp.w	sl, #0
 800d1e8:	d129      	bne.n	800d23e <__ieee754_pow+0x1ee>
 800d1ea:	b124      	cbz	r4, 800d1f6 <__ieee754_pow+0x1a6>
 800d1ec:	4b2f      	ldr	r3, [pc, #188]	; (800d2ac <__ieee754_pow+0x25c>)
 800d1ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d123      	bne.n	800d23e <__ieee754_pow+0x1ee>
 800d1f6:	f1b9 0f00 	cmp.w	r9, #0
 800d1fa:	da05      	bge.n	800d208 <__ieee754_pow+0x1b8>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	2000      	movs	r0, #0
 800d202:	492a      	ldr	r1, [pc, #168]	; (800d2ac <__ieee754_pow+0x25c>)
 800d204:	f7f3 fada 	bl	80007bc <__aeabi_ddiv>
 800d208:	2d00      	cmp	r5, #0
 800d20a:	f6bf af40 	bge.w	800d08e <__ieee754_pow+0x3e>
 800d20e:	9b04      	ldr	r3, [sp, #16]
 800d210:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d214:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d218:	431c      	orrs	r4, r3
 800d21a:	d108      	bne.n	800d22e <__ieee754_pow+0x1de>
 800d21c:	4602      	mov	r2, r0
 800d21e:	460b      	mov	r3, r1
 800d220:	4610      	mov	r0, r2
 800d222:	4619      	mov	r1, r3
 800d224:	f7f2 ffe8 	bl	80001f8 <__aeabi_dsub>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	e78f      	b.n	800d14e <__ieee754_pow+0xfe>
 800d22e:	9b04      	ldr	r3, [sp, #16]
 800d230:	2b01      	cmp	r3, #1
 800d232:	f47f af2c 	bne.w	800d08e <__ieee754_pow+0x3e>
 800d236:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d23a:	4619      	mov	r1, r3
 800d23c:	e727      	b.n	800d08e <__ieee754_pow+0x3e>
 800d23e:	0feb      	lsrs	r3, r5, #31
 800d240:	3b01      	subs	r3, #1
 800d242:	9306      	str	r3, [sp, #24]
 800d244:	9a06      	ldr	r2, [sp, #24]
 800d246:	9b04      	ldr	r3, [sp, #16]
 800d248:	4313      	orrs	r3, r2
 800d24a:	d102      	bne.n	800d252 <__ieee754_pow+0x202>
 800d24c:	4632      	mov	r2, r6
 800d24e:	463b      	mov	r3, r7
 800d250:	e7e6      	b.n	800d220 <__ieee754_pow+0x1d0>
 800d252:	4b19      	ldr	r3, [pc, #100]	; (800d2b8 <__ieee754_pow+0x268>)
 800d254:	4598      	cmp	r8, r3
 800d256:	f340 80fb 	ble.w	800d450 <__ieee754_pow+0x400>
 800d25a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d25e:	4598      	cmp	r8, r3
 800d260:	4b13      	ldr	r3, [pc, #76]	; (800d2b0 <__ieee754_pow+0x260>)
 800d262:	dd0c      	ble.n	800d27e <__ieee754_pow+0x22e>
 800d264:	429c      	cmp	r4, r3
 800d266:	dc0f      	bgt.n	800d288 <__ieee754_pow+0x238>
 800d268:	f1b9 0f00 	cmp.w	r9, #0
 800d26c:	da0f      	bge.n	800d28e <__ieee754_pow+0x23e>
 800d26e:	2000      	movs	r0, #0
 800d270:	b009      	add	sp, #36	; 0x24
 800d272:	ecbd 8b06 	vpop	{d8-d10}
 800d276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27a:	f000 bcc2 	b.w	800dc02 <__math_oflow>
 800d27e:	429c      	cmp	r4, r3
 800d280:	dbf2      	blt.n	800d268 <__ieee754_pow+0x218>
 800d282:	4b0a      	ldr	r3, [pc, #40]	; (800d2ac <__ieee754_pow+0x25c>)
 800d284:	429c      	cmp	r4, r3
 800d286:	dd19      	ble.n	800d2bc <__ieee754_pow+0x26c>
 800d288:	f1b9 0f00 	cmp.w	r9, #0
 800d28c:	dcef      	bgt.n	800d26e <__ieee754_pow+0x21e>
 800d28e:	2000      	movs	r0, #0
 800d290:	b009      	add	sp, #36	; 0x24
 800d292:	ecbd 8b06 	vpop	{d8-d10}
 800d296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29a:	f000 bca9 	b.w	800dbf0 <__math_uflow>
 800d29e:	bf00      	nop
 800d2a0:	fff00000 	.word	0xfff00000
 800d2a4:	7ff00000 	.word	0x7ff00000
 800d2a8:	433fffff 	.word	0x433fffff
 800d2ac:	3ff00000 	.word	0x3ff00000
 800d2b0:	3fefffff 	.word	0x3fefffff
 800d2b4:	3fe00000 	.word	0x3fe00000
 800d2b8:	41e00000 	.word	0x41e00000
 800d2bc:	4b60      	ldr	r3, [pc, #384]	; (800d440 <__ieee754_pow+0x3f0>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f7f2 ff9a 	bl	80001f8 <__aeabi_dsub>
 800d2c4:	a354      	add	r3, pc, #336	; (adr r3, 800d418 <__ieee754_pow+0x3c8>)
 800d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	460d      	mov	r5, r1
 800d2ce:	f7f3 f94b 	bl	8000568 <__aeabi_dmul>
 800d2d2:	a353      	add	r3, pc, #332	; (adr r3, 800d420 <__ieee754_pow+0x3d0>)
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	4606      	mov	r6, r0
 800d2da:	460f      	mov	r7, r1
 800d2dc:	4620      	mov	r0, r4
 800d2de:	4629      	mov	r1, r5
 800d2e0:	f7f3 f942 	bl	8000568 <__aeabi_dmul>
 800d2e4:	4b57      	ldr	r3, [pc, #348]	; (800d444 <__ieee754_pow+0x3f4>)
 800d2e6:	4682      	mov	sl, r0
 800d2e8:	468b      	mov	fp, r1
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	4629      	mov	r1, r5
 800d2f0:	f7f3 f93a 	bl	8000568 <__aeabi_dmul>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	a14b      	add	r1, pc, #300	; (adr r1, 800d428 <__ieee754_pow+0x3d8>)
 800d2fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2fe:	f7f2 ff7b 	bl	80001f8 <__aeabi_dsub>
 800d302:	4622      	mov	r2, r4
 800d304:	462b      	mov	r3, r5
 800d306:	f7f3 f92f 	bl	8000568 <__aeabi_dmul>
 800d30a:	4602      	mov	r2, r0
 800d30c:	460b      	mov	r3, r1
 800d30e:	2000      	movs	r0, #0
 800d310:	494d      	ldr	r1, [pc, #308]	; (800d448 <__ieee754_pow+0x3f8>)
 800d312:	f7f2 ff71 	bl	80001f8 <__aeabi_dsub>
 800d316:	4622      	mov	r2, r4
 800d318:	4680      	mov	r8, r0
 800d31a:	4689      	mov	r9, r1
 800d31c:	462b      	mov	r3, r5
 800d31e:	4620      	mov	r0, r4
 800d320:	4629      	mov	r1, r5
 800d322:	f7f3 f921 	bl	8000568 <__aeabi_dmul>
 800d326:	4602      	mov	r2, r0
 800d328:	460b      	mov	r3, r1
 800d32a:	4640      	mov	r0, r8
 800d32c:	4649      	mov	r1, r9
 800d32e:	f7f3 f91b 	bl	8000568 <__aeabi_dmul>
 800d332:	a33f      	add	r3, pc, #252	; (adr r3, 800d430 <__ieee754_pow+0x3e0>)
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	f7f3 f916 	bl	8000568 <__aeabi_dmul>
 800d33c:	4602      	mov	r2, r0
 800d33e:	460b      	mov	r3, r1
 800d340:	4650      	mov	r0, sl
 800d342:	4659      	mov	r1, fp
 800d344:	f7f2 ff58 	bl	80001f8 <__aeabi_dsub>
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	4680      	mov	r8, r0
 800d34e:	4689      	mov	r9, r1
 800d350:	4630      	mov	r0, r6
 800d352:	4639      	mov	r1, r7
 800d354:	f7f2 ff52 	bl	80001fc <__adddf3>
 800d358:	2000      	movs	r0, #0
 800d35a:	4632      	mov	r2, r6
 800d35c:	463b      	mov	r3, r7
 800d35e:	4604      	mov	r4, r0
 800d360:	460d      	mov	r5, r1
 800d362:	f7f2 ff49 	bl	80001f8 <__aeabi_dsub>
 800d366:	4602      	mov	r2, r0
 800d368:	460b      	mov	r3, r1
 800d36a:	4640      	mov	r0, r8
 800d36c:	4649      	mov	r1, r9
 800d36e:	f7f2 ff43 	bl	80001f8 <__aeabi_dsub>
 800d372:	9b04      	ldr	r3, [sp, #16]
 800d374:	9a06      	ldr	r2, [sp, #24]
 800d376:	3b01      	subs	r3, #1
 800d378:	4313      	orrs	r3, r2
 800d37a:	4682      	mov	sl, r0
 800d37c:	468b      	mov	fp, r1
 800d37e:	f040 81e7 	bne.w	800d750 <__ieee754_pow+0x700>
 800d382:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d438 <__ieee754_pow+0x3e8>
 800d386:	eeb0 8a47 	vmov.f32	s16, s14
 800d38a:	eef0 8a67 	vmov.f32	s17, s15
 800d38e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d392:	2600      	movs	r6, #0
 800d394:	4632      	mov	r2, r6
 800d396:	463b      	mov	r3, r7
 800d398:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d39c:	f7f2 ff2c 	bl	80001f8 <__aeabi_dsub>
 800d3a0:	4622      	mov	r2, r4
 800d3a2:	462b      	mov	r3, r5
 800d3a4:	f7f3 f8e0 	bl	8000568 <__aeabi_dmul>
 800d3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3ac:	4680      	mov	r8, r0
 800d3ae:	4689      	mov	r9, r1
 800d3b0:	4650      	mov	r0, sl
 800d3b2:	4659      	mov	r1, fp
 800d3b4:	f7f3 f8d8 	bl	8000568 <__aeabi_dmul>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	4640      	mov	r0, r8
 800d3be:	4649      	mov	r1, r9
 800d3c0:	f7f2 ff1c 	bl	80001fc <__adddf3>
 800d3c4:	4632      	mov	r2, r6
 800d3c6:	463b      	mov	r3, r7
 800d3c8:	4680      	mov	r8, r0
 800d3ca:	4689      	mov	r9, r1
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	f7f3 f8ca 	bl	8000568 <__aeabi_dmul>
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	460d      	mov	r5, r1
 800d3da:	4602      	mov	r2, r0
 800d3dc:	4649      	mov	r1, r9
 800d3de:	4640      	mov	r0, r8
 800d3e0:	f7f2 ff0c 	bl	80001fc <__adddf3>
 800d3e4:	4b19      	ldr	r3, [pc, #100]	; (800d44c <__ieee754_pow+0x3fc>)
 800d3e6:	4299      	cmp	r1, r3
 800d3e8:	ec45 4b19 	vmov	d9, r4, r5
 800d3ec:	4606      	mov	r6, r0
 800d3ee:	460f      	mov	r7, r1
 800d3f0:	468b      	mov	fp, r1
 800d3f2:	f340 82f0 	ble.w	800d9d6 <__ieee754_pow+0x986>
 800d3f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d3fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d3fe:	4303      	orrs	r3, r0
 800d400:	f000 81e4 	beq.w	800d7cc <__ieee754_pow+0x77c>
 800d404:	ec51 0b18 	vmov	r0, r1, d8
 800d408:	2200      	movs	r2, #0
 800d40a:	2300      	movs	r3, #0
 800d40c:	f7f3 fb1e 	bl	8000a4c <__aeabi_dcmplt>
 800d410:	3800      	subs	r0, #0
 800d412:	bf18      	it	ne
 800d414:	2001      	movne	r0, #1
 800d416:	e72b      	b.n	800d270 <__ieee754_pow+0x220>
 800d418:	60000000 	.word	0x60000000
 800d41c:	3ff71547 	.word	0x3ff71547
 800d420:	f85ddf44 	.word	0xf85ddf44
 800d424:	3e54ae0b 	.word	0x3e54ae0b
 800d428:	55555555 	.word	0x55555555
 800d42c:	3fd55555 	.word	0x3fd55555
 800d430:	652b82fe 	.word	0x652b82fe
 800d434:	3ff71547 	.word	0x3ff71547
 800d438:	00000000 	.word	0x00000000
 800d43c:	bff00000 	.word	0xbff00000
 800d440:	3ff00000 	.word	0x3ff00000
 800d444:	3fd00000 	.word	0x3fd00000
 800d448:	3fe00000 	.word	0x3fe00000
 800d44c:	408fffff 	.word	0x408fffff
 800d450:	4bd5      	ldr	r3, [pc, #852]	; (800d7a8 <__ieee754_pow+0x758>)
 800d452:	402b      	ands	r3, r5
 800d454:	2200      	movs	r2, #0
 800d456:	b92b      	cbnz	r3, 800d464 <__ieee754_pow+0x414>
 800d458:	4bd4      	ldr	r3, [pc, #848]	; (800d7ac <__ieee754_pow+0x75c>)
 800d45a:	f7f3 f885 	bl	8000568 <__aeabi_dmul>
 800d45e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d462:	460c      	mov	r4, r1
 800d464:	1523      	asrs	r3, r4, #20
 800d466:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d46a:	4413      	add	r3, r2
 800d46c:	9305      	str	r3, [sp, #20]
 800d46e:	4bd0      	ldr	r3, [pc, #832]	; (800d7b0 <__ieee754_pow+0x760>)
 800d470:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d474:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d478:	429c      	cmp	r4, r3
 800d47a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d47e:	dd08      	ble.n	800d492 <__ieee754_pow+0x442>
 800d480:	4bcc      	ldr	r3, [pc, #816]	; (800d7b4 <__ieee754_pow+0x764>)
 800d482:	429c      	cmp	r4, r3
 800d484:	f340 8162 	ble.w	800d74c <__ieee754_pow+0x6fc>
 800d488:	9b05      	ldr	r3, [sp, #20]
 800d48a:	3301      	adds	r3, #1
 800d48c:	9305      	str	r3, [sp, #20]
 800d48e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d492:	2400      	movs	r4, #0
 800d494:	00e3      	lsls	r3, r4, #3
 800d496:	9307      	str	r3, [sp, #28]
 800d498:	4bc7      	ldr	r3, [pc, #796]	; (800d7b8 <__ieee754_pow+0x768>)
 800d49a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d49e:	ed93 7b00 	vldr	d7, [r3]
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	ec53 2b17 	vmov	r2, r3, d7
 800d4a8:	eeb0 9a47 	vmov.f32	s18, s14
 800d4ac:	eef0 9a67 	vmov.f32	s19, s15
 800d4b0:	4682      	mov	sl, r0
 800d4b2:	f7f2 fea1 	bl	80001f8 <__aeabi_dsub>
 800d4b6:	4652      	mov	r2, sl
 800d4b8:	4606      	mov	r6, r0
 800d4ba:	460f      	mov	r7, r1
 800d4bc:	462b      	mov	r3, r5
 800d4be:	ec51 0b19 	vmov	r0, r1, d9
 800d4c2:	f7f2 fe9b 	bl	80001fc <__adddf3>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	2000      	movs	r0, #0
 800d4cc:	49bb      	ldr	r1, [pc, #748]	; (800d7bc <__ieee754_pow+0x76c>)
 800d4ce:	f7f3 f975 	bl	80007bc <__aeabi_ddiv>
 800d4d2:	ec41 0b1a 	vmov	d10, r0, r1
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	460b      	mov	r3, r1
 800d4da:	4630      	mov	r0, r6
 800d4dc:	4639      	mov	r1, r7
 800d4de:	f7f3 f843 	bl	8000568 <__aeabi_dmul>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4e8:	9302      	str	r3, [sp, #8]
 800d4ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d4ee:	46ab      	mov	fp, r5
 800d4f0:	106d      	asrs	r5, r5, #1
 800d4f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d4f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d4fa:	ec41 0b18 	vmov	d8, r0, r1
 800d4fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d502:	2200      	movs	r2, #0
 800d504:	4640      	mov	r0, r8
 800d506:	4649      	mov	r1, r9
 800d508:	4614      	mov	r4, r2
 800d50a:	461d      	mov	r5, r3
 800d50c:	f7f3 f82c 	bl	8000568 <__aeabi_dmul>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	4630      	mov	r0, r6
 800d516:	4639      	mov	r1, r7
 800d518:	f7f2 fe6e 	bl	80001f8 <__aeabi_dsub>
 800d51c:	ec53 2b19 	vmov	r2, r3, d9
 800d520:	4606      	mov	r6, r0
 800d522:	460f      	mov	r7, r1
 800d524:	4620      	mov	r0, r4
 800d526:	4629      	mov	r1, r5
 800d528:	f7f2 fe66 	bl	80001f8 <__aeabi_dsub>
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	4650      	mov	r0, sl
 800d532:	4659      	mov	r1, fp
 800d534:	f7f2 fe60 	bl	80001f8 <__aeabi_dsub>
 800d538:	4642      	mov	r2, r8
 800d53a:	464b      	mov	r3, r9
 800d53c:	f7f3 f814 	bl	8000568 <__aeabi_dmul>
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	4630      	mov	r0, r6
 800d546:	4639      	mov	r1, r7
 800d548:	f7f2 fe56 	bl	80001f8 <__aeabi_dsub>
 800d54c:	ec53 2b1a 	vmov	r2, r3, d10
 800d550:	f7f3 f80a 	bl	8000568 <__aeabi_dmul>
 800d554:	ec53 2b18 	vmov	r2, r3, d8
 800d558:	ec41 0b19 	vmov	d9, r0, r1
 800d55c:	ec51 0b18 	vmov	r0, r1, d8
 800d560:	f7f3 f802 	bl	8000568 <__aeabi_dmul>
 800d564:	a37c      	add	r3, pc, #496	; (adr r3, 800d758 <__ieee754_pow+0x708>)
 800d566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56a:	4604      	mov	r4, r0
 800d56c:	460d      	mov	r5, r1
 800d56e:	f7f2 fffb 	bl	8000568 <__aeabi_dmul>
 800d572:	a37b      	add	r3, pc, #492	; (adr r3, 800d760 <__ieee754_pow+0x710>)
 800d574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d578:	f7f2 fe40 	bl	80001fc <__adddf3>
 800d57c:	4622      	mov	r2, r4
 800d57e:	462b      	mov	r3, r5
 800d580:	f7f2 fff2 	bl	8000568 <__aeabi_dmul>
 800d584:	a378      	add	r3, pc, #480	; (adr r3, 800d768 <__ieee754_pow+0x718>)
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	f7f2 fe37 	bl	80001fc <__adddf3>
 800d58e:	4622      	mov	r2, r4
 800d590:	462b      	mov	r3, r5
 800d592:	f7f2 ffe9 	bl	8000568 <__aeabi_dmul>
 800d596:	a376      	add	r3, pc, #472	; (adr r3, 800d770 <__ieee754_pow+0x720>)
 800d598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59c:	f7f2 fe2e 	bl	80001fc <__adddf3>
 800d5a0:	4622      	mov	r2, r4
 800d5a2:	462b      	mov	r3, r5
 800d5a4:	f7f2 ffe0 	bl	8000568 <__aeabi_dmul>
 800d5a8:	a373      	add	r3, pc, #460	; (adr r3, 800d778 <__ieee754_pow+0x728>)
 800d5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ae:	f7f2 fe25 	bl	80001fc <__adddf3>
 800d5b2:	4622      	mov	r2, r4
 800d5b4:	462b      	mov	r3, r5
 800d5b6:	f7f2 ffd7 	bl	8000568 <__aeabi_dmul>
 800d5ba:	a371      	add	r3, pc, #452	; (adr r3, 800d780 <__ieee754_pow+0x730>)
 800d5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c0:	f7f2 fe1c 	bl	80001fc <__adddf3>
 800d5c4:	4622      	mov	r2, r4
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	460f      	mov	r7, r1
 800d5ca:	462b      	mov	r3, r5
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f7f2 ffca 	bl	8000568 <__aeabi_dmul>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	4630      	mov	r0, r6
 800d5da:	4639      	mov	r1, r7
 800d5dc:	f7f2 ffc4 	bl	8000568 <__aeabi_dmul>
 800d5e0:	4642      	mov	r2, r8
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	460d      	mov	r5, r1
 800d5e6:	464b      	mov	r3, r9
 800d5e8:	ec51 0b18 	vmov	r0, r1, d8
 800d5ec:	f7f2 fe06 	bl	80001fc <__adddf3>
 800d5f0:	ec53 2b19 	vmov	r2, r3, d9
 800d5f4:	f7f2 ffb8 	bl	8000568 <__aeabi_dmul>
 800d5f8:	4622      	mov	r2, r4
 800d5fa:	462b      	mov	r3, r5
 800d5fc:	f7f2 fdfe 	bl	80001fc <__adddf3>
 800d600:	4642      	mov	r2, r8
 800d602:	4682      	mov	sl, r0
 800d604:	468b      	mov	fp, r1
 800d606:	464b      	mov	r3, r9
 800d608:	4640      	mov	r0, r8
 800d60a:	4649      	mov	r1, r9
 800d60c:	f7f2 ffac 	bl	8000568 <__aeabi_dmul>
 800d610:	4b6b      	ldr	r3, [pc, #428]	; (800d7c0 <__ieee754_pow+0x770>)
 800d612:	2200      	movs	r2, #0
 800d614:	4606      	mov	r6, r0
 800d616:	460f      	mov	r7, r1
 800d618:	f7f2 fdf0 	bl	80001fc <__adddf3>
 800d61c:	4652      	mov	r2, sl
 800d61e:	465b      	mov	r3, fp
 800d620:	f7f2 fdec 	bl	80001fc <__adddf3>
 800d624:	2000      	movs	r0, #0
 800d626:	4604      	mov	r4, r0
 800d628:	460d      	mov	r5, r1
 800d62a:	4602      	mov	r2, r0
 800d62c:	460b      	mov	r3, r1
 800d62e:	4640      	mov	r0, r8
 800d630:	4649      	mov	r1, r9
 800d632:	f7f2 ff99 	bl	8000568 <__aeabi_dmul>
 800d636:	4b62      	ldr	r3, [pc, #392]	; (800d7c0 <__ieee754_pow+0x770>)
 800d638:	4680      	mov	r8, r0
 800d63a:	4689      	mov	r9, r1
 800d63c:	2200      	movs	r2, #0
 800d63e:	4620      	mov	r0, r4
 800d640:	4629      	mov	r1, r5
 800d642:	f7f2 fdd9 	bl	80001f8 <__aeabi_dsub>
 800d646:	4632      	mov	r2, r6
 800d648:	463b      	mov	r3, r7
 800d64a:	f7f2 fdd5 	bl	80001f8 <__aeabi_dsub>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4650      	mov	r0, sl
 800d654:	4659      	mov	r1, fp
 800d656:	f7f2 fdcf 	bl	80001f8 <__aeabi_dsub>
 800d65a:	ec53 2b18 	vmov	r2, r3, d8
 800d65e:	f7f2 ff83 	bl	8000568 <__aeabi_dmul>
 800d662:	4622      	mov	r2, r4
 800d664:	4606      	mov	r6, r0
 800d666:	460f      	mov	r7, r1
 800d668:	462b      	mov	r3, r5
 800d66a:	ec51 0b19 	vmov	r0, r1, d9
 800d66e:	f7f2 ff7b 	bl	8000568 <__aeabi_dmul>
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	4630      	mov	r0, r6
 800d678:	4639      	mov	r1, r7
 800d67a:	f7f2 fdbf 	bl	80001fc <__adddf3>
 800d67e:	4606      	mov	r6, r0
 800d680:	460f      	mov	r7, r1
 800d682:	4602      	mov	r2, r0
 800d684:	460b      	mov	r3, r1
 800d686:	4640      	mov	r0, r8
 800d688:	4649      	mov	r1, r9
 800d68a:	f7f2 fdb7 	bl	80001fc <__adddf3>
 800d68e:	a33e      	add	r3, pc, #248	; (adr r3, 800d788 <__ieee754_pow+0x738>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	2000      	movs	r0, #0
 800d696:	4604      	mov	r4, r0
 800d698:	460d      	mov	r5, r1
 800d69a:	f7f2 ff65 	bl	8000568 <__aeabi_dmul>
 800d69e:	4642      	mov	r2, r8
 800d6a0:	ec41 0b18 	vmov	d8, r0, r1
 800d6a4:	464b      	mov	r3, r9
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	4629      	mov	r1, r5
 800d6aa:	f7f2 fda5 	bl	80001f8 <__aeabi_dsub>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	4639      	mov	r1, r7
 800d6b6:	f7f2 fd9f 	bl	80001f8 <__aeabi_dsub>
 800d6ba:	a335      	add	r3, pc, #212	; (adr r3, 800d790 <__ieee754_pow+0x740>)
 800d6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c0:	f7f2 ff52 	bl	8000568 <__aeabi_dmul>
 800d6c4:	a334      	add	r3, pc, #208	; (adr r3, 800d798 <__ieee754_pow+0x748>)
 800d6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ca:	4606      	mov	r6, r0
 800d6cc:	460f      	mov	r7, r1
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	f7f2 ff49 	bl	8000568 <__aeabi_dmul>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4630      	mov	r0, r6
 800d6dc:	4639      	mov	r1, r7
 800d6de:	f7f2 fd8d 	bl	80001fc <__adddf3>
 800d6e2:	9a07      	ldr	r2, [sp, #28]
 800d6e4:	4b37      	ldr	r3, [pc, #220]	; (800d7c4 <__ieee754_pow+0x774>)
 800d6e6:	4413      	add	r3, r2
 800d6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ec:	f7f2 fd86 	bl	80001fc <__adddf3>
 800d6f0:	4682      	mov	sl, r0
 800d6f2:	9805      	ldr	r0, [sp, #20]
 800d6f4:	468b      	mov	fp, r1
 800d6f6:	f7f2 fecd 	bl	8000494 <__aeabi_i2d>
 800d6fa:	9a07      	ldr	r2, [sp, #28]
 800d6fc:	4b32      	ldr	r3, [pc, #200]	; (800d7c8 <__ieee754_pow+0x778>)
 800d6fe:	4413      	add	r3, r2
 800d700:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d704:	4606      	mov	r6, r0
 800d706:	460f      	mov	r7, r1
 800d708:	4652      	mov	r2, sl
 800d70a:	465b      	mov	r3, fp
 800d70c:	ec51 0b18 	vmov	r0, r1, d8
 800d710:	f7f2 fd74 	bl	80001fc <__adddf3>
 800d714:	4642      	mov	r2, r8
 800d716:	464b      	mov	r3, r9
 800d718:	f7f2 fd70 	bl	80001fc <__adddf3>
 800d71c:	4632      	mov	r2, r6
 800d71e:	463b      	mov	r3, r7
 800d720:	f7f2 fd6c 	bl	80001fc <__adddf3>
 800d724:	2000      	movs	r0, #0
 800d726:	4632      	mov	r2, r6
 800d728:	463b      	mov	r3, r7
 800d72a:	4604      	mov	r4, r0
 800d72c:	460d      	mov	r5, r1
 800d72e:	f7f2 fd63 	bl	80001f8 <__aeabi_dsub>
 800d732:	4642      	mov	r2, r8
 800d734:	464b      	mov	r3, r9
 800d736:	f7f2 fd5f 	bl	80001f8 <__aeabi_dsub>
 800d73a:	ec53 2b18 	vmov	r2, r3, d8
 800d73e:	f7f2 fd5b 	bl	80001f8 <__aeabi_dsub>
 800d742:	4602      	mov	r2, r0
 800d744:	460b      	mov	r3, r1
 800d746:	4650      	mov	r0, sl
 800d748:	4659      	mov	r1, fp
 800d74a:	e610      	b.n	800d36e <__ieee754_pow+0x31e>
 800d74c:	2401      	movs	r4, #1
 800d74e:	e6a1      	b.n	800d494 <__ieee754_pow+0x444>
 800d750:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d7a0 <__ieee754_pow+0x750>
 800d754:	e617      	b.n	800d386 <__ieee754_pow+0x336>
 800d756:	bf00      	nop
 800d758:	4a454eef 	.word	0x4a454eef
 800d75c:	3fca7e28 	.word	0x3fca7e28
 800d760:	93c9db65 	.word	0x93c9db65
 800d764:	3fcd864a 	.word	0x3fcd864a
 800d768:	a91d4101 	.word	0xa91d4101
 800d76c:	3fd17460 	.word	0x3fd17460
 800d770:	518f264d 	.word	0x518f264d
 800d774:	3fd55555 	.word	0x3fd55555
 800d778:	db6fabff 	.word	0xdb6fabff
 800d77c:	3fdb6db6 	.word	0x3fdb6db6
 800d780:	33333303 	.word	0x33333303
 800d784:	3fe33333 	.word	0x3fe33333
 800d788:	e0000000 	.word	0xe0000000
 800d78c:	3feec709 	.word	0x3feec709
 800d790:	dc3a03fd 	.word	0xdc3a03fd
 800d794:	3feec709 	.word	0x3feec709
 800d798:	145b01f5 	.word	0x145b01f5
 800d79c:	be3e2fe0 	.word	0xbe3e2fe0
 800d7a0:	00000000 	.word	0x00000000
 800d7a4:	3ff00000 	.word	0x3ff00000
 800d7a8:	7ff00000 	.word	0x7ff00000
 800d7ac:	43400000 	.word	0x43400000
 800d7b0:	0003988e 	.word	0x0003988e
 800d7b4:	000bb679 	.word	0x000bb679
 800d7b8:	080137c0 	.word	0x080137c0
 800d7bc:	3ff00000 	.word	0x3ff00000
 800d7c0:	40080000 	.word	0x40080000
 800d7c4:	080137e0 	.word	0x080137e0
 800d7c8:	080137d0 	.word	0x080137d0
 800d7cc:	a3b3      	add	r3, pc, #716	; (adr r3, 800da9c <__ieee754_pow+0xa4c>)
 800d7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d2:	4640      	mov	r0, r8
 800d7d4:	4649      	mov	r1, r9
 800d7d6:	f7f2 fd11 	bl	80001fc <__adddf3>
 800d7da:	4622      	mov	r2, r4
 800d7dc:	ec41 0b1a 	vmov	d10, r0, r1
 800d7e0:	462b      	mov	r3, r5
 800d7e2:	4630      	mov	r0, r6
 800d7e4:	4639      	mov	r1, r7
 800d7e6:	f7f2 fd07 	bl	80001f8 <__aeabi_dsub>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	ec51 0b1a 	vmov	r0, r1, d10
 800d7f2:	f7f3 f949 	bl	8000a88 <__aeabi_dcmpgt>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f47f ae04 	bne.w	800d404 <__ieee754_pow+0x3b4>
 800d7fc:	4aa2      	ldr	r2, [pc, #648]	; (800da88 <__ieee754_pow+0xa38>)
 800d7fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d802:	4293      	cmp	r3, r2
 800d804:	f340 8107 	ble.w	800da16 <__ieee754_pow+0x9c6>
 800d808:	151b      	asrs	r3, r3, #20
 800d80a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d80e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d812:	fa4a fa03 	asr.w	sl, sl, r3
 800d816:	44da      	add	sl, fp
 800d818:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d81c:	489b      	ldr	r0, [pc, #620]	; (800da8c <__ieee754_pow+0xa3c>)
 800d81e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d822:	4108      	asrs	r0, r1
 800d824:	ea00 030a 	and.w	r3, r0, sl
 800d828:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d82c:	f1c1 0114 	rsb	r1, r1, #20
 800d830:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d834:	fa4a fa01 	asr.w	sl, sl, r1
 800d838:	f1bb 0f00 	cmp.w	fp, #0
 800d83c:	f04f 0200 	mov.w	r2, #0
 800d840:	4620      	mov	r0, r4
 800d842:	4629      	mov	r1, r5
 800d844:	bfb8      	it	lt
 800d846:	f1ca 0a00 	rsblt	sl, sl, #0
 800d84a:	f7f2 fcd5 	bl	80001f8 <__aeabi_dsub>
 800d84e:	ec41 0b19 	vmov	d9, r0, r1
 800d852:	4642      	mov	r2, r8
 800d854:	464b      	mov	r3, r9
 800d856:	ec51 0b19 	vmov	r0, r1, d9
 800d85a:	f7f2 fccf 	bl	80001fc <__adddf3>
 800d85e:	a37a      	add	r3, pc, #488	; (adr r3, 800da48 <__ieee754_pow+0x9f8>)
 800d860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d864:	2000      	movs	r0, #0
 800d866:	4604      	mov	r4, r0
 800d868:	460d      	mov	r5, r1
 800d86a:	f7f2 fe7d 	bl	8000568 <__aeabi_dmul>
 800d86e:	ec53 2b19 	vmov	r2, r3, d9
 800d872:	4606      	mov	r6, r0
 800d874:	460f      	mov	r7, r1
 800d876:	4620      	mov	r0, r4
 800d878:	4629      	mov	r1, r5
 800d87a:	f7f2 fcbd 	bl	80001f8 <__aeabi_dsub>
 800d87e:	4602      	mov	r2, r0
 800d880:	460b      	mov	r3, r1
 800d882:	4640      	mov	r0, r8
 800d884:	4649      	mov	r1, r9
 800d886:	f7f2 fcb7 	bl	80001f8 <__aeabi_dsub>
 800d88a:	a371      	add	r3, pc, #452	; (adr r3, 800da50 <__ieee754_pow+0xa00>)
 800d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d890:	f7f2 fe6a 	bl	8000568 <__aeabi_dmul>
 800d894:	a370      	add	r3, pc, #448	; (adr r3, 800da58 <__ieee754_pow+0xa08>)
 800d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89a:	4680      	mov	r8, r0
 800d89c:	4689      	mov	r9, r1
 800d89e:	4620      	mov	r0, r4
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	f7f2 fe61 	bl	8000568 <__aeabi_dmul>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	4649      	mov	r1, r9
 800d8ae:	f7f2 fca5 	bl	80001fc <__adddf3>
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	460d      	mov	r5, r1
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	4639      	mov	r1, r7
 800d8be:	f7f2 fc9d 	bl	80001fc <__adddf3>
 800d8c2:	4632      	mov	r2, r6
 800d8c4:	463b      	mov	r3, r7
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	4689      	mov	r9, r1
 800d8ca:	f7f2 fc95 	bl	80001f8 <__aeabi_dsub>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	f7f2 fc8f 	bl	80001f8 <__aeabi_dsub>
 800d8da:	4642      	mov	r2, r8
 800d8dc:	4606      	mov	r6, r0
 800d8de:	460f      	mov	r7, r1
 800d8e0:	464b      	mov	r3, r9
 800d8e2:	4640      	mov	r0, r8
 800d8e4:	4649      	mov	r1, r9
 800d8e6:	f7f2 fe3f 	bl	8000568 <__aeabi_dmul>
 800d8ea:	a35d      	add	r3, pc, #372	; (adr r3, 800da60 <__ieee754_pow+0xa10>)
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	460d      	mov	r5, r1
 800d8f4:	f7f2 fe38 	bl	8000568 <__aeabi_dmul>
 800d8f8:	a35b      	add	r3, pc, #364	; (adr r3, 800da68 <__ieee754_pow+0xa18>)
 800d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fe:	f7f2 fc7b 	bl	80001f8 <__aeabi_dsub>
 800d902:	4622      	mov	r2, r4
 800d904:	462b      	mov	r3, r5
 800d906:	f7f2 fe2f 	bl	8000568 <__aeabi_dmul>
 800d90a:	a359      	add	r3, pc, #356	; (adr r3, 800da70 <__ieee754_pow+0xa20>)
 800d90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d910:	f7f2 fc74 	bl	80001fc <__adddf3>
 800d914:	4622      	mov	r2, r4
 800d916:	462b      	mov	r3, r5
 800d918:	f7f2 fe26 	bl	8000568 <__aeabi_dmul>
 800d91c:	a356      	add	r3, pc, #344	; (adr r3, 800da78 <__ieee754_pow+0xa28>)
 800d91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d922:	f7f2 fc69 	bl	80001f8 <__aeabi_dsub>
 800d926:	4622      	mov	r2, r4
 800d928:	462b      	mov	r3, r5
 800d92a:	f7f2 fe1d 	bl	8000568 <__aeabi_dmul>
 800d92e:	a354      	add	r3, pc, #336	; (adr r3, 800da80 <__ieee754_pow+0xa30>)
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	f7f2 fc62 	bl	80001fc <__adddf3>
 800d938:	4622      	mov	r2, r4
 800d93a:	462b      	mov	r3, r5
 800d93c:	f7f2 fe14 	bl	8000568 <__aeabi_dmul>
 800d940:	4602      	mov	r2, r0
 800d942:	460b      	mov	r3, r1
 800d944:	4640      	mov	r0, r8
 800d946:	4649      	mov	r1, r9
 800d948:	f7f2 fc56 	bl	80001f8 <__aeabi_dsub>
 800d94c:	4604      	mov	r4, r0
 800d94e:	460d      	mov	r5, r1
 800d950:	4602      	mov	r2, r0
 800d952:	460b      	mov	r3, r1
 800d954:	4640      	mov	r0, r8
 800d956:	4649      	mov	r1, r9
 800d958:	f7f2 fe06 	bl	8000568 <__aeabi_dmul>
 800d95c:	2200      	movs	r2, #0
 800d95e:	ec41 0b19 	vmov	d9, r0, r1
 800d962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d966:	4620      	mov	r0, r4
 800d968:	4629      	mov	r1, r5
 800d96a:	f7f2 fc45 	bl	80001f8 <__aeabi_dsub>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	ec51 0b19 	vmov	r0, r1, d9
 800d976:	f7f2 ff21 	bl	80007bc <__aeabi_ddiv>
 800d97a:	4632      	mov	r2, r6
 800d97c:	4604      	mov	r4, r0
 800d97e:	460d      	mov	r5, r1
 800d980:	463b      	mov	r3, r7
 800d982:	4640      	mov	r0, r8
 800d984:	4649      	mov	r1, r9
 800d986:	f7f2 fdef 	bl	8000568 <__aeabi_dmul>
 800d98a:	4632      	mov	r2, r6
 800d98c:	463b      	mov	r3, r7
 800d98e:	f7f2 fc35 	bl	80001fc <__adddf3>
 800d992:	4602      	mov	r2, r0
 800d994:	460b      	mov	r3, r1
 800d996:	4620      	mov	r0, r4
 800d998:	4629      	mov	r1, r5
 800d99a:	f7f2 fc2d 	bl	80001f8 <__aeabi_dsub>
 800d99e:	4642      	mov	r2, r8
 800d9a0:	464b      	mov	r3, r9
 800d9a2:	f7f2 fc29 	bl	80001f8 <__aeabi_dsub>
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	4939      	ldr	r1, [pc, #228]	; (800da90 <__ieee754_pow+0xa40>)
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	f7f2 fc23 	bl	80001f8 <__aeabi_dsub>
 800d9b2:	ec41 0b10 	vmov	d0, r0, r1
 800d9b6:	ee10 3a90 	vmov	r3, s1
 800d9ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d9be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9c2:	da2b      	bge.n	800da1c <__ieee754_pow+0x9cc>
 800d9c4:	4650      	mov	r0, sl
 800d9c6:	f000 f877 	bl	800dab8 <scalbn>
 800d9ca:	ec51 0b10 	vmov	r0, r1, d0
 800d9ce:	ec53 2b18 	vmov	r2, r3, d8
 800d9d2:	f7ff bbee 	b.w	800d1b2 <__ieee754_pow+0x162>
 800d9d6:	4b2f      	ldr	r3, [pc, #188]	; (800da94 <__ieee754_pow+0xa44>)
 800d9d8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d9dc:	429e      	cmp	r6, r3
 800d9de:	f77f af0d 	ble.w	800d7fc <__ieee754_pow+0x7ac>
 800d9e2:	4b2d      	ldr	r3, [pc, #180]	; (800da98 <__ieee754_pow+0xa48>)
 800d9e4:	440b      	add	r3, r1
 800d9e6:	4303      	orrs	r3, r0
 800d9e8:	d009      	beq.n	800d9fe <__ieee754_pow+0x9ae>
 800d9ea:	ec51 0b18 	vmov	r0, r1, d8
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	f7f3 f82b 	bl	8000a4c <__aeabi_dcmplt>
 800d9f6:	3800      	subs	r0, #0
 800d9f8:	bf18      	it	ne
 800d9fa:	2001      	movne	r0, #1
 800d9fc:	e448      	b.n	800d290 <__ieee754_pow+0x240>
 800d9fe:	4622      	mov	r2, r4
 800da00:	462b      	mov	r3, r5
 800da02:	f7f2 fbf9 	bl	80001f8 <__aeabi_dsub>
 800da06:	4642      	mov	r2, r8
 800da08:	464b      	mov	r3, r9
 800da0a:	f7f3 f833 	bl	8000a74 <__aeabi_dcmpge>
 800da0e:	2800      	cmp	r0, #0
 800da10:	f43f aef4 	beq.w	800d7fc <__ieee754_pow+0x7ac>
 800da14:	e7e9      	b.n	800d9ea <__ieee754_pow+0x99a>
 800da16:	f04f 0a00 	mov.w	sl, #0
 800da1a:	e71a      	b.n	800d852 <__ieee754_pow+0x802>
 800da1c:	ec51 0b10 	vmov	r0, r1, d0
 800da20:	4619      	mov	r1, r3
 800da22:	e7d4      	b.n	800d9ce <__ieee754_pow+0x97e>
 800da24:	491a      	ldr	r1, [pc, #104]	; (800da90 <__ieee754_pow+0xa40>)
 800da26:	2000      	movs	r0, #0
 800da28:	f7ff bb31 	b.w	800d08e <__ieee754_pow+0x3e>
 800da2c:	2000      	movs	r0, #0
 800da2e:	2100      	movs	r1, #0
 800da30:	f7ff bb2d 	b.w	800d08e <__ieee754_pow+0x3e>
 800da34:	4630      	mov	r0, r6
 800da36:	4639      	mov	r1, r7
 800da38:	f7ff bb29 	b.w	800d08e <__ieee754_pow+0x3e>
 800da3c:	9204      	str	r2, [sp, #16]
 800da3e:	f7ff bb7b 	b.w	800d138 <__ieee754_pow+0xe8>
 800da42:	2300      	movs	r3, #0
 800da44:	f7ff bb65 	b.w	800d112 <__ieee754_pow+0xc2>
 800da48:	00000000 	.word	0x00000000
 800da4c:	3fe62e43 	.word	0x3fe62e43
 800da50:	fefa39ef 	.word	0xfefa39ef
 800da54:	3fe62e42 	.word	0x3fe62e42
 800da58:	0ca86c39 	.word	0x0ca86c39
 800da5c:	be205c61 	.word	0xbe205c61
 800da60:	72bea4d0 	.word	0x72bea4d0
 800da64:	3e663769 	.word	0x3e663769
 800da68:	c5d26bf1 	.word	0xc5d26bf1
 800da6c:	3ebbbd41 	.word	0x3ebbbd41
 800da70:	af25de2c 	.word	0xaf25de2c
 800da74:	3f11566a 	.word	0x3f11566a
 800da78:	16bebd93 	.word	0x16bebd93
 800da7c:	3f66c16c 	.word	0x3f66c16c
 800da80:	5555553e 	.word	0x5555553e
 800da84:	3fc55555 	.word	0x3fc55555
 800da88:	3fe00000 	.word	0x3fe00000
 800da8c:	fff00000 	.word	0xfff00000
 800da90:	3ff00000 	.word	0x3ff00000
 800da94:	4090cbff 	.word	0x4090cbff
 800da98:	3f6f3400 	.word	0x3f6f3400
 800da9c:	652b82fe 	.word	0x652b82fe
 800daa0:	3c971547 	.word	0x3c971547

0800daa4 <fabs>:
 800daa4:	ec51 0b10 	vmov	r0, r1, d0
 800daa8:	ee10 2a10 	vmov	r2, s0
 800daac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dab0:	ec43 2b10 	vmov	d0, r2, r3
 800dab4:	4770      	bx	lr
	...

0800dab8 <scalbn>:
 800dab8:	b570      	push	{r4, r5, r6, lr}
 800daba:	ec55 4b10 	vmov	r4, r5, d0
 800dabe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800dac2:	4606      	mov	r6, r0
 800dac4:	462b      	mov	r3, r5
 800dac6:	b999      	cbnz	r1, 800daf0 <scalbn+0x38>
 800dac8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dacc:	4323      	orrs	r3, r4
 800dace:	d03f      	beq.n	800db50 <scalbn+0x98>
 800dad0:	4b35      	ldr	r3, [pc, #212]	; (800dba8 <scalbn+0xf0>)
 800dad2:	4629      	mov	r1, r5
 800dad4:	ee10 0a10 	vmov	r0, s0
 800dad8:	2200      	movs	r2, #0
 800dada:	f7f2 fd45 	bl	8000568 <__aeabi_dmul>
 800dade:	4b33      	ldr	r3, [pc, #204]	; (800dbac <scalbn+0xf4>)
 800dae0:	429e      	cmp	r6, r3
 800dae2:	4604      	mov	r4, r0
 800dae4:	460d      	mov	r5, r1
 800dae6:	da10      	bge.n	800db0a <scalbn+0x52>
 800dae8:	a327      	add	r3, pc, #156	; (adr r3, 800db88 <scalbn+0xd0>)
 800daea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daee:	e01f      	b.n	800db30 <scalbn+0x78>
 800daf0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800daf4:	4291      	cmp	r1, r2
 800daf6:	d10c      	bne.n	800db12 <scalbn+0x5a>
 800daf8:	ee10 2a10 	vmov	r2, s0
 800dafc:	4620      	mov	r0, r4
 800dafe:	4629      	mov	r1, r5
 800db00:	f7f2 fb7c 	bl	80001fc <__adddf3>
 800db04:	4604      	mov	r4, r0
 800db06:	460d      	mov	r5, r1
 800db08:	e022      	b.n	800db50 <scalbn+0x98>
 800db0a:	460b      	mov	r3, r1
 800db0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800db10:	3936      	subs	r1, #54	; 0x36
 800db12:	f24c 3250 	movw	r2, #50000	; 0xc350
 800db16:	4296      	cmp	r6, r2
 800db18:	dd0d      	ble.n	800db36 <scalbn+0x7e>
 800db1a:	2d00      	cmp	r5, #0
 800db1c:	a11c      	add	r1, pc, #112	; (adr r1, 800db90 <scalbn+0xd8>)
 800db1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db22:	da02      	bge.n	800db2a <scalbn+0x72>
 800db24:	a11c      	add	r1, pc, #112	; (adr r1, 800db98 <scalbn+0xe0>)
 800db26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db2a:	a319      	add	r3, pc, #100	; (adr r3, 800db90 <scalbn+0xd8>)
 800db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db30:	f7f2 fd1a 	bl	8000568 <__aeabi_dmul>
 800db34:	e7e6      	b.n	800db04 <scalbn+0x4c>
 800db36:	1872      	adds	r2, r6, r1
 800db38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800db3c:	428a      	cmp	r2, r1
 800db3e:	dcec      	bgt.n	800db1a <scalbn+0x62>
 800db40:	2a00      	cmp	r2, #0
 800db42:	dd08      	ble.n	800db56 <scalbn+0x9e>
 800db44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800db50:	ec45 4b10 	vmov	d0, r4, r5
 800db54:	bd70      	pop	{r4, r5, r6, pc}
 800db56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800db5a:	da08      	bge.n	800db6e <scalbn+0xb6>
 800db5c:	2d00      	cmp	r5, #0
 800db5e:	a10a      	add	r1, pc, #40	; (adr r1, 800db88 <scalbn+0xd0>)
 800db60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db64:	dac0      	bge.n	800dae8 <scalbn+0x30>
 800db66:	a10e      	add	r1, pc, #56	; (adr r1, 800dba0 <scalbn+0xe8>)
 800db68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db6c:	e7bc      	b.n	800dae8 <scalbn+0x30>
 800db6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db72:	3236      	adds	r2, #54	; 0x36
 800db74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800db7c:	4620      	mov	r0, r4
 800db7e:	4b0c      	ldr	r3, [pc, #48]	; (800dbb0 <scalbn+0xf8>)
 800db80:	2200      	movs	r2, #0
 800db82:	e7d5      	b.n	800db30 <scalbn+0x78>
 800db84:	f3af 8000 	nop.w
 800db88:	c2f8f359 	.word	0xc2f8f359
 800db8c:	01a56e1f 	.word	0x01a56e1f
 800db90:	8800759c 	.word	0x8800759c
 800db94:	7e37e43c 	.word	0x7e37e43c
 800db98:	8800759c 	.word	0x8800759c
 800db9c:	fe37e43c 	.word	0xfe37e43c
 800dba0:	c2f8f359 	.word	0xc2f8f359
 800dba4:	81a56e1f 	.word	0x81a56e1f
 800dba8:	43500000 	.word	0x43500000
 800dbac:	ffff3cb0 	.word	0xffff3cb0
 800dbb0:	3c900000 	.word	0x3c900000

0800dbb4 <with_errno>:
 800dbb4:	b570      	push	{r4, r5, r6, lr}
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	460d      	mov	r5, r1
 800dbba:	4616      	mov	r6, r2
 800dbbc:	f7ff f994 	bl	800cee8 <__errno>
 800dbc0:	4629      	mov	r1, r5
 800dbc2:	6006      	str	r6, [r0, #0]
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}

0800dbc8 <xflow>:
 800dbc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbca:	4614      	mov	r4, r2
 800dbcc:	461d      	mov	r5, r3
 800dbce:	b108      	cbz	r0, 800dbd4 <xflow+0xc>
 800dbd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dbd4:	e9cd 2300 	strd	r2, r3, [sp]
 800dbd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbdc:	4620      	mov	r0, r4
 800dbde:	4629      	mov	r1, r5
 800dbe0:	f7f2 fcc2 	bl	8000568 <__aeabi_dmul>
 800dbe4:	2222      	movs	r2, #34	; 0x22
 800dbe6:	b003      	add	sp, #12
 800dbe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbec:	f7ff bfe2 	b.w	800dbb4 <with_errno>

0800dbf0 <__math_uflow>:
 800dbf0:	b508      	push	{r3, lr}
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dbf8:	f7ff ffe6 	bl	800dbc8 <xflow>
 800dbfc:	ec41 0b10 	vmov	d0, r0, r1
 800dc00:	bd08      	pop	{r3, pc}

0800dc02 <__math_oflow>:
 800dc02:	b508      	push	{r3, lr}
 800dc04:	2200      	movs	r2, #0
 800dc06:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800dc0a:	f7ff ffdd 	bl	800dbc8 <xflow>
 800dc0e:	ec41 0b10 	vmov	d0, r0, r1
 800dc12:	bd08      	pop	{r3, pc}

0800dc14 <__ieee754_sqrt>:
 800dc14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc18:	ec55 4b10 	vmov	r4, r5, d0
 800dc1c:	4e67      	ldr	r6, [pc, #412]	; (800ddbc <__ieee754_sqrt+0x1a8>)
 800dc1e:	43ae      	bics	r6, r5
 800dc20:	ee10 0a10 	vmov	r0, s0
 800dc24:	ee10 2a10 	vmov	r2, s0
 800dc28:	4629      	mov	r1, r5
 800dc2a:	462b      	mov	r3, r5
 800dc2c:	d10d      	bne.n	800dc4a <__ieee754_sqrt+0x36>
 800dc2e:	f7f2 fc9b 	bl	8000568 <__aeabi_dmul>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4620      	mov	r0, r4
 800dc38:	4629      	mov	r1, r5
 800dc3a:	f7f2 fadf 	bl	80001fc <__adddf3>
 800dc3e:	4604      	mov	r4, r0
 800dc40:	460d      	mov	r5, r1
 800dc42:	ec45 4b10 	vmov	d0, r4, r5
 800dc46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4a:	2d00      	cmp	r5, #0
 800dc4c:	dc0b      	bgt.n	800dc66 <__ieee754_sqrt+0x52>
 800dc4e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dc52:	4326      	orrs	r6, r4
 800dc54:	d0f5      	beq.n	800dc42 <__ieee754_sqrt+0x2e>
 800dc56:	b135      	cbz	r5, 800dc66 <__ieee754_sqrt+0x52>
 800dc58:	f7f2 face 	bl	80001f8 <__aeabi_dsub>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	460b      	mov	r3, r1
 800dc60:	f7f2 fdac 	bl	80007bc <__aeabi_ddiv>
 800dc64:	e7eb      	b.n	800dc3e <__ieee754_sqrt+0x2a>
 800dc66:	1509      	asrs	r1, r1, #20
 800dc68:	f000 808d 	beq.w	800dd86 <__ieee754_sqrt+0x172>
 800dc6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc70:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800dc74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc78:	07c9      	lsls	r1, r1, #31
 800dc7a:	bf5c      	itt	pl
 800dc7c:	005b      	lslpl	r3, r3, #1
 800dc7e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800dc82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dc86:	bf58      	it	pl
 800dc88:	0052      	lslpl	r2, r2, #1
 800dc8a:	2500      	movs	r5, #0
 800dc8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dc90:	1076      	asrs	r6, r6, #1
 800dc92:	0052      	lsls	r2, r2, #1
 800dc94:	f04f 0e16 	mov.w	lr, #22
 800dc98:	46ac      	mov	ip, r5
 800dc9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dc9e:	eb0c 0001 	add.w	r0, ip, r1
 800dca2:	4298      	cmp	r0, r3
 800dca4:	bfde      	ittt	le
 800dca6:	1a1b      	suble	r3, r3, r0
 800dca8:	eb00 0c01 	addle.w	ip, r0, r1
 800dcac:	186d      	addle	r5, r5, r1
 800dcae:	005b      	lsls	r3, r3, #1
 800dcb0:	f1be 0e01 	subs.w	lr, lr, #1
 800dcb4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dcb8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dcbc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dcc0:	d1ed      	bne.n	800dc9e <__ieee754_sqrt+0x8a>
 800dcc2:	4674      	mov	r4, lr
 800dcc4:	2720      	movs	r7, #32
 800dcc6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800dcca:	4563      	cmp	r3, ip
 800dccc:	eb01 000e 	add.w	r0, r1, lr
 800dcd0:	dc02      	bgt.n	800dcd8 <__ieee754_sqrt+0xc4>
 800dcd2:	d113      	bne.n	800dcfc <__ieee754_sqrt+0xe8>
 800dcd4:	4290      	cmp	r0, r2
 800dcd6:	d811      	bhi.n	800dcfc <__ieee754_sqrt+0xe8>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	eb00 0e01 	add.w	lr, r0, r1
 800dcde:	da57      	bge.n	800dd90 <__ieee754_sqrt+0x17c>
 800dce0:	f1be 0f00 	cmp.w	lr, #0
 800dce4:	db54      	blt.n	800dd90 <__ieee754_sqrt+0x17c>
 800dce6:	f10c 0801 	add.w	r8, ip, #1
 800dcea:	eba3 030c 	sub.w	r3, r3, ip
 800dcee:	4290      	cmp	r0, r2
 800dcf0:	bf88      	it	hi
 800dcf2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dcf6:	1a12      	subs	r2, r2, r0
 800dcf8:	440c      	add	r4, r1
 800dcfa:	46c4      	mov	ip, r8
 800dcfc:	005b      	lsls	r3, r3, #1
 800dcfe:	3f01      	subs	r7, #1
 800dd00:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dd04:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dd08:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dd0c:	d1dd      	bne.n	800dcca <__ieee754_sqrt+0xb6>
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	d01b      	beq.n	800dd4a <__ieee754_sqrt+0x136>
 800dd12:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ddc0 <__ieee754_sqrt+0x1ac>
 800dd16:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ddc4 <__ieee754_sqrt+0x1b0>
 800dd1a:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd1e:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd22:	f7f2 fa69 	bl	80001f8 <__aeabi_dsub>
 800dd26:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	4640      	mov	r0, r8
 800dd30:	4649      	mov	r1, r9
 800dd32:	f7f2 fe95 	bl	8000a60 <__aeabi_dcmple>
 800dd36:	b140      	cbz	r0, 800dd4a <__ieee754_sqrt+0x136>
 800dd38:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dd3c:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd40:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd44:	d126      	bne.n	800dd94 <__ieee754_sqrt+0x180>
 800dd46:	3501      	adds	r5, #1
 800dd48:	463c      	mov	r4, r7
 800dd4a:	106a      	asrs	r2, r5, #1
 800dd4c:	0863      	lsrs	r3, r4, #1
 800dd4e:	07e9      	lsls	r1, r5, #31
 800dd50:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dd54:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dd58:	bf48      	it	mi
 800dd5a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dd5e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800dd62:	461c      	mov	r4, r3
 800dd64:	e76d      	b.n	800dc42 <__ieee754_sqrt+0x2e>
 800dd66:	0ad3      	lsrs	r3, r2, #11
 800dd68:	3815      	subs	r0, #21
 800dd6a:	0552      	lsls	r2, r2, #21
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d0fa      	beq.n	800dd66 <__ieee754_sqrt+0x152>
 800dd70:	02dc      	lsls	r4, r3, #11
 800dd72:	d50a      	bpl.n	800dd8a <__ieee754_sqrt+0x176>
 800dd74:	f1c1 0420 	rsb	r4, r1, #32
 800dd78:	fa22 f404 	lsr.w	r4, r2, r4
 800dd7c:	1e4d      	subs	r5, r1, #1
 800dd7e:	408a      	lsls	r2, r1
 800dd80:	4323      	orrs	r3, r4
 800dd82:	1b41      	subs	r1, r0, r5
 800dd84:	e772      	b.n	800dc6c <__ieee754_sqrt+0x58>
 800dd86:	4608      	mov	r0, r1
 800dd88:	e7f0      	b.n	800dd6c <__ieee754_sqrt+0x158>
 800dd8a:	005b      	lsls	r3, r3, #1
 800dd8c:	3101      	adds	r1, #1
 800dd8e:	e7ef      	b.n	800dd70 <__ieee754_sqrt+0x15c>
 800dd90:	46e0      	mov	r8, ip
 800dd92:	e7aa      	b.n	800dcea <__ieee754_sqrt+0xd6>
 800dd94:	f7f2 fa32 	bl	80001fc <__adddf3>
 800dd98:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	460b      	mov	r3, r1
 800dda0:	4640      	mov	r0, r8
 800dda2:	4649      	mov	r1, r9
 800dda4:	f7f2 fe52 	bl	8000a4c <__aeabi_dcmplt>
 800dda8:	b120      	cbz	r0, 800ddb4 <__ieee754_sqrt+0x1a0>
 800ddaa:	1ca0      	adds	r0, r4, #2
 800ddac:	bf08      	it	eq
 800ddae:	3501      	addeq	r5, #1
 800ddb0:	3402      	adds	r4, #2
 800ddb2:	e7ca      	b.n	800dd4a <__ieee754_sqrt+0x136>
 800ddb4:	3401      	adds	r4, #1
 800ddb6:	f024 0401 	bic.w	r4, r4, #1
 800ddba:	e7c6      	b.n	800dd4a <__ieee754_sqrt+0x136>
 800ddbc:	7ff00000 	.word	0x7ff00000
 800ddc0:	20000078 	.word	0x20000078
 800ddc4:	20000080 	.word	0x20000080

0800ddc8 <_init>:
 800ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddca:	bf00      	nop
 800ddcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddce:	bc08      	pop	{r3}
 800ddd0:	469e      	mov	lr, r3
 800ddd2:	4770      	bx	lr

0800ddd4 <_fini>:
 800ddd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd6:	bf00      	nop
 800ddd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddda:	bc08      	pop	{r3}
 800dddc:	469e      	mov	lr, r3
 800ddde:	4770      	bx	lr
